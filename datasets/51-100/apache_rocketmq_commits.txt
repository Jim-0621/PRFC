File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -49,6 +49,7 @@
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
+import org.apache.rocketmq.common.utils.ExceptionUtils;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
@@ -602,7 +603,7 @@ public void invokeAsyncImpl(final Channel channel, final RemotingCommand request
             })
             .thenAccept(responseFuture -> invokeCallback.operationSucceed(responseFuture.getResponseCommand()))
             .exceptionally(t -> {
-                invokeCallback.operationFail(t);
+                invokeCallback.operationFail(ExceptionUtils.getRealException(t));
                 return null;
             });
     }

File: store/src/main/java/org/apache/rocketmq/store/ConsumeQueueExt.java
Patch:
@@ -33,7 +33,7 @@
  * such as message store time, filter bit map and etc.
  * <p/>
  * <li>1. This class is used only by {@link ConsumeQueue}</li>
- * <li>2. And is week reliable.</li>
+ * <li>2. And is weakly reliable.</li>
  * <li>3. Be careful, address returned is always less than 0.</li>
  * <li>4. Pls keep this file small.</li>
  */

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -517,11 +517,9 @@ public void shutdown() {
             if (this.compactionService != null) {
                 this.compactionService.shutdown();
             }
-
-            if (messageStoreConfig.isRocksdbCQDoubleWriteEnable()) {
+            if (messageStoreConfig.isRocksdbCQDoubleWriteEnable() && this.rocksDBMessageStore != null) {
                 this.rocksDBMessageStore.consumeQueueStore.shutdown();
             }
-
             this.flushConsumeQueueService.shutdown();
             this.allocateMappedFileService.shutdown();
             this.storeCheckpoint.flush();

File: store/src/main/java/org/apache/rocketmq/store/queue/RocksDBConsumeQueueOffsetTable.java
Patch:
@@ -144,7 +144,7 @@ private void loadMaxConsumeQueueOffsets() {
         Function<OffsetEntry, Boolean> predicate = entry -> entry.type == OffsetEntryType.MAXIMUM;
         Consumer<OffsetEntry> fn = entry -> {
             topicQueueMaxCqOffset.putIfAbsent(entry.topic + "-" + entry.queueId, entry.offset);
-            ROCKSDB_LOG.info("Max {}:{} --> {}|{}", entry.topic, entry.queueId, entry.offset, entry.commitLogOffset);
+            log.info("LoadMaxConsumeQueueOffsets Max {}:{} --> {}|{}", entry.topic, entry.queueId, entry.offset, entry.commitLogOffset);
         };
         try {
             forEach(predicate, fn);

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RequestCode.java
Patch:
@@ -219,6 +219,7 @@ public class RequestCode {
     public static final int GET_SUBSCRIPTIONGROUP_CONFIG = 352;
     public static final int UPDATE_AND_GET_GROUP_FORBIDDEN = 353;
     public static final int CHECK_ROCKSDB_CQ_WRITE_PROGRESS = 354;
+    public static final int EXPORT_ROCKSDB_CONFIG_TO_JSON = 355;
 
     public static final int LITE_PULL_MESSAGE = 361;
     public static final int RECALL_MESSAGE = 370;

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -583,7 +583,7 @@ public DispatchRequest checkMessageAndReturnSize(java.nio.ByteBuffer byteBuffer,
                             }
                         }
                     }
-                    if (expectedCRC > 0) {
+                    if (expectedCRC >= 0) {
                         ByteBuffer tmpBuffer = byteBuffer.duplicate();
                         tmpBuffer.position(tmpBuffer.position() - totalSize);
                         tmpBuffer.limit(tmpBuffer.position() + totalSize - CommitLog.CRC32_RESERVED_LEN);

File: common/src/main/java/org/apache/rocketmq/common/config/AbstractRocksDBStorage.java
Patch:
@@ -365,7 +365,7 @@ public synchronized boolean start() {
         }
         if (postLoad()) {
             this.loaded = true;
-            LOGGER.info("RocksDB[{}] starts OK", this.dbPath);
+            LOGGER.info("RocksDB [{}] starts OK", this.dbPath);
             this.closed = false;
             return true;
         } else {
@@ -437,9 +437,9 @@ public synchronized boolean shutdown() {
             this.options = null;
 
             this.loaded = false;
-            LOGGER.info("shutdown OK. {}", this.dbPath);
+            LOGGER.info("RocksDB shutdown OK. {}", this.dbPath);
         } catch (Exception e) {
-            LOGGER.error("shutdown Failed. {}", this.dbPath, e);
+            LOGGER.error("RocksDB shutdown failed. {}", this.dbPath, e);
             return false;
         }
         return true;

File: broker/src/main/java/org/apache/rocketmq/broker/coldctr/ColdDataCgCtrService.java
Patch:
@@ -24,8 +24,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicLong;
 
-import com.alibaba.fastjson.JSONObject;
-
+import com.alibaba.fastjson2.JSONObject;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.MixAll;

File: broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOrderInfoManager.java
Patch:
@@ -281,7 +281,7 @@ protected void autoClean() {
                 continue;
             }
 
-            if (this.brokerController.getSubscriptionGroupManager().getSubscriptionGroupTable().get(group) == null) {
+            if (!this.brokerController.getSubscriptionGroupManager().containsSubscriptionGroup(group)) {
                 iterator.remove();
                 log.info("Group not exist, Clean order info, {}:{}", topicAtGroup, qs);
                 continue;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -424,7 +424,7 @@ private RemotingCommand getSubscriptionGroup(ChannelHandlerContext ctx,
         GetSubscriptionGroupConfigRequestHeader requestHeader = (GetSubscriptionGroupConfigRequestHeader) request.decodeCommandCustomHeader(GetSubscriptionGroupConfigRequestHeader.class);
         final RemotingCommand response = RemotingCommand.createResponseCommand(null);
 
-        SubscriptionGroupConfig groupConfig = this.brokerController.getSubscriptionGroupManager().getSubscriptionGroupTable().get(requestHeader.getGroup());
+        SubscriptionGroupConfig groupConfig = this.brokerController.getSubscriptionGroupManager().findSubscriptionGroupConfig(requestHeader.getGroup());
         if (groupConfig == null) {
             LOGGER.error("No group in this broker, client: {} group: {}", ctx.channel().remoteAddress(), requestHeader.getGroup());
             response.setCode(ResponseCode.SUBSCRIPTION_GROUP_NOT_EXIST);
@@ -2444,7 +2444,7 @@ private RemotingCommand consumeMessageDirectly(ChannelHandlerContext ctx,
         }
         // groupSysFlag
         if (StringUtils.isNotEmpty(requestHeader.getConsumerGroup())) {
-            SubscriptionGroupConfig groupConfig = brokerController.getSubscriptionGroupManager().getSubscriptionGroupTable().get(requestHeader.getConsumerGroup());
+            SubscriptionGroupConfig groupConfig = brokerController.getSubscriptionGroupManager().findSubscriptionGroupConfig(requestHeader.getConsumerGroup());
             if (groupConfig != null) {
                 request.addExtField("groupSysFlag", String.valueOf(groupConfig.getGroupSysFlag()));
             }
@@ -2933,7 +2933,7 @@ private RemotingCommand getTopicConfig(ChannelHandlerContext ctx,
         GetTopicConfigRequestHeader requestHeader = (GetTopicConfigRequestHeader) request.decodeCommandCustomHeader(GetTopicConfigRequestHeader.class);
         final RemotingCommand response = RemotingCommand.createResponseCommand(null);
 
-        TopicConfig topicConfig = this.brokerController.getTopicConfigManager().getTopicConfigTable().get(requestHeader.getTopic());
+        TopicConfig topicConfig = this.brokerController.getTopicConfigManager().selectTopicConfig(requestHeader.getTopic());
         if (topicConfig == null) {
             LOGGER.error("No topic in this broker, client: {} topic: {}", ctx.channel().remoteAddress(), requestHeader.getTopic());
             //be care of the response code, should set "not-exist" explicitly

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopBufferMergeService.java
Patch:
@@ -197,12 +197,12 @@ private void scanGarbage() {
             String topic = keyArray[0];
             String cid = keyArray[1];
             if (brokerController.getTopicConfigManager().selectTopicConfig(topic) == null) {
-                POP_LOGGER.info("[PopBuffer]remove not exit topic {} in buffer!", topic);
+                POP_LOGGER.info("[PopBuffer]remove nonexistent topic {} in buffer!", topic);
                 iterator.remove();
                 continue;
             }
-            if (!brokerController.getSubscriptionGroupManager().getSubscriptionGroupTable().containsKey(cid)) {
-                POP_LOGGER.info("[PopBuffer]remove not exit sub {} of topic {} in buffer!", cid, topic);
+            if (!brokerController.getSubscriptionGroupManager().containsSubscriptionGroup(cid)) {
+                POP_LOGGER.info("[PopBuffer]remove nonexistent subscription group {} of topic {} in buffer!", cid, topic);
                 iterator.remove();
                 continue;
             }

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -776,7 +776,7 @@ private void onExceptionImpl(final String brokerName,
         final DefaultMQProducerImpl producer
     ) {
         int tmp = curTimes.incrementAndGet();
-        if (needRetry && tmp <= timesTotal) {
+        if (needRetry && tmp <= timesTotal && timeoutMillis > 0) {
             String retryBrokerName = brokerName;//by default, it will send to the same broker
             if (topicPublishInfo != null) { //select one message queue accordingly, in order to determine which broker to send
                 MessageQueue mqChosen = producer.selectOneMessageQueue(topicPublishInfo, brokerName, false);

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/core/MessageStoreFetcherImpl.java
Patch:
@@ -56,7 +56,6 @@ public class MessageStoreFetcherImpl implements MessageStoreFetcher {
     private final String brokerName;
     private final MetadataStore metadataStore;
     private final MessageStoreConfig storeConfig;
-    private final org.apache.rocketmq.store.config.MessageStoreConfig messageStoreConfig;
     private final TieredMessageStore messageStore;
     private final IndexService indexService;
     private final FlatFileStore flatFileStore;
@@ -72,7 +71,6 @@ public MessageStoreFetcherImpl(TieredMessageStore messageStore, MessageStoreConf
         FlatFileStore flatFileStore, IndexService indexService) {
 
         this.storeConfig = storeConfig;
-        this.messageStoreConfig = messageStore.getMessageStoreConfig();
         this.brokerName = storeConfig.getBrokerName();
         this.flatFileStore = flatFileStore;
         this.messageStore = messageStore;
@@ -150,7 +148,8 @@ protected GetMessageResultExt getMessageFromCache(
             if (result.getMessageCount() == maxCount) {
                 break;
             }
-            if (result.getBufferTotalSize() >= messageStoreConfig.getMaxTransferBytesOnMessageInMemory()) {
+            long maxTransferBytes = messageStore.getMessageStoreConfig().getMaxTransferBytesOnMessageInMemory();
+            if (result.getBufferTotalSize() >= maxTransferBytes) {
                 break;
             }
         }

File: test/src/test/java/org/apache/rocketmq/test/base/IntegrationTestBase.java
Patch:
@@ -138,6 +138,7 @@ public static BrokerController createAndStartBroker(String nsAddr) {
         brokerConfig.setEnableCalcFilterBitMap(true);
         brokerConfig.setAppendAckAsync(true);
         brokerConfig.setAppendCkAsync(true);
+        brokerConfig.setRecallMessageEnable(true);
         storeConfig.setEnableConsumeQueueExt(true);
         brokerConfig.setLoadBalancePollNameServerInterval(500);
         storeConfig.setStorePathRootDir(baseDir);

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/core/MessageStoreDispatcherImplTest.java
Patch:
@@ -106,6 +106,7 @@ public void dispatchFromCommitLogTest() throws Exception {
         Mockito.when(messageStore.getStoreExecutor()).thenReturn(executor);
         Mockito.when(messageStore.getFlatFileStore()).thenReturn(fileStore);
         Mockito.when(messageStore.getIndexService()).thenReturn(indexService);
+        Mockito.when(messageStore.getMessageStoreConfig()).thenReturn(new org.apache.rocketmq.store.config.MessageStoreConfig());
 
         // mock message
         ByteBuffer buffer = MessageFormatUtilTest.buildMockedMessageBuffer();

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/FlatFileInterface.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.rocketmq.tieredstore.file;
 
 import java.nio.ByteBuffer;
-import java.util.List;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.locks.Lock;
 import org.apache.rocketmq.common.BoundaryType;
@@ -58,8 +57,6 @@ public interface FlatFileInterface {
      */
     AppendResult appendConsumeQueue(DispatchRequest request);
 
-    List<DispatchRequest> getDispatchRequestList();
-
     void release();
 
     long getMinStoreTimestamp();
@@ -143,6 +140,8 @@ public interface FlatFileInterface {
      */
     CompletableFuture<Long> getQueueOffsetByTimeAsync(long timestamp, BoundaryType boundaryType);
 
+    boolean isClosed();
+
     /**
      * Shutdown process
      */

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RequestCode.java
Patch:
@@ -95,6 +95,7 @@ public class RequestCode {
     public static final int CHANGE_MESSAGE_INVISIBLETIME = 200053;
     public static final int NOTIFICATION = 200054;
     public static final int POLLING_INFO = 200055;
+    public static final int POP_ROLLBACK = 200056;
 
     public static final int PUT_KV_CONFIG = 100;
 

File: tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java
Patch:
@@ -526,4 +526,7 @@ String setCommitLogReadAheadMode(final String brokerAddr, String mode)
     AclInfo getAcl(String brokerAddr, String subject) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQBrokerException, InterruptedException;
 
     List<AclInfo> listAcl(String brokerAddr, String subjectFilter, String resourceFilter) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQBrokerException, InterruptedException;
+
+    void exportPopRecords(String brokerAddr, long timeout) throws RemotingConnectException,
+        RemotingSendRequestException, RemotingTimeoutException, MQBrokerException, InterruptedException;
 }

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -80,6 +80,7 @@
 import org.apache.rocketmq.tools.command.export.ExportMetadataCommand;
 import org.apache.rocketmq.tools.command.export.ExportMetadataInRocksDBCommand;
 import org.apache.rocketmq.tools.command.export.ExportMetricsCommand;
+import org.apache.rocketmq.tools.command.export.ExportPopRecordCommand;
 import org.apache.rocketmq.tools.command.ha.GetSyncStateSetSubCommand;
 import org.apache.rocketmq.tools.command.ha.HAStatusSubCommand;
 import org.apache.rocketmq.tools.command.message.CheckMsgSendRTCommand;
@@ -273,6 +274,7 @@ public static void initCommand() {
         initCommand(new ExportConfigsCommand());
         initCommand(new ExportMetricsCommand());
         initCommand(new ExportMetadataInRocksDBCommand());
+        initCommand(new ExportPopRecordCommand());
 
         initCommand(new HAStatusSubCommand());
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -510,7 +510,7 @@ void popMessage(final PopRequest popRequest) {
         try {
             this.makeSureStateOK();
         } catch (MQClientException e) {
-            log.warn("pullMessage exception, consumer state not ok", e);
+            log.warn("popMessage exception, consumer state not ok", e);
             this.executePopPullRequestLater(popRequest, pullTimeDelayMillsWhenException);
             return;
         }

File: broker/src/main/java/org/apache/rocketmq/broker/client/net/Broker2Client.java
Patch:
@@ -113,7 +113,7 @@ public RemotingCommand resetOffset(String topic, String group, long timeStamp, b
         TopicConfig topicConfig = this.brokerController.getTopicConfigManager().selectTopicConfig(topic);
         if (null == topicConfig) {
             log.error("[reset-offset] reset offset failed, no topic in this broker. topic={}", topic);
-            response.setCode(ResponseCode.SYSTEM_ERROR);
+            response.setCode(ResponseCode.TOPIC_NOT_EXIST);
             response.setRemark("[reset-offset] reset offset failed, no topic in this broker. topic=" + topic);
             return response;
         }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java
Patch:
@@ -467,7 +467,7 @@ protected RemotingCommand msgCheck(final ChannelHandlerContext ctx,
 
         TopicValidator.ValidateTopicResult result = TopicValidator.validateTopic(requestHeader.getTopic());
         if (!result.isValid()) {
-            response.setCode(ResponseCode.SYSTEM_ERROR);
+            response.setCode(ResponseCode.INVALID_PARAMETER);
             response.setRemark(result.getRemark());
             return response;
         }
@@ -522,7 +522,7 @@ protected RemotingCommand msgCheck(final ChannelHandlerContext ctx,
                 RemotingHelper.parseChannelRemoteAddr(ctx.channel()));
 
             LOGGER.warn(errorInfo);
-            response.setCode(ResponseCode.SYSTEM_ERROR);
+            response.setCode(ResponseCode.INVALID_PARAMETER);
             response.setRemark(errorInfo);
 
             return response;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ConsumerManageProcessor.java
Patch:
@@ -177,13 +177,13 @@ private RemotingCommand updateConsumerOffset(ChannelHandlerContext ctx, Remoting
         }
 
         if (queueId == null) {
-            response.setCode(ResponseCode.SYSTEM_ERROR);
+            response.setCode(ResponseCode.INVALID_PARAMETER);
             response.setRemark("QueueId is null, topic is " + topic);
             return response;
         }
 
         if (offset == null) {
-            response.setCode(ResponseCode.SYSTEM_ERROR);
+            response.setCode(ResponseCode.INVALID_PARAMETER);
             response.setRemark("Offset is null, topic is " + topic);
             return response;
         }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/NotificationProcessor.java
Patch:
@@ -112,7 +112,7 @@ public RemotingCommand processRequest(final ChannelHandlerContext ctx,
             String errorInfo = String.format("queueId[%d] is illegal, topic:[%s] topicConfig.readQueueNums:[%d] consumer:[%s]",
                 requestHeader.getQueueId(), requestHeader.getTopic(), topicConfig.getReadQueueNums(), channel.remoteAddress());
             POP_LOGGER.warn(errorInfo);
-            response.setCode(ResponseCode.SYSTEM_ERROR);
+            response.setCode(ResponseCode.INVALID_PARAMETER);
             response.setRemark(errorInfo);
             return response;
         }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PeekMessageProcessor.java
Patch:
@@ -114,7 +114,7 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
             String errorInfo = String.format("queueId[%d] is illegal, topic:[%s] topicConfig.readQueueNums:[%d] consumer:[%s]",
                 requestHeader.getQueueId(), requestHeader.getTopic(), topicConfig.getReadQueueNums(), channel.remoteAddress());
             LOG.warn(errorInfo);
-            response.setCode(ResponseCode.SYSTEM_ERROR);
+            response.setCode(ResponseCode.INVALID_PARAMETER);
             response.setRemark(errorInfo);
             return response;
         }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PollingInfoProcessor.java
Patch:
@@ -89,7 +89,7 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
             String errorInfo = String.format("queueId[%d] is illegal, topic:[%s] topicConfig.readQueueNums:[%d] consumer:[%s]",
                 requestHeader.getQueueId(), requestHeader.getTopic(), topicConfig.getReadQueueNums(), channel.remoteAddress());
             POP_LOGGER.warn(errorInfo);
-            response.setCode(ResponseCode.SYSTEM_ERROR);
+            response.setCode(ResponseCode.INVALID_PARAMETER);
             response.setRemark(errorInfo);
             return response;
         }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java
Patch:
@@ -252,7 +252,7 @@ public RemotingCommand processRequest(final ChannelHandlerContext ctx, RemotingC
             return response;
         }
         if (requestHeader.getMaxMsgNums() > 32) {
-            response.setCode(ResponseCode.SYSTEM_ERROR);
+            response.setCode(ResponseCode.INVALID_PARAMETER);
             response.setRemark(String.format("the broker[%s] pop message's num is greater than 32",
                 this.brokerController.getBrokerConfig().getBrokerIP1()));
             return response;
@@ -288,7 +288,7 @@ public RemotingCommand processRequest(final ChannelHandlerContext ctx, RemotingC
                 requestHeader.getQueueId(), requestHeader.getTopic(), topicConfig.getReadQueueNums(),
                 channel.remoteAddress());
             POP_LOGGER.warn(errorInfo);
-            response.setCode(ResponseCode.SYSTEM_ERROR);
+            response.setCode(ResponseCode.INVALID_PARAMETER);
             response.setRemark(errorInfo);
             return response;
         }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PullMessageProcessor.java
Patch:
@@ -371,7 +371,7 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
             String errorInfo = String.format("queueId[%d] is illegal, topic:[%s] topicConfig.readQueueNums:[%d] consumer:[%s]",
                 requestHeader.getQueueId(), requestHeader.getTopic(), topicConfig.getReadQueueNums(), channel.remoteAddress());
             LOGGER.warn(errorInfo);
-            response.setCode(ResponseCode.SYSTEM_ERROR);
+            response.setCode(ResponseCode.INVALID_PARAMETER);
             response.setRemark(errorInfo);
             return response;
         }

File: broker/src/test/java/org/apache/rocketmq/broker/client/net/Broker2ClientTest.java
Patch:
@@ -129,7 +129,7 @@ public void testCheckProducerTransactionStateException() throws Exception {
     public void testResetOffsetNoTopicConfig() throws RemotingCommandException {
         when(topicConfigManager.selectTopicConfig(defaultTopic)).thenReturn(null);
         RemotingCommand response = broker2Client.resetOffset(defaultTopic, defaultGroup, timestamp, isForce);
-        assertEquals(ResponseCode.SYSTEM_ERROR, response.getCode());
+        assertEquals(ResponseCode.TOPIC_NOT_EXIST, response.getCode());
     }
     
     @Test

File: broker/src/test/java/org/apache/rocketmq/broker/processor/PeekMessageProcessorTest.java
Patch:
@@ -154,7 +154,7 @@ public void testProcessRequest_SubscriptionGroupNotExist() throws RemotingComman
     public void testProcessRequest_QueueIdError() throws RemotingCommandException {
         RemotingCommand request = createPeekMessageRequest("group","topic",17);
         RemotingCommand response = peekMessageProcessor.processRequest(handlerContext, request);
-        assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);
+        assertThat(response.getCode()).isEqualTo(ResponseCode.INVALID_PARAMETER);
     }
 
     private RemotingCommand createPeekMessageRequest(String group,String topic,int queueId) {

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/ResponseCode.java
Patch:
@@ -55,6 +55,8 @@ public class ResponseCode extends RemotingSysResponseCode {
 
     public static final int FILTER_DATA_NOT_LATEST = 28;
 
+    public static final int INVALID_PARAMETER = 29;
+
     public static final int TRANSACTION_SHOULD_COMMIT = 200;
 
     public static final int TRANSACTION_SHOULD_ROLLBACK = 201;

File: store/src/test/java/org/apache/rocketmq/store/timer/TimerMessageStoreTest.java
Patch:
@@ -259,8 +259,7 @@ public void testRetryUntilSuccess() throws Exception {
                 latch.countDown();
             }
         }).start();
-        latch.await(10, TimeUnit.SECONDS);
-
+        latch.await(5, TimeUnit.SECONDS);
         assertTrue(timerMessageStore.dequeuePutQueue.isEmpty());
         verify(mockMessageStore, times(6)).putMessage(any(MessageExtBrokerInner.class));
     }
@@ -379,7 +378,7 @@ public void testDeleteTimerMessage_ukCollision() throws Exception {
         String topic = "TimerTest_testDeleteTimerMessage";
         String collisionTopic = "TimerTest_testDeleteTimerMessage_collision";
 
-        TimerMessageStore timerMessageStore = createTimerMessageStore(null);
+        TimerMessageStore timerMessageStore = createTimerMessageStore(null , false);
         timerMessageStore.load();
         timerMessageStore.start(true);
 

File: client/src/main/java/org/apache/rocketmq/client/producer/MQProducer.java
Patch:
@@ -113,6 +113,9 @@ void send(final Collection<Message> msgs, final MessageQueue mq, final SendCallb
         final long timeout) throws MQClientException,
         RemotingException, MQBrokerException, InterruptedException;
 
+    String recallMessage(String topic, String recallHandle)
+        throws MQClientException, RemotingException, MQBrokerException, InterruptedException;
+
     //for rpc
     Message request(final Message msg, final long timeout) throws RequestTimeoutException, MQClientException,
         RemotingException, MQBrokerException, InterruptedException;

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceType.java
Patch:
@@ -18,6 +18,7 @@
 
 public enum TraceType {
     Pub,
+    Recall,
     SubBefore,
     SubAfter,
     EndTransaction,

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/RequestMapping.java
Patch:
@@ -25,6 +25,7 @@
 import apache.rocketmq.v2.NotifyClientTerminationRequest;
 import apache.rocketmq.v2.QueryAssignmentRequest;
 import apache.rocketmq.v2.QueryRouteRequest;
+import apache.rocketmq.v2.RecallMessageRequest;
 import apache.rocketmq.v2.ReceiveMessageRequest;
 import apache.rocketmq.v2.SendMessageRequest;
 import java.util.HashMap;
@@ -38,6 +39,7 @@ public class RequestMapping {
             put(QueryRouteRequest.getDescriptor().getFullName(), RequestCode.GET_ROUTEINFO_BY_TOPIC);
             put(HeartbeatRequest.getDescriptor().getFullName(), RequestCode.HEART_BEAT);
             put(SendMessageRequest.getDescriptor().getFullName(), RequestCode.SEND_MESSAGE_V2);
+            put(RecallMessageRequest.getDescriptor().getFullName(), RequestCode.RECALL_MESSAGE);
             put(QueryAssignmentRequest.getDescriptor().getFullName(), RequestCode.GET_ROUTEINFO_BY_TOPIC);
             put(ReceiveMessageRequest.getDescriptor().getFullName(), RequestCode.PULL_MESSAGE);
             put(AckMessageRequest.getDescriptor().getFullName(), RequestCode.UPDATE_CONSUMER_OFFSET);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/producer/SendMessageActivity.java
Patch:
@@ -341,6 +341,7 @@ protected SendMessageResponse convertToSendMessageResponse(ProxyContext ctx, Sen
                         .setOffset(result.getQueueOffset())
                         .setMessageId(StringUtils.defaultString(result.getMsgId()))
                         .setTransactionId(StringUtils.defaultString(result.getTransactionId()))
+                        .setRecallHandle(StringUtils.defaultString(result.getRecallHandle()))
                         .build();
                     break;
                 default:

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RequestCode.java
Patch:
@@ -220,6 +220,7 @@ public class RequestCode {
     public static final int CHECK_ROCKSDB_CQ_WRITE_PROGRESS = 354;
 
     public static final int LITE_PULL_MESSAGE = 361;
+    public static final int RECALL_MESSAGE = 370;
 
     public static final int QUERY_ASSIGNMENT = 400;
     public static final int SET_MESSAGE_REQUEST_MODE = 401;

File: client/src/main/java/org/apache/rocketmq/client/trace/hook/SendMessageOpenTracingHookImpl.java
Patch:
@@ -48,8 +48,8 @@ public void sendMessageBefore(SendMessageContext context) {
         }
         Message msg = context.getMessage();
         Tracer.SpanBuilder spanBuilder = tracer
-                .buildSpan(TraceConstants.TO_PREFIX + msg.getTopic())
-                .withTag(Tags.SPAN_KIND, Tags.SPAN_KIND_PRODUCER);
+            .buildSpan(TraceConstants.TO_PREFIX + msg.getTopic())
+            .withTag(Tags.SPAN_KIND, Tags.SPAN_KIND_PRODUCER);
         SpanContext spanContext = tracer.extract(Format.Builtin.TEXT_MAP, new TextMapAdapter(msg.getProperties()));
         if (spanContext != null) {
             spanBuilder.asChildOf(spanContext);
@@ -62,7 +62,7 @@ public void sendMessageBefore(SendMessageContext context) {
         span.setTag(TraceConstants.ROCKETMQ_KEYS, msg.getKeys());
         span.setTag(TraceConstants.ROCKETMQ_STORE_HOST, context.getBrokerAddr());
         span.setTag(TraceConstants.ROCKETMQ_MSG_TYPE, context.getMsgType().name());
-        span.setTag(TraceConstants.ROCKETMQ_BODY_LENGTH, msg.getBody().length);
+        span.setTag(TraceConstants.ROCKETMQ_BODY_LENGTH, null == msg.getBody() ? 0 : msg.getBody().length);
         context.setMqTraceContext(span);
     }
 

File: client/src/main/java/org/apache/rocketmq/client/trace/hook/SendMessageTraceHookImpl.java
Patch:
@@ -58,7 +58,8 @@ public void sendMessageBefore(SendMessageContext context) {
         traceBean.setTags(context.getMessage().getTags());
         traceBean.setKeys(context.getMessage().getKeys());
         traceBean.setStoreHost(context.getBrokerAddr());
-        traceBean.setBodyLength(context.getMessage().getBody().length);
+        int bodyLength = null == context.getMessage().getBody() ? 0 : context.getMessage().getBody().length;
+        traceBean.setBodyLength(bodyLength);
         traceBean.setMsgType(context.getMsgType());
         traceContext.getTraceBeans().add(traceBean);
     }

File: common/src/main/java/org/apache/rocketmq/common/message/MessageDecoder.java
Patch:
@@ -516,13 +516,15 @@ public static MessageExt decode(
                         }
                     }
 
-                    // uncompress body
+                    // inflate body
                     if (deCompressBody && (sysFlag & MessageSysFlag.COMPRESSED_FLAG) == MessageSysFlag.COMPRESSED_FLAG) {
                         Compressor compressor = CompressorFactory.getCompressor(MessageSysFlag.getCompressionType(sysFlag));
                         body = compressor.decompress(body);
+                        sysFlag &= ~MessageSysFlag.COMPRESSED_FLAG;
                     }
 
                     msgExt.setBody(body);
+                    msgExt.setSysFlag(sysFlag);
                 } else {
                     byteBuffer.position(byteBuffer.position() + bodyLen);
                 }

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -74,6 +74,7 @@
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.utils.FutureUtils;
+import org.apache.rocketmq.common.utils.NetworkUtil;
 import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
@@ -1130,7 +1131,7 @@ class NettyConnectManageHandler extends ChannelDuplexHandler {
         @Override
         public void connect(ChannelHandlerContext ctx, SocketAddress remoteAddress, SocketAddress localAddress,
             ChannelPromise promise) throws Exception {
-            final String local = localAddress == null ? "UNKNOWN" : RemotingHelper.parseSocketAddressAddr(localAddress);
+            final String local = localAddress == null ? NetworkUtil.getLocalAddress() : RemotingHelper.parseSocketAddressAddr(localAddress);
             final String remote = remoteAddress == null ? "UNKNOWN" : RemotingHelper.parseSocketAddressAddr(remoteAddress);
             LOGGER.info("NETTY CLIENT PIPELINE: CONNECT  {} => {}", local, remote);
 

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -344,7 +344,7 @@ public BrokerController(
         this.brokerStatsManager = messageStoreConfig.isEnableLmq() ? new LmqBrokerStatsManager(this.brokerConfig) : new BrokerStatsManager(this.brokerConfig.getBrokerClusterName(), this.brokerConfig.isEnableDetailStat());
         this.broadcastOffsetManager = new BroadcastOffsetManager(this);
         if (ConfigManagerVersion.V2.getVersion().equals(brokerConfig.getConfigManagerVersion())) {
-            this.configStorage = new ConfigStorage(messageStoreConfig.getStorePathRootDir());
+            this.configStorage = new ConfigStorage(messageStoreConfig);
             this.topicConfigManager = new TopicConfigManagerV2(this, configStorage);
             this.subscriptionGroupManager = new SubscriptionGroupManagerV2(this, configStorage);
             this.consumerOffsetManager = new ConsumerOffsetManagerV2(this, configStorage);

File: broker/src/main/java/org/apache/rocketmq/broker/config/v2/ConfigHelper.java
Patch:
@@ -64,7 +64,7 @@ public static Optional<ByteBuf> loadDataVersion(ConfigStorage configStorage, Tab
         return Optional.empty();
     }
 
-    public static void stampDataVersion(WriteBatch writeBatch, DataVersion dataVersion, long stateMachineVersion)
+    public static void stampDataVersion(WriteBatch writeBatch, TableId table, DataVersion dataVersion, long stateMachineVersion)
         throws RocksDBException {
         // Increase data version
         dataVersion.nextVersion(stateMachineVersion);
@@ -75,7 +75,7 @@ public static void stampDataVersion(WriteBatch writeBatch, DataVersion dataVersi
         ByteBuf valueBuf = AbstractRocksDBStorage.POOLED_ALLOCATOR.buffer(Long.BYTES * 3);
         try {
             keyBuf.writeByte(TablePrefix.TABLE.getValue());
-            keyBuf.writeShort(TableId.CONSUMER_OFFSET.getValue());
+            keyBuf.writeShort(table.getValue());
             keyBuf.writeByte(RecordPrefix.DATA_VERSION.getValue());
             keyBuf.writeBytes(ConfigStorage.DATA_VERSION_KEY_BYTES);
             valueBuf.writeLong(dataVersion.getStateVersion());

File: common/src/main/java/org/apache/rocketmq/common/config/ConfigRocksDBStorage.java
Patch:
@@ -70,7 +70,7 @@ protected boolean postLoad() {
 
             final List<ColumnFamilyDescriptor> cfDescriptors = new ArrayList<>();
 
-            ColumnFamilyOptions defaultOptions = ConfigHelper.createConfigOptions();
+            ColumnFamilyOptions defaultOptions = ConfigHelper.createConfigColumnFamilyOptions();
             this.cfOptions.add(defaultOptions);
             cfDescriptors.add(new ColumnFamilyDescriptor(RocksDB.DEFAULT_COLUMN_FAMILY, defaultOptions));
             cfDescriptors.add(new ColumnFamilyDescriptor(KV_DATA_VERSION_COLUMN_FAMILY_NAME, defaultOptions));

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -320,9 +320,10 @@ private Runnable buildProcessRequestHandler(ChannelHandlerContext ctx, RemotingC
         return () -> {
             Exception exception = null;
             RemotingCommand response;
+            String remoteAddr = null;
 
             try {
-                String remoteAddr = RemotingHelper.parseChannelRemoteAddr(ctx.channel());
+                remoteAddr = RemotingHelper.parseChannelRemoteAddr(ctx.channel());
                 try {
                     doBeforeRpcHooks(remoteAddr, cmd);
                 } catch (AbortProcessException e) {
@@ -359,7 +360,7 @@ private Runnable buildProcessRequestHandler(ChannelHandlerContext ctx, RemotingC
                 response.setOpaque(opaque);
                 writeResponse(ctx.channel(), cmd, response);
             } catch (Throwable e) {
-                log.error("process request exception", e);
+                log.error("process request exception, remoteAddr: {}", remoteAddr, e);
                 log.error(cmd.toString());
 
                 if (!cmd.isOnewayRPC()) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/channel/GrpcClientChannel.java
Patch:
@@ -30,6 +30,7 @@
 import io.grpc.stub.StreamObserver;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelId;
+import java.util.Objects;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.atomic.AtomicReference;
 import org.apache.rocketmq.common.constant.LoggerName;
@@ -210,7 +211,7 @@ protected CompletableFuture<Void> processCheckTransaction(CheckTransactionStateR
     protected CompletableFuture<Void> processGetConsumerRunningInfo(RemotingCommand command,
         GetConsumerRunningInfoRequestHeader header,
         CompletableFuture<ProxyRelayResult<ConsumerRunningInfo>> responseFuture) {
-        if (!header.isJstackEnable()) {
+        if (Objects.isNull(header) || !header.isJstackEnable()) {
             return CompletableFuture.completedFuture(null);
         }
         this.writeTelemetryCommand(TelemetryCommand.newBuilder()

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -869,7 +869,6 @@ private HeartbeatData prepareHeartbeatData(boolean isWithoutSub) {
                 consumerData.setConsumeType(impl.consumeType());
                 consumerData.setMessageModel(impl.messageModel());
                 consumerData.setConsumeFromWhere(impl.consumeFromWhere());
-                consumerData.getSubscriptionDataSet().addAll(impl.subscriptions());
                 consumerData.setUnitMode(impl.isUnitMode());
                 if (!isWithoutSub) {
                     consumerData.getSubscriptionDataSet().addAll(impl.subscriptions());

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -767,6 +767,9 @@ private void sendMessageBack(MessageExt msg, int delayLevel, final String broker
             } else {
                 String brokerAddr = (null != brokerName) ? this.mQClientFactory.findBrokerAddressInPublish(brokerName)
                     : RemotingHelper.parseSocketAddressAddr(msg.getStoreHost());
+                if (UtilAll.isBlank(brokerAddr)) {
+                    throw new MQClientException("Broker[" + brokerName + "] master node does not exist", null);
+                }
                 this.mQClientFactory.getMQClientAPIImpl().consumerSendMessageBack(brokerAddr, brokerName, msg,
                     this.defaultMQPushConsumer.getConsumerGroup(), delayLevel, 5000, getMaxReconsumeTimes());
             }

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/FlatFileStore.java
Patch:
@@ -50,7 +50,7 @@ public FlatFileStore(MessageStoreConfig storeConfig, MetadataStore metadataStore
         this.storeConfig = storeConfig;
         this.metadataStore = metadataStore;
         this.executor = executor;
-        this.flatFileFactory = new FlatFileFactory(metadataStore, storeConfig);
+        this.flatFileFactory = new FlatFileFactory(metadataStore, storeConfig, executor);
         this.flatFileConcurrentMap = new ConcurrentHashMap<>();
     }
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/provider/MemoryFileSegment.java
Patch:
@@ -19,6 +19,7 @@
 import java.nio.ByteBuffer;
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.tieredstore.MessageStoreConfig;
+import org.apache.rocketmq.tieredstore.MessageStoreExecutor;
 import org.apache.rocketmq.tieredstore.common.FileSegmentType;
 import org.apache.rocketmq.tieredstore.stream.FileSegmentInputStream;
 import org.apache.rocketmq.tieredstore.util.MessageStoreUtil;
@@ -35,9 +36,9 @@ public class MemoryFileSegment extends FileSegment {
     protected boolean checkSize = true;
 
     public MemoryFileSegment(MessageStoreConfig storeConfig,
-        FileSegmentType fileType, String filePath, long baseOffset) {
+        FileSegmentType fileType, String filePath, long baseOffset, MessageStoreExecutor executor) {
 
-        super(storeConfig, fileType, filePath, baseOffset);
+        super(storeConfig, fileType, filePath, baseOffset, executor);
         memStore = ByteBuffer.allocate(10000);
         memStore.position((int) getSize());
     }

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/index/IndexStoreFileTest.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.concurrent.Executors;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.tieredstore.MessageStoreConfig;
+import org.apache.rocketmq.tieredstore.MessageStoreExecutor;
 import org.apache.rocketmq.tieredstore.common.AppendResult;
 import org.apache.rocketmq.tieredstore.common.FileSegmentType;
 import org.apache.rocketmq.tieredstore.provider.FileSegment;
@@ -219,7 +220,7 @@ public void doCompactionTest() {
 
         ByteBuffer byteBuffer = indexStoreFile.doCompaction();
         FileSegment fileSegment = new PosixFileSegment(
-            storeConfig, FileSegmentType.INDEX, filePath, 0L);
+            storeConfig, FileSegmentType.INDEX, filePath, 0L, new MessageStoreExecutor());
         fileSegment.append(byteBuffer, timestamp);
         fileSegment.commitAsync().join();
         Assert.assertEquals(byteBuffer.limit(), fileSegment.getSize());
@@ -252,7 +253,7 @@ public void queryAsyncFromSegmentFileTest() throws ExecutionException, Interrupt
 
         ByteBuffer byteBuffer = indexStoreFile.doCompaction();
         FileSegment fileSegment = new PosixFileSegment(
-            storeConfig, FileSegmentType.INDEX, filePath, 0L);
+            storeConfig, FileSegmentType.INDEX, filePath, 0L, new MessageStoreExecutor());
         fileSegment.append(byteBuffer, timestamp);
         fileSegment.commitAsync().join();
         Assert.assertEquals(byteBuffer.limit(), fileSegment.getSize());

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/provider/MemoryFileSegmentTest.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.IOException;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.tieredstore.MessageStoreConfig;
+import org.apache.rocketmq.tieredstore.MessageStoreExecutor;
 import org.apache.rocketmq.tieredstore.common.FileSegmentType;
 import org.apache.rocketmq.tieredstore.stream.FileSegmentInputStream;
 import org.apache.rocketmq.tieredstore.util.MessageStoreUtil;
@@ -34,7 +35,7 @@ public class MemoryFileSegmentTest {
     public void memoryTest() throws IOException {
         MemoryFileSegment fileSegment = new MemoryFileSegment(
             new MessageStoreConfig(), FileSegmentType.COMMIT_LOG,
-            MessageStoreUtil.toFilePath(new MessageQueue()), 0L);
+            MessageStoreUtil.toFilePath(new MessageQueue()), 0L, new MessageStoreExecutor());
         Assert.assertFalse(fileSegment.exists());
         fileSegment.createFile();
         MemoryFileSegment fileSpySegment = Mockito.spy(fileSegment);

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/GetTopicRouteActivity.java
Patch:
@@ -50,7 +50,7 @@ protected RemotingCommand processRequest0(ChannelHandlerContext ctx, RemotingCom
             (GetRouteInfoRequestHeader) request.decodeCommandCustomHeader(GetRouteInfoRequestHeader.class);
         List<Address> addressList = new ArrayList<>();
         // AddressScheme is just a placeholder and will not affect topic route result in this case.
-        addressList.add(new Address(Address.AddressScheme.IPv4, HostAndPort.fromParts(proxyConfig.getRemotingAccessAddr(), proxyConfig.getRemotingListenPort())));
+        addressList.add(new Address(HostAndPort.fromParts(proxyConfig.getRemotingAccessAddr(), proxyConfig.getRemotingListenPort())));
         ProxyTopicRouteData proxyTopicRouteData = messagingProcessor.getTopicRouteDataForProxy(context, addressList, requestHeader.getTopic());
         TopicRouteData topicRouteData = proxyTopicRouteData.buildTopicRouteData();
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/ProxyTopicRouteData.java
Patch:
@@ -43,7 +43,7 @@ public ProxyTopicRouteData(TopicRouteData topicRouteData) {
             brokerData.getBrokerAddrs().forEach((brokerId, brokerAddr) -> {
                 HostAndPort brokerHostAndPort = HostAndPort.fromString(brokerAddr);
 
-                proxyBrokerData.getBrokerAddrs().put(brokerId, Lists.newArrayList(new Address(Address.AddressScheme.IPv4, brokerHostAndPort)));
+                proxyBrokerData.getBrokerAddrs().put(brokerId, Lists.newArrayList(new Address(brokerHostAndPort)));
             });
             this.brokerDatas.add(proxyBrokerData);
         }
@@ -61,7 +61,7 @@ public ProxyTopicRouteData(TopicRouteData topicRouteData, int port) {
                 HostAndPort brokerHostAndPort = HostAndPort.fromString(brokerAddr);
                 HostAndPort proxyHostAndPort = HostAndPort.fromParts(brokerHostAndPort.getHost(), port);
 
-                proxyBrokerData.getBrokerAddrs().put(brokerId, Lists.newArrayList(new Address(Address.AddressScheme.IPv4, proxyHostAndPort)));
+                proxyBrokerData.getBrokerAddrs().put(brokerId, Lists.newArrayList(new Address(proxyHostAndPort)));
             });
             this.brokerDatas.add(proxyBrokerData);
         }

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/provider/PosixFileSegment.java
Patch:
@@ -30,7 +30,6 @@
 import java.util.concurrent.TimeUnit;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.tieredstore.MessageStoreConfig;
-import org.apache.rocketmq.tieredstore.MessageStoreExecutor;
 import org.apache.rocketmq.tieredstore.common.FileSegmentType;
 import org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsManager;
 import org.apache.rocketmq.tieredstore.stream.FileSegmentInputStream;
@@ -230,6 +229,6 @@ public CompletableFuture<Boolean> commit0(
                 return false;
             }
             return true;
-        }, MessageStoreExecutor.getInstance().bufferCommitExecutor);
+        });
     }
 }

File: broker/src/main/java/org/apache/rocketmq/broker/longpolling/NotifyMessageArrivingListener.java
Patch:
@@ -40,8 +40,8 @@ public void arriving(String topic, int queueId, long logicOffset, long tagsCode,
         this.pullRequestHoldService.notifyMessageArriving(
             topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties);
         this.popMessageProcessor.notifyMessageArriving(
-            topic, queueId, tagsCode, msgStoreTime, filterBitMap, properties);
+            topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties);
         this.notificationProcessor.notifyMessageArriving(
-            topic, queueId, tagsCode, msgStoreTime, filterBitMap, properties);
+            topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties);
     }
 }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/NotificationProcessor.java
Patch:
@@ -62,10 +62,10 @@ public boolean rejectRequest() {
 
     // When a new message is written to CommitLog, this method would be called.
     // Suspended long polling will receive notification and be wakeup.
-    public void notifyMessageArriving(final String topic, final int queueId,
+    public void notifyMessageArriving(final String topic, final int queueId, long offset,
         Long tagsCode, long msgStoreTime, byte[] filterBitMap, Map<String, String> properties) {
         this.popLongPollingService.notifyMessageArrivingWithRetryTopic(
-            topic, queueId, tagsCode, msgStoreTime, filterBitMap, properties);
+            topic, queueId, offset, tagsCode, msgStoreTime, filterBitMap, properties);
     }
 
     public void notifyMessageArriving(final String topic, final int queueId) {

File: store/src/main/java/org/apache/rocketmq/store/timer/TimerMessageStore.java
Patch:
@@ -1724,7 +1724,7 @@ public long getEnqueueBehindMessages() {
 
     public long getEnqueueBehindMillis() {
         if (System.currentTimeMillis() - lastEnqueueButExpiredTime < 2000) {
-            return (System.currentTimeMillis() - lastEnqueueButExpiredStoreTime) / 1000;
+            return System.currentTimeMillis() - lastEnqueueButExpiredStoreTime;
         }
         return 0;
     }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -3113,7 +3113,7 @@ private RemotingCommand updateUser(ChannelHandlerContext ctx,
                 if (old.getUserType() == UserType.SUPER && isNotSuperUserLogin(request)) {
                     throw new AuthenticationException("The super user can only be update by super user");
                 }
-                return this.brokerController.getAuthenticationMetadataManager().updateUser(old);
+                return this.brokerController.getAuthenticationMetadataManager().updateUser(user);
             }).thenAccept(nil -> response.setCode(ResponseCode.SUCCESS))
             .exceptionally(ex -> {
                 LOGGER.error("update user {} error", requestHeader.getUsername(), ex);

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -2181,7 +2181,9 @@ public void handleDiskFlush(AppendMessageResult result, PutMessageResult putMess
                 if (!CommitLog.this.defaultMessageStore.isTransientStorePoolEnable()) {
                     flushCommitLogService.wakeup();
                 } else {
-                    commitRealTimeService.wakeup();
+                    if (defaultMessageStore.getMessageStoreConfig().isWakeCommitWhenPutMessage()) {
+                        commitRealTimeService.wakeup();
+                    }
                 }
             }
         }

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/MultiProtocolTlsHelper.java
Patch:
@@ -102,8 +102,9 @@ private static ClientAuth parseClientAuthMode(String authMode) {
             return ClientAuth.NONE;
         }
 
+        String authModeUpper = authMode.toUpperCase();
         for (ClientAuth clientAuth : ClientAuth.values()) {
-            if (clientAuth.name().equals(authMode.toUpperCase())) {
+            if (clientAuth.name().equals(authModeUpper)) {
                 return clientAuth;
             }
         }

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/TlsHelper.java
Patch:
@@ -216,8 +216,9 @@ private static ClientAuth parseClientAuthMode(String authMode) {
             return ClientAuth.NONE;
         }
 
+        String authModeUpper = authMode.toUpperCase();
         for (ClientAuth clientAuth : ClientAuth.values()) {
-            if (clientAuth.name().equals(authMode.toUpperCase())) {
+            if (clientAuth.name().equals(authModeUpper)) {
                 return clientAuth;
             }
         }

File: acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java
Patch:
@@ -63,8 +63,7 @@ public static byte[] combineBytes(byte[] b1, byte[] b2) {
     }
 
     public static String calSignature(byte[] data, String secretKey) {
-        String signature = AclSigner.calSignature(data, secretKey);
-        return signature;
+        return AclSigner.calSignature(data, secretKey);
     }
 
     public static void IPv6AddressCheck(String netAddress) {

File: auth/src/main/java/org/apache/rocketmq/auth/authentication/chain/DefaultAuthenticationHandler.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.auth.authentication.chain;
 
+import java.security.MessageDigest;
 import java.util.concurrent.CompletableFuture;
 import java.util.function.Supplier;
 import org.apache.commons.lang3.StringUtils;
@@ -62,7 +63,8 @@ protected void doAuthenticate(DefaultAuthenticationContext context, User user) {
             throw new AuthenticationException("User:{} is disabled.", context.getUsername());
         }
         String signature = AclSigner.calSignature(context.getContent(), user.getPassword());
-        if (!StringUtils.equals(signature, context.getSignature())) {
+        if (context.getSignature() == null
+            || !MessageDigest.isEqual(signature.getBytes(AclSigner.DEFAULT_CHARSET), context.getSignature().getBytes(AclSigner.DEFAULT_CHARSET))) {
             throw new AuthenticationException("check signature failed.");
         }
     }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java
Patch:
@@ -815,6 +815,9 @@ private boolean appendCheckPoint(final PopMessageRequestHeader requestHeader,
             ck.addDiff((int) (msgQueueOffset - offset));
         }
 
+        this.brokerController.getBrokerStatsManager().incBrokerCkNums(1);
+        this.brokerController.getBrokerStatsManager().incGroupCkNums(requestHeader.getConsumerGroup(), requestHeader.getTopic(), 1);
+
         final boolean addBufferSuc = this.popBufferMergeService.addCk(
             ck, reviveQid, -1, getMessageTmpResult.getNextBeginOffset()
         );

File: broker/src/main/java/org/apache/rocketmq/broker/config/v2/ConfigStorage.java
Patch:
@@ -87,8 +87,8 @@ protected void initOptions() {
     protected void initAbleWalWriteOptions() {
         this.ableWalWriteOptions = new WriteOptions();
 
-        // For metadata, prioritize data integrity
-        this.ableWalWriteOptions.setSync(true);
+        // Given that fdatasync is kind of expensive, sync-WAL for every write cannot be afforded.
+        this.ableWalWriteOptions.setSync(false);
 
         // We need WAL for config changes
         this.ableWalWriteOptions.setDisableWAL(false);

File: broker/src/main/java/org/apache/rocketmq/broker/config/v2/SubscriptionGroupManagerV2.java
Patch:
@@ -72,7 +72,7 @@ private boolean loadSubscriptions() {
             while (iterator.isValid()) {
                 SubscriptionGroupConfig subscriptionGroupConfig = parseSubscription(iterator.key(), iterator.value());
                 if (null != subscriptionGroupConfig) {
-                    super.updateSubscriptionGroupConfigWithoutPersist(subscriptionGroupConfig);
+                    super.putSubscriptionGroupConfig(subscriptionGroupConfig);
                 }
                 iterator.next();
             }

File: broker/src/main/java/org/apache/rocketmq/broker/config/v2/TopicConfigManagerV2.java
Patch:
@@ -76,7 +76,7 @@ private boolean loadTopicConfig() {
                 byte[] value = iterator.value();
                 TopicConfig topicConfig = parseTopicConfig(key, value);
                 if (null != topicConfig) {
-                    super.updateSingleTopicConfigWithoutPersist(topicConfig);
+                    super.putTopicConfig(topicConfig);
                 }
                 iterator.next();
             }

File: store/src/main/java/org/apache/rocketmq/store/ha/DefaultHAService.java
Patch:
@@ -350,8 +350,8 @@ public void run() {
                                         + sc.socket().getRemoteSocketAddress());
                                     try {
                                         HAConnection conn = createConnection(sc);
-                                        conn.start();
                                         DefaultHAService.this.addConnection(conn);
+                                        conn.start();
                                     } catch (Exception e) {
                                         log.error("new HAConnection exception", e);
                                         sc.close();

File: broker/src/main/java/org/apache/rocketmq/broker/config/v2/ConsumerOffsetManagerV2.java
Patch:
@@ -390,10 +390,12 @@ public void commitPullOffset(String clientHost, String group, String topic, int
 
         ByteBuf keyBuf = keyOfPullOffset(group, topic, queueId);
         ByteBuf valueBuf = AbstractRocksDBStorage.POOLED_ALLOCATOR.buffer(8);
+        valueBuf.writeLong(offset);
         try (WriteBatch writeBatch = new WriteBatch()) {
             writeBatch.put(keyBuf.nioBuffer(), valueBuf.nioBuffer());
             long stateMachineVersion = brokerController.getMessageStore() != null ? brokerController.getMessageStore().getStateMachineVersion() : 0;
             ConfigHelper.stampDataVersion(writeBatch, dataVersion, stateMachineVersion);
+            configStorage.write(writeBatch);
         } catch (RocksDBException e) {
             LOG.error("Failed to commit pull offset. group={}, topic={}, queueId={}, offset={}",
                 group, topic, queueId, offset);

File: broker/src/main/java/org/apache/rocketmq/broker/config/v2/SubscriptionGroupManagerV2.java
Patch:
@@ -74,6 +74,7 @@ private boolean loadSubscriptions() {
                 if (null != subscriptionGroupConfig) {
                     super.updateSubscriptionGroupConfigWithoutPersist(subscriptionGroupConfig);
                 }
+                iterator.next();
             }
         } finally {
             beginKey.release();
@@ -163,6 +164,7 @@ protected SubscriptionGroupConfig removeSubscriptionGroupConfig(String groupName
             writeBatch.delete(ConfigHelper.readBytes(keyBuf));
             long stateMachineVersion = brokerController.getMessageStore().getStateMachineVersion();
             ConfigHelper.stampDataVersion(writeBatch, dataVersion, stateMachineVersion);
+            configStorage.write(writeBatch);
         } catch (RocksDBException e) {
             log.error("Failed to remove subscription group config by group-name={}", groupName, e);
         }

File: broker/src/test/java/org/apache/rocketmq/broker/offset/RocksdbTransferOffsetAndCqTest.java
Patch:
@@ -76,7 +76,6 @@ public void init() throws IOException {
         brokerConfig.setConsumerOffsetUpdateVersionStep(10);
         MessageStoreConfig messageStoreConfig = new MessageStoreConfig();
         messageStoreConfig.setStorePathRootDir(basePath);
-        messageStoreConfig.setTransferOffsetJsonToRocksdb(true);
         messageStoreConfig.setRocksdbCQDoubleWriteEnable(true);
         Mockito.lenient().when(brokerController.getBrokerConfig()).thenReturn(brokerConfig);
         Mockito.lenient().when(brokerController.getMessageStoreConfig()).thenReturn(messageStoreConfig);

File: broker/src/test/java/org/apache/rocketmq/broker/subscription/RocksdbGroupConfigTransferTest.java
Patch:
@@ -68,7 +68,6 @@ public void init() {
         Mockito.lenient().when(brokerController.getBrokerConfig()).thenReturn(brokerConfig);
         MessageStoreConfig messageStoreConfig = new MessageStoreConfig();
         messageStoreConfig.setStorePathRootDir(basePath);
-        messageStoreConfig.setTransferMetadataJsonToRocksdb(true);
         Mockito.lenient().when(brokerController.getMessageStoreConfig()).thenReturn(messageStoreConfig);
         Mockito.lenient().when(brokerController.getMessageStore()).thenReturn(defaultMessageStore);
         when(defaultMessageStore.getStateMachineVersion()).thenReturn(0L);

File: broker/src/test/java/org/apache/rocketmq/broker/topic/RocksdbTopicConfigManagerTest.java
Patch:
@@ -72,7 +72,6 @@ public void init() {
         when(brokerController.getBrokerConfig()).thenReturn(brokerConfig);
         MessageStoreConfig messageStoreConfig = new MessageStoreConfig();
         messageStoreConfig.setStorePathRootDir(basePath);
-        messageStoreConfig.setTransferMetadataJsonToRocksdb(true);
         when(brokerController.getMessageStoreConfig()).thenReturn(messageStoreConfig);
         Mockito.lenient().when(brokerController.getMessageStore()).thenReturn(defaultMessageStore);
         Mockito.lenient().when(defaultMessageStore.getStateMachineVersion()).thenReturn(0L);

File: broker/src/test/java/org/apache/rocketmq/broker/topic/RocksdbTopicConfigTransferTest.java
Patch:
@@ -69,7 +69,6 @@ public void init() {
         when(brokerController.getBrokerConfig()).thenReturn(brokerConfig);
         MessageStoreConfig messageStoreConfig = new MessageStoreConfig();
         messageStoreConfig.setStorePathRootDir(basePath);
-        messageStoreConfig.setTransferMetadataJsonToRocksdb(true);
         Mockito.lenient().when(brokerController.getMessageStoreConfig()).thenReturn(messageStoreConfig);
         when(brokerController.getMessageStore()).thenReturn(defaultMessageStore);
         when(defaultMessageStore.getStateMachineVersion()).thenReturn(0L);

File: common/src/main/java/org/apache/rocketmq/common/config/AbstractRocksDBStorage.java
Patch:
@@ -86,6 +86,7 @@ public abstract class AbstractRocksDBStorage {
     protected final List<ColumnFamilyHandle> cfHandles = new ArrayList<>();
 
     protected volatile boolean loaded;
+    protected CompressionType compressionType = CompressionType.LZ4_COMPRESSION;
     private volatile boolean closed;
 
     private final Semaphore reloadPermit = new Semaphore(1);
@@ -156,7 +157,7 @@ protected void initCompactRangeOptions() {
 
     protected void initCompactionOptions() {
         this.compactionOptions = new CompactionOptions();
-        this.compactionOptions.setCompression(CompressionType.LZ4_COMPRESSION);
+        this.compactionOptions.setCompression(compressionType);
         this.compactionOptions.setMaxSubcompactions(4);
         this.compactionOptions.setOutputFileSizeLimit(4 * 1024 * 1024 * 1024L);
     }

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExt.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.BoundaryType;
+import org.apache.rocketmq.common.CheckRocksdbCqWriteResult;
 import org.apache.rocketmq.common.Pair;
 import org.apache.rocketmq.common.PlainAccessConfig;
 import org.apache.rocketmq.common.TopicConfig;
@@ -52,7 +53,6 @@
 import org.apache.rocketmq.remoting.protocol.body.ConsumeStatsList;
 import org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;
 import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
-import org.apache.rocketmq.remoting.protocol.body.CheckRocksdbCqWriteProgressResponseBody;
 import org.apache.rocketmq.remoting.protocol.body.EpochEntryCache;
 import org.apache.rocketmq.remoting.protocol.body.GroupList;
 import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;
@@ -773,9 +773,9 @@ public QueryConsumeQueueResponseBody queryConsumeQueue(String brokerAddr, String
     }
 
     @Override
-    public CheckRocksdbCqWriteProgressResponseBody checkRocksdbCqWriteProgress(String brokerAddr, String topic)
+    public CheckRocksdbCqWriteResult checkRocksdbCqWriteProgress(String brokerAddr, String topic, long checkStoreTime)
         throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException, MQClientException {
-        return this.defaultMQAdminExtImpl.checkRocksdbCqWriteProgress(brokerAddr, topic);
+        return this.defaultMQAdminExtImpl.checkRocksdbCqWriteProgress(brokerAddr, topic, checkStoreTime);
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -46,6 +46,7 @@
 import org.apache.rocketmq.client.impl.MQClientManager;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
 import org.apache.rocketmq.common.BoundaryType;
+import org.apache.rocketmq.common.CheckRocksdbCqWriteResult;
 import org.apache.rocketmq.common.KeyBuilder;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.Pair;
@@ -90,7 +91,6 @@
 import org.apache.rocketmq.remoting.protocol.body.ConsumeStatsList;
 import org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;
 import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
-import org.apache.rocketmq.remoting.protocol.body.CheckRocksdbCqWriteProgressResponseBody;
 import org.apache.rocketmq.remoting.protocol.body.EpochEntryCache;
 import org.apache.rocketmq.remoting.protocol.body.GroupList;
 import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;
@@ -1819,9 +1819,9 @@ public QueryConsumeQueueResponseBody queryConsumeQueue(String brokerAddr, String
     }
 
     @Override
-    public CheckRocksdbCqWriteProgressResponseBody checkRocksdbCqWriteProgress(String brokerAddr, String topic)
+    public CheckRocksdbCqWriteResult checkRocksdbCqWriteProgress(String brokerAddr, String topic, long checkStoreTime)
         throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException, MQClientException {
-        return this.mqClientInstance.getMQClientAPIImpl().checkRocksdbCqWriteProgress(brokerAddr, topic, timeoutMillis);
+        return this.mqClientInstance.getMQClientAPIImpl().checkRocksdbCqWriteProgress(brokerAddr, topic, checkStoreTime, timeoutMillis);
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.rocketmq.client.MQAdmin;
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
+import org.apache.rocketmq.common.CheckRocksdbCqWriteResult;
 import org.apache.rocketmq.common.Pair;
 import org.apache.rocketmq.common.PlainAccessConfig;
 import org.apache.rocketmq.common.TopicConfig;
@@ -48,7 +49,6 @@
 import org.apache.rocketmq.remoting.protocol.body.ConsumeStatsList;
 import org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;
 import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
-import org.apache.rocketmq.remoting.protocol.body.CheckRocksdbCqWriteProgressResponseBody;
 import org.apache.rocketmq.remoting.protocol.body.EpochEntryCache;
 import org.apache.rocketmq.remoting.protocol.body.GroupList;
 import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;
@@ -149,7 +149,8 @@ ConsumeStats examineConsumeStats(
         final String consumerGroup) throws RemotingException, MQClientException, InterruptedException,
         MQBrokerException;
 
-    CheckRocksdbCqWriteProgressResponseBody checkRocksdbCqWriteProgress(String brokerAddr, String topic) throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException, MQClientException;
+    CheckRocksdbCqWriteResult checkRocksdbCqWriteProgress(String brokerAddr, String topic, long checkStoreTime)
+        throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException, MQClientException;
 
     ConsumeStats examineConsumeStats(final String consumerGroup,
         final String topic) throws RemotingException, MQClientException,

File: broker/src/main/java/org/apache/rocketmq/broker/config/v1/RocksDBConsumerOffsetManager.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.broker.offset;
+package org.apache.rocketmq.broker.config.v1;
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.serializer.SerializerFeature;
@@ -24,6 +24,7 @@
 import java.util.concurrent.ConcurrentMap;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.RocksDBConfigManager;
+import org.apache.rocketmq.broker.offset.ConsumerOffsetManager;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.utils.DataConverter;

File: broker/src/main/java/org/apache/rocketmq/broker/config/v1/RocksDBLmqConsumerOffsetManager.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.broker.offset;
+package org.apache.rocketmq.broker.config.v1;
 
 import java.util.HashMap;
 import java.util.Map;

File: broker/src/main/java/org/apache/rocketmq/broker/config/v1/RocksDBLmqSubscriptionGroupManager.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.broker.subscription;
+package org.apache.rocketmq.broker.config.v1;
 
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.MixAll;

File: broker/src/main/java/org/apache/rocketmq/broker/config/v1/RocksDBLmqTopicConfigManager.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.broker.topic;
+package org.apache.rocketmq.broker.config.v1;
 
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.MixAll;

File: broker/src/main/java/org/apache/rocketmq/broker/config/v1/RocksDBOffsetSerializeWrapper.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.broker.offset;
+package org.apache.rocketmq.broker.config.v1;
 
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;

File: broker/src/main/java/org/apache/rocketmq/broker/config/v1/RocksDBSubscriptionGroupManager.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.broker.subscription;
+package org.apache.rocketmq.broker.config.v1;
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.JSONObject;
@@ -27,6 +27,7 @@
 import java.util.function.BiConsumer;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.RocksDBConfigManager;
+import org.apache.rocketmq.broker.subscription.SubscriptionGroupManager;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.utils.DataConverter;
 import org.apache.rocketmq.remoting.protocol.DataVersion;

File: broker/src/main/java/org/apache/rocketmq/broker/config/v1/RocksDBTopicConfigManager.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.broker.topic;
+package org.apache.rocketmq.broker.config.v1;
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.serializer.SerializerFeature;
@@ -23,6 +23,7 @@
 import java.util.concurrent.ConcurrentMap;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.RocksDBConfigManager;
+import org.apache.rocketmq.broker.topic.TopicConfigManager;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.utils.DataConverter;

File: broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOffsetManager.java
Patch:
@@ -43,7 +43,7 @@ public class ConsumerOffsetManager extends ConfigManager {
     protected static final Logger LOG = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     public static final String TOPIC_GROUP_SEPARATOR = "@";
 
-    private DataVersion dataVersion = new DataVersion();
+    protected DataVersion dataVersion = new DataVersion();
 
     protected ConcurrentMap<String/* topic@group */, ConcurrentMap<Integer, Long>> offsetTable =
         new ConcurrentHashMap<>(512);

File: broker/src/main/java/org/apache/rocketmq/broker/subscription/SubscriptionGroupManager.java
Patch:
@@ -49,7 +49,7 @@ public class SubscriptionGroupManager extends ConfigManager {
     private ConcurrentMap<String, ConcurrentMap<String, Integer>> forbiddenTable =
         new ConcurrentHashMap<>(4);
 
-    private final DataVersion dataVersion = new DataVersion();
+    protected final DataVersion dataVersion = new DataVersion();
     protected transient BrokerController brokerController;
 
     public SubscriptionGroupManager() {
@@ -143,7 +143,7 @@ public void updateSubscriptionGroupConfig(final SubscriptionGroupConfig config)
         this.persist();
     }
 
-    private void updateSubscriptionGroupConfigWithoutPersist(SubscriptionGroupConfig config) {
+    protected void updateSubscriptionGroupConfigWithoutPersist(SubscriptionGroupConfig config) {
         Map<String, String> newAttributes = request(config);
         Map<String, String> currentAttributes = current(config.getGroupName());
 

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java
Patch:
@@ -66,7 +66,7 @@ public class TopicConfigManager extends ConfigManager {
 
     private transient final Lock topicConfigTableLock = new ReentrantLock();
     protected ConcurrentMap<String, TopicConfig> topicConfigTable = new ConcurrentHashMap<>(1024);
-    private DataVersion dataVersion = new DataVersion();
+    protected DataVersion dataVersion = new DataVersion();
     protected transient BrokerController brokerController;
 
     public TopicConfigManager() {
@@ -497,7 +497,7 @@ public void updateTopicUnitSubFlag(final String topic, final boolean hasUnitSub)
         }
     }
 
-    private void updateSingleTopicConfigWithoutPersist(final TopicConfig topicConfig) {
+    protected void updateSingleTopicConfigWithoutPersist(final TopicConfig topicConfig) {
         checkNotNull(topicConfig, "topicConfig shouldn't be null");
 
         Map<String, String> newAttributes = request(topicConfig);

File: broker/src/test/java/org/apache/rocketmq/broker/offset/RocksDBConsumerOffsetManagerTest.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.concurrent.ConcurrentMap;
 
 import org.apache.rocketmq.broker.BrokerController;
+import org.apache.rocketmq.broker.config.v1.RocksDBConsumerOffsetManager;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 import org.junit.After;

File: broker/src/test/java/org/apache/rocketmq/broker/offset/RocksDBLmqConsumerOffsetManagerTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.rocketmq.broker.offset;
 
 import org.apache.rocketmq.broker.BrokerController;
+import org.apache.rocketmq.broker.config.v1.RocksDBLmqConsumerOffsetManager;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.store.config.MessageStoreConfig;

File: broker/src/test/java/org/apache/rocketmq/broker/offset/RocksDBOffsetSerializeWrapperTest.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
+import org.apache.rocketmq.broker.config.v1.RocksDBOffsetSerializeWrapper;
 import org.junit.Before;
 import org.junit.Test;
 

File: broker/src/test/java/org/apache/rocketmq/broker/offset/RocksdbTransferOffsetAndCqTest.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.concurrent.ConcurrentMap;
 import org.apache.commons.collections.MapUtils;
 import org.apache.rocketmq.broker.BrokerController;
+import org.apache.rocketmq.broker.config.v1.RocksDBConsumerOffsetManager;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.Pair;

File: broker/src/test/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessorTest.java
Patch:
@@ -36,8 +36,8 @@
 import org.apache.rocketmq.broker.client.net.Broker2Client;
 import org.apache.rocketmq.broker.offset.ConsumerOffsetManager;
 import org.apache.rocketmq.broker.schedule.ScheduleMessageService;
-import org.apache.rocketmq.broker.subscription.RocksDBSubscriptionGroupManager;
-import org.apache.rocketmq.broker.topic.RocksDBTopicConfigManager;
+import org.apache.rocketmq.broker.config.v1.RocksDBSubscriptionGroupManager;
+import org.apache.rocketmq.broker.config.v1.RocksDBTopicConfigManager;
 import org.apache.rocketmq.broker.topic.TopicConfigManager;
 import org.apache.rocketmq.common.BoundaryType;
 import org.apache.rocketmq.common.BrokerConfig;

File: broker/src/test/java/org/apache/rocketmq/broker/subscription/RocksdbGroupConfigTransferTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.rocketmq.broker.subscription;
 
 import org.apache.rocketmq.broker.BrokerController;
+import org.apache.rocketmq.broker.config.v1.RocksDBSubscriptionGroupManager;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.remoting.protocol.DataVersion;

File: broker/src/test/java/org/apache/rocketmq/broker/topic/RocksdbTopicConfigManagerTest.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.UUID;
 
 import org.apache.rocketmq.broker.BrokerController;
+import org.apache.rocketmq.broker.config.v1.RocksDBTopicConfigManager;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.TopicAttributes;

File: broker/src/test/java/org/apache/rocketmq/broker/topic/RocksdbTopicConfigTransferTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.rocketmq.broker.topic;
 
 import org.apache.rocketmq.broker.BrokerController;
+import org.apache.rocketmq.broker.config.v1.RocksDBTopicConfigManager;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.TopicConfig;

File: store/src/main/java/org/apache/rocketmq/store/queue/RocksDBConsumeQueueOffsetTable.java
Patch:
@@ -85,7 +85,7 @@ public class RocksDBConsumeQueueOffsetTable {
      * │        (4 Bytes)        │ (1 Bytes) │ (1 Bytes) │ (3 Bytes) │ (1 Bytes) │  (4 Bytes)  │
      * ├─────────────────────────┴───────────┴───────────┴───────────┴───────────┴─────────────┤
      */
-    private static final int OFFSET_KEY_LENGTH_WITHOUT_TOPIC_BYTES = 4 + 1 + 1 + 3 + 1 + 4;
+    public static final int OFFSET_KEY_LENGTH_WITHOUT_TOPIC_BYTES = 4 + 1 + 1 + 3 + 1 + 4;
     private static final int OFFSET_VALUE_LENGTH = 8 + 8;
 
     /**
@@ -682,7 +682,7 @@ private static ByteBuffer buildOffsetKeyByteBuffer(final byte[] topicBytes, fina
         return byteBuffer;
     }
 
-    private static void buildOffsetKeyByteBuffer(final ByteBuffer byteBuffer, final byte[] topicBytes,
+    public static void buildOffsetKeyByteBuffer(final ByteBuffer byteBuffer, final byte[] topicBytes,
         final int queueId, final boolean max) {
         byteBuffer.position(0).limit(OFFSET_KEY_LENGTH_WITHOUT_TOPIC_BYTES + topicBytes.length);
         buildOffsetKeyByteBuffer0(byteBuffer, topicBytes, queueId, max);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceImpl.java
Patch:
@@ -308,7 +308,7 @@ private boolean rebalanceByTopic(final String topic, final boolean isOrder) {
             case BROADCASTING: {
                 Set<MessageQueue> mqSet = this.topicSubscribeInfoTable.get(topic);
                 if (mqSet != null) {
-                    boolean changed = this.updateProcessQueueTableInRebalance(topic, mqSet, isOrder);
+                    boolean changed = this.updateProcessQueueTableInRebalance(topic, mqSet, false);
                     if (changed) {
                         this.messageQueueChanged(topic, mqSet, mqSet);
                         log.info("messageQueueChanged {} {} {} {}", consumerGroup, topic, mqSet, mqSet);
@@ -477,7 +477,7 @@ private void truncateMessageQueueNotMyTopic() {
     }
 
     private boolean updateProcessQueueTableInRebalance(final String topic, final Set<MessageQueue> mqSet,
-        final boolean isOrder) {
+        final boolean needLockMq) {
         boolean changed = false;
 
         // drop process queues no longer belong me
@@ -518,7 +518,7 @@ private boolean updateProcessQueueTableInRebalance(final String topic, final Set
         List<PullRequest> pullRequestList = new ArrayList<>();
         for (MessageQueue mq : mqSet) {
             if (!this.processQueueTable.containsKey(mq)) {
-                if (isOrder && !this.lock(mq)) {
+                if (needLockMq && !this.lock(mq)) {
                     log.warn("doRebalance, {}, add a new mq failed, {}, because lock failed", consumerGroup, mq);
                     allMQLocked = false;
                     continue;

File: broker/src/main/java/org/apache/rocketmq/broker/longpolling/LmqPullRequestHoldService.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
-
 public class LmqPullRequestHoldService extends PullRequestHoldService {
     private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
@@ -48,8 +47,8 @@ public void checkHoldRequest() {
             }
             String topic = key.substring(0, idx);
             int queueId = Integer.parseInt(key.substring(idx + 1));
-            final long offset = brokerController.getMessageStore().getMaxOffsetInQueue(topic, queueId);
             try {
+                final long offset = brokerController.getMessageStore().getMaxOffsetInQueue(topic, queueId);
                 this.notifyMessageArriving(topic, queueId, offset);
             } catch (Throwable e) {
                 LOGGER.error("check hold request failed. topic={}, queueId={}", topic, queueId, e);

File: broker/src/main/java/org/apache/rocketmq/broker/schedule/ScheduleMessageService.java
Patch:
@@ -53,6 +53,7 @@
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
 import org.apache.rocketmq.store.config.StorePathConfigHelper;
+import org.apache.rocketmq.store.exception.ConsumeQueueException;
 import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
 import org.apache.rocketmq.store.queue.CqUnit;
 import org.apache.rocketmq.store.queue.ReferredIterator;
@@ -103,7 +104,7 @@ public static int delayLevel2QueueId(final int delayLevel) {
         return delayLevel - 1;
     }
 
-    public void buildRunningStats(HashMap<String, String> stats) {
+    public void buildRunningStats(HashMap<String, String> stats) throws ConsumeQueueException {
         for (Map.Entry<Integer, Long> next : this.offsetTable.entrySet()) {
             int queueId = delayLevel2QueueId(next.getKey());
             long delayOffset = next.getValue();

File: broker/src/test/java/org/apache/rocketmq/broker/offset/ConsumerOrderInfoManagerLockFreeNotifyTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.processor.PopMessageProcessor;
 import org.apache.rocketmq.common.BrokerConfig;
+import org.apache.rocketmq.store.exception.ConsumeQueueException;
 import org.assertj.core.util.Lists;
 import org.junit.Before;
 import org.junit.Test;
@@ -50,7 +51,7 @@ public class ConsumerOrderInfoManagerLockFreeNotifyTest {
     private final BrokerController brokerController = mock(BrokerController.class);
 
     @Before
-    public void before() {
+    public void before() throws ConsumeQueueException {
         notified = new AtomicBoolean(false);
         brokerConfig.setEnableNotifyAfterPopOrderLockRelease(true);
         when(brokerController.getBrokerConfig()).thenReturn(brokerConfig);
@@ -175,4 +176,4 @@ public void testRecover() {
         await().atLeast(Duration.ofSeconds(2)).atMost(Duration.ofSeconds(4)).until(notified::get);
         assertTrue(consumerOrderInfoManager.getConsumerOrderInfoLockManager().getTimeoutMap().isEmpty());
     }
-}
\ No newline at end of file
+}

File: broker/src/test/java/org/apache/rocketmq/broker/processor/AckMessageProcessorTest.java
Patch:
@@ -47,6 +47,7 @@
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
+import org.apache.rocketmq.store.exception.ConsumeQueueException;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -93,7 +94,7 @@ public class AckMessageProcessorTest {
     private static final long MAX_OFFSET_IN_QUEUE = 999;
 
     @Before
-    public void init() throws IllegalAccessException, NoSuchFieldException {
+    public void init() throws IllegalAccessException, NoSuchFieldException, ConsumeQueueException {
         clientInfo = new ClientChannelInfo(channel, "127.0.0.1", LanguageCode.JAVA, 0);
         brokerController.setMessageStore(messageStore);
         Field field = BrokerController.class.getDeclaredField("broker2Client");

File: broker/src/test/java/org/apache/rocketmq/broker/processor/PopMessageProcessorTest.java
Patch:
@@ -40,6 +40,7 @@
 import org.apache.rocketmq.store.GetMessageStatus;
 import org.apache.rocketmq.store.SelectMappedBufferResult;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
+import org.apache.rocketmq.store.exception.ConsumeQueueException;
 import org.apache.rocketmq.store.logfile.DefaultMappedFile;
 import org.junit.Assert;
 import org.junit.Before;
@@ -182,7 +183,7 @@ public void testGetInitOffset_retryTopic() throws RemotingCommandException {
     }
 
     @Test
-    public void testGetInitOffset_normalTopic() throws RemotingCommandException {
+    public void testGetInitOffset_normalTopic() throws RemotingCommandException, ConsumeQueueException {
         long maxOffset = 999L;
         when(messageStore.getMessageStoreConfig()).thenReturn(new MessageStoreConfig());
         when(messageStore.getMaxOffsetInQueue(topic, 0)).thenReturn(maxOffset);

File: client/src/test/java/org/apache/rocketmq/client/impl/MQClientAPIImplTest.java
Patch:
@@ -636,8 +636,8 @@ public void testPopMultiLmqMessage_async() throws Exception {
         final int invisibleTime = 10 * 1000;
         final String lmqTopic = MixAll.LMQ_PREFIX + "lmq1";
         final String lmqTopic2 = MixAll.LMQ_PREFIX + "lmq2";
-        final String multiDispatch = String.join(MixAll.MULTI_DISPATCH_QUEUE_SPLITTER, lmqTopic, lmqTopic2);
-        final String multiOffset = String.join(MixAll.MULTI_DISPATCH_QUEUE_SPLITTER, "0", "0");
+        final String multiDispatch = String.join(MixAll.LMQ_DISPATCH_SEPARATOR, lmqTopic, lmqTopic2);
+        final String multiOffset = String.join(MixAll.LMQ_DISPATCH_SEPARATOR, "0", "0");
         doAnswer((Answer<Void>) mock -> {
             InvokeCallback callback = mock.getArgument(3);
             RemotingCommand request = mock.getArgument(1);

File: common/src/main/java/org/apache/rocketmq/common/ServiceThread.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public abstract class ServiceThread implements Runnable {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    protected static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private static final long JOIN_TIME = 90 * 1000;
 

File: example/src/main/java/org/apache/rocketmq/example/lmq/LMQProducer.java
Patch:
@@ -49,7 +49,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
                 Message msg = new Message(TOPIC, TAG, ("Hello RocketMQ " + i).getBytes(RemotingHelper.DEFAULT_CHARSET));
                 msg.setKeys("Key" + i);
                 msg.putUserProperty(MessageConst.PROPERTY_INNER_MULTI_DISPATCH /* "INNER_MULTI_DISPATCH" */,
-                    String.join(MixAll.MULTI_DISPATCH_QUEUE_SPLITTER, LMQ_TOPIC_1, LMQ_TOPIC_2) /* "%LMQ%123,%LMQ%456" */);
+                    String.join(MixAll.LMQ_DISPATCH_SEPARATOR, LMQ_TOPIC_1, LMQ_TOPIC_2) /* "%LMQ%123,%LMQ%456" */);
                 SendResult sendResult = producer.send(msg);
                 System.out.printf("%s%n", sendResult);
             } catch (Exception e) {

File: remoting/src/test/java/org/apache/rocketmq/remoting/netty/FileRegionEncoderTest.java
Patch:
@@ -49,7 +49,7 @@ public void testEncode() throws IOException {
         random.nextBytes(data);
         write(file, data);
         FileRegion fileRegion = new DefaultFileRegion(file, 0, dataLength);
-        Assert.assertEquals(0, fileRegion.transfered());
+        Assert.assertEquals(0, fileRegion.transferred());
         Assert.assertEquals(dataLength, fileRegion.count());
         Assert.assertTrue(channel.writeOutbound(fileRegion));
         ByteBuf out = (ByteBuf) channel.readOutbound();
@@ -77,4 +77,4 @@ private static void write(File file, byte[] data) throws IOException {
             }
         }
     }
-}
\ No newline at end of file
+}

File: store/src/main/java/org/apache/rocketmq/store/AppendMessageStatus.java
Patch:
@@ -25,4 +25,5 @@ public enum AppendMessageStatus {
     MESSAGE_SIZE_EXCEEDED,
     PROPERTIES_SIZE_EXCEEDED,
     UNKNOWN_ERROR,
+    ROCKSDB_ERROR,
 }

File: store/src/main/java/org/apache/rocketmq/store/ConsumeQueue.java
Patch:
@@ -727,8 +727,8 @@ private void multiDispatchLmqQueue(DispatchRequest request, int maxRetries) {
         Map<String, String> prop = request.getPropertiesMap();
         String multiDispatchQueue = prop.get(MessageConst.PROPERTY_INNER_MULTI_DISPATCH);
         String multiQueueOffset = prop.get(MessageConst.PROPERTY_INNER_MULTI_QUEUE_OFFSET);
-        String[] queues = multiDispatchQueue.split(MixAll.MULTI_DISPATCH_QUEUE_SPLITTER);
-        String[] queueOffsets = multiQueueOffset.split(MixAll.MULTI_DISPATCH_QUEUE_SPLITTER);
+        String[] queues = multiDispatchQueue.split(MixAll.LMQ_DISPATCH_SEPARATOR);
+        String[] queueOffsets = multiQueueOffset.split(MixAll.LMQ_DISPATCH_SEPARATOR);
         if (queues.length != queueOffsets.length) {
             log.error("[bug] queues.length!=queueOffsets.length ", request.getTopic());
             return;

File: store/src/main/java/org/apache/rocketmq/store/MessageExtEncoder.java
Patch:
@@ -175,11 +175,11 @@ public PutMessageResult encodeWithoutProperties(MessageExtBrokerInner msgInner)
     public PutMessageResult encode(MessageExtBrokerInner msgInner) {
         this.byteBuf.clear();
 
-        if (CommitLog.isMultiDispatchMsg(messageStoreConfig, msgInner)) {
+        if (messageStoreConfig.isEnableLmq() && msgInner.needDispatchLMQ()) {
             return encodeWithoutProperties(msgInner);
         }
 
-        /**
+        /*
          * Serialize message
          */
         final byte[] propertiesData =

File: store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreTest.java
Patch:
@@ -54,6 +54,7 @@
 import org.apache.rocketmq.store.config.FlushDiskType;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 import org.apache.rocketmq.store.config.StorePathConfigHelper;
+import org.apache.rocketmq.store.exception.ConsumeQueueException;
 import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
 import org.apache.rocketmq.store.queue.CqUnit;
 import org.apache.rocketmq.store.stats.BrokerStatsManager;
@@ -374,7 +375,7 @@ public void testGetStoreTime_PhyOffsetIsLessThanCommitLogMinOffset() {
     }
 
     @Test
-    public void testPutMessage_whenMessagePropertyIsTooLong() {
+    public void testPutMessage_whenMessagePropertyIsTooLong() throws ConsumeQueueException {
         String topicName = "messagePropertyIsTooLongTest";
         MessageExtBrokerInner illegalMessage = buildSpecifyLengthPropertyMessage("123".getBytes(StandardCharsets.UTF_8), topicName, Short.MAX_VALUE + 1);
         assertEquals(messageStore.putMessage(illegalMessage).getPutMessageStatus(), PutMessageStatus.PROPERTIES_SIZE_EXCEEDED);
@@ -539,7 +540,7 @@ public void testGroupCommit() throws Exception {
     }
 
     @Test
-    public void testMaxOffset() throws InterruptedException {
+    public void testMaxOffset() throws InterruptedException, ConsumeQueueException {
         int firstBatchMessages = 3;
         int queueId = 0;
         messageBody = storeMessage.getBytes();

File: store/src/test/java/org/apache/rocketmq/store/RocksDBMessageStoreTest.java
Patch:
@@ -56,6 +56,7 @@
 import org.apache.rocketmq.store.config.FlushDiskType;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 import org.apache.rocketmq.store.config.StorePathConfigHelper;
+import org.apache.rocketmq.store.exception.ConsumeQueueException;
 import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
 import org.apache.rocketmq.store.queue.CqUnit;
 import org.apache.rocketmq.store.stats.BrokerStatsManager;
@@ -434,7 +435,7 @@ public void testGetStoreTime_PhyOffsetIsLessThanCommitLogMinOffset() {
     }
 
     @Test
-    public void testPutMessage_whenMessagePropertyIsTooLong() {
+    public void testPutMessage_whenMessagePropertyIsTooLong() throws ConsumeQueueException {
         if (notExecuted()) {
             return;
         }
@@ -603,7 +604,7 @@ public void testGroupCommit() {
     }
 
     @Test
-    public void testMaxOffset() {
+    public void testMaxOffset() throws ConsumeQueueException {
         if (notExecuted()) {
             return;
         }

File: test/src/test/java/org/apache/rocketmq/test/offset/LagCalculationIT.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.store.DefaultMessageFilter;
+import org.apache.rocketmq.store.exception.ConsumeQueueException;
 import org.apache.rocketmq.test.base.BaseConf;
 import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
@@ -80,7 +81,7 @@ public void tearDown() {
         shutdown();
     }
 
-    private Pair<Long, Long> getLag(List<MessageQueue> mqs) {
+    private Pair<Long, Long> getLag(List<MessageQueue> mqs) throws ConsumeQueueException {
         long lag = 0;
         long pullLag = 0;
         for (BrokerController controller : brokerControllerList) {
@@ -120,7 +121,7 @@ public void waitForFullyDispatched() {
     }
 
     @Test
-    public void testCalculateLag() {
+    public void testCalculateLag() throws ConsumeQueueException {
         int msgSize = 10;
         List<MessageQueue> mqs = producer.getMessageQueue();
         MessageQueueMsg mqMsgs = new MessageQueueMsg(mqs, msgSize);

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -1010,7 +1010,7 @@ private void initialTransaction() {
 
     private void initialAcl() {
         if (!this.brokerConfig.isAclEnable()) {
-            LOG.info("The broker dose not enable acl");
+            LOG.info("The broker does not enable acl");
             return;
         }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -1238,7 +1238,7 @@ public synchronized void resetOffset(String topic, String group, Map<MessageQueu
             if (impl instanceof DefaultMQPushConsumerImpl) {
                 consumer = (DefaultMQPushConsumerImpl) impl;
             } else {
-                log.info("[reset-offset] consumer dose not exist. group={}", group);
+                log.info("[reset-offset] consumer does not exist. group={}", group);
                 return;
             }
             consumer.suspend();

File: common/src/main/java/org/apache/rocketmq/common/statistics/StatisticsBriefInterceptor.java
Patch:
@@ -34,7 +34,7 @@ public StatisticsBriefInterceptor(StatisticsItem item, Pair<String, long[][]>[]
             String name = briefMetas[i].getKey();
             int index = ArrayUtils.indexOf(item.getItemNames(), name);
             if (index < 0) {
-                throw new IllegalArgumentException("illegal breifItemName: " + name);
+                throw new IllegalArgumentException("illegal briefItemName: " + name);
             }
             indexOfItems[i] = index;
             statisticsBriefs[i] = new StatisticsBrief(briefMetas[i].getValue());

File: store/src/main/java/org/apache/rocketmq/store/timer/TimerLog.java
Patch:
@@ -117,7 +117,7 @@ public void shutdown() {
 
     // be careful.
     // if the format of timerlog changed, this offset has to be changed too
-    // so dose the batch writing
+    // so does the batch writing
     public int getOffsetForLastUnit() {
 
         return fileSize - (fileSize - MIN_BLANK_LEN) % UNIT_SIZE - MIN_BLANK_LEN - UNIT_SIZE;

File: test/src/main/java/org/apache/rocketmq/test/util/MQAdminTestUtils.java
Patch:
@@ -193,7 +193,7 @@ public static boolean checkStaticTopic(String topic, DefaultMQAdminExt defaultMQ
         return  true;
     }
 
-    //should only be test, if some middle operation failed, it dose not backup the brokerConfigMap
+    //should only be test, if some middle operation failed, it does not backup the brokerConfigMap
     public static Map<String, TopicConfigAndQueueMapping> createStaticTopic(String topic, int queueNum, Set<String> targetBrokers, DefaultMQAdminExt defaultMQAdminExt) throws Exception {
         Map<String, TopicConfigAndQueueMapping> brokerConfigMap = MQAdminUtils.examineTopicConfigAll(topic, defaultMQAdminExt);
         assert brokerConfigMap.isEmpty();
@@ -203,7 +203,7 @@ public static Map<String, TopicConfigAndQueueMapping> createStaticTopic(String t
         return brokerConfigMap;
     }
 
-    //should only be test, if some middle operation failed, it dose not backup the brokerConfigMap
+    //should only be test, if some middle operation failed, it does not backup the brokerConfigMap
     public static void remappingStaticTopic(String topic, Set<String> targetBrokers, DefaultMQAdminExt defaultMQAdminExt) throws Exception {
         Map<String, TopicConfigAndQueueMapping> brokerConfigMap = MQAdminUtils.examineTopicConfigAll(topic, defaultMQAdminExt);
         assert !brokerConfigMap.isEmpty();

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/order/OrderMsgBroadcastIT.java
Patch:
@@ -36,7 +36,7 @@
 import static com.google.common.truth.Truth.assertThat;
 
 /**
- * Currently, dose not support the ordered broadcast message
+ * Currently, does not support the ordered broadcast message
  */
 @Ignore
 public class OrderMsgBroadcastIT extends BaseBroadcast {

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/ResetOffsetRequestHeader.java
Patch:
@@ -31,11 +31,11 @@ public class ResetOffsetRequestHeader extends TopicQueueRequestHeader {
 
     @CFNotNull
     @RocketMQResource(ResourceType.GROUP)
-    private String topic;
+    private String group;
 
     @CFNotNull
     @RocketMQResource(ResourceType.TOPIC)
-    private String group;
+    private String topic;
 
     private int queueId = -1;
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopBufferMergeService.java
Patch:
@@ -644,6 +644,7 @@ private void putAckToStore(final PopCheckPointWrapper pointWrapper, byte msgInde
         ackMsg.setTopic(point.getTopic());
         ackMsg.setQueueId(point.getQueueId());
         ackMsg.setPopTime(point.getPopTime());
+        ackMsg.setBrokerName(point.getBrokerName());
         msgInner.setTopic(popMessageProcessor.reviveTopic);
         msgInner.setBody(JSON.toJSONString(ackMsg).getBytes(DataConverter.CHARSET_UTF8));
         msgInner.setQueueId(pointWrapper.getReviveQueueId());

File: broker/src/test/java/org/apache/rocketmq/broker/processor/ChangeInvisibleTimeProcessorTest.java
Patch:
@@ -19,6 +19,7 @@
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandlerContext;
 import java.lang.reflect.Field;
+import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.client.ClientChannelInfo;
 import org.apache.rocketmq.broker.client.net.Broker2Client;
@@ -108,7 +109,7 @@ public void init() throws IllegalAccessException, NoSuchFieldException {
 
     @Test
     public void testProcessRequest_Success() throws RemotingCommandException, InterruptedException, RemotingTimeoutException, RemotingSendRequestException {
-        when(escapeBridge.putMessageToSpecificQueue(any(MessageExtBrokerInner.class))).thenReturn(new PutMessageResult(PutMessageStatus.PUT_OK, new AppendMessageResult(AppendMessageStatus.PUT_OK)));
+        when(escapeBridge.asyncPutMessageToSpecificQueue(any(MessageExtBrokerInner.class))).thenReturn(CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.PUT_OK, new AppendMessageResult(AppendMessageStatus.PUT_OK))));
         int queueId = 0;
         long queueOffset = 0;
         long popTime = System.currentTimeMillis() - 1_000;

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/message/LocalMessageServiceTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.proxy.service.message;
 
+import io.netty.channel.Channel;
 import java.net.InetSocketAddress;
 import java.nio.ByteBuffer;
 import java.nio.charset.StandardCharsets;
@@ -370,11 +371,11 @@ public void testChangeInvisibleTime() throws Exception {
         responseHeader.setReviveQid(newReviveQueueId);
         responseHeader.setInvisibleTime(newInvisibleTime);
         responseHeader.setPopTime(newPopTime);
-        Mockito.when(changeInvisibleTimeProcessorMock.processRequest(Mockito.any(SimpleChannelHandlerContext.class), Mockito.argThat(argument -> {
+        Mockito.when(changeInvisibleTimeProcessorMock.processRequestAsync(Mockito.any(Channel.class), Mockito.argThat(argument -> {
             boolean first = argument.getCode() == RequestCode.CHANGE_MESSAGE_INVISIBLETIME;
             boolean second = argument.readCustomHeader() instanceof ChangeInvisibleTimeRequestHeader;
             return first && second;
-        }))).thenReturn(remotingCommand);
+        }), Mockito.any(Boolean.class))).thenReturn(CompletableFuture.completedFuture(remotingCommand));
         ChangeInvisibleTimeRequestHeader requestHeader = new ChangeInvisibleTimeRequestHeader();
         CompletableFuture<AckResult> future = localMessageService.changeInvisibleTime(proxyContext, handle, messageId,
             requestHeader, 1000L);

File: test/src/test/java/org/apache/rocketmq/test/base/IntegrationTestBase.java
Patch:
@@ -136,6 +136,8 @@ public static BrokerController createAndStartBroker(String nsAddr) {
         brokerConfig.setNamesrvAddr(nsAddr);
         brokerConfig.setEnablePropertyFilter(true);
         brokerConfig.setEnableCalcFilterBitMap(true);
+        brokerConfig.setAppendAckAsync(true);
+        brokerConfig.setAppendCkAsync(true);
         storeConfig.setEnableConsumeQueueExt(true);
         brokerConfig.setLoadBalancePollNameServerInterval(500);
         storeConfig.setStorePathRootDir(baseDir);

File: remoting/src/main/java/org/apache/rocketmq/remoting/rpc/RpcClientImpl.java
Patch:
@@ -174,6 +174,7 @@ public void operationSucceed(RemotingCommand response) {
                             PullMessageResponseHeader responseHeader =
                                 (PullMessageResponseHeader) response.decodeCommandCustomHeader(PullMessageResponseHeader.class);
                             rpcResponsePromise.setSuccess(new RpcResponse(response.getCode(), responseHeader, response.getBody()));
+                            break;
                         default:
                             RpcResponse rpcResponse = new RpcResponse(new RpcException(response.getCode(), "unexpected remote response code"));
                             rpcResponsePromise.setSuccess(rpcResponse);

File: broker/src/main/java/org/apache/rocketmq/broker/controller/ReplicasManager.java
Patch:
@@ -525,7 +525,7 @@ private boolean applyBrokerId() {
             return true;
 
         } catch (Exception e) {
-            LOGGER.error("fail to apply broker id: {}", e, tempBrokerMetadata.getBrokerId());
+            LOGGER.error("fail to apply broker id: {}", tempBrokerMetadata.getBrokerId(), e);
             return false;
         }
     }

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -250,6 +250,8 @@ public void start(final boolean startFactory) throws MQClientException {
 
                 this.mQClientFactory = MQClientManager.getInstance().getOrCreateMQClientInstance(this.defaultMQProducer, rpcHook);
 
+                defaultMQProducer.initProduceAccumulator();
+
                 boolean registerOK = mQClientFactory.registerProducer(this.defaultMQProducer.getProducerGroup(), this);
                 if (!registerOK) {
                     this.serviceState = ServiceState.CREATE_JUST;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PeekMessageProcessor.java
Patch:
@@ -258,8 +258,8 @@ private long peekMsgFromQueue(boolean isRetry, GetMessageResult getMessageResult
                 BrokerMetricsManager.throughputOutTotal.add(getMessageResult.getBufferTotalSize(), attributes);
             }
 
-            for (SelectMappedBufferResult mapedBuffer : getMessageTmpResult.getMessageMapedList()) {
-                getMessageResult.addMessage(mapedBuffer);
+            for (SelectMappedBufferResult mappedBuffer : getMessageTmpResult.getMessageMapedList()) {
+                getMessageResult.addMessage(mappedBuffer);
             }
         }
         return restNum;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ReplyMessageProcessor.java
Patch:
@@ -115,10 +115,10 @@ private RemotingCommand processReplyMessageRequest(final ChannelHandlerContext c
         response.addExtField(MessageConst.PROPERTY_TRACE_SWITCH, String.valueOf(this.brokerController.getBrokerConfig().isTraceOn()));
 
         log.debug("receive SendReplyMessage request command, {}", request);
-        final long startTimstamp = this.brokerController.getBrokerConfig().getStartAcceptSendRequestTimeStamp();
-        if (this.brokerController.getMessageStore().now() < startTimstamp) {
+        final long startTimestamp = this.brokerController.getBrokerConfig().getStartAcceptSendRequestTimeStamp();
+        if (this.brokerController.getMessageStore().now() < startTimestamp) {
             response.setCode(ResponseCode.SYSTEM_ERROR);
-            response.setRemark(String.format("broker unable to service, until %s", UtilAll.timeMillisToHumanString2(startTimstamp)));
+            response.setRemark(String.format("broker unable to service, until %s", UtilAll.timeMillisToHumanString2(startTimestamp)));
             return response;
         }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -1619,10 +1619,10 @@ public void queryMessage(
         final QueryMessageRequestHeader requestHeader,
         final long timeoutMillis,
         final InvokeCallback invokeCallback,
-        final Boolean isUnqiueKey
+        final Boolean isUniqueKey
     ) throws RemotingException, MQBrokerException, InterruptedException {
         RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.QUERY_MESSAGE, requestHeader);
-        request.addExtField(MixAll.UNIQUE_MSG_QUERY_FLAG, isUnqiueKey.toString());
+        request.addExtField(MixAll.UNIQUE_MSG_QUERY_FLAG, isUniqueKey.toString());
         this.remotingClient.invokeAsync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr), request, timeoutMillis,
             invokeCallback);
     }

File: test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQBroadCastConsumer.java
Patch:
@@ -26,8 +26,8 @@ public class RMQBroadCastConsumer extends RMQNormalConsumer {
     private static Logger logger = LoggerFactory.getLogger(RMQBroadCastConsumer.class);
 
     public RMQBroadCastConsumer(String nsAddr, String topic, String subExpression,
-        String consumerGroup, AbstractListener listner) {
-        super(nsAddr, topic, subExpression, consumerGroup, listner);
+        String consumerGroup, AbstractListener listener) {
+        super(nsAddr, topic, subExpression, consumerGroup, listener);
     }
 
     @Override

File: test/src/main/java/org/apache/rocketmq/test/clientinterface/AbstractMQConsumer.java
Patch:
@@ -69,8 +69,8 @@ public AbstractListener getListener() {
         return listener;
     }
 
-    public void setListener(AbstractListener listner) {
-        this.listener = listner;
+    public void setListener(AbstractListener listener) {
+        this.listener = listener;
     }
 
     public String getNsAddr() {

File: broker/src/main/java/org/apache/rocketmq/broker/controller/ReplicasManager.java
Patch:
@@ -686,7 +686,7 @@ private void schedulingSyncBrokerMetadata() {
     }
 
     /**
-     * Scheduling sync controller medata.
+     * Scheduling sync controller metadata.
      */
     private boolean schedulingSyncControllerMetadata() {
         // Get controller metadata first.

File: client/src/main/java/org/apache/rocketmq/client/consumer/PopStatus.java
Patch:
@@ -23,7 +23,7 @@ public enum PopStatus {
     FOUND,
     /**
      * No new message can be pull after polling time out
-     * delete after next realease
+     * delete after next release
      */
     NO_NEW_MSG,
     /**

File: common/src/main/java/org/apache/rocketmq/common/utils/ServiceProvider.java
Patch:
@@ -50,7 +50,7 @@ public class ServiceProvider {
      * Returns a string that uniquely identifies the specified object, including its class.
      * <p>
      * The returned string is of form "classname@hashcode", ie is the same as the return value of the Object.toString()
-     * method, but works even when the specified object's class has overidden the toString method.
+     * method, but works even when the specified object's class has overridden the toString method.
      *
      * @param o may be null.
      * @return a string of form classname@hashcode, or "null" if param o is null.

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/ForbiddenType.java
Patch:
@@ -37,11 +37,11 @@ public interface ForbiddenType {
      */
     int TOPIC_FORBIDDEN                = 3;
     /**
-     * 4=forbidden by brocasting mode
+     * 4=forbidden by broadcasting mode
      */
     int BROADCASTING_DISABLE_FORBIDDEN = 4;
     /**
-     * 5=forbidden for a substription(group with a topic)
+     * 5=forbidden for a subscription(group with a topic)
      */
     int SUBSCRIPTION_FORBIDDEN         = 5;
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PullMessageProcessor.java
Patch:
@@ -799,7 +799,7 @@ public void executeRequestWhenWakeup(final Channel channel, final RemotingComman
                     }
                 }
             } catch (RemotingCommandException e1) {
-                LOGGER.error("excuteRequestWhenWakeup run", e1);
+                LOGGER.error("executeRequestWhenWakeup run", e1);
             }
         };
         this.brokerController.getPullMessageExecutor().submit(new RequestTask(run, channel, request));

File: openmessaging/src/main/java/io/openmessaging/rocketmq/promise/DefaultPromise.java
Patch:
@@ -82,7 +82,7 @@ public V get(final long timeout) {
                         try {
                             lock.wait(waitTime);
                         } catch (InterruptedException e) {
-                            LOG.error("promise get value interrupted,excepiton:{}", e.getMessage());
+                            LOG.error("promise get value interrupted,exception:{}", e.getMessage());
                         }
 
                         if (!isDoing()) {

File: store/src/main/java/org/apache/rocketmq/store/AllocateMappedFileService.java
Patch:
@@ -132,7 +132,7 @@ public void shutdown() {
         super.shutdown(true);
         for (AllocateRequest req : this.requestTable.values()) {
             if (req.mappedFile != null) {
-                log.info("delete pre allocated maped file, {}", req.mappedFile.getFileName());
+                log.info("delete pre allocated mapped file, {}", req.mappedFile.getFileName());
                 req.mappedFile.destroy(1000);
             }
         }

File: store/src/main/java/org/apache/rocketmq/store/util/PerfCounter.java
Patch:
@@ -356,7 +356,7 @@ public void run() {
                     }
 
                 } catch (Exception e) {
-                    logger.error("{} get unknown errror", getServiceName(), e);
+                    logger.error("{} get unknown error", getServiceName(), e);
                     try {
                         Thread.sleep(1000);
                     } catch (Throwable ignored) {

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DLedgerController.java
Patch:
@@ -101,7 +101,7 @@ public class DLedgerController implements Controller {
 
     private final List<BrokerLifecycleListener> brokerLifecycleListeners;
 
-    // Usr for checking whether the broker is alive
+    // use for checking whether the broker is alive
     private BrokerValidPredicate brokerAlivePredicate;
     // use for elect a master
     private ElectPolicy electPolicy;

File: common/src/main/java/org/apache/rocketmq/common/MQVersion.java
Patch:
@@ -18,7 +18,7 @@
 
 public class MQVersion {
 
-    public static final int CURRENT_VERSION = Version.V5_3_0.ordinal();
+    public static final int CURRENT_VERSION = Version.V5_3_1.ordinal();
 
     public static String getVersionDesc(int value) {
         int length = Version.values().length;

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -104,6 +104,7 @@
 import org.apache.rocketmq.tools.command.offset.ResetOffsetByTimeCommand;
 import org.apache.rocketmq.tools.command.offset.SkipAccumulationSubCommand;
 import org.apache.rocketmq.tools.command.producer.ProducerSubCommand;
+import org.apache.rocketmq.tools.command.queue.CheckRocksdbCqWriteProgressCommand;
 import org.apache.rocketmq.tools.command.queue.QueryConsumeQueueCommand;
 import org.apache.rocketmq.tools.command.stats.StatsAllSubCommand;
 import org.apache.rocketmq.tools.command.topic.AllocateMQSubCommand;
@@ -304,6 +305,7 @@ public static void initCommand() {
         initCommand(new ListAclSubCommand());
         initCommand(new CopyAclsSubCommand());
         initCommand(new RocksDBConfigToJsonCommand());
+        initCommand(new CheckRocksdbCqWriteProgressCommand());
     }
 
     private static void printHelp() {

File: tools/src/main/java/org/apache/rocketmq/tools/command/queue/CheckRocksdbCqWriteProgressCommand.java
Patch:
@@ -34,7 +34,7 @@ public class CheckRocksdbCqWriteProgressCommand implements SubCommand {
 
     @Override
     public String commandName() {
-        return "checkRocksdbCqWriteProgressCommandCommand";
+        return "checkRocksdbCqWriteProgress";
     }
 
     @Override
@@ -82,9 +82,9 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
                 String brokerAddr = brokerData.getBrokerAddrs().get(0L);
                 CheckRocksdbCqWriteProgressResponseBody body = defaultMQAdminExt.checkRocksdbCqWriteProgress(brokerAddr, topic);
                 if (StringUtils.isNotBlank(topic)) {
-                    System.out.printf(body.getDiffResult());
+                    System.out.print(body.getDiffResult());
                 } else {
-                    System.out.printf(brokerName + " | " + brokerAddr + " | " + body.getDiffResult());
+                    System.out.print(brokerName + " | " + brokerAddr + " | \n" + body.getDiffResult());
                 }
             }
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RequestCode.java
Patch:
@@ -217,6 +217,7 @@ public class RequestCode {
 
     public static final int GET_SUBSCRIPTIONGROUP_CONFIG = 352;
     public static final int UPDATE_AND_GET_GROUP_FORBIDDEN = 353;
+    public static final int CHECK_ROCKSDB_CQ_WRITE_PROGRESS = 354;
 
     public static final int LITE_PULL_MESSAGE = 361;
 

File: store/src/main/java/org/apache/rocketmq/store/queue/CqUnit.java
Patch:
@@ -109,6 +109,7 @@ public String toString() {
                 ", size=" + size +
                 ", pos=" + pos +
                 ", batchNum=" + batchNum +
+                ", tagsCode=" + tagsCode +
                 ", compactedOffset=" + compactedOffset +
                 '}';
     }

File: store/src/main/java/org/apache/rocketmq/store/queue/RocksDBConsumeQueue.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.nio.ByteBuffer;
 import java.util.List;
-
 import org.apache.rocketmq.common.BoundaryType;
 import org.apache.rocketmq.common.Pair;
 import org.apache.rocketmq.common.attribute.CQType;
@@ -311,7 +310,7 @@ public CqUnit getEarliestUnit() {
     public CqUnit getLatestUnit() {
         try {
             long maxOffset = this.messageStore.getQueueStore().getMaxOffsetInQueue(topic, queueId);
-            return get(maxOffset);
+            return get(maxOffset > 0 ? maxOffset - 1 : maxOffset);
         } catch (RocksDBException e) {
             ERROR_LOG.error("getLatestUnit Failed. topic: {}, queueId: {}, {}", topic, queueId, e.getMessage());
         }

File: tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java
Patch:
@@ -48,6 +48,7 @@
 import org.apache.rocketmq.remoting.protocol.body.ConsumeStatsList;
 import org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;
 import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
+import org.apache.rocketmq.remoting.protocol.body.CheckRocksdbCqWriteProgressResponseBody;
 import org.apache.rocketmq.remoting.protocol.body.EpochEntryCache;
 import org.apache.rocketmq.remoting.protocol.body.GroupList;
 import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;
@@ -148,6 +149,8 @@ ConsumeStats examineConsumeStats(
         final String consumerGroup) throws RemotingException, MQClientException, InterruptedException,
         MQBrokerException;
 
+    CheckRocksdbCqWriteProgressResponseBody checkRocksdbCqWriteProgress(String brokerAddr, String topic) throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException, MQClientException;
+
     ConsumeStats examineConsumeStats(final String consumerGroup,
         final String topic) throws RemotingException, MQClientException,
         InterruptedException, MQBrokerException;

File: tools/src/main/java/org/apache/rocketmq/tools/command/export/ExportMetadataInRocksDBCommand.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.rocketmq.tools.command.export;
 
 import com.alibaba.fastjson.JSONObject;
@@ -77,6 +78,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
         }
 
         String configType = commandLine.getOptionValue("configType").trim().toLowerCase();
+        path += "/" + configType;
 
         boolean jsonEnable = false;
         if (commandLine.hasOption("jsonEnable")) {
@@ -86,7 +88,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
 
         ConfigRocksDBStorage kvStore = new ConfigRocksDBStorage(path, true /* readOnly */);
         if (!kvStore.start()) {
-            System.out.print("RocksDB load error, path=" + path + "\n");
+            System.out.printf("RocksDB load error, path=%s\n" , path);
             return;
         }
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingServer.java
Patch:
@@ -270,8 +270,9 @@ public void run(Timeout timeout) {
      */
     protected ChannelPipeline configChannel(SocketChannel ch) {
         return ch.pipeline()
-            .addLast(defaultEventExecutorGroup, HANDSHAKE_HANDLER_NAME, new HandshakeHandler())
-            .addLast(defaultEventExecutorGroup,
+            .addLast(nettyServerConfig.isServerNettyWorkerGroupEnable() ? defaultEventExecutorGroup : null,
+                HANDSHAKE_HANDLER_NAME, new HandshakeHandler())
+            .addLast(nettyServerConfig.isServerNettyWorkerGroupEnable() ? defaultEventExecutorGroup : null,
                 encoder,
                 new NettyDecoder(),
                 distributionHandler,

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -78,6 +78,7 @@
 import org.apache.rocketmq.common.namesrv.TopAddressing;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
+import org.apache.rocketmq.common.utils.StartAndShutdown;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
@@ -184,9 +185,9 @@
 import org.apache.rocketmq.remoting.protocol.header.GetTopicStatsInfoRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.GetTopicsByClusterRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.GetUserRequestHeader;
+import org.apache.rocketmq.remoting.protocol.header.HeartbeatRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.ListAclsRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.ListUsersRequestHeader;
-import org.apache.rocketmq.remoting.protocol.header.HeartbeatRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.LockBatchMqRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.PopMessageResponseHeader;
@@ -247,7 +248,7 @@
 
 import static org.apache.rocketmq.remoting.protocol.RemotingSysResponseCode.SUCCESS;
 
-public class MQClientAPIImpl implements NameServerUpdateCallback {
+public class MQClientAPIImpl implements NameServerUpdateCallback, StartAndShutdown {
     private final static Logger log = LoggerFactory.getLogger(MQClientAPIImpl.class);
     private static boolean sendSmartMsg =
         Boolean.parseBoolean(System.getProperty("org.apache.rocketmq.client.sendSmartMsg", "true"));

File: test/src/test/java/org/apache/rocketmq/test/base/BaseConf.java
Patch:
@@ -100,8 +100,8 @@ public class BaseConf {
             brokerController2.getBrokerConfig().getListenPort());
 
         brokerController3 = IntegrationTestBase.createAndStartBroker(NAMESRV_ADDR);
-        log.debug("Broker {} started, listening: {}", brokerController2.getBrokerConfig().getBrokerName(),
-            brokerController2.getBrokerConfig().getListenPort());
+        log.debug("Broker {} started, listening: {}", brokerController3.getBrokerConfig().getBrokerName(),
+            brokerController3.getBrokerConfig().getListenPort());
 
         CLUSTER_NAME = brokerController1.getBrokerConfig().getBrokerClusterName();
         BROKER1_NAME = brokerController1.getBrokerConfig().getBrokerName();

File: store/src/main/java/org/apache/rocketmq/store/MessageExtEncoder.java
Patch:
@@ -175,7 +175,7 @@ public PutMessageResult encodeWithoutProperties(MessageExtBrokerInner msgInner)
     public PutMessageResult encode(MessageExtBrokerInner msgInner) {
         this.byteBuf.clear();
 
-        if (messageStoreConfig.isEnableMultiDispatch() && CommitLog.isMultiDispatchMsg(msgInner)) {
+        if (CommitLog.isMultiDispatchMsg(messageStoreConfig, msgInner)) {
             return encodeWithoutProperties(msgInner);
         }
 

File: auth/src/main/java/org/apache/rocketmq/auth/authorization/factory/AuthorizationFactory.java
Patch:
@@ -105,7 +105,7 @@ public static AuthorizationEvaluator getEvaluator(AuthConfig config, Supplier<?>
     public static AuthorizationStrategy getStrategy(AuthConfig config, Supplier<?> metadataService) {
         try {
             Class<? extends AuthorizationStrategy> clazz = StatelessAuthorizationStrategy.class;
-            if (StringUtils.isNotBlank(config.getAuthenticationStrategy())) {
+            if (StringUtils.isNotBlank(config.getAuthorizationStrategy())) {
                 clazz = (Class<? extends AuthorizationStrategy>) Class.forName(config.getAuthorizationStrategy());
             }
             return clazz.getDeclaredConstructor(AuthConfig.class, Supplier.class).newInstance(config, metadataService);

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/protocol/http2proxy/HAProxyMessageForwarder.java
Patch:
@@ -118,11 +118,11 @@ protected HAProxyMessage buildHAProxyMessage(Channel inboundChannel) throws Ille
             }
         } else {
             String remoteAddr = RemotingHelper.parseChannelRemoteAddr(inboundChannel);
-            sourceAddress = StringUtils.substringBefore(remoteAddr, CommonConstants.COLON);
+            sourceAddress = StringUtils.substringBeforeLast(remoteAddr, CommonConstants.COLON);
             sourcePort = Integer.parseInt(StringUtils.substringAfterLast(remoteAddr, CommonConstants.COLON));
 
             String localAddr = RemotingHelper.parseChannelLocalAddr(inboundChannel);
-            destinationAddress = StringUtils.substringBefore(localAddr, CommonConstants.COLON);
+            destinationAddress = StringUtils.substringBeforeLast(localAddr, CommonConstants.COLON);
             destinationPort = Integer.parseInt(StringUtils.substringAfterLast(localAddr, CommonConstants.COLON));
         }
 

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -1834,12 +1834,13 @@ class DefaultAppendMessageCallback implements AppendMessageCallback {
         private static final int END_FILE_MIN_BLANK_LENGTH = 4 + 4;
         // Store the message content
         private final ByteBuffer msgStoreItemMemory;
-        private final int crc32ReservedLength = enabledAppendPropCRC ? CommitLog.CRC32_RESERVED_LEN : 0;
+        private final int crc32ReservedLength;
         private final MessageStoreConfig messageStoreConfig;
 
         DefaultAppendMessageCallback(MessageStoreConfig messageStoreConfig) {
             this.msgStoreItemMemory = ByteBuffer.allocate(END_FILE_MIN_BLANK_LENGTH);
             this.messageStoreConfig = messageStoreConfig;
+            this.crc32ReservedLength = messageStoreConfig.isEnabledAppendPropCRC() ? CommitLog.CRC32_RESERVED_LEN : 0;
         }
 
         public AppendMessageResult handlePropertiesForLmqMsg(ByteBuffer preEncodeBuffer,

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/index/IndexStoreServiceTest.java
Patch:
@@ -120,7 +120,7 @@ public void doConvertOldFormatTest() throws IOException {
         indexService = new IndexStoreService(fileAllocator, filePath);
         indexService.start();
         ConcurrentSkipListMap<Long, IndexFile> timeStoreTable = indexService.getTimeStoreTable();
-        Assert.assertEquals(1, timeStoreTable.size());
+        Assert.assertEquals(2, timeStoreTable.size());
         Assert.assertEquals(Long.valueOf(timestamp), timeStoreTable.firstKey());
         mappedFile.destroy(10 * 1000);
     }
@@ -232,7 +232,7 @@ public void restartServiceTest() throws InterruptedException {
         indexService = new IndexStoreService(fileAllocator, filePath);
         indexService.start();
         Assert.assertEquals(timestamp, indexService.getTimeStoreTable().firstKey().longValue());
-        Assert.assertEquals(2, indexService.getTimeStoreTable().size());
+        Assert.assertEquals(4, indexService.getTimeStoreTable().size());
         Assert.assertEquals(IndexFile.IndexStatusEnum.UPLOAD,
             indexService.getTimeStoreTable().firstEntry().getValue().getFileStatus());
     }

File: client/src/test/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumerTest.java
Patch:
@@ -209,7 +209,9 @@ public PullResult answer(InvocationOnMock mock) throws Throwable {
 
     @AfterClass
     public static void terminate() {
-        pushConsumer.shutdown();
+        if (pushConsumer != null) {
+            pushConsumer.shutdown();
+        }
     }
 
     @Test

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/balance/NormalMsgDynamicBalanceIT.java
Patch:
@@ -96,6 +96,8 @@ public void test3ConsumerAndCrashOne() {
         MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(), consumer1.getListener(),
             consumer2.getListener(), consumer3.getListener());
         consumer3.shutdown();
+        TestUtils.waitForSeconds(WAIT_TIME);
+
         producer.clearMsg();
         consumer1.clearMsg();
         consumer2.clearMsg();

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java
Patch:
@@ -373,7 +373,7 @@ public RemotingCommand processRequest(final ChannelHandlerContext ctx, RemotingC
         // considered the same type because they share the same retry flag in previous fields.
         // Therefore, needRetryV1 is designed as a subset of needRetry, and within a single request,
         // only one type of retry topic is able to call popMsgFromQueue.
-        boolean needRetry = randomQ % 5 == 0;
+        boolean needRetry = randomQ < brokerConfig.getPopFromRetryProbability();
         boolean needRetryV1 = false;
         if (brokerConfig.isEnableRetryTopicV2() && brokerConfig.isRetrieveMessageFromPopRetryTopicV1()) {
             needRetryV1 = randomQ % 2 == 0;

File: client/src/main/java/org/apache/rocketmq/client/producer/DefaultMQProducer.java
Patch:
@@ -79,7 +79,8 @@ public class DefaultMQProducer extends ClientConfig implements MQProducer {
         ResponseCode.SYSTEM_BUSY,
         ResponseCode.NO_PERMISSION,
         ResponseCode.NO_BUYER_ID,
-        ResponseCode.NOT_IN_CURRENT_UNIT
+        ResponseCode.NOT_IN_CURRENT_UNIT,
+        ResponseCode.GO_AWAY
     ));
 
     /**

File: client/src/test/java/org/apache/rocketmq/client/producer/DefaultMQProducerTest.java
Patch:
@@ -769,7 +769,7 @@ public void assertTotalBatchMaxBytes() throws NoSuchFieldException, IllegalAcces
     @Test
     public void assertGetRetryResponseCodes() {
         assertNotNull(producer.getRetryResponseCodes());
-        assertEquals(7, producer.getRetryResponseCodes().size());
+        assertEquals(8, producer.getRetryResponseCodes().size());
     }
 
     @Test

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -278,6 +278,7 @@ public void processRequestCommand(final ChannelHandlerContext ctx, final Remotin
                     "please go away");
                 response.setOpaque(opaque);
                 writeResponse(ctx.channel(), cmd, response);
+                log.info("proxy is shutting down, write response GO_AWAY. channel={}, requestCode={}, opaque={}", ctx.channel(), cmd.getCode(), opaque);
                 return;
             }
         }

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/pop/NotificationIT.java
Patch:
@@ -30,6 +30,7 @@
 import org.assertj.core.util.Lists;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.Ignore;
 
 import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
 
@@ -53,6 +54,7 @@ public void setUp() {
     }
 
     @Test
+    @Ignore
     public void testNotification() throws Exception {
         long pollTime = 500;
         CompletableFuture<Boolean> future1 = client.notification(brokerAddr, topic, group, messageQueue.getQueueId(), pollTime, System.currentTimeMillis(), 5000);

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/ClusterGrpcIT.java
Patch:
@@ -30,6 +30,7 @@
 import org.junit.Before;
 import org.junit.FixMethodOrder;
 import org.junit.Test;
+import org.junit.Ignore;
 import org.junit.runners.MethodSorters;
 
 import static org.awaitility.Awaitility.await;
@@ -87,6 +88,7 @@ public void testTransactionCheckThenCommit() {
     }
 
     @Test
+    @Ignore
     public void testSimpleConsumerSendAndRecvDelayMessage() throws Exception {
         super.testSimpleConsumerSendAndRecvDelayMessage();
     }

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/LocalGrpcIT.java
Patch:
@@ -26,6 +26,7 @@
 import org.junit.Before;
 import org.junit.FixMethodOrder;
 import org.junit.Test;
+import org.junit.Ignore;
 import org.junit.runners.MethodSorters;
 
 @FixMethodOrder(value = MethodSorters.NAME_ASCENDING)
@@ -75,6 +76,7 @@ public void testTransactionCheckThenCommit() {
     }
 
     @Test
+    @Ignore
     public void testSimpleConsumerSendAndRecvDelayMessage() throws Exception {
         super.testSimpleConsumerSendAndRecvDelayMessage();
     }

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -747,7 +747,7 @@ public void run() {
                         LOG.error("Failed to update nameServer address list", e);
                     }
                 }
-            }, 1000 * 10, 1000 * 60 * 2, TimeUnit.MILLISECONDS);
+            }, 1000 * 10, this.brokerConfig.getUpdateNameServerAddrPeriod(), TimeUnit.MILLISECONDS);
         } else if (this.brokerConfig.isFetchNamesrvAddrByAddressServer()) {
             this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
 

File: store/src/test/java/org/apache/rocketmq/store/dledger/DLedgerMultiPathTest.java
Patch:
@@ -39,6 +39,7 @@ public class DLedgerMultiPathTest extends MessageStoreTestBase {
 
     @Test
     public void multiDirsStorageTest() throws Exception {
+        Assume.assumeFalse(MixAll.isMac());
         Assume.assumeFalse(MixAll.isWindows());
         String base = createBaseDir();
         String topic = UUID.randomUUID().toString();

File: store/src/test/java/org/apache/rocketmq/store/dledger/MixCommitlogTest.java
Patch:
@@ -34,6 +34,7 @@ public class MixCommitlogTest extends MessageStoreTestBase {
     @Test
     public void testFallBehindCQ() throws Exception {
         Assume.assumeFalse(MixAll.isWindows());
+        Assume.assumeFalse(MixAll.isMac());
         String base = createBaseDir();
         String topic = UUID.randomUUID().toString();
         String peers = String.format("n0-localhost:%d", nextPort());
@@ -75,6 +76,7 @@ public void testFallBehindCQ() throws Exception {
 
     @Test
     public void testPutAndGet() throws Exception {
+        Assume.assumeFalse(MixAll.isMac());
         String base = createBaseDir();
         String topic = UUID.randomUUID().toString();
         String peers = String.format("n0-localhost:%d", nextPort());
@@ -138,6 +140,7 @@ public void testPutAndGet() throws Exception {
 
     @Test
     public void testDeleteExpiredFiles() throws Exception {
+        Assume.assumeFalse(MixAll.isMac());
         String base = createBaseDir();
         String topic = UUID.randomUUID().toString();
         String peers = String.format("n0-localhost:%d", nextPort());

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPullConsumer.java
Patch:
@@ -262,7 +262,7 @@ public void setRegisterTopics(Set<String> registerTopics) {
     public void sendMessageBack(MessageExt msg, int delayLevel)
         throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
         msg.setTopic(withNamespace(msg.getTopic()));
-        this.defaultMQPullConsumerImpl.sendMessageBack(msg, delayLevel, null);
+        this.defaultMQPullConsumerImpl.sendMessageBack(msg, delayLevel, msg.getBrokerName());
     }
 
     /**

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumer.java
Patch:
@@ -688,7 +688,7 @@ public void setSubscription(Map<String, String> subscription) {
     public void sendMessageBack(MessageExt msg, int delayLevel)
         throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
         msg.setTopic(withNamespace(msg.getTopic()));
-        this.defaultMQPushConsumerImpl.sendMessageBack(msg, delayLevel, (String) null);
+        this.defaultMQPushConsumerImpl.sendMessageBack(msg, delayLevel, msg.getBrokerName());
     }
 
     /**

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -752,7 +752,7 @@ public void sendMessageBack(MessageExt msg, int delayLevel, final String brokerN
 
     public void sendMessageBack(MessageExt msg, int delayLevel, final MessageQueue mq)
             throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
-        sendMessageBack(msg, delayLevel, null, mq);
+        sendMessageBack(msg, delayLevel, msg.getBrokerName(), mq);
     }
 
 

File: client/src/test/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImplTest.java
Patch:
@@ -651,10 +651,11 @@ public void testQueryMessageByUniqKey() throws InterruptedException, MQClientExc
 
     @Test
     public void testSendMessageBack() throws InterruptedException, MQClientException, MQBrokerException, RemotingException {
+        when(mQClientFactory.findBrokerAddressInPublish(anyString())).thenReturn(defaultBrokerAddr);
         defaultMQPushConsumerImpl.sendMessageBack(createMessageExt(), 1, createMessageQueue());
         verify(mqClientAPIImpl).consumerSendMessageBack(
                 eq(defaultBrokerAddr),
-                any(),
+                eq(defaultBroker),
                 any(MessageExt.class),
                 any(),
                 eq(1),

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -2062,7 +2062,7 @@ private RemotingCommand resetOffsetInner(String topic, String group, int queueId
         Map<Integer, Long> queueOffsetMap = new HashMap<>();
 
         // Reset offset for all queues belonging to the specified topic
-        TopicConfig topicConfig = brokerController.getTopicConfigManager().getTopicConfigTable().get(topic);
+        TopicConfig topicConfig = brokerController.getTopicConfigManager().selectTopicConfig(topic);
         if (null == topicConfig) {
             response.setCode(ResponseCode.TOPIC_NOT_EXIST);
             response.setRemark("Topic " + topic + " does not exist");

File: client/src/test/java/org/apache/rocketmq/client/impl/MQAdminImplTest.java
Patch:
@@ -165,7 +165,7 @@ public void assertQueryMessage() throws InterruptedException, MQClientException,
             callback.operationSucceed(response);
             return null;
         }).when(mQClientAPIImpl).queryMessage(anyString(), any(), anyLong(), any(InvokeCallback.class), any());
-        QueryResult actual = mqAdminImpl.queryMessage(defaultTopic, "keys", 100, 1L, 50L, false);
+        QueryResult actual = mqAdminImpl.queryMessage(defaultTopic, "keys", 100, 1L, 50L);
         assertNotNull(actual);
         assertEquals(1, actual.getMessageList().size());
         assertEquals(defaultTopic, actual.getMessageList().get(0).getTopic());

File: example/src/main/java/org/apache/rocketmq/example/lmq/LMQProducer.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.example.simple;
+package org.apache.rocketmq.example.lmq;
 
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
@@ -47,6 +47,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
         for (int i = 0; i < 128; i++) {
             try {
                 Message msg = new Message(TOPIC, TAG, ("Hello RocketMQ " + i).getBytes(RemotingHelper.DEFAULT_CHARSET));
+                msg.setKeys("Key" + i);
                 msg.putUserProperty(MessageConst.PROPERTY_INNER_MULTI_DISPATCH /* "INNER_MULTI_DISPATCH" */,
                     String.join(MixAll.MULTI_DISPATCH_QUEUE_SPLITTER, LMQ_TOPIC_1, LMQ_TOPIC_2) /* "%LMQ%123,%LMQ%456" */);
                 SendResult sendResult = producer.send(msg);

File: example/src/main/java/org/apache/rocketmq/example/lmq/LMQPullConsumer.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.example.simple;
+package org.apache.rocketmq.example.lmq;
 
 import java.util.Arrays;
 import java.util.HashSet;

File: example/src/main/java/org/apache/rocketmq/example/lmq/LMQPushConsumer.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.example.simple;
+package org.apache.rocketmq.example.lmq;
 
 import com.google.common.collect.Lists;
 

File: example/src/main/java/org/apache/rocketmq/example/lmq/LMQPushPopConsumer.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.example.simple;
+package org.apache.rocketmq.example.lmq;
 
 import com.google.common.collect.Lists;
 import java.util.HashMap;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java
Patch:
@@ -540,6 +540,7 @@ private CompletableFuture<Long> popMsgFromQueue(String topic, String attemptId,
             return future;
         }
 
+        future.whenComplete((result, throwable) -> queueLockManager.unLock(lockKey));
         if (isPopShouldStop(topic, requestHeader.getConsumerGroup(), queueId)) {
             POP_LOGGER.warn("Too much msgs unacked, then stop poping. topic={}, group={}, queueId={}", topic, requestHeader.getConsumerGroup(), queueId);
             restNum = this.brokerController.getMessageStore().getMaxOffsetInQueue(topic, queueId) - offset + restNum;
@@ -548,7 +549,6 @@ private CompletableFuture<Long> popMsgFromQueue(String topic, String attemptId,
         }
 
         try {
-            future.whenComplete((result, throwable) -> queueLockManager.unLock(lockKey));
             offset = getPopOffset(topic, requestHeader.getConsumerGroup(), queueId, requestHeader.getInitMode(),
                 true, lockKey, true);
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RequestCode.java
Patch:
@@ -148,6 +148,8 @@ public class RequestCode {
 
     public static final int GET_TOPICS_BY_CLUSTER = 224;
 
+    public static final int UPDATE_AND_CREATE_SUBSCRIPTIONGROUP_LIST = 225;
+
     public static final int QUERY_TOPICS_BY_CONSUMER = 343;
     public static final int QUERY_SUBSCRIPTION_BY_CONSUMER = 345;
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -67,6 +67,7 @@
 import org.apache.rocketmq.tools.command.consumer.GetConsumerConfigSubCommand;
 import org.apache.rocketmq.tools.command.consumer.SetConsumeModeSubCommand;
 import org.apache.rocketmq.tools.command.consumer.StartMonitoringSubCommand;
+import org.apache.rocketmq.tools.command.consumer.UpdateSubGroupListSubCommand;
 import org.apache.rocketmq.tools.command.consumer.UpdateSubGroupSubCommand;
 import org.apache.rocketmq.tools.command.container.AddBrokerSubCommand;
 import org.apache.rocketmq.tools.command.container.RemoveBrokerSubCommand;
@@ -192,6 +193,7 @@ public static void initCommand() {
         initCommand(new UpdateTopicListSubCommand());
         initCommand(new DeleteTopicSubCommand());
         initCommand(new UpdateSubGroupSubCommand());
+        initCommand(new UpdateSubGroupListSubCommand());
         initCommand(new SetConsumeModeSubCommand());
         initCommand(new DeleteSubscriptionGroupCommand());
         initCommand(new UpdateBrokerConfigSubCommand());

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -92,6 +92,7 @@
 import org.apache.rocketmq.tools.command.message.QueryMsgByUniqueKeySubCommand;
 import org.apache.rocketmq.tools.command.message.QueryMsgTraceByIdSubCommand;
 import org.apache.rocketmq.tools.command.message.SendMessageCommand;
+import org.apache.rocketmq.tools.command.metadata.RocksDBConfigToJsonCommand;
 import org.apache.rocketmq.tools.command.namesrv.AddWritePermSubCommand;
 import org.apache.rocketmq.tools.command.namesrv.DeleteKvConfigCommand;
 import org.apache.rocketmq.tools.command.namesrv.GetNamesrvConfigCommand;
@@ -300,6 +301,7 @@ public static void initCommand() {
         initCommand(new GetAclSubCommand());
         initCommand(new ListAclSubCommand());
         initCommand(new CopyAclsSubCommand());
+        initCommand(new RocksDBConfigToJsonCommand());
     }
 
     private static void printHelp() {

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/FlatAppendFile.java
Patch:
@@ -180,6 +180,7 @@ public AppendResult append(ByteBuffer buffer, long timestamp) {
                 log.info("FlatAppendFile#append not successful for the file {} is full, commit result={}",
                     fileSegment.getPath(), commitResult);
                 if (commitResult) {
+                    this.flushFileSegmentMeta(fileSegment);
                     return this.rollingNewFile(this.getAppendOffset()).append(buffer, timestamp);
                 } else {
                     return AppendResult.UNKNOWN_ERROR;

File: broker/src/test/java/org/apache/rocketmq/broker/BrokerOuterAPITest.java
Patch:
@@ -136,6 +136,9 @@ public void test_needRegister_normal() throws Exception {
 
     @Test
     public void test_needRegister_timeout() throws Exception {
+        if (MixAll.isMac()) {
+            return;
+        }
         init();
         brokerOuterAPI.start();
 

File: client/src/test/java/org/apache/rocketmq/client/producer/ProduceAccumulatorTest.java
Patch:
@@ -106,6 +106,7 @@ public void testProduceAccumulator_sync() throws MQBrokerException, RemotingExce
         final MockMQProducer mockMQProducer = new MockMQProducer();
 
         final ProduceAccumulator produceAccumulator = new ProduceAccumulator("test");
+        produceAccumulator.batchMaxDelayMs(3000);
         produceAccumulator.start();
 
         List<Message> messages = new ArrayList<Message>();
@@ -134,7 +135,7 @@ public void run() {
                 }
             }).start();
         }
-        assertThat(countDownLatch.await(3000L, TimeUnit.MILLISECONDS)).isTrue();
+        assertThat(countDownLatch.await(5000L, TimeUnit.MILLISECONDS)).isTrue();
         assertThat(mockMQProducer.beSendMessage instanceof MessageBatch).isTrue();
 
         MessageBatch messageBatch1 = (MessageBatch) mockMQProducer.beSendMessage;

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/index/IndexService.java
Patch:
@@ -52,6 +52,9 @@ AppendResult putKey(
      */
     CompletableFuture<List<IndexItem>> queryAsync(String topic, String key, int maxCount, long beginTime, long endTime);
 
+    default void forceUpload() {
+    }
+
     /**
      * Shutdown the index service.
      */

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/core/MessageStoreDispatcherImplTest.java
Patch:
@@ -99,6 +99,7 @@ public void dispatchFromCommitLogTest() throws Exception {
         messageStore = Mockito.mock(TieredMessageStore.class);
         IndexService indexService =
             new IndexStoreService(new FlatFileFactory(metadataStore, storeConfig), storePath);
+        indexService.start();
         Mockito.when(messageStore.getDefaultStore()).thenReturn(defaultStore);
         Mockito.when(messageStore.getStoreConfig()).thenReturn(storeConfig);
         Mockito.when(messageStore.getStoreExecutor()).thenReturn(executor);

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/file/FlatCommitLogFileTest.java
Patch:
@@ -77,6 +77,7 @@ public void tryRollingFileTest() throws InterruptedException {
             byteBuffer.putLong(MessageFormatUtil.QUEUE_OFFSET_POSITION, i);
             Assert.assertEquals(AppendResult.SUCCESS, flatFile.append(byteBuffer, i));
             TimeUnit.MILLISECONDS.sleep(2);
+            storeConfig.setCommitLogRollingMinimumSize(byteBuffer.remaining());
             Assert.assertTrue(flatFile.tryRollingFile(1));
         }
         Assert.assertEquals(4, flatFile.fileSegmentTable.size());

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -653,7 +653,7 @@ private PopResult processPopResult(final PopResult popResult, final Subscription
             Iterator<MessageExt> iterator = msgListFilterAgain.iterator();
             while (iterator.hasNext()) {
                 MessageExt msg = iterator.next();
-                if (msg.getReconsumeTimes() > defaultMQPushConsumer.getMaxReconsumeTimes()) {
+                if (msg.getReconsumeTimes() > getMaxReconsumeTimes()) {
                     iterator.remove();
                     log.info("Reconsume times has reached {}, so ack msg={}", msg.getReconsumeTimes(), msg);
                 }

File: common/src/main/java/org/apache/rocketmq/common/stats/Stats.java
Patch:
@@ -44,4 +44,7 @@ public class Stats {
     public static final String GROUP_GET_FALL_SIZE = "GROUP_GET_FALL_SIZE";
     public static final String GROUP_GET_FALL_TIME = "GROUP_GET_FALL_TIME";
     public static final String GROUP_GET_LATENCY = "GROUP_GET_LATENCY";
+    public static final String TOPIC_PUT_LATENCY = "TOPIC_PUT_LATENCY";
+    public static final String GROUP_ACK_NUMS = "GROUP_ACK_NUMS";
+    public static final String GROUP_CK_NUMS = "GROUP_CK_NUMS";
 }

File: common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
Patch:
@@ -288,7 +288,7 @@ public class BrokerConfig extends BrokerIdentity {
 
     private boolean enableDetailStat = true;
 
-    private boolean autoDeleteUnusedStats = false;
+    private boolean autoDeleteUnusedStats = true;
 
     /**
      * Whether to distinguish log paths when multiple brokers are deployed on the same machine

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessagePopConcurrentlyService.java
Patch:
@@ -471,7 +471,7 @@ public void run() {
                     processQueue.decFoundMsg(-msgs.size());
                 }
 
-                log.warn("processQueue invalid. isDropped={}, isPopTimeout={}, messageQueue={}, msgs={}",
+                log.warn("processQueue invalid or popTimeout. isDropped={}, isPopTimeout={}, messageQueue={}, msgs={}",
                         processQueue.isDropped(), isPopTimeout(), messageQueue, msgs);
             }
         }

File: client/src/main/java/org/apache/rocketmq/client/producer/DefaultMQProducer.java
Patch:
@@ -348,7 +348,7 @@ public void start() throws MQClientException {
         }
         if (enableTrace) {
             try {
-                AsyncTraceDispatcher dispatcher = new AsyncTraceDispatcher(producerGroup, TraceDispatcher.Type.PRODUCE, traceTopic, rpcHook);
+                AsyncTraceDispatcher dispatcher = new AsyncTraceDispatcher(producerGroup, TraceDispatcher.Type.PRODUCE, getTraceMsgBatchNum(), traceTopic, rpcHook);
                 dispatcher.setHostProducer(this.defaultMQProducerImpl);
                 dispatcher.setNamespaceV2(this.namespaceV2);
                 traceDispatcher = dispatcher;

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceDataEncoder.java
Patch:
@@ -193,9 +193,10 @@ public static TraceTransferBean encoderFromContextBean(TraceContext ctx) {
                         .append(bean.getKeys()).append(TraceConstants.CONTENT_SPLITOR)//
                         .append(ctx.getContextCode()).append(TraceConstants.CONTENT_SPLITOR);
                     if (!ctx.getAccessChannel().equals(AccessChannel.CLOUD)) {
-                        sb.append(ctx.getTimeStamp()).append(TraceConstants.CONTENT_SPLITOR)
-                            .append(ctx.getGroupName()).append(TraceConstants.FIELD_SPLITOR);
+                        sb.append(ctx.getTimeStamp()).append(TraceConstants.CONTENT_SPLITOR);
+                        sb.append(ctx.getGroupName());
                     }
+                    sb.append(TraceConstants.FIELD_SPLITOR);
                 }
             }
             break;

File: controller/src/main/java/org/apache/rocketmq/controller/impl/heartbeat/DefaultBrokerHeartbeatManager.java
Patch:
@@ -184,7 +184,7 @@ public Map<String, Map<String, Integer>> getActiveBrokersNum() {
             .forEach(id -> {
                 map.computeIfAbsent(id.getClusterName(), k -> new HashMap<>());
                 map.get(id.getClusterName()).compute(id.getBrokerName(), (broker, num) ->
-                    num == null ? 0 : num + 1
+                    num == null ? 1 : num + 1
                 );
             });
         return map;

File: controller/src/main/java/org/apache/rocketmq/controller/impl/heartbeat/RaftBrokerHeartBeatManager.java
Patch:
@@ -263,7 +263,7 @@ public Map<String, Map<String, Integer>> getActiveBrokersNum() {
             .forEach(id -> {
                 map.computeIfAbsent(id.getClusterName(), k -> new HashMap<>());
                 map.get(id.getClusterName()).compute(id.getBrokerName(), (broker, num) ->
-                    num == null ? 0 : num + 1
+                    num == null ? 1 : num + 1
                 );
             });
         return map;

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/TieredMessageStore.java
Patch:
@@ -460,6 +460,9 @@ public synchronized void shutdown() {
         if (flatFileStore != null) {
             flatFileStore.shutdown();
         }
+        if (indexService != null) {
+            indexService.shutdown();
+        }
         if (storeExecutor != null) {
             storeExecutor.shutdown();
         }

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/FlatAppendFile.java
Patch:
@@ -90,6 +90,7 @@ public void recoverFileSize() {
     public void initOffset(long offset) {
         if (this.fileSegmentTable.isEmpty()) {
             FileSegment fileSegment = fileSegmentFactory.createSegment(fileType, filePath, offset);
+            fileSegment.initPosition(fileSegment.getSize());
             this.flushFileSegmentMeta(fileSegment);
             this.fileSegmentTable.add(fileSegment);
         }

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/index/IndexStoreFile.java
Patch:
@@ -287,7 +287,9 @@ protected CompletableFuture<List<IndexItem>> queryAsyncFromUnsealedFile(
                     buffer.position(this.getItemPosition(slotValue));
                     buffer.get(bytes);
                     IndexItem indexItem = new IndexItem(bytes);
-                    if (hashCode == indexItem.getHashCode()) {
+                    long storeTimestamp = indexItem.getTimeDiff() + beginTimestamp.get();
+                    if (hashCode == indexItem.getHashCode() &&
+                        beginTime <= storeTimestamp && storeTimestamp <= endTime) {
                         result.add(indexItem);
                         if (result.size() > maxCount) {
                             break;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
Patch:
@@ -125,7 +125,7 @@ private boolean reviveRetry(PopCheckPoint popCheckPoint, MessageExt messageExt)
             msgInner.getProperties().put(MessageConst.PROPERTY_FIRST_POP_TIME, String.valueOf(popCheckPoint.getPopTime()));
         }
         msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));
-        addRetryTopicIfNoExit(msgInner.getTopic(), popCheckPoint.getCId());
+        addRetryTopicIfNotExist(msgInner.getTopic(), popCheckPoint.getCId());
         PutMessageResult putMessageResult = brokerController.getEscapeBridge().putMessageToSpecificQueue(msgInner);
         PopMetricsManager.incPopReviveRetryMessageCount(popCheckPoint, putMessageResult.getPutMessageStatus());
         if (brokerController.getBrokerConfig().isEnablePopLog()) {
@@ -153,7 +153,7 @@ private void initPopRetryOffset(String topic, String consumerGroup) {
         }
     }
 
-    private void addRetryTopicIfNoExit(String topic, String consumerGroup) {
+    public void addRetryTopicIfNotExist(String topic, String consumerGroup) {
         if (brokerController != null) {
             TopicConfig topicConfig = brokerController.getTopicConfigManager().selectTopicConfig(topic);
             if (topicConfig != null) {

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceConstants.java
Patch:
@@ -32,7 +32,7 @@ public class TraceConstants {
     public static final String ROCKETMQ_SUCCESS = "rocketmq.success";
     public static final String ROCKETMQ_TAGS = "rocketmq.tags";
     public static final String ROCKETMQ_KEYS = "rocketmq.keys";
-    public static final String ROCKETMQ_SOTRE_HOST = "rocketmq.store_host";
+    public static final String ROCKETMQ_STORE_HOST = "rocketmq.store_host";
     public static final String ROCKETMQ_BODY_LENGTH = "rocketmq.body_length";
     public static final String ROCKETMQ_MSG_ID = "rocketmq.mgs_id";
     public static final String ROCKETMQ_MSG_TYPE = "rocketmq.mgs_type";

File: client/src/main/java/org/apache/rocketmq/client/trace/hook/EndTransactionOpenTracingHookImpl.java
Patch:
@@ -60,7 +60,7 @@ public void endTransaction(EndTransactionContext context) {
         span.setTag(Tags.MESSAGE_BUS_DESTINATION, msg.getTopic());
         span.setTag(TraceConstants.ROCKETMQ_TAGS, msg.getTags());
         span.setTag(TraceConstants.ROCKETMQ_KEYS, msg.getKeys());
-        span.setTag(TraceConstants.ROCKETMQ_SOTRE_HOST, context.getBrokerAddr());
+        span.setTag(TraceConstants.ROCKETMQ_STORE_HOST, context.getBrokerAddr());
         span.setTag(TraceConstants.ROCKETMQ_MSG_ID, context.getMsgId());
         span.setTag(TraceConstants.ROCKETMQ_MSG_TYPE, MessageType.Trans_msg_Commit.name());
         span.setTag(TraceConstants.ROCKETMQ_TRANSACTION_ID, context.getTransactionId());

File: client/src/main/java/org/apache/rocketmq/client/trace/hook/SendMessageOpenTracingHookImpl.java
Patch:
@@ -60,7 +60,7 @@ public void sendMessageBefore(SendMessageContext context) {
         span.setTag(Tags.MESSAGE_BUS_DESTINATION, msg.getTopic());
         span.setTag(TraceConstants.ROCKETMQ_TAGS, msg.getTags());
         span.setTag(TraceConstants.ROCKETMQ_KEYS, msg.getKeys());
-        span.setTag(TraceConstants.ROCKETMQ_SOTRE_HOST, context.getBrokerAddr());
+        span.setTag(TraceConstants.ROCKETMQ_STORE_HOST, context.getBrokerAddr());
         span.setTag(TraceConstants.ROCKETMQ_MSG_TYPE, context.getMsgType().name());
         span.setTag(TraceConstants.ROCKETMQ_BODY_LENGTH, msg.getBody().length);
         context.setMqTraceContext(span);

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQProducerWithOpenTracingTest.java
Patch:
@@ -124,7 +124,7 @@ public void testSendMessageSync_WithTrace_Success() throws RemotingException, In
         assertThat(span.tags().get(TraceConstants.ROCKETMQ_BODY_LENGTH)).isEqualTo(3);
         assertThat(span.tags().get(TraceConstants.ROCKETMQ_REGION_ID)).isEqualTo("HZ");
         assertThat(span.tags().get(TraceConstants.ROCKETMQ_MSG_TYPE)).isEqualTo(MessageType.Normal_Msg.name());
-        assertThat(span.tags().get(TraceConstants.ROCKETMQ_SOTRE_HOST)).isEqualTo("127.0.0.1:10911");
+        assertThat(span.tags().get(TraceConstants.ROCKETMQ_STORE_HOST)).isEqualTo("127.0.0.1:10911");
     }
 
     @After

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -1941,7 +1941,7 @@ private RemotingCommand getAllMessageRequestMode(ChannelHandlerContext ctx, Remo
         final RemotingCommand response = RemotingCommand.createResponseCommand(null);
 
         String content = this.brokerController.getQueryAssignmentProcessor().getMessageRequestModeManager().encode();
-        if (content != null && content.length() > 0) {
+        if (content != null && !content.isEmpty()) {
             try {
                 response.setBody(content.getBytes(MixAll.DEFAULT_CHARSET));
             } catch (UnsupportedEncodingException e) {

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -1834,7 +1834,7 @@ class DefaultAppendMessageCallback implements AppendMessageCallback {
         private static final int END_FILE_MIN_BLANK_LENGTH = 4 + 4;
         // Store the message content
         private final ByteBuffer msgStoreItemMemory;
-        private final int crc32ReservedLength = CommitLog.CRC32_RESERVED_LEN;
+        private final int crc32ReservedLength = enabledAppendPropCRC ? CommitLog.CRC32_RESERVED_LEN : 0;
         private final MessageStoreConfig messageStoreConfig;
 
         DefaultAppendMessageCallback(MessageStoreConfig messageStoreConfig) {

File: common/src/main/java/org/apache/rocketmq/common/MQVersion.java
Patch:
@@ -18,7 +18,7 @@
 
 public class MQVersion {
 
-    public static final int CURRENT_VERSION = Version.V5_2_0.ordinal();
+    public static final int CURRENT_VERSION = Version.V5_3_0.ordinal();
 
     public static String getVersionDesc(int value) {
         int length = Version.values().length;

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -2519,4 +2519,6 @@ public ColdDataCgCtrService getColdDataCgCtrService() {
     public void setColdDataCgCtrService(ColdDataCgCtrService coldDataCgCtrService) {
         this.coldDataCgCtrService = coldDataCgCtrService;
     }
+
+
 }

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -152,6 +152,7 @@ public MQClientInstance(ClientConfig clientConfig, int instanceIndex, String cli
         this.nettyClientConfig.setClientCallbackExecutorThreads(clientConfig.getClientCallbackExecutorThreads());
         this.nettyClientConfig.setUseTLS(clientConfig.isUseTLS());
         this.nettyClientConfig.setSocksProxyConfig(clientConfig.getSocksProxyConfig());
+        this.nettyClientConfig.setScanAvailableNameSrv(false);
         ClientRemotingProcessor clientRemotingProcessor = new ClientRemotingProcessor(this);
         ChannelEventListener channelEventListener;
         if (clientConfig.isEnableHeartbeatChannelEventListener()) {

File: common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
Patch:
@@ -70,7 +70,7 @@ public class BrokerConfig extends BrokerIdentity {
     private int putMessageFutureThreadPoolNums = Math.min(PROCESSOR_NUMBER, 4);
     private int pullMessageThreadPoolNums = 16 + PROCESSOR_NUMBER * 2;
     private int litePullMessageThreadPoolNums = 16 + PROCESSOR_NUMBER * 2;
-    private int ackMessageThreadPoolNums = 3;
+    private int ackMessageThreadPoolNums = 16;
     private int processReplyMessageThreadPoolNums = 16 + PROCESSOR_NUMBER * 2;
     private int queryMessageThreadPoolNums = 8 + PROCESSOR_NUMBER;
 

File: store/src/main/java/org/apache/rocketmq/store/ConsumeQueue.java
Patch:
@@ -816,7 +816,7 @@ private boolean putMessagePositionInfo(final long offset, final int size, final
                 long currentLogicOffset = mappedFile.getWrotePosition() + mappedFile.getFileFromOffset();
 
                 if (expectLogicOffset < currentLogicOffset) {
-                    log.warn("Build  consume queue repeatedly, expectLogicOffset: {} currentLogicOffset: {} Topic: {} QID: {} Diff: {}",
+                    log.warn("Build consume queue repeatedly, expectLogicOffset: {} currentLogicOffset: {} Topic: {} QID: {} Diff: {}",
                         expectLogicOffset, currentLogicOffset, this.topic, this.queueId, expectLogicOffset - currentLogicOffset);
                     return true;
                 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ConsumerProcessor.java
Patch:
@@ -137,7 +137,6 @@ public CompletableFuture<PopResult> popMessage(
             requestHeader.setExp(subscriptionData.getSubString());
             requestHeader.setOrder(fifo);
             requestHeader.setAttemptId(attemptId);
-            requestHeader.setBornTime(System.currentTimeMillis());
 
             future = this.serviceManager.getMessageService().popMessage(
                     ctx,

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/message/LocalMessageService.java
Patch:
@@ -195,6 +195,7 @@ public CompletableFuture<Void> endTransactionOneway(ProxyContext ctx, String bro
     @Override
     public CompletableFuture<PopResult> popMessage(ProxyContext ctx, AddressableMessageQueue messageQueue,
         PopMessageRequestHeader requestHeader, long timeoutMillis) {
+        requestHeader.setBornTime(System.currentTimeMillis());
         RemotingCommand request = LocalRemotingCommand.createRequestCommand(RequestCode.POP_MESSAGE, requestHeader, ctx.getLanguage());
         CompletableFuture<RemotingCommand> future = new CompletableFuture<>();
         SimpleChannel channel = channelManager.createInvocationChannel(ctx);

File: srvutil/src/main/java/org/apache/rocketmq/srvutil/AclFileWatchService.java
Patch:
@@ -73,7 +73,7 @@ public void getAllAclFiles(String path) {
             return;
         }
         File[] files = file.listFiles();
-        for (int i = 0; i < files.length; i++) {
+        for (int i = 0; files != null && i < files.length; i++) {
             String fileName = files[i].getAbsolutePath();
             File f = new File(fileName);
             if (fileName.equals(aclPath + File.separator + "tools.yml")) {

File: broker/src/main/java/org/apache/rocketmq/broker/latency/BrokerFastFailure.java
Patch:
@@ -115,6 +115,9 @@ private void cleanExpiredRequest() {
 
         cleanExpiredRequestInQueue(this.brokerController.getAckThreadPoolQueue(),
             brokerController.getBrokerConfig().getWaitTimeMillsInAckQueue());
+
+        cleanExpiredRequestInQueue(this.brokerController.getAdminBrokerThreadPoolQueue(),
+            brokerController.getBrokerConfig().getWaitTimeMillsInAdminBrokerQueue());
     }
 
     void cleanExpiredRequestInQueue(final BlockingQueue<Runnable> blockingQueue, final long maxWaitTimeMillsInQueue) {

File: common/src/main/java/org/apache/rocketmq/common/message/MessageDecoder.java
Patch:
@@ -666,7 +666,6 @@ public static byte[] encodeMessage(Message message) {
         byte[] propertiesBytes = properties.getBytes(CHARSET_UTF8);
         //note properties length must not more than Short.MAX
         short propertiesLength = (short) propertiesBytes.length;
-        int sysFlag = message.getFlag();
         int storeSize = 4 // 1 TOTALSIZE
             + 4 // 2 MAGICCOD
             + 4 // 3 BODYCRC

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
Patch:
@@ -322,7 +322,7 @@ protected void consumeReviveMessage(ConsumeReviveObj consumeReviveObj) {
                 if (endTime != 0 && System.currentTimeMillis() - endTime > 3 * PopAckConstants.SECOND && timerDelay <= 0 && commitLogDelay <= 0) {
                     endTime = System.currentTimeMillis();
                 }
-                POP_LOGGER.info("reviveQueueId={}, offset is {}, can not get new msg, old endTime {}, new endTime {}, timerDelay={}, commitLogDelay={} ",
+                POP_LOGGER.debug("reviveQueueId={}, offset is {}, can not get new msg, old endTime {}, new endTime {}, timerDelay={}, commitLogDelay={} ",
                     queueId, offset, old, endTime, timerDelay, commitLogDelay);
                 if (endTime - firstRt > PopAckConstants.ackTimeInterval + PopAckConstants.SECOND) {
                     break;
@@ -528,7 +528,7 @@ private void reviveMsgFromCk(PopCheckPoint popCheckPoint) {
                     GetMessageStatus getMessageStatus = resultPair.getObject1();
                     MessageExt message = resultPair.getObject2();
                     if (message == null) {
-                        POP_LOGGER.warn("reviveQueueId={}, can not get biz msg topic is {}, offset is {}, then continue",
+                        POP_LOGGER.debug("reviveQueueId={}, can not get biz msg topic is {}, offset is {}, then continue",
                             queueId, popCheckPoint.getTopic(), msgOffset);
                         switch (getMessageStatus) {
                             case MESSAGE_WAS_REMOVING:

File: tools/src/test/java/org/apache/rocketmq/tools/command/topic/UpdateTopicListSubCommandTest.java
Patch:
@@ -21,11 +21,11 @@
 import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
 import org.apache.rocketmq.srvutil.ServerUtil;
-import org.junit.jupiter.api.Test;
+import org.junit.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-class UpdateTopicListSubCommandTest {
+public class UpdateTopicListSubCommandTest {
 
     @Test
     public void testArguments() {

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -651,7 +651,7 @@ public long getConfirmOffset() {
         } else if (this.defaultMessageStore.getMessageStoreConfig().isDuplicationEnable()) {
             return this.confirmOffset;
         } else {
-            return getMaxOffset();
+            return this.defaultMessageStore.isSyncDiskFlush()  ? getFlushedWhere() : getMaxOffset();
         }
     }
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RequestCode.java
Patch:
@@ -28,6 +28,7 @@ public class RequestCode {
     public static final int QUERY_CONSUMER_OFFSET = 14;
     public static final int UPDATE_CONSUMER_OFFSET = 15;
     public static final int UPDATE_AND_CREATE_TOPIC = 17;
+    public static final int UPDATE_AND_CREATE_TOPIC_LIST = 18;
     public static final int GET_ALL_TOPIC_CONFIG = 21;
     public static final int GET_TOPIC_CONFIG_LIST = 22;
 

File: tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java
Patch:
@@ -92,6 +92,9 @@ void createAndUpdateTopicConfig(final String addr,
         final TopicConfig config) throws RemotingException, MQBrokerException,
         InterruptedException, MQClientException;
 
+    void createAndUpdateTopicConfigList(final String addr,
+        final List<TopicConfig> topicConfigList) throws InterruptedException, RemotingException, MQClientException;
+
     void createAndUpdatePlainAccessConfig(final String addr,
         final PlainAccessConfig plainAccessConfig) throws RemotingException, MQBrokerException,
         InterruptedException, MQClientException;

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -113,6 +113,7 @@
 import org.apache.rocketmq.tools.command.topic.TopicStatusSubCommand;
 import org.apache.rocketmq.tools.command.topic.UpdateOrderConfCommand;
 import org.apache.rocketmq.tools.command.topic.UpdateStaticTopicSubCommand;
+import org.apache.rocketmq.tools.command.topic.UpdateTopicListSubCommand;
 import org.apache.rocketmq.tools.command.topic.UpdateTopicPermSubCommand;
 import org.apache.rocketmq.tools.command.topic.UpdateTopicSubCommand;
 
@@ -187,6 +188,7 @@ public static void main0(String[] args, RPCHook rpcHook) {
 
     public static void initCommand() {
         initCommand(new UpdateTopicSubCommand());
+        initCommand(new UpdateTopicListSubCommand());
         initCommand(new DeleteTopicSubCommand());
         initCommand(new UpdateSubGroupSubCommand());
         initCommand(new SetConsumeModeSubCommand());

File: auth/src/main/java/org/apache/rocketmq/auth/authorization/builder/DefaultAuthorizationContextBuilder.java
Patch:
@@ -129,7 +129,9 @@ public List<DefaultAuthorizationContext> build(Metadata metadata, GeneratedMessa
         }
         if (message instanceof NotifyClientTerminationRequest) {
             NotifyClientTerminationRequest request = (NotifyClientTerminationRequest) message;
-            result = newGroupSubContexts(metadata, request.getGroup());
+            if (StringUtils.isNotBlank(request.getGroup().getName())) {
+                result = newGroupSubContexts(metadata, request.getGroup());
+            }
         }
         if (message instanceof ChangeInvisibleDurationRequest) {
             ChangeInvisibleDurationRequest request = (ChangeInvisibleDurationRequest) message;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -581,8 +581,6 @@ public void onSuccess(PopResult popResult) {
                         DefaultMQPushConsumerImpl.this.executePopPullRequestImmediately(popRequest);
                         break;
                     case POLLING_FULL:
-                        DefaultMQPushConsumerImpl.this.executePopPullRequestLater(popRequest, pullTimeDelayMillsWhenException);
-                        break;
                     default:
                         DefaultMQPushConsumerImpl.this.executePopPullRequestLater(popRequest, pullTimeDelayMillsWhenException);
                         break;

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -2116,14 +2116,16 @@ public DefaultFlushManager() {
             this.commitRealTimeService = new CommitLog.CommitRealTimeService();
         }
 
-        @Override public void start() {
+        @Override
+        public void start() {
             this.flushCommitLogService.start();
 
             if (defaultMessageStore.isTransientStorePoolEnable()) {
                 this.commitRealTimeService.start();
             }
         }
 
+        @Override
         public void handleDiskFlush(AppendMessageResult result, PutMessageResult putMessageResult,
             MessageExt messageExt) {
             // Synchronization flush

File: broker/src/main/java/org/apache/rocketmq/broker/metrics/BrokerMetricsConstant.java
Patch:
@@ -21,6 +21,8 @@ public class BrokerMetricsConstant {
 
     public static final String GAUGE_PROCESSOR_WATERMARK = "rocketmq_processor_watermark";
     public static final String GAUGE_BROKER_PERMISSION = "rocketmq_broker_permission";
+    public static final String GAUGE_TOPIC_NUM = "rocketmq_topic_number";
+    public static final String GAUGE_CONSUMER_GROUP_NUM = "rocketmq_consumer_group_number";
 
     public static final String COUNTER_MESSAGES_IN_TOTAL = "rocketmq_messages_in_total";
     public static final String COUNTER_MESSAGES_OUT_TOTAL = "rocketmq_messages_out_total";

File: broker/src/main/java/org/apache/rocketmq/broker/metrics/BrokerMetricsConstant.java
Patch:
@@ -27,6 +27,8 @@ public class BrokerMetricsConstant {
     public static final String COUNTER_THROUGHPUT_IN_TOTAL = "rocketmq_throughput_in_total";
     public static final String COUNTER_THROUGHPUT_OUT_TOTAL = "rocketmq_throughput_out_total";
     public static final String HISTOGRAM_MESSAGE_SIZE = "rocketmq_message_size";
+    public static final String HISTOGRAM_TOPIC_CREATE_EXECUTE_TIME = "rocketmq_topic_create_execution_time";
+    public static final String HISTOGRAM_CONSUMER_GROUP_CREATE_EXECUTE_TIME = "rocketmq_consumer_group_create_execution_time";
 
     public static final String GAUGE_PRODUCER_CONNECTIONS = "rocketmq_producer_connections";
     public static final String GAUGE_CONSUMER_CONNECTIONS = "rocketmq_consumer_connections";
@@ -52,6 +54,7 @@ public class BrokerMetricsConstant {
     public static final String LABEL_PROCESSOR = "processor";
 
     public static final String LABEL_TOPIC = "topic";
+    public static final String LABEL_INVOCATION_STATUS = "invocation_status";
     public static final String LABEL_IS_RETRY = "is_retry";
     public static final String LABEL_IS_SYSTEM = "is_system";
     public static final String LABEL_CONSUMER_GROUP = "consumer_group";

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -430,7 +430,7 @@ private RemotingCommand handlePutMessageResult(PutMessageResult putMessageResult
                         "the broker's disk is full [" + diskUtil() + "], messages are put to the slave, message store has been shut down, etc.");
                 break;
             case OS_PAGE_CACHE_BUSY:
-                response.setCode(ResponseCode.SYSTEM_ERROR);
+                response.setCode(ResponseCode.SYSTEM_BUSY);
                 response.setRemark("[PC_SYNCHRONIZED]broker busy, start flow control for a while");
                 break;
             case LMQ_CONSUME_QUEUE_NUM_EXCEEDED:

File: broker/src/test/java/org/apache/rocketmq/broker/processor/SendMessageProcessorTest.java
Patch:
@@ -174,7 +174,7 @@ public void testProcessRequest_FlushSlaveTimeout() throws Exception {
     public void testProcessRequest_PageCacheBusy() throws Exception {
         when(messageStore.asyncPutMessage(any(MessageExtBrokerInner.class))).
             thenReturn(CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.OS_PAGE_CACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR))));
-        assertPutResult(ResponseCode.SYSTEM_ERROR);
+        assertPutResult(ResponseCode.SYSTEM_BUSY);
     }
 
     @Test

File: remoting/src/test/java/org/apache/rocketmq/remoting/netty/FileRegionEncoderTest.java
Patch:
@@ -21,15 +21,14 @@
 import io.netty.channel.DefaultFileRegion;
 import io.netty.channel.FileRegion;
 import io.netty.channel.embedded.EmbeddedChannel;
-import org.junit.Assert;
-import org.junit.Test;
-
 import java.io.BufferedOutputStream;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.util.Random;
 import java.util.UUID;
+import org.junit.Assert;
+import org.junit.Test;
 
 public class FileRegionEncoderTest {
 

File: store/src/main/java/org/apache/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -50,7 +50,7 @@ public class MessageStoreConfig {
     // CommitLog file size,default is 1G
     private int mappedFileSizeCommitLog = 1024 * 1024 * 1024;
 
-    // CompactinLog file size, default is 100M
+    // CompactionLog file size, default is 100M
     private int compactionMappedFileSize = 100 * 1024 * 1024;
 
     // CompactionLog consumeQueue file size, default is 10M

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -704,9 +704,10 @@ public void operationFail(Throwable throwable) {
                         onExceptionImpl(brokerName, msg, timeoutMillis - cost, request, sendCallback, topicPublishInfo, instance,
                             retryTimesWhenSendFailed, times, ex, context, true, producer);
                     } else {
-                        MQClientException ex = new MQClientException("unknow reseaon", throwable);
+                        MQClientException ex = new MQClientException("unknown reason", throwable);
+                        boolean needRetry = !(throwable instanceof RemotingTooMuchRequestException);
                         onExceptionImpl(brokerName, msg, timeoutMillis - cost, request, sendCallback, topicPublishInfo, instance,
-                            retryTimesWhenSendFailed, times, ex, context, true, producer);
+                            retryTimesWhenSendFailed, times, ex, context, needRetry, producer);
                     }
                 }
             });

File: example/src/main/java/org/apache/rocketmq/example/benchmark/BatchProducer.java
Patch:
@@ -102,8 +102,8 @@ public static void main(String[] args) throws MQClientException {
             String compressType = commandLine.hasOption("ct") ? commandLine.getOptionValue("ct").trim() : "ZLIB";
             int compressLevel = commandLine.hasOption("cl") ? Integer.parseInt(commandLine.getOptionValue("cl")) : 5;
             int compressOverHowMuch = commandLine.hasOption("ch") ? Integer.parseInt(commandLine.getOptionValue("ch")) : 4096;
-            producer.getDefaultMQProducerImpl().setCompressType(CompressionType.of(compressType));
-            producer.getDefaultMQProducerImpl().setCompressLevel(compressLevel);
+            producer.setCompressType(CompressionType.of(compressType));
+            producer.setCompressLevel(compressLevel);
             producer.setCompressMsgBodyOverHowmuch(compressOverHowMuch);
             System.out.printf("compressType: %s compressLevel: %s%n", compressType, compressLevel);
         } else {

File: example/src/main/java/org/apache/rocketmq/example/benchmark/Producer.java
Patch:
@@ -160,8 +160,8 @@ public void run() {
             String compressType = commandLine.hasOption("ct") ? commandLine.getOptionValue("ct").trim() : "ZLIB";
             int compressLevel = commandLine.hasOption("cl") ? Integer.parseInt(commandLine.getOptionValue("cl")) : 5;
             int compressOverHowMuch = commandLine.hasOption("ch") ? Integer.parseInt(commandLine.getOptionValue("ch")) : 4096;
-            producer.getDefaultMQProducerImpl().setCompressType(CompressionType.of(compressType));
-            producer.getDefaultMQProducerImpl().setCompressLevel(compressLevel);
+            producer.setCompressType(CompressionType.of(compressType));
+            producer.setCompressLevel(compressLevel);
             producer.setCompressMsgBodyOverHowmuch(compressOverHowMuch);
             System.out.printf("compressType: %s compressLevel: %s%n", compressType, compressLevel);
         } else {

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/FlatFileStore.java
Patch:
@@ -60,9 +60,9 @@ public boolean load() {
             this.flatFileConcurrentMap.clear();
             this.recover();
             this.executor.commonExecutor.scheduleWithFixedDelay(() -> {
-                long expiredTimeStamp = System.currentTimeMillis() -
-                    TimeUnit.HOURS.toMillis(storeConfig.getTieredStoreFileReservedTime());
                 for (FlatMessageFile flatFile : deepCopyFlatFileToList()) {
+                    long expiredTimeStamp = System.currentTimeMillis() -
+                        TimeUnit.HOURS.toMillis(flatFile.getFileReservedHours());
                     flatFile.destroyExpiredFile(expiredTimeStamp);
                     if (flatFile.consumeQueue.fileSegmentTable.isEmpty()) {
                         this.destroyFile(flatFile.getMessageQueue());

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/metrics/TieredStoreMetricsManager.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.TimeUnit;
 import java.util.function.Supplier;
 import org.apache.rocketmq.common.Pair;
 import org.apache.rocketmq.common.message.MessageQueue;
@@ -180,7 +181,7 @@ public static void init(Meter meter, Supplier<AttributesBuilder> attributesBuild
                     MessageQueue mq = flatFile.getMessageQueue();
                     long maxOffset = next.getMaxOffsetInQueue(mq.getTopic(), mq.getQueueId());
                     long maxTimestamp = next.getMessageStoreTimeStamp(mq.getTopic(), mq.getQueueId(), maxOffset - 1);
-                    if (maxTimestamp > 0 && System.currentTimeMillis() - maxTimestamp > (long) storeConfig.getTieredStoreFileReservedTime() * 60 * 60 * 1000) {
+                    if (maxTimestamp > 0 && System.currentTimeMillis() - maxTimestamp > TimeUnit.HOURS.toMillis(flatFile.getFileReservedHours())) {
                         continue;
                     }
 
@@ -209,7 +210,7 @@ public static void init(Meter meter, Supplier<AttributesBuilder> attributesBuild
                     MessageQueue mq = flatFile.getMessageQueue();
                     long maxOffset = next.getMaxOffsetInQueue(mq.getTopic(), mq.getQueueId());
                     long maxTimestamp = next.getMessageStoreTimeStamp(mq.getTopic(), mq.getQueueId(), maxOffset - 1);
-                    if (maxTimestamp > 0 && System.currentTimeMillis() - maxTimestamp > (long) storeConfig.getTieredStoreFileReservedTime() * 60 * 60 * 1000) {
+                    if (maxTimestamp > 0 && System.currentTimeMillis() - maxTimestamp > TimeUnit.HOURS.toMillis(flatFile.getFileReservedHours())) {
                         continue;
                     }
 

File: common/src/main/java/org/apache/rocketmq/common/ConfigManager.java
Patch:
@@ -52,8 +52,8 @@ public boolean load() {
     private boolean loadBak() {
         String fileName = null;
         try {
-            fileName = this.configFilePath();
-            String jsonString = MixAll.file2String(fileName + ".bak");
+            fileName = this.configFilePath() + ".bak";
+            String jsonString = MixAll.file2String(fileName);
             if (jsonString != null && jsonString.length() > 0) {
                 this.decode(jsonString);
                 log.info("load " + fileName + " OK");

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -1070,7 +1070,7 @@ public boolean doRebalance() {
                         balanced = false;
                     }
                 } catch (Throwable e) {
-                    log.error("doRebalance exception", e);
+                    log.error("doRebalance for consumer group [{}] exception", entry.getKey(), e);
                 }
             }
         }

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -408,7 +408,7 @@ public BrokerController(
             this.brokerConfig, this.nettyServerConfig, this.nettyClientConfig, this.messageStoreConfig
         );
 
-        this.brokerStatsManager.setProduerStateGetter(new BrokerStatsManager.StateGetter() {
+        this.brokerStatsManager.setProducerStateGetter(new BrokerStatsManager.StateGetter() {
             @Override
             public boolean online(String instanceId, String group, String topic) {
                 if (getTopicConfigManager().getTopicConfigTable().containsKey(NamespaceUtil.wrapNamespace(instanceId, topic))) {

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -125,8 +125,8 @@ public class MQClientInstance {
     private final ConcurrentMap<String, HashMap<Long, String>> brokerAddrTable = new ConcurrentHashMap<>();
 
     private final ConcurrentMap<String/* Broker Name */, HashMap<String/* address */, Integer>> brokerVersionTable = new ConcurrentHashMap<>();
-    private final Set<String/* Broker address */> brokerSupportV2HeartbeatSet = new HashSet();
-    private final ConcurrentMap<String, Integer> brokerAddrHeartbeatFingerprintTable = new ConcurrentHashMap();
+    private final Set<String/* Broker address */> brokerSupportV2HeartbeatSet = new HashSet<>();
+    private final ConcurrentMap<String, Integer> brokerAddrHeartbeatFingerprintTable = new ConcurrentHashMap<>();
     private final ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(r -> new Thread(r, "MQClientFactoryScheduledThread"));
     private final ScheduledExecutorService fetchRemoteConfigExecutorService = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {
         @Override
@@ -1161,7 +1161,7 @@ public FindBrokerResult findBrokerAddressInSubscribe(
                 Entry<Long, String> entry = map.entrySet().iterator().next();
                 brokerAddr = entry.getValue();
                 slave = entry.getKey() != MixAll.MASTER_ID;
-                found = true;
+                found = brokerAddr != null;
             }
         }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceImpl.java
Patch:
@@ -525,7 +525,7 @@ private boolean updateProcessQueueTableInRebalance(final String topic, final Set
                 }
 
                 this.removeDirtyOffset(mq);
-                ProcessQueue pq = createProcessQueue(topic);
+                ProcessQueue pq = createProcessQueue();
                 pq.setLocked(true);
                 long nextOffset = this.computePullFromWhere(mq);
                 if (nextOffset >= 0) {
@@ -779,8 +779,6 @@ public boolean removeUnnecessaryPopMessageQueue(final MessageQueue mq, final Pop
 
     public abstract PopProcessQueue createPopProcessQueue();
 
-    public abstract ProcessQueue createProcessQueue(String topicName);
-
     public void removeProcessQueue(final MessageQueue mq) {
         ProcessQueue prev = this.processQueueTable.remove(mq);
         if (prev != null) {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceLitePullImpl.java
Patch:
@@ -177,7 +177,4 @@ public PopProcessQueue createPopProcessQueue() {
         return null;
     }
 
-    public ProcessQueue createProcessQueue(String topicName) {
-        return createProcessQueue();
-    }
 }

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -631,7 +631,7 @@ private Channel getAndCreateChannel(final String addr) throws InterruptedExcepti
         if (channelFuture == null) {
             return null;
         }
-        return getAndCreateChannelAsync(addr).awaitUninterruptibly().channel();
+        return channelFuture.awaitUninterruptibly().channel();
     }
 
     private ChannelFuture getAndCreateNameserverChannelAsync() throws InterruptedException {

File: client/src/main/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueAveragely.java
Patch:
@@ -42,7 +42,7 @@ public List<MessageQueue> allocate(String consumerGroup, String currentCID, List
         int startIndex = (mod > 0 && index < mod) ? index * averageSize : index * averageSize + mod;
         int range = Math.min(averageSize, mqAll.size() - startIndex);
         for (int i = 0; i < range; i++) {
-            result.add(mqAll.get((startIndex + i) % mqAll.size()));
+            result.add(mqAll.get(startIndex + i));
         }
         return result;
     }

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -1222,8 +1222,7 @@ public String findBrokerAddrByTopic(final String topic) {
         if (topicRouteData != null) {
             List<BrokerData> brokers = topicRouteData.getBrokerDatas();
             if (!brokers.isEmpty()) {
-                int index = random.nextInt(brokers.size());
-                BrokerData bd = brokers.get(index % brokers.size());
+                BrokerData bd = brokers.get(random.nextInt(brokers.size()));
                 return bd.selectBrokerAddr();
             }
         }

File: broker/src/main/java/org/apache/rocketmq/broker/schedule/ScheduleMessageService.java
Patch:
@@ -224,7 +224,7 @@ public boolean load() {
         result = result && this.correctDelayOffset();
         return result;
     }
-    
+
     public boolean loadWhenSyncDelayOffset() {
         boolean result = super.load();
         result = result && this.parseDelayLevel();
@@ -377,7 +377,7 @@ public void run() {
                 if (isStarted()) {
                     this.executeOnTimeUp();
                 }
-            } catch (Exception e) {
+            } catch (Throwable e) {
                 // XXX: warn and notify me
                 log.error("ScheduleMessageService, executeOnTimeUp exception", e);
                 this.scheduleNextTimerTask(this.offset, DELAY_FOR_A_PERIOD);

File: client/src/main/java/org/apache/rocketmq/client/producer/DefaultMQProducer.java
Patch:
@@ -72,6 +72,7 @@ public class DefaultMQProducer extends ClientConfig implements MQProducer {
         ResponseCode.TOPIC_NOT_EXIST,
         ResponseCode.SERVICE_NOT_AVAILABLE,
         ResponseCode.SYSTEM_ERROR,
+        ResponseCode.SYSTEM_BUSY,
         ResponseCode.NO_PERMISSION,
         ResponseCode.NO_BUYER_ID,
         ResponseCode.NOT_IN_CURRENT_UNIT

File: auth/src/main/java/org/apache/rocketmq/auth/authentication/builder/DefaultAuthenticationContextBuilder.java
Patch:
@@ -98,12 +98,12 @@ public DefaultAuthenticationContext build(Metadata metadata, GeneratedMessageV3
     @Override
     public DefaultAuthenticationContext build(ChannelHandlerContext context, RemotingCommand request) {
         HashMap<String, String> fields = request.getExtFields();
-        if (MapUtils.isEmpty(fields)) {
-            throw new AuthenticationException("authentication field is null.");
-        }
         DefaultAuthenticationContext result = new DefaultAuthenticationContext();
         result.setChannelId(context.channel().id().asLongText());
         result.setRpcCode(String.valueOf(request.getCode()));
+        if (MapUtils.isEmpty(fields)) {
+            return result;
+        }
         if (!fields.containsKey(SessionCredentials.ACCESS_KEY)) {
             return result;
         }

File: auth/src/main/java/org/apache/rocketmq/auth/authentication/manager/AuthenticationMetadataManagerImpl.java
Patch:
@@ -207,14 +207,14 @@ private void handleException(Exception e, CompletableFuture<?> result) {
     }
 
     private AuthenticationMetadataProvider getAuthenticationMetadataProvider() {
-        if (authorizationMetadataProvider == null) {
+        if (authenticationMetadataProvider == null) {
             throw new IllegalStateException("The authenticationMetadataProvider is not configured");
         }
         return authenticationMetadataProvider;
     }
 
     private AuthorizationMetadataProvider getAuthorizationMetadataProvider() {
-        if (authenticationMetadataProvider == null) {
+        if (authorizationMetadataProvider == null) {
             throw new IllegalStateException("The authorizationMetadataProvider is not configured");
         }
         return authorizationMetadataProvider;

File: client/src/main/java/org/apache/rocketmq/client/impl/MQAdminImpl.java
Patch:
@@ -181,7 +181,7 @@ public Set<MessageQueue> fetchSubscribeMessageQueues(String topic) throws MQClie
                 e);
         }
 
-        throw new MQClientException("Unknow why, Can not find Message Queue for this topic, " + topic, null);
+        throw new MQClientException("Unknown why, Can not find Message Queue for this topic, " + topic, null);
     }
 
     public long searchOffset(MessageQueue mq, long timestamp) throws MQClientException {

File: filter/src/test/java/org/apache/rocketmq/filter/FilterSpiTest.java
Patch:
@@ -68,6 +68,7 @@ public void testRegister() {
             e.printStackTrace();
             assertThat(Boolean.FALSE).isTrue();
         }
+        FilterFactory.INSTANCE.unRegister("Nothing");
     }
 
     @Test

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -2907,7 +2907,7 @@ private RemotingCommand updateUser(ChannelHandlerContext ctx,
                 return this.brokerController.getAuthenticationMetadataManager().updateUser(old);
             }).thenAccept(nil -> response.setCode(ResponseCode.SUCCESS))
             .exceptionally(ex -> {
-                LOGGER.error("delete user {} error", requestHeader.getUsername(), ex);
+                LOGGER.error("update user {} error", requestHeader.getUsername(), ex);
                 return handleAuthException(response, ex);
             })
             .join();

File: auth/src/main/java/org/apache/rocketmq/auth/authentication/provider/DefaultAuthenticationProvider.java
Patch:
@@ -68,7 +68,7 @@ protected HandlerChain<DefaultAuthenticationContext, CompletableFuture<Void>> ne
             .addNext(new DefaultAuthenticationHandler(this.authConfig, metadataService));
     }
 
-    private void doAuditLog(DefaultAuthenticationContext context, Throwable ex) {
+    protected void doAuditLog(DefaultAuthenticationContext context, Throwable ex) {
         if (StringUtils.isBlank(context.getUsername())) {
             return;
         }

File: auth/src/main/java/org/apache/rocketmq/auth/authorization/provider/DefaultAuthorizationProvider.java
Patch:
@@ -78,7 +78,7 @@ protected HandlerChain<DefaultAuthorizationContext, CompletableFuture<Void>> new
             .addNext(new AclAuthorizationHandler(authConfig, metadataService));
     }
 
-    private void doAuditLog(DefaultAuthorizationContext context, Throwable ex) {
+    protected void doAuditLog(DefaultAuthorizationContext context, Throwable ex) {
         if (context.getSubject() == null) {
             return;
         }

File: common/src/main/java/org/apache/rocketmq/common/attribute/TopicMessageType.java
Patch:
@@ -50,7 +50,8 @@ public static TopicMessageType parseFromMessageProperty(Map<String, String> mess
             return TopicMessageType.TRANSACTION;
         } else if (messageProperty.get(MessageConst.PROPERTY_DELAY_TIME_LEVEL) != null
             || messageProperty.get(MessageConst.PROPERTY_TIMER_DELIVER_MS) != null
-            || messageProperty.get(MessageConst.PROPERTY_TIMER_DELAY_SEC) != null) {
+            || messageProperty.get(MessageConst.PROPERTY_TIMER_DELAY_SEC) != null
+            || messageProperty.get(MessageConst.PROPERTY_TIMER_DELAY_MS) != null) {
             return TopicMessageType.DELAY;
         } else if (messageProperty.get(MessageConst.PROPERTY_SHARDING_KEY) != null) {
             return TopicMessageType.FIFO;

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/file/FlatFileStoreTest.java
Patch:
@@ -46,7 +46,7 @@ public void init() {
         storeConfig = new MessageStoreConfig();
         storeConfig.setStorePathRootDir(storePath);
         storeConfig.setTieredBackendServiceProvider(PosixFileSegment.class.getName());
-        storeConfig.setBrokerName(storeConfig.getBrokerName());
+        storeConfig.setBrokerName("brokerName");
         metadataStore = new DefaultMetadataStore(storeConfig);
     }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/ClientRemotingProcessor.java
Patch:
@@ -288,8 +288,8 @@ private void processReplyMessage(MessageExt replyMsg) {
             }
         } else {
             String bornHost = replyMsg.getBornHostString();
-            logger.warn(String.format("receive reply message, but not matched any request, CorrelationId: %s , reply from host: %s",
-                correlationId, bornHost));
+            logger.warn("receive reply message, but not matched any request, CorrelationId: {} , reply from host: {}",
+                correlationId, bornHost);
         }
     }
 }

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -1168,7 +1168,7 @@ private PopResult processPopResponse(final String brokerName, final RemotingComm
                             index = sortMap.get(queueIdKey).indexOf(offset);
                             msgQueueOffset = msgOffsetInfo.get(queueIdKey).get(index);
                             if (msgQueueOffset != offset) {
-                                log.warn("Queue offset[%d] of msg is strange, not equal to the stored in msg, %s",
+                                log.warn("Queue offset[{}] of msg is strange, not equal to the stored in msg, {}",
                                     msgQueueOffset, messageExt);
                             }
                             messageExt.getProperties().put(MessageConst.PROPERTY_POP_CK,
@@ -1181,7 +1181,7 @@ private PopResult processPopResponse(final String brokerName, final RemotingComm
                             index = sortMap.get(queueIdKey).indexOf(messageExt.getQueueOffset());
                             msgQueueOffset = msgOffsetInfo.get(queueIdKey).get(index);
                             if (msgQueueOffset != messageExt.getQueueOffset()) {
-                                log.warn("Queue offset[%d] of msg is strange, not equal to the stored in msg, %s", msgQueueOffset, messageExt);
+                                log.warn("Queue offset[{}] of msg is strange, not equal to the stored in msg, {}", msgQueueOffset, messageExt);
                             }
                             messageExt.getProperties().put(MessageConst.PROPERTY_POP_CK,
                                 ExtraInfoUtil.buildExtraInfo(startOffsetInfo.get(queueIdKey), responseHeader.getPopTime(), responseHeader.getInvisibleTime(),

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessagePopConcurrentlyService.java
Patch:
@@ -153,11 +153,11 @@ public ConsumeMessageDirectlyResult consumeMessageDirectly(MessageExt msg, Strin
             result.setConsumeResult(CMResult.CR_THROW_EXCEPTION);
             result.setRemark(UtilAll.exceptionSimpleDesc(e));
 
-            log.warn(String.format("consumeMessageDirectly exception: %s Group: %s Msgs: %s MQ: %s",
+            log.warn("consumeMessageDirectly exception: {} Group: {} Msgs: {} MQ: {}",
                 UtilAll.exceptionSimpleDesc(e),
                 ConsumeMessagePopConcurrentlyService.this.consumerGroup,
                 msgs,
-                mq), e);
+                mq, e);
         }
 
         result.setSpentTimeMills(System.currentTimeMillis() - beginTime);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessagePopOrderlyService.java
Patch:
@@ -175,11 +175,11 @@ public ConsumeMessageDirectlyResult consumeMessageDirectly(MessageExt msg, Strin
             result.setConsumeResult(CMResult.CR_THROW_EXCEPTION);
             result.setRemark(UtilAll.exceptionSimpleDesc(e));
 
-            log.warn(String.format("consumeMessageDirectly exception: %s Group: %s Msgs: %s MQ: %s",
+            log.warn("consumeMessageDirectly exception: {} Group: {} Msgs: {} MQ: {}",
                 UtilAll.exceptionSimpleDesc(e),
                 ConsumeMessagePopOrderlyService.this.consumerGroup,
                 msgs,
-                mq), e);
+                mq, e);
         }
 
         result.setAutoCommit(context.isAutoCommit());

File: common/src/main/java/org/apache/rocketmq/common/stats/MomentStatsItem.java
Patch:
@@ -55,10 +55,10 @@ public void run() {
     }
 
     public void printAtMinutes() {
-        log.info(String.format("[%s] [%s] Stats Every 5 Minutes, Value: %d",
+        log.info("[{}] [{}] Stats Every 5 Minutes, Value: {}",
             this.statsName,
             this.statsKey,
-            this.value.get()));
+            this.value.get());
     }
 
     public AtomicLong getValue() {

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DLedgerController.java
Patch:
@@ -569,7 +569,7 @@ public void handle(long term, MemberState.Role role) {
                                 break;
                             }
                             tryTimes++;
-                            log.error(String.format("Controller leader append initial log failed, try %d times", tryTimes));
+                            log.error("Controller leader append initial log failed, try {} times", tryTimes);
                             if (tryTimes % 3 == 0) {
                                 log.warn("Controller leader append initial log failed too many times, please wait a while");
                             }

File: test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQPopConsumer.java
Patch:
@@ -58,7 +58,7 @@ public RMQPopConsumer(String nsAddr, String topic, String subExpression,
     @Override
     public void start() {
         client = ConsumerFactory.getRMQPopClient();
-        log.info(String.format("consumer[%s] started!", consumerGroup));
+        log.info("consumer[{}] started!", consumerGroup);
     }
 
     @Override

File: test/src/main/java/org/apache/rocketmq/test/util/MQAdminTestUtils.java
Patch:
@@ -117,8 +117,7 @@ public static boolean createSub(String nameSrvAddr, String clusterName, String c
             for (String addr : masterSet) {
                 try {
                     mqAdminExt.createAndUpdateSubscriptionGroupConfig(addr, config);
-                    log.info(String.format("create subscription group %s to %s success.\n", consumerId,
-                            addr));
+                    log.info("create subscription group {} to {} success.", consumerId, addr);
                 } catch (Exception e) {
                     e.printStackTrace();
                     Thread.sleep(1000 * 1);

File: test/src/test/java/org/apache/rocketmq/test/base/BaseConf.java
Patch:
@@ -287,8 +287,7 @@ public static RMQNormalConsumer getConsumer(String nsAddr, String consumerGroup,
             consumer.setDebug();
         }
         mqClients.add(consumer);
-        log.info(String.format("consumer[%s] start,topic[%s],subExpression[%s]", consumerGroup,
-                topic, subExpression));
+        log.info("consumer[{}] start,topic[{}],subExpression[{}]", consumerGroup, topic, subExpression);
         return consumer;
     }
 

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/pop/PopSubCheckIT.java
Patch:
@@ -64,7 +64,7 @@ public void tearDown() {
     @Test
     public void testNormalPopAck() throws Exception {
         String topic = initTopic();
-        log.info(String.format("use topic: %s; group: %s !", topic, group));
+        log.info("use topic: {}; group: {} !", topic, group);
 
         RMQNormalProducer producer = getProducer(NAMESRV_ADDR, topic);
         producer.getProducer().setCompressMsgBodyOverHowmuch(Integer.MAX_VALUE);

File: client/src/test/java/org/apache/rocketmq/client/impl/MQClientAPIImplTest.java
Patch:
@@ -83,7 +83,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.Matchers;
+import org.mockito.ArgumentMatchers;
 import org.mockito.Mock;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.junit.MockitoJUnitRunner;
@@ -387,7 +387,7 @@ public Object answer(InvocationOnMock mock) throws Throwable {
                 callback.operationSucceed(responseFuture.getResponseCommand());
                 return null;
             }
-        }).when(remotingClient).invokeAsync(Matchers.anyString(), Matchers.any(RemotingCommand.class), Matchers.anyLong(), Matchers.any(InvokeCallback.class));
+        }).when(remotingClient).invokeAsync(ArgumentMatchers.anyString(), ArgumentMatchers.any(RemotingCommand.class), ArgumentMatchers.anyLong(), ArgumentMatchers.any(InvokeCallback.class));
         SendMessageContext sendMessageContext = new SendMessageContext();
         sendMessageContext.setProducer(new DefaultMQProducerImpl(new DefaultMQProducer()));
         msg.getProperties().put("MSG_TYPE", "reply");

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/receipt/DefaultReceiptHandleManagerTest.java
Patch:
@@ -227,7 +227,7 @@ public void testRenewExceedMaxRenewTimes() {
                 Mockito.eq(GROUP), Mockito.eq(TOPIC), Mockito.eq(retryPolicy.nextDelayDuration(messageReceiptHandle.getRenewTimes()))))
             .thenReturn(ackResultFuture);
 
-        await().atMost(Duration.ofSeconds(1)).until(() -> {
+        await().atMost(Duration.ofSeconds(3)).until(() -> {
             receiptHandleManager.scheduleRenewTask();
             try {
                 ReceiptHandleGroup receiptHandleGroup = receiptHandleManager.receiptHandleGroupMap.values().stream().findFirst().get();

File: store/src/main/java/org/apache/rocketmq/store/AllocateMappedFileService.java
Patch:
@@ -138,6 +138,7 @@ public void shutdown() {
         }
     }
 
+    @Override
     public void run() {
         log.info(this.getServiceName() + " service started");
 

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/TopicPublishInfo.java
Patch:
@@ -111,9 +111,7 @@ public MessageQueue selectOneMessageQueue(final String lastBrokerName) {
             return selectOneMessageQueue();
         } else {
             for (int i = 0; i < this.messageQueueList.size(); i++) {
-                int index = this.sendWhichQueue.incrementAndGet();
-                int pos = index % this.messageQueueList.size();
-                MessageQueue mq = this.messageQueueList.get(pos);
+                MessageQueue mq = selectOneMessageQueue();
                 if (!mq.getBrokerName().equals(lastBrokerName)) {
                     return mq;
                 }

File: store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java
Patch:
@@ -318,6 +318,7 @@ private void dledgerRecoverNormally(long maxPhyOffsetOfConsumeQueue) throws Rock
 
     private void dledgerRecoverAbnormally(long maxPhyOffsetOfConsumeQueue) throws RocksDBException {
         boolean checkCRCOnRecover = this.defaultMessageStore.getMessageStoreConfig().isCheckCRCOnRecover();
+        boolean checkDupInfo = this.defaultMessageStore.getMessageStoreConfig().isDuplicationEnable();
         dLedgerFileStore.load();
         if (!dLedgerFileList.getMappedFiles().isEmpty()) {
             dLedgerFileStore.recover();
@@ -346,7 +347,7 @@ private void dledgerRecoverAbnormally(long maxPhyOffsetOfConsumeQueue) throws Ro
             long processOffset = mmapFile.getFileFromOffset();
             long mmapFileOffset = 0;
             while (true) {
-                DispatchRequest dispatchRequest = this.checkMessageAndReturnSize(byteBuffer, checkCRCOnRecover, true);
+                DispatchRequest dispatchRequest = this.checkMessageAndReturnSize(byteBuffer, checkCRCOnRecover, checkDupInfo);
                 int size = dispatchRequest.getMsgSize();
 
                 if (dispatchRequest.isSuccess()) {

File: client/src/main/java/org/apache/rocketmq/client/ClientConfig.java
Patch:
@@ -101,7 +101,7 @@ public class ClientConfig {
     /**
      * The switch for message trace
      */
-    protected boolean enableTrace = true;
+    protected boolean enableTrace = false;
 
     /**
      * The name value of message trace topic. If not set, the default trace topic name will be used.

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQConsumerWithOpenTracingTest.java
Patch:
@@ -135,6 +135,8 @@ public PullResult answer(InvocationOnMock mock) throws Throwable {
             new ConsumeMessageOpenTracingHookImpl(tracer));
         pushConsumer.setNamesrvAddr("127.0.0.1:9876");
         pushConsumer.setPullInterval(60 * 1000);
+        // disable trace to let mock trace work
+        pushConsumer.setEnableTrace(false);
 
         OffsetStore offsetStore = Mockito.mock(OffsetStore.class);
         Mockito.when(offsetStore.readOffset(any(MessageQueue.class), any(ReadOffsetType.class))).thenReturn(0L);

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQProducerWithOpenTracingTest.java
Patch:
@@ -88,6 +88,8 @@ public void init() throws Exception {
                 new SendMessageOpenTracingHookImpl(tracer));
         producer.setNamesrvAddr("127.0.0.1:9876");
         message = new Message(topic, new byte[] {'a', 'b', 'c'});
+        // disable trace to let mock trace work
+        producer.setEnableTrace(false);
 
         producer.start();
 

File: client/src/test/java/org/apache/rocketmq/client/trace/TransactionMQProducerWithOpenTracingTest.java
Patch:
@@ -103,6 +103,8 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
         producer.getDefaultMQProducerImpl().registerSendMessageHook(new SendMessageOpenTracingHookImpl(tracer));
         producer.getDefaultMQProducerImpl().registerEndTransactionHook(new EndTransactionOpenTracingHookImpl(tracer));
         producer.setTransactionListener(transactionListener);
+        // disable trace to let mock trace work
+        producer.setEnableTrace(false);
 
         producer.setNamesrvAddr("127.0.0.1:9876");
         message = new Message(topic, new byte[] {'a', 'b', 'c'});

File: client/src/test/java/org/apache/rocketmq/client/trace/TransactionMQProducerWithTraceTest.java
Patch:
@@ -111,11 +111,12 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
 
         producer.setNamesrvAddr("127.0.0.1:9876");
         message = new Message(topic, new byte[] {'a', 'b', 'c'});
-        asyncTraceDispatcher = (AsyncTraceDispatcher) producer.getTraceDispatcher();
-        traceProducer = asyncTraceDispatcher.getTraceProducer();
 
         producer.start();
 
+        asyncTraceDispatcher = (AsyncTraceDispatcher) producer.getTraceDispatcher();
+        traceProducer = asyncTraceDispatcher.getTraceProducer();
+
         Field field = DefaultMQProducerImpl.class.getDeclaredField("mQClientFactory");
         field.setAccessible(true);
         field.set(producer.getDefaultMQProducerImpl(), mQClientFactory);

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.List;
 import java.util.Random;
 import java.util.Set;
+import java.util.Optional;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
@@ -34,7 +35,6 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
-import com.google.common.base.Optional;
 import org.apache.rocketmq.client.QueryResult;
 import org.apache.rocketmq.client.Validators;
 import org.apache.rocketmq.client.common.ClientErrorCode;
@@ -184,7 +184,7 @@ public String resolve(String name) {
     }
     private Optional<String> pickTopic() {
         if (topicPublishInfoTable.isEmpty()) {
-            return Optional.absent();
+            return Optional.empty();
         }
         return Optional.of(topicPublishInfoTable.keySet().iterator().next());
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/TopicRouteService.java
Patch:
@@ -19,9 +19,10 @@
 import com.github.benmanes.caffeine.cache.CacheLoader;
 import com.github.benmanes.caffeine.cache.Caffeine;
 import com.github.benmanes.caffeine.cache.LoadingCache;
-import com.google.common.base.Optional;
+
 import java.time.Duration;
 import java.util.List;
+import java.util.Optional;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
@@ -139,7 +140,7 @@ public String resolve(String name) {
     // pickup one topic in the topic cache
     private Optional<String> pickTopic() {
         if (topicCache.asMap().isEmpty()) {
-            return Optional.absent();
+            return Optional.empty();
         }
         return Optional.of(topicCache.asMap().keySet().iterator().next());
     }

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyServerConfig.java
Patch:
@@ -156,7 +156,7 @@ public void setUseEpollNativeSelector(boolean useEpollNativeSelector) {
 
     @Override
     public Object clone() throws CloneNotSupportedException {
-        return (NettyServerConfig) super.clone();
+        return super.clone();
     }
 
     public int getWriteBufferLowWaterMark() {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java
Patch:
@@ -901,7 +901,9 @@ public void run() {
                 if ((long) consumeRequestCache.size() * defaultLitePullConsumer.getPullBatchSize() > defaultLitePullConsumer.getPullThresholdForAll()) {
                     scheduledThreadPoolExecutor.schedule(this, PULL_TIME_DELAY_MILLS_WHEN_CACHE_FLOW_CONTROL, TimeUnit.MILLISECONDS);
                     if ((consumeRequestFlowControlTimes++ % 1000) == 0) {
-                        log.warn("The consume request count exceeds threshold {}, so do flow control, consume request count={}, flowControlTimes={}", consumeRequestCache.size(), consumeRequestFlowControlTimes);
+                        log.warn("The consume request count exceeds threshold {}, so do flow control, consume request count={}, flowControlTimes={}",
+                                (int)Math.ceil((double)defaultLitePullConsumer.getPullThresholdForAll() / defaultLitePullConsumer.getPullBatchSize()),
+                                consumeRequestCache.size(), consumeRequestFlowControlTimes);
                     }
                     return;
                 }

File: store/src/main/java/org/apache/rocketmq/store/queue/RocksDBConsumeQueueStore.java
Patch:
@@ -375,7 +375,8 @@ public long getOffsetInQueueByTime(String topic, int queueId, long timestamp, Bo
         if (high == null || high == -1) {
             return 0;
         }
-        return this.rocksDBConsumeQueueTable.binarySearchInCQByTime(topic, queueId, high, low, timestamp, minPhysicOffset);
+        return this.rocksDBConsumeQueueTable.binarySearchInCQByTime(topic, queueId, high, low, timestamp,
+            minPhysicOffset, boundaryType);
     }
 
     @Override

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/core/MessageStoreFetcherImplTest.java
Patch:
@@ -208,11 +208,11 @@ public void testGetOffsetInQueueByTime() throws Exception {
 
         Assert.assertEquals(100L, fetcher.getOffsetInQueueByTime(mq.getTopic(), 1, 10, BoundaryType.LOWER));
         Assert.assertEquals(100L, fetcher.getOffsetInQueueByTime(mq.getTopic(), 1, 11, BoundaryType.LOWER));
-        Assert.assertEquals(199L, fetcher.getOffsetInQueueByTime(mq.getTopic(), 1, 12, BoundaryType.LOWER));
+        Assert.assertEquals(200L, fetcher.getOffsetInQueueByTime(mq.getTopic(), 1, 12, BoundaryType.LOWER));
 
         Assert.assertEquals(100L, fetcher.getOffsetInQueueByTime(mq.getTopic(), 1, 10, BoundaryType.UPPER));
         Assert.assertEquals(199L, fetcher.getOffsetInQueueByTime(mq.getTopic(), 1, 11, BoundaryType.UPPER));
-        Assert.assertEquals(199L, fetcher.getOffsetInQueueByTime(mq.getTopic(), 1, 12, BoundaryType.UPPER));
+        Assert.assertEquals(200L, fetcher.getOffsetInQueueByTime(mq.getTopic(), 1, 12, BoundaryType.UPPER));
     }
 
     @Test

File: auth/src/main/java/org/apache/rocketmq/auth/authentication/chain/DefaultAuthenticationHandler.java
Patch:
@@ -45,6 +45,9 @@ public CompletableFuture<Void> handle(DefaultAuthenticationContext context,
     }
 
     protected CompletableFuture<User> getUser(DefaultAuthenticationContext context) {
+        if (this.authenticationMetadataProvider == null) {
+            throw new AuthenticationException("The authenticationMetadataProvider is not configured");
+        }
         if (StringUtils.isEmpty(context.getUsername())) {
             throw new AuthenticationException("username cannot be null.");
         }

File: auth/src/main/java/org/apache/rocketmq/auth/authorization/chain/UserAuthorizationHandler.java
Patch:
@@ -54,6 +54,9 @@ public CompletableFuture<Void> handle(DefaultAuthorizationContext context, Handl
     }
 
     private CompletableFuture<User> getUser(Subject subject) {
+        if (this.authenticationMetadataProvider == null) {
+            throw new AuthorizationException("The authenticationMetadataProvider is not configured");
+        }
         User user = (User) subject;
         return authenticationMetadataProvider.getUser(user.getUsername()).thenApply(result -> {
             if (result == null) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -1551,7 +1551,9 @@ private RemotingCommand getTopicStatsInfo(ChannelHandlerContext ctx,
         }
 
         TopicStatsTable topicStatsTable = new TopicStatsTable();
-        for (int i = 0; i < topicConfig.getWriteQueueNums(); i++) {
+
+        int maxQueueNums = Math.max(topicConfig.getWriteQueueNums(), topicConfig.getReadQueueNums());
+        for (int i = 0; i < maxQueueNums; i++) {
             MessageQueue mq = new MessageQueue();
             mq.setTopic(topic);
             mq.setBrokerName(this.brokerController.getBrokerConfig().getBrokerName());

File: auth/src/main/java/org/apache/rocketmq/auth/authentication/manager/AuthenticationMetadataManagerImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.rocketmq.auth.authentication.manager;
 
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 import java.util.List;
 import java.util.concurrent.CompletableFuture;
 import org.apache.commons.lang3.StringUtils;

File: auth/src/main/java/org/apache/rocketmq/auth/authentication/provider/LocalAuthenticationMetadataProvider.java
Patch:
@@ -35,7 +35,6 @@
 import org.apache.rocketmq.auth.config.AuthConfig;
 import org.apache.rocketmq.common.config.ConfigRocksDBStorage;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.rocksdb.RocksIterator;
 
 public class LocalAuthenticationMetadataProvider implements AuthenticationMetadataProvider {
@@ -152,7 +151,7 @@ public UserCacheLoader(ConfigRocksDBStorage storage) {
         }
 
         @Override
-        public User load(@NonNull String username) {
+        public User load(String username) {
             try {
                 byte[] keyBytes = username.getBytes(StandardCharsets.UTF_8);
                 byte[] valueBytes = storage.get(keyBytes);

File: auth/src/main/java/org/apache/rocketmq/auth/authorization/provider/LocalAuthorizationMetadataProvider.java
Patch:
@@ -40,7 +40,6 @@
 import org.apache.rocketmq.auth.config.AuthConfig;
 import org.apache.rocketmq.common.config.ConfigRocksDBStorage;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.rocksdb.RocksIterator;
 
 public class LocalAuthorizationMetadataProvider implements AuthorizationMetadataProvider {
@@ -181,7 +180,7 @@ public AclCacheLoader(ConfigRocksDBStorage storage) {
         }
 
         @Override
-        public Acl load(@NonNull String subjectKey) {
+        public Acl load(String subjectKey) {
             try {
                 byte[] keyBytes = subjectKey.getBytes(StandardCharsets.UTF_8);
                 Subject subject = Subject.of(subjectKey);

File: auth/src/main/java/org/apache/rocketmq/auth/migration/AuthMigrator.java
Patch:
@@ -45,8 +45,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.resource.ResourcePattern;
 import org.apache.rocketmq.common.resource.ResourceType;
-import org.apache.rocketmq.logging.org.slf4j.Logger;
-import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class AuthMigrator {
 

File: auth/src/test/java/org/apache/rocketmq/auth/authentication/builder/DefaultAuthenticationContextBuilderTest.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.remoting.protocol.RequestCode;
 import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
-import org.jetbrains.annotations.NotNull;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -110,7 +109,7 @@ public String asLongText() {
             }
 
             @Override
-            public int compareTo(@NotNull ChannelId o) {
+            public int compareTo(ChannelId o) {
                 return 0;
             }
         };

File: auth/src/test/java/org/apache/rocketmq/auth/authorization/builder/DefaultAuthorizationContextBuilderTest.java
Patch:
@@ -72,7 +72,6 @@
 import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumerData;
 import org.apache.rocketmq.remoting.protocol.heartbeat.HeartbeatData;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
-import org.jetbrains.annotations.NotNull;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -499,7 +498,7 @@ public String asLongText() {
             }
 
             @Override
-            public int compareTo(@NotNull ChannelId o) {
+            public int compareTo(ChannelId o) {
                 return 0;
             }
         };

File: client/src/main/java/org/apache/rocketmq/client/impl/MQAdminImpl.java
Patch:
@@ -264,11 +264,11 @@ public long earliestMsgStoreTime(MessageQueue mq) throws MQClientException {
 
     public MessageExt viewMessage(String topic, String msgId)
         throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
-        MessageId messageId = null;
+        MessageId messageId;
         try {
             messageId = MessageDecoder.decodeMessageId(msgId);
-            return this.mQClientFactory.getMQAdminImpl().viewMessage(topic, msgId);
-        } catch (Exception ignored) {
+        } catch (Exception e) {
+            throw new MQClientException(ResponseCode.NO_MESSAGE, "query message by id finished, but no message.");
         }
         return this.mQClientFactory.getMQClientAPIImpl().viewMessage(NetworkUtil.socketAddress2String(messageId.getAddress()),
             topic, messageId.getOffset(), timeoutMillis);

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/AbstractTransactionalMessageCheckListener.java
Patch:
@@ -50,6 +50,7 @@ public AbstractTransactionalMessageCheckListener(BrokerController brokerControll
 
     public void sendCheckMessage(MessageExt msgExt) throws Exception {
         CheckTransactionStateRequestHeader checkTransactionStateRequestHeader = new CheckTransactionStateRequestHeader();
+        checkTransactionStateRequestHeader.setTopic(msgExt.getTopic());
         checkTransactionStateRequestHeader.setCommitLogOffset(msgExt.getCommitLogOffset());
         checkTransactionStateRequestHeader.setOffsetMsgId(msgExt.getMsgId());
         checkTransactionStateRequestHeader.setMsgId(msgExt.getUserProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX));

File: broker/src/test/java/org/apache/rocketmq/broker/BrokerOuterAPITest.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
+import org.apache.rocketmq.auth.config.AuthConfig;
 import org.apache.rocketmq.broker.out.BrokerOuterAPI;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.BrokerIdentity;
@@ -93,7 +94,7 @@ public class BrokerOuterAPITest {
     private BrokerOuterAPI brokerOuterAPI;
 
     public void init() throws Exception {
-        brokerOuterAPI = new BrokerOuterAPI(new NettyClientConfig());
+        brokerOuterAPI = new BrokerOuterAPI(new NettyClientConfig(), new AuthConfig());
         Field field = BrokerOuterAPI.class.getDeclaredField("remotingClient");
         field.setAccessible(true);
         field.set(brokerOuterAPI, nettyRemotingClient);

File: broker/src/test/java/org/apache/rocketmq/broker/processor/ChangeInvisibleTimeProcessorTest.java
Patch:
@@ -62,7 +62,7 @@
 public class ChangeInvisibleTimeProcessorTest {
     private ChangeInvisibleTimeProcessor changeInvisibleTimeProcessor;
     @Spy
-    private BrokerController brokerController = new BrokerController(new BrokerConfig(), new NettyServerConfig(), new NettyClientConfig(), new MessageStoreConfig());
+    private BrokerController brokerController = new BrokerController(new BrokerConfig(), new NettyServerConfig(), new NettyClientConfig(), new MessageStoreConfig(), null);
     @Mock
     private ChannelHandlerContext handlerContext;
     @Mock

File: broker/src/test/java/org/apache/rocketmq/broker/processor/EndTransactionProcessorTest.java
Patch:
@@ -67,7 +67,7 @@ public class EndTransactionProcessorTest {
     @Spy
     private BrokerController
         brokerController = new BrokerController(new BrokerConfig(), new NettyServerConfig(), new NettyClientConfig(),
-            new MessageStoreConfig());
+            new MessageStoreConfig(), null);
 
     @Mock
     private MessageStore messageStore;
@@ -166,6 +166,7 @@ private MessageExt createDefaultMessageExt() {
 
     private EndTransactionRequestHeader createEndTransactionRequestHeader(int status, boolean isCheckMsg) {
         EndTransactionRequestHeader header = new EndTransactionRequestHeader();
+        header.setTopic("topic");
         header.setCommitLogOffset(123456789L);
         header.setFromTransactionCheck(isCheckMsg);
         header.setCommitOrRollback(status);

File: broker/src/test/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageServiceImplTest.java
Patch:
@@ -72,7 +72,7 @@ public class TransactionalMessageServiceImplTest {
 
     @Spy
     private BrokerController brokerController = new BrokerController(new BrokerConfig(), new NettyServerConfig(),
-        new NettyClientConfig(), new MessageStoreConfig());
+        new NettyClientConfig(), new MessageStoreConfig(), null);
 
     @Mock
     private AbstractTransactionalMessageCheckListener listener;
@@ -237,6 +237,7 @@ private Set<MessageQueue> createMessageQueueSet(String topic) {
 
     private EndTransactionRequestHeader createEndTransactionRequestHeader(int status) {
         EndTransactionRequestHeader header = new EndTransactionRequestHeader();
+        header.setTopic("topic");
         header.setCommitLogOffset(123456789L);
         header.setCommitOrRollback(status);
         header.setMsgId("12345678");

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java
Patch:
@@ -804,10 +804,10 @@ public void updateConsumeOffset(MessageQueue mq, long offset) throws MQClientExc
         this.offsetStore.updateOffset(mq, offset, false);
     }
 
-    public MessageExt viewMessage(String msgId)
+    public MessageExt viewMessage(String topic, String msgId)
         throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
         this.isRunning();
-        return this.mQClientFactory.getMQAdminImpl().viewMessage(msgId);
+        return this.mQClientFactory.getMQAdminImpl().viewMessage(topic, msgId);
     }
 
     public void registerFilterMessageHook(final FilterMessageHook hook) {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -1309,9 +1309,9 @@ public void updateCorePoolSize(int corePoolSize) {
         this.consumeMessageService.updateCorePoolSize(corePoolSize);
     }
 
-    public MessageExt viewMessage(String msgId)
+    public MessageExt viewMessage(String topic, String msgId)
         throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
-        return this.mQClientFactory.getMQAdminImpl().viewMessage(msgId);
+        return this.mQClientFactory.getMQAdminImpl().viewMessage(topic, msgId);
     }
 
     public RebalanceImpl getRebalanceImpl() {

File: client/src/test/java/org/apache/rocketmq/client/impl/MQClientAPIImplTest.java
Patch:
@@ -355,7 +355,7 @@ public Object answer(InvocationOnMock mock) throws Throwable {
             }
         }).when(remotingClient).invokeSync(anyString(), any(RemotingCommand.class), anyLong());
 
-        boolean result = mqClientAPI.resumeCheckHalfMessage(brokerAddr, "test", 3000);
+        boolean result = mqClientAPI.resumeCheckHalfMessage(brokerAddr, "topic,", "test", 3000);
         assertThat(result).isEqualTo(false);
     }
 
@@ -369,7 +369,7 @@ public Object answer(InvocationOnMock mock) throws Throwable {
             }
         }).when(remotingClient).invokeSync(anyString(), any(RemotingCommand.class), anyLong());
 
-        boolean result = mqClientAPI.resumeCheckHalfMessage(brokerAddr, "test", 3000);
+        boolean result = mqClientAPI.resumeCheckHalfMessage(brokerAddr, "topic", "test", 3000);
 
         assertThat(result).isEqualTo(true);
     }
@@ -726,7 +726,7 @@ public RemotingCommand answer(InvocationOnMock mock) throws Exception {
             }
         }).when(remotingClient).invokeSync(anyString(), any(RemotingCommand.class), anyLong());
 
-        MessageExt messageExt = mqClientAPI.viewMessage(brokerAddr, 100L, 10000);
+        MessageExt messageExt = mqClientAPI.viewMessage(brokerAddr, "topic", 100L, 10000);
         assertThat(messageExt.getTopic()).isEqualTo(topic);
     }
 

File: common/src/main/java/org/apache/rocketmq/common/constant/HAProxyConstants.java
Patch:
@@ -19,6 +19,7 @@
 
 public class HAProxyConstants {
 
+    public static final String CHANNEL_ID = "channel_id";
     public static final String PROXY_PROTOCOL_PREFIX = "proxy_protocol_";
     public static final String PROXY_PROTOCOL_ADDR = PROXY_PROTOCOL_PREFIX + "addr";
     public static final String PROXY_PROTOCOL_PORT = PROXY_PROTOCOL_PREFIX + "port";

File: common/src/main/java/org/apache/rocketmq/common/constant/LoggerName.java
Patch:
@@ -53,4 +53,6 @@ public class LoggerName {
     public static final String PROXY_WATER_MARK_LOGGER_NAME = "RocketmqProxyWatermark";
     public static final String ROCKETMQ_COLDCTR_LOGGER_NAME = "RocketmqColdCtr";
     public static final String ROCKSDB_LOGGER_NAME = "RocketmqRocksDB";
+
+    public static final String ROCKETMQ_AUTH_AUDIT_LOGGER_NAME = "RocketmqAuthAudit";
 }

File: common/src/main/java/org/apache/rocketmq/common/utils/ExceptionUtils.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.common.utils;
+package org.apache.rocketmq.common.utils;
 
 import java.util.concurrent.CompletionException;
 import java.util.concurrent.ExecutionException;

File: common/src/main/java/org/apache/rocketmq/common/utils/FutureUtils.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.common.utils;
+package org.apache.rocketmq.common.utils;
 
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutorService;

File: container/src/main/java/org/apache/rocketmq/container/BrokerContainer.java
Patch:
@@ -83,7 +83,7 @@ public BrokerContainer(
         this.nettyServerConfig = nettyServerConfig;
         this.nettyClientConfig = nettyClientConfig;
 
-        this.brokerOuterAPI = new BrokerOuterAPI(nettyClientConfig);
+        this.brokerOuterAPI = new BrokerOuterAPI(nettyClientConfig, null);
 
         this.brokerContainerProcessor = new BrokerContainerProcessor(this);
         this.brokerContainerProcessor.registerBrokerBootHook(this.brokerBootHookList);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServerBuilder.java
Patch:
@@ -108,7 +108,8 @@ public GrpcServer build() {
 
     public GrpcServerBuilder configInterceptor(List<AccessValidator> accessValidators) {
         // grpc interceptors, including acl, logging etc.
-        this.serverBuilder.intercept(new AuthenticationInterceptor(accessValidators));
+        this.serverBuilder
+            .intercept(new AuthenticationInterceptor(accessValidators));
 
         this.serverBuilder
             .intercept(new GlobalExceptionInterceptor())

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/constant/AttributeKeys.java
Patch:
@@ -24,6 +24,9 @@
 
 public class AttributeKeys {
 
+    public static final Attributes.Key<String> CHANNEL_ID =
+        Attributes.Key.create(HAProxyConstants.CHANNEL_ID);
+
     public static final Attributes.Key<String> PROXY_PROTOCOL_ADDR =
             Attributes.Key.create(HAProxyConstants.PROXY_PROTOCOL_ADDR);
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/ContextInterceptor.java
Patch:
@@ -23,6 +23,7 @@
 import io.grpc.ServerCall;
 import io.grpc.ServerCallHandler;
 import io.grpc.ServerInterceptor;
+import org.apache.rocketmq.common.constant.GrpcConstants;
 
 public class ContextInterceptor implements ServerInterceptor {
 
@@ -32,7 +33,7 @@ public <R, W> ServerCall.Listener<R> interceptCall(
         Metadata headers,
         ServerCallHandler<R, W> next
     ) {
-        Context context = Context.current().withValue(InterceptorConstants.METADATA, headers);
+        Context context = Context.current().withValue(GrpcConstants.METADATA, headers);
         return Contexts.interceptCall(context, call, headers, next);
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/transaction/EndTransactionActivity.java
Patch:
@@ -61,6 +61,7 @@ public CompletableFuture<EndTransactionResponse> endTransaction(ProxyContext ctx
             }
             future = this.messagingProcessor.endTransaction(
                 ctx,
+                request.getTopic().getName(),
                 request.getTransactionId(),
                 request.getMessageId(),
                 request.getTopic().getName(),

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ConsumerProcessor.java
Patch:
@@ -45,7 +45,7 @@
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
-import org.apache.rocketmq.proxy.common.utils.FutureUtils;
+import org.apache.rocketmq.common.utils.FutureUtils;
 import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
 import org.apache.rocketmq.proxy.service.ServiceManager;
 import org.apache.rocketmq.proxy.service.message.ReceiptHandleMessage;

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/MessagingProcessor.java
Patch:
@@ -102,17 +102,19 @@ CompletableFuture<RemotingCommand> forwardMessageToDeadLetterQueue(
 
     default CompletableFuture<Void> endTransaction(
         ProxyContext ctx,
+        String topic,
         String transactionId,
         String messageId,
         String producerGroup,
         TransactionStatus transactionStatus,
         boolean fromTransactionCheck
     ) {
-        return endTransaction(ctx, transactionId, messageId, producerGroup, transactionStatus, fromTransactionCheck, DEFAULT_TIMEOUT_MILLS);
+        return endTransaction(ctx, topic, transactionId, messageId, producerGroup, transactionStatus, fromTransactionCheck, DEFAULT_TIMEOUT_MILLS);
     }
 
     CompletableFuture<Void> endTransaction(
         ProxyContext ctx,
+        String topic,
         String transactionId,
         String messageId,
         String producerGroup,

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ProducerProcessor.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutorService;
-
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.client.producer.SendStatus;
@@ -35,12 +34,12 @@
 import org.apache.rocketmq.common.message.MessageId;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
+import org.apache.rocketmq.common.utils.FutureUtils;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
-import org.apache.rocketmq.proxy.common.utils.FutureUtils;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.processor.validator.DefaultTopicMessageTypeValidator;
 import org.apache.rocketmq.proxy.processor.validator.TopicMessageTypeValidator;
@@ -136,6 +135,7 @@ protected void fillTransactionData(ProxyContext ctx, String producerGroup, Addre
             this.serviceManager.getTransactionService().addTransactionDataByBrokerName(
                 ctx,
                 messageQueue.getBrokerName(),
+                messageList.get(0).getTopic(),
                 producerGroup,
                 sendResult.getQueueOffset(),
                 id.getOffset(),

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/TransactionProcessor.java
Patch:
@@ -31,12 +31,13 @@ public TransactionProcessor(MessagingProcessor messagingProcessor,
         super(messagingProcessor, serviceManager);
     }
 
-    public CompletableFuture<Void> endTransaction(ProxyContext ctx, String transactionId, String messageId, String producerGroup,
+    public CompletableFuture<Void> endTransaction(ProxyContext ctx, String topic, String transactionId, String messageId, String producerGroup,
         TransactionStatus transactionStatus, boolean fromTransactionCheck, long timeoutMillis) {
         CompletableFuture<Void> future = new CompletableFuture<>();
         try {
             EndTransactionRequestData headerData = serviceManager.getTransactionService().genEndTransactionRequestHeader(
                 ctx,
+                topic,
                 producerGroup,
                 buildCommitOrRollback(transactionStatus),
                 fromTransactionCheck,

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/TransactionActivity.java
Patch:
@@ -57,6 +57,7 @@ protected RemotingCommand processRequest0(ChannelHandlerContext ctx, RemotingCom
 
         this.messagingProcessor.endTransaction(
             context,
+            requestHeader.getTopic(),
             requestHeader.getTransactionId(),
             requestHeader.getMsgId(),
             requestHeader.getProducerGroup(),

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/channel/RemotingChannel.java
Patch:
@@ -34,8 +34,8 @@
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.channel.ChannelHelper;
-import org.apache.rocketmq.proxy.common.utils.ExceptionUtils;
-import org.apache.rocketmq.proxy.common.utils.FutureUtils;
+import org.apache.rocketmq.common.utils.ExceptionUtils;
+import org.apache.rocketmq.common.utils.FutureUtils;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.processor.channel.ChannelExtendAttributeGetter;
 import org.apache.rocketmq.proxy.processor.channel.ChannelProtocolType;
@@ -123,6 +123,7 @@ protected CompletableFuture<Void> processCheckTransaction(CheckTransactionStateR
         CompletableFuture<Void> writeFuture = new CompletableFuture<>();
         try {
             CheckTransactionStateRequestHeader requestHeader = new CheckTransactionStateRequestHeader();
+            requestHeader.setTopic(messageExt.getTopic());
             requestHeader.setCommitLogOffset(transactionData.getCommitLogOffset());
             requestHeader.setTranStateTableOffset(transactionData.getTranStateTableOffset());
             requestHeader.setTransactionId(transactionData.getTransactionId());

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/message/ClusterMessageService.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
-import org.apache.rocketmq.proxy.common.utils.FutureUtils;
+import org.apache.rocketmq.common.utils.FutureUtils;
 import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
 import org.apache.rocketmq.proxy.service.route.TopicRouteService;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/receipt/DefaultReceiptHandleManager.java
Patch:
@@ -53,7 +53,7 @@
 import org.apache.rocketmq.proxy.common.RenewEvent;
 import org.apache.rocketmq.proxy.common.RenewStrategyPolicy;
 import org.apache.rocketmq.proxy.common.channel.ChannelHelper;
-import org.apache.rocketmq.proxy.common.utils.ExceptionUtils;
+import org.apache.rocketmq.common.utils.ExceptionUtils;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.service.metadata.MetadataService;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/relay/AbstractProxyRelayService.java
Patch:
@@ -45,6 +45,7 @@ public RelayData<TransactionData, Void> processCheckTransactionState(ProxyContex
         TransactionData transactionData = transactionService.addTransactionDataByBrokerAddr(
             context,
             command.getExtFields().get(ProxyUtils.BROKER_ADDR),
+            messageExt.getTopic(),
             group,
             header.getTranStateTableOffset(),
             header.getCommitLogOffset(),

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/TransactionService.java
Patch:
@@ -30,13 +30,13 @@ public interface TransactionService {
 
     void unSubscribeAllTransactionTopic(ProxyContext ctx, String group);
 
-    TransactionData addTransactionDataByBrokerAddr(ProxyContext ctx, String brokerAddr, String producerGroup, long tranStateTableOffset, long commitLogOffset, String transactionId,
+    TransactionData addTransactionDataByBrokerAddr(ProxyContext ctx, String brokerAddr, String topic, String producerGroup, long tranStateTableOffset, long commitLogOffset, String transactionId,
         Message message);
 
-    TransactionData addTransactionDataByBrokerName(ProxyContext ctx, String brokerName, String producerGroup, long tranStateTableOffset, long commitLogOffset, String transactionId,
+    TransactionData addTransactionDataByBrokerName(ProxyContext ctx, String brokerName, String topic, String producerGroup, long tranStateTableOffset, long commitLogOffset, String transactionId,
         Message message);
 
-    EndTransactionRequestData genEndTransactionRequestHeader(ProxyContext ctx, String producerGroup, Integer commitOrRollback,
+    EndTransactionRequestData genEndTransactionRequestHeader(ProxyContext ctx, String topic, String producerGroup, Integer commitOrRollback,
         boolean fromTransactionCheck, String msgId, String transactionId);
 
     void onSendCheckTransactionStateFailed(ProxyContext context, String producerGroup, TransactionData transactionData);

File: proxy/src/test/java/org/apache/rocketmq/proxy/common/ReceiptHandleGroupTest.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
 import org.apache.rocketmq.common.message.MessageClientIDSetter;
-import org.apache.rocketmq.proxy.common.utils.FutureUtils;
+import org.apache.rocketmq.common.utils.FutureUtils;
 import org.apache.rocketmq.proxy.config.InitConfigTest;
 import org.junit.Before;
 import org.junit.Test;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/transaction/EndTransactionActivityTest.java
Patch:
@@ -67,7 +67,7 @@ public void before() throws Throwable {
     public void testEndTransaction() throws Throwable {
         ArgumentCaptor<TransactionStatus> transactionStatusCaptor = ArgumentCaptor.forClass(TransactionStatus.class);
         ArgumentCaptor<Boolean> fromTransactionCheckCaptor = ArgumentCaptor.forClass(Boolean.class);
-        when(this.messagingProcessor.endTransaction(any(), any(), anyString(), anyString(),
+        when(this.messagingProcessor.endTransaction(any(), any(), anyString(), anyString(), anyString(),
             transactionStatusCaptor.capture(),
             fromTransactionCheckCaptor.capture())).thenReturn(CompletableFuture.completedFuture(null));
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ConsumerProcessorTest.java
Patch:
@@ -44,7 +44,7 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
-import org.apache.rocketmq.proxy.common.utils.FutureUtils;
+import org.apache.rocketmq.common.utils.FutureUtils;
 import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
 import org.apache.rocketmq.proxy.service.message.ReceiptHandleMessage;
 import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ProducerProcessorTest.java
Patch:
@@ -100,6 +100,7 @@ public void testSendMessage() throws Throwable {
             any(),
             brokerNameCaptor.capture(),
             anyString(),
+            anyString(),
             tranStateTableOffsetCaptor.capture(),
             commitLogOffsetCaptor.capture(),
             anyString(), any())).thenReturn(mock(TransactionData.class));
@@ -155,6 +156,7 @@ public void testSendRetryMessage() throws Throwable {
             any(),
             brokerNameCaptor.capture(),
             anyString(),
+            anyString(),
             tranStateTableOffsetCaptor.capture(),
             commitLogOffsetCaptor.capture(),
             anyString(), any())).thenReturn(mock(TransactionData.class));

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/TransactionProcessorTest.java
Patch:
@@ -54,11 +54,12 @@ public void testEndTransaction() throws Throwable {
     protected void testEndTransaction(int sysFlag, TransactionStatus transactionStatus) throws Throwable {
         when(this.messageService.endTransactionOneway(any(), any(), any(), anyLong())).thenReturn(CompletableFuture.completedFuture(null));
         ArgumentCaptor<Integer> commitOrRollbackCaptor = ArgumentCaptor.forClass(Integer.class);
-        when(transactionService.genEndTransactionRequestHeader(any(), anyString(), commitOrRollbackCaptor.capture(), anyBoolean(), anyString(), anyString()))
+        when(transactionService.genEndTransactionRequestHeader(any(), anyString(), anyString(), commitOrRollbackCaptor.capture(), anyBoolean(), anyString(), anyString()))
             .thenReturn(new EndTransactionRequestData("brokerName", new EndTransactionRequestHeader()));
 
         this.transactionProcessor.endTransaction(
             createContext(),
+            "topic",
             "transactionId",
             "msgId",
             PRODUCER_GROUP,

File: proxy/src/test/java/org/apache/rocketmq/proxy/remoting/protocol/http2proxy/Http2ProtocolProxyHandlerTest.java
Patch:
@@ -20,15 +20,13 @@
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelPipeline;
 import io.netty.handler.codec.haproxy.HAProxyMessageEncoder;
-import org.apache.rocketmq.remoting.netty.AttributeKeys;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.junit.MockitoJUnitRunner;
 
 import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.when;
 
 @RunWith(MockitoJUnitRunner.class)
@@ -51,7 +49,6 @@ public void setUp() throws Exception {
 
     @Test
     public void configPipeline() {
-        when(inboundChannel.hasAttr(eq(AttributeKeys.PROXY_PROTOCOL_ADDR))).thenReturn(true);
         when(inboundChannel.pipeline()).thenReturn(inboundPipeline);
         when(inboundPipeline.addLast(any(HAProxyMessageForwarder.class))).thenReturn(inboundPipeline);
         when(outboundChannel.pipeline()).thenReturn(outboundPipeline);

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/mqclient/ProxyClientRemotingProcessorTest.java
Patch:
@@ -75,7 +75,7 @@ public void testTransactionCheck() throws Exception {
         CompletableFuture<ProxyRelayResult<Void>> proxyRelayResultFuture = new CompletableFuture<>();
         when(proxyRelayService.processCheckTransactionState(any(), any(), any(), any()))
             .thenReturn(new RelayData<>(
-                new TransactionData("brokerName", 0, 0, "id", System.currentTimeMillis(), 3000),
+                new TransactionData("brokerName", "topic", 0, 0, "id", System.currentTimeMillis(), 3000),
                 proxyRelayResultFuture));
 
         GrpcClientChannel grpcClientChannel = new GrpcClientChannel(proxyRelayService, grpcClientSettingsManager, null,

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/transaction/TransactionDataManagerTest.java
Patch:
@@ -133,6 +133,7 @@ private static TransactionData createTransactionData(String txId, long checkTime
     private static TransactionData createTransactionData(String txId, long checkTimestamp, long checkImmunityTime) {
         return new TransactionData(
             "brokerName",
+            "topicName",
             RANDOM.nextLong(),
             RANDOM.nextLong(),
             txId,

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/NamespaceUtil.java
Patch:
@@ -136,7 +136,7 @@ public static String getNamespaceFromResource(String resource) {
         return index > 0 ? resourceWithoutRetryAndDLQ.substring(0, index) : STRING_BLANK;
     }
 
-    private static String withOutRetryAndDLQ(String originalResource) {
+    public static String withOutRetryAndDLQ(String originalResource) {
         if (StringUtils.isEmpty(originalResource)) {
             return STRING_BLANK;
         }

File: test/src/test/java/org/apache/rocketmq/test/client/producer/batch/BatchSendIT.java
Patch:
@@ -92,7 +92,7 @@ public void testBatchSend_ViewMessage() throws Exception {
         Thread.sleep(2000);
 
         for (int i = 0; i < 3; i++) {
-            producer.viewMessage(offsetIds[random.nextInt(batchNum)]);
+            producer.viewMessage(topic, offsetIds[random.nextInt(batchNum)]);
         }
         for (int i = 0; i < 3; i++) {
             producer.viewMessage(topic, msgIds[random.nextInt(batchNum)]);
@@ -240,7 +240,7 @@ public void testBatchSend_CheckProperties() throws Exception {
 
         Thread.sleep(2000);
 
-        Message messageByOffset = producer.viewMessage(offsetIds[0]);
+        Message messageByOffset = producer.viewMessage(topic, offsetIds[0]);
         Message messageByMsgId = producer.viewMessage(topic, msgIds[0]);
 
         Assert.assertEquals(message.getTopic(), messageByMsgId.getTopic());

File: test/src/test/java/org/apache/rocketmq/test/client/producer/querymsg/QueryMsgByIdExceptionIT.java
Patch:
@@ -56,7 +56,7 @@ public void testQueryMsgByErrorMsgId() {
 
         MessageExt queryMsg = null;
         try {
-            queryMsg = producer.getProducer().viewMessage(errorMsgId);
+            queryMsg = producer.getProducer().viewMessage("topic", errorMsgId);
         } catch (Exception e) {
         }
 
@@ -73,7 +73,7 @@ public void testQueryMsgByNullMsgId() {
 
         MessageExt queryMsg = null;
         try {
-            queryMsg = producer.getProducer().viewMessage(errorMsgId);
+            queryMsg = producer.getProducer().viewMessage("topic", errorMsgId);
         } catch (Exception e) {
         }
 

File: test/src/test/java/org/apache/rocketmq/test/client/producer/querymsg/QueryMsgByIdIT.java
Patch:
@@ -66,7 +66,7 @@ public void testQueryMsg() {
         MessageExt queryMsg = null;
         try {
             TestUtils.waitForMoment(3000);
-            queryMsg = producer.getProducer().viewMessage(((MessageClientExt) recvMsg).getOffsetMsgId());
+            queryMsg = producer.getProducer().viewMessage(recvMsg.getTopic(), ((MessageClientExt) recvMsg).getOffsetMsgId());
         } catch (Exception e) {
         }
 

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseIT.java
Patch:
@@ -100,7 +100,7 @@
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.grpc.interceptor.ContextInterceptor;
 import org.apache.rocketmq.proxy.grpc.interceptor.HeaderInterceptor;
-import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
+import org.apache.rocketmq.common.constant.GrpcConstants;
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.test.base.BaseConf;
@@ -137,8 +137,8 @@ public void setUp() throws Exception {
         brokerController2.getBrokerConfig().setTransactionCheckInterval(3 * 1000);
         brokerController3.getBrokerConfig().setTransactionCheckInterval(3 * 1000);
 
-        header.put(InterceptorConstants.CLIENT_ID, "client-id" + UUID.randomUUID());
-        header.put(InterceptorConstants.LANGUAGE, "JAVA");
+        header.put(GrpcConstants.CLIENT_ID, "client-id" + UUID.randomUUID());
+        header.put(GrpcConstants.LANGUAGE, "JAVA");
 
         String mockProxyHome = "/mock/rmq/proxy/home";
         URL mockProxyHomeURL = getClass().getClassLoader().getResource("rmq-proxy-home");

File: tools/src/test/java/org/apache/rocketmq/tools/command/message/QueryMsgByUniqueKeySubCommandTest.java
Patch:
@@ -122,7 +122,7 @@ public void before() throws NoSuchFieldException, IllegalAccessException, Interr
         retMsgExt.setReconsumeTimes(2);
         retMsgExt.setBornTimestamp(System.currentTimeMillis());
         retMsgExt.setStoreTimestamp(System.currentTimeMillis());
-        when(mQAdminImpl.viewMessage(anyString())).thenReturn(retMsgExt);
+        when(mQAdminImpl.viewMessage(anyString(), anyString())).thenReturn(retMsgExt);
 
         when(mQAdminImpl.queryMessageByUniqKey(anyString(), anyString())).thenReturn(retMsgExt);
 

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -490,7 +490,7 @@ protected void initializeResources() {
             1000 * 60,
             TimeUnit.MILLISECONDS,
             this.putThreadPoolQueue,
-            new ThreadFactoryImpl("SendMessageThread_", getBrokerIdentity()));
+            new ThreadFactoryImpl("PutMessageThread_", getBrokerIdentity()));
 
         this.ackMessageExecutor = ThreadUtils.newThreadPoolExecutor(
             this.brokerConfig.getAckMessageThreadPoolNums(),

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java
Patch:
@@ -281,7 +281,7 @@ public RegisterBrokerResult registerBroker(
                     long oldStateVersion = oldBrokerInfo.getDataVersion().getStateVersion();
                     long newStateVersion = topicConfigWrapper.getDataVersion().getStateVersion();
                     if (oldStateVersion > newStateVersion) {
-                        log.warn("Registered Broker conflicts with the existed one, just ignore.: Cluster:{}, BrokerName:{}, BrokerId:{}, " +
+                        log.warn("Registering Broker conflicts with the existed one, just ignore.: Cluster:{}, BrokerName:{}, BrokerId:{}, " +
                                 "Old BrokerAddr:{}, Old Version:{}, New BrokerAddr:{}, New Version:{}.",
                             clusterName, brokerName, brokerId, oldBrokerAddr, oldStateVersion, brokerAddr, newStateVersion);
                         //Remove the rejected brokerAddr from brokerLiveTable.

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/core/MessageStoreFetcher.java
Patch:
@@ -15,13 +15,13 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.tieredstore;
+package org.apache.rocketmq.tieredstore.core;
 
 import java.util.concurrent.CompletableFuture;
+import org.apache.rocketmq.common.BoundaryType;
 import org.apache.rocketmq.store.GetMessageResult;
 import org.apache.rocketmq.store.MessageFilter;
 import org.apache.rocketmq.store.QueryMessageResult;
-import org.apache.rocketmq.common.BoundaryType;
 
 public interface MessageStoreFetcher {
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/core/MessageStoreFilter.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.tieredstore.provider;
+package org.apache.rocketmq.tieredstore.core;
 
-public interface TieredStoreTopicFilter {
+public interface MessageStoreFilter {
 
     boolean filterTopic(String topicName);
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/index/IndexFile.java
Patch:
@@ -29,6 +29,8 @@ enum IndexStatusEnum {
 
     long getTimestamp();
 
+    long getEndTimestamp();
+
     IndexStatusEnum getFileStatus();
 
     ByteBuffer doCompaction();

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/index/IndexService.java
Patch:
@@ -24,6 +24,8 @@
 
 public interface IndexService {
 
+    void start();
+
     /**
      * Puts a key into the index.
      *

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/provider/FileSegmentProvider.java
Patch:
@@ -18,9 +18,9 @@
 
 import java.nio.ByteBuffer;
 import java.util.concurrent.CompletableFuture;
-import org.apache.rocketmq.tieredstore.provider.stream.FileSegmentInputStream;
+import org.apache.rocketmq.tieredstore.stream.FileSegmentInputStream;
 
-public interface TieredStoreProvider {
+public interface FileSegmentProvider {
 
     /**
      * Get file path in backend file system

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/stream/FileSegmentInputStream.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.tieredstore.provider.stream;
+package org.apache.rocketmq.tieredstore.stream;
 
 import java.io.IOException;
 import java.io.InputStream;

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/common/SelectBufferResultTest.java
Patch:
@@ -21,8 +21,9 @@
 import org.junit.Test;
 
 public class SelectBufferResultTest {
+
     @Test
-    public void testSelectBufferResult() {
+    public void selectBufferResultTest() {
         ByteBuffer buffer = ByteBuffer.allocate(10);
         long startOffset = 5L;
         int size = 10;

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/NamesrvStartup.java
Patch:
@@ -43,8 +43,8 @@
 
 public class NamesrvStartup {
 
-    private final static Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
-    private final static Logger logConsole = LoggerFactory.getLogger(LoggerName.NAMESRV_CONSOLE_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static final Logger logConsole = LoggerFactory.getLogger(LoggerName.NAMESRV_CONSOLE_LOGGER_NAME);
     private static Properties properties = null;
     private static NamesrvConfig namesrvConfig = null;
     private static NettyServerConfig nettyServerConfig = null;

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java
Patch:
@@ -67,7 +67,7 @@
 
 public class RouteInfoManager {
     private static final Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
-    private final static long DEFAULT_BROKER_CHANNEL_EXPIRED_TIME = 1000 * 60 * 2;
+    private static final long DEFAULT_BROKER_CHANNEL_EXPIRED_TIME = 1000 * 60 * 2;
     private final ReadWriteLock lock = new ReentrantReadWriteLock();
     private final Map<String/* topic */, Map<String, QueueData>> topicQueueTable;
     private final Map<String/* brokerName */, BrokerData> brokerAddrTable;

File: broker/src/main/java/org/apache/rocketmq/broker/failover/EscapeBridge.java
Patch:
@@ -125,7 +125,7 @@ private SendResult putMessageToRemoteBroker(MessageExtBrokerInner messageExt) {
             return null;
         }
 
-        final MessageQueue mqSelected = topicPublishInfo.selectOneMessageQueue();
+        final MessageQueue mqSelected = topicPublishInfo.selectOneMessageQueue(this.brokerController.getBrokerConfig().getBrokerName());
 
         messageToPut.setQueueId(mqSelected.getQueueId());
 

File: broker/src/main/java/org/apache/rocketmq/broker/client/rebalance/RebalanceLockManager.java
Patch:
@@ -98,8 +98,6 @@ public boolean tryLock(final String group, final MessageQueue mq, final String c
                 log.error("RebalanceLockManager#tryLock: unexpected error, group={}, mq={}, clientId={}", group, mq,
                     clientId, e);
             }
-        } else {
-
         }
 
         return true;

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -2926,7 +2926,7 @@ public void run() {
                 try {
                     TimeUnit.MILLISECONDS.sleep(1);
                     this.doReput();
-                } catch (Exception e) {
+                } catch (Throwable e) {
                     DefaultMessageStore.LOGGER.warn(this.getServiceName() + " service has exception. ", e);
                 }
             }

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/SendMessageRequestHeaderV2.java
Patch:
@@ -52,7 +52,7 @@ public class SendMessageRequestHeaderV2 extends TopicQueueRequestHeader implemen
     @CFNullable
     private Integer j; // reconsumeTimes;
     @CFNullable
-    private Boolean k; // unitMode = false;
+    private Boolean k; // unitMode;
 
     private Integer l; // consumeRetryTimes
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/EndTransactionProcessor.java
Patch:
@@ -279,6 +279,9 @@ private RemotingCommand sendFinalMessage(MessageExtBrokerInner msgInner) {
             switch (putMessageResult.getPutMessageStatus()) {
                 // Success
                 case PUT_OK:
+                    this.brokerController.getBrokerStatsManager().incTopicPutNums(msgInner.getTopic(), putMessageResult.getAppendMessageResult().getMsgNum(), 1);
+                    this.brokerController.getBrokerStatsManager().incTopicPutSize(msgInner.getTopic(), putMessageResult.getAppendMessageResult().getWroteBytes());
+                    this.brokerController.getBrokerStatsManager().incBrokerPutNums(msgInner.getTopic(), putMessageResult.getAppendMessageResult().getMsgNum());
                 case FLUSH_DISK_TIMEOUT:
                 case FLUSH_SLAVE_TIMEOUT:
                 case SLAVE_NOT_AVAILABLE:

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/subscription/SubscriptionGroupConfig.java
Patch:
@@ -182,6 +182,7 @@ public int hashCode() {
         result = prime * result + (consumeEnable ? 1231 : 1237);
         result = prime * result + (consumeFromMinEnable ? 1231 : 1237);
         result = prime * result + (notifyConsumerIdsChangedEnable ? 1231 : 1237);
+        result = prime * result + (consumeMessageOrderly ? 1231 : 1237);
         result = prime * result + ((groupName == null) ? 0 : groupName.hashCode());
         result = prime * result + retryMaxTimes;
         result = prime * result + retryQueueNums;
@@ -208,6 +209,7 @@ public boolean equals(Object obj) {
             .append(consumeEnable, other.consumeEnable)
             .append(consumeFromMinEnable, other.consumeFromMinEnable)
             .append(consumeBroadcastEnable, other.consumeBroadcastEnable)
+            .append(consumeMessageOrderly, other.consumeMessageOrderly)
             .append(retryQueueNums, other.retryQueueNums)
             .append(retryMaxTimes, other.retryMaxTimes)
             .append(whichBrokerWhenConsumeSlowly, other.whichBrokerWhenConsumeSlowly)

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -351,9 +351,10 @@ public void initChannel(SocketChannel ch) {
         return bootstrap;
     }
 
-    // Do not use RemotingUtil, it will directly resolve the domain
+    // Do not use RemotingHelper.string2SocketAddress(), it will directly resolve the domain
     private String[] getHostAndPort(String address) {
-        return address.split(":");
+        int split = address.lastIndexOf(":");
+        return split < 0 ? new String[]{address} : new String[]{address.substring(0, split), address.substring(split + 1)};
     }
 
     @Override

File: common/src/main/java/org/apache/rocketmq/common/MQVersion.java
Patch:
@@ -18,7 +18,7 @@
 
 public class MQVersion {
 
-    public static final int CURRENT_VERSION = Version.V5_1_4.ordinal();
+    public static final int CURRENT_VERSION = Version.V5_2_0.ordinal();
 
     public static String getVersionDesc(int value) {
         int length = Version.values().length;

File: client/src/main/java/org/apache/rocketmq/client/latency/LatencyFaultToleranceImpl.java
Patch:
@@ -238,7 +238,7 @@ public void setCheckStamp(long checkStamp) {
         }
 
         public boolean isAvailable() {
-            return reachableFlag && System.currentTimeMillis() >= startTimestamp;
+            return System.currentTimeMillis() >= startTimestamp;
         }
 
         public boolean isReachable() {

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -463,7 +463,9 @@ public static String getLocalhostByNetworkInterface() throws SocketException {
         if (!candidatesHost.isEmpty()) {
             return candidatesHost.get(0);
         }
-        return null;
+
+        // Fallback to loopback 
+        return localhost();
     }
 
     public static boolean compareAndIncreaseOnly(final AtomicLong target, final long value) {

File: common/src/main/java/org/apache/rocketmq/common/utils/ConcurrentHashMapUtils.java
Patch:
@@ -37,6 +37,8 @@ public abstract class ConcurrentHashMapUtils {
     /**
      * A temporary workaround for Java 8 specific performance issue JDK-8161372 .<br> Use implementation of
      * ConcurrentMap.computeIfAbsent instead.
+     * 
+     * Requirement: <strong>The mapping function should not modify this map during computation.</strong>
      *
      * @see <a href="https://bugs.openjdk.java.net/browse/JDK-8161372">https://bugs.openjdk.java.net/browse/JDK-8161372</a>
      */
@@ -45,8 +47,6 @@ public static <K, V> V computeIfAbsent(ConcurrentMap<K, V> map, K key, Function<
         if (isJdk8) {
             V v = map.get(key);
             if (null == v) {
-//                v = map.computeIfAbsent(key, func);
-
                 // this bug fix methods maybe cause `func.apply` multiple calls.
                 v = func.apply(key);
                 if (null == v) {

File: common/src/test/java/org/apache/rocketmq/common/NetworkUtilTest.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.rocketmq.common;
 
-import java.net.InetAddress;
 import org.apache.rocketmq.common.utils.NetworkUtil;
 import org.junit.Test;
 
@@ -28,7 +27,6 @@ public void testGetLocalAddress() {
         String localAddress = NetworkUtil.getLocalAddress();
         assertThat(localAddress).isNotNull();
         assertThat(localAddress.length()).isGreaterThan(0);
-        assertThat(localAddress).isNotEqualTo(InetAddress.getLoopbackAddress().getHostAddress());
     }
 
     @Test

File: common/src/test/java/org/apache/rocketmq/common/utils/ConcurrentHashMapUtilsTest.java
Patch:
@@ -26,7 +26,6 @@ public class ConcurrentHashMapUtilsTest {
 
     @Test
     public void computeIfAbsent() {
-
         ConcurrentHashMap<String, String> map = new ConcurrentHashMap<>();
         map.put("123", "1111");
         String value = ConcurrentHashMapUtils.computeIfAbsent(map, "123", k -> "234");
@@ -35,7 +34,5 @@ public void computeIfAbsent() {
         assertEquals("2342", value1);
         String value2 = ConcurrentHashMapUtils.computeIfAbsent(map, "123", k -> "2342");
         assertEquals("1111", value2);
-//        map.computeIfAbsent("AaAa", key->map.computeIfAbsent("BBBB",key2->"42"));
-        ConcurrentHashMapUtils.computeIfAbsent(map, "AaAa", key -> map.computeIfAbsent("BBBB", key2 -> "42"));
     }
 }
\ No newline at end of file

File: common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
Patch:
@@ -310,7 +310,7 @@ public class BrokerConfig extends BrokerIdentity {
 
     private boolean asyncSendEnable = true;
 
-    private boolean useServerSideResetOffset = false;
+    private boolean useServerSideResetOffset = true;
 
     private long consumerOffsetUpdateVersionStep = 500;
 

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -828,7 +828,7 @@ public GetMessageResult getMessage(final String group, final String topic, final
                 status = GetMessageStatus.OFFSET_OVERFLOW_BADLY;
                 nextBeginOffset = nextOffsetCorrection(offset, maxOffset);
             } else {
-                final int maxFilterMessageSize = Math.max(16000, maxMsgNums * consumeQueue.getUnitSize());
+                final int maxFilterMessageSize = Math.max(this.messageStoreConfig.getMaxFilterMessageSize(), maxMsgNums * consumeQueue.getUnitSize());
                 final boolean diskFallRecorded = this.messageStoreConfig.isDiskFallRecorded();
 
                 long maxPullSize = Math.max(maxTotalMsgSize, 100);

File: common/src/main/java/org/apache/rocketmq/common/Pair.java
Patch:
@@ -16,7 +16,9 @@
  */
 package org.apache.rocketmq.common;
 
-public class Pair<T1, T2> {
+import java.io.Serializable;
+
+public class Pair<T1, T2> implements Serializable {
     private T1 object1;
     private T2 object2;
 

File: controller/src/main/java/org/apache/rocketmq/controller/elect/ElectPolicy.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.rocketmq.controller.elect;
 
-
 import java.util.Set;
 
 public interface ElectPolicy {
@@ -32,6 +31,7 @@ public interface ElectPolicy {
      * @param brokerId          broker id(can be used as prefer or assigned in some elect policy)
      * @return new master's broker id
      */
-    Long elect(String clusterName, String brokerName, Set<Long> syncStateBrokers, Set<Long> allReplicaBrokers, Long oldMaster, Long brokerId);
+    Long elect(String clusterName, String brokerName, Set<Long> syncStateBrokers, Set<Long> allReplicaBrokers,
+        Long oldMaster, Long brokerId);
 
 }

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DLedgerControllerStateMachine.java
Patch:
@@ -21,14 +21,15 @@
 import io.openmessaging.storage.dledger.snapshot.SnapshotWriter;
 import io.openmessaging.storage.dledger.statemachine.CommittedEntryIterator;
 import io.openmessaging.storage.dledger.statemachine.StateMachine;
-import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.controller.impl.event.EventMessage;
 import org.apache.rocketmq.controller.impl.event.EventSerializer;
 import org.apache.rocketmq.controller.impl.manager.ReplicasInfoManager;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
+import java.util.concurrent.CompletableFuture;
+
 /**
  * The state machine implementation of the dledger controller
  */

File: controller/src/main/java/org/apache/rocketmq/controller/impl/event/CleanBrokerDataEvent.java
Patch:
@@ -57,8 +57,8 @@ public EventType getEventType() {
     @Override
     public String toString() {
         return "CleanBrokerDataEvent{" +
-                "brokerName='" + brokerName + '\'' +
-                ", brokerIdSetToClean=" + brokerIdSetToClean +
-                '}';
+            "brokerName='" + brokerName + '\'' +
+            ", brokerIdSetToClean=" + brokerIdSetToClean +
+            '}';
     }
 }

File: controller/src/main/java/org/apache/rocketmq/controller/impl/heartbeat/DefaultBrokerHeartbeatManager.java
Patch:
@@ -40,7 +40,7 @@
 
 public class DefaultBrokerHeartbeatManager implements BrokerHeartbeatManager {
     private static final Logger log = LoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
-    private static final long DEFAULT_BROKER_CHANNEL_EXPIRED_TIME = 1000 * 10;
+
     private ScheduledExecutorService scheduledService;
     private ExecutorService executor;
 

File: controller/src/main/java/org/apache/rocketmq/controller/impl/manager/SyncStateInfo.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.controller.impl.manager;
 
+import java.io.Serializable;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
@@ -24,7 +25,7 @@
 /**
  * Manages the syncStateSet of broker replicas.
  */
-public class SyncStateInfo {
+public class SyncStateInfo implements Serializable {
     private final String clusterName;
     private final String brokerName;
     private final AtomicInteger masterEpoch;

File: controller/src/main/java/org/apache/rocketmq/controller/metrics/ControllerMetricsConstant.java
Patch:
@@ -62,7 +62,6 @@ public class ControllerMetricsConstant {
 
     public static final String LABEL_ELECTION_RESULT = "election_result";
 
-
     public enum RequestType {
         CONTROLLER_ALTER_SYNC_STATE_SET(RequestCode.CONTROLLER_ALTER_SYNC_STATE_SET),
 
@@ -112,6 +111,7 @@ public enum RequestHandleStatus {
         SUCCESS,
         FAILED,
         TIMEOUT;
+
         public String getLowerCaseName() {
             return this.name().toLowerCase();
         }

File: controller/src/test/java/org/apache/rocketmq/controller/ControllerRequestProcessorTest.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.rocketmq.controller;
 
-import java.nio.charset.StandardCharsets;
-import java.util.Properties;
 import org.apache.rocketmq.common.ControllerConfig;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.controller.processor.ControllerRequestProcessor;
@@ -30,6 +28,9 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import java.nio.charset.StandardCharsets;
+import java.util.Properties;
+
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class ControllerRequestProcessorTest {

File: example/src/main/java/org/apache/rocketmq/example/quickstart/Producer.java
Patch:
@@ -75,7 +75,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
                 /*
                  * Call send message to deliver message to one of brokers.
                  */
-                SendResult sendResult = producer.send(msg);
+                SendResult sendResult = producer.send(msg, 20 * 1000);
                 /*
                  * There are different ways to send message, if you don't care about the send result,you can use this way
                  * {@code

File: client/src/main/java/org/apache/rocketmq/client/common/ThreadLocalIndex.java
Patch:
@@ -35,9 +35,6 @@ public int incrementAndGet() {
 
     public void reset() {
         int index = Math.abs(random.nextInt(Integer.MAX_VALUE));
-        if (index < 0) {
-            index = 0;
-        }
         this.threadLocalIndex.set(index);
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/MultiProtocolRemotingServer.java
Patch:
@@ -46,7 +46,7 @@ public class MultiProtocolRemotingServer extends NettyRemotingServer {
     private final NettyServerConfig nettyServerConfig;
 
     private final RemotingProtocolHandler remotingProtocolHandler;
-    private final Http2ProtocolProxyHandler http2ProtocolProxyHandler;
+    protected Http2ProtocolProxyHandler http2ProtocolProxyHandler;
 
     public MultiProtocolRemotingServer(NettyServerConfig nettyServerConfig, ChannelEventListener channelEventListener) {
         super(nettyServerConfig, channelEventListener);

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -108,6 +108,8 @@ public class MixAll {
     public static final String ROCKETMQ_ZONE_MODE_PROPERTY = "rocketmq.zone.mode";
     public static final String ZONE_NAME = "__ZONE_NAME";
     public static final String ZONE_MODE = "__ZONE_MODE";
+    public final static String RPC_REQUEST_HEADER_NAMESPACED_FIELD = "nsd";
+    public final static String RPC_REQUEST_HEADER_NAMESPACE_FIELD = "ns";
 
     private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
     public static final String LOGICAL_QUEUE_MOCK_BROKER_PREFIX = "__syslo__";

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerPathConfigHelper.java
Patch:
@@ -60,6 +60,9 @@ public static String getTimerCheckPath(final String rootDir) {
     public static String getTimerMetricsPath(final String rootDir) {
         return rootDir + File.separator + "config" + File.separator + "timermetrics";
     }
+    public static String getTransactionMetricsPath(final String rootDir) {
+        return rootDir + File.separator + "config" + File.separator + "transactionMetrics";
+    }
 
     public static String getConsumerFilterPath(final String rootDir) {
         return rootDir + File.separator + "config" + File.separator + "consumerFilter.json";

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/DefaultTransactionalMessageCheckListener.java
Patch:
@@ -49,6 +49,8 @@ public void resolveDiscardMsg(MessageExt msgExt) {
             if (putMessageResult != null && putMessageResult.getPutMessageStatus() == PutMessageStatus.PUT_OK) {
                 log.info("Put checked-too-many-time half message to TRANS_CHECK_MAXTIME_TOPIC OK. Restored in queueOffset={}, " +
                     "commitLogOffset={}, real topic={}", msgExt.getQueueOffset(), msgExt.getCommitLogOffset(), msgExt.getUserProperty(MessageConst.PROPERTY_REAL_TOPIC));
+                // discarded, then the num of half-messages minus 1
+                this.getBrokerController().getTransactionalMessageService().getTransactionMetrics().addAndGet(msgExt.getUserProperty(MessageConst.PROPERTY_REAL_TOPIC), -1);
             } else {
                 log.error("Put checked-too-many-time half message to TRANS_CHECK_MAXTIME_TOPIC failed, real topic={}, msgId={}", msgExt.getTopic(), msgExt.getMsgId());
             }

File: remoting/src/main/java/org/apache/rocketmq/remoting/metrics/RemotingMetricsConstant.java
Patch:
@@ -18,7 +18,6 @@
 
 public class RemotingMetricsConstant {
     public static final String HISTOGRAM_RPC_LATENCY = "rocketmq_rpc_latency";
-
     public static final String LABEL_PROTOCOL_TYPE = "protocol_type";
     public static final String LABEL_REQUEST_CODE = "request_code";
     public static final String LABEL_RESPONSE_CODE = "response_code";

File: remoting/src/test/java/org/apache/rocketmq/remoting/netty/FileRegionEncoderTest.java
Patch:
@@ -21,14 +21,15 @@
 import io.netty.channel.DefaultFileRegion;
 import io.netty.channel.FileRegion;
 import io.netty.channel.embedded.EmbeddedChannel;
+import org.junit.Assert;
+import org.junit.Test;
+
 import java.io.BufferedOutputStream;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.util.Random;
 import java.util.UUID;
-import org.junit.Assert;
-import org.junit.Test;
 
 public class FileRegionEncoderTest {
 

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/ClientRequestProcessor.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.alibaba.fastjson.serializer.SerializerFeature;
 import io.netty.channel.ChannelHandlerContext;
+import java.util.Optional;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 import org.apache.rocketmq.common.MQVersion;
@@ -86,8 +87,8 @@ public RemotingCommand getRouteInfoByTopic(ChannelHandlerContext ctx,
             }
 
             byte[] content;
-            Boolean standardJsonOnly = requestHeader.getAcceptStandardJsonOnly();
-            if (request.getVersion() >= MQVersion.Version.V4_9_4.ordinal() || null != standardJsonOnly && standardJsonOnly) {
+            Boolean standardJsonOnly = Optional.ofNullable(requestHeader.getAcceptStandardJsonOnly()).orElse(false);
+            if (request.getVersion() >= MQVersion.Version.V4_9_4.ordinal() || standardJsonOnly) {
                 content = topicRouteData.encode(SerializerFeature.BrowserCompatible,
                     SerializerFeature.QuoteFieldNames, SerializerFeature.SkipTransientField,
                     SerializerFeature.MapSortField);

File: broker/src/main/java/org/apache/rocketmq/broker/metrics/BrokerMetricsManager.java
Patch:
@@ -210,7 +210,8 @@ public static TopicMessageType getMessageType(SendMessageRequestHeader requestHe
         } else if (properties.get("__STARTDELIVERTIME") != null
             || properties.get(MessageConst.PROPERTY_DELAY_TIME_LEVEL) != null
             || properties.get(MessageConst.PROPERTY_TIMER_DELIVER_MS) != null
-            || properties.get(MessageConst.PROPERTY_TIMER_DELAY_SEC) != null) {
+            || properties.get(MessageConst.PROPERTY_TIMER_DELAY_SEC) != null
+            || properties.get(MessageConst.PROPERTY_TIMER_DELAY_MS) != null) {
             topicMessageType = TopicMessageType.DELAY;
         }
         return topicMessageType;

File: broker/src/main/java/org/apache/rocketmq/broker/out/BrokerOuterAPI.java
Patch:
@@ -1377,7 +1377,7 @@ public CompletableFuture<PullResult> pullMessageFromSpecificBrokerAsync(String b
         requestHeader.setSubVersion(System.currentTimeMillis());
         requestHeader.setMaxMsgBytes(Integer.MAX_VALUE);
         requestHeader.setExpressionType(ExpressionType.TAG);
-        requestHeader.setBname(brokerName);
+        requestHeader.setBrokerName(brokerName);
 
         RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, requestHeader);
         CompletableFuture<PullResult> pullResultFuture = new CompletableFuture<>();

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ConsumerManageProcessor.java
Patch:
@@ -124,7 +124,7 @@ public RemotingCommand rewriteRequestForStaticTopic(final UpdateConsumerOffsetRe
             LogicQueueMappingItem mappingItem = TopicQueueMappingUtils.findLogicQueueMappingItem(mappingContext.getMappingItemList(), globalOffset, true);
             requestHeader.setQueueId(mappingItem.getQueueId());
             requestHeader.setLo(false);
-            requestHeader.setBname(mappingItem.getBname());
+            requestHeader.setBrokerName(mappingItem.getBname());
             requestHeader.setCommitOffset(mappingItem.computePhysicalQueueOffset(globalOffset));
             //leader, let it go, do not need to rewrite the response
             if (mappingDetail.getBname().equals(mappingItem.getBname())) {
@@ -237,7 +237,7 @@ public RemotingCommand rewriteRequestForStaticTopic(QueryConsumerOffsetRequestHe
                     }
                 } else {
                     //maybe we need to reconstruct an object
-                    requestHeader.setBname(mappingItem.getBname());
+                    requestHeader.setBrokerName(mappingItem.getBname());
                     requestHeader.setQueueId(mappingItem.getQueueId());
                     requestHeader.setLo(false);
                     requestHeader.setSetZeroIfNotFound(false);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PullMessageProcessor.java
Patch:
@@ -129,7 +129,7 @@ private RemotingCommand rewriteRequestForStaticTopic(PullMessageRequestHeader re
 
             int sysFlag = requestHeader.getSysFlag();
             requestHeader.setLo(false);
-            requestHeader.setBname(bname);
+            requestHeader.setBrokerName(bname);
             sysFlag = PullSysFlag.clearSuspendFlag(sysFlag);
             sysFlag = PullSysFlag.clearCommitOffsetFlag(sysFlag);
             requestHeader.setSysFlag(sysFlag);

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicQueueMappingCleanService.java
Patch:
@@ -137,7 +137,7 @@ public void cleanItemExpired() {
                     for (String broker: brokers) {
                         GetTopicStatsInfoRequestHeader header = new GetTopicStatsInfoRequestHeader();
                         header.setTopic(topic);
-                        header.setBname(broker);
+                        header.setBrokerName(broker);
                         header.setLo(false);
                         try {
                             RpcRequest rpcRequest = new RpcRequest(RequestCode.GET_TOPIC_STATS_INFO, header, null);
@@ -265,7 +265,7 @@ public void cleanItemListMoreThanSecondGen() {
                         String broker = entry.getValue();
                         GetTopicConfigRequestHeader header = new GetTopicConfigRequestHeader();
                         header.setTopic(topic);
-                        header.setBname(broker);
+                        header.setBrokerName(broker);
                         header.setLo(true);
                         try {
                             RpcRequest rpcRequest = new RpcRequest(RequestCode.GET_TOPIC_CONFIG, header, null);

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/AbstractTransactionalMessageCheckListener.java
Patch:
@@ -55,7 +55,7 @@ public void sendCheckMessage(MessageExt msgExt) throws Exception {
         checkTransactionStateRequestHeader.setMsgId(msgExt.getUserProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX));
         checkTransactionStateRequestHeader.setTransactionId(checkTransactionStateRequestHeader.getMsgId());
         checkTransactionStateRequestHeader.setTranStateTableOffset(msgExt.getQueueOffset());
-        checkTransactionStateRequestHeader.setBname(brokerController.getBrokerConfig().getBrokerName());
+        checkTransactionStateRequestHeader.setBrokerName(brokerController.getBrokerConfig().getBrokerName());
         msgExt.setTopic(msgExt.getUserProperty(MessageConst.PROPERTY_REAL_TOPIC));
         msgExt.setQueueId(Integer.parseInt(msgExt.getUserProperty(MessageConst.PROPERTY_REAL_QUEUE_ID)));
         msgExt.setStoreSize(0);

File: client/src/main/java/org/apache/rocketmq/client/consumer/store/RemoteBrokerOffsetStore.java
Patch:
@@ -218,7 +218,7 @@ public void updateConsumeOffsetToBroker(MessageQueue mq, long offset, boolean is
             requestHeader.setConsumerGroup(this.groupName);
             requestHeader.setQueueId(mq.getQueueId());
             requestHeader.setCommitOffset(offset);
-            requestHeader.setBname(mq.getBrokerName());
+            requestHeader.setBrokerName(mq.getBrokerName());
 
             if (isOneway) {
                 this.mQClientFactory.getMQClientAPIImpl().updateConsumerOffsetOneway(
@@ -245,7 +245,7 @@ private long fetchConsumeOffsetFromBroker(MessageQueue mq) throws RemotingExcept
             requestHeader.setTopic(mq.getTopic());
             requestHeader.setConsumerGroup(this.groupName);
             requestHeader.setQueueId(mq.getQueueId());
-            requestHeader.setBname(mq.getBrokerName());
+            requestHeader.setBrokerName(mq.getBrokerName());
 
             return this.mQClientFactory.getMQClientAPIImpl().queryConsumerOffset(
                 findBrokerResult.getBrokerAddr(), requestHeader, 1000 * 5);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -824,7 +824,7 @@ void ackAsync(MessageExt message, String consumerGroup) {
             requestHeader.setOffset(queueOffset);
             requestHeader.setConsumerGroup(consumerGroup);
             requestHeader.setExtraInfo(extraInfo);
-            requestHeader.setBname(brokerName);
+            requestHeader.setBrokerName(brokerName);
             this.mQClientFactory.getMQClientAPIImpl().ackMessageAsync(findBrokerResult.getBrokerAddr(), ASYNC_TIMEOUT, new AckCallback() {
                 @Override
                 public void onSuccess(AckResult ackResult) {
@@ -868,7 +868,7 @@ void changePopInvisibleTimeAsync(String topic, String consumerGroup, String extr
             requestHeader.setConsumerGroup(consumerGroup);
             requestHeader.setExtraInfo(extraInfo);
             requestHeader.setInvisibleTime(invisibleTime);
-            requestHeader.setBname(brokerName);
+            requestHeader.setBrokerName(brokerName);
             //here the broker should be polished
             this.mQClientFactory.getMQClientAPIImpl().changeInvisibleTimeAsync(brokerName, findBrokerResult.getBrokerAddr(), requestHeader, ASYNC_TIMEOUT, callback);
             return;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/PullAPIWrapper.java
Patch:
@@ -231,7 +231,7 @@ public PullResult pullKernelImpl(
             requestHeader.setSubVersion(subVersion);
             requestHeader.setMaxMsgBytes(maxSizeInBytes);
             requestHeader.setExpressionType(expressionType);
-            requestHeader.setBname(mq.getBrokerName());
+            requestHeader.setBrokerName(mq.getBrokerName());
 
             String brokerAddr = findBrokerResult.getBrokerAddr();
             if (PullSysFlag.hasClassFilterFlag(sysFlagInner)) {
@@ -378,7 +378,7 @@ public void popAsync(MessageQueue mq, long invisibleTime, int maxNums, String co
             requestHeader.setExpType(expressionType);
             requestHeader.setExp(expression);
             requestHeader.setOrder(order);
-            requestHeader.setBname(mq.getBrokerName());
+            requestHeader.setBrokerName(mq.getBrokerName());
             //give 1000 ms for server response
             if (poll) {
                 requestHeader.setPollTime(timeout);

File: client/src/main/java/org/apache/rocketmq/client/impl/mqclient/MQClientAPIExt.java
Patch:
@@ -66,6 +66,7 @@
 import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetResponseHeader;
 import org.apache.rocketmq.remoting.protocol.header.GetMinOffsetRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.GetMinOffsetResponseHeader;
+import org.apache.rocketmq.remoting.protocol.header.HeartbeatRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.NotificationRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.NotificationResponseHeader;
 import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
@@ -113,7 +114,7 @@ public CompletableFuture<Void> sendHeartbeatOneway(
     ) {
         CompletableFuture<Void> future = new CompletableFuture<>();
         try {
-            RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.HEART_BEAT, null);
+            RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.HEART_BEAT, new HeartbeatRequestHeader());
             request.setLanguage(clientConfig.getLanguage());
             request.setBody(heartbeatData.encode());
             this.getRemotingClient().invokeOneway(brokerAddr, request, timeoutMillis);
@@ -129,7 +130,7 @@ public CompletableFuture<Integer> sendHeartbeatAsync(
         HeartbeatData heartbeatData,
         long timeoutMillis
     ) {
-        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.HEART_BEAT, null);
+        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.HEART_BEAT, new HeartbeatRequestHeader());
         request.setLanguage(clientConfig.getLanguage());
         request.setBody(heartbeatData.encode());
 

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -403,7 +403,7 @@ private void processTransactionState(
                 thisHeader.setProducerGroup(producerGroup);
                 thisHeader.setTranStateTableOffset(checkRequestHeader.getTranStateTableOffset());
                 thisHeader.setFromTransactionCheck(true);
-                thisHeader.setBname(checkRequestHeader.getBname());
+                thisHeader.setBrokerName(checkRequestHeader.getBrokerName());
 
                 String uniqueKey = message.getProperties().get(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX);
                 if (uniqueKey == null) {
@@ -952,7 +952,7 @@ private SendResult sendKernelImpl(final Message msg,
                 requestHeader.setReconsumeTimes(0);
                 requestHeader.setUnitMode(this.isUnitMode());
                 requestHeader.setBatch(msg instanceof MessageBatch);
-                requestHeader.setBname(brokerName);
+                requestHeader.setBrokerName(brokerName);
                 if (requestHeader.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
                     String reconsumeTimes = MessageAccessor.getReconsumeTime(msg);
                     if (reconsumeTimes != null) {
@@ -1486,7 +1486,7 @@ public void endTransaction(
         EndTransactionRequestHeader requestHeader = new EndTransactionRequestHeader();
         requestHeader.setTransactionId(transactionId);
         requestHeader.setCommitLogOffset(id.getOffset());
-        requestHeader.setBname(destBrokerName);
+        requestHeader.setBrokerName(destBrokerName);
         switch (localTransactionState) {
             case COMMIT_MESSAGE:
                 requestHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_COMMIT_TYPE);

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQConsumerWithTraceTest.java
Patch:
@@ -242,7 +242,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
 
     @Test
     public void testPushConsumerWithTraceTLS() {
-        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("consumerGroup", true);
+        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("consumerGroup", true, null);
         consumer.setUseTLS(true);
         AsyncTraceDispatcher asyncTraceDispatcher = (AsyncTraceDispatcher) consumer.getTraceDispatcher();
         Assert.assertTrue(asyncTraceDispatcher.getTraceProducer().isUseTLS());

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQProducerWithTraceTest.java
Patch:
@@ -150,7 +150,7 @@ public void testSendMessageSync_WithTrace_NoBrokerSet_Exception() throws Remotin
 
     @Test
     public void testProducerWithTraceTLS() {
-        DefaultMQProducer producer = new DefaultMQProducer(producerGroupTemp, true);
+        DefaultMQProducer producer = new DefaultMQProducer(producerGroupTemp, true, null);
         producer.setUseTLS(true);
         AsyncTraceDispatcher asyncTraceDispatcher = (AsyncTraceDispatcher) producer.getTraceDispatcher();
         Assert.assertTrue(asyncTraceDispatcher.getTraceProducer().isUseTLS());

File: client/src/test/java/org/apache/rocketmq/client/trace/TransactionMQProducerWithTraceTest.java
Patch:
@@ -106,7 +106,7 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
                 return LocalTransactionState.COMMIT_MESSAGE;
             }
         };
-        producer = new TransactionMQProducer(null, producerGroupTemp, null, true, null);
+        producer = new TransactionMQProducer(producerGroupTemp, null, true, null);
         producer.setTransactionListener(transactionListener);
 
         producer.setNamesrvAddr("127.0.0.1:9876");

File: example/src/main/java/org/apache/rocketmq/example/benchmark/TransactionProducer.java
Patch:
@@ -141,7 +141,6 @@ public void run() {
         }
         final TransactionListener transactionCheckListener = new TransactionListenerImpl(statsBenchmark, config);
         final TransactionMQProducer producer = new TransactionMQProducer(
-            null,
             "benchmark_transaction_producer",
             rpcHook,
             config.msgTraceEnable,

File: example/src/main/java/org/apache/rocketmq/example/namespace/ProducerWithNamespace.java
Patch:
@@ -33,7 +33,8 @@ public class ProducerWithNamespace {
 
     public static void main(String[] args) throws Exception {
 
-        DefaultMQProducer producer = new DefaultMQProducer(NAMESPACE, PRODUCER_GROUP);
+        DefaultMQProducer producer = new DefaultMQProducer(PRODUCER_GROUP);
+        producer.setNamespaceV2(NAMESPACE);
 
         producer.setNamesrvAddr(DEFAULT_NAMESRVADDR);
         producer.start();

File: example/src/main/java/org/apache/rocketmq/example/namespace/PullConsumerWithNamespace.java
Patch:
@@ -34,7 +34,8 @@ public class PullConsumerWithNamespace {
     private static final Map<MessageQueue, Long> OFFSET_TABLE = new HashMap<>();
 
     public static void main(String[] args) throws Exception {
-        DefaultMQPullConsumer pullConsumer = new DefaultMQPullConsumer(NAMESPACE, CONSUMER_GROUP);
+        DefaultMQPullConsumer pullConsumer = new DefaultMQPullConsumer(CONSUMER_GROUP);
+        pullConsumer.setNamespaceV2(NAMESPACE);
         pullConsumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);
         pullConsumer.start();
 

File: example/src/main/java/org/apache/rocketmq/example/namespace/PushConsumerWithNamespace.java
Patch:
@@ -27,7 +27,8 @@ public class PushConsumerWithNamespace {
     public static final String TOPIC = "NAMESPACE_TOPIC";
 
     public static void main(String[] args) throws Exception {
-        DefaultMQPushConsumer defaultMQPushConsumer = new DefaultMQPushConsumer(NAMESPACE, CONSUMER_GROUP);
+        DefaultMQPushConsumer defaultMQPushConsumer = new DefaultMQPushConsumer(CONSUMER_GROUP);
+        defaultMQPushConsumer.setNamespaceV2(NAMESPACE);
         defaultMQPushConsumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);
         defaultMQPushConsumer.subscribe(TOPIC, "*");
         defaultMQPushConsumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {

File: example/src/main/java/org/apache/rocketmq/example/tracemessage/TraceProducer.java
Patch:
@@ -34,7 +34,7 @@ public class TraceProducer {
 
     public static void main(String[] args) throws MQClientException, InterruptedException {
 
-        DefaultMQProducer producer = new DefaultMQProducer(PRODUCER_GROUP, true);
+        DefaultMQProducer producer = new DefaultMQProducer(PRODUCER_GROUP, true, null);
 
         // Uncomment the following line while debugging, namesrvAddr should be set to your local address
 //        producer.setNamesrvAddr(DEFAULT_NAMESRVADDR);

File: example/src/main/java/org/apache/rocketmq/example/tracemessage/TracePushConsumer.java
Patch:
@@ -31,7 +31,7 @@ public class TracePushConsumer {
 
     public static void main(String[] args) throws InterruptedException, MQClientException {
         // Here,we use the default message track trace topic name
-        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(CONSUMER_GROUP, true);
+        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(CONSUMER_GROUP, true, null);
 
         // Uncomment the following line while debugging, namesrvAddr should be set to your local address
 //        consumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcValidator.java
Patch:
@@ -48,7 +48,7 @@ public static GrpcValidator getInstance() {
     }
 
     public void validateTopic(Resource topic) {
-        validateTopic(GrpcConverter.getInstance().wrapResourceWithNamespace(topic));
+        validateTopic(topic.getName());
     }
 
     public void validateTopic(String topicName) {
@@ -63,7 +63,7 @@ public void validateTopic(String topicName) {
     }
 
     public void validateConsumerGroup(Resource consumerGroup) {
-        validateConsumerGroup(GrpcConverter.getInstance().wrapResourceWithNamespace(consumerGroup));
+        validateConsumerGroup(consumerGroup.getName());
     }
 
     public void validateConsumerGroup(String consumerGroupName) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/AckMessageActivity.java
Patch:
@@ -35,7 +35,6 @@
 import org.apache.rocketmq.proxy.grpc.v2.AbstractMessingActivity;
 import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
-import org.apache.rocketmq.proxy.grpc.v2.common.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
 import org.apache.rocketmq.proxy.processor.BatchAckResult;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
@@ -53,8 +52,8 @@ public CompletableFuture<AckMessageResponse> ackMessage(ProxyContext ctx, AckMes
 
         try {
             validateTopicAndConsumerGroup(request.getTopic(), request.getGroup());
-            String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());
-            String topic = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getTopic());
+            String group = request.getGroup().getName();
+            String topic = request.getTopic().getName();
             if (ConfigurationManager.getProxyConfig().isEnableBatchAck()) {
                 future = ackMessageInBatch(ctx, group, topic, request);
             } else {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ChangeInvisibleDurationActivity.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.rocketmq.proxy.grpc.v2.AbstractMessingActivity;
 import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
-import org.apache.rocketmq.proxy.grpc.v2.common.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
 
@@ -49,7 +48,7 @@ public CompletableFuture<ChangeInvisibleDurationResponse> changeInvisibleDuratio
             validateInvisibleTime(Durations.toMillis(request.getInvisibleDuration()));
 
             ReceiptHandle receiptHandle = ReceiptHandle.decode(request.getReceiptHandle());
-            String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());
+            String group = request.getGroup().getName();
 
             MessageReceiptHandle messageReceiptHandle = messagingProcessor.removeReceiptHandle(ctx, grpcChannelManager.getChannel(ctx.getClientID()), group, request.getMessageId(), receiptHandle.getReceiptHandle());
             if (messageReceiptHandle != null) {
@@ -60,7 +59,7 @@ public CompletableFuture<ChangeInvisibleDurationResponse> changeInvisibleDuratio
                 receiptHandle,
                 request.getMessageId(),
                 group,
-                GrpcConverter.getInstance().wrapResourceWithNamespace(request.getTopic()),
+                request.getTopic().getName(),
                 Durations.toMillis(request.getInvisibleDuration())
             ).thenApply(ackResult -> convertToChangeInvisibleDurationResponse(ctx, request, ackResult));
         } catch (Throwable t) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java
Patch:
@@ -94,8 +94,8 @@ public void receiveMessage(ProxyContext ctx, ReceiveMessageRequest request,
             }
 
             validateTopicAndConsumerGroup(request.getMessageQueue().getTopic(), request.getGroup());
-            String topic = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getMessageQueue().getTopic());
-            String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());
+            String topic = request.getMessageQueue().getTopic().getName();
+            String group = request.getGroup().getName();
 
             long actualInvisibleTime = Durations.toMillis(request.getInvisibleDuration());
             ProxyConfig proxyConfig = ConfigurationManager.getProxyConfig();

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageResponseStreamWriter.java
Patch:
@@ -121,8 +121,8 @@ protected void processThrowableWhenWriteMessage(Throwable throwable,
             ctx,
             ReceiptHandle.decode(handle),
             messageExt.getMsgId(),
-            GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup()),
-            GrpcConverter.getInstance().wrapResourceWithNamespace(request.getMessageQueue().getTopic()),
+            request.getGroup().getName(),
+            request.getMessageQueue().getTopic().getName(),
             NACK_INVISIBLE_TIME
         );
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/transaction/EndTransactionActivity.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.rocketmq.proxy.grpc.v2.AbstractMessingActivity;
 import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
-import org.apache.rocketmq.proxy.grpc.v2.common.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcProxyException;
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
@@ -64,7 +63,7 @@ public CompletableFuture<EndTransactionResponse> endTransaction(ProxyContext ctx
                 ctx,
                 request.getTransactionId(),
                 request.getMessageId(),
-                GrpcConverter.getInstance().wrapResourceWithNamespace(request.getTopic()),
+                request.getTopic().getName(),
                 transactionStatus,
                 request.getSource().equals(TransactionSource.SOURCE_SERVER_CHECK))
                 .thenApply(r -> EndTransactionResponse.newBuilder()

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/sysmessage/AbstractSystemMessageSyncer.java
Patch:
@@ -142,7 +142,7 @@ protected SendMessageRequestHeader buildSendMessageRequestHeader(Message message
     public void start() throws Exception {
         this.createSysTopic();
         RPCHook rpcHook = this.getRpcHook();
-        this.defaultMQPushConsumer = new DefaultMQPushConsumer(null, this.getSystemMessageConsumerId(), rpcHook);
+        this.defaultMQPushConsumer = new DefaultMQPushConsumer(this.getSystemMessageConsumerId(), rpcHook);
 
         this.defaultMQPushConsumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);
         this.defaultMQPushConsumer.setMessageModel(MessageModel.BROADCASTING);

File: proxy/src/test/java/org/apache/rocketmq/proxy/remoting/activity/PullMessageActivityTest.java
Patch:
@@ -95,7 +95,7 @@ public void testPullMessageWithoutSub() throws Exception {
         header.setCommitOffset(0L);
         header.setSuspendTimeoutMillis(1000L);
         header.setSubVersion(0L);
-        header.setBname(brokerName);
+        header.setBrokerName(brokerName);
 
         RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, header);
         request.makeCustomHeaderToNet();
@@ -110,7 +110,7 @@ public void testPullMessageWithoutSub() throws Exception {
         newHeader.setCommitOffset(0L);
         newHeader.setSuspendTimeoutMillis(1000L);
         newHeader.setSubVersion(0L);
-        newHeader.setBname(brokerName);
+        newHeader.setBrokerName(brokerName);
         newHeader.setSubscription(subString);
         newHeader.setExpressionType(type);
         RemotingCommand matchRequest = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, newHeader);
@@ -146,7 +146,7 @@ public void testPullMessageWithSub() throws Exception {
         header.setCommitOffset(0L);
         header.setSuspendTimeoutMillis(1000L);
         header.setSubVersion(0L);
-        header.setBname(brokerName);
+        header.setBrokerName(brokerName);
         header.setSubscription(subString);
         header.setExpressionType(type);
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/remoting/activity/SendMessageActivityTest.java
Patch:
@@ -86,7 +86,7 @@ public void testSendMessage() throws Exception {
         sendMessageRequestHeader.setDefaultTopicQueueNums(0);
         sendMessageRequestHeader.setQueueId(0);
         sendMessageRequestHeader.setSysFlag(0);
-        sendMessageRequestHeader.setBname(brokerName);
+        sendMessageRequestHeader.setBrokerName(brokerName);
         sendMessageRequestHeader.setProperties(MessageDecoder.messageProperties2String(message.getProperties()));
         RemotingCommand remotingCommand = RemotingCommand.createRequestCommand(RequestCode.SEND_MESSAGE, sendMessageRequestHeader);
         remotingCommand.setBody(message.getBody());

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/CloneGroupOffsetRequestHeader.java
Patch:
@@ -21,11 +21,11 @@
 package org.apache.rocketmq.remoting.protocol.header;
 
 import com.google.common.base.MoreObjects;
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.RpcRequestHeader;
 
-public class CloneGroupOffsetRequestHeader implements CommandCustomHeader {
+public class CloneGroupOffsetRequestHeader extends RpcRequestHeader {
     @CFNotNull
     private String srcGroup;
     @CFNotNull

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/ConsumeMessageDirectlyResultRequestHeader.java
Patch:
@@ -18,12 +18,12 @@
 package org.apache.rocketmq.remoting.protocol.header;
 
 import com.google.common.base.MoreObjects;
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.annotation.CFNullable;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.TopicRequestHeader;
 
-public class ConsumeMessageDirectlyResultRequestHeader implements CommandCustomHeader {
+public class ConsumeMessageDirectlyResultRequestHeader extends TopicRequestHeader {
     @CFNotNull
     private String consumerGroup;
     @CFNullable

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/CreateTopicRequestHeader.java
Patch:
@@ -22,12 +22,12 @@
 
 import com.google.common.base.MoreObjects;
 import org.apache.rocketmq.common.TopicFilterType;
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.annotation.CFNullable;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.TopicRequestHeader;
 
-public class CreateTopicRequestHeader implements CommandCustomHeader {
+public class CreateTopicRequestHeader extends TopicRequestHeader {
     @CFNotNull
     private String topic;
     @CFNotNull

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/DeleteSubscriptionGroupRequestHeader.java
Patch:
@@ -17,11 +17,11 @@
 
 package org.apache.rocketmq.remoting.protocol.header;
 
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.RpcRequestHeader;
 
-public class DeleteSubscriptionGroupRequestHeader implements CommandCustomHeader {
+public class DeleteSubscriptionGroupRequestHeader extends RpcRequestHeader {
     @CFNotNull
     private String groupName;
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/DeleteTopicRequestHeader.java
Patch:
@@ -20,11 +20,11 @@
  */
 package org.apache.rocketmq.remoting.protocol.header;
 
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.TopicRequestHeader;
 
-public class DeleteTopicRequestHeader implements CommandCustomHeader {
+public class DeleteTopicRequestHeader extends TopicRequestHeader {
     @CFNotNull
     private String topic;
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/GetConsumeStatsRequestHeader.java
Patch:
@@ -17,11 +17,11 @@
 package org.apache.rocketmq.remoting.protocol.header;
 
 import com.google.common.base.MoreObjects;
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.TopicRequestHeader;
 
-public class GetConsumeStatsRequestHeader implements CommandCustomHeader {
+public class GetConsumeStatsRequestHeader extends TopicRequestHeader {
     @CFNotNull
     private String consumerGroup;
     private String topic;

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/GetConsumerConnectionListRequestHeader.java
Patch:
@@ -17,11 +17,11 @@
 
 package org.apache.rocketmq.remoting.protocol.header;
 
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.RpcRequestHeader;
 
-public class GetConsumerConnectionListRequestHeader implements CommandCustomHeader {
+public class GetConsumerConnectionListRequestHeader extends RpcRequestHeader {
     @CFNotNull
     private String consumerGroup;
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/GetConsumerListByGroupRequestHeader.java
Patch:
@@ -18,11 +18,11 @@
 package org.apache.rocketmq.remoting.protocol.header;
 
 import com.google.common.base.MoreObjects;
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.RpcRequestHeader;
 
-public class GetConsumerListByGroupRequestHeader implements CommandCustomHeader {
+public class GetConsumerListByGroupRequestHeader extends RpcRequestHeader {
     @CFNotNull
     private String consumerGroup;
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/GetConsumerRunningInfoRequestHeader.java
Patch:
@@ -18,12 +18,12 @@
 package org.apache.rocketmq.remoting.protocol.header;
 
 import com.google.common.base.MoreObjects;
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.annotation.CFNullable;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.RpcRequestHeader;
 
-public class GetConsumerRunningInfoRequestHeader implements CommandCustomHeader {
+public class GetConsumerRunningInfoRequestHeader extends RpcRequestHeader {
     @CFNotNull
     private String consumerGroup;
     @CFNotNull

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/GetConsumerStatusRequestHeader.java
Patch:
@@ -18,12 +18,12 @@
 package org.apache.rocketmq.remoting.protocol.header;
 
 import com.google.common.base.MoreObjects;
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.annotation.CFNullable;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.TopicRequestHeader;
 
-public class GetConsumerStatusRequestHeader implements CommandCustomHeader {
+public class GetConsumerStatusRequestHeader extends TopicRequestHeader {
     @CFNotNull
     private String topic;
     @CFNotNull

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/GetProducerConnectionListRequestHeader.java
Patch:
@@ -17,11 +17,11 @@
 
 package org.apache.rocketmq.remoting.protocol.header;
 
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.RpcRequestHeader;
 
-public class GetProducerConnectionListRequestHeader implements CommandCustomHeader {
+public class GetProducerConnectionListRequestHeader extends RpcRequestHeader {
     @CFNotNull
     private String producerGroup;
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/GetSubscriptionGroupConfigRequestHeader.java
Patch:
@@ -20,11 +20,11 @@
  */
 package org.apache.rocketmq.remoting.protocol.header;
 
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.RpcRequestHeader;
 
-public class GetSubscriptionGroupConfigRequestHeader implements CommandCustomHeader {
+public class GetSubscriptionGroupConfigRequestHeader extends RpcRequestHeader {
 
     @Override
     public void checkFields() throws RemotingCommandException {

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/InitConsumerOffsetRequestHeader.java
Patch:
@@ -16,10 +16,10 @@
  */
 package org.apache.rocketmq.remoting.protocol.header;
 
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.TopicRequestHeader;
 
-public class InitConsumerOffsetRequestHeader implements CommandCustomHeader {
+public class InitConsumerOffsetRequestHeader extends TopicRequestHeader {
 
     private String topic;
     // @see ConsumeInitMode

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/NotifyConsumerIdsChangedRequestHeader.java
Patch:
@@ -17,11 +17,11 @@
 
 package org.apache.rocketmq.remoting.protocol.header;
 
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.RpcRequestHeader;
 
-public class NotifyConsumerIdsChangedRequestHeader implements CommandCustomHeader {
+public class NotifyConsumerIdsChangedRequestHeader extends RpcRequestHeader {
     @CFNotNull
     private String consumerGroup;
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/QueryConsumeTimeSpanRequestHeader.java
Patch:
@@ -17,11 +17,11 @@
 
 package org.apache.rocketmq.remoting.protocol.header;
 
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.TopicRequestHeader;
 
-public class QueryConsumeTimeSpanRequestHeader implements CommandCustomHeader {
+public class QueryConsumeTimeSpanRequestHeader extends TopicRequestHeader {
     @CFNotNull
     private String topic;
     @CFNotNull

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/QueryCorrectionOffsetHeader.java
Patch:
@@ -20,11 +20,11 @@
  */
 package org.apache.rocketmq.remoting.protocol.header;
 
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.TopicRequestHeader;
 
-public class QueryCorrectionOffsetHeader implements CommandCustomHeader {
+public class QueryCorrectionOffsetHeader extends TopicRequestHeader {
     private String filterGroups;
     @CFNotNull
     private String compareGroup;

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/QueryMessageRequestHeader.java
Patch:
@@ -20,11 +20,11 @@
  */
 package org.apache.rocketmq.remoting.protocol.header;
 
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.TopicRequestHeader;
 
-public class QueryMessageRequestHeader implements CommandCustomHeader {
+public class QueryMessageRequestHeader extends TopicRequestHeader {
     @CFNotNull
     private String topic;
     @CFNotNull

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/QuerySubscriptionByConsumerRequestHeader.java
Patch:
@@ -20,11 +20,11 @@
  */
 package org.apache.rocketmq.remoting.protocol.header;
 
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.TopicRequestHeader;
 
-public class QuerySubscriptionByConsumerRequestHeader implements CommandCustomHeader {
+public class QuerySubscriptionByConsumerRequestHeader extends TopicRequestHeader {
     @CFNotNull
     private String group;
     private String topic;

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/QueryTopicConsumeByWhoRequestHeader.java
Patch:
@@ -20,11 +20,11 @@
  */
 package org.apache.rocketmq.remoting.protocol.header;
 
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.TopicRequestHeader;
 
-public class QueryTopicConsumeByWhoRequestHeader implements CommandCustomHeader {
+public class QueryTopicConsumeByWhoRequestHeader extends TopicRequestHeader {
     @CFNotNull
     private String topic;
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/QueryTopicsByConsumerRequestHeader.java
Patch:
@@ -20,11 +20,11 @@
  */
 package org.apache.rocketmq.remoting.protocol.header;
 
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.RpcRequestHeader;
 
-public class QueryTopicsByConsumerRequestHeader implements CommandCustomHeader {
+public class QueryTopicsByConsumerRequestHeader extends RpcRequestHeader {
     @CFNotNull
     private String group;
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/ReplyMessageRequestHeader.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.rocketmq.remoting.protocol.header;
 
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.annotation.CFNullable;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.TopicQueueRequestHeader;
 
-public class ReplyMessageRequestHeader implements CommandCustomHeader {
+public class ReplyMessageRequestHeader extends TopicQueueRequestHeader {
     @CFNotNull
     private String producerGroup;
     @CFNotNull

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/UnregisterClientRequestHeader.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.rocketmq.remoting.protocol.header;
 
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.annotation.CFNullable;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.RpcRequestHeader;
 
-public class UnregisterClientRequestHeader implements CommandCustomHeader {
+public class UnregisterClientRequestHeader extends RpcRequestHeader {
     @CFNotNull
     private String clientID;
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/UpdateGroupForbiddenRequestHeader.java
Patch:
@@ -20,11 +20,11 @@
  */
 package org.apache.rocketmq.remoting.protocol.header;
 
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.TopicRequestHeader;
 
-public class UpdateGroupForbiddenRequestHeader implements CommandCustomHeader {
+public class UpdateGroupForbiddenRequestHeader extends TopicRequestHeader {
     @CFNotNull
     private String  group;
     @CFNotNull

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/namesrv/DeleteTopicFromNamesrvRequestHeader.java
Patch:
@@ -16,11 +16,11 @@
  */
 package org.apache.rocketmq.remoting.protocol.header.namesrv;
 
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.TopicRequestHeader;
 
-public class DeleteTopicFromNamesrvRequestHeader implements CommandCustomHeader {
+public class DeleteTopicFromNamesrvRequestHeader extends TopicRequestHeader {
     @CFNotNull
     private String topic;
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/namesrv/GetRouteInfoRequestHeader.java
Patch:
@@ -20,12 +20,12 @@
  */
 package org.apache.rocketmq.remoting.protocol.header.namesrv;
 
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.annotation.CFNullable;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.TopicRequestHeader;
 
-public class GetRouteInfoRequestHeader implements CommandCustomHeader {
+public class GetRouteInfoRequestHeader extends TopicRequestHeader {
 
     @CFNotNull
     private String topic;

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/namesrv/RegisterTopicRequestHeader.java
Patch:
@@ -16,11 +16,11 @@
  */
 package org.apache.rocketmq.remoting.protocol.header.namesrv;
 
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.rpc.TopicRequestHeader;
 
-public class RegisterTopicRequestHeader implements CommandCustomHeader {
+public class RegisterTopicRequestHeader extends TopicRequestHeader {
     @CFNotNull
     private String topic;
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/rpc/RpcClientImpl.java
Patch:
@@ -59,7 +59,7 @@ public void registerHook(RpcClientHook hook) {
     @Override
     public Future<RpcResponse>  invoke(MessageQueue mq, RpcRequest request, long timeoutMs) throws RpcException {
         String bname =  clientMetadata.getBrokerNameFromMessageQueue(mq);
-        request.getHeader().setBname(bname);
+        request.getHeader().setBrokerName(bname);
         return invoke(request, timeoutMs);
     }
 

File: store/src/main/java/org/apache/rocketmq/store/kv/MessageFetcher.java
Patch:
@@ -40,6 +40,7 @@
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.remoting.protocol.RequestCode;
 import org.apache.rocketmq.remoting.protocol.ResponseCode;
+import org.apache.rocketmq.remoting.protocol.header.HeartbeatRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.PullMessageResponseHeader;
 import org.apache.rocketmq.remoting.protocol.header.UnregisterClientRequestHeader;
@@ -113,7 +114,7 @@ private boolean prepare(String masterAddr, String topic, String groupName, long
 
         heartbeatData.getConsumerDataSet().add(consumerData);
 
-        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.HEART_BEAT, null);
+        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.HEART_BEAT, new HeartbeatRequestHeader());
         request.setLanguage(LanguageCode.JAVA);
         request.setBody(heartbeatData.encode());
 

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -981,7 +981,7 @@ private RollbackStats resetOffsetConsumeOffset(String brokerAddr, String consume
             requestHeader.setTopic(queue.getTopic());
             requestHeader.setQueueId(queue.getQueueId());
             requestHeader.setCommitOffset(resetOffset);
-            requestHeader.setBname(queue.getBrokerName());
+            requestHeader.setBrokerName(queue.getBrokerName());
             this.mqClientInstance.getMQClientAPIImpl().updateConsumerOffset(brokerAddr, requestHeader, timeoutMillis);
         }
         return rollbackStats;
@@ -1735,7 +1735,7 @@ public void updateConsumeOffset(String brokerAddr, String consumeGroup, MessageQ
         requestHeader.setTopic(mq.getTopic());
         requestHeader.setQueueId(mq.getQueueId());
         requestHeader.setCommitOffset(offset);
-        requestHeader.setBname(mq.getBrokerName());
+        requestHeader.setBrokerName(mq.getBrokerName());
         this.mqClientInstance.getMQClientAPIImpl().updateConsumerOffset(brokerAddr, requestHeader, timeoutMillis);
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ContextVariable.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.common.context;
+package org.apache.rocketmq.proxy.common;
 
 public class ContextVariable {
     public static final String REMOTE_ADDRESS = "remote-address";

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessor.java
Patch:
@@ -37,7 +37,7 @@ public ReceiptHandleProcessor(MessagingProcessor messagingProcessor, ServiceMana
         super(messagingProcessor, serviceManager);
         StateEventListener<RenewEvent> eventListener = event -> {
             ProxyContext context = createContext(event.getEventType().name())
-                .withChannel(event.getKey().getChannel());
+                .setChannel(event.getKey().getChannel());
             MessageReceiptHandle messageReceiptHandle = event.getMessageReceiptHandle();
             ReceiptHandle handle = ReceiptHandle.decode(messageReceiptHandle.getReceiptHandleStr());
             messagingProcessor.changeInvisibleTime(context, handle, messageReceiptHandle.getMessageId(),

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/relay/ProxyChannel.java
Patch:
@@ -77,8 +77,8 @@ public ChannelFuture writeAndFlush(Object msg) {
         try {
             if (msg instanceof RemotingCommand) {
                 ProxyContext context = ProxyContext.createForInner(this.getClass())
-                    .withRemoteAddress(remoteAddress)
-                    .withLocalAddress(localAddress);
+                    .setRemoteAddress(remoteAddress)
+                    .setLocalAddress(localAddress);
                 RemotingCommand command = (RemotingCommand) msg;
                 if (command.getExtFields() == null) {
                     command.setExtFields(new HashMap<>());

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/channel/GrpcClientChannelTest.java
Patch:
@@ -58,7 +58,7 @@ public void before() throws Throwable {
         super.before();
         this.clientId = RandomStringUtils.randomAlphabetic(10);
         this.grpcClientChannel = new GrpcClientChannel(proxyRelayService, grpcClientSettingsManager, grpcChannelManager,
-            ProxyContext.create().withRemoteAddress("10.152.39.53:9768").withLocalAddress("11.193.0.1:1210"),
+            ProxyContext.create().setRemoteAddress("10.152.39.53:9768").setLocalAddress("11.193.0.1:1210"),
             this.clientId);
     }
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManagerTest.java
Patch:
@@ -25,7 +25,7 @@
 import apache.rocketmq.v2.Settings;
 import apache.rocketmq.v2.Subscription;
 import com.google.protobuf.util.Durations;
-import org.apache.rocketmq.proxy.common.context.ContextVariable;
+import org.apache.rocketmq.proxy.common.ContextVariable;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.BaseActivityTest;
 import org.apache.rocketmq.remoting.protocol.subscription.CustomizedRetryPolicy;
@@ -52,7 +52,7 @@ public void before() throws Throwable {
 
     @Test
     public void testGetProducerData() {
-        ProxyContext context = ProxyContext.create().withValue(ContextVariable.CLIENT_ID, CLIENT_ID);
+        ProxyContext context = ProxyContext.create().withVal(ContextVariable.CLIENT_ID, CLIENT_ID);
 
         this.grpcClientSettingsManager.updateClientSettings(context, CLIENT_ID, Settings.newBuilder()
             .setBackoffPolicy(RetryPolicy.getDefaultInstance())
@@ -65,7 +65,7 @@ public void testGetProducerData() {
 
     @Test
     public void testGetSubscriptionData() {
-        ProxyContext context = ProxyContext.create().withValue(ContextVariable.CLIENT_ID, CLIENT_ID);
+        ProxyContext context = ProxyContext.create().withVal(ContextVariable.CLIENT_ID, CLIENT_ID);
 
         SubscriptionGroupConfig subscriptionGroupConfig = new SubscriptionGroupConfig();
         when(this.messagingProcessor.getSubscriptionGroupConfig(any(), any()))

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/message/LocalMessageServiceTest.java
Patch:
@@ -46,7 +46,7 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.proxy.common.context.ContextVariable;
+import org.apache.rocketmq.proxy.common.ContextVariable;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
@@ -123,8 +123,8 @@ public void setUp() throws Throwable {
         Mockito.when(brokerControllerMock.getEndTransactionProcessor()).thenReturn(endTransactionProcessorMock);
         Mockito.when(brokerControllerMock.getBrokerConfig()).thenReturn(new BrokerConfig());
         localMessageService = new LocalMessageService(brokerControllerMock, channelManager, null);
-        proxyContext = ProxyContext.create().withValue(ContextVariable.REMOTE_ADDRESS, "0.0.0.1")
-            .withValue(ContextVariable.LOCAL_ADDRESS, "0.0.0.2");
+        proxyContext = ProxyContext.create().withVal(ContextVariable.REMOTE_ADDRESS, "0.0.0.1")
+            .withVal(ContextVariable.LOCAL_ADDRESS, "0.0.0.2");
     }
 
     @Test

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/mqclient/ProxyClientRemotingProcessorTest.java
Patch:
@@ -79,7 +79,7 @@ public void testTransactionCheck() throws Exception {
                 proxyRelayResultFuture));
 
         GrpcClientChannel grpcClientChannel = new GrpcClientChannel(proxyRelayService, grpcClientSettingsManager, null,
-            ProxyContext.create().withRemoteAddress("127.0.0.1:8888").withLocalAddress("127.0.0.1:10911"), "clientId");
+            ProxyContext.create().setRemoteAddress("127.0.0.1:8888").setLocalAddress("127.0.0.1:10911"), "clientId");
         when(producerManager.getAvailableChannel(anyString()))
             .thenReturn(grpcClientChannel);
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/sysmessage/HeartbeatSyncerTest.java
Patch:
@@ -146,7 +146,7 @@ public void testSyncGrpcV2Channel() throws Exception {
         GrpcChannelManager grpcChannelManager = mock(GrpcChannelManager.class);
         GrpcClientChannel grpcClientChannel = new GrpcClientChannel(
             proxyRelayService, grpcClientSettingsManager, grpcChannelManager,
-            ProxyContext.create().withRemoteAddress(remoteAddress).withLocalAddress(localAddress),
+            ProxyContext.create().setRemoteAddress(remoteAddress).setLocalAddress(localAddress),
             clientId);
         ClientChannelInfo clientChannelInfo = new ClientChannelInfo(
             grpcClientChannel,
@@ -345,7 +345,7 @@ public void testProcessConsumerGroupEventForGrpcV2() {
         GrpcChannelManager grpcChannelManager = mock(GrpcChannelManager.class);
         GrpcClientChannel grpcClientChannel = new GrpcClientChannel(
             proxyRelayService, grpcClientSettingsManager, grpcChannelManager,
-            ProxyContext.create().withRemoteAddress(remoteAddress).withLocalAddress(localAddress),
+            ProxyContext.create().setRemoteAddress(remoteAddress).setLocalAddress(localAddress),
             clientId);
         ClientChannelInfo clientChannelInfo = new ClientChannelInfo(
             grpcClientChannel,

File: broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java
Patch:
@@ -176,7 +176,7 @@ private void processAllGroup(Consumer<ProcessGroupInfo> consumer) {
                 }
 
                 if (isPop) {
-                    String retryTopic = KeyBuilder.buildPopRetryTopic(topic, group);
+                    String retryTopic = KeyBuilder.buildPopRetryTopic(topic, group, brokerConfig.isEnableRetryTopicV2());
                     TopicConfig retryTopicConfig = topicConfigManager.selectTopicConfig(retryTopic);
                     if (retryTopicConfig != null) {
                         int retryTopicPerm = retryTopicConfig.getPerm() & brokerConfig.getBrokerPermission();
@@ -185,7 +185,7 @@ private void processAllGroup(Consumer<ProcessGroupInfo> consumer) {
                             continue;
                         }
                     }
-                    if (brokerConfig.isRetrieveMessageFromPopRetryTopicV1()) {
+                    if (brokerConfig.isEnableRetryTopicV2() && brokerConfig.isRetrieveMessageFromPopRetryTopicV1()) {
                         String retryTopicV1 = KeyBuilder.buildPopRetryTopicV1(topic, group);
                         TopicConfig retryTopicConfigV1 = topicConfigManager.selectTopicConfig(retryTopicV1);
                         if (retryTopicConfigV1 != null) {

File: broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOrderInfoManager.java
Patch:
@@ -121,7 +121,7 @@ public void update(String attemptId, boolean isRetry, String topic, String group
             Set<Long> offsetSet = offsetConsumedCount.keySet();
             for (Long offset : offsetSet) {
                 Integer consumedTimes = offsetConsumedCount.getOrDefault(offset, 0);
-                ExtraInfoUtil.buildQueueOffsetOrderCountInfo(orderInfoBuilder, isRetry, queueId, offset, consumedTimes);
+                ExtraInfoUtil.buildQueueOffsetOrderCountInfo(orderInfoBuilder, topic, queueId, offset, consumedTimes);
                 minConsumedTimes = Math.min(minConsumedTimes, consumedTimes);
             }
 
@@ -136,7 +136,7 @@ public void update(String attemptId, boolean isRetry, String topic, String group
 
         // for compatibility
         // the old pop sdk use queueId to get consumedTimes from orderCountInfo
-        ExtraInfoUtil.buildQueueIdOrderCountInfo(orderInfoBuilder, isRetry, queueId, minConsumedTimes);
+        ExtraInfoUtil.buildQueueIdOrderCountInfo(orderInfoBuilder, topic, queueId, minConsumedTimes);
         updateLockFreeTimestamp(topic, group, queueId, orderInfo);
     }
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AckMessageProcessor.java
Patch:
@@ -196,7 +196,7 @@ private void appendAck(final AckMessageRequestHeader requestHeader, final BatchA
         } else {
             // batch ack
             consumeGroup = batchAck.getConsumerGroup();
-            topic = ExtraInfoUtil.getRealTopic(batchAck.getTopic(), batchAck.getConsumerGroup(), ExtraInfoUtil.RETRY_TOPIC.equals(batchAck.getRetry()));
+            topic = ExtraInfoUtil.getRealTopic(batchAck.getTopic(), batchAck.getConsumerGroup(), batchAck.getRetry());
             qId = batchAck.getQueueId();
             rqId = batchAck.getReviveQueueId();
             startOffset = batchAck.getStartOffset();

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -555,9 +555,9 @@ private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,
         // delete pop retry topics first
         try {
             for (String group : groups) {
-                final String popRetryTopic = KeyBuilder.buildPopRetryTopic(topic, group);
-                if (brokerController.getTopicConfigManager().selectTopicConfig(popRetryTopic) != null) {
-                    deleteTopicInBroker(popRetryTopic);
+                final String popRetryTopicV2 = KeyBuilder.buildPopRetryTopic(topic, group, true);
+                if (brokerController.getTopicConfigManager().selectTopicConfig(popRetryTopicV2) != null) {
+                    deleteTopicInBroker(popRetryTopicV2);
                 }
                 final String popRetryTopicV1 = KeyBuilder.buildPopRetryTopicV1(topic, group);
                 if (brokerController.getTopicConfigManager().selectTopicConfig(popRetryTopicV1) != null) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
Patch:
@@ -103,7 +103,7 @@ public boolean isShouldRunPopRevive() {
     private boolean reviveRetry(PopCheckPoint popCheckPoint, MessageExt messageExt) {
         MessageExtBrokerInner msgInner = new MessageExtBrokerInner();
         if (!popCheckPoint.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
-            msgInner.setTopic(KeyBuilder.buildPopRetryTopic(popCheckPoint.getTopic(), popCheckPoint.getCId()));
+            msgInner.setTopic(KeyBuilder.buildPopRetryTopic(popCheckPoint.getTopic(), popCheckPoint.getCId(), brokerController.getBrokerConfig().isEnableRetryTopicV2()));
         } else {
             msgInner.setTopic(popCheckPoint.getTopic());
         }

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ConsumerProcessorTest.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.rocketmq.client.consumer.PopResult;
 import org.apache.rocketmq.client.consumer.PopStatus;
 import org.apache.rocketmq.client.exception.MQBrokerException;
+import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.KeyBuilder;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.ConsumeInitMode;
@@ -169,7 +170,7 @@ public void testAckMessage() throws Throwable {
             CONSUMER_GROUP, TOPIC, 3000).get();
 
         assertEquals(AckStatus.OK, ackResult.getStatus());
-        assertEquals(KeyBuilder.buildPopRetryTopic(TOPIC, CONSUMER_GROUP), requestHeaderArgumentCaptor.getValue().getTopic());
+        assertEquals(KeyBuilder.buildPopRetryTopic(TOPIC, CONSUMER_GROUP, new BrokerConfig().isEnableRetryTopicV2()), requestHeaderArgumentCaptor.getValue().getTopic());
         assertEquals(CONSUMER_GROUP, requestHeaderArgumentCaptor.getValue().getConsumerGroup());
         assertEquals(handle.getReceiptHandle(), requestHeaderArgumentCaptor.getValue().getExtraInfo());
     }
@@ -292,7 +293,7 @@ public void testChangeInvisibleTime() throws Throwable {
             CONSUMER_GROUP, TOPIC, 1000, 3000).get();
 
         assertEquals(AckStatus.OK, ackResult.getStatus());
-        assertEquals(KeyBuilder.buildPopRetryTopic(TOPIC, CONSUMER_GROUP), requestHeaderArgumentCaptor.getValue().getTopic());
+        assertEquals(KeyBuilder.buildPopRetryTopic(TOPIC, CONSUMER_GROUP, new BrokerConfig().isEnableRetryTopicV2()), requestHeaderArgumentCaptor.getValue().getTopic());
         assertEquals(CONSUMER_GROUP, requestHeaderArgumentCaptor.getValue().getConsumerGroup());
         assertEquals(1000, requestHeaderArgumentCaptor.getValue().getInvisibleTime().longValue());
         assertEquals(handle.getReceiptHandle(), requestHeaderArgumentCaptor.getValue().getExtraInfo());

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ProducerProcessorTest.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.concurrent.Executors;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.client.producer.SendStatus;
+import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.KeyBuilder;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.attribute.TopicMessageType;
@@ -185,7 +186,7 @@ public void testForwardMessageToDeadLetterQueue() throws Throwable {
         when(this.messageService.sendMessageBack(any(), any(), anyString(), requestHeaderArgumentCaptor.capture(), anyLong()))
             .thenReturn(CompletableFuture.completedFuture(mock(RemotingCommand.class)));
 
-        MessageExt messageExt = createMessageExt(KeyBuilder.buildPopRetryTopic(TOPIC, CONSUMER_GROUP), "", 16, 3000);
+        MessageExt messageExt = createMessageExt(KeyBuilder.buildPopRetryTopic(TOPIC, CONSUMER_GROUP, new BrokerConfig().isEnableRetryTopicV2()), "", 16, 3000);
         RemotingCommand remotingCommand = this.producerProcessor.forwardMessageToDeadLetterQueue(
             createContext(),
             create(messageExt),

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/message/LocalMessageServiceTest.java
Patch:
@@ -286,8 +286,8 @@ public void testPopMessageWriteAndFlush() throws Exception {
         MessageExt message2 = buildMessageExt(topic, 0, startOffset + 1);
         messageExtList.add(message2);
         messageOffsetList.add(startOffset + 1);
-        ExtraInfoUtil.buildStartOffsetInfo(startOffsetStringBuilder, false, queueId, startOffset);
-        ExtraInfoUtil.buildMsgOffsetInfo(messageOffsetStringBuilder, false, queueId, messageOffsetList);
+        ExtraInfoUtil.buildStartOffsetInfo(startOffsetStringBuilder, topic, queueId, startOffset);
+        ExtraInfoUtil.buildMsgOffsetInfo(messageOffsetStringBuilder, topic, queueId, messageOffsetList);
         byte[] body2 = MessageDecoder.encode(message2, false);
         ByteBuffer byteBuffer1 = ByteBuffer.wrap(body1);
         ByteBuffer byteBuffer2 = ByteBuffer.wrap(body2);

File: remoting/src/test/java/org/apache/rocketmq/remoting/protocol/header/ExtraInfoUtilTest.java
Patch:
@@ -36,8 +36,8 @@ public void testOrderCountInfo() {
         String queueOffsetKey = ExtraInfoUtil.getQueueOffsetMapKey(topic, queueId, queueOffset);
 
         StringBuilder sb = new StringBuilder();
-        ExtraInfoUtil.buildQueueIdOrderCountInfo(sb, false, queueId, queueIdCount);
-        ExtraInfoUtil.buildQueueOffsetOrderCountInfo(sb, false, queueId, queueOffset, queueOffsetCount);
+        ExtraInfoUtil.buildQueueIdOrderCountInfo(sb, topic, queueId, queueIdCount);
+        ExtraInfoUtil.buildQueueOffsetOrderCountInfo(sb, topic, queueId, queueOffset, queueOffsetCount);
         Map<String, Integer> orderCountInfo = ExtraInfoUtil.parseOrderCountInfo(sb.toString());
 
         assertEquals(queueIdCount, orderCountInfo.get(queueIdKey));

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/context/ContextVariable.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.common;
+package org.apache.rocketmq.proxy.common.context;
 
 public class ContextVariable {
     public static final String REMOTE_ADDRESS = "remote-address";

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessor.java
Patch:
@@ -37,7 +37,7 @@ public ReceiptHandleProcessor(MessagingProcessor messagingProcessor, ServiceMana
         super(messagingProcessor, serviceManager);
         StateEventListener<RenewEvent> eventListener = event -> {
             ProxyContext context = createContext(event.getEventType().name())
-                .setChannel(event.getKey().getChannel());
+                .withChannel(event.getKey().getChannel());
             MessageReceiptHandle messageReceiptHandle = event.getMessageReceiptHandle();
             ReceiptHandle handle = ReceiptHandle.decode(messageReceiptHandle.getReceiptHandleStr());
             messagingProcessor.changeInvisibleTime(context, handle, messageReceiptHandle.getMessageId(),

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/relay/ProxyChannel.java
Patch:
@@ -77,8 +77,8 @@ public ChannelFuture writeAndFlush(Object msg) {
         try {
             if (msg instanceof RemotingCommand) {
                 ProxyContext context = ProxyContext.createForInner(this.getClass())
-                    .setRemoteAddress(remoteAddress)
-                    .setLocalAddress(localAddress);
+                    .withRemoteAddress(remoteAddress)
+                    .withLocalAddress(localAddress);
                 RemotingCommand command = (RemotingCommand) msg;
                 if (command.getExtFields() == null) {
                     command.setExtFields(new HashMap<>());

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/channel/GrpcClientChannelTest.java
Patch:
@@ -58,7 +58,7 @@ public void before() throws Throwable {
         super.before();
         this.clientId = RandomStringUtils.randomAlphabetic(10);
         this.grpcClientChannel = new GrpcClientChannel(proxyRelayService, grpcClientSettingsManager, grpcChannelManager,
-            ProxyContext.create().setRemoteAddress("10.152.39.53:9768").setLocalAddress("11.193.0.1:1210"),
+            ProxyContext.create().withRemoteAddress("10.152.39.53:9768").withLocalAddress("11.193.0.1:1210"),
             this.clientId);
     }
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManagerTest.java
Patch:
@@ -25,7 +25,7 @@
 import apache.rocketmq.v2.Settings;
 import apache.rocketmq.v2.Subscription;
 import com.google.protobuf.util.Durations;
-import org.apache.rocketmq.proxy.common.ContextVariable;
+import org.apache.rocketmq.proxy.common.context.ContextVariable;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.BaseActivityTest;
 import org.apache.rocketmq.remoting.protocol.subscription.CustomizedRetryPolicy;
@@ -52,7 +52,7 @@ public void before() throws Throwable {
 
     @Test
     public void testGetProducerData() {
-        ProxyContext context = ProxyContext.create().withVal(ContextVariable.CLIENT_ID, CLIENT_ID);
+        ProxyContext context = ProxyContext.create().withValue(ContextVariable.CLIENT_ID, CLIENT_ID);
 
         this.grpcClientSettingsManager.updateClientSettings(context, CLIENT_ID, Settings.newBuilder()
             .setBackoffPolicy(RetryPolicy.getDefaultInstance())
@@ -65,7 +65,7 @@ public void testGetProducerData() {
 
     @Test
     public void testGetSubscriptionData() {
-        ProxyContext context = ProxyContext.create().withVal(ContextVariable.CLIENT_ID, CLIENT_ID);
+        ProxyContext context = ProxyContext.create().withValue(ContextVariable.CLIENT_ID, CLIENT_ID);
 
         SubscriptionGroupConfig subscriptionGroupConfig = new SubscriptionGroupConfig();
         when(this.messagingProcessor.getSubscriptionGroupConfig(any(), any()))

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/message/LocalMessageServiceTest.java
Patch:
@@ -46,7 +46,7 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.proxy.common.ContextVariable;
+import org.apache.rocketmq.proxy.common.context.ContextVariable;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
@@ -123,8 +123,8 @@ public void setUp() throws Throwable {
         Mockito.when(brokerControllerMock.getEndTransactionProcessor()).thenReturn(endTransactionProcessorMock);
         Mockito.when(brokerControllerMock.getBrokerConfig()).thenReturn(new BrokerConfig());
         localMessageService = new LocalMessageService(brokerControllerMock, channelManager, null);
-        proxyContext = ProxyContext.create().withVal(ContextVariable.REMOTE_ADDRESS, "0.0.0.1")
-            .withVal(ContextVariable.LOCAL_ADDRESS, "0.0.0.2");
+        proxyContext = ProxyContext.create().withValue(ContextVariable.REMOTE_ADDRESS, "0.0.0.1")
+            .withValue(ContextVariable.LOCAL_ADDRESS, "0.0.0.2");
     }
 
     @Test

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/mqclient/ProxyClientRemotingProcessorTest.java
Patch:
@@ -79,7 +79,7 @@ public void testTransactionCheck() throws Exception {
                 proxyRelayResultFuture));
 
         GrpcClientChannel grpcClientChannel = new GrpcClientChannel(proxyRelayService, grpcClientSettingsManager, null,
-            ProxyContext.create().setRemoteAddress("127.0.0.1:8888").setLocalAddress("127.0.0.1:10911"), "clientId");
+            ProxyContext.create().withRemoteAddress("127.0.0.1:8888").withLocalAddress("127.0.0.1:10911"), "clientId");
         when(producerManager.getAvailableChannel(anyString()))
             .thenReturn(grpcClientChannel);
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/sysmessage/HeartbeatSyncerTest.java
Patch:
@@ -146,7 +146,7 @@ public void testSyncGrpcV2Channel() throws Exception {
         GrpcChannelManager grpcChannelManager = mock(GrpcChannelManager.class);
         GrpcClientChannel grpcClientChannel = new GrpcClientChannel(
             proxyRelayService, grpcClientSettingsManager, grpcChannelManager,
-            ProxyContext.create().setRemoteAddress(remoteAddress).setLocalAddress(localAddress),
+            ProxyContext.create().withRemoteAddress(remoteAddress).withLocalAddress(localAddress),
             clientId);
         ClientChannelInfo clientChannelInfo = new ClientChannelInfo(
             grpcClientChannel,
@@ -345,7 +345,7 @@ public void testProcessConsumerGroupEventForGrpcV2() {
         GrpcChannelManager grpcChannelManager = mock(GrpcChannelManager.class);
         GrpcClientChannel grpcClientChannel = new GrpcClientChannel(
             proxyRelayService, grpcClientSettingsManager, grpcChannelManager,
-            ProxyContext.create().setRemoteAddress(remoteAddress).setLocalAddress(localAddress),
+            ProxyContext.create().withRemoteAddress(remoteAddress).withLocalAddress(localAddress),
             clientId);
         ClientChannelInfo clientChannelInfo = new ClientChannelInfo(
             grpcClientChannel,

File: client/src/main/java/org/apache/rocketmq/client/producer/DefaultMQProducer.java
Patch:
@@ -410,7 +410,7 @@ private boolean canBatch(Message msg) {
             return false;
         }
         // delay message do not support batch processing
-        if (msg.getDelayTimeLevel() > 0) {
+        if (msg.getDelayTimeLevel() > 0 || msg.getDelayTimeMs() > 0 || msg.getDelayTimeSec() > 0 || msg.getDeliverTimeMs() > 0) {
             return false;
         }
         // retry message do not support batch processing

File: common/src/main/java/org/apache/rocketmq/common/utils/BinaryUtil.java
Patch:
@@ -54,7 +54,7 @@ public static boolean isAscii(byte[] subject) {
             return false;
         }
         for (byte b : subject) {
-            if ((b & 0x80) != 0) {
+            if (b < 32 || b > 126) {
                 return false;
             }
         }

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -488,7 +488,7 @@ public void run() {
                             ConsumeReturnType returnType = ConsumeReturnType.SUCCESS;
                             boolean hasException = false;
                             try {
-                                this.processQueue.getConsumeLock().lock();
+                                this.processQueue.getConsumeLock().readLock().lock();
                                 if (this.processQueue.isDropped()) {
                                     log.warn("consumeMessage, the message queue not be able to consume, because it's dropped. {}",
                                         this.messageQueue);
@@ -504,7 +504,7 @@ public void run() {
                                     messageQueue), e);
                                 hasException = true;
                             } finally {
-                                this.processQueue.getConsumeLock().unlock();
+                                this.processQueue.getConsumeLock().readLock().unlock();
                             }
 
                             if (null == status

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/MQConsumerInner.java
Patch:
@@ -40,6 +40,8 @@ public interface MQConsumerInner {
 
     void doRebalance();
 
+    boolean tryRebalance();
+
     void persistConsumerOffset();
 
     void updateTopicSubscribeInfo(final String topic, final Set<MessageQueue> info);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -999,8 +999,9 @@ public synchronized void start() throws MQClientException {
 
         this.updateTopicSubscribeInfoWhenSubscriptionChanged();
         this.mQClientFactory.checkClientInBroker();
-        this.mQClientFactory.sendHeartbeatToAllBrokerWithLock();
-        this.mQClientFactory.rebalanceImmediately();
+        if (this.mQClientFactory.sendHeartbeatToAllBrokerWithLock()) {
+            this.mQClientFactory.rebalanceImmediately();
+        }
     }
 
     private void checkConfig() throws MQClientException {

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ConsumerProcessor.java
Patch:
@@ -137,6 +137,7 @@ public CompletableFuture<PopResult> popMessage(
             requestHeader.setExp(subscriptionData.getSubString());
             requestHeader.setOrder(fifo);
             requestHeader.setAttemptId(attemptId);
+            requestHeader.setBornTime(System.currentTimeMillis());
 
             future = this.serviceManager.getMessageService().popMessage(
                     ctx,

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/message/LocalMessageService.java
Patch:
@@ -195,7 +195,6 @@ public CompletableFuture<Void> endTransactionOneway(ProxyContext ctx, String bro
     @Override
     public CompletableFuture<PopResult> popMessage(ProxyContext ctx, AddressableMessageQueue messageQueue,
         PopMessageRequestHeader requestHeader, long timeoutMillis) {
-        requestHeader.setBornTime(System.currentTimeMillis());
         RemotingCommand request = LocalRemotingCommand.createRequestCommand(RequestCode.POP_MESSAGE, requestHeader, ctx.getLanguage());
         CompletableFuture<RemotingCommand> future = new CompletableFuture<>();
         SimpleChannel channel = channelManager.createInvocationChannel(ctx);

File: client/src/main/java/org/apache/rocketmq/client/impl/ClientRemotingProcessor.java
Patch:
@@ -208,7 +208,7 @@ private RemotingCommand consumeMessageDirectly(ChannelHandlerContext ctx,
             (ConsumeMessageDirectlyResultRequestHeader) request
                 .decodeCommandCustomHeader(ConsumeMessageDirectlyResultRequestHeader.class);
 
-        final MessageExt msg = MessageDecoder.decode(ByteBuffer.wrap(request.getBody()));
+        final MessageExt msg = MessageDecoder.clientDecode(ByteBuffer.wrap(request.getBody()), true);
 
         ConsumeMessageDirectlyResult result =
             this.mqClientFactory.consumeMessageDirectly(msg, requestHeader.getConsumerGroup(), requestHeader.getBrokerName());

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java
Patch:
@@ -95,7 +95,7 @@ public class RemotingCommand {
 
     private transient byte[] body;
     private boolean suspended;
-    private Stopwatch processTimer;
+    private transient Stopwatch processTimer;
 
     protected RemotingCommand() {
     }

File: broker/src/main/java/org/apache/rocketmq/broker/schedule/ScheduleMessageService.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.ConcurrentSkipListMap;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.ScheduledExecutorService;
@@ -70,8 +71,8 @@ public class ScheduleMessageService extends ConfigManager {
     private static final long WAIT_FOR_SHUTDOWN = 5000L;
     private static final long DELAY_FOR_A_SLEEP = 10L;
 
-    private final ConcurrentMap<Integer /* level */, Long/* delay timeMillis */> delayLevelTable =
-        new ConcurrentHashMap<>(32);
+    private final ConcurrentSkipListMap<Integer /* level */, Long/* delay timeMillis */> delayLevelTable =
+        new ConcurrentSkipListMap<>();
 
     private final ConcurrentMap<Integer /* level */, Long/* offset */> offsetTable =
         new ConcurrentHashMap<>(32);

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -46,6 +46,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.ConcurrentSkipListMap;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.LinkedBlockingQueue;
@@ -190,8 +191,8 @@ public class DefaultMessageStore implements MessageStore {
 
     private SendMessageBackHook sendMessageBackHook;
 
-    private final ConcurrentMap<Integer /* level */, Long/* delay timeMillis */> delayLevelTable =
-        new ConcurrentHashMap<>(32);
+    private final ConcurrentSkipListMap<Integer /* level */, Long/* delay timeMillis */> delayLevelTable =
+        new ConcurrentSkipListMap<>();
 
     private int maxDelayLevel;
 

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -376,6 +376,7 @@ public static void properties2Object(final Properties p, final Object object) {
                             } else if (cn.equals("float") || cn.equals("Float")) {
                                 arg = Float.parseFloat(property);
                             } else if (cn.equals("String")) {
+                                property = property.trim();
                                 arg = property;
                             } else {
                                 continue;

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java
Patch:
@@ -301,6 +301,7 @@ public RegisterBrokerResult registerBroker(
             registerFirst = registerFirst || (StringUtils.isEmpty(oldAddr));
 
             boolean isMaster = MixAll.MASTER_ID == brokerId;
+
             boolean isPrimeSlave = !isOldVersionBroker && !isMaster
                 && brokerId == Collections.min(brokerAddrsMap.keySet());
 
@@ -339,7 +340,8 @@ public RegisterBrokerResult registerBroker(
                             topicConfigWrapper.getDataVersion(), brokerName,
                             entry.getValue().getTopicName())) {
                             final TopicConfig topicConfig = entry.getValue();
-                            if (isPrimeSlave) {
+                            // In Slave Acting Master mode, Namesrv will regard the surviving Slave with the smallest brokerId as the "agent" Master, and modify the brokerPermission to read-only.
+                            if (isPrimeSlave && brokerData.isEnableActingMaster()) {
                                 // Wipe write perm for prime slave
                                 topicConfig.setPerm(topicConfig.getPerm() & (~PermName.PERM_WRITE));
                             }

File: broker/src/test/java/org/apache/rocketmq/broker/processor/PopMessageProcessorTest.java
Patch:
@@ -76,7 +76,7 @@ public void init() {
         brokerController.getBrokerConfig().setEnablePopBufferMerge(true);
         popMessageProcessor = new PopMessageProcessor(brokerController);
         when(handlerContext.channel()).thenReturn(embeddedChannel);
-        brokerController.getTopicConfigManager().getTopicConfigTable().put(topic, new TopicConfig());
+        brokerController.getTopicConfigManager().getTopicConfigTable().put(topic, new TopicConfig(topic));
         clientChannelInfo = new ClientChannelInfo(embeddedChannel);
         ConsumerData consumerData = createConsumerData(group, topic);
         brokerController.getConsumerManager().registerConsumer(

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/common/GetMessageResultExt.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.rocketmq.store.GetMessageStatus;
 import org.apache.rocketmq.store.MessageFilter;
 import org.apache.rocketmq.store.SelectMappedBufferResult;
-import org.apache.rocketmq.tieredstore.util.MessageBufferUtil;
 
 public class GetMessageResultExt extends GetMessageResult {
 
@@ -63,9 +62,9 @@ public GetMessageResult doFilterMessage(MessageFilter messageFilter) {
                 continue;
             }
 
+            long offset = this.getMessageQueueOffset().get(i);
             result.addMessage(new SelectMappedBufferResult(bufferResult.getStartOffset(),
-                    bufferResult.getByteBuffer(), bufferResult.getSize(), null),
-                MessageBufferUtil.getQueueOffset(bufferResult.getByteBuffer()));
+                bufferResult.getByteBuffer().asReadOnlyBuffer(), bufferResult.getSize(), null), offset);
         }
 
         if (result.getBufferTotalSize() == 0) {

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/provider/TieredFileSegment.java
Patch:
@@ -367,7 +367,7 @@ public CompletableFuture<Boolean> commitAsync() {
             if (fileSegmentInputStream != null) {
                 long fileSize = this.getSize();
                 if (fileSize == -1L) {
-                    logger.error("Get commit position error before commit, Commit: %d, Expect: %d, Current Max: %d, FileName: %s",
+                    logger.error("Get commit position error before commit, Commit: {}, Expect: {}, Current Max: {}, FileName: {}",
                         commitPosition, commitPosition + fileSegmentInputStream.getContentLength(), appendPosition, getPath());
                     releaseCommitLock();
                     return CompletableFuture.completedFuture(false);

File: store/src/test/java/org/apache/rocketmq/store/timer/TimerMessageStoreTest.java
Patch:
@@ -426,8 +426,8 @@ public Boolean call() {
         assertEquals(first.getCommitReadTimeMs(), second.getCommitReadTimeMs());
         second.start(true);
 
-        // Wait until all messages have wrote back to commitLog and consumeQueue.
-        await().atMost(5000, TimeUnit.MILLISECONDS).until(new Callable<Boolean>() {
+        // Wait until all messages have been written back to commitLog and consumeQueue.
+        await().atMost(30000, TimeUnit.MILLISECONDS).until(new Callable<Boolean>() {
             @Override
             public Boolean call() {
                 ConsumeQueue cq = (ConsumeQueue) messageStore.getConsumeQueue(topic, 0);

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -2108,6 +2108,7 @@ public synchronized void changeScheduleServiceStatus(boolean shouldStart) {
             isScheduleServiceStart = shouldStart;
 
             if (timerMessageStore != null) {
+                timerMessageStore.syncLastReadTimeMs();
                 timerMessageStore.setShouldRunningDequeue(shouldStart);
             }
         }

File: broker/src/main/java/org/apache/rocketmq/broker/slave/SlaveSynchronize.java
Patch:
@@ -215,11 +215,13 @@ public void syncTimerCheckPoint() {
         String masterAddrBak = this.masterAddr;
         if (masterAddrBak != null) {
             try {
-                if (null != brokerController.getMessageStore().getTimerMessageStore()) {
+                if (null != brokerController.getMessageStore().getTimerMessageStore() &&
+                        !brokerController.getTimerMessageStore().isShouldRunningDequeue()) {
                     TimerCheckpoint checkpoint = this.brokerController.getBrokerOuterAPI().getTimerCheckPoint(masterAddrBak);
                     if (null != this.brokerController.getTimerCheckpoint()) {
                         this.brokerController.getTimerCheckpoint().setLastReadTimeMs(checkpoint.getLastReadTimeMs());
                         this.brokerController.getTimerCheckpoint().setMasterTimerQueueOffset(checkpoint.getMasterTimerQueueOffset());
+                        this.brokerController.getTimerCheckpoint().getDataVersion().assignNewOne(checkpoint.getDataVersion());
                     }
                 }
             } catch (Exception e) {

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/index/IndexStoreFile.java
Patch:
@@ -457,11 +457,9 @@ public void shutdown() {
             this.fileStatus.set(IndexStatusEnum.SHUTDOWN);
             if (this.mappedFile != null) {
                 this.mappedFile.shutdown(TimeUnit.SECONDS.toMillis(10));
-                this.mappedFile = null;
             }
             if (this.compactMappedFile != null) {
                 this.compactMappedFile.shutdown(TimeUnit.SECONDS.toMillis(10));
-                this.compactMappedFile = null;
             }
         } catch (Exception e) {
             log.error("IndexStoreFile shutdown failed, timestamp: {}, status: {}", this.getTimestamp(), fileStatus.get(), e);

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/metrics/TieredStoreMetricsManager.java
Patch:
@@ -46,7 +46,7 @@
 import org.apache.rocketmq.tieredstore.TieredMessageFetcher;
 import org.apache.rocketmq.tieredstore.common.FileSegmentType;
 import org.apache.rocketmq.tieredstore.common.MessageCacheKey;
-import org.apache.rocketmq.tieredstore.common.SelectMappedBufferResultWrapper;
+import org.apache.rocketmq.tieredstore.common.SelectBufferResultWrapper;
 import org.apache.rocketmq.tieredstore.common.TieredMessageStoreConfig;
 import org.apache.rocketmq.tieredstore.file.CompositeQueueFlatFile;
 import org.apache.rocketmq.tieredstore.file.TieredFlatFileManager;
@@ -265,7 +265,7 @@ public static void init(Meter meter, Supplier<AttributesBuilder> attributesBuild
             .setUnit("bytes")
             .ofLongs()
             .buildWithCallback(measurement -> {
-                Optional<Policy.Eviction<MessageCacheKey, SelectMappedBufferResultWrapper>> eviction = fetcher.getMessageCache().policy().eviction();
+                Optional<Policy.Eviction<MessageCacheKey, SelectBufferResultWrapper>> eviction = fetcher.getMessageCache().policy().eviction();
                 eviction.ifPresent(resultEviction -> measurement.record(resultEviction.weightedSize().orElse(0), newAttributesBuilder().build()));
             });
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/provider/TieredFileSegment.java
Patch:
@@ -295,7 +295,7 @@ public CompletableFuture<ByteBuffer> readAsync(long position, int length) {
             return future;
         }
         if (position + length > commitPosition) {
-            logger.warn("TieredFileSegment#readAsync request position + length is greater than commit position," +
+            logger.debug("TieredFileSegment#readAsync request position + length is greater than commit position," +
                     " correct length using commit position, file: {}, request position: {}, commit position:{}, change length from {} to {}",
                 getPath(), position, commitPosition, length, commitPosition - position);
             length = (int) (commitPosition - position);

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManagerNewTest.java
Patch:
@@ -130,7 +130,6 @@ public void getAllTopicList() {
         topicList = TopicList.decode(content, TopicList.class);
         assertThat(topicList.getTopicList()).contains("TestTopic", "TestTopic1", "TestTopic2");
     }
-
     @Test
     public void registerBroker() {
         // Register master broker

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/TopicList.java
Patch:
@@ -17,11 +17,11 @@
 package org.apache.rocketmq.remoting.protocol.body;
 
 import java.util.Set;
-import java.util.concurrent.CopyOnWriteArraySet;
+import java.util.concurrent.ConcurrentHashMap;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
 public class TopicList extends RemotingSerializable {
-    private Set<String> topicList = new CopyOnWriteArraySet<>();
+    private Set<String> topicList = ConcurrentHashMap.newKeySet();
     private String brokerAddr;
 
     public Set<String> getTopicList() {

File: common/src/test/java/org/apache/rocketmq/common/UtilAllTest.java
Patch:
@@ -215,8 +215,9 @@ public void setSubField1(boolean subField1) {
     @Test
     public void testCleanBuffer() {
         UtilAll.cleanBuffer(null);
+        UtilAll.cleanBuffer(ByteBuffer.allocateDirect(10));
+        UtilAll.cleanBuffer(ByteBuffer.allocateDirect(0));
         UtilAll.cleanBuffer(ByteBuffer.allocate(10));
-        UtilAll.cleanBuffer(ByteBuffer.allocate(0));
     }
 
     @Test

File: store/src/test/java/org/apache/rocketmq/store/timer/TimerMessageStoreTest.java
Patch:
@@ -387,7 +387,7 @@ public void testStateAndRecover() throws Exception {
             assertEquals(PutMessageStatus.PUT_OK, putMessageResult.getPutMessageStatus());
         }
 
-        // Wait until messages have wrote to TimerLog and currReadTimeMs catches up current time.
+        // Wait until messages have written to TimerLog and currReadTimeMs catches up current time.
         await().atMost(5000, TimeUnit.MILLISECONDS).until(new Callable<Boolean>() {
             @Override
             public Boolean call() {

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessResource.java
Patch:
@@ -48,6 +48,7 @@
 import org.apache.rocketmq.acl.common.AuthorizationHeader;
 import org.apache.rocketmq.acl.common.Permission;
 import org.apache.rocketmq.acl.common.SessionCredentials;
+import org.apache.rocketmq.common.KeyBuilder;
 import org.apache.rocketmq.common.MQVersion;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.PlainAccessConfig;
@@ -341,7 +342,7 @@ public static String getGroupFromRetryTopic(String retryTopic) {
         if (retryTopic == null) {
             return null;
         }
-        return retryTopic.substring(MixAll.RETRY_GROUP_TOPIC_PREFIX.length());
+        return KeyBuilder.parseGroup(retryTopic);
     }
 
     public static String getRetryTopic(String group) {

File: broker/src/main/java/org/apache/rocketmq/broker/filter/ExpressionForRetryMessageFilter.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.nio.ByteBuffer;
 import java.util.Map;
+import org.apache.rocketmq.common.KeyBuilder;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.filter.ExpressionType;
 import org.apache.rocketmq.common.message.MessageConst;
@@ -62,7 +63,7 @@ public boolean isMatchedByCommitLog(ByteBuffer msgBuffer, Map<String, String> pr
                 tempProperties = MessageDecoder.decodeProperties(msgBuffer);
             }
             String realTopic = tempProperties.get(MessageConst.PROPERTY_RETRY_TOPIC);
-            String group = subscriptionData.getTopic().substring(MixAll.RETRY_GROUP_TOPIC_PREFIX.length());
+            String group = KeyBuilder.parseGroup(subscriptionData.getTopic());
             realFilterData = this.consumerFilterManager.get(realTopic, group);
         }
 

File: broker/src/main/java/org/apache/rocketmq/broker/longpolling/NotifyMessageArrivingListener.java
Patch:
@@ -17,12 +17,11 @@
 
 package org.apache.rocketmq.broker.longpolling;
 
+import java.util.Map;
 import org.apache.rocketmq.broker.processor.NotificationProcessor;
 import org.apache.rocketmq.broker.processor.PopMessageProcessor;
 import org.apache.rocketmq.store.MessageArrivingListener;
 
-import java.util.Map;
-
 public class NotifyMessageArrivingListener implements MessageArrivingListener {
     private final PullRequestHoldService pullRequestHoldService;
     private final PopMessageProcessor popMessageProcessor;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/NotificationProcessor.java
Patch:
@@ -58,7 +58,7 @@ public boolean rejectRequest() {
     }
 
     public void notifyMessageArriving(final String topic, final int queueId) {
-        popLongPollingService.notifyMessageArriving(topic, queueId);
+        popLongPollingService.notifyMessageArrivingWithRetryTopic(topic, queueId);
     }
 
     @Override

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.rocketmq.broker.metrics.BrokerMetricsManager;
 import org.apache.rocketmq.broker.mqtrace.SendMessageContext;
 import org.apache.rocketmq.common.AbortProcessException;
+import org.apache.rocketmq.common.KeyBuilder;
 import org.apache.rocketmq.common.MQVersion;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.TopicConfig;
@@ -178,7 +179,7 @@ private boolean handleRetryAndDLQ(SendMessageRequestHeader requestHeader, Remoti
         MessageExt msg, TopicConfig topicConfig, Map<String, String> properties) {
         String newTopic = requestHeader.getTopic();
         if (null != newTopic && newTopic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
-            String groupName = newTopic.substring(MixAll.RETRY_GROUP_TOPIC_PREFIX.length());
+            String groupName = KeyBuilder.parseGroup(newTopic);
             SubscriptionGroupConfig subscriptionGroupConfig =
                 this.brokerController.getSubscriptionGroupManager().findSubscriptionGroupConfig(groupName);
             if (null == subscriptionGroupConfig) {

File: tools/src/main/java/org/apache/rocketmq/tools/command/consumer/ConsumerProgressSubCommand.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
+import org.apache.rocketmq.common.KeyBuilder;
 import org.apache.rocketmq.common.MQVersion;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.UtilAll;
@@ -212,7 +213,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
                 TopicList topicList = defaultMQAdminExt.fetchAllTopicList();
                 for (String topic : topicList.getTopicList()) {
                     if (topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
-                        String consumerGroup = topic.substring(MixAll.RETRY_GROUP_TOPIC_PREFIX.length());
+                        String consumerGroup = KeyBuilder.parseGroup(topic);
                         try {
                             ConsumeStats consumeStats = null;
                             try {

File: tools/src/main/java/org/apache/rocketmq/tools/monitor/MonitorService.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
+import org.apache.rocketmq.common.KeyBuilder;
 import org.apache.rocketmq.common.MQVersion;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
@@ -172,7 +173,7 @@ public void doMonitorWork() throws RemotingException, MQClientException, Interru
         TopicList topicList = defaultMQAdminExt.fetchAllTopicList();
         for (String topic : topicList.getTopicList()) {
             if (topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
-                String consumerGroup = topic.substring(MixAll.RETRY_GROUP_TOPIC_PREFIX.length());
+                String consumerGroup = KeyBuilder.parseGroup(topic);
 
                 try {
                     this.reportUndoneMsgs(consumerGroup);

File: client/src/main/java/org/apache/rocketmq/client/producer/MQProducer.java
Patch:
@@ -81,9 +81,6 @@ void send(final Message msg, final MessageQueueSelector selector, final Object a
     void sendOneway(final Message msg, final MessageQueueSelector selector, final Object arg)
         throws MQClientException, RemotingException, InterruptedException;
 
-    TransactionSendResult sendMessageInTransaction(final Message msg,
-        final LocalTransactionExecuter tranExecuter, final Object arg) throws MQClientException;
-
     TransactionSendResult sendMessageInTransaction(final Message msg,
         final Object arg) throws MQClientException;
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/TieredConsumeQueue.java
Patch:
@@ -20,9 +20,9 @@
 import java.nio.ByteBuffer;
 import java.util.concurrent.CompletableFuture;
 import org.apache.commons.lang3.tuple.Pair;
+import org.apache.rocketmq.common.BoundaryType;
 import org.apache.rocketmq.tieredstore.common.AppendResult;
 import org.apache.rocketmq.tieredstore.provider.TieredFileSegment;
-import org.apache.rocketmq.common.BoundaryType;
 
 public class TieredConsumeQueue {
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/TieredFlatFile.java
Patch:
@@ -141,7 +141,6 @@ public FileSegmentType getFileType() {
         return fileType;
     }
 
-    @VisibleForTesting
     public List<TieredFileSegment> getFileSegmentList() {
         return fileSegmentList;
     }
@@ -274,7 +273,7 @@ public int getFileSegmentCount() {
     }
 
     @Nullable
-    protected TieredFileSegment getFileByIndex(int index) {
+    public TieredFileSegment getFileByIndex(int index) {
         fileSegmentLock.readLock().lock();
         try {
             if (index < fileSegmentList.size()) {
@@ -354,7 +353,7 @@ protected TieredFileSegment getFileByTime(long timestamp, BoundaryType boundaryT
         }
     }
 
-    protected List<TieredFileSegment> getFileListByTime(long beginTime, long endTime) {
+    public List<TieredFileSegment> getFileListByTime(long beginTime, long endTime) {
         fileSegmentLock.readLock().lock();
         try {
             return fileSegmentList.stream()

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/provider/posix/PosixFileSegment.java
Patch:
@@ -159,6 +159,7 @@ public CompletableFuture<ByteBuffer> read0(long position, int length) {
             readFileChannel.position(position);
             readFileChannel.read(byteBuffer);
             byteBuffer.flip();
+            byteBuffer.limit(length);
 
             attributesBuilder.put(LABEL_SUCCESS, true);
             long costTime = stopwatch.stop().elapsed(TimeUnit.MILLISECONDS);

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/util/MessageBufferUtilTest.java
Patch:
@@ -135,7 +135,6 @@ public static void verifyMockedMessageBuffer(ByteBuffer buffer, int phyOffset) {
         Assert.assertEquals("uservalue0", properties.get("userkey"));
     }
 
-
     @Test
     public void testGetTotalSize() {
         ByteBuffer buffer = buildMockedMessageBuffer();

File: store/src/main/java/org/apache/rocketmq/store/RunningFlags.java
Patch:
@@ -30,7 +30,7 @@ public class RunningFlags {
 
     private static final int FENCED_BIT = 1 << 5;
 
-    private static final int LOGIC_DISK_FULL_BIT = 1 << 5;
+    private static final int LOGIC_DISK_FULL_BIT = 1 << 6;
 
     private volatile int flagBits = 0;
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/PopProcessQueue.java
Patch:
@@ -26,7 +26,7 @@ public class PopProcessQueue {
 
     private final static long PULL_MAX_IDLE_TIME = Long.parseLong(System.getProperty("rocketmq.client.pull.pullMaxIdleTime", "120000"));
 
-    private long lastPopTimestamp;
+    private long lastPopTimestamp = System.currentTimeMillis();
     private AtomicInteger waitAckCounter = new AtomicInteger(0);
     private volatile boolean dropped = false;
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/provider/posix/PosixFileSegment.java
Patch:
@@ -66,8 +66,8 @@ public PosixFileSegment(TieredMessageStoreConfig storeConfig,
         super(storeConfig, fileType, filePath, baseOffset);
 
         // basePath
-        String basePath = StringUtils.defaultString(storeConfig.getTieredStoreFilepath(),
-            StringUtils.appendIfMissing(storeConfig.getTieredStoreFilepath(), File.separator));
+        String basePath = StringUtils.defaultString(storeConfig.getTieredStoreFilePath(),
+            StringUtils.appendIfMissing(storeConfig.getTieredStoreFilePath(), File.separator));
 
         // fullPath: basePath/hash_cluster/broker/topic/queueId/fileType/baseOffset
         String brokerClusterName = storeConfig.getBrokerClusterName();

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/file/TieredCommitLogTest.java
Patch:
@@ -49,7 +49,7 @@ public void setUp() throws ClassNotFoundException, NoSuchMethodException {
         TieredMessageStoreConfig storeConfig = new TieredMessageStoreConfig();
         storeConfig.setBrokerName("brokerName");
         storeConfig.setStorePathRootDir(storePath);
-        storeConfig.setTieredStoreFilepath(storePath + File.separator);
+        storeConfig.setTieredStoreFilePath(storePath + File.separator);
         storeConfig.setTieredBackendServiceProvider("org.apache.rocketmq.tieredstore.provider.posix.PosixFileSegment");
         storeConfig.setCommitLogRollingInterval(0);
         storeConfig.setTieredStoreCommitLogMaxSize(1000);

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/provider/posix/PosixFileSegmentTest.java
Patch:
@@ -42,7 +42,7 @@ public class PosixFileSegmentTest {
     @Before
     public void setUp() {
         storeConfig = new TieredMessageStoreConfig();
-        storeConfig.setTieredStoreFilepath(storePath);
+        storeConfig.setTieredStoreFilePath(storePath);
         mq = new MessageQueue("OSSFileSegmentTest", "broker", 0);
         TieredStoreExecutor.init();
     }

File: client/src/main/java/org/apache/rocketmq/client/consumer/MessageQueueListener.java
Patch:
@@ -26,8 +26,7 @@ public interface MessageQueueListener {
     /**
      * @param topic message topic
      * @param mqAll all queues in this message topic
-     * @param mqDivided collection of queues,assigned to the current consumer
+     * @param mqAssigned collection of queues, assigned to the current consumer
      */
-    void messageQueueChanged(final String topic, final Set<MessageQueue> mqAll,
-        final Set<MessageQueue> mqDivided);
+    void messageQueueChanged(final String topic, final Set<MessageQueue> mqAll, final Set<MessageQueue> mqAssigned);
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/message/LocalRemotingCommand.java
Patch:
@@ -32,6 +32,7 @@ public static LocalRemotingCommand createRequestCommand(int code, CommandCustomH
         cmd.writeCustomHeader(customHeader);
         cmd.setExtFields(new HashMap<>());
         setCmdVersion(cmd);
+        cmd.makeCustomHeaderToNet();
         return cmd;
     }
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/provider/posix/PosixFileSegment.java
Patch:
@@ -66,8 +66,8 @@ public PosixFileSegment(TieredMessageStoreConfig storeConfig,
         super(storeConfig, fileType, filePath, baseOffset);
 
         // basePath
-        String basePath = StringUtils.defaultString(storeConfig.getTieredStoreFilePath(),
-            StringUtils.appendIfMissing(storeConfig.getTieredStoreFilePath(), File.separator));
+        String basePath = StringUtils.defaultString(storeConfig.getTieredStoreFilepath(),
+            StringUtils.appendIfMissing(storeConfig.getTieredStoreFilepath(), File.separator));
 
         // fullPath: basePath/hash_cluster/broker/topic/queueId/fileType/baseOffset
         String brokerClusterName = storeConfig.getBrokerClusterName();

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/file/TieredCommitLogTest.java
Patch:
@@ -49,7 +49,7 @@ public void setUp() throws ClassNotFoundException, NoSuchMethodException {
         TieredMessageStoreConfig storeConfig = new TieredMessageStoreConfig();
         storeConfig.setBrokerName("brokerName");
         storeConfig.setStorePathRootDir(storePath);
-        storeConfig.setTieredStoreFilePath(storePath + File.separator);
+        storeConfig.setTieredStoreFilepath(storePath + File.separator);
         storeConfig.setTieredBackendServiceProvider("org.apache.rocketmq.tieredstore.provider.posix.PosixFileSegment");
         storeConfig.setCommitLogRollingInterval(0);
         storeConfig.setTieredStoreCommitLogMaxSize(1000);

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/provider/posix/PosixFileSegmentTest.java
Patch:
@@ -42,7 +42,7 @@ public class PosixFileSegmentTest {
     @Before
     public void setUp() {
         storeConfig = new TieredMessageStoreConfig();
-        storeConfig.setTieredStoreFilePath(storePath);
+        storeConfig.setTieredStoreFilepath(storePath);
         mq = new MessageQueue("OSSFileSegmentTest", "broker", 0);
         TieredStoreExecutor.init();
     }

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -2112,7 +2112,6 @@ public void assignOffset(MessageExtBrokerInner msg) throws RocksDBException {
         }
     }
 
-
     @Override
     public void increaseOffset(MessageExtBrokerInner msg, short messageNum) {
         final int tranType = MessageSysFlag.getTransactionValue(msg.getSysFlag());

File: store/src/main/java/org/apache/rocketmq/store/queue/ConsumeQueueInterface.java
Patch:
@@ -181,7 +181,6 @@ public interface ConsumeQueueInterface extends FileQueueLifeCycle {
      */
     void assignQueueOffset(QueueOffsetOperator queueOffsetAssigner, MessageExtBrokerInner msg) throws RocksDBException;
 
-
     /**
      * Increase queue offset.
      * @param queueOffsetAssigner the delegated queue offset assigner

File: store/src/main/java/org/apache/rocketmq/store/queue/QueueOffsetOperator.java
Patch:
@@ -71,9 +71,9 @@ public Long getLmqTopicQueueNextOffset(String topicQueueKey) {
         return this.lmqTopicQueueTable.get(topicQueueKey);
     }
 
-    public void increaseLmqOffset(String topicQueueKey, short messageNum) {
-        Long lmqOffset = ConcurrentHashMapUtils.computeIfAbsent(this.lmqTopicQueueTable, topicQueueKey, k -> 0L);
-        this.lmqTopicQueueTable.put(topicQueueKey, lmqOffset + messageNum);
+    public void increaseLmqOffset(String queueKey, short messageNum) {
+        Long lmqOffset = ConcurrentHashMapUtils.computeIfAbsent(this.lmqTopicQueueTable, queueKey, k -> 0L);
+        this.lmqTopicQueueTable.put(queueKey, lmqOffset + messageNum);
     }
 
     public long currentQueueOffset(String topicQueueKey) {

File: store/src/test/java/org/apache/rocketmq/store/AppendPropCRCTest.java
Patch:
@@ -56,15 +56,16 @@ public void init() throws Exception {
         messageStoreConfig.setMappedFileSizeConsumeQueue(1024 * 4);
         messageStoreConfig.setMaxHashSlotNum(100);
         messageStoreConfig.setMaxIndexNum(100 * 10);
+        messageStoreConfig.setMaxMessageSize(10 * 1024 * 1024);
         messageStoreConfig.setStorePathRootDir(System.getProperty("java.io.tmpdir") + File.separator + "unitteststore");
         messageStoreConfig.setStorePathCommitLog(System.getProperty("java.io.tmpdir") + File.separator + "unitteststore" + File.separator + "commitlog");
         messageStoreConfig.setForceVerifyPropCRC(true);
         messageStoreConfig.setEnabledAppendPropCRC(true);
         //too much reference
         DefaultMessageStore messageStore = new DefaultMessageStore(messageStoreConfig, null, null, new BrokerConfig(), new ConcurrentHashMap<>());
         commitLog = new CommitLog(messageStore);
-        encoder = new MessageExtEncoder(10 * 1024 * 1024, true);
-        callback = commitLog.new DefaultAppendMessageCallback();
+        encoder = new MessageExtEncoder(messageStoreConfig);
+        callback = commitLog.new DefaultAppendMessageCallback(messageStoreConfig);
     }
 
     @After

File: store/src/test/java/org/apache/rocketmq/store/kv/CompactionLogTest.java
Patch:
@@ -86,7 +86,7 @@ public class CompactionLogTest {
     int compactionCqFileSize = 1024;
 
 
-    private static MessageExtEncoder encoder = new MessageExtEncoder(1024);
+    private static MessageExtEncoder encoder = new MessageExtEncoder(1024, new MessageStoreConfig());
     private static SocketAddress storeHost;
     private static SocketAddress bornHost;
 

File: common/src/main/java/org/apache/rocketmq/common/message/MessageConst.java
Patch:
@@ -97,6 +97,7 @@ public class MessageConst {
     public static final String PROPERTY_TIMER_DEL_UNIQKEY = "TIMER_DEL_UNIQKEY";
     public static final String PROPERTY_TIMER_DELAY_LEVEL = "TIMER_DELAY_LEVEL";
     public static final String PROPERTY_TIMER_DELAY_MS = "TIMER_DELAY_MS";
+    public static final String PROPERTY_CRC32 = "__CRC32#";
 
     /**
      * properties for DLQ
@@ -155,5 +156,6 @@ public class MessageConst {
         STRING_HASH_SET.add(PROPERTY_BORN_TIMESTAMP);
         STRING_HASH_SET.add(PROPERTY_DLQ_ORIGIN_TOPIC);
         STRING_HASH_SET.add(PROPERTY_DLQ_ORIGIN_MESSAGE_ID);
+        STRING_HASH_SET.add(PROPERTY_CRC32);
     }
 }

File: store/src/test/java/org/apache/rocketmq/store/BatchPutMessageTest.java
Patch:
@@ -108,7 +108,7 @@ public void testPutMessages() throws Exception {
             short propertiesLength = (short) propertiesBytes.length;
             final byte[] topicData = msg.getTopic().getBytes(MessageDecoder.CHARSET_UTF8);
             final int topicLength = topicData.length;
-            msgLengthArr[j] = calMsgLength(msg.getBody().length, topicLength, propertiesLength + batchPropLen + 1) + msgLengthArr[j - 1];
+            msgLengthArr[j] = calMsgLength(msg.getBody().length, topicLength, propertiesLength + batchPropLen) + msgLengthArr[j - 1];
             j++;
         }
         byte[] batchMessageBody = MessageDecoder.encodeMessages(messages);

File: store/src/test/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHATest.java
Patch:
@@ -465,7 +465,7 @@ public void testCheckSynchronizingSyncStateSetFlag() throws Exception {
 
         // Step2: check flag SynchronizingSyncStateSet
         Assert.assertTrue(masterHAService.isSynchronizingSyncStateSet());
-        Assert.assertEquals(this.messageStore1.getConfirmOffset(), 1570);
+        Assert.assertEquals(this.messageStore1.getConfirmOffset(), 1580);
         Set<Long> syncStateSet = masterHAService.getSyncStateSet();
         Assert.assertEquals(syncStateSet.size(), 2);
         Assert.assertTrue(syncStateSet.contains(1L));

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/file/CompositeQueueFlatFileTest.java
Patch:
@@ -74,7 +74,7 @@ public void testAppendCommitLog() {
         ByteBuffer message = MessageBufferUtilTest.buildMockedMessageBuffer();
         AppendResult result = flatFile.appendCommitLog(message);
         Assert.assertEquals(AppendResult.SUCCESS, result);
-        Assert.assertEquals(122L, flatFile.commitLog.getFlatFile().getFileToWrite().getAppendPosition());
+        Assert.assertEquals(123L, flatFile.commitLog.getFlatFile().getFileToWrite().getAppendPosition());
         Assert.assertEquals(0L, flatFile.commitLog.getFlatFile().getFileToWrite().getCommitPosition());
 
         flatFile = new CompositeQueueFlatFile(tieredFileAllocator, mq);

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/util/MessageBufferUtilTest.java
Patch:
@@ -47,7 +47,7 @@ public class MessageBufferUtilTest {
         + 8 //Prepared Transaction Offset
         + 4 + 0 //BODY
         + 2 + 0 //TOPIC
-        + 2 + 30 //properties
+        + 2 + 31 //properties
         + 0;
 
     public static ByteBuffer buildMockedMessageBuffer() {

File: container/src/main/java/org/apache/rocketmq/container/BrokerContainer.java
Patch:
@@ -164,7 +164,7 @@ public void run0() {
                         LOG.error("ScheduledTask fetchNameServerAddr exception", e);
                     }
                 }
-            }, 1000 * 10, 1000 * 60 * 2, TimeUnit.MILLISECONDS);
+            }, 1000 * 10, this.brokerContainerConfig.getUpdateNamesrvAddrInterval(), TimeUnit.MILLISECONDS);
         } else if (this.brokerContainerConfig.isFetchNamesrvAddrByAddressServer()) {
             this.scheduledExecutorService.scheduleAtFixedRate(new AbstractBrokerRunnable(BrokerIdentity.BROKER_CONTAINER_IDENTITY) {
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/ChannelEventListener.java
Patch:
@@ -26,4 +26,6 @@ public interface ChannelEventListener {
     void onChannelException(final String remoteAddr, final Channel channel);
 
     void onChannelIdle(final String remoteAddr, final Channel channel);
+
+    void onChannelActive(final String remoteAddr, final Channel channel);
 }

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyEventType.java
Patch:
@@ -20,5 +20,6 @@ public enum NettyEventType {
     CONNECT,
     CLOSE,
     IDLE,
-    EXCEPTION
+    EXCEPTION,
+    ACTIVE
 }

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -701,6 +701,9 @@ public void run() {
                             case EXCEPTION:
                                 listener.onChannelException(event.getRemoteAddr(), event.getChannel());
                                 break;
+                            case ACTIVE:
+                                listener.onChannelActive(event.getRemoteAddr(), event.getChannel());
+                                break;
                             default:
                                 break;
 

File: example/src/main/java/org/apache/rocketmq/example/simple/PullConsumer.java
Patch:
@@ -75,7 +75,7 @@ public void run() {
 
                                             if (msgs != null && !msgs.isEmpty()) {
                                                 this.doSomething(msgs);
-                                                //update offset to broker
+                                                //update offset to local memory, eventually to broker
                                                 consumer.updateConsumeOffset(messageQueue, pullResult.getNextBeginOffset());
                                                 //print pull tps
                                                 this.incPullTPS(topic, pullResult.getMsgFoundList().size());

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java
Patch:
@@ -204,7 +204,7 @@ public RemotingCommand processRequest(final ChannelHandlerContext ctx, RemotingC
         RemotingCommand response = RemotingCommand.createResponseCommand(PopMessageResponseHeader.class);
         final PopMessageResponseHeader responseHeader = (PopMessageResponseHeader) response.readCustomHeader();
         final PopMessageRequestHeader requestHeader =
-            (PopMessageRequestHeader) request.decodeCommandCustomHeader(PopMessageRequestHeader.class);
+            (PopMessageRequestHeader) request.decodeCommandCustomHeader(PopMessageRequestHeader.class, true);
         StringBuilder startOffsetInfo = new StringBuilder(64);
         StringBuilder msgOffsetInfo = new StringBuilder(64);
         StringBuilder orderCountInfo = null;

File: remoting/src/test/java/org/apache/rocketmq/remoting/protocol/header/FastCodesHeaderTest.java
Patch:
@@ -73,7 +73,7 @@ private HashMap<String, String> buildExtFields(List<Field> fields) {
 
     private void check(RemotingCommand command, List<Field> fields,
             Class<? extends CommandCustomHeader> classHeader) throws Exception {
-        CommandCustomHeader o1 = command.decodeCommandCustomHeader(classHeader, false);
+        CommandCustomHeader o1 = command.decodeCommandCustomHeaderDirectly(classHeader, false);
         CommandCustomHeader o2 = classHeader.getDeclaredConstructor().newInstance();
         ((FastCodesHeader)o2).decode(command.getExtFields());
         for (Field f : fields) {

File: broker/src/main/java/org/apache/rocketmq/broker/controller/ReplicasManager.java
Patch:
@@ -224,7 +224,7 @@ public void shutdown() {
 
     public synchronized void changeBrokerRole(final Long newMasterBrokerId, final String newMasterAddress,
         final Integer newMasterEpoch,
-        final Integer syncStateSetEpoch, final Set<Long> syncStateSet) {
+        final Integer syncStateSetEpoch, final Set<Long> syncStateSet) throws Exception {
         if (newMasterBrokerId != null && newMasterEpoch > this.masterEpoch) {
             if (newMasterBrokerId.equals(this.brokerControllerId)) {
                 changeToMaster(newMasterEpoch, syncStateSetEpoch, syncStateSet);
@@ -234,7 +234,7 @@ public synchronized void changeBrokerRole(final Long newMasterBrokerId, final St
         }
     }
 
-    public void changeToMaster(final int newMasterEpoch, final int syncStateSetEpoch, final Set<Long> syncStateSet) {
+    public void changeToMaster(final int newMasterEpoch, final int syncStateSetEpoch, final Set<Long> syncStateSet) throws Exception {
         synchronized (this) {
             if (newMasterEpoch > this.masterEpoch) {
                 LOGGER.info("Begin to change to master, brokerName:{}, replicas:{}, new Epoch:{}", this.brokerConfig.getBrokerName(), this.brokerAddress, newMasterEpoch);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AckMessageProcessor.java
Patch:
@@ -253,7 +253,7 @@ private void appendAck(final AckMessageRequestHeader requestHeader, final BatchA
 
         MessageExtBrokerInner msgInner = new MessageExtBrokerInner();
         msgInner.setTopic(reviveTopic);
-        msgInner.setBody(JSON.toJSONString(ackMsg).getBytes(DataConverter.charset));
+        msgInner.setBody(JSON.toJSONString(ackMsg).getBytes(DataConverter.CHARSET_UTF8));
         msgInner.setQueueId(rqId);
         if (ackMsg instanceof BatchAckMsg) {
             msgInner.setTags(PopAckConstants.BATCH_ACK_TAG);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ChangeInvisibleTimeProcessor.java
Patch:
@@ -180,7 +180,7 @@ private void ackOrigin(final ChangeInvisibleTimeRequestHeader requestHeader, Str
         }
 
         msgInner.setTopic(reviveTopic);
-        msgInner.setBody(JSON.toJSONString(ackMsg).getBytes(DataConverter.charset));
+        msgInner.setBody(JSON.toJSONString(ackMsg).getBytes(DataConverter.CHARSET_UTF8));
         msgInner.setQueueId(rqId);
         msgInner.setTags(PopAckConstants.ACK_TAG);
         msgInner.setBornTimestamp(System.currentTimeMillis());
@@ -216,7 +216,7 @@ private PutMessageResult appendCheckPoint(final ChangeInvisibleTimeRequestHeader
         ck.addDiff(0);
         ck.setBrokerName(brokerName);
 
-        msgInner.setBody(JSON.toJSONString(ck).getBytes(DataConverter.charset));
+        msgInner.setBody(JSON.toJSONString(ck).getBytes(DataConverter.CHARSET_UTF8));
         msgInner.setQueueId(reviveQid);
         msgInner.setTags(PopAckConstants.CK_TAG);
         msgInner.setBornTimestamp(System.currentTimeMillis());

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopBufferMergeService.java
Patch:
@@ -633,7 +633,7 @@ private boolean putAckToStore(final PopCheckPointWrapper pointWrapper, byte msgI
         ackMsg.setQueueId(point.getQueueId());
         ackMsg.setPopTime(point.getPopTime());
         msgInner.setTopic(popMessageProcessor.reviveTopic);
-        msgInner.setBody(JSON.toJSONString(ackMsg).getBytes(DataConverter.charset));
+        msgInner.setBody(JSON.toJSONString(ackMsg).getBytes(DataConverter.CHARSET_UTF8));
         msgInner.setQueueId(pointWrapper.getReviveQueueId());
         msgInner.setTags(PopAckConstants.ACK_TAG);
         msgInner.setBornTimestamp(System.currentTimeMillis());
@@ -673,7 +673,7 @@ private boolean putBatchAckToStore(final PopCheckPointWrapper pointWrapper, fina
         batchAckMsg.setQueueId(point.getQueueId());
         batchAckMsg.setPopTime(point.getPopTime());
         msgInner.setTopic(popMessageProcessor.reviveTopic);
-        msgInner.setBody(JSON.toJSONString(batchAckMsg).getBytes(DataConverter.charset));
+        msgInner.setBody(JSON.toJSONString(batchAckMsg).getBytes(DataConverter.CHARSET_UTF8));
         msgInner.setQueueId(pointWrapper.getReviveQueueId());
         msgInner.setTags(PopAckConstants.BATCH_ACK_TAG);
         msgInner.setBornTimestamp(System.currentTimeMillis());

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java
Patch:
@@ -685,7 +685,7 @@ public final MessageExtBrokerInner buildCkMsg(final PopCheckPoint ck, final int
         MessageExtBrokerInner msgInner = new MessageExtBrokerInner();
 
         msgInner.setTopic(reviveTopic);
-        msgInner.setBody(JSON.toJSONString(ck).getBytes(DataConverter.charset));
+        msgInner.setBody(JSON.toJSONString(ck).getBytes(DataConverter.CHARSET_UTF8));
         msgInner.setQueueId(reviveQid);
         msgInner.setTags(PopAckConstants.CK_TAG);
         msgInner.setBornTimestamp(System.currentTimeMillis());

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
Patch:
@@ -356,7 +356,7 @@ protected void consumeReviveMessage(ConsumeReviveObj consumeReviveObj) {
             }
             for (MessageExt messageExt : messageExts) {
                 if (PopAckConstants.CK_TAG.equals(messageExt.getTags())) {
-                    String raw = new String(messageExt.getBody(), DataConverter.charset);
+                    String raw = new String(messageExt.getBody(), DataConverter.CHARSET_UTF8);
                     if (brokerController.getBrokerConfig().isEnablePopLog()) {
                         POP_LOGGER.info("reviveQueueId={},find ck, offset:{}, raw : {}", messageExt.getQueueId(), messageExt.getQueueOffset(), raw);
                     }
@@ -371,7 +371,7 @@ protected void consumeReviveMessage(ConsumeReviveObj consumeReviveObj) {
                         firstRt = point.getReviveTime();
                     }
                 } else if (PopAckConstants.ACK_TAG.equals(messageExt.getTags())) {
-                    String raw = new String(messageExt.getBody(), DataConverter.charset);
+                    String raw = new String(messageExt.getBody(), DataConverter.CHARSET_UTF8);
                     if (brokerController.getBrokerConfig().isEnablePopLog()) {
                         POP_LOGGER.info("reviveQueueId={},find ack, offset:{}, raw : {}", messageExt.getQueueId(), messageExt.getQueueOffset(), raw);
                     }
@@ -395,7 +395,7 @@ protected void consumeReviveMessage(ConsumeReviveObj consumeReviveObj) {
                         }
                     }
                 } else if (PopAckConstants.BATCH_ACK_TAG.equals(messageExt.getTags())) {
-                    String raw = new String(messageExt.getBody(), DataConverter.charset);
+                    String raw = new String(messageExt.getBody(), DataConverter.CHARSET_UTF8);
                     if (brokerController.getBrokerConfig().isEnablePopLog()) {
                         POP_LOGGER.info("reviveQueueId={}, find batch ack, offset:{}, raw : {}", messageExt.getQueueId(), messageExt.getQueueOffset(), raw);
                     }

File: broker/src/test/java/org/apache/rocketmq/broker/processor/PopReviveServiceTest.java
Patch:
@@ -234,7 +234,7 @@ public static MessageExtBrokerInner buildCkMsg(PopCheckPoint ck) {
         MessageExtBrokerInner msgInner = new MessageExtBrokerInner();
 
         msgInner.setTopic(REVIVE_TOPIC);
-        msgInner.setBody(JSON.toJSONString(ck).getBytes(DataConverter.charset));
+        msgInner.setBody(JSON.toJSONString(ck).getBytes(DataConverter.CHARSET_UTF8));
         msgInner.setQueueId(REVIVE_QUEUE_ID);
         msgInner.setTags(PopAckConstants.CK_TAG);
         msgInner.setBornTimestamp(System.currentTimeMillis());
@@ -269,7 +269,7 @@ public static MessageExtBrokerInner buildAckInnerMessage(String reviveTopic, Ack
         SocketAddress host, long deliverMs, String ackUniqueId) {
         MessageExtBrokerInner msgInner = new MessageExtBrokerInner();
         msgInner.setTopic(reviveTopic);
-        msgInner.setBody(JSON.toJSONString(ackMsg).getBytes(DataConverter.charset));
+        msgInner.setBody(JSON.toJSONString(ackMsg).getBytes(DataConverter.CHARSET_UTF8));
         msgInner.setQueueId(reviveQid);
         msgInner.setTags(PopAckConstants.ACK_TAG);
         msgInner.setBornTimestamp(System.currentTimeMillis());

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -492,6 +492,7 @@ public static int compareInteger(int x, int y) {
     public static int compareLong(long x, long y) {
         return Long.compare(x, y);
     }
+
     public static boolean isLmq(String lmqMetaData) {
         return lmqMetaData != null && lmqMetaData.startsWith(LMQ_PREFIX);
     }

File: common/src/main/java/org/apache/rocketmq/common/attribute/CQType.java
Patch:
@@ -19,5 +19,6 @@
 
 public enum CQType {
     SimpleCQ,
-    BatchCQ
+    BatchCQ,
+    RocksDBCQ
 }

File: common/src/main/java/org/apache/rocketmq/common/config/ConfigRocksDBStorage.java
Patch:
@@ -203,7 +203,7 @@ private DBOptions createConfigDBOptions() {
             setUseDirectReads(true);
     }
 
-    private static String getDBLogDir() {
+    public static String getDBLogDir() {
         String rootPath = System.getProperty("user.home");
         if (StringUtils.isEmpty(rootPath)) {
             return "";

File: common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java
Patch:
@@ -31,6 +31,7 @@ public class TopicValidator {
     public static final String RMQ_SYS_TRANS_CHECK_MAX_TIME_TOPIC = "TRANS_CHECK_MAX_TIME_TOPIC";
     public static final String RMQ_SYS_SELF_TEST_TOPIC = "SELF_TEST_TOPIC";
     public static final String RMQ_SYS_OFFSET_MOVED_EVENT = "OFFSET_MOVED_EVENT";
+    public static final String RMQ_SYS_ROCKSDB_OFFSET_TOPIC = "CHECKPOINT_TOPIC";
 
     public static final String SYSTEM_TOPIC_PREFIX = "rmq_sys_";
     public static final String SYNC_BROKER_MEMBER_GROUP_PREFIX = SYSTEM_TOPIC_PREFIX + "SYNC_BROKER_MEMBER_";
@@ -55,6 +56,7 @@ public class TopicValidator {
         SYSTEM_TOPIC_SET.add(RMQ_SYS_TRANS_CHECK_MAX_TIME_TOPIC);
         SYSTEM_TOPIC_SET.add(RMQ_SYS_SELF_TEST_TOPIC);
         SYSTEM_TOPIC_SET.add(RMQ_SYS_OFFSET_MOVED_EVENT);
+        SYSTEM_TOPIC_SET.add(RMQ_SYS_ROCKSDB_OFFSET_TOPIC);
 
         NOT_ALLOWED_SEND_TOPIC_SET.add(RMQ_SYS_SCHEDULE_TOPIC);
         NOT_ALLOWED_SEND_TOPIC_SET.add(RMQ_SYS_TRANS_HALF_TOPIC);

File: common/src/main/java/org/apache/rocketmq/common/utils/DataConverter.java
Patch:
@@ -20,7 +20,7 @@
 import java.nio.charset.Charset;
 
 public class DataConverter {
-    public static Charset charset = Charset.forName("UTF-8");
+    public static final Charset CHARSET_UTF8 = Charset.forName("UTF-8");
 
     public static byte[] Long2Byte(Long v) {
         ByteBuffer tmp = ByteBuffer.allocate(8);

File: store/src/main/java/org/apache/rocketmq/store/ha/HAService.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.rocketmq.store.CommitLog;
 import org.apache.rocketmq.store.DefaultMessageStore;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
+import org.rocksdb.RocksDBException;
 
 public interface HAService {
 
@@ -53,7 +54,7 @@ public interface HAService {
      *
      * @param masterEpoch the new masterEpoch
      */
-    default boolean changeToMaster(int masterEpoch) {
+    default boolean changeToMaster(int masterEpoch) throws RocksDBException {
         return false;
     }
 

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAClient.java
Patch:
@@ -432,7 +432,7 @@ public void run() {
     /**
      * Compare the master and slave's epoch file, find consistent point, do truncate.
      */
-    private boolean doTruncate(List<EpochEntry> masterEpochEntries, long masterEndOffset) throws IOException {
+    private boolean doTruncate(List<EpochEntry> masterEpochEntries, long masterEndOffset) throws Exception {
         if (this.epochCache.getEntrySize() == 0) {
             // If epochMap is empty, means the broker is a new replicas
             LOGGER.info("Slave local epochCache is empty, skip truncate log");

File: store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreTest.java
Patch:
@@ -428,9 +428,10 @@ private String buildMessageBodyByOffset(String message, long i) {
 
     private long getStoreTime(CqUnit cqUnit) {
         try {
-            Method getStoreTime = getDefaultMessageStore().getClass().getDeclaredMethod("getStoreTime", CqUnit.class);
+            Class abstractConsumeQueueStore = getDefaultMessageStore().getQueueStore().getClass().getSuperclass();
+            Method getStoreTime = abstractConsumeQueueStore.getDeclaredMethod("getStoreTime", CqUnit.class);
             getStoreTime.setAccessible(true);
-            return (long) getStoreTime.invoke(getDefaultMessageStore(), cqUnit);
+            return (long) getStoreTime.invoke(getDefaultMessageStore().getQueueStore(), cqUnit);
         } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
             throw new RuntimeException(e);
         }

File: store/src/test/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHATest.java
Patch:
@@ -41,6 +41,7 @@
 import org.junit.Assume;
 import org.junit.Ignore;
 import org.junit.Test;
+import org.rocksdb.RocksDBException;
 
 import java.io.File;
 import java.net.InetAddress;
@@ -180,7 +181,7 @@ public void init(int mappedFileSize, boolean allAckInSyncStateSet) throws Except
 
     private boolean changeMasterAndPutMessage(DefaultMessageStore master, MessageStoreConfig masterConfig,
         DefaultMessageStore slave, long slaveId, MessageStoreConfig slaveConfig, int epoch, String masterHaAddress,
-        int totalPutMessageNums) {
+        int totalPutMessageNums) throws RocksDBException {
 
         boolean flag = true;
         // Change role

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PeekMessageProcessor.java
Patch:
@@ -129,8 +129,7 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
         }
         int randomQ = random.nextInt(100);
         int reviveQid = randomQ % this.brokerController.getBrokerConfig().getReviveQueueNum();
-        int commercialSizePerMsg = this.brokerController.getBrokerConfig().getCommercialSizePerMsg();
-        GetMessageResult getMessageResult = new GetMessageResult(commercialSizePerMsg);
+        GetMessageResult getMessageResult = new GetMessageResult(requestHeader.getMaxMsgNums());
         boolean needRetry = randomQ % 5 == 0;
         long popTime = System.currentTimeMillis();
         long restNum = 0;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java
Patch:
@@ -347,8 +347,7 @@ public RemotingCommand processRequest(final ChannelHandlerContext ctx, RemotingC
             reviveQid = (int) Math.abs(ckMessageNumber.getAndIncrement() % this.brokerController.getBrokerConfig().getReviveQueueNum());
         }
 
-        int commercialSizePerMsg = this.brokerController.getBrokerConfig().getCommercialSizePerMsg();
-        GetMessageResult getMessageResult = new GetMessageResult(commercialSizePerMsg);
+        GetMessageResult getMessageResult = new GetMessageResult(requestHeader.getMaxMsgNums());
         ExpressionMessageFilter finalMessageFilter = messageFilter;
         StringBuilder finalOrderCountInfo = orderCountInfo;
 

File: common/src/main/java/org/apache/rocketmq/common/constant/LoggerName.java
Patch:
@@ -21,6 +21,7 @@ public class LoggerName {
     public static final String NAMESRV_LOGGER_NAME = "RocketmqNamesrv";
     public static final String NAMESRV_CONSOLE_LOGGER_NAME = "RocketmqNamesrvConsole";
     public static final String CONTROLLER_LOGGER_NAME = "RocketmqController";
+    public static final String CONTROLLER_CONSOLE_NAME = "RocketmqControllerConsole";
     public static final String NAMESRV_WATER_MARK_LOGGER_NAME = "RocketmqNamesrvWaterMark";
     public static final String BROKER_LOGGER_NAME = "RocketmqBroker";
     public static final String BROKER_CONSOLE_NAME = "RocketmqConsole";

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -580,7 +580,7 @@ public long getConfirmOffset() {
                     return this.defaultMessageStore.getMaxPhyOffset();
                 }
                 // First time it will compute the confirmOffset.
-                if (this.confirmOffset <= 0) {
+                if (this.confirmOffset < 0) {
                     setConfirmOffset(((AutoSwitchHAService) this.defaultMessageStore.getHaService()).computeConfirmOffset());
                     log.info("Init the confirmOffset to {}.", this.confirmOffset);
                 }

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/ResponseCode.java
Patch:
@@ -99,6 +99,8 @@ public class ResponseCode extends RemotingSysResponseCode {
     public static final int RPC_SEND_TO_CHANNEL_FAILED = -1004;
     public static final int RPC_TIME_OUT = -1006;
 
+    public static final int GO_AWAY = 1500;
+
     /**
      * Controller response code
      */

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
Patch:
@@ -595,6 +595,7 @@ private void rePutCK(PopCheckPoint oldCK, Pair<Long, Boolean> pair) {
         newCk.setCId(oldCK.getCId());
         newCk.setTopic(oldCK.getTopic());
         newCk.setQueueId(oldCK.getQueueId());
+        newCk.setBrokerName(oldCK.getBrokerName());
         newCk.addDiff(0);
         MessageExtBrokerInner ckMsg = brokerController.getPopMessageProcessor().buildCkMsg(newCk, queueId);
         brokerController.getMessageStore().putMessage(ckMsg);

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -229,6 +229,8 @@ public void initChannel(SocketChannel ch) throws Exception {
             handler.option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT);
         }
 
+        nettyEventExecutor.start();
+
         TimerTask timerTaskScanResponseTable = new TimerTask() {
             @Override
             public void run(Timeout timeout) {

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/provider/TieredStoreTopicBlackListFilter.java
Patch:
@@ -39,7 +39,7 @@ public boolean filterTopic(String topicName) {
     }
 
     @Override
-    public void addTopicToWhiteList(String topicName) {
+    public void addTopicToBlackList(String topicName) {
         this.topicBlackSet.add(topicName);
     }
 }

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/provider/TieredStoreTopicFilter.java
Patch:
@@ -21,5 +21,5 @@ public interface TieredStoreTopicFilter {
 
     boolean filterTopic(String topicName);
 
-    void addTopicToWhiteList(String topicName);
+    void addTopicToBlackList(String topicName);
 }

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/provider/TieredStoreTopicBlackListFilterTest.java
Patch:
@@ -30,7 +30,7 @@ public void filterTopicTest() {
 
         String topicName = "WhiteTopic";
         Assert.assertFalse(topicFilter.filterTopic(topicName));
-        topicFilter.addTopicToWhiteList(topicName);
+        topicFilter.addTopicToBlackList(topicName);
         Assert.assertTrue(topicFilter.filterTopic(topicName));
     }
 }
\ No newline at end of file

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -1807,7 +1807,7 @@ protected void doRegisterBrokerAll(boolean checkOrderConfig, boolean oneway,
         TopicConfigSerializeWrapper topicConfigWrapper) {
 
         if (shutdown) {
-            BrokerController.LOG.info("BrokerController#doResterBrokerAll: broker has shutdown, no need to register any more.");
+            BrokerController.LOG.info("BrokerController#doRegisterBrokerAll: broker has shutdown, no need to register any more.");
             return;
         }
         List<RegisterBrokerResult> registerBrokerResultList = this.brokerOuterAPI.registerBrokerAll(

File: proxy/src/main/java/org/apache/rocketmq/proxy/ProxyStartup.java
Patch:
@@ -85,6 +85,7 @@ public static void main(String[] args) {
                 .addService(ChannelzService.newInstance(100))
                 .addService(ProtoReflectionService.newInstance())
                 .configInterceptor(accessValidators)
+                .shutdownTime(ConfigurationManager.getProxyConfig().getGrpcShutdownTimeSeconds(), TimeUnit.SECONDS)
                 .build();
             PROXY_START_AND_SHUTDOWN.appendStartAndShutdown(grpcServer);
 

File: common/src/main/java/org/apache/rocketmq/common/MQVersion.java
Patch:
@@ -18,7 +18,7 @@
 
 public class MQVersion {
 
-    public static final int CURRENT_VERSION = Version.V5_1_3.ordinal();
+    public static final int CURRENT_VERSION = Version.V5_1_4.ordinal();
 
     public static String getVersionDesc(int value) {
         int length = Version.values().length;

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/TieredMessageFetcher.java
Patch:
@@ -319,7 +319,7 @@ public CompletableFuture<GetMessageResult> getMessageFromCacheAsync(CompositeQue
         }
 
         // if cache is miss, immediately pull messages
-        LOGGER.warn("TieredMessageFetcher#getMessageFromCacheAsync: cache miss: " +
+        LOGGER.info("TieredMessageFetcher#getMessageFromCacheAsync: cache miss: " +
                 "topic: {}, queue: {}, queue offset: {}, max message num: {}",
             mq.getTopic(), mq.getQueueId(), queueOffset, maxCount);
 

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/TieredMessageStoreTest.java
Patch:
@@ -168,7 +168,7 @@ public void testGetMessageAsync() {
         GetMessageResult result1 = new GetMessageResult();
         result1.setStatus(GetMessageStatus.FOUND);
         GetMessageResult result2 = new GetMessageResult();
-        result2.setStatus(GetMessageStatus.MESSAGE_WAS_REMOVING);
+        result2.setStatus(GetMessageStatus.OFFSET_OVERFLOW_BADLY);
 
         when(fetcher.getMessageAsync(anyString(), anyString(), anyInt(), anyLong(), anyInt(), any())).thenReturn(CompletableFuture.completedFuture(result1));
         when(nextStore.getMessage(anyString(), anyString(), anyInt(), anyLong(), anyInt(), any())).thenReturn(result2);
@@ -188,7 +188,8 @@ public void testGetMessageAsync() {
         properties.setProperty("tieredStorageLevel", "3");
         configuration.update(properties);
         when(nextStore.checkInStoreByConsumeOffset(anyString(), anyInt(), anyLong())).thenReturn(true);
-        Assert.assertSame(result2, store.getMessage("group", mq.getTopic(), mq.getQueueId(), 0, 0, null));
+        Assert.assertEquals(result2.getStatus(),
+            store.getMessage("group", mq.getTopic(), mq.getQueueId(), 0, 0, null).getStatus());
     }
 
     @Test

File: test/src/test/java/org/apache/rocketmq/test/route/CreateAndUpdateTopicIT.java
Patch:
@@ -121,7 +121,7 @@ public void testCreateOrUpdateTopic_EnableSplitRegistration() {
 
         String testTopic = "test-topic-";
 
-        for (int i = 0; i < 1000; i++) {
+        for (int i = 0; i < 10; i++) {
             TopicConfig topicConfig = new TopicConfig(testTopic + i, 8, 8);
             brokerController1.getTopicConfigManager().updateTopicConfig(topicConfig);
             brokerController2.getTopicConfigManager().updateTopicConfig(topicConfig);
@@ -132,7 +132,7 @@ public void testCreateOrUpdateTopic_EnableSplitRegistration() {
         brokerController2.registerBrokerAll(false, true, true);
         brokerController3.registerBrokerAll(false, true, true);
 
-        for (int i = 0; i < 1000; i++) {
+        for (int i = 0; i < 10; i++) {
             TopicRouteData route = MQAdminTestUtils.examineTopicRouteInfo(NAMESRV_ADDR, testTopic + i);
             assertThat(route.getBrokerDatas()).hasSize(3);
             assertThat(route.getQueueDatas()).hasSize(3);

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -827,6 +827,8 @@ public boolean recoverAndInitService() throws CloneNotSupportedException {
 
             initializeResources();
 
+            registerProcessor();
+
             initializeScheduledTasks();
 
             initialTransaction();
@@ -1687,8 +1689,6 @@ public void run() {
                 }
             }
         }, 10, 5, TimeUnit.SECONDS);
-
-        registerProcessor();
     }
 
     protected void scheduleSendHeartbeat() {

File: broker/src/main/java/org/apache/rocketmq/broker/client/ClientHousekeepingService.java
Patch:
@@ -18,11 +18,11 @@
 
 import io.netty.channel.Channel;
 import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
+import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
@@ -35,7 +35,7 @@ public class ClientHousekeepingService implements ChannelEventListener {
 
     public ClientHousekeepingService(final BrokerController brokerController) {
         this.brokerController = brokerController;
-        scheduledExecutorService = new ScheduledThreadPoolExecutor(1,
+        scheduledExecutorService = ThreadUtils.newScheduledThreadPool(1,
             new ThreadFactoryImpl("ClientHousekeepingScheduledThread", brokerController.getBrokerIdentity()));
     }
 

File: broker/src/main/java/org/apache/rocketmq/broker/client/DefaultConsumerIdsChangeListener.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.AbstractBrokerRunnable;
@@ -37,7 +36,7 @@ public class DefaultConsumerIdsChangeListener implements ConsumerIdsChangeListen
     private final BrokerController brokerController;
     private final int cacheSize = 8096;
 
-    private final ScheduledExecutorService scheduledExecutorService =  new ScheduledThreadPoolExecutor(1,
+    private final ScheduledExecutorService scheduledExecutorService =  ThreadUtils.newScheduledThreadPool(1,
         ThreadUtils.newGenericThreadFactory("DefaultConsumerIdsChangeListener", true));
 
     private ConcurrentHashMap<String,List<Channel>> consumerChannelMap = new ConcurrentHashMap<>(cacheSize);

File: broker/src/main/java/org/apache/rocketmq/broker/dledger/DLedgerRoleChangeHandler.java
Patch:
@@ -21,12 +21,12 @@
 import io.openmessaging.storage.dledger.MemberState;
 import io.openmessaging.storage.dledger.utils.DLedgerUtils;
 import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
+import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.DefaultMessageStore;
@@ -49,7 +49,7 @@ public DLedgerRoleChangeHandler(BrokerController brokerController, DefaultMessag
         this.messageStore = messageStore;
         this.dLedgerCommitLog = (DLedgerCommitLog) messageStore.getCommitLog();
         this.dLegerServer = dLedgerCommitLog.getdLedgerServer();
-        this.executorService = Executors.newSingleThreadExecutor(
+        this.executorService = ThreadUtils.newSingleThreadExecutor(
             new ThreadFactoryImpl("DLegerRoleChangeHandler_", brokerController.getBrokerIdentity()));
     }
 

File: broker/src/main/java/org/apache/rocketmq/broker/failover/EscapeBridge.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.LinkedBlockingQueue;
-import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.broker.BrokerController;
@@ -43,6 +42,7 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.message.MessageQueue;
+import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.exception.RemotingException;
@@ -72,7 +72,7 @@ public EscapeBridge(BrokerController brokerController) {
     public void start() throws Exception {
         if (brokerController.getBrokerConfig().isEnableSlaveActingMaster() && brokerController.getBrokerConfig().isEnableRemoteEscape()) {
             final BlockingQueue<Runnable> asyncSenderThreadPoolQueue = new LinkedBlockingQueue<>(50000);
-            this.defaultAsyncSenderExecutor = new ThreadPoolExecutor(
+            this.defaultAsyncSenderExecutor = ThreadUtils.newThreadPoolExecutor(
                 Runtime.getRuntime().availableProcessors(),
                 Runtime.getRuntime().availableProcessors(),
                 1000 * 60,

File: broker/src/main/java/org/apache/rocketmq/broker/latency/BrokerFastFailure.java
Patch:
@@ -18,13 +18,14 @@
 
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.AbstractBrokerRunnable;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
+import org.apache.rocketmq.common.future.FutureTaskExt;
+import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.netty.RequestTask;
@@ -43,7 +44,7 @@ public class BrokerFastFailure {
 
     public BrokerFastFailure(final BrokerController brokerController) {
         this.brokerController = brokerController;
-        this.scheduledExecutorService = new ScheduledThreadPoolExecutor(1,
+        this.scheduledExecutorService = ThreadUtils.newScheduledThreadPool(1,
             new ThreadFactoryImpl("BrokerFastFailureScheduledThread", true,
                 brokerController == null ? null : brokerController.getBrokerConfig()));
     }

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicRouteInfoManager.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
-import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.locks.Lock;
@@ -36,6 +35,7 @@
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageQueue;
+import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.exception.RemotingException;
@@ -66,7 +66,7 @@ public TopicRouteInfoManager(BrokerController brokerController) {
     }
 
     public void start() {
-        this.scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("TopicRouteInfoManagerScheduledThread"));
+        this.scheduledExecutorService = ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("TopicRouteInfoManagerScheduledThread"));
 
         this.scheduledExecutorService.scheduleAtFixedRate(() -> {
             try {

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/AbstractTransactionalMessageCheckListener.java
Patch:
@@ -19,14 +19,14 @@
 import io.netty.channel.Channel;
 import java.util.concurrent.ArrayBlockingQueue;
 import java.util.concurrent.ExecutorService;
-import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy;
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
+import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.header.CheckTransactionStateRequestHeader;
@@ -97,7 +97,7 @@ public void shutDown() {
 
     public synchronized void initExecutorService() {
         if (executorService == null) {
-            executorService = new ThreadPoolExecutor(2, 5, 100, TimeUnit.SECONDS, new ArrayBlockingQueue<>(2000),
+            executorService = ThreadUtils.newThreadPoolExecutor(2, 5, 100, TimeUnit.SECONDS, new ArrayBlockingQueue<>(2000),
                 new ThreadFactoryImpl("Transaction-msg-check-thread", brokerController.getBrokerIdentity()), new CallerRunsPolicy());
         }
     }

File: broker/src/test/java/org/apache/rocketmq/broker/BrokerControllerTest.java
Patch:
@@ -23,9 +23,9 @@
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
 
-import org.apache.rocketmq.broker.latency.FutureTaskExt;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.UtilAll;
+import org.apache.rocketmq.common.future.FutureTaskExt;
 import org.apache.rocketmq.remoting.netty.NettyClientConfig;
 import org.apache.rocketmq.remoting.netty.NettyServerConfig;
 import org.apache.rocketmq.remoting.netty.RequestTask;

File: broker/src/test/java/org/apache/rocketmq/broker/latency/BrokerFastFailureTest.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
+import org.apache.rocketmq.common.future.FutureTaskExt;
 import org.apache.rocketmq.remoting.netty.RequestTask;
 import org.junit.Test;
 

File: common/src/main/java/org/apache/rocketmq/common/config/AbstractRocksDBStorage.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.Map;
 import java.util.concurrent.ArrayBlockingQueue;
 import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.Semaphore;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
@@ -33,6 +32,7 @@
 
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
+import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.rocksdb.ColumnFamilyDescriptor;
@@ -82,8 +82,8 @@ public abstract class AbstractRocksDBStorage {
     private volatile boolean closed;
 
     private final Semaphore reloadPermit = new Semaphore(1);
-    private final ScheduledExecutorService reloadScheduler = new ScheduledThreadPoolExecutor(1, new ThreadFactoryImpl("RocksDBStorageReloadService_"));
-    private final ThreadPoolExecutor manualCompactionThread = new ThreadPoolExecutor(
+    private final ScheduledExecutorService reloadScheduler = ThreadUtils.newScheduledThreadPool(1, new ThreadFactoryImpl("RocksDBStorageReloadService_"));
+    private final ThreadPoolExecutor manualCompactionThread = (ThreadPoolExecutor) ThreadUtils.newThreadPoolExecutor(
             1, 1, 1000 * 60, TimeUnit.MILLISECONDS,
             new ArrayBlockingQueue(1),
             new ThreadFactoryImpl("RocksDBManualCompactionService_"),

File: common/src/main/java/org/apache/rocketmq/common/thread/FutureTaskExtThreadPoolExecutor.java
Patch:
@@ -29,7 +29,8 @@ public class FutureTaskExtThreadPoolExecutor extends ThreadPoolExecutor {
 
     public FutureTaskExtThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime,
         TimeUnit unit,
-        BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory,
+        BlockingQueue<Runnable> workQueue,
+        ThreadFactory threadFactory,
         RejectedExecutionHandler handler) {
         super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);
     }

File: common/src/main/java/org/apache/rocketmq/common/thread/ThreadPoolMonitor.java
Patch:
@@ -22,12 +22,12 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
-import java.util.concurrent.Executors;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.common.UtilAll;
+import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
@@ -36,7 +36,7 @@ public class ThreadPoolMonitor {
     private static Logger waterMarkLogger = LoggerFactory.getLogger(ThreadPoolMonitor.class);
 
     private static final List<ThreadPoolWrapper> MONITOR_EXECUTOR = new CopyOnWriteArrayList<>();
-    private static final ScheduledExecutorService MONITOR_SCHEDULED = Executors.newSingleThreadScheduledExecutor(
+    private static final ScheduledExecutorService MONITOR_SCHEDULED = ThreadUtils.newSingleThreadScheduledExecutor(
         new ThreadFactoryBuilder().setNameFormat("ThreadPoolMonitor-%d").build()
     );
 
@@ -81,7 +81,7 @@ public static ThreadPoolExecutor createAndMonitor(int corePoolSize,
         String name,
         int queueCapacity,
         List<ThreadPoolStatusMonitor> threadPoolStatusMonitors) {
-        ThreadPoolExecutor executor = new FutureTaskExtThreadPoolExecutor(
+        ThreadPoolExecutor executor = (ThreadPoolExecutor) ThreadUtils.newThreadPoolExecutor(
             corePoolSize,
             maximumPoolSize,
             keepAliveTime,

File: controller/src/main/java/org/apache/rocketmq/controller/impl/heartbeat/DefaultBrokerHeartbeatManager.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.rocketmq.common.ControllerConfig;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
+import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.controller.BrokerHeartbeatManager;
 import org.apache.rocketmq.controller.helper.BrokerLifecycleListener;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
@@ -66,7 +67,7 @@ public void shutdown() {
 
     @Override
     public void initialize() {
-        this.scheduledService = Executors.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("DefaultBrokerHeartbeatManager_scheduledService_"));
+        this.scheduledService = ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("DefaultBrokerHeartbeatManager_scheduledService_"));
         this.executor = Executors.newFixedThreadPool(2, new ThreadFactoryImpl("DefaultBrokerHeartbeatManager_executorService_"));
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/channel/GrpcChannelManager.java
Patch:
@@ -21,13 +21,13 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
-import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
-import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.common.utils.StartAndShutdown;
+import org.apache.rocketmq.common.utils.ThreadUtils;
+import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
@@ -43,7 +43,7 @@ public class GrpcChannelManager implements StartAndShutdown {
     protected final AtomicLong nonceIdGenerator = new AtomicLong(0);
     protected final ConcurrentMap<String /* nonce */, ResultFuture> resultNonceFutureMap = new ConcurrentHashMap<>();
 
-    protected final ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(
+    protected final ScheduledExecutorService scheduledExecutorService = ThreadUtils.newSingleThreadScheduledExecutor(
         new ThreadFactoryImpl("GrpcChannelManager_")
     );
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/RemotingProtocolServer.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.List;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
@@ -33,6 +32,7 @@
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
 import org.apache.rocketmq.common.thread.ThreadPoolStatusMonitor;
 import org.apache.rocketmq.common.utils.StartAndShutdown;
+import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
@@ -178,7 +178,7 @@ public RemotingProtocolServer(MessagingProcessor messagingProcessor, List<Access
             new ThreadPoolHeadSlowTimeMillsMonitor(config.getRemotingWaitTimeMillsInDefaultQueue())
         );
 
-        this.timerExecutor = Executors.newSingleThreadScheduledExecutor(
+        this.timerExecutor = ThreadUtils.newSingleThreadScheduledExecutor(
             new ThreadFactoryBuilder().setNameFormat("RemotingServerScheduler-%d").build()
         );
         this.timerExecutor.scheduleAtFixedRate(this::cleanExpireRequest, 10, 10, TimeUnit.SECONDS);

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/LocalServiceManager.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.rocketmq.proxy.service;
 
-import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.broker.BrokerController;
@@ -28,6 +27,7 @@
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.utils.AbstractStartAndShutdown;
 import org.apache.rocketmq.common.utils.StartAndShutdown;
+import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.service.admin.AdminService;
@@ -58,7 +58,7 @@ public class LocalServiceManager extends AbstractStartAndShutdown implements Ser
     private final MQClientAPIFactory mqClientAPIFactory;
     private final ChannelManager channelManager;
 
-    private final ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(
+    private final ScheduledExecutorService scheduledExecutorService = ThreadUtils.newSingleThreadScheduledExecutor(
         new ThreadFactoryImpl("LocalServiceManagerScheduledThread"));
 
     public LocalServiceManager(BrokerController brokerController, RPCHook rpcHook) {

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -61,7 +61,6 @@
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
-import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
@@ -71,6 +70,7 @@
 import org.apache.rocketmq.common.Pair;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
+import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
@@ -142,7 +142,7 @@ public NettyRemotingClient(final NettyClientConfig nettyClientConfig,
 
         this.publicExecutor = Executors.newFixedThreadPool(publicThreadNums, new ThreadFactoryImpl("NettyClientPublicExecutor_"));
 
-        this.scanExecutor = new ThreadPoolExecutor(4, 10, 60, TimeUnit.SECONDS,
+        this.scanExecutor = ThreadUtils.newThreadPoolExecutor(4, 10, 60, TimeUnit.SECONDS,
             new ArrayBlockingQueue<>(32), new ThreadFactoryImpl("NettyClientScan_thread_"));
 
         if (eventLoopGroup != null) {

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingServer.java
Patch:
@@ -61,6 +61,7 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.utils.BinaryUtil;
 import org.apache.rocketmq.common.utils.NetworkUtil;
+import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
@@ -83,7 +84,6 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
@@ -171,7 +171,7 @@ private ExecutorService buildPublicExecutor(NettyServerConfig nettyServerConfig)
     }
 
     private ScheduledExecutorService buildScheduleExecutor() {
-        return new ScheduledThreadPoolExecutor(1,
+        return ThreadUtils.newScheduledThreadPool(1,
             new ThreadFactoryImpl("NettyServerScheduler_", true),
             new ThreadPoolExecutor.DiscardOldestPolicy());
     }

File: store/src/main/java/org/apache/rocketmq/store/queue/ConsumeQueueStore.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.FutureTask;
 import java.util.concurrent.LinkedBlockingQueue;
-import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.TopicConfig;
@@ -34,6 +33,7 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.QueueTypeUtils;
+import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.CommitLog;
@@ -175,7 +175,7 @@ private void queueTypeShouldBe(String topic, CQType cqTypeExpected) {
     }
 
     private ExecutorService buildExecutorService(BlockingQueue<Runnable> blockingQueue, String threadNamePrefix) {
-        return new ThreadPoolExecutor(
+        return ThreadUtils.newThreadPoolExecutor(
             this.messageStore.getBrokerConfig().getRecoverThreadPoolNums(),
             this.messageStore.getBrokerConfig().getRecoverThreadPoolNums(),
             1000 * 60,

File: store/src/main/java/org/apache/rocketmq/store/timer/TimerMessageStore.java
Patch:
@@ -35,7 +35,6 @@
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.ConcurrentSkipListSet;
 import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.Executors;
 import java.util.concurrent.LinkedBlockingDeque;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
@@ -54,6 +53,7 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.topic.TopicValidator;
+import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.ConsumeQueue;
@@ -174,11 +174,11 @@ public TimerMessageStore(final MessageStore messageStore, final MessageStoreConf
         this.lastBrokerRole = storeConfig.getBrokerRole();
 
         if (messageStore instanceof DefaultMessageStore) {
-            scheduler = Executors.newSingleThreadScheduledExecutor(
+            scheduler = ThreadUtils.newSingleThreadScheduledExecutor(
                 new ThreadFactoryImpl("TimerScheduledThread",
                     ((DefaultMessageStore) messageStore).getBrokerIdentity()));
         } else {
-            scheduler = Executors.newSingleThreadScheduledExecutor(
+            scheduler = ThreadUtils.newSingleThreadScheduledExecutor(
                 new ThreadFactoryImpl("TimerScheduledThread"));
         }
 

File: test/src/main/java/org/apache/rocketmq/test/util/StatUtil.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
-
 import javax.annotation.Generated;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -66,6 +66,7 @@
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.NetworkUtil;
 import org.apache.rocketmq.common.BoundaryType;
+import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.RPCHook;
@@ -193,7 +194,7 @@ public void start() throws MQClientException {
 
                 int threadPoolCoreSize = Integer.parseInt(System.getProperty("rocketmq.admin.threadpool.coresize", "20"));
 
-                this.threadPoolExecutor = new ThreadPoolExecutor(threadPoolCoreSize, 100, 5, TimeUnit.MINUTES, new LinkedBlockingQueue<>(), new ThreadFactoryImpl("DefaultMQAdminExtImpl_"));
+                this.threadPoolExecutor = (ThreadPoolExecutor) ThreadUtils.newThreadPoolExecutor(threadPoolCoreSize, 100, 5, TimeUnit.MINUTES, new LinkedBlockingQueue<>(), new ThreadFactoryImpl("DefaultMQAdminExtImpl_"));
 
                 break;
             case RUNNING:

File: controller/src/main/java/org/apache/rocketmq/controller/impl/manager/ReplicasInfoManager.java
Patch:
@@ -104,7 +104,7 @@ public ControllerResult<AlterSyncStateSetResponseHeader> alterSyncStateSet(
         }
 
         // Check master
-        if (!syncStateInfo.getMasterBrokerId().equals(request.getMasterBrokerId())) {
+        if (syncStateInfo.getMasterBrokerId() == null || !syncStateInfo.getMasterBrokerId().equals(request.getMasterBrokerId())) {
             String err = String.format("Rejecting alter syncStateSet request because the current leader is:{%s}, not {%s}",
                     syncStateInfo.getMasterBrokerId(), request.getMasterBrokerId());
             LOGGER.error("{}", err);

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/TieredMessageStore.java
Patch:
@@ -90,6 +90,7 @@ public boolean load() {
         boolean loadNextStore = next.load();
         boolean result = loadFlatFile && loadNextStore;
         if (result) {
+            dispatcher.initScheduleTask();
             dispatcher.start();
         }
         return result;

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageServiceImpl.java
Patch:
@@ -629,7 +629,9 @@ public boolean open() {
 
     @Override
     public void close() {
-
+        if (this.transactionalOpBatchService != null) {
+            this.transactionalOpBatchService.shutdown();
+        }
     }
 
     public Message getOpMessage(int queueId, String moreData) {

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/TieredDispatcher.java
Patch:
@@ -318,8 +318,7 @@ protected void dispatchFlatFile(CompositeQueueFlatFile flatFile) {
                         continue;
                     case FILE_CLOSED:
                         tieredFlatFileManager.destroyCompositeFile(flatFile.getMessageQueue());
-                        logger.info("TieredDispatcher#dispatchFlatFile: file has been close and destroy, " +
-                            "topic: {}, queueId: {}", topic, queueId);
+                        logger.info("File has been closed and destroy, topic: {}, queueId: {}", topic, queueId);
                         return;
                     default:
                         dispatchOffset--;

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/provider/posix/PosixFileSegment.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.rocketmq.tieredstore.common.TieredStoreExecutor;
 import org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsManager;
 import org.apache.rocketmq.tieredstore.provider.TieredFileSegment;
-import org.apache.rocketmq.tieredstore.provider.inputstream.TieredFileSegmentInputStream;
+import org.apache.rocketmq.tieredstore.provider.stream.FileSegmentInputStream;
 import org.apache.rocketmq.tieredstore.util.TieredStoreUtil;
 
 import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.LABEL_FILE_TYPE;
@@ -184,7 +184,7 @@ public CompletableFuture<ByteBuffer> read0(long position, int length) {
 
     @Override
     public CompletableFuture<Boolean> commit0(
-        TieredFileSegmentInputStream inputStream, long position, int length, boolean append) {
+        FileSegmentInputStream inputStream, long position, int length, boolean append) {
 
         Stopwatch stopwatch = Stopwatch.createStarted();
         AttributesBuilder attributesBuilder = newAttributesBuilder()

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/file/TieredFlatFileTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.rocketmq.tieredstore.TieredStoreTestUtil;
 import org.apache.rocketmq.tieredstore.common.FileSegmentType;
 import org.apache.rocketmq.tieredstore.common.TieredMessageStoreConfig;
+import org.apache.rocketmq.tieredstore.common.TieredStoreExecutor;
 import org.apache.rocketmq.tieredstore.metadata.FileSegmentMetadata;
 import org.apache.rocketmq.tieredstore.metadata.TieredMetadataStore;
 import org.apache.rocketmq.tieredstore.provider.TieredFileSegment;
@@ -55,6 +56,7 @@ public void setUp() throws ClassNotFoundException, NoSuchMethodException {
     public void tearDown() throws IOException {
         TieredStoreTestUtil.destroyMetadataStore();
         TieredStoreTestUtil.destroyTempDir(storePath);
+        TieredStoreExecutor.shutdown();
     }
 
     private List<FileSegmentMetadata> getSegmentMetadataList(TieredMetadataStore metadataStore) {

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/file/TieredIndexFileTest.java
Patch:
@@ -87,5 +87,7 @@ public void testAppendAndQuery() throws IOException, ClassNotFoundException, NoS
 
         indexList = indexFile.queryAsync(mq.getTopic(), "key1", 1000, 1200).join();
         Assert.assertEquals(1, indexList.size());
+
+        indexFile.destroy();
     }
 }

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/provider/memory/MemoryFileSegmentWithoutCheck.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.tieredstore.common.FileSegmentType;
 import org.apache.rocketmq.tieredstore.common.TieredMessageStoreConfig;
-import org.apache.rocketmq.tieredstore.provider.inputstream.TieredFileSegmentInputStream;
+import org.apache.rocketmq.tieredstore.provider.stream.FileSegmentInputStream;
 import org.apache.rocketmq.tieredstore.util.TieredStoreUtil;
 import org.junit.Assert;
 
@@ -46,7 +46,7 @@ public long getSize() {
     }
 
     @Override
-    public CompletableFuture<Boolean> commit0(TieredFileSegmentInputStream inputStream, long position, int length,
+    public CompletableFuture<Boolean> commit0(FileSegmentInputStream inputStream, long position, int length,
         boolean append) {
         try {
             if (blocker != null && !blocker.get()) {

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -529,6 +529,7 @@ public void invokeAsyncImpl(final Channel channel, final RemotingCommand request
                     log.warn("send a request command to channel <{}> failed.", RemotingHelper.parseChannelRemoteAddr(channel));
                 });
             } catch (Exception e) {
+                responseTable.remove(opaque);
                 responseFuture.release();
                 log.warn("send a request command to channel <" + RemotingHelper.parseChannelRemoteAddr(channel) + "> Exception", e);
                 throw new RemotingSendRequestException(RemotingHelper.parseChannelRemoteAddr(channel), e);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/producer/SendMessageActivity.java
Patch:
@@ -382,7 +382,7 @@ public AddressableMessageQueue select(ProxyContext ctx, MessageQueueView message
                     int bucket = Hashing.consistentHash(shardingKey.hashCode(), writeQueues.size());
                     targetMessageQueue = writeQueues.get(bucket);
                 } else {
-                    targetMessageQueue = messageQueueView.getWriteSelector().selectOne(false);
+                    targetMessageQueue = messageQueueView.getWriteSelector().selectOneByPipeline(false);
                 }
                 return targetMessageQueue;
             } catch (Exception e) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/LocalTopicRouteService.java
Patch:
@@ -54,7 +54,7 @@ public LocalTopicRouteService(BrokerController brokerController, MQClientAPIFact
     @Override
     public MessageQueueView getCurrentMessageQueueView(ProxyContext ctx, String topic) throws Exception {
         TopicConfig topicConfig = this.brokerController.getTopicConfigManager().getTopicConfigTable().get(topic);
-        return new MessageQueueView(topic, toTopicRouteData(topicConfig));
+        return new MessageQueueView(topic, toTopicRouteData(topicConfig), null);
     }
 
     @Override

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivityTest.java
Patch:
@@ -93,7 +93,6 @@ public void testReceiveMessagePollingTime() {
             pollTimeCaptor.capture(), anyInt(), any(), anyBoolean(), any(), isNull(), anyLong()))
             .thenReturn(CompletableFuture.completedFuture(new PopResult(PopStatus.NO_NEW_MSG, Collections.emptyList())));
 
-
         ProxyContext context = createContext();
         context.setRemainingMs(1L);
         this.receiveMessageActivity.receiveMessage(
@@ -274,7 +273,7 @@ private Code getResponseCodeFromReceiveMessageResponseList(List<ReceiveMessageRe
     }
 
     @Test
-    public void testReceiveMessageQueueSelector() {
+    public void testReceiveMessageQueueSelector() throws Exception {
         TopicRouteData topicRouteData = new TopicRouteData();
         List<QueueData> queueDatas = new ArrayList<>();
         for (int i = 0; i < 2; i++) {
@@ -298,7 +297,7 @@ public void testReceiveMessageQueueSelector() {
         }
         topicRouteData.setBrokerDatas(brokerDatas);
 
-        MessageQueueView messageQueueView = new MessageQueueView(TOPIC, topicRouteData);
+        MessageQueueView messageQueueView = new MessageQueueView(TOPIC, topicRouteData, null);
         ReceiveMessageActivity.ReceiveMessageQueueSelector selector = new ReceiveMessageActivity.ReceiveMessageQueueSelector("");
 
         AddressableMessageQueue firstSelect = selector.select(ProxyContext.create(), messageQueueView);

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/BaseServiceTest.java
Patch:
@@ -78,7 +78,7 @@ public void before() throws Throwable {
         topicRouteData.setBrokerDatas(Lists.newArrayList(brokerData));
 
         when(this.topicRouteService.getAllMessageQueueView(any(), eq(ERR_TOPIC))).thenThrow(new MQClientException(ResponseCode.TOPIC_NOT_EXIST, ""));
-        when(this.topicRouteService.getAllMessageQueueView(any(), eq(TOPIC))).thenReturn(new MessageQueueView(TOPIC, topicRouteData));
-        when(this.topicRouteService.getAllMessageQueueView(any(), eq(CLUSTER_NAME))).thenReturn(new MessageQueueView(CLUSTER_NAME, topicRouteData));
+        when(this.topicRouteService.getAllMessageQueueView(any(), eq(TOPIC))).thenReturn(new MessageQueueView(TOPIC, topicRouteData, null));
+        when(this.topicRouteService.getAllMessageQueueView(any(), eq(CLUSTER_NAME))).thenReturn(new MessageQueueView(CLUSTER_NAME, topicRouteData, null));
     }
 }

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/sysmessage/HeartbeatSyncerTest.java
Patch:
@@ -132,7 +132,7 @@ public void before() throws Throwable {
             brokerAddr.put(0L, "127.0.0.1:10911");
             brokerData.setBrokerAddrs(brokerAddr);
             topicRouteData.getBrokerDatas().add(brokerData);
-            MessageQueueView messageQueueView = new MessageQueueView("foo", topicRouteData);
+            MessageQueueView messageQueueView = new MessageQueueView("foo", topicRouteData, null);
             when(this.topicRouteService.getAllMessageQueueView(any(), anyString())).thenReturn(messageQueueView);
         }
     }

File: common/src/main/java/org/apache/rocketmq/common/config/AbstractRocksDBStorage.java
Patch:
@@ -385,8 +385,10 @@ public synchronized boolean shutdown() {
                 this.options.close();
             }
             //4. close db.
-            if (db != null) {
+            if (db != null && !this.readOnly) {
                 this.db.syncWal();
+            }
+            if (db != null) {
                 this.db.closeE();
             }
             //5. help gc.

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -80,7 +80,7 @@
 import org.apache.rocketmq.tools.command.message.QueryMsgByUniqueKeySubCommand;
 import org.apache.rocketmq.tools.command.message.QueryMsgTraceByIdSubCommand;
 import org.apache.rocketmq.tools.command.message.SendMessageCommand;
-import org.apache.rocketmq.tools.command.metadata.RocksDBConfigToJsonCommand;
+import org.apache.rocketmq.tools.command.export.ExportMetadataInRocksDBCommand;
 import org.apache.rocketmq.tools.command.namesrv.AddWritePermSubCommand;
 import org.apache.rocketmq.tools.command.namesrv.DeleteKvConfigCommand;
 import org.apache.rocketmq.tools.command.namesrv.GetNamesrvConfigCommand;
@@ -212,7 +212,6 @@ public static void initCommand() {
 
         initCommand(new ClusterListSubCommand());
         initCommand(new TopicListSubCommand());
-        initCommand(new RocksDBConfigToJsonCommand());
 
         initCommand(new UpdateKvConfigCommand());
         initCommand(new DeleteKvConfigCommand());
@@ -257,6 +256,7 @@ public static void initCommand() {
         initCommand(new ExportMetadataCommand());
         initCommand(new ExportConfigsCommand());
         initCommand(new ExportMetricsCommand());
+        initCommand(new ExportMetadataInRocksDBCommand());
 
         initCommand(new HAStatusSubCommand());
 

File: store/src/main/java/org/apache/rocketmq/store/timer/TimerMessageStore.java
Patch:
@@ -222,7 +222,7 @@ public void initService() {
             dequeueGetMessageServices[i] = new TimerDequeueGetMessageService();
         }
 
-        int putThreadNum = Math.max(storeConfig.getTimerGetMessageThreadNum(), 1);
+        int putThreadNum = Math.max(storeConfig.getTimerPutMessageThreadNum(), 1);
         dequeuePutMessageServices = new TimerDequeuePutMessageService[putThreadNum];
         for (int i = 0; i < dequeuePutMessageServices.length; i++) {
             dequeuePutMessageServices[i] = new TimerDequeuePutMessageService();

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/AbstractProcessor.java
Patch:
@@ -27,6 +27,8 @@ public abstract class AbstractProcessor extends AbstractStartAndShutdown {
     protected MessagingProcessor messagingProcessor;
     protected ServiceManager serviceManager;
 
+    protected static final ProxyException EXPIRED_HANDLE_PROXY_EXCEPTION = new ProxyException(ProxyExceptionCode.INVALID_RECEIPT_HANDLE, "receipt handle is expired");
+
     public AbstractProcessor(MessagingProcessor messagingProcessor,
         ServiceManager serviceManager) {
         this.messagingProcessor = messagingProcessor;
@@ -35,7 +37,7 @@ public AbstractProcessor(MessagingProcessor messagingProcessor,
 
     protected void validateReceiptHandle(ReceiptHandle handle) {
         if (handle.isExpired()) {
-            throw new ProxyException(ProxyExceptionCode.INVALID_RECEIPT_HANDLE, "receipt handle is expired");
+            throw EXPIRED_HANDLE_PROXY_EXCEPTION;
         }
     }
 }

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -1733,7 +1733,8 @@ public synchronized void registerIncrementBrokerData(List<TopicConfig> topicConf
                         new TopicConfig(topicConfig.getTopicName(),
                             topicConfig.getReadQueueNums(),
                             topicConfig.getWriteQueueNums(),
-                            this.brokerConfig.getBrokerPermission(), topicConfig.getTopicSysFlag());
+                                topicConfig.getPerm()
+                                        & this.brokerConfig.getBrokerPermission(), topicConfig.getTopicSysFlag());
                 } else {
                     registerTopicConfig = new TopicConfig(topicConfig);
                 }

File: store/src/main/java/org/apache/rocketmq/store/MultiPathMappedFileQueue.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.rocketmq.store;
 
-
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Set;
@@ -113,8 +112,7 @@ public void destroy() {
             mf.destroy(1000 * 3);
         }
         this.mappedFiles.clear();
-        this.flushedWhere = 0;
-
+        this.setFlushedWhere(0);
 
         Set<String> storePathSet = getPaths();
         storePathSet.addAll(getReadonlyPaths());

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ReplyMessageProcessor.java
Patch:
@@ -234,7 +234,7 @@ private void handlePushReplyResult(PushReplyResult pushReplyResult, final Remoti
         } else {
             response.setCode(ResponseCode.SUCCESS);
             response.setRemark(null);
-            //set to zore to avoid client decoding exception
+            //set to zero to avoid client decoding exception
             responseHeader.setMsgId("0");
             responseHeader.setQueueId(queueIdInt);
             responseHeader.setQueueOffset(0L);

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -80,6 +80,7 @@
 import org.apache.rocketmq.tools.command.message.QueryMsgByUniqueKeySubCommand;
 import org.apache.rocketmq.tools.command.message.QueryMsgTraceByIdSubCommand;
 import org.apache.rocketmq.tools.command.message.SendMessageCommand;
+import org.apache.rocketmq.tools.command.metadata.RocksDBConfigToJsonCommand;
 import org.apache.rocketmq.tools.command.namesrv.AddWritePermSubCommand;
 import org.apache.rocketmq.tools.command.namesrv.DeleteKvConfigCommand;
 import org.apache.rocketmq.tools.command.namesrv.GetNamesrvConfigCommand;
@@ -211,6 +212,7 @@ public static void initCommand() {
 
         initCommand(new ClusterListSubCommand());
         initCommand(new TopicListSubCommand());
+        initCommand(new RocksDBConfigToJsonCommand());
 
         initCommand(new UpdateKvConfigCommand());
         initCommand(new DeleteKvConfigCommand());

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -278,7 +278,7 @@ private static void printHelp() {
         System.out.printf("The most commonly used mqadmin commands are:%n");
 
         for (SubCommand cmd : SUB_COMMANDS) {
-            System.out.printf("   %-25s %s%n", cmd.commandName(), cmd.commandDesc());
+            System.out.printf("   %-35s %s%n", cmd.commandName(), cmd.commandDesc());
         }
 
         System.out.printf("%nSee 'mqadmin help <command>' for more information on a specific command.%n");

File: tools/src/main/java/org/apache/rocketmq/tools/command/acl/ClusterAclConfigVersionListSubCommand.java
Patch:
@@ -47,7 +47,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "List all of acl config version information in cluster";
+        return "List all of acl config version information in cluster.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/acl/DeleteAccessConfigSubCommand.java
Patch:
@@ -42,7 +42,7 @@ public String commandAlias() {
 
     @Override
     public String commandDesc() {
-        return "Delete Acl Config Account in broker";
+        return "Delete Acl Config Account in broker.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/acl/GetAccessConfigSubCommand.java
Patch:
@@ -49,7 +49,7 @@ public String commandAlias() {
 
     @Override
     public String commandDesc() {
-        return "List all of acl config information in cluster";
+        return "List all of acl config information in cluster.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/acl/UpdateAccessConfigSubCommand.java
Patch:
@@ -40,7 +40,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Update acl config yaml file in broker";
+        return "Update acl config yaml file in broker.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/acl/UpdateGlobalWhiteAddrSubCommand.java
Patch:
@@ -37,7 +37,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Update global white address for acl Config File in broker";
+        return "Update global white address for acl Config File in broker.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/BrokerConsumeStatsSubCommad.java
Patch:
@@ -61,7 +61,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Fetch broker consume stats data";
+        return "Fetch broker consume stats data.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/BrokerStatusSubCommand.java
Patch:
@@ -44,7 +44,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Fetch broker runtime status data";
+        return "Fetch broker runtime status data.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/CommitLogSetReadAheadSubCommand.java
Patch:
@@ -44,7 +44,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "set read ahead mode for all commitlog files";
+        return "Set read ahead mode for all commitlog files.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/DeleteExpiredCommitLogSubCommand.java
Patch:
@@ -37,7 +37,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Delete expired CommitLog files";
+        return "Delete expired CommitLog files.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/GetBrokerConfigCommand.java
Patch:
@@ -45,7 +45,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Get broker config by cluster or special broker";
+        return "Get broker config by cluster or special broker.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/GetBrokerEpochSubCommand.java
Patch:
@@ -38,7 +38,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Fetch broker epoch entries";
+        return "Fetch broker epoch entries.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/GetColdDataFlowCtrInfoSubCommand.java
Patch:
@@ -47,7 +47,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "get cold data flow ctr info";
+        return "Get cold data flow ctr info.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/RemoveColdDataFlowCtrGroupConfigSubCommand.java
Patch:
@@ -36,7 +36,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "remove consumer from cold ctr config";
+        return "Remove consumer from cold ctr config.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/ResetMasterFlushOffsetSubCommand.java
Patch:
@@ -33,7 +33,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Reset master flush offset in slave";
+        return "Reset master flush offset in slave.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/UpdateBrokerConfigSubCommand.java
Patch:
@@ -37,7 +37,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Update broker's config";
+        return "Update broker's config.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/UpdateColdDataFlowCtrGroupConfigSubCommand.java
Patch:
@@ -39,7 +39,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "addOrUpdate cold data flow ctr group config";
+        return "Add or update cold data flow ctr group config.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/cluster/CLusterSendMsgRTCommand.java
Patch:
@@ -48,7 +48,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "List All clusters Message Send RT";
+        return "List All clusters Message Send RT.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/cluster/ClusterListSubCommand.java
Patch:
@@ -41,7 +41,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "List cluster infos";
+        return "List cluster infos.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/connection/ConsumerConnectionSubCommand.java
Patch:
@@ -39,7 +39,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Query consumer's socket connection, client version and subscription";
+        return "Query consumer's socket connection, client version and subscription.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/connection/ProducerConnectionSubCommand.java
Patch:
@@ -36,7 +36,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Query producer's socket connection and client version";
+        return "Query producer's socket connection and client version.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/consumer/ConsumerStatusSubCommand.java
Patch:
@@ -47,7 +47,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Query consumer's internal data structure";
+        return "Query consumer's internal data structure.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/consumer/GetConsumerConfigSubCommand.java
Patch:
@@ -43,7 +43,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Get consumer config by subscription group name";
+        return "Get consumer config by subscription group name.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/consumer/StartMonitoringSubCommand.java
Patch:
@@ -34,7 +34,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Start Monitoring";
+        return "Start Monitoring.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/consumer/UpdateSubGroupSubCommand.java
Patch:
@@ -41,7 +41,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Update or create subscription group";
+        return "Update or create subscription group.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/container/AddBrokerSubCommand.java
Patch:
@@ -33,7 +33,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Add a broker to specified container";
+        return "Add a broker to specified container.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/container/RemoveBrokerSubCommand.java
Patch:
@@ -33,7 +33,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Remove a broker from specified container";
+        return "Remove a broker from specified container.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/controller/CleanControllerBrokerMetaSubCommand.java
Patch:
@@ -37,7 +37,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Clean metadata of broker on controller";
+        return "Clean metadata of broker on controller.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/controller/GetControllerMetaDataSubCommand.java
Patch:
@@ -34,7 +34,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Get controller cluster's metadata";
+        return "Get controller cluster's metadata.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/controller/ReElectMasterSubCommand.java
Patch:
@@ -37,7 +37,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Re-elect the specified broker as master";
+        return "Re-elect the specified broker as master.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/export/ExportConfigsCommand.java
Patch:
@@ -42,7 +42,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Export configs";
+        return "Export configs.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/export/ExportMetadataCommand.java
Patch:
@@ -46,7 +46,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Export metadata";
+        return "Export metadata.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/export/ExportMetricsCommand.java
Patch:
@@ -56,7 +56,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Export metrics";
+        return "Export metrics.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/ha/GetSyncStateSetSubCommand.java
Patch:
@@ -40,7 +40,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Fetch syncStateSet for target brokers";
+        return "Fetch syncStateSet for target brokers.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/ha/HAStatusSubCommand.java
Patch:
@@ -41,7 +41,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Fetch ha runtime status data";
+        return "Fetch ha runtime status data.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/CheckMsgSendRTCommand.java
Patch:
@@ -40,7 +40,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Check message send response time";
+        return "Check message send response time.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/ConsumeMessageCommand.java
Patch:
@@ -70,7 +70,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Consume message";
+        return "Consume message.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/DumpCompactionLogCommand.java
Patch:
@@ -38,7 +38,7 @@
 public class DumpCompactionLogCommand implements SubCommand {
     @Override
     public String commandDesc() {
-        return "parse compaction log to message";
+        return "Parse compaction log to message.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/PrintMessageByQueueCommand.java
Patch:
@@ -108,7 +108,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Print Message Detail";
+        return "Print Message Detail by queueId.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/PrintMessageSubCommand.java
Patch:
@@ -62,7 +62,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Print Message Detail";
+        return "Print Message Detail.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByIdSubCommand.java
Patch:
@@ -186,7 +186,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Query Message by Id";
+        return "Query Message by Id.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByKeySubCommand.java
Patch:
@@ -36,7 +36,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Query Message by Key";
+        return "Query Message by Key.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByOffsetSubCommand.java
Patch:
@@ -39,7 +39,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Query Message by offset";
+        return "Query Message by offset.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByUniqueKeySubCommand.java
Patch:
@@ -141,7 +141,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Query Message by Unique key";
+        return "Query Message by Unique key.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgTraceByIdSubCommand.java
Patch:
@@ -65,7 +65,7 @@ public Options buildCommandlineOptions(Options options) {
 
     @Override
     public String commandDesc() {
-        return "Query a message trace";
+        return "Query a message trace.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/SendMessageCommand.java
Patch:
@@ -41,7 +41,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Send a message";
+        return "Send a message.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/namesrv/AddWritePermSubCommand.java
Patch:
@@ -34,7 +34,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Add write perm of broker in all name server you defined in the -n param";
+        return "Add write perm of broker in all name server you defined in the -n param.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/namesrv/WipeWritePermSubCommand.java
Patch:
@@ -34,7 +34,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Wipe write perm of broker in all name server you defined in the -n param";
+        return "Wipe write perm of broker in all name server you defined in the -n param.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/offset/SkipAccumulationSubCommand.java
Patch:
@@ -41,7 +41,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Skip all messages that are accumulated (not consumed) currently";
+        return "Skip all messages that are accumulated (not consumed) currently.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/stats/StatsAllSubCommand.java
Patch:
@@ -144,7 +144,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Topic and Consumer tps stats";
+        return "Topic and Consumer tps stats.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/AllocateMQSubCommand.java
Patch:
@@ -41,7 +41,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Allocate MQ";
+        return "Allocate MQ.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicClusterSubCommand.java
Patch:
@@ -34,7 +34,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Get cluster info for topic";
+        return "Get cluster info for topic.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicListSubCommand.java
Patch:
@@ -45,7 +45,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Fetch all topic list from name server";
+        return "Fetch all topic list from name server.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicRouteSubCommand.java
Patch:
@@ -42,7 +42,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Examine topic route info";
+        return "Examine topic route info.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicStatusSubCommand.java
Patch:
@@ -40,7 +40,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Examine topic Status info";
+        return "Examine topic Status info.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateOrderConfCommand.java
Patch:
@@ -36,7 +36,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Create or update or delete order conf";
+        return "Create or update or delete order conf.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateStaticTopicSubCommand.java
Patch:
@@ -48,7 +48,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Update or create static topic, which has fixed number of queues";
+        return "Update or create static topic, which has fixed number of queues.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateTopicPermSubCommand.java
Patch:
@@ -44,7 +44,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Update topic perm";
+        return "Update topic perm.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateTopicSubCommand.java
Patch:
@@ -42,7 +42,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Update or create topic";
+        return "Update or create topic.";
     }
 
     @Override

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingServer.java
Patch:
@@ -502,7 +502,7 @@ protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) {
                     case DISABLED:
                         ctx.close();
                         log.warn("Clients intend to establish an SSL connection while this server is running in SSL disabled mode");
-                        break;
+                        throw new UnsupportedOperationException("The NettyRemotingServer in SSL disabled mode doesn't support ssl client");
                     case PERMISSIVE:
                     case ENFORCING:
                         if (null != sslContext) {

File: store/src/main/java/org/apache/rocketmq/store/AllocateMappedFileService.java
Patch:
@@ -55,7 +55,7 @@ public MappedFile putRequestAndReturnMappedFile(String nextFilePath, String next
         if (this.messageStore.isTransientStorePoolEnable()) {
             if (this.messageStore.getMessageStoreConfig().isFastFailIfNoBufferInStorePool()
                 && BrokerRole.SLAVE != this.messageStore.getMessageStoreConfig().getBrokerRole()) { //if broker is slave, don't fast fail even no buffer in pool
-                canSubmitRequests = this.messageStore.getTransientStorePool().availableBufferNums() - this.requestQueue.size();
+                canSubmitRequests = this.messageStore.remainTransientStoreBufferNumbs() - this.requestQueue.size();
             }
         }
 
@@ -65,7 +65,7 @@ public MappedFile putRequestAndReturnMappedFile(String nextFilePath, String next
         if (nextPutOK) {
             if (canSubmitRequests <= 0) {
                 log.warn("[NOTIFYME]TransientStorePool is not enough, so create mapped file error, " +
-                    "RequestQueueSize : {}, StorePoolSize: {}", this.requestQueue.size(), this.messageStore.getTransientStorePool().availableBufferNums());
+                    "RequestQueueSize : {}, StorePoolSize: {}", this.requestQueue.size(), this.messageStore.remainTransientStoreBufferNumbs());
                 this.requestTable.remove(nextFilePath);
                 return null;
             }
@@ -81,7 +81,7 @@ public MappedFile putRequestAndReturnMappedFile(String nextFilePath, String next
         if (nextNextPutOK) {
             if (canSubmitRequests <= 0) {
                 log.warn("[NOTIFYME]TransientStorePool is not enough, so skip preallocate mapped file, " +
-                    "RequestQueueSize : {}, StorePoolSize: {}", this.requestQueue.size(), this.messageStore.getTransientStorePool().availableBufferNums());
+                    "RequestQueueSize : {}, StorePoolSize: {}", this.requestQueue.size(), this.messageStore.remainTransientStoreBufferNumbs());
                 this.requestTable.remove(nextNextFilePath);
             } else {
                 boolean offerOK = this.requestQueue.offer(nextNextReq);

File: controller/src/main/java/org/apache/rocketmq/controller/metrics/ControllerMetricsManager.java
Patch:
@@ -203,7 +203,7 @@ private void registerMetricsView(SdkMeterProviderBuilder providerBuilder) {
             10 * s
         );
 
-        View latecyView = View.builder()
+        View latencyView = View.builder()
             .setAggregation(Aggregation.explicitBucketHistogram(latencyBuckets))
             .build();
 
@@ -217,8 +217,8 @@ private void registerMetricsView(SdkMeterProviderBuilder providerBuilder) {
             .setName(HISTOGRAM_DLEDGER_OP_LATENCY)
             .build();
 
-        providerBuilder.registerView(requestLatencySelector, latecyView);
-        providerBuilder.registerView(dLedgerOpLatencySelector, latecyView);
+        providerBuilder.registerView(requestLatencySelector, latencyView);
+        providerBuilder.registerView(dLedgerOpLatencySelector, latencyView);
     }
 
     private void initMetric(Meter meter) {

File: store/src/main/java/org/apache/rocketmq/store/metrics/DefaultStoreMetricsManager.java
Patch:
@@ -23,7 +23,7 @@
 import io.opentelemetry.api.metrics.Meter;
 import io.opentelemetry.api.metrics.ObservableLongGauge;
 import io.opentelemetry.sdk.metrics.InstrumentSelector;
-import io.opentelemetry.sdk.metrics.View;
+import io.opentelemetry.sdk.metrics.ViewBuilder;
 import java.io.File;
 import java.util.List;
 import java.util.function.Supplier;
@@ -69,7 +69,7 @@ public class DefaultStoreMetricsManager {
     public static LongCounter timerDequeueTotal = new NopLongCounter();
     public static LongCounter timerEnqueueTotal = new NopLongCounter();
 
-    public static List<Pair<InstrumentSelector, View>> getMetricsView() {
+    public static List<Pair<InstrumentSelector, ViewBuilder>> getMetricsView() {
         return Lists.newArrayList();
     }
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/TieredMessageStore.java
Patch:
@@ -21,7 +21,7 @@
 import io.opentelemetry.api.common.AttributesBuilder;
 import io.opentelemetry.api.metrics.Meter;
 import io.opentelemetry.sdk.metrics.InstrumentSelector;
-import io.opentelemetry.sdk.metrics.View;
+import io.opentelemetry.sdk.metrics.ViewBuilder;
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
@@ -352,8 +352,8 @@ public CompletableFuture<QueryMessageResult> queryMessageAsync(String topic, Str
     }
 
     @Override
-    public List<Pair<InstrumentSelector, View>> getMetricsView() {
-        List<Pair<InstrumentSelector, View>> res = super.getMetricsView();
+    public List<Pair<InstrumentSelector, ViewBuilder>> getMetricsView() {
+        List<Pair<InstrumentSelector, ViewBuilder>> res = super.getMetricsView();
         res.addAll(TieredStoreMetricsManager.getMetricsView());
         return res;
     }

File: tools/src/main/java/org/apache/rocketmq/tools/command/consumer/ConsumerProgressSubCommand.java
Patch:
@@ -54,7 +54,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Query consumers's progress, speed";
+        return "Query consumer's progress, speed.";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/RemappingStaticTopicSubCommand.java
Patch:
@@ -47,7 +47,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Update or create static topic, which has fixed number of queues";
+        return "Remapping static topic.";
     }
 
     @Override

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java
Patch:
@@ -522,7 +522,7 @@ public int addWritePermOfBrokerByLock(final String brokerName) {
                 this.lock.writeLock().unlock();
             }
         } catch (Exception e) {
-            log.error("wipeWritePermOfBrokerByLock Exception", e);
+            log.error("addWritePermOfBrokerByLock Exception", e);
         }
         return 0;
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java
Patch:
@@ -165,7 +165,7 @@ public class ProxyConfig implements ConfigFile {
     private int subscriptionGroupConfigCacheExpiredInSeconds = 20;
     private int subscriptionGroupConfigCacheMaxNum = 20000;
     private int metadataThreadPoolNums = 3;
-    private int metadataThreadPoolQueueCapacity = 1000;
+    private int metadataThreadPoolQueueCapacity = 100000;
 
     private int transactionHeartbeatThreadPoolNums = 20;
     private int transactionHeartbeatThreadPoolQueueCapacity = 200;

File: acl/src/test/java/org/apache/rocketmq/acl/plain/PlainAccessValidatorTest.java
Patch:
@@ -56,11 +56,8 @@
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
-// Ignore this test case as it is currently unable to pass on ubuntu workflow
-@Ignore
 public class PlainAccessValidatorTest {
 
     private PlainAccessValidator plainAccessValidator;

File: acl/src/test/java/org/apache/rocketmq/acl/plain/PlainPermissionManagerTest.java
Patch:
@@ -29,7 +29,6 @@
 import org.assertj.core.util.Lists;
 import org.junit.Assert;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import java.io.File;
@@ -42,8 +41,6 @@
 import java.util.Map;
 import java.util.Set;
 
-// Ignore this test case as it is currently unable to pass on ubuntu workflow
-@Ignore
 public class PlainPermissionManagerTest {
 
     PlainPermissionManager plainPermissionManager;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/ResponseBuilder.java
Patch:
@@ -92,7 +92,7 @@ public Status buildStatus(Throwable t) {
     public Status buildStatus(Code code, String message) {
         return Status.newBuilder()
             .setCode(code)
-            .setMessage(message)
+            .setMessage(message != null ? message : code.name())
             .build();
     }
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/TieredDispatcher.java
Patch:
@@ -279,6 +279,9 @@ protected void dispatchFlatFile(CompositeQueueFlatFile flatFile) {
             long upperBound = Math.min(dispatchOffset + maxCount, maxOffsetInQueue);
             ConsumeQueue consumeQueue = (ConsumeQueue) defaultStore.getConsumeQueue(topic, queueId);
 
+            logger.debug("DispatchFlatFile race, topic={}, queueId={}, cq range={}-{}, dispatch offset={}-{}",
+                topic, queueId, minOffsetInQueue, maxOffsetInQueue, dispatchOffset, upperBound - 1);
+
             for (; dispatchOffset < upperBound; dispatchOffset++) {
                 // get consume queue
                 SelectMappedBufferResult cqItem = consumeQueue.getIndexBuffer(dispatchOffset);

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/TieredMessageStore.java
Patch:
@@ -147,7 +147,7 @@ public CompletableFuture<GetMessageResult> getMessageAsync(String group, String
         int queueId, long offset, int maxMsgNums, MessageFilter messageFilter) {
 
         if (!viaTieredStorage(topic, queueId, offset, maxMsgNums)) {
-            logger.debug("GetMessageAsync from next store topic: {}, queue: {}, offset: {}", topic, queueId, offset);
+            logger.trace("GetMessageAsync from next store topic: {}, queue: {}, offset: {}", topic, queueId, offset);
             return next.getMessageAsync(group, topic, queueId, offset, maxMsgNums, messageFilter);
         }
 

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/TieredMessageFetcherTest.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.concurrent.TimeUnit;
 import org.apache.commons.lang3.SystemUtils;
 import org.apache.commons.lang3.tuple.Triple;
+import org.apache.rocketmq.common.BoundaryType;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.store.DispatchRequest;
 import org.apache.rocketmq.store.GetMessageResult;
@@ -40,7 +41,6 @@
 import org.apache.rocketmq.tieredstore.util.MessageBufferUtil;
 import org.apache.rocketmq.tieredstore.util.MessageBufferUtilTest;
 import org.apache.rocketmq.tieredstore.util.TieredStoreUtil;
-import org.apache.rocketmq.common.BoundaryType;
 import org.awaitility.Awaitility;
 import org.junit.After;
 import org.junit.Assert;

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/file/CompositeQueueFlatFileTest.java
Patch:
@@ -119,7 +119,7 @@ public void testAppendConsumeQueue() {
         Assert.assertEquals(AppendResult.SUCCESS, result);
 
         file.commit(true);
-        file.persistMetadata();
+        file.flushMetadata();
 
         QueueMetadata queueMetadata = metadataStore.getQueue(mq);
         Assert.assertEquals(53, queueMetadata.getMaxOffset());

File: example/src/main/java/org/apache/rocketmq/example/quickstart/Consumer.java
Patch:
@@ -49,7 +49,8 @@ public static void main(String[] args) throws MQClientException {
          * }
          * </pre>
          */
-        consumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);
+        // Uncomment the following line while debugging, namesrvAddr should be set to your local address
+        // consumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);
 
         /*
          * Specify where to start in case the specific consumer group is a brand-new one.

File: example/src/main/java/org/apache/rocketmq/example/quickstart/Producer.java
Patch:
@@ -54,7 +54,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
          * </pre>
          */
         // Uncomment the following line while debugging, namesrvAddr should be set to your local address
-        producer.setNamesrvAddr(DEFAULT_NAMESRVADDR);
+        // producer.setNamesrvAddr(DEFAULT_NAMESRVADDR);
 
         /*
          * Launch the instance.

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AckMessageProcessor.java
Patch:
@@ -308,7 +308,6 @@ private void appendAck(final AckMessageRequestHeader requestHeader, final BatchA
                 && putMessageResult.getPutMessageStatus() != PutMessageStatus.SLAVE_NOT_AVAILABLE) {
             POP_LOGGER.error("put ack msg error:" + putMessageResult);
         }
-        System.out.printf("put ack to store %s", ackMsg);
         PopMetricsManager.incPopReviveAckPutCount(ackMsg, putMessageResult.getPutMessageStatus());
         brokerController.getPopInflightMessageCounter().decrementInFlightMessageNum(topic, consumeGroup, popTime, qId, ackCount);
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/TopicRouteService.java
Patch:
@@ -133,7 +133,7 @@ protected static boolean isTopicRouteValid(TopicRouteData routeData) {
     protected MessageQueueView buildMessageQueueView(String topic, TopicRouteData topicRouteData) {
         if (isTopicRouteValid(topicRouteData)) {
             MessageQueueView tmp = new MessageQueueView(topic, topicRouteData);
-            log.info("load topic route from namesrv. topic: {}, queue: {}", topic, tmp);
+            log.debug("load topic route from namesrv. topic: {}, queue: {}", topic, tmp);
             return tmp;
         }
         return MessageQueueView.WRAPPED_EMPTY_QUEUE;

File: acl/src/test/java/org/apache/rocketmq/acl/plain/PlainAccessValidatorTest.java
Patch:
@@ -56,8 +56,11 @@
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 
+// Ignore this test case as it is currently unable to pass on ubuntu workflow
+@Ignore
 public class PlainAccessValidatorTest {
 
     private PlainAccessValidator plainAccessValidator;

File: acl/src/test/java/org/apache/rocketmq/acl/plain/PlainPermissionManagerTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.assertj.core.util.Lists;
 import org.junit.Assert;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import java.io.File;
@@ -41,6 +42,8 @@
 import java.util.Map;
 import java.util.Set;
 
+// Ignore this test case as it is currently unable to pass on ubuntu workflow
+@Ignore
 public class PlainPermissionManagerTest {
 
     PlainPermissionManager plainPermissionManager;

File: broker/src/main/java/org/apache/rocketmq/broker/schedule/ScheduleMessageService.java
Patch:
@@ -92,7 +92,7 @@ public ScheduleMessageService(final BrokerController brokerController) {
         this.brokerController = brokerController;
         this.enableAsyncDeliver = brokerController.getMessageStoreConfig().isEnableScheduleAsyncDeliver();
         scheduledPersistService = new ScheduledThreadPoolExecutor(1,
-                new ThreadFactoryImpl("ScheduleMessageServicePersistThread", true, brokerController.getBrokerConfig()));
+            new ThreadFactoryImpl("ScheduleMessageServicePersistThread", true, brokerController.getBrokerConfig()));
     }
 
     public static int queueId2DelayLevel(final int queueId) {
@@ -169,7 +169,7 @@ public void shutdown() {
         ThreadUtils.shutdown(scheduledPersistService);
     }
 
-    public void stop() {
+    public boolean stop() {
         if (this.started.compareAndSet(true, false) && null != this.deliverExecutorService) {
             this.deliverExecutorService.shutdown();
             try {
@@ -193,6 +193,7 @@ public void stop() {
 
             this.persist();
         }
+        return true;
     }
 
     public boolean isStarted() {

File: broker/src/test/java/org/apache/rocketmq/broker/subscription/ForbiddenTest.java
Patch:
@@ -15,12 +15,11 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.broker.substription;
+package org.apache.rocketmq.broker.subscription;
 
 import static org.junit.Assert.assertEquals;
 
 import org.apache.rocketmq.broker.BrokerController;
-import org.apache.rocketmq.broker.subscription.SubscriptionGroupManager;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.remoting.netty.NettyClientConfig;
 import org.apache.rocketmq.remoting.netty.NettyServerConfig;

File: common/src/main/java/org/apache/rocketmq/common/constant/LoggerName.java
Patch:
@@ -51,4 +51,5 @@ public class LoggerName {
     public static final String PROXY_LOGGER_NAME = "RocketmqProxy";
     public static final String PROXY_WATER_MARK_LOGGER_NAME = "RocketmqProxyWatermark";
     public static final String ROCKETMQ_COLDCTR_LOGGER_NAME = "RocketmqColdCtr";
+    public static final String ROCKSDB_LOGGER_NAME = "RocketmqRocksDB";
 }

File: example/src/main/java/org/apache/rocketmq/example/quickstart/Consumer.java
Patch:
@@ -49,8 +49,7 @@ public static void main(String[] args) throws MQClientException {
          * }
          * </pre>
          */
-        // Uncomment the following line while debugging, namesrvAddr should be set to your local address
-//        consumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);
+        consumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);
 
         /*
          * Specify where to start in case the specific consumer group is a brand-new one.

File: common/src/main/java/org/apache/rocketmq/common/attribute/TopicMessageType.java
Patch:
@@ -27,15 +27,16 @@ public enum TopicMessageType {
     NORMAL("NORMAL"),
     FIFO("FIFO"),
     DELAY("DELAY"),
-    TRANSACTION("TRANSACTION");
+    TRANSACTION("TRANSACTION"),
+    MIXED("MIXED");
 
     private final String value;
     TopicMessageType(String value) {
         this.value = value;
     }
 
     public static Set<String> topicMessageTypeSet() {
-        return Sets.newHashSet(UNSPECIFIED.value, NORMAL.value, FIFO.value, DELAY.value, TRANSACTION.value);
+        return Sets.newHashSet(UNSPECIFIED.value, NORMAL.value, FIFO.value, DELAY.value, TRANSACTION.value, MIXED.value);
     }
 
     public String getValue() {

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/validator/TopicMessageTypeValidator.java
Patch:
@@ -23,8 +23,8 @@ public interface TopicMessageTypeValidator {
     /**
      * Will throw {@link org.apache.rocketmq.proxy.common.ProxyException} if validate failed.
      *
-     * @param topicMessageType Target topic
-     * @param messageType      Message's type
+     * @param expectedType Target topic
+     * @param actualType   Message's type
      */
-    void validate(TopicMessageType topicMessageType, TopicMessageType messageType);
+    void validate(TopicMessageType expectedType, TopicMessageType actualType);
 }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -994,7 +994,7 @@ private RemotingCommand rewriteRequestForStaticTopic(SearchOffsetRequestHeader r
                     continue;
                 }
                 if (mappingDetail.getBname().equals(item.getBname())) {
-                    offset = this.brokerController.getMessageStore().getOffsetInQueueByTime(mappingContext.getTopic(), item.getQueueId(), timestamp);
+                    offset = this.brokerController.getMessageStore().getOffsetInQueueByTime(mappingContext.getTopic(), item.getQueueId(), timestamp, requestHeader.getBoundaryType());
                     if (offset > 0) {
                         offset = item.computeStaticQueueOffsetStrictly(offset);
                         break;
@@ -1045,7 +1045,7 @@ private RemotingCommand searchOffsetByTimestamp(ChannelHandlerContext ctx,
         }
 
         long offset = this.brokerController.getMessageStore().getOffsetInQueueByTime(requestHeader.getTopic(), requestHeader.getQueueId(),
-            requestHeader.getTimestamp());
+            requestHeader.getTimestamp(), requestHeader.getBoundaryType());
 
         responseHeader.setOffset(offset);
 

File: broker/src/test/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessorTest.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.rocketmq.broker.offset.ConsumerOffsetManager;
 import org.apache.rocketmq.broker.schedule.ScheduleMessageService;
 import org.apache.rocketmq.broker.topic.TopicConfigManager;
+import org.apache.rocketmq.common.BoundaryType;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.TopicConfig;
@@ -311,7 +312,7 @@ public void testProcessRequest_UpdateConfigPath() throws RemotingCommandExceptio
     @Test
     public void testSearchOffsetByTimestamp() throws Exception {
         messageStore = mock(MessageStore.class);
-        when(messageStore.getOffsetInQueueByTime(anyString(), anyInt(), anyLong())).thenReturn(Long.MIN_VALUE);
+        when(messageStore.getOffsetInQueueByTime(anyString(), anyInt(), anyLong(), any(BoundaryType.class))).thenReturn(Long.MIN_VALUE);
         when(brokerController.getMessageStore()).thenReturn(messageStore);
         SearchOffsetRequestHeader searchOffsetRequestHeader = new SearchOffsetRequestHeader();
         searchOffsetRequestHeader.setTopic("topic");

File: store/src/main/java/org/apache/rocketmq/store/ConsumeQueue.java
Patch:
@@ -204,13 +204,15 @@ public int getUnitSize() {
         return CQ_STORE_UNIT_SIZE;
     }
 
+    @Deprecated
     @Override
     public long getOffsetInQueueByTime(final long timestamp) {
         MappedFile mappedFile = this.mappedFileQueue.getConsumeQueueMappedFileByTime(timestamp,
             messageStore.getCommitLog(), BoundaryType.LOWER);
         return binarySearchInQueueByTime(mappedFile, timestamp, BoundaryType.LOWER);
     }
 
+    @Override
     public long getOffsetInQueueByTime(final long timestamp, final BoundaryType boundaryType) {
         MappedFile mappedFile = this.mappedFileQueue.getConsumeQueueMappedFileByTime(timestamp,
             messageStore.getCommitLog(), boundaryType);

File: store/src/main/java/org/apache/rocketmq/store/queue/SparseConsumeQueue.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.store.queue;
 
+import org.apache.rocketmq.common.BoundaryType;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.store.MessageStore;
 import org.apache.rocketmq.store.SelectMappedBufferResult;
@@ -148,7 +149,7 @@ public SelectMappedBufferResult getBatchMsgIndexOrNextBuffer(final long msgOffse
             ByteBuffer byteBuffer = sbr.getByteBuffer();
             int left = minOffset.getIndexPos();
             int right = maxOffset.getIndexPos();
-            int mid = binarySearchRight(byteBuffer, left, right, CQ_STORE_UNIT_SIZE, MSG_BASE_OFFSET_INDEX, msgOffset);
+            int mid = binarySearchRight(byteBuffer, left, right, CQ_STORE_UNIT_SIZE, MSG_BASE_OFFSET_INDEX, msgOffset, BoundaryType.LOWER);
             if (mid != -1) {
                 return minOffset.getMappedFile().selectMappedBuffer(mid);
             }

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/MessageStoreFetcher.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.rocketmq.store.GetMessageResult;
 import org.apache.rocketmq.store.MessageFilter;
 import org.apache.rocketmq.store.QueryMessageResult;
-import org.apache.rocketmq.tieredstore.common.BoundaryType;
+import org.apache.rocketmq.common.BoundaryType;
 
 public interface MessageStoreFetcher {
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/TieredMessageFetcher.java
Patch:
@@ -39,7 +39,6 @@
 import org.apache.rocketmq.store.MessageFilter;
 import org.apache.rocketmq.store.QueryMessageResult;
 import org.apache.rocketmq.store.SelectMappedBufferResult;
-import org.apache.rocketmq.tieredstore.common.BoundaryType;
 import org.apache.rocketmq.tieredstore.common.InFlightRequestFuture;
 import org.apache.rocketmq.tieredstore.common.MessageCacheKey;
 import org.apache.rocketmq.tieredstore.common.SelectMappedBufferResultWrapper;
@@ -59,6 +58,7 @@
 import org.apache.rocketmq.tieredstore.util.CQItemBufferUtil;
 import org.apache.rocketmq.tieredstore.util.MessageBufferUtil;
 import org.apache.rocketmq.tieredstore.util.TieredStoreUtil;
+import org.apache.rocketmq.common.BoundaryType;
 
 public class TieredMessageFetcher implements MessageStoreFetcher {
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/TieredMessageStore.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.function.Supplier;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.rocketmq.common.BoundaryType;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.Pair;
 import org.apache.rocketmq.common.PopAckConstants;
@@ -45,7 +46,6 @@
 import org.apache.rocketmq.store.SelectMappedBufferResult;
 import org.apache.rocketmq.store.plugin.AbstractPluginMessageStore;
 import org.apache.rocketmq.store.plugin.MessageStorePluginContext;
-import org.apache.rocketmq.tieredstore.common.BoundaryType;
 import org.apache.rocketmq.tieredstore.common.TieredMessageStoreConfig;
 import org.apache.rocketmq.tieredstore.common.TieredStoreExecutor;
 import org.apache.rocketmq.tieredstore.file.CompositeFlatFile;
@@ -287,6 +287,7 @@ public long getOffsetInQueueByTime(String topic, int queueId, long timestamp) {
         return getOffsetInQueueByTime(topic, queueId, timestamp, BoundaryType.LOWER);
     }
 
+    @Override
     public long getOffsetInQueueByTime(String topic, int queueId, long timestamp, BoundaryType boundaryType) {
         long earliestTimeInNextStore = next.getEarliestMessageTime();
         if (earliestTimeInNextStore <= 0) {

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/CompositeAccess.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.store.DispatchRequest;
 import org.apache.rocketmq.tieredstore.common.AppendResult;
-import org.apache.rocketmq.tieredstore.common.BoundaryType;
+import org.apache.rocketmq.common.BoundaryType;
 
 interface CompositeAccess {
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/CompositeFlatFile.java
Patch:
@@ -37,7 +37,6 @@
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.DispatchRequest;
 import org.apache.rocketmq.tieredstore.common.AppendResult;
-import org.apache.rocketmq.tieredstore.common.BoundaryType;
 import org.apache.rocketmq.tieredstore.common.FileSegmentType;
 import org.apache.rocketmq.tieredstore.common.InFlightRequestFuture;
 import org.apache.rocketmq.tieredstore.common.InFlightRequestKey;
@@ -46,6 +45,7 @@
 import org.apache.rocketmq.tieredstore.util.CQItemBufferUtil;
 import org.apache.rocketmq.tieredstore.util.MessageBufferUtil;
 import org.apache.rocketmq.tieredstore.util.TieredStoreUtil;
+import org.apache.rocketmq.common.BoundaryType;
 
 public class CompositeFlatFile implements CompositeAccess {
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/TieredConsumeQueue.java
Patch:
@@ -21,8 +21,8 @@
 import java.util.concurrent.CompletableFuture;
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.rocketmq.tieredstore.common.AppendResult;
-import org.apache.rocketmq.tieredstore.common.BoundaryType;
 import org.apache.rocketmq.tieredstore.provider.TieredFileSegment;
+import org.apache.rocketmq.common.BoundaryType;
 
 public class TieredConsumeQueue {
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/TieredFlatFile.java
Patch:
@@ -33,7 +33,6 @@
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.tieredstore.common.AppendResult;
-import org.apache.rocketmq.tieredstore.common.BoundaryType;
 import org.apache.rocketmq.tieredstore.common.FileSegmentType;
 import org.apache.rocketmq.tieredstore.exception.TieredStoreErrorCode;
 import org.apache.rocketmq.tieredstore.exception.TieredStoreException;
@@ -42,6 +41,7 @@
 import org.apache.rocketmq.tieredstore.provider.FileSegmentAllocator;
 import org.apache.rocketmq.tieredstore.provider.TieredFileSegment;
 import org.apache.rocketmq.tieredstore.util.TieredStoreUtil;
+import org.apache.rocketmq.common.BoundaryType;
 
 public class TieredFlatFile {
 

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/TieredMessageFetcherTest.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.rocketmq.store.QueryMessageResult;
 import org.apache.rocketmq.store.SelectMappedBufferResult;
 import org.apache.rocketmq.tieredstore.common.AppendResult;
-import org.apache.rocketmq.tieredstore.common.BoundaryType;
 import org.apache.rocketmq.tieredstore.common.SelectMappedBufferResultWrapper;
 import org.apache.rocketmq.tieredstore.common.TieredMessageStoreConfig;
 import org.apache.rocketmq.tieredstore.common.TieredStoreExecutor;
@@ -41,6 +40,7 @@
 import org.apache.rocketmq.tieredstore.util.MessageBufferUtil;
 import org.apache.rocketmq.tieredstore.util.MessageBufferUtilTest;
 import org.apache.rocketmq.tieredstore.util.TieredStoreUtil;
+import org.apache.rocketmq.common.BoundaryType;
 import org.awaitility.Awaitility;
 import org.junit.After;
 import org.junit.Assert;

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/TieredMessageStoreTest.java
Patch:
@@ -37,11 +37,11 @@
 import org.apache.rocketmq.store.SelectMappedBufferResult;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 import org.apache.rocketmq.store.plugin.MessageStorePluginContext;
-import org.apache.rocketmq.tieredstore.common.BoundaryType;
 import org.apache.rocketmq.tieredstore.common.TieredStoreExecutor;
 import org.apache.rocketmq.tieredstore.file.CompositeQueueFlatFile;
 import org.apache.rocketmq.tieredstore.file.TieredFlatFileManager;
 import org.apache.rocketmq.tieredstore.util.TieredStoreUtil;
+import org.apache.rocketmq.common.BoundaryType;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/file/CompositeQueueFlatFileTest.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.rocketmq.store.DispatchRequest;
 import org.apache.rocketmq.tieredstore.TieredStoreTestUtil;
 import org.apache.rocketmq.tieredstore.common.AppendResult;
-import org.apache.rocketmq.tieredstore.common.BoundaryType;
 import org.apache.rocketmq.tieredstore.common.FileSegmentType;
 import org.apache.rocketmq.tieredstore.common.TieredMessageStoreConfig;
 import org.apache.rocketmq.tieredstore.common.TieredStoreExecutor;
@@ -33,6 +32,7 @@
 import org.apache.rocketmq.tieredstore.util.MessageBufferUtil;
 import org.apache.rocketmq.tieredstore.util.MessageBufferUtilTest;
 import org.apache.rocketmq.tieredstore.util.TieredStoreUtil;
+import org.apache.rocketmq.common.BoundaryType;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;

File: common/src/main/java/org/apache/rocketmq/common/constant/PermName.java
Patch:
@@ -62,7 +62,7 @@ public static boolean isValid(final String perm) {
     }
 
     public static boolean isValid(final int perm) {
-        return perm >= PERM_INHERIT && perm < PERM_PRIORITY;
+        return perm >= 0 && perm < PERM_PRIORITY;
     }
     
     public static boolean isPriority(final int perm) {

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/receipt/DefaultReceiptHandleManagerTest.java
Patch:
@@ -45,7 +45,7 @@
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
-import org.apache.rocketmq.proxy.processor.ReceiptHandleProcessor;
+import org.apache.rocketmq.proxy.common.ReceiptHandleGroupKey;
 import org.apache.rocketmq.proxy.service.BaseServiceTest;
 import org.apache.rocketmq.proxy.service.metadata.MetadataService;
 import org.apache.rocketmq.remoting.protocol.LanguageCode;
@@ -445,7 +445,7 @@ public void testRemoveReceiptHandle() {
     public void testClearGroup() {
         Channel channel = PROXY_CONTEXT.getVal(ContextVariable.CHANNEL);
         receiptHandleManager.addReceiptHandle(PROXY_CONTEXT, channel, GROUP, MSG_ID, messageReceiptHandle);
-        receiptHandleManager.clearGroup(new ReceiptHandleProcessor.ReceiptHandleGroupKey(channel, GROUP));
+        receiptHandleManager.clearGroup(new ReceiptHandleGroupKey(channel, GROUP));
         SubscriptionGroupConfig groupConfig = new SubscriptionGroupConfig();
         Mockito.when(metadataService.getSubscriptionGroupConfig(Mockito.any(), Mockito.eq(GROUP))).thenReturn(groupConfig);
         receiptHandleManager.scheduleRenewTask();

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/common/TieredStoreExecutor.java
Patch:
@@ -27,7 +27,7 @@
 
 public class TieredStoreExecutor {
 
-    private static final int QUEUE_CAPACITY = 10000;
+    public static final int QUEUE_CAPACITY = 10000;
 
     // Visible for monitor
     public static BlockingQueue<Runnable> dispatchThreadPoolQueue;

File: broker/src/main/java/org/apache/rocketmq/broker/slave/SlaveSynchronize.java
Patch:
@@ -152,7 +152,7 @@ private void syncDelayOffset() {
                                     .getMessageStoreConfig().getStorePathRootDir());
                     try {
                         MixAll.string2File(delayOffset, fileName);
-                        this.brokerController.getScheduleMessageService().load();
+                        this.brokerController.getScheduleMessageService().loadWhenSyncDelayOffset();
                     } catch (IOException e) {
                         LOGGER.error("Persist file Exception, {}", fileName, e);
                     }

File: broker/src/main/java/org/apache/rocketmq/broker/filter/ExpressionForRetryMessageFilter.java
Patch:
@@ -45,12 +45,12 @@ public boolean isMatchedByCommitLog(ByteBuffer msgBuffer, Map<String, String> pr
             return true;
         }
 
-        boolean isRetryTopic = subscriptionData.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX);
-
-        if (!isRetryTopic && ExpressionType.isTagType(subscriptionData.getExpressionType())) {
+        if (ExpressionType.isTagType(subscriptionData.getExpressionType())) {
             return true;
         }
 
+        boolean isRetryTopic = subscriptionData.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX);
+
         ConsumerFilterData realFilterData = this.consumerFilterData;
         Map<String, String> tempProperties = properties;
         boolean decoded = false;

File: client/src/main/java/org/apache/rocketmq/client/impl/mqclient/MQClientAPIFactory.java
Patch:
@@ -104,6 +104,7 @@ protected MQClientAPIExt createAndStart(String instanceName) {
             rpcHook);
 
         if (!mqClientAPIExt.updateNameServerAddressList()) {
+            mqClientAPIExt.fetchNameServerAddr();
             this.scheduledExecutorService.scheduleAtFixedRate(
                 mqClientAPIExt::fetchNameServerAddr,
                 Duration.ofSeconds(10).toMillis(),

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/protocol/http2proxy/Http2ProxyBackendHandler.java
Patch:
@@ -29,6 +29,8 @@
 public class Http2ProxyBackendHandler extends ChannelInboundHandlerAdapter {
     private static final Logger log = LoggerFactory.getLogger(LoggerName.ROCKETMQ_REMOTING_NAME);
 
+    public static final String HANDLER_NAME = "Http2ProxyBackendHandler";
+
     private final Channel inboundChannel;
 
     public Http2ProxyBackendHandler(Channel inboundChannel) {

File: common/src/main/java/org/apache/rocketmq/common/message/MessageBatch.java
Patch:
@@ -27,7 +27,7 @@ public class MessageBatch extends Message implements Iterable<Message> {
     private static final long serialVersionUID = 621335151046335557L;
     private final List<Message> messages;
 
-    private MessageBatch(List<Message> messages) {
+    public MessageBatch(List<Message> messages) {
         this.messages = messages;
     }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/TopicPublishInfo.java
Patch:
@@ -89,7 +89,7 @@ public MessageQueue selectOneMessageQueue() {
         return this.messageQueueList.get(pos);
     }
 
-    public int getWriteQueueIdByBroker(final String brokerName) {
+    public int getWriteQueueNumsByBroker(final String brokerName) {
         for (int i = 0; i < topicRouteData.getQueueDatas().size(); i++) {
             final QueueData queueData = this.topicRouteData.getQueueDatas().get(i);
             if (queueData.getBrokerName().equals(brokerName)) {

File: client/src/main/java/org/apache/rocketmq/client/latency/MQFaultStrategy.java
Patch:
@@ -69,7 +69,7 @@ public MessageQueue selectOneMessageQueue(final TopicPublishInfo tpInfo, final S
                 }
 
                 final String notBestBroker = latencyFaultTolerance.pickOneAtLeast();
-                int writeQueueNums = tpInfo.getWriteQueueIdByBroker(notBestBroker);
+                int writeQueueNums = tpInfo.getWriteQueueNumsByBroker(notBestBroker);
                 if (writeQueueNums > 0) {
                     final MessageQueue mq = tpInfo.selectOneMessageQueue();
                     if (notBestBroker != null) {

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -756,7 +756,7 @@ public void invokeOneway(String addr, RemotingCommand request, long timeoutMilli
             }
         } else {
             this.closeChannel(addr, channel);
-            throw new RemotingConnectException(channelRemoteAddr);
+            throw new RemotingConnectException(addr);
         }
     }
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/TieredDispatcher.java
Patch:
@@ -352,7 +352,7 @@ public void doRedispatchRequestToWriteMap(AppendResult result, CompositeQueueFla
             case SUCCESS:
                 long offset = MessageBufferUtil.getQueueOffset(message);
                 if (queueOffset != offset) {
-                    logger.error("Message cq offset in commitlog does not meet expectations, " +
+                    logger.warn("Message cq offset in commitlog does not meet expectations, " +
                             "result={}, topic={}, queueId={}, cq offset={}, msg offset={}",
                         AppendResult.OFFSET_INCORRECT, topic, queueId, queueOffset, offset);
                 }

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/TieredFlatFileManager.java
Patch:
@@ -223,7 +223,7 @@ private static void cleanStaticReference() {
     public CompositeQueueFlatFile getOrCreateFlatFileIfAbsent(MessageQueue messageQueue) {
         return queueFlatFileMap.computeIfAbsent(messageQueue, mq -> {
             try {
-                logger.info("TieredFlatFileManager#getOrCreateFlatFileIfAbsent: " +
+                logger.debug("TieredFlatFileManager#getOrCreateFlatFileIfAbsent: " +
                         "try to create new flat file: topic: {}, queueId: {}",
                     messageQueue.getTopic(), messageQueue.getQueueId());
                 return new CompositeQueueFlatFile(tieredFileAllocator, mq);

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/metrics/TieredStoreMetricsConstant.java
Patch:
@@ -38,6 +38,7 @@ public class TieredStoreMetricsConstant {
     public static final String LABEL_OPERATION = "operation";
     public static final String LABEL_SUCCESS = "success";
 
+    public static final String LABEL_PATH = "path";
     public static final String LABEL_TOPIC = "topic";
     public static final String LABEL_GROUP = "group";
     public static final String LABEL_QUEUE_ID = "queue_id";

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/metrics/TieredStoreMetricsManagerTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.rocketmq.tieredstore.TieredMessageFetcher;
 import org.apache.rocketmq.tieredstore.TieredStoreTestUtil;
 import org.apache.rocketmq.tieredstore.common.TieredMessageStoreConfig;
+import org.apache.rocketmq.tieredstore.common.TieredStoreExecutor;
 import org.junit.After;
 import org.junit.Test;
 
@@ -30,16 +31,17 @@ public class TieredStoreMetricsManagerTest {
     public void tearDown() throws IOException {
         TieredStoreTestUtil.destroyCompositeFlatFileManager();
         TieredStoreTestUtil.destroyMetadataStore();
+        TieredStoreExecutor.shutdown();
     }
 
-
     @Test
     public void getMetricsView() {
         TieredStoreMetricsManager.getMetricsView();
     }
 
     @Test
     public void init() {
+        TieredStoreExecutor.init();
         TieredMessageStoreConfig storeConfig = new TieredMessageStoreConfig();
         storeConfig.setTieredBackendServiceProvider("org.apache.rocketmq.tieredstore.provider.memory.MemoryFileSegment");
         TieredStoreMetricsManager.init(OpenTelemetrySdk.builder().build().getMeter(""),

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessor.java
Patch:
@@ -38,7 +38,7 @@ public class ReceiptHandleProcessor extends AbstractProcessor {
     public ReceiptHandleProcessor(MessagingProcessor messagingProcessor, ServiceManager serviceManager) {
         super(messagingProcessor, serviceManager);
         StateEventListener<RenewEvent> eventListener = event -> {
-            ProxyContext context = createContext("RenewMessage");
+            ProxyContext context = createContext(event.getEventType().name());
             MessageReceiptHandle messageReceiptHandle = event.getMessageReceiptHandle();
             ReceiptHandle handle = ReceiptHandle.decode(messageReceiptHandle.getReceiptHandleStr());
             messagingProcessor.changeInvisibleTime(context, handle, messageReceiptHandle.getMessageId(),

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/receipt/DefaultReceiptHandleManager.java
Patch:
@@ -188,7 +188,7 @@ protected CompletableFuture<MessageReceiptHandle> startRenewMessage(MessageRecei
             }
             if (current - messageReceiptHandle.getConsumeTimestamp() < proxyConfig.getRenewMaxTimeMillis()) {
                 CompletableFuture<AckResult> future = new CompletableFuture<>();
-                eventListener.fireEvent(new RenewEvent(messageReceiptHandle, RENEW_POLICY.nextDelayDuration(messageReceiptHandle.getRenewTimes()), future));
+                eventListener.fireEvent(new RenewEvent(messageReceiptHandle, RENEW_POLICY.nextDelayDuration(messageReceiptHandle.getRenewTimes()), RenewEvent.EventType.RENEW, future));
                 future.whenComplete((ackResult, throwable) -> {
                     if (throwable != null) {
                         log.error("error when renew. handle:{}", messageReceiptHandle, throwable);
@@ -218,7 +218,7 @@ protected CompletableFuture<MessageReceiptHandle> startRenewMessage(MessageRecei
                 }
                 RetryPolicy retryPolicy = subscriptionGroupConfig.getGroupRetryPolicy().getRetryPolicy();
                 CompletableFuture<AckResult> future = new CompletableFuture<>();
-                eventListener.fireEvent(new RenewEvent(messageReceiptHandle, retryPolicy.nextDelayDuration(messageReceiptHandle.getReconsumeTimes()), future));
+                eventListener.fireEvent(new RenewEvent(messageReceiptHandle, retryPolicy.nextDelayDuration(messageReceiptHandle.getReconsumeTimes()), RenewEvent.EventType.STOP_RENEW, future));
                 future.whenComplete((ackResult, throwable) -> {
                     if (throwable != null) {
                         log.error("error when nack in renew. handle:{}", messageReceiptHandle, throwable);
@@ -246,7 +246,7 @@ protected void clearGroup(ReceiptHandleProcessor.ReceiptHandleGroupKey key) {
             try {
                 handleGroup.computeIfPresent(msgID, handle, messageReceiptHandle -> {
                     CompletableFuture<AckResult> future = new CompletableFuture<>();
-                    eventListener.fireEvent(new RenewEvent(messageReceiptHandle, proxyConfig.getInvisibleTimeMillisWhenClear(), future));
+                    eventListener.fireEvent(new RenewEvent(messageReceiptHandle, proxyConfig.getInvisibleTimeMillisWhenClear(), RenewEvent.EventType.CLEAR_GROUP, future));
                     return CompletableFuture.completedFuture(null);
                 });
             } catch (Exception e) {

File: common/src/test/java/org/apache/rocketmq/common/utils/ConcurrentHashMapUtilsTest.java
Patch:
@@ -35,5 +35,7 @@ public void computeIfAbsent() {
         assertEquals("2342", value1);
         String value2 = ConcurrentHashMapUtils.computeIfAbsent(map, "123", k -> "2342");
         assertEquals("1111", value2);
+//        map.computeIfAbsent("AaAa", key->map.computeIfAbsent("BBBB",key2->"42"));
+        ConcurrentHashMapUtils.computeIfAbsent(map, "AaAa", key -> map.computeIfAbsent("BBBB", key2 -> "42"));
     }
 }
\ No newline at end of file

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java
Patch:
@@ -591,8 +591,8 @@ private CompletableFuture<Long> popMsgFromQueue(String attemptId, boolean isRetr
                 atomicRestNum.set(result.getMaxOffset() - result.getNextBeginOffset() + atomicRestNum.get());
                 String brokerName = brokerController.getBrokerConfig().getBrokerName();
                 for (SelectMappedBufferResult mapedBuffer : result.getMessageMapedList()) {
-                    // We should not recode buffer for normal topic message
-                    if (!isRetry) {
+                    // We should not recode buffer when popResponseReturnActualRetryTopic is true or topic is not retry topic
+                    if (brokerController.getBrokerConfig().isPopResponseReturnActualRetryTopic() || !isRetry) {
                         getMessageResult.addMessage(mapedBuffer);
                     } else {
                         List<MessageExt> messageExtList = MessageDecoder.decodesBatch(mapedBuffer.getByteBuffer(),

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/CompositeQueueFlatFile.java
Patch:
@@ -64,7 +64,7 @@ public void recoverTopicMetadata() {
         if (queueMetadata.getMaxOffset() < queueMetadata.getMinOffset()) {
             queueMetadata.setMaxOffset(queueMetadata.getMinOffset());
         }
-        this.dispatchOffset = queueMetadata.getMaxOffset();
+        this.dispatchOffset.set(queueMetadata.getMaxOffset());
     }
 
     public void persistMetadata() {

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/file/CompositeQueueFlatFileTest.java
Patch:
@@ -73,8 +73,8 @@ public void testAppendCommitLog() {
         CompositeQueueFlatFile flatFile = new CompositeQueueFlatFile(tieredFileAllocator, mq);
         ByteBuffer message = MessageBufferUtilTest.buildMockedMessageBuffer();
         AppendResult result = flatFile.appendCommitLog(message);
-        Assert.assertEquals(AppendResult.OFFSET_INCORRECT, result);
-        Assert.assertEquals(0L, flatFile.commitLog.getFlatFile().getFileToWrite().getAppendPosition());
+        Assert.assertEquals(AppendResult.SUCCESS, result);
+        Assert.assertEquals(122L, flatFile.commitLog.getFlatFile().getFileToWrite().getAppendPosition());
         Assert.assertEquals(0L, flatFile.commitLog.getFlatFile().getFileToWrite().getCommitPosition());
 
         flatFile = new CompositeQueueFlatFile(tieredFileAllocator, mq);

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/MultiProtocolRemotingServer.java
Patch:
@@ -78,7 +78,7 @@ public void loadSslContext() {
     @Override
     protected ChannelPipeline configChannel(SocketChannel ch) {
         return ch.pipeline()
-            .addLast(this.getDefaultEventExecutorGroup(), HANDSHAKE_HANDLER_NAME, this.getHandshakeHandler())
+            .addLast(this.getDefaultEventExecutorGroup(), HANDSHAKE_HANDLER_NAME, new HandshakeHandler())
             .addLast(this.getDefaultEventExecutorGroup(),
                 new IdleStateHandler(0, 0, nettyServerConfig.getServerChannelMaxIdleTimeSeconds()),
                 new ProtocolNegotiationHandler(this.remotingProtocolHandler)

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java
Patch:
@@ -130,7 +130,7 @@ public void receiveMessage(ProxyContext ctx, ReceiveMessageRequest request,
                     subscriptionData,
                     fifo,
                     new PopMessageResultFilterImpl(maxAttempts),
-                    request.getAttemptId(),
+                    request.hasAttemptId() ? request.getAttemptId() : null,
                     timeRemaining
                 ).thenAccept(popResult -> {
                     if (proxyConfig.isEnableProxyAutoRenew() && request.getAutoRenew()) {

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivityTest.java
Patch:
@@ -57,6 +57,7 @@
 import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.ArgumentMatchers.anyString;
+import static org.mockito.ArgumentMatchers.isNull;
 import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -89,7 +90,7 @@ public void testReceiveMessagePollingTime() {
             .setRequestTimeout(Durations.fromSeconds(3))
             .build());
         when(this.messagingProcessor.popMessage(any(), any(), anyString(), anyString(), anyInt(), anyLong(),
-            pollTimeCaptor.capture(), anyInt(), any(), anyBoolean(), any(), anyString(), anyLong()))
+            pollTimeCaptor.capture(), anyInt(), any(), anyBoolean(), any(), isNull(), anyLong()))
             .thenReturn(CompletableFuture.completedFuture(new PopResult(PopStatus.NO_NEW_MSG, Collections.emptyList())));
 
 
@@ -223,7 +224,6 @@ public void testReceiveMessageIllegalInvisibleTimeTooLarge() {
         assertEquals(Code.ILLEGAL_INVISIBLE_TIME, getResponseCodeFromReceiveMessageResponseList(responseArgumentCaptor.getAllValues()));
     }
 
-
     @Test
     public void testReceiveMessage() {
         StreamObserver<ReceiveMessageResponse> receiveStreamObserver = mock(ServerCallStreamObserver.class);
@@ -245,7 +245,7 @@ public void testReceiveMessage() {
             any(),
             anyBoolean(),
             any(),
-            anyString(),
+            isNull(),
             anyLong())).thenReturn(CompletableFuture.completedFuture(popResult));
 
         this.receiveMessageActivity.receiveMessage(

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServerBuilder.java
Patch:
@@ -50,7 +50,7 @@ public static GrpcServerBuilder newBuilder(ThreadPoolExecutor executor, int port
     protected GrpcServerBuilder(ThreadPoolExecutor executor, int port) {
         serverBuilder = NettyServerBuilder.forPort(port);
 
-        serverBuilder.protocolNegotiator(new OptionalSSLProtocolNegotiator());
+        serverBuilder.protocolNegotiator(new ProxyAndTlsProtocolNegotiator());
 
         // build server
         int bossLoopNum = ConfigurationManager.getProxyConfig().getGrpcBossLoopNum();

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/MultiProtocolRemotingServer.java
Patch:
@@ -20,8 +20,6 @@
 import io.netty.channel.ChannelPipeline;
 import io.netty.channel.socket.SocketChannel;
 import io.netty.handler.timeout.IdleStateHandler;
-import java.io.IOException;
-import java.security.cert.CertificateException;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
@@ -36,6 +34,9 @@
 import org.apache.rocketmq.remoting.netty.NettyServerConfig;
 import org.apache.rocketmq.remoting.netty.TlsSystemConfig;
 
+import java.io.IOException;
+import java.security.cert.CertificateException;
+
 /**
  * support remoting and http2 protocol at one port
  */

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/AckMessageActivityTest.java
Patch:
@@ -47,7 +47,7 @@ public class AckMessageActivityTest extends BaseActivityTest {
     @Before
     public void before() throws Throwable {
         super.before();
-        this.ackMessageActivity = new AckMessageActivity(messagingProcessor, receiptHandleProcessor, grpcClientSettingsManager, grpcChannelManager);
+        this.ackMessageActivity = new AckMessageActivity(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);
     }
 
     @Test

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ChangeInvisibleDurationActivityTest.java
Patch:
@@ -49,7 +49,7 @@ public class ChangeInvisibleDurationActivityTest extends BaseActivityTest {
     @Before
     public void before() throws Throwable {
         super.before();
-        this.changeInvisibleDurationActivity = new ChangeInvisibleDurationActivity(messagingProcessor, receiptHandleProcessor,
+        this.changeInvisibleDurationActivity = new ChangeInvisibleDurationActivity(messagingProcessor,
             grpcClientSettingsManager, grpcChannelManager);
     }
 
@@ -92,7 +92,7 @@ public void testChangeInvisibleDurationActivityWhenHasMappingHandle() throws Thr
         when(this.messagingProcessor.changeInvisibleTime(
             any(), receiptHandleCaptor.capture(), anyString(), anyString(), anyString(), invisibleTimeArgumentCaptor.capture()
         )).thenReturn(CompletableFuture.completedFuture(ackResult));
-        when(receiptHandleProcessor.removeReceiptHandle(any(), any(), anyString(), anyString(), anyString()))
+        when(messagingProcessor.removeReceiptHandle(any(), any(), anyString(), anyString(), anyString()))
             .thenReturn(new MessageReceiptHandle("group", "topic", 0, savedHandleStr, "msgId", 0, 0));
 
         ChangeInvisibleDurationResponse response = this.changeInvisibleDurationActivity.changeInvisibleDuration(

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivityTest.java
Patch:
@@ -74,7 +74,7 @@ public class ReceiveMessageActivityTest extends BaseActivityTest {
     public void before() throws Throwable {
         super.before();
         ConfigurationManager.getProxyConfig().setGrpcClientConsumerMinLongPollingTimeoutMillis(0);
-        this.receiveMessageActivity = new ReceiveMessageActivity(messagingProcessor, receiptHandleProcessor,
+        this.receiveMessageActivity = new ReceiveMessageActivity(messagingProcessor,
             grpcClientSettingsManager, grpcChannelManager);
     }
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/producer/ForwardMessageToDLQActivityTest.java
Patch:
@@ -44,7 +44,7 @@ public class ForwardMessageToDLQActivityTest extends BaseActivityTest {
     @Before
     public void before() throws Throwable {
         super.before();
-        this.forwardMessageToDLQActivity = new ForwardMessageToDLQActivity(messagingProcessor,receiptHandleProcessor, grpcClientSettingsManager, grpcChannelManager);
+        this.forwardMessageToDLQActivity = new ForwardMessageToDLQActivity(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);
     }
 
     @Test
@@ -75,7 +75,7 @@ public void testForwardMessageToDeadLetterQueueWhenHasMappingHandle() throws Thr
             .thenReturn(CompletableFuture.completedFuture(RemotingCommand.createResponseCommand(ResponseCode.SUCCESS, "")));
 
         String savedHandleStr = buildReceiptHandle("topic", System.currentTimeMillis(),3000);
-        when(receiptHandleProcessor.removeReceiptHandle(any(), any(), anyString(), anyString(), anyString()))
+        when(messagingProcessor.removeReceiptHandle(any(), any(), anyString(), anyString(), anyString()))
             .thenReturn(new MessageReceiptHandle("group", "topic", 0, savedHandleStr, "msgId", 0, 0));
 
         ForwardMessageToDeadLetterQueueResponse response = this.forwardMessageToDLQActivity.forwardMessageToDeadLetterQueue(

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ConsumerProcessorTest.java
Patch:
@@ -73,7 +73,6 @@ public class ConsumerProcessorTest extends BaseProcessorTest {
     @Before
     public void before() throws Throwable {
         super.before();
-        ReceiptHandleProcessor receiptHandleProcessor = new ReceiptHandleProcessor(messagingProcessor);
         this.consumerProcessor = new ConsumerProcessor(messagingProcessor, serviceManager, Executors.newCachedThreadPool());
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/DefaultGrpcMessingActivity.java
Patch:
@@ -150,8 +150,7 @@ public CompletableFuture<ChangeInvisibleDurationResponse> changeInvisibleDuratio
     }
 
     @Override
-    public StreamObserver<TelemetryCommand> telemetry(ProxyContext ctx,
-        StreamObserver<TelemetryCommand> responseObserver) {
-        return this.clientActivity.telemetry(ctx, responseObserver);
+    public ContextStreamObserver<TelemetryCommand> telemetry(StreamObserver<TelemetryCommand> responseObserver) {
+        return this.clientActivity.telemetry(responseObserver);
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplication.java
Patch:
@@ -378,17 +378,17 @@ public void changeInvisibleDuration(ChangeInvisibleDurationRequest request,
     @Override
     public StreamObserver<TelemetryCommand> telemetry(StreamObserver<TelemetryCommand> responseObserver) {
         Function<Status, TelemetryCommand> statusResponseCreator = status -> TelemetryCommand.newBuilder().setStatus(status).build();
-        ProxyContext context = createContext();
-        StreamObserver<TelemetryCommand> responseTelemetryCommand = grpcMessingActivity.telemetry(context, responseObserver);
+        ContextStreamObserver<TelemetryCommand> responseTelemetryCommand = grpcMessingActivity.telemetry(responseObserver);
         return new StreamObserver<TelemetryCommand>() {
             @Override
             public void onNext(TelemetryCommand value) {
+                ProxyContext context = createContext();
                 try {
                     validateContext(context);
                     addExecutor(clientManagerThreadPoolExecutor,
                         context,
                         value,
-                        () -> responseTelemetryCommand.onNext(value),
+                        () -> responseTelemetryCommand.onNext(context, value),
                         responseObserver,
                         statusResponseCreator);
                 } catch (Throwable t) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessingActivity.java
Patch:
@@ -69,5 +69,5 @@ CompletableFuture<NotifyClientTerminationResponse> notifyClientTermination(Proxy
     CompletableFuture<ChangeInvisibleDurationResponse> changeInvisibleDuration(ProxyContext ctx,
         ChangeInvisibleDurationRequest request);
 
-    StreamObserver<TelemetryCommand> telemetry(ProxyContext ctx, StreamObserver<TelemetryCommand> responseObserver);
+    ContextStreamObserver<TelemetryCommand> telemetry(StreamObserver<TelemetryCommand> responseObserver);
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ClientProcessor.java
Patch:
@@ -110,7 +110,7 @@ public void registerConsumerIdsChangeListener(ConsumerIdsChangeListener listener
         this.serviceManager.getConsumerManager().appendConsumerIdsChangeListener(listener);
     }
 
-    public ConsumerGroupInfo getConsumerGroupInfo(String consumerGroup) {
+    public ConsumerGroupInfo getConsumerGroupInfo(ProxyContext ctx, String consumerGroup) {
         return this.serviceManager.getConsumerManager().getConsumerGroupInfo(consumerGroup);
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/DefaultMessagingProcessor.java
Patch:
@@ -290,8 +290,8 @@ public void doChannelCloseEvent(String remoteAddr, Channel channel) {
     }
 
     @Override
-    public ConsumerGroupInfo getConsumerGroupInfo(String consumerGroup) {
-        return this.clientProcessor.getConsumerGroupInfo(consumerGroup);
+    public ConsumerGroupInfo getConsumerGroupInfo(ProxyContext ctx, String consumerGroup) {
+        return this.clientProcessor.getConsumerGroupInfo(ctx, consumerGroup);
     }
 
     @Override

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/MessagingProcessor.java
Patch:
@@ -288,7 +288,7 @@ void registerConsumerListener(
 
     void doChannelCloseEvent(String remoteAddr, Channel channel);
 
-    ConsumerGroupInfo getConsumerGroupInfo(String consumerGroup);
+    ConsumerGroupInfo getConsumerGroupInfo(ProxyContext ctx, String consumerGroup);
 
     void addTransactionSubscription(
         ProxyContext ctx,

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/ConsumerManagerActivity.java
Patch:
@@ -83,7 +83,7 @@ protected RemotingCommand getConsumerListByGroup(ChannelHandlerContext ctx, Remo
         ProxyContext context) throws Exception {
         RemotingCommand response = RemotingCommand.createResponseCommand(GetConsumerListByGroupResponseHeader.class);
         GetConsumerListByGroupRequestHeader header = (GetConsumerListByGroupRequestHeader) request.decodeCommandCustomHeader(GetConsumerListByGroupRequestHeader.class);
-        ConsumerGroupInfo consumerGroupInfo = messagingProcessor.getConsumerGroupInfo(header.getConsumerGroup());
+        ConsumerGroupInfo consumerGroupInfo = messagingProcessor.getConsumerGroupInfo(context, header.getConsumerGroup());
         List<String> clientIds = consumerGroupInfo.getAllClientId();
         GetConsumerListByGroupResponseBody body = new GetConsumerListByGroupResponseBody();
         body.setConsumerIdList(clientIds);
@@ -96,7 +96,7 @@ protected RemotingCommand getConsumerConnectionList(ChannelHandlerContext ctx, R
         ProxyContext context) throws Exception {
         RemotingCommand response = RemotingCommand.createResponseCommand(GetConsumerConnectionListRequestHeader.class);
         GetConsumerConnectionListRequestHeader header = (GetConsumerConnectionListRequestHeader) request.decodeCommandCustomHeader(GetConsumerConnectionListRequestHeader.class);
-        ConsumerGroupInfo consumerGroupInfo = messagingProcessor.getConsumerGroupInfo(header.getConsumerGroup());
+        ConsumerGroupInfo consumerGroupInfo = messagingProcessor.getConsumerGroupInfo(context, header.getConsumerGroup());
         if (consumerGroupInfo != null) {
             ConsumerConnection bodydata = new ConsumerConnection();
             bodydata.setConsumeFromWhere(consumerGroupInfo.getConsumeFromWhere());

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/PullMessageActivity.java
Patch:
@@ -41,7 +41,7 @@ protected RemotingCommand processRequest0(ChannelHandlerContext ctx, RemotingCom
         PullMessageRequestHeader requestHeader = (PullMessageRequestHeader) request.decodeCommandCustomHeader(PullMessageRequestHeader.class);
         int sysFlag = requestHeader.getSysFlag();
         if (!PullSysFlag.hasSubscriptionFlag(sysFlag)) {
-            ConsumerGroupInfo consumerInfo = messagingProcessor.getConsumerGroupInfo(requestHeader.getConsumerGroup());
+            ConsumerGroupInfo consumerInfo = messagingProcessor.getConsumerGroupInfo(context, requestHeader.getConsumerGroup());
             if (consumerInfo == null) {
                 return RemotingCommand.buildErrorResponse(ResponseCode.SUBSCRIPTION_NOT_LATEST,
                     "the consumer's subscription not latest");

File: proxy/src/test/java/org/apache/rocketmq/proxy/remoting/activity/PullMessageActivityTest.java
Patch:
@@ -77,7 +77,7 @@ public void setup() throws Exception {
 
     @Test
     public void testPullMessageWithoutSub() throws Exception {
-        when(messagingProcessorMock.getConsumerGroupInfo(eq(group)))
+        when(messagingProcessorMock.getConsumerGroupInfo(any(), eq(group)))
             .thenReturn(consumerGroupInfoMock);
         SubscriptionData subscriptionData = new SubscriptionData();
         subscriptionData.setSubString(subString);
@@ -128,7 +128,7 @@ public void testPullMessageWithoutSub() throws Exception {
 
     @Test
     public void testPullMessageWithSub() throws Exception {
-        when(messagingProcessorMock.getConsumerGroupInfo(eq(group)))
+        when(messagingProcessorMock.getConsumerGroupInfo(any(), eq(group)))
             .thenReturn(consumerGroupInfoMock);
         SubscriptionData subscriptionData = new SubscriptionData();
         subscriptionData.setSubString(subString);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java
Patch:
@@ -133,6 +133,7 @@ public void receiveMessage(ProxyContext ctx, ReceiveMessageRequest request,
                     subscriptionData,
                     fifo,
                     new PopMessageResultFilterImpl(maxAttempts),
+                    request.getAttemptId(),
                     timeRemaining
                 ).thenAccept(popResult -> {
                     if (proxyConfig.isEnableProxyAutoRenew() && request.getAutoRenew()) {
@@ -144,7 +145,7 @@ public void receiveMessage(ProxyContext ctx, ReceiveMessageRequest request,
                                     MessageReceiptHandle messageReceiptHandle =
                                         new MessageReceiptHandle(group, topic, messageExt.getQueueId(), receiptHandle, messageExt.getMsgId(),
                                             messageExt.getQueueOffset(), messageExt.getReconsumeTimes());
-                                    receiptHandleProcessor.addReceiptHandle(ctx, grpcChannelManager.getChannel(ctx.getClientID()), group, messageExt.getMsgId(), receiptHandle, messageReceiptHandle);
+                                    receiptHandleProcessor.addReceiptHandle(ctx, grpcChannelManager.getChannel(ctx.getClientID()), group, messageExt.getMsgId(), messageReceiptHandle);
                                 }
                             }
                         }

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/DefaultMessagingProcessor.java
Patch:
@@ -168,10 +168,11 @@ public CompletableFuture<PopResult> popMessage(
         SubscriptionData subscriptionData,
         boolean fifo,
         PopMessageResultFilter popMessageResultFilter,
+        String attemptId,
         long timeoutMillis
     ) {
         return this.consumerProcessor.popMessage(ctx, queueSelector, consumerGroup, topic, maxMsgNums,
-            invisibleTime, pollTime, initMode, subscriptionData, fifo, popMessageResultFilter, timeoutMillis);
+            invisibleTime, pollTime, initMode, subscriptionData, fifo, popMessageResultFilter, attemptId, timeoutMillis);
     }
 
     @Override

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/MessagingProcessor.java
Patch:
@@ -131,6 +131,7 @@ CompletableFuture<PopResult> popMessage(
         SubscriptionData subscriptionData,
         boolean fifo,
         PopMessageResultFilter popMessageResultFilter,
+        String attemptId,
         long timeoutMillis
     );
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivityTest.java
Patch:
@@ -89,7 +89,7 @@ public void testReceiveMessagePollingTime() {
             .setRequestTimeout(Durations.fromSeconds(3))
             .build());
         when(this.messagingProcessor.popMessage(any(), any(), anyString(), anyString(), anyInt(), anyLong(),
-            pollTimeCaptor.capture(), anyInt(), any(), anyBoolean(), any(), anyLong()))
+            pollTimeCaptor.capture(), anyInt(), any(), anyBoolean(), any(), anyString(), anyLong()))
             .thenReturn(CompletableFuture.completedFuture(new PopResult(PopStatus.NO_NEW_MSG, Collections.emptyList())));
 
 
@@ -245,6 +245,7 @@ public void testReceiveMessage() {
             any(),
             anyBoolean(),
             any(),
+            anyString(),
             anyLong())).thenReturn(CompletableFuture.completedFuture(popResult));
 
         this.receiveMessageActivity.receiveMessage(

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ConsumerProcessorTest.java
Patch:
@@ -124,6 +124,7 @@ public void testPopMessage() throws Throwable {
                 }
                 return PopMessageResultFilter.FilterResult.MATCH;
             },
+            null,
             Duration.ofSeconds(3).toMillis()
         ).get();
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/metrics/TieredStoreMetricsManager.java
Patch:
@@ -259,14 +259,14 @@ public static void init(Meter meter, Supplier<AttributesBuilder> attributesBuild
         cacheCount = meter.gaugeBuilder(GAUGE_CACHE_COUNT)
             .setDescription("Tiered store cache message count")
             .ofLongs()
-            .buildWithCallback(measurement -> measurement.record(fetcher.getReadAheadCache().estimatedSize(), newAttributesBuilder().build()));
+            .buildWithCallback(measurement -> measurement.record(fetcher.getMessageCache().estimatedSize(), newAttributesBuilder().build()));
 
         cacheBytes = meter.gaugeBuilder(GAUGE_CACHE_BYTES)
             .setDescription("Tiered store cache message bytes")
             .setUnit("bytes")
             .ofLongs()
             .buildWithCallback(measurement -> {
-                Optional<Policy.Eviction<MessageCacheKey, SelectMappedBufferResultWrapper>> eviction = fetcher.getReadAheadCache().policy().eviction();
+                Optional<Policy.Eviction<MessageCacheKey, SelectMappedBufferResultWrapper>> eviction = fetcher.getMessageCache().policy().eviction();
                 eviction.ifPresent(resultEviction -> measurement.record(resultEviction.weightedSize().orElse(0), newAttributesBuilder().build()));
             });
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/provider/inputstream/TieredCommitLogInputStream.java
Patch:
@@ -78,7 +78,8 @@ public int read() {
             commitLogOffset += readPosInCurBuffer;
             readPosInCurBuffer = 0;
         }
-        if (readPosInCurBuffer >= MessageBufferUtil.PHYSICAL_OFFSET_POSITION && readPosInCurBuffer < MessageBufferUtil.SYS_FLAG_OFFSET_POSITION) {
+        if (readPosInCurBuffer >= MessageBufferUtil.PHYSICAL_OFFSET_POSITION
+            && readPosInCurBuffer < MessageBufferUtil.SYS_FLAG_OFFSET_POSITION) {
             res = (int) ((commitLogOffset >> (8 * (MessageBufferUtil.SYS_FLAG_OFFSET_POSITION - readPosInCurBuffer - 1))) & 0xff);
             readPosInCurBuffer++;
         } else {

File: store/src/main/java/org/apache/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -381,7 +381,7 @@ public class MessageStoreConfig {
 
     private boolean coldDataFlowControlEnable = false;
     private boolean coldDataScanEnable = false;
-    private boolean dataReadAheadEnable = false;
+    private boolean dataReadAheadEnable = true;
     private int timerColdDataCheckIntervalMs = 60 * 1000;
     private int sampleSteps = 32;
     private int accessMessageInMemoryHotRatio = 26;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java
Patch:
@@ -447,6 +447,7 @@ public void run() {
             if (ConsumeMessageConcurrentlyService.this.defaultMQPushConsumerImpl.hasHook()) {
                 consumeMessageContext.setStatus(status.toString());
                 consumeMessageContext.setSuccess(ConsumeConcurrentlyStatus.CONSUME_SUCCESS == status);
+                consumeMessageContext.setAccessChannel(defaultMQPushConsumer.getAccessChannel());
                 ConsumeMessageConcurrentlyService.this.defaultMQPushConsumerImpl.executeHookAfter(consumeMessageContext);
             }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -543,6 +543,7 @@ public void run() {
                                 consumeMessageContext.setStatus(status.toString());
                                 consumeMessageContext
                                     .setSuccess(ConsumeOrderlyStatus.SUCCESS == status || ConsumeOrderlyStatus.COMMIT == status);
+                                consumeMessageContext.setAccessChannel(defaultMQPushConsumer.getAccessChannel());
                                 ConsumeMessageOrderlyService.this.defaultMQPushConsumerImpl.executeHookAfter(consumeMessageContext);
                             }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessagePopConcurrentlyService.java
Patch:
@@ -457,6 +457,7 @@ public void run() {
                 consumeMessageContext.getProps().put(MixAll.CONSUME_CONTEXT_TYPE, returnType.name());
                 consumeMessageContext.setStatus(status.toString());
                 consumeMessageContext.setSuccess(ConsumeConcurrentlyStatus.CONSUME_SUCCESS == status);
+                consumeMessageContext.setAccessChannel(defaultMQPushConsumer.getAccessChannel());
                 ConsumeMessagePopConcurrentlyService.this.defaultMQPushConsumerImpl.executeHookAfter(consumeMessageContext);
             }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java
Patch:
@@ -632,6 +632,7 @@ public synchronized List<MessageExt> poll(long timeout) {
                     this.executeHookBefore(consumeMessageContext);
                     consumeMessageContext.setStatus(ConsumeConcurrentlyStatus.CONSUME_SUCCESS.toString());
                     consumeMessageContext.setSuccess(true);
+                    consumeMessageContext.setAccessChannel(defaultLitePullConsumer.getAccessChannel());
                     this.executeHookAfter(consumeMessageContext);
                 }
                 consumeRequest.getProcessQueue().setLastConsumeTimestamp(System.currentTimeMillis());

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java
Patch:
@@ -278,6 +278,7 @@ private PullResult pullSyncImpl(MessageQueue mq, SubscriptionData subscriptionDa
             this.executeHookBefore(consumeMessageContext);
             consumeMessageContext.setStatus(ConsumeConcurrentlyStatus.CONSUME_SUCCESS.toString());
             consumeMessageContext.setSuccess(true);
+            consumeMessageContext.setAccessChannel(defaultMQPullConsumer.getAccessChannel());
             this.executeHookAfter(consumeMessageContext);
         }
         return pullResult;

File: client/src/main/java/org/apache/rocketmq/client/trace/hook/ConsumeMessageTraceHookImpl.java
Patch:
@@ -99,6 +99,7 @@ public void consumeMessageAfter(ConsumeMessageContext context) {
         subAfterContext.setRegionId(subBeforeContext.getRegionId());//
         subAfterContext.setGroupName(NamespaceUtil.withoutNamespace(subBeforeContext.getGroupName()));//
         subAfterContext.setRequestId(subBeforeContext.getRequestId());//
+        subAfterContext.setAccessChannel(context.getAccessChannel());
         subAfterContext.setSuccess(context.isSuccess());//
 
         // Calculate the cost time for processing messages

File: client/src/test/java/org/apache/rocketmq/client/trace/TraceDataEncoderTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.client.trace;
 
+import org.apache.rocketmq.client.AccessChannel;
 import org.apache.rocketmq.client.producer.LocalTransactionState;
 import org.apache.rocketmq.common.message.MessageType;
 import org.junit.Assert;
@@ -195,6 +196,7 @@ public void testSubAfterTraceDataFormatTest() {
         subAfterContext.setTimeStamp(1625883640000L);
         subAfterContext.setGroupName("GroupName-test");
         subAfterContext.setContextCode(98623046);
+        subAfterContext.setAccessChannel(AccessChannel.LOCAL);
         TraceBean bean = new TraceBean();
         bean.setMsgId("AC1415116D1418B4AAC217FE1B4E0000");
         bean.setKeys("keys");

File: common/src/main/java/org/apache/rocketmq/common/MQVersion.java
Patch:
@@ -18,7 +18,7 @@
 
 public class MQVersion {
 
-    public static final int CURRENT_VERSION = Version.V5_1_2.ordinal();
+    public static final int CURRENT_VERSION = Version.V5_1_3.ordinal();
 
     public static String getVersionDesc(int value) {
         int length = Version.values().length;

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/TieredCommitLog.java
Patch:
@@ -111,7 +111,7 @@ public void destroyExpiredFile() {
         try {
             if (System.currentTimeMillis() - fileSegment.getMaxTimestamp() >
                 TimeUnit.HOURS.toMillis(storeConfig.getCommitLogRollingInterval())
-                && fileSegment.getSize() > storeConfig.getCommitLogRollingMinimumSize()) {
+                && fileSegment.getAppendPosition() > storeConfig.getCommitLogRollingMinimumSize()) {
                 flatFile.rollingNewFile();
             }
         } catch (Exception e) {

File: common/src/main/java/org/apache/rocketmq/common/BrokerIdentity.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.rocketmq.common;
 
-import java.net.InetAddress;
-import java.net.UnknownHostException;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.builder.EqualsBuilder;
 import org.apache.commons.lang3.builder.HashCodeBuilder;
@@ -27,6 +25,9 @@
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+
 public class BrokerIdentity {
     private static final String DEFAULT_CLUSTER_NAME = "DefaultCluster";
 

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -1037,6 +1037,9 @@ public void registerProcessor() {
          */
         this.remotingServer.registerProcessor(RequestCode.ACK_MESSAGE, this.ackMessageProcessor, this.ackMessageExecutor);
         this.fastRemotingServer.registerProcessor(RequestCode.ACK_MESSAGE, this.ackMessageProcessor, this.ackMessageExecutor);
+
+        this.remotingServer.registerProcessor(RequestCode.BATCH_ACK_MESSAGE, this.ackMessageProcessor, this.ackMessageExecutor);
+        this.fastRemotingServer.registerProcessor(RequestCode.BATCH_ACK_MESSAGE, this.ackMessageProcessor, this.ackMessageExecutor);
         /**
          * ChangeInvisibleTimeProcessor
          */

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RequestCode.java
Patch:
@@ -88,6 +88,7 @@ public class RequestCode {
 
     public static final int POP_MESSAGE = 200050;
     public static final int ACK_MESSAGE = 200051;
+    public static final int BATCH_ACK_MESSAGE = 200151;
     public static final int PEEK_MESSAGE = 200052;
     public static final int CHANGE_MESSAGE_INVISIBLETIME = 200053;
     public static final int NOTIFICATION = 200054;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/ClusterServiceManager.java
Patch:
@@ -97,7 +97,7 @@ public ClusterServiceManager(RPCHook rpcHook) {
         this.adminService = new DefaultAdminService(this.operationClientAPIFactory);
 
         this.producerManager = new ProducerManager();
-        this.consumerManager = new ClusterConsumerManager(this.topicRouteService, this.adminService, this.operationClientAPIFactory, new ConsumerIdsChangeListenerImpl(), proxyConfig.getChannelExpiredTimeout());
+        this.consumerManager = new ClusterConsumerManager(this.topicRouteService, this.adminService, this.operationClientAPIFactory, new ConsumerIdsChangeListenerImpl(), proxyConfig.getChannelExpiredTimeout(), rpcHook);
 
         this.transactionClientAPIFactory = new MQClientAPIFactory(
             nameserverAccessConfig,

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/client/ClusterConsumerManager.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.proxy.service.route.TopicRouteService;
 import org.apache.rocketmq.proxy.service.sysmessage.HeartbeatSyncer;
+import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
@@ -36,9 +37,9 @@ public class ClusterConsumerManager extends ConsumerManager implements StartAndS
     protected HeartbeatSyncer heartbeatSyncer;
 
     public ClusterConsumerManager(TopicRouteService topicRouteService, AdminService adminService,
-        MQClientAPIFactory mqClientAPIFactory, ConsumerIdsChangeListener consumerIdsChangeListener, long channelExpiredTimeout) {
+                                  MQClientAPIFactory mqClientAPIFactory, ConsumerIdsChangeListener consumerIdsChangeListener, long channelExpiredTimeout, RPCHook rpcHook) {
         super(consumerIdsChangeListener, channelExpiredTimeout);
-        this.heartbeatSyncer = new HeartbeatSyncer(topicRouteService, adminService, this, mqClientAPIFactory);
+        this.heartbeatSyncer = new HeartbeatSyncer(topicRouteService, adminService, this, mqClientAPIFactory, rpcHook);
     }
 
     @Override

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/sysmessage/HeartbeatSyncer.java
Patch:
@@ -41,6 +41,7 @@
 import org.apache.rocketmq.proxy.service.admin.AdminService;
 import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.proxy.service.route.TopicRouteService;
+import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
@@ -53,8 +54,8 @@ public class HeartbeatSyncer extends AbstractSystemMessageSyncer {
     protected String localProxyId;
 
     public HeartbeatSyncer(TopicRouteService topicRouteService, AdminService adminService,
-        ConsumerManager consumerManager, MQClientAPIFactory mqClientAPIFactory) {
-        super(topicRouteService, adminService, mqClientAPIFactory);
+                           ConsumerManager consumerManager, MQClientAPIFactory mqClientAPIFactory, RPCHook rpcHook) {
+        super(topicRouteService, adminService, mqClientAPIFactory, rpcHook);
         this.consumerManager = consumerManager;
         this.localProxyId = buildLocalProxyId();
         this.init();

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/sysmessage/HeartbeatSyncerTest.java
Patch:
@@ -172,7 +172,7 @@ public void testSyncGrpcV2Channel() throws Exception {
             .build();
         when(grpcClientSettingsManager.getRawClientSettings(eq(clientId))).thenReturn(settings);
 
-        HeartbeatSyncer heartbeatSyncer = new HeartbeatSyncer(topicRouteService, adminService, consumerManager, mqClientAPIFactory);
+        HeartbeatSyncer heartbeatSyncer = new HeartbeatSyncer(topicRouteService, adminService, consumerManager, mqClientAPIFactory, null);
         heartbeatSyncer.onConsumerRegister(
             consumerGroup,
             clientChannelInfo,
@@ -240,7 +240,7 @@ public void testSyncRemotingChannel() throws Exception {
             4
         );
 
-        HeartbeatSyncer heartbeatSyncer = new HeartbeatSyncer(topicRouteService, adminService, consumerManager, mqClientAPIFactory);
+        HeartbeatSyncer heartbeatSyncer = new HeartbeatSyncer(topicRouteService, adminService, consumerManager, mqClientAPIFactory, null);
         SendResult okSendResult = new SendResult();
         okSendResult.setSendStatus(SendStatus.SEND_OK);
         {

File: remoting/src/test/java/org/apache/rocketmq/remoting/SubRemotingServerTest.java
Patch:
@@ -105,7 +105,7 @@ public void testInvokeSubRemotingServer() throws InterruptedException, RemotingT
             remotingClient.invokeSync("localhost:1234", request, 1000 * 3);
             failBecauseExceptionWasNotThrown(RemotingTimeoutException.class);
         } catch (Exception e) {
-            assertThat(e).isInstanceOf(RemotingTimeoutException.class);
+            assertThat(e).isInstanceOfAny(RemotingTimeoutException.class, RemotingSendRequestException.class);
         }
     }
 }

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -97,6 +97,7 @@ public class MixAll {
     public static final String ACL_CONF_TOOLS_FILE = "/conf/tools.yml";
     public static final String REPLY_MESSAGE_FLAG = "reply";
     public static final String LMQ_PREFIX = "%LMQ%";
+    public static final long LMQ_QUEUE_ID = 0;
     public static final String MULTI_DISPATCH_QUEUE_SPLITTER = ",";
     public static final String REQ_T = "ReqT";
     public static final String ROCKETMQ_ZONE_ENV = "ROCKETMQ_ZONE";

File: store/src/main/java/org/apache/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -235,7 +235,7 @@ public class MessageStoreConfig {
     private String dLegerPeers;
     private String dLegerSelfId;
     private String preferredLeaderId;
-    private boolean isEnableBatchPush = false;
+    private boolean enableBatchPush = false;
 
     private boolean enableScheduleMessageStats = true;
 
@@ -1132,11 +1132,11 @@ public void setPreferredLeaderId(String preferredLeaderId) {
     }
 
     public boolean isEnableBatchPush() {
-        return isEnableBatchPush;
+        return enableBatchPush;
     }
 
     public void setEnableBatchPush(boolean enableBatchPush) {
-        isEnableBatchPush = enableBatchPush;
+        this.enableBatchPush = enableBatchPush;
     }
 
     public boolean isEnableScheduleMessageStats() {

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/exception/TieredStoreException.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.rocketmq.tieredstore.exception;
 
 public class TieredStoreException extends RuntimeException {
+
     private TieredStoreErrorCode errorCode;
     private long position = -1;
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/metadata/QueueMetadata.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 
 public class QueueMetadata {
+
     private MessageQueue queue;
     private long minOffset;
     private long maxOffset;

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/util/MessageBufferUtil.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
-import org.apache.rocketmq.tieredstore.container.TieredCommitLog;
-import org.apache.rocketmq.tieredstore.container.TieredConsumeQueue;
+import org.apache.rocketmq.tieredstore.file.TieredCommitLog;
+import org.apache.rocketmq.tieredstore.file.TieredConsumeQueue;
 
 public class MessageBufferUtil {
     private static final Logger logger = LoggerFactory.getLogger(TieredStoreUtil.TIERED_STORE_LOGGER_NAME);

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/metrics/TieredStoreMetricsManagerTest.java
Patch:
@@ -28,7 +28,7 @@ public class TieredStoreMetricsManagerTest {
 
     @After
     public void tearDown() throws IOException {
-        TieredStoreTestUtil.destroyContainerManager();
+        TieredStoreTestUtil.destroyCompositeFlatFileManager();
         TieredStoreTestUtil.destroyMetadataStore();
     }
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/TieredMessageStore.java
Patch:
@@ -189,6 +189,8 @@ public CompletableFuture<GetMessageResult> getMessageAsync(String group, String
                     return next.getMessage(group, topic, queueId, offset, maxMsgNums, messageFilter);
                 });
         }
+        logger.debug("TieredMessageStore#getMessageAsync: get message from next store: topic: {}, queue: {}, queue offset: {}",
+            topic, queueId, offset);
         return next.getMessageAsync(group, topic, queueId, offset, maxMsgNums, messageFilter);
     }
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/container/TieredFileQueue.java
Patch:
@@ -144,6 +144,7 @@ protected void loadFromMetadata() {
             segment.setEndTimestamp(metadata.getEndTimestamp());
             if (metadata.getStatus() == FileSegmentMetadata.STATUS_SEALED) {
                 segment.setFull(false);
+                segment.sealFile();
             }
             // TODO check coda/size
             fileSegmentList.add(segment);
@@ -254,7 +255,7 @@ protected TieredFileSegment getFileToWrite() {
                 if (!segment.isFull()) {
                     return segment;
                 }
-                if (segment.commit()) {
+                if (segment.commitAndSealFile()) {
                     try {
                         metadataStore.updateFileSegment(segment);
                     } catch (Exception e) {

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/exception/TieredStoreErrorCode.java
Patch:
@@ -23,5 +23,6 @@ public enum TieredStoreErrorCode {
     NO_NEW_DATA,
     STORAGE_PROVIDER_ERROR,
     IO_ERROR,
+    SEGMENT_SEALED,
     UNKNOWN
 }

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/exception/TieredStoreException.java
Patch:
@@ -18,7 +18,7 @@
 
 public class TieredStoreException extends RuntimeException {
     private TieredStoreErrorCode errorCode;
-    private int position = -1;
+    private long position = -1;
 
     private String requestId;
 
@@ -41,11 +41,11 @@ public void setErrorCode(TieredStoreErrorCode errorCode) {
         this.errorCode = errorCode;
     }
 
-    public int getPosition() {
+    public long getPosition() {
         return position;
     }
 
-    public void setPosition(int position) {
+    public void setPosition(long position) {
         this.position = position;
     }
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/provider/inputstream/TieredFileSegmentInputStream.java
Patch:
@@ -60,7 +60,7 @@ public TieredFileSegmentInputStream(TieredFileSegment.FileSegmentType fileType,
         this.fileType = fileType;
         this.contentLength = contentLength;
         this.uploadBufferList = uploadBufferList;
-        if (uploadBufferList.size() > 0) {
+        if (uploadBufferList != null && uploadBufferList.size() > 0) {
             this.curBuffer = uploadBufferList.get(curReadBufferIndex);
         }
     }

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/TieredMessageStoreTest.java
Patch:
@@ -85,7 +85,7 @@ public void setUp() {
         brokerConfig.setBrokerName("broker");
         configuration = new Configuration(LoggerFactory.getLogger(TieredStoreUtil.TIERED_STORE_LOGGER_NAME), "/tmp/rmqut/config", storeConfig, brokerConfig);
         Properties properties = new Properties();
-        properties.setProperty("tieredBackendServiceProvider", "org.apache.rocketmq.tieredstore.mock.MemoryFileSegment");
+        properties.setProperty("tieredBackendServiceProvider", "org.apache.rocketmq.tieredstore.provider.memory.MemoryFileSegment");
         configuration.registerConfig(properties);
         MessageStorePluginContext context = new MessageStorePluginContext(new MessageStoreConfig(), null, null, brokerConfig, configuration);
 

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/container/TieredContainerManagerTest.java
Patch:
@@ -44,7 +44,7 @@ public class TieredContainerManagerTest {
     public void setUp() {
         storeConfig = new TieredMessageStoreConfig();
         storeConfig.setStorePathRootDir(storePath);
-        storeConfig.setTieredBackendServiceProvider("org.apache.rocketmq.tieredstore.mock.MemoryFileSegment");
+        storeConfig.setTieredBackendServiceProvider("org.apache.rocketmq.tieredstore.provider.memory.MemoryFileSegment");
         storeConfig.setBrokerName(storeConfig.getBrokerName());
         mq = new MessageQueue("TieredContainerManagerTest", storeConfig.getBrokerName(), 0);
         metadataStore = TieredStoreUtil.getMetadataStore(storeConfig);

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/container/TieredFileQueueTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.rocketmq.tieredstore.TieredStoreTestUtil;
 import org.apache.rocketmq.tieredstore.common.TieredMessageStoreConfig;
 import org.apache.rocketmq.tieredstore.metadata.TieredMetadataStore;
-import org.apache.rocketmq.tieredstore.mock.MemoryFileSegment;
+import org.apache.rocketmq.tieredstore.provider.memory.MemoryFileSegment;
 import org.apache.rocketmq.tieredstore.provider.TieredFileSegment;
 import org.apache.rocketmq.tieredstore.util.TieredStoreUtil;
 import org.junit.After;
@@ -43,7 +43,7 @@ public class TieredFileQueueTest {
     public void setUp() {
         storeConfig = new TieredMessageStoreConfig();
         storeConfig.setStorePathRootDir(storePath);
-        storeConfig.setTieredBackendServiceProvider("org.apache.rocketmq.tieredstore.mock.MemoryFileSegment");
+        storeConfig.setTieredBackendServiceProvider("org.apache.rocketmq.tieredstore.provider.memory.MemoryFileSegment");
         queue = new MessageQueue("TieredFileQueueTest", storeConfig.getBrokerName(), 0);
     }
 

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/container/TieredIndexFileTest.java
Patch:
@@ -47,7 +47,7 @@ public class TieredIndexFileTest {
     public void setUp() {
         storeConfig = new TieredMessageStoreConfig();
         storeConfig.setStorePathRootDir(storePath);
-        storeConfig.setTieredBackendServiceProvider("org.apache.rocketmq.tieredstore.mock.MemoryFileSegmentWithoutCheck");
+        storeConfig.setTieredBackendServiceProvider("org.apache.rocketmq.tieredstore.provider.memory.MemoryFileSegment");
         storeConfig.setTieredStoreIndexFileMaxHashSlotNum(2);
         storeConfig.setTieredStoreIndexFileMaxIndexNum(3);
         mq = new MessageQueue("TieredIndexFileTest", storeConfig.getBrokerName(), 1);

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/container/TieredMessageQueueContainerTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.rocketmq.tieredstore.common.TieredMessageStoreConfig;
 import org.apache.rocketmq.tieredstore.metadata.QueueMetadata;
 import org.apache.rocketmq.tieredstore.metadata.TieredMetadataStore;
-import org.apache.rocketmq.tieredstore.mock.MemoryFileSegment;
+import org.apache.rocketmq.tieredstore.provider.memory.MemoryFileSegment;
 import org.apache.rocketmq.tieredstore.provider.TieredFileSegment;
 import org.apache.rocketmq.tieredstore.util.MessageBufferUtil;
 import org.apache.rocketmq.tieredstore.util.MessageBufferUtilTest;
@@ -51,7 +51,7 @@ public class TieredMessageQueueContainerTest {
     public void setUp() {
         storeConfig = new TieredMessageStoreConfig();
         storeConfig.setStorePathRootDir(storePath);
-        storeConfig.setTieredBackendServiceProvider("org.apache.rocketmq.tieredstore.mock.MemoryFileSegment");
+        storeConfig.setTieredBackendServiceProvider("org.apache.rocketmq.tieredstore.provider.memory.MemoryFileSegment");
         storeConfig.setCommitLogRollingInterval(0);
         storeConfig.setCommitLogRollingMinimumSize(999);
         mq = new MessageQueue("TieredMessageQueueContainerTest", storeConfig.getBrokerName(), 0);
@@ -138,7 +138,7 @@ public void testAppendConsumeQueue() throws ClassNotFoundException, NoSuchMethod
 
     @Test
     public void testBinarySearchInQueueByTime() throws ClassNotFoundException, NoSuchMethodException {
-        storeConfig.setTieredBackendServiceProvider("org.apache.rocketmq.tieredstore.mock.MemoryFileSegmentWithoutCheck");
+        storeConfig.setTieredBackendServiceProvider("org.apache.rocketmq.tieredstore.provider.memory.MemoryFileSegmentWithoutCheck");
 
         TieredMessageQueueContainer container = new TieredMessageQueueContainer(mq, storeConfig);
         container.initOffset(50);

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/metadata/MetadataStoreTest.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.rocketmq.tieredstore.TieredStoreTestUtil;
 import org.apache.rocketmq.tieredstore.common.TieredMessageStoreConfig;
 import org.apache.rocketmq.tieredstore.container.TieredCommitLog;
-import org.apache.rocketmq.tieredstore.mock.MemoryFileSegment;
+import org.apache.rocketmq.tieredstore.provider.memory.MemoryFileSegment;
 import org.apache.rocketmq.tieredstore.provider.TieredFileSegment;
 import org.junit.After;
 import org.junit.Assert;

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/metrics/TieredStoreMetricsManagerTest.java
Patch:
@@ -41,7 +41,7 @@ public void getMetricsView() {
     @Test
     public void init() {
         TieredMessageStoreConfig storeConfig = new TieredMessageStoreConfig();
-        storeConfig.setTieredBackendServiceProvider("org.apache.rocketmq.tieredstore.mock.MemoryFileSegment");
+        storeConfig.setTieredBackendServiceProvider("org.apache.rocketmq.tieredstore.provider.memory.MemoryFileSegment");
         TieredStoreMetricsManager.init(OpenTelemetrySdk.builder().build().getMeter(""),
             null, storeConfig, new TieredMessageFetcher(storeConfig), null);
     }

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/provider/memory/MemoryFileSegmentWithoutCheck.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.tieredstore.mock;
+package org.apache.rocketmq.tieredstore.provider.memory;
 
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/client/ClientActivity.java
Patch:
@@ -287,7 +287,7 @@ protected GrpcClientChannel registerProducer(ProxyContext ctx, String topicName)
         // use topic name as producer group
         ClientChannelInfo clientChannelInfo = new ClientChannelInfo(channel, clientId, languageCode, parseClientVersion(ctx.getClientVersion()));
         this.messagingProcessor.registerProducer(ctx, topicName, clientChannelInfo);
-        TopicMessageType topicMessageType = this.messagingProcessor.getMetadataService().getTopicMessageType(topicName);
+        TopicMessageType topicMessageType = this.messagingProcessor.getMetadataService().getTopicMessageType(ctx, topicName);
         if (TopicMessageType.TRANSACTION.equals(topicMessageType)) {
             this.messagingProcessor.addTransactionSubscription(ctx, topicName, topicName);
         }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/AckMessageActivity.java
Patch:
@@ -98,7 +98,7 @@ protected CompletableFuture<AckMessageResultEntry> processAckMessage(ProxyContex
             String handleString = ackMessageEntry.getReceiptHandle();
 
             String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());
-            MessageReceiptHandle messageReceiptHandle = receiptHandleProcessor.removeReceiptHandle(grpcChannelManager.getChannel(ctx.getClientID()), group, ackMessageEntry.getMessageId(), ackMessageEntry.getReceiptHandle());
+            MessageReceiptHandle messageReceiptHandle = receiptHandleProcessor.removeReceiptHandle(ctx, grpcChannelManager.getChannel(ctx.getClientID()), group, ackMessageEntry.getMessageId(), ackMessageEntry.getReceiptHandle());
             if (messageReceiptHandle != null) {
                 handleString = messageReceiptHandle.getReceiptHandleStr();
             }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ChangeInvisibleDurationActivity.java
Patch:
@@ -55,7 +55,7 @@ public CompletableFuture<ChangeInvisibleDurationResponse> changeInvisibleDuratio
             ReceiptHandle receiptHandle = ReceiptHandle.decode(request.getReceiptHandle());
             String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());
 
-            MessageReceiptHandle messageReceiptHandle = receiptHandleProcessor.removeReceiptHandle(grpcChannelManager.getChannel(ctx.getClientID()), group, request.getMessageId(), receiptHandle.getReceiptHandle());
+            MessageReceiptHandle messageReceiptHandle = receiptHandleProcessor.removeReceiptHandle(ctx, grpcChannelManager.getChannel(ctx.getClientID()), group, request.getMessageId(), receiptHandle.getReceiptHandle());
             if (messageReceiptHandle != null) {
                 receiptHandle = ReceiptHandle.decode(messageReceiptHandle.getReceiptHandleStr());
             }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java
Patch:
@@ -144,7 +144,7 @@ public void receiveMessage(ProxyContext ctx, ReceiveMessageRequest request,
                                     MessageReceiptHandle messageReceiptHandle =
                                         new MessageReceiptHandle(group, topic, messageExt.getQueueId(), receiptHandle, messageExt.getMsgId(),
                                             messageExt.getQueueOffset(), messageExt.getReconsumeTimes());
-                                    receiptHandleProcessor.addReceiptHandle(grpcChannelManager.getChannel(ctx.getClientID()), group, messageExt.getMsgId(), receiptHandle, messageReceiptHandle);
+                                    receiptHandleProcessor.addReceiptHandle(ctx, grpcChannelManager.getChannel(ctx.getClientID()), group, messageExt.getMsgId(), receiptHandle, messageReceiptHandle);
                                 }
                             }
                         }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/producer/ForwardMessageToDLQActivity.java
Patch:
@@ -48,7 +48,7 @@ public CompletableFuture<ForwardMessageToDeadLetterQueueResponse> forwardMessage
 
             String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());
             String handleString = request.getReceiptHandle();
-            MessageReceiptHandle messageReceiptHandle = receiptHandleProcessor.removeReceiptHandle(grpcChannelManager.getChannel(ctx.getClientID()), group, request.getMessageId(), request.getReceiptHandle());
+            MessageReceiptHandle messageReceiptHandle = receiptHandleProcessor.removeReceiptHandle(ctx, grpcChannelManager.getChannel(ctx.getClientID()), group, request.getMessageId(), request.getReceiptHandle());
             if (messageReceiptHandle != null) {
                 handleString = messageReceiptHandle.getReceiptHandleStr();
             }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivity.java
Patch:
@@ -71,7 +71,7 @@ public CompletableFuture<QueryRouteResponse> queryRoute(ProxyContext ctx, QueryR
             List<MessageQueue> messageQueueList = new ArrayList<>();
             Map<String, Map<Long, Broker>> brokerMap = buildBrokerMap(proxyTopicRouteData.getBrokerDatas());
 
-            TopicMessageType topicMessageType = messagingProcessor.getMetadataService().getTopicMessageType(topicName);
+            TopicMessageType topicMessageType = messagingProcessor.getMetadataService().getTopicMessageType(ctx, topicName);
             for (QueueData queueData : proxyTopicRouteData.getQueueDatas()) {
                 String brokerName = queueData.getBrokerName();
                 Map<Long, Broker> brokerIdMap = brokerMap.get(brokerName);

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/DefaultMessagingProcessor.java
Patch:
@@ -127,13 +127,13 @@ protected void init() {
 
     @Override
     public SubscriptionGroupConfig getSubscriptionGroupConfig(ProxyContext ctx, String consumerGroupName) {
-        return this.serviceManager.getMetadataService().getSubscriptionGroupConfig(consumerGroupName);
+        return this.serviceManager.getMetadataService().getSubscriptionGroupConfig(ctx, consumerGroupName);
     }
 
     @Override
     public ProxyTopicRouteData getTopicRouteDataForProxy(ProxyContext ctx, List<Address> requestHostAndPortList,
         String topicName) throws Exception {
-        return this.serviceManager.getTopicRouteService().getTopicRouteForProxy(requestHostAndPortList, topicName);
+        return this.serviceManager.getTopicRouteService().getTopicRouteForProxy(ctx, requestHostAndPortList, topicName);
     }
 
     @Override

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/TransactionProcessor.java
Patch:
@@ -36,6 +36,7 @@ public CompletableFuture<Void> endTransaction(ProxyContext ctx, String transacti
         CompletableFuture<Void> future = new CompletableFuture<>();
         try {
             EndTransactionRequestData headerData = serviceManager.getTransactionService().genEndTransactionRequestHeader(
+                ctx,
                 producerGroup,
                 buildCommitOrRollback(transactionStatus),
                 fromTransactionCheck,
@@ -70,6 +71,6 @@ protected int buildCommitOrRollback(TransactionStatus transactionStatus) {
     }
 
     public void addTransactionSubscription(ProxyContext ctx, String producerGroup, String topic) {
-        this.serviceManager.getTransactionService().addTransactionSubscription(producerGroup, topic);
+        this.serviceManager.getTransactionService().addTransactionSubscription(ctx, producerGroup, topic);
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/SendMessageActivity.java
Patch:
@@ -70,7 +70,7 @@ protected RemotingCommand sendMessage(ChannelHandlerContext ctx, RemotingCommand
             if (topicMessageTypeValidator != null) {
                 // Do not check retry or dlq topic
                 if (!NamespaceUtil.isRetryTopic(topic) && !NamespaceUtil.isDLQTopic(topic)) {
-                    TopicMessageType topicMessageType = messagingProcessor.getMetadataService().getTopicMessageType(topic);
+                    TopicMessageType topicMessageType = messagingProcessor.getMetadataService().getTopicMessageType(context, topic);
                     topicMessageTypeValidator.validate(topicMessageType, messageType);
                 }
             }

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/ClusterServiceManager.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.common.utils.AbstractStartAndShutdown;
+import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.service.admin.AdminService;
@@ -191,7 +192,7 @@ protected class ProducerChangeListenerImpl implements ProducerChangeListener {
         @Override
         public void handle(ProducerGroupEvent event, String group, ClientChannelInfo clientChannelInfo) {
             if (event == ProducerGroupEvent.GROUP_UNREGISTER) {
-                getTransactionService().unSubscribeAllTransactionTopic(group);
+                getTransactionService().unSubscribeAllTransactionTopic(ProxyContext.createForInner(this.getClass()), group);
             }
         }
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/metadata/LocalMetadataService.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.attribute.TopicMessageType;
+import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public class LocalMetadataService implements MetadataService {
@@ -30,7 +31,7 @@ public LocalMetadataService(BrokerController brokerController) {
     }
 
     @Override
-    public TopicMessageType getTopicMessageType(String topic) {
+    public TopicMessageType getTopicMessageType(ProxyContext ctx, String topic) {
         TopicConfig topicConfig = brokerController.getTopicConfigManager().selectTopicConfig(topic);
         if (topicConfig == null) {
             return TopicMessageType.UNSPECIFIED;
@@ -39,7 +40,7 @@ public TopicMessageType getTopicMessageType(String topic) {
     }
 
     @Override
-    public SubscriptionGroupConfig getSubscriptionGroupConfig(String group) {
+    public SubscriptionGroupConfig getSubscriptionGroupConfig(ProxyContext ctx, String group) {
         return this.brokerController.getSubscriptionGroupManager().getSubscriptionGroupTable().get(group);
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/metadata/MetadataService.java
Patch:
@@ -18,11 +18,12 @@
 package org.apache.rocketmq.proxy.service.metadata;
 
 import org.apache.rocketmq.common.attribute.TopicMessageType;
+import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public interface MetadataService {
 
-    TopicMessageType getTopicMessageType(String topic);
+    TopicMessageType getTopicMessageType(ProxyContext ctx, String topic);
 
-    SubscriptionGroupConfig getSubscriptionGroupConfig(String group);
+    SubscriptionGroupConfig getSubscriptionGroupConfig(ProxyContext ctx, String group);
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/relay/AbstractProxyRelayService.java
Patch:
@@ -43,6 +43,7 @@ public RelayData<TransactionData, Void> processCheckTransactionState(ProxyContex
         CompletableFuture<ProxyRelayResult<Void>> future = new CompletableFuture<>();
         String group = messageExt.getProperty(MessageConst.PROPERTY_PRODUCER_GROUP);
         TransactionData transactionData = transactionService.addTransactionDataByBrokerAddr(
+            context,
             command.getExtFields().get(ProxyUtils.BROKER_ADDR),
             group,
             header.getTranStateTableOffset(),

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/sysmessage/AbstractSystemMessageSyncer.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
 import org.apache.rocketmq.common.utils.StartAndShutdown;
@@ -95,7 +96,7 @@ protected void sendSystemMessage(Object data) {
                 JSON.toJSONString(data).getBytes(StandardCharsets.UTF_8)
             );
 
-            AddressableMessageQueue messageQueue = this.topicRouteService.getAllMessageQueueView(targetTopic)
+            AddressableMessageQueue messageQueue = this.topicRouteService.getAllMessageQueueView(ProxyContext.createForInner(this.getClass()), targetTopic)
                 .getWriteSelector().selectOne(true);
             this.mqClientAPIFactory.getClient().sendMessageAsync(
                 messageQueue.getBrokerAddr(),

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/client/ClientActivityTest.java
Patch:
@@ -134,7 +134,7 @@ public void testProducerHeartbeat() throws Throwable {
             txProducerTopicArgumentCaptor.capture()
         );
 
-        when(this.metadataService.getTopicMessageType(anyString())).thenReturn(TopicMessageType.TRANSACTION);
+        when(this.metadataService.getTopicMessageType(any(), anyString())).thenReturn(TopicMessageType.TRANSACTION);
 
         HeartbeatResponse response = this.sendProducerHeartbeat(context);
 
@@ -222,7 +222,7 @@ public void testProducerNotifyClientTermination() throws Throwable {
             .build());
         ArgumentCaptor<ClientChannelInfo> channelInfoArgumentCaptor = ArgumentCaptor.forClass(ClientChannelInfo.class);
         doNothing().when(this.messagingProcessor).unRegisterProducer(any(), anyString(), channelInfoArgumentCaptor.capture());
-        when(this.metadataService.getTopicMessageType(anyString())).thenReturn(TopicMessageType.NORMAL);
+        when(this.metadataService.getTopicMessageType(any(), anyString())).thenReturn(TopicMessageType.NORMAL);
 
         this.sendProducerTelemetry(context);
         this.sendProducerHeartbeat(context);

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ChangeInvisibleDurationActivityTest.java
Patch:
@@ -92,7 +92,7 @@ public void testChangeInvisibleDurationActivityWhenHasMappingHandle() throws Thr
         when(this.messagingProcessor.changeInvisibleTime(
             any(), receiptHandleCaptor.capture(), anyString(), anyString(), anyString(), invisibleTimeArgumentCaptor.capture()
         )).thenReturn(CompletableFuture.completedFuture(ackResult));
-        when(receiptHandleProcessor.removeReceiptHandle(any(), anyString(), anyString(), anyString()))
+        when(receiptHandleProcessor.removeReceiptHandle(any(), any(), anyString(), anyString(), anyString()))
             .thenReturn(new MessageReceiptHandle("group", "topic", 0, savedHandleStr, "msgId", 0, 0));
 
         ChangeInvisibleDurationResponse response = this.changeInvisibleDurationActivity.changeInvisibleDuration(

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/producer/ForwardMessageToDLQActivityTest.java
Patch:
@@ -75,7 +75,7 @@ public void testForwardMessageToDeadLetterQueueWhenHasMappingHandle() throws Thr
             .thenReturn(CompletableFuture.completedFuture(RemotingCommand.createResponseCommand(ResponseCode.SUCCESS, "")));
 
         String savedHandleStr = buildReceiptHandle("topic", System.currentTimeMillis(),3000);
-        when(receiptHandleProcessor.removeReceiptHandle(any(), anyString(), anyString(), anyString()))
+        when(receiptHandleProcessor.removeReceiptHandle(any(), any(), anyString(), anyString(), anyString()))
             .thenReturn(new MessageReceiptHandle("group", "topic", 0, savedHandleStr, "msgId", 0, 0));
 
         ForwardMessageToDeadLetterQueueResponse response = this.forwardMessageToDLQActivity.forwardMessageToDeadLetterQueue(

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivityTest.java
Patch:
@@ -101,7 +101,7 @@ public void testQueryRoute() throws Throwable {
             .thenReturn(createProxyTopicRouteData(2, 2, 6));
         MetadataService metadataService = Mockito.mock(LocalMetadataService.class);
         when(this.messagingProcessor.getMetadataService()).thenReturn(metadataService);
-        when(metadataService.getTopicMessageType(anyString())).thenReturn(TopicMessageType.NORMAL);
+        when(metadataService.getTopicMessageType(any(), anyString())).thenReturn(TopicMessageType.NORMAL);
 
         QueryRouteResponse response = this.routeActivity.queryRoute(
             createContext(),

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ProducerProcessorTest.java
Patch:
@@ -70,7 +70,7 @@ public void before() throws Throwable {
 
     @Test
     public void testSendMessage() throws Throwable {
-        when(metadataService.getTopicMessageType(eq(TOPIC))).thenReturn(TopicMessageType.NORMAL);
+        when(metadataService.getTopicMessageType(any(), eq(TOPIC))).thenReturn(TopicMessageType.NORMAL);
         String txId = MessageClientIDSetter.createUniqID();
         String msgId = MessageClientIDSetter.createUniqID();
         long commitLogOffset = 1000L;
@@ -96,6 +96,7 @@ public void testSendMessage() throws Throwable {
         ArgumentCaptor<Long> tranStateTableOffsetCaptor = ArgumentCaptor.forClass(Long.class);
         ArgumentCaptor<Long> commitLogOffsetCaptor = ArgumentCaptor.forClass(Long.class);
         when(transactionService.addTransactionDataByBrokerName(
+            any(),
             brokerNameCaptor.capture(),
             anyString(),
             tranStateTableOffsetCaptor.capture(),
@@ -150,6 +151,7 @@ public void testSendRetryMessage() throws Throwable {
         ArgumentCaptor<Long> tranStateTableOffsetCaptor = ArgumentCaptor.forClass(Long.class);
         ArgumentCaptor<Long> commitLogOffsetCaptor = ArgumentCaptor.forClass(Long.class);
         when(transactionService.addTransactionDataByBrokerName(
+            any(),
             brokerNameCaptor.capture(),
             anyString(),
             tranStateTableOffsetCaptor.capture(),

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/TransactionProcessorTest.java
Patch:
@@ -54,7 +54,7 @@ public void testEndTransaction() throws Throwable {
     protected void testEndTransaction(int sysFlag, TransactionStatus transactionStatus) throws Throwable {
         when(this.messageService.endTransactionOneway(any(), any(), any(), anyLong())).thenReturn(CompletableFuture.completedFuture(null));
         ArgumentCaptor<Integer> commitOrRollbackCaptor = ArgumentCaptor.forClass(Integer.class);
-        when(transactionService.genEndTransactionRequestHeader(anyString(), commitOrRollbackCaptor.capture(), anyBoolean(), anyString(), anyString()))
+        when(transactionService.genEndTransactionRequestHeader(any(), anyString(), commitOrRollbackCaptor.capture(), anyBoolean(), anyString(), anyString()))
             .thenReturn(new EndTransactionRequestData("brokerName", new EndTransactionRequestHeader()));
 
         this.transactionProcessor.endTransaction(

File: proxy/src/test/java/org/apache/rocketmq/proxy/remoting/activity/SendMessageActivityTest.java
Patch:
@@ -76,7 +76,7 @@ public void setup() {
 
     @Test
     public void testSendMessage() throws Exception {
-        when(metadataServiceMock.getTopicMessageType(eq(topic))).thenReturn(TopicMessageType.NORMAL);
+        when(metadataServiceMock.getTopicMessageType(any(), eq(topic))).thenReturn(TopicMessageType.NORMAL);
         Message message = new Message(topic, "123".getBytes());
         message.putUserProperty("a", "b");
         SendMessageRequestHeader sendMessageRequestHeader = new SendMessageRequestHeader();

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/message/ClusterMessageServiceTest.java
Patch:
@@ -32,6 +32,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -50,7 +51,7 @@ public void before() {
 
     @Test
     public void testAckMessageByInvalidBrokerNameHandle() throws Exception {
-        when(topicRouteService.getBrokerAddr(anyString())).thenThrow(new MQClientException(ResponseCode.TOPIC_NOT_EXIST, ""));
+        when(topicRouteService.getBrokerAddr(any(), anyString())).thenThrow(new MQClientException(ResponseCode.TOPIC_NOT_EXIST, ""));
         try {
             this.clusterMessageService.ackMessage(
                 ProxyContext.create(),

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/sysmessage/HeartbeatSyncerTest.java
Patch:
@@ -133,7 +133,7 @@ public void before() throws Throwable {
             brokerData.setBrokerAddrs(brokerAddr);
             topicRouteData.getBrokerDatas().add(brokerData);
             MessageQueueView messageQueueView = new MessageQueueView("foo", topicRouteData);
-            when(this.topicRouteService.getAllMessageQueueView(anyString())).thenReturn(messageQueueView);
+            when(this.topicRouteService.getAllMessageQueueView(any(), anyString())).thenReturn(messageQueueView);
         }
     }
 

File: common/src/main/java/org/apache/rocketmq/common/constant/LoggerName.java
Patch:
@@ -50,4 +50,5 @@ public class LoggerName {
     public static final String STDOUT_LOGGER_NAME = "STDOUT";
     public static final String PROXY_LOGGER_NAME = "RocketmqProxy";
     public static final String PROXY_WATER_MARK_LOGGER_NAME = "RocketmqProxyWatermark";
+    public static final String ROCKETMQ_COLDCTR_LOGGER_NAME = "RocketmqColdCtr";
 }

File: store/src/main/java/org/apache/rocketmq/store/ha/GroupTransferService.java
Patch:
@@ -86,7 +86,7 @@ private void doWaitTransfer() {
 
                 for (int i = 0; !transferOK && deadLine - System.nanoTime() > 0; i++) {
                     if (i > 0) {
-                        this.notifyTransferObject.waitForRunning(1000);
+                        this.notifyTransferObject.waitForRunning(1);
                     }
 
                     if (!allAckInSyncStateSet && req.getAckNums() <= 1) {

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/DefaultRequestProcessor.java
Patch:
@@ -627,7 +627,7 @@ private RemotingCommand updateConfig(ChannelHandlerContext ctx, RemotingCommand
                 return response;
             }
 
-            if (properties.containsKey("kvConfigPath") || properties.containsKey("configStorePathName")) {
+            if (properties.containsKey("kvConfigPath") || properties.containsKey("configStorePath")) {
                 response.setCode(ResponseCode.NO_PERMISSION);
                 response.setRemark("Can not update config path");
                 return response;

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/processor/RequestProcessorTest.java
Patch:
@@ -196,7 +196,7 @@ public void testProcessRequest_UpdateConfigPath() throws RemotingCommandExceptio
 
         //update disallowed value
         properties.clear();
-        properties.setProperty("configStorePathName", "test/path");
+        properties.setProperty("configStorePath", "test/path");
         updateConfigRequest.setBody(MixAll.properties2String(properties).getBytes(StandardCharsets.UTF_8));
 
         response = defaultRequestProcessor.processRequest(null, updateConfigRequest);

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/provider/posix/PosixFileSegment.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.rocketmq.tieredstore.common.TieredStoreExecutor;
 import org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsManager;
 import org.apache.rocketmq.tieredstore.provider.TieredFileSegment;
+import org.apache.rocketmq.tieredstore.provider.inputstream.TieredFileSegmentInputStream;
 import org.apache.rocketmq.tieredstore.util.TieredStoreUtil;
 
 import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.LABEL_FILE_TYPE;
@@ -182,7 +183,7 @@ public CompletableFuture<ByteBuffer> read0(long position, int length) {
 
     @Override
     public CompletableFuture<Boolean> commit0(TieredFileSegmentInputStream inputStream, long position, int length,
-        boolean append) {
+                                              boolean append) {
         Stopwatch stopwatch = Stopwatch.createStarted();
         AttributesBuilder attributesBuilder = newAttributesBuilder()
             .put(LABEL_OPERATION, OPERATION_POSIX_WRITE);

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/mock/MemoryFileSegment.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.tieredstore.common.TieredMessageStoreConfig;
 import org.apache.rocketmq.tieredstore.provider.TieredFileSegment;
+import org.apache.rocketmq.tieredstore.provider.inputstream.TieredFileSegmentInputStream;
 import org.junit.Assert;
 
 public class MemoryFileSegment extends TieredFileSegment {
@@ -81,7 +82,7 @@ public CompletableFuture<ByteBuffer> read0(long position, int length) {
 
     @Override
     public CompletableFuture<Boolean> commit0(TieredFileSegmentInputStream inputStream, long position, int length,
-        boolean append) {
+                                              boolean append) {
         try {
             if (blocker != null && !blocker.get()) {
                 throw new IllegalStateException();

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/mock/MemoryFileSegmentWithoutCheck.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.concurrent.ExecutionException;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.tieredstore.common.TieredMessageStoreConfig;
+import org.apache.rocketmq.tieredstore.provider.inputstream.TieredFileSegmentInputStream;
 import org.junit.Assert;
 
 public class MemoryFileSegmentWithoutCheck extends MemoryFileSegment {
@@ -37,7 +38,7 @@ public long getSize() {
 
     @Override
     public CompletableFuture<Boolean> commit0(TieredFileSegmentInputStream inputStream, long position, int length,
-        boolean append) {
+                                              boolean append) {
         try {
             if (blocker != null && !blocker.get()) {
                 throw new IllegalStateException();

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -545,7 +545,7 @@ protected void initializeResources() {
         this.syncBrokerMemberGroupExecutorService = new ScheduledThreadPoolExecutor(1,
             new ThreadFactoryImpl("BrokerControllerSyncBrokerScheduledThread", getBrokerIdentity()));
         this.brokerHeartbeatExecutorService = new ScheduledThreadPoolExecutor(1,
-            new ThreadFactoryImpl("rokerControllerHeartbeatScheduledThread", getBrokerIdentity()));
+            new ThreadFactoryImpl("BrokerControllerHeartbeatScheduledThread", getBrokerIdentity()));
 
         this.topicQueueMappingCleanService = new TopicQueueMappingCleanService(this);
     }

File: common/src/main/java/org/apache/rocketmq/common/PopAckConstants.java
Patch:
@@ -30,6 +30,7 @@ public class PopAckConstants {
     public static final String REVIVE_TOPIC = TopicValidator.SYSTEM_TOPIC_PREFIX + "REVIVE_LOG_";
     public static final String CK_TAG = "ck";
     public static final String ACK_TAG = "ack";
+    public static final String BATCH_ACK_TAG = "bAck";
     public static final String SPLIT = "@";
 
     /**

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/sysmessage/HeartbeatSyncer.java
Patch:
@@ -49,7 +49,7 @@ public class HeartbeatSyncer extends AbstractSystemMessageSyncer {
 
     protected ThreadPoolExecutor threadPoolExecutor;
     protected ConsumerManager consumerManager;
-    protected final Map<String /* channelId as longText */, RemoteChannel> remoteChannelMap = new ConcurrentHashMap<>();
+    protected final Map<String /* group @ channelId as longText */, RemoteChannel> remoteChannelMap = new ConcurrentHashMap<>();
     protected String localProxyId;
 
     public HeartbeatSyncer(TopicRouteService topicRouteService, AdminService adminService,
@@ -188,7 +188,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeCo
                 }
 
                 RemoteChannel decodedChannel = RemoteChannel.decode(data.getChannelData());
-                RemoteChannel channel = remoteChannelMap.computeIfAbsent(decodedChannel.id().asLongText(), key -> decodedChannel);
+                RemoteChannel channel = remoteChannelMap.computeIfAbsent(data.getGroup() + "@" + decodedChannel.id().asLongText(), key -> decodedChannel);
                 channel.setExtendAttribute(decodedChannel.getChannelExtendAttribute());
                 ClientChannelInfo clientChannelInfo = new ClientChannelInfo(
                     channel,

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -651,14 +651,14 @@ private SendResult sendDefaultImpl(
                     } catch (RemotingException | MQClientException e) {
                         endTimestamp = System.currentTimeMillis();
                         this.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, true);
-                        log.warn("sendKernelImpl exception, resend at once, InvokeID: %s, RT: %sms, Broker: %s", invokeID, endTimestamp - beginTimestampPrev, mq, e);
+                        log.warn("sendKernelImpl exception, resend at once, InvokeID: {}, RT: {}ms, Broker: {}", invokeID, endTimestamp - beginTimestampPrev, mq, e);
                         log.warn(msg.toString());
                         exception = e;
                         continue;
                     } catch (MQBrokerException e) {
                         endTimestamp = System.currentTimeMillis();
                         this.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, true);
-                        log.warn("sendKernelImpl exception, resend at once, InvokeID: %s, RT: %sms, Broker: %s", invokeID, endTimestamp - beginTimestampPrev, mq, e);
+                        log.warn("sendKernelImpl exception, resend at once, InvokeID: {}, RT: {}ms, Broker: {}", invokeID, endTimestamp - beginTimestampPrev, mq, e);
                         log.warn(msg.toString());
                         exception = e;
                         if (this.defaultMQProducer.getRetryResponseCodes().contains(e.getResponseCode())) {
@@ -673,7 +673,7 @@ private SendResult sendDefaultImpl(
                     } catch (InterruptedException e) {
                         endTimestamp = System.currentTimeMillis();
                         this.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, false);
-                        log.warn("sendKernelImpl exception, throw exception, InvokeID: %s, RT: %sms, Broker: %s", invokeID, endTimestamp - beginTimestampPrev, mq, e);
+                        log.warn("sendKernelImpl exception, throw exception, InvokeID: {}, RT: {}ms, Broker: {}", invokeID, endTimestamp - beginTimestampPrev, mq, e);
                         log.warn(msg.toString());
                         throw e;
                     }

File: store/src/main/java/org/apache/rocketmq/store/ConsumeQueue.java
Patch:
@@ -749,6 +749,9 @@ private void multiDispatchLmqQueue(DispatchRequest request, int maxRetries) {
         }
         for (int i = 0; i < queues.length; i++) {
             String queueName = queues[i];
+            if (StringUtils.contains(queueName, File.separator)) {
+                continue;
+            }
             long queueOffset = Long.parseLong(queueOffsets[i]);
             int queueId = request.getQueueId();
             if (this.messageStore.getMessageStoreConfig().isEnableLmq() && MixAll.isLmq(queueName)) {

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAService.java
Patch:
@@ -421,13 +421,14 @@ public long computeConfirmOffset() {
         for (Long syncId : currentSyncStateSet) {
             if (!idList.contains(syncId) && this.brokerControllerId != null && !Objects.equals(syncId, this.brokerControllerId)) {
                 LOGGER.warn("Slave {} is still in syncStateSet, but has lost its connection. So new offset can't be compute.", syncId);
-                return this.defaultMessageStore.getConfirmOffset();
+                // Without check and re-compute, return the confirmOffset's value directly.
+                return this.defaultMessageStore.getConfirmOffsetDirectly();
             }
         }
 
         for (HAConnection connection : this.connectionList) {
             final Long slaveId = ((AutoSwitchHAConnection) connection).getSlaveId();
-            if (currentSyncStateSet.contains(slaveId)) {
+            if (currentSyncStateSet.contains(slaveId) && connection.getSlaveAckOffset() > 0) {
                 newConfirmOffset = Math.min(newConfirmOffset, connection.getSlaveAckOffset());
             }
         }

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -388,7 +388,7 @@ public boolean sendMessageBack(final MessageExt msg) {
             MessageAccessor.clearProperty(newMsg, MessageConst.PROPERTY_TRANSACTION_PREPARED);
             newMsg.setDelayTimeLevel(3 + msg.getReconsumeTimes());
 
-            this.defaultMQPushConsumer.getDefaultMQPushConsumerImpl().getmQClientFactory().getDefaultMQProducer().send(newMsg);
+            this.defaultMQPushConsumerImpl.getmQClientFactory().getDefaultMQProducer().send(newMsg);
             return true;
         } catch (Exception e) {
             log.error("sendMessageBack exception, group: " + this.consumerGroup + " msg: " + msg.toString(), e);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessagePopOrderlyService.java
Patch:
@@ -304,7 +304,7 @@ public boolean sendMessageBack(final MessageExt msg) {
             MessageAccessor.setMaxReconsumeTimes(newMsg, String.valueOf(getMaxReconsumeTimes()));
             newMsg.setDelayTimeLevel(3 + msg.getReconsumeTimes());
 
-            this.defaultMQPushConsumer.getDefaultMQPushConsumerImpl().getmQClientFactory().getDefaultMQProducer().send(newMsg);
+            this.defaultMQPushConsumerImpl.getmQClientFactory().getDefaultMQProducer().send(newMsg);
             return true;
         } catch (Exception e) {
             log.error("sendMessageBack exception, group: " + this.consumerGroup + " msg: " + msg.toString(), e);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ProcessQueue.java
Patch:
@@ -75,7 +75,7 @@ public boolean isPullExpired() {
      * @param pushConsumer
      */
     public void cleanExpiredMsg(DefaultMQPushConsumer pushConsumer) {
-        if (pushConsumer.getDefaultMQPushConsumerImpl().isConsumeOrderly()) {
+        if (pushConsumer.isConsumeOrderly()) {
             return;
         }
 

File: example/src/main/java/org/apache/rocketmq/example/tracemessage/OpenTracingPushConsumer.java
Patch:
@@ -41,7 +41,7 @@ public static void main(String[] args) throws InterruptedException, MQClientExce
 
         // Uncomment the following line while debugging, namesrvAddr should be set to your local address
 //        consumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);
-        consumer.getDefaultMQPushConsumerImpl().registerConsumeMessageHook(new ConsumeMessageOpenTracingHookImpl(tracer));
+        consumer.registerConsumeMessageHook(new ConsumeMessageOpenTracingHookImpl(tracer));
 
         consumer.subscribe(TOPIC, "*");
         consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);

File: openmessaging/src/main/java/io/openmessaging/rocketmq/consumer/PushConsumerImpl.java
Patch:
@@ -101,7 +101,7 @@ public void suspend(long timeout) {
 
     @Override
     public boolean isSuspended() {
-        return this.rocketmqPushConsumer.getDefaultMQPushConsumerImpl().isPause();
+        return this.rocketmqPushConsumer.isPause();
     }
 
     @Override

File: client/src/main/java/org/apache/rocketmq/client/common/ThreadLocalIndex.java
Patch:
@@ -30,7 +30,7 @@ public int incrementAndGet() {
             index = random.nextInt();
         }
         this.threadLocalIndex.set(++index);
-        return Math.abs(index & POSITIVE_MASK);
+        return index & POSITIVE_MASK;
     }
 
     @Override

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -765,7 +765,7 @@ public boolean initialize() throws CloneNotSupportedException {
         }
 
         if (this.brokerConfig.isEnableControllerMode()) {
-            this.replicasManager.setIsolatedAndBrokerPermission(false);
+            this.replicasManager.setFenced(true);
         }
 
         if (messageStore != null) {

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -555,7 +555,7 @@ private void setBatchSizeIfNeeded(Map<String, String> propertiesMap, DispatchReq
 
     public long getConfirmOffset() {
         if (this.defaultMessageStore.getBrokerConfig().isEnableControllerMode()) {
-            if (this.defaultMessageStore.getMessageStoreConfig().getBrokerRole() != BrokerRole.SLAVE && !this.defaultMessageStore.getRunningFlags().isIsolated()) {
+            if (this.defaultMessageStore.getMessageStoreConfig().getBrokerRole() != BrokerRole.SLAVE && !this.defaultMessageStore.getRunningFlags().isFenced()) {
                 if (((AutoSwitchHAService) this.defaultMessageStore.getHaService()).getLocalSyncStateSet().size() == 1) {
                     return this.defaultMessageStore.getMaxPhyOffset();
                 }

File: client/src/main/java/org/apache/rocketmq/client/impl/mqclient/DoNothingClientRemotingProcessor.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.service.mqclient;
+package org.apache.rocketmq.client.impl.mqclient;
 
 import io.netty.channel.ChannelHandlerContext;
 import org.apache.rocketmq.client.impl.ClientRemotingProcessor;

File: client/src/main/java/org/apache/rocketmq/client/impl/mqclient/MQClientAPIExt.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.service.mqclient;
+package org.apache.rocketmq.client.impl.mqclient;
 
 import java.nio.ByteBuffer;
 import java.util.Collections;
@@ -84,7 +84,7 @@ public class MQClientAPIExt extends MQClientAPIImpl {
 
     private final ClientConfig clientConfig;
 
-    private MqClientAdminImpl mqClientAdmin;
+    private final MqClientAdminImpl mqClientAdmin;
 
     public MQClientAPIExt(
         ClientConfig clientConfig,

File: common/src/main/java/org/apache/rocketmq/common/utils/AbstractStartAndShutdown.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.common;
+package org.apache.rocketmq.common.utils;
 
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;

File: common/src/main/java/org/apache/rocketmq/common/utils/Shutdown.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.common;
+package org.apache.rocketmq.common.utils;
 
 public interface Shutdown {
     void shutdown() throws Exception;

File: common/src/main/java/org/apache/rocketmq/common/utils/Start.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.common;
+package org.apache.rocketmq.common.utils;
 
 public interface Start {
     void start() throws Exception;

File: common/src/main/java/org/apache/rocketmq/common/utils/StartAndShutdown.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.common;
+package org.apache.rocketmq.common.utils;
 
 public interface StartAndShutdown extends Start, Shutdown {
     default void preShutdown() throws Exception {}

File: proxy/src/main/java/org/apache/rocketmq/proxy/ProxyStartup.java
Patch:
@@ -36,8 +36,8 @@
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
-import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
-import org.apache.rocketmq.proxy.common.StartAndShutdown;
+import org.apache.rocketmq.common.utils.AbstractStartAndShutdown;
+import org.apache.rocketmq.common.utils.StartAndShutdown;
 import org.apache.rocketmq.proxy.config.Configuration;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServer.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
-import org.apache.rocketmq.proxy.common.StartAndShutdown;
+import org.apache.rocketmq.common.utils.StartAndShutdown;
 
 public class GrpcServer implements StartAndShutdown {
     private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/DefaultGrpcMessingActivity.java
Patch:
@@ -42,7 +42,7 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
-import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
+import org.apache.rocketmq.common.utils.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
 import org.apache.rocketmq.proxy.grpc.v2.client.ClientActivity;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplication.java
Patch:
@@ -53,7 +53,7 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.apache.rocketmq.proxy.common.StartAndShutdown;
+import org.apache.rocketmq.common.utils.StartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessingActivity.java
Patch:
@@ -41,7 +41,7 @@
 import io.grpc.stub.StreamObserver;
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.apache.rocketmq.proxy.common.StartAndShutdown;
+import org.apache.rocketmq.common.utils.StartAndShutdown;
 
 public interface GrpcMessingActivity extends StartAndShutdown {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/channel/GrpcChannelManager.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.concurrent.atomic.AtomicLong;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.apache.rocketmq.proxy.common.StartAndShutdown;
+import org.apache.rocketmq.common.utils.StartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManager.java
Patch:
@@ -41,7 +41,7 @@
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.apache.rocketmq.proxy.common.StartAndShutdown;
+import org.apache.rocketmq.common.utils.StartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.MetricCollectorMode;
 import org.apache.rocketmq.proxy.config.ProxyConfig;

File: proxy/src/main/java/org/apache/rocketmq/proxy/metrics/ProxyMetricsManager.java
Patch:
@@ -41,7 +41,7 @@
 import org.apache.rocketmq.broker.metrics.BrokerMetricsManager;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.proxy.common.StartAndShutdown;
+import org.apache.rocketmq.common.utils.StartAndShutdown;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/AbstractProcessor.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.rocketmq.proxy.processor;
 
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
-import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
+import org.apache.rocketmq.common.utils.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
 import org.apache.rocketmq.proxy.service.ServiceManager;

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/DefaultMessagingProcessor.java
Patch:
@@ -39,7 +39,7 @@
 import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
-import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
+import org.apache.rocketmq.common.utils.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.common.Address;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/MessagingProcessor.java
Patch:
@@ -35,7 +35,7 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.proxy.common.Address;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.apache.rocketmq.proxy.common.StartAndShutdown;
+import org.apache.rocketmq.common.utils.StartAndShutdown;
 import org.apache.rocketmq.proxy.service.metadata.MetadataService;
 import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
 import org.apache.rocketmq.proxy.service.route.ProxyTopicRouteData;

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessor.java
Patch:
@@ -40,14 +40,14 @@
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
 import org.apache.rocketmq.common.utils.ConcurrentHashMapUtils;
-import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
+import org.apache.rocketmq.common.utils.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.common.MessageReceiptHandle;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
 import org.apache.rocketmq.proxy.common.ReceiptHandleGroup;
 import org.apache.rocketmq.proxy.common.RenewStrategyPolicy;
-import org.apache.rocketmq.proxy.common.StartAndShutdown;
+import org.apache.rocketmq.common.utils.StartAndShutdown;
 import org.apache.rocketmq.proxy.common.channel.ChannelHelper;
 import org.apache.rocketmq.proxy.common.utils.ExceptionUtils;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/RemotingProtocolServer.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.rocketmq.common.thread.ThreadPoolStatusMonitor;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
-import org.apache.rocketmq.proxy.common.StartAndShutdown;
+import org.apache.rocketmq.common.utils.StartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/channel/RemotingChannelManager.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
-import org.apache.rocketmq.proxy.common.StartAndShutdown;
+import org.apache.rocketmq.common.utils.StartAndShutdown;
 import org.apache.rocketmq.proxy.remoting.RemotingProxyOutClient;
 import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/ServiceManager.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.rocketmq.broker.client.ConsumerManager;
 import org.apache.rocketmq.broker.client.ProducerManager;
-import org.apache.rocketmq.proxy.common.StartAndShutdown;
+import org.apache.rocketmq.common.utils.StartAndShutdown;
 import org.apache.rocketmq.proxy.service.admin.AdminService;
 import org.apache.rocketmq.proxy.service.message.MessageService;
 import org.apache.rocketmq.proxy.service.metadata.MetadataService;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/admin/DefaultAdminService.java
Patch:
@@ -30,8 +30,8 @@
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
-import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIExt;
-import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
+import org.apache.rocketmq.client.impl.mqclient.MQClientAPIExt;
+import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.proxy.service.route.TopicRouteHelper;
 
 public class DefaultAdminService implements AdminService {

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/client/ClusterConsumerManager.java
Patch:
@@ -22,9 +22,9 @@
 import org.apache.rocketmq.broker.client.ConsumerIdsChangeListener;
 import org.apache.rocketmq.broker.client.ConsumerManager;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
-import org.apache.rocketmq.proxy.common.StartAndShutdown;
+import org.apache.rocketmq.common.utils.StartAndShutdown;
 import org.apache.rocketmq.proxy.service.admin.AdminService;
-import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
+import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.proxy.service.route.TopicRouteService;
 import org.apache.rocketmq.proxy.service.sysmessage.HeartbeatSyncer;
 import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/client/ProxyClientRemotingProcessor.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.service.mqclient;
+package org.apache.rocketmq.proxy.service.client;
 
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandlerContext;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/message/ClusterMessageService.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
 import org.apache.rocketmq.proxy.common.utils.FutureUtils;
-import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
+import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
 import org.apache.rocketmq.proxy.service.route.TopicRouteService;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/metadata/ClusterMetadataService.java
Patch:
@@ -28,10 +28,10 @@
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.AbstractCacheLoader;
-import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
+import org.apache.rocketmq.common.utils.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
-import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
+import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.proxy.service.route.TopicRouteHelper;
 import org.apache.rocketmq.proxy.service.route.TopicRouteService;
 import org.apache.rocketmq.remoting.protocol.route.BrokerData;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/ClusterTopicRouteService.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.proxy.common.Address;
-import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
+import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.remoting.protocol.route.BrokerData;
 import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/LocalTopicRouteService.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.proxy.common.Address;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
-import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
+import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.remoting.protocol.route.BrokerData;
 import org.apache.rocketmq.remoting.protocol.route.QueueData;
 import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/TopicRouteService.java
Patch:
@@ -33,11 +33,11 @@
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.AbstractCacheLoader;
-import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
+import org.apache.rocketmq.common.utils.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.common.Address;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
-import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
+import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.remoting.protocol.ResponseCode;
 import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
 import org.checkerframework.checker.nullness.qual.NonNull;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/sysmessage/AbstractSystemMessageSyncer.java
Patch:
@@ -34,11 +34,11 @@
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
-import org.apache.rocketmq.proxy.common.StartAndShutdown;
+import org.apache.rocketmq.common.utils.StartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.service.admin.AdminService;
-import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
+import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
 import org.apache.rocketmq.proxy.service.route.TopicRouteService;
 import org.apache.rocketmq.remoting.RPCHook;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/sysmessage/HeartbeatSyncer.java
Patch:
@@ -39,7 +39,7 @@
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.processor.channel.RemoteChannel;
 import org.apache.rocketmq.proxy.service.admin.AdminService;
-import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
+import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.proxy.service.route.TopicRouteService;
 import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/AbstractTransactionService.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.apache.rocketmq.proxy.common.StartAndShutdown;
+import org.apache.rocketmq.common.utils.StartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/ClusterTransactionService.java
Patch:
@@ -38,7 +38,7 @@
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
-import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
+import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.proxy.service.route.MessageQueueView;
 import org.apache.rocketmq.proxy.service.route.TopicRouteService;
 import org.apache.rocketmq.remoting.protocol.heartbeat.HeartbeatData;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/TransactionDataManager.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
-import org.apache.rocketmq.proxy.common.StartAndShutdown;
+import org.apache.rocketmq.common.utils.StartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 
 public class TransactionDataManager implements StartAndShutdown {

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/BaseServiceTest.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.proxy.config.InitConfigTest;
-import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIExt;
-import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
+import org.apache.rocketmq.client.impl.mqclient.MQClientAPIExt;
+import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.proxy.service.route.MessageQueueView;
 import org.apache.rocketmq.proxy.service.route.TopicRouteService;
 import org.apache.rocketmq.remoting.protocol.ResponseCode;

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/admin/DefaultAdminServiceTest.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.remoting.protocol.ResponseCode;
 import org.apache.rocketmq.remoting.protocol.route.BrokerData;
 import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
-import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIExt;
-import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
+import org.apache.rocketmq.client.impl.mqclient.MQClientAPIExt;
+import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/message/ClusterMessageServiceTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
-import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
+import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.proxy.service.route.TopicRouteService;
 import org.apache.rocketmq.remoting.protocol.ResponseCode;
 import org.apache.rocketmq.remoting.protocol.header.AckMessageRequestHeader;

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/mqclient/MQClientAPIExtTest.java
Patch:
@@ -39,6 +39,8 @@
 import org.apache.rocketmq.client.impl.CommunicationMode;
 import org.apache.rocketmq.client.impl.MQClientAPIImpl;
 import org.apache.rocketmq.client.impl.consumer.PullResultExt;
+import org.apache.rocketmq.client.impl.mqclient.DoNothingClientRemotingProcessor;
+import org.apache.rocketmq.client.impl.mqclient.MQClientAPIExt;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.client.producer.SendStatus;
 import org.apache.rocketmq.common.message.MessageClientIDSetter;

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/mqclient/ProxyClientRemotingProcessorTest.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.rocketmq.broker.client.ProducerManager;
+import org.apache.rocketmq.proxy.service.client.ProxyClientRemotingProcessor;
 import org.apache.rocketmq.common.message.MessageAccessor;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageDecoder;

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/sysmessage/HeartbeatSyncerTest.java
Patch:
@@ -50,8 +50,8 @@
 import org.apache.rocketmq.proxy.remoting.channel.RemotingChannel;
 import org.apache.rocketmq.proxy.service.admin.AdminService;
 import org.apache.rocketmq.proxy.service.channel.SimpleChannel;
-import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIExt;
-import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
+import org.apache.rocketmq.client.impl.mqclient.MQClientAPIExt;
+import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
 import org.apache.rocketmq.proxy.service.route.MessageQueueView;
 import org.apache.rocketmq.proxy.service.route.TopicRouteService;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AckMessageProcessor.java
Patch:
@@ -178,7 +178,7 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
                         this.brokerController.getConsumerOffsetManager().commitOffset(channel.remoteAddress().toString(),
                             requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueId(), nextOffset);
                     }
-                    if (!this.brokerController.getConsumerOrderInfoManager().checkBlock(requestHeader.getTopic(),
+                    if (!this.brokerController.getConsumerOrderInfoManager().checkBlock(null, requestHeader.getTopic(),
                         requestHeader.getConsumerGroup(), requestHeader.getQueueId(), invisibleTime)) {
                         this.brokerController.getPopMessageProcessor().notifyMessageArriving(
                             requestHeader.getTopic(), requestHeader.getConsumerGroup(), requestHeader.getQueueId());

File: broker/src/main/java/org/apache/rocketmq/broker/processor/NotificationProcessor.java
Patch:
@@ -264,7 +264,7 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
     }
 
     private boolean hasMsgFromQueue(boolean isRetry, NotificationRequestHeader requestHeader, int queueId) {
-        if (this.brokerController.getConsumerOrderInfoManager().checkBlock(requestHeader.getTopic(), requestHeader.getConsumerGroup(), queueId, 0)) {
+        if (this.brokerController.getConsumerOrderInfoManager().checkBlock(null, requestHeader.getTopic(), requestHeader.getConsumerGroup(), queueId, 0)) {
             return false;
         }
         String topic = isRetry ? KeyBuilder.buildPopRetryTopic(requestHeader.getTopic(), requestHeader.getConsumerGroup()) : requestHeader.getTopic();

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -706,6 +706,9 @@ public void truncateDirtyFiles(long phyOffset) {
         }
 
         this.mappedFileQueue.truncateDirtyFiles(phyOffset);
+        if (this.confirmOffset > phyOffset) {
+            this.setConfirmOffset(phyOffset);
+        }
     }
 
     protected void onCommitLogAppend(MessageExtBrokerInner msg, AppendMessageResult result, MappedFile commitLogFile) {

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -713,7 +713,6 @@ public void truncateDirtyFiles(long offsetToTruncate) {
             this.reputMessageService = new ConcurrentReputMessageService();
         }
 
-
         long resetReputOffset = Math.min(oldReputFromOffset, offsetToTruncate);
 
         LOGGER.info("oldReputFromOffset is {}, reset reput from offset to {}", oldReputFromOffset, resetReputOffset);
@@ -3262,5 +3261,7 @@ public boolean isTransientStorePoolEnable() {
             (this.brokerConfig.isEnableControllerMode() || this.messageStoreConfig.getBrokerRole() != BrokerRole.SLAVE);
     }
 
-
+    public long getReputFromOffset() {
+        return this.reputMessageService.getReputFromOffset();
+    }
 }

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAClient.java
Patch:
@@ -168,7 +168,6 @@ public void init() throws IOException {
         this.processPosition = 0;
         this.lastReadTimestamp = System.currentTimeMillis();
         this.lastWriteTimestamp = System.currentTimeMillis();
-        haService.updateConfirmOffset(-1);
     }
 
     public void reOpen() throws IOException {
@@ -565,7 +564,7 @@ protected boolean processReadResult(ByteBuffer byteBufferRead) {
                                     AutoSwitchHAClient.this.messageStore.appendToCommitLog(masterOffset, bodyData, 0, bodyData.length);
                                 }
 
-                                haService.updateConfirmOffset(Math.min(confirmOffset, messageStore.getMaxPhyOffset()));
+                                haService.getDefaultMessageStore().setConfirmOffset(Math.min(confirmOffset, messageStore.getMaxPhyOffset()));
 
                                 if (!reportSlaveMaxOffset(HAConnectionState.TRANSFER)) {
                                     LOGGER.error("AutoSwitchHAClient report max offset to master failed");

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAConnection.java
Patch:
@@ -547,7 +547,7 @@ private void buildTransferHeaderBuffer(long nextOffset, int bodySize) {
             // EpochStartOffset
             this.byteBufferHeader.putLong(entry.getStartOffset());
             // Additional info(confirm offset)
-            final long confirmOffset = AutoSwitchHAConnection.this.haService.getConfirmOffset();
+            final long confirmOffset = AutoSwitchHAConnection.this.haService.getDefaultMessageStore().getConfirmOffset();
             this.byteBufferHeader.putLong(confirmOffset);
             this.byteBufferHeader.flip();
         }

File: broker/src/main/java/org/apache/rocketmq/broker/controller/ReplicasManager.java
Patch:
@@ -549,6 +549,7 @@ private boolean createMetadataFileAndDeleteTemp() {
             this.brokerMetadata.updateAndPersist(brokerConfig.getBrokerClusterName(), brokerConfig.getBrokerName(), tempBrokerMetadata.getBrokerId());
             this.tempBrokerMetadata.clear();
             this.brokerControllerId = this.brokerMetadata.getBrokerId();
+            this.haService.setBrokerControllerId(this.brokerControllerId);
             return true;
         } catch (Exception e) {
             LOGGER.error("fail to create metadata file", e);
@@ -600,6 +601,7 @@ private void confirmNowRegisteringState() {
         if (this.brokerMetadata.isLoaded()) {
             this.registerState = RegisterState.CREATE_METADATA_FILE_DONE;
             this.brokerControllerId = brokerMetadata.getBrokerId();
+            this.haService.setBrokerControllerId(this.brokerControllerId);
             return;
         }
         // 2. check if temp metadata exist

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -147,8 +147,8 @@ public DefaultMQProducerImpl(final DefaultMQProducer defaultMQProducer, RPCHook
             log.info("semaphoreAsyncSendNum can not be smaller than 10.");
         }
 
-        if (defaultMQProducer.getBackPressureForAsyncSendNum() > 1024 * 1024) {
-            semaphoreAsyncSendSize = new Semaphore(Math.max(defaultMQProducer.getBackPressureForAsyncSendNum(), 1024 * 1024), true);
+        if (defaultMQProducer.getBackPressureForAsyncSendSize() > 1024 * 1024) {
+            semaphoreAsyncSendSize = new Semaphore(Math.max(defaultMQProducer.getBackPressureForAsyncSendSize(), 1024 * 1024), true);
         } else {
             semaphoreAsyncSendSize = new Semaphore(1024 * 1024, true);
             log.info("semaphoreAsyncSendSize can not be smaller than 1M.");

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/TieredMessageStore.java
Patch:
@@ -153,7 +153,7 @@ public CompletableFuture<GetMessageResult> getMessageAsync(String group, String
                     if (result.getStatus() == GetMessageStatus.OFFSET_FOUND_NULL ||
                         result.getStatus() == GetMessageStatus.OFFSET_OVERFLOW_ONE ||
                         result.getStatus() == GetMessageStatus.OFFSET_OVERFLOW_BADLY) {
-                        if (next.checkInDiskByConsumeOffset(topic, queueId, offset)) {
+                        if (next.checkInStoreByConsumeOffset(topic, queueId, offset)) {
                             logger.debug("TieredMessageStore#getMessageAsync: not found message, try to get message from next store: topic: {}, queue: {}, queue offset: {}, tiered store result: {}, min offset: {}, max offset: {}",
                                 topic, queueId, offset, result.getStatus(), result.getMinOffset(), result.getMaxOffset());
                             TieredStoreMetricsManager.fallbackTotal.add(1, latencyAttributes);

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/TieredMessageStoreTest.java
Patch:
@@ -189,7 +189,7 @@ public void testGetMessageAsync() {
         Properties properties = new Properties();
         properties.setProperty("tieredStorageLevel", "3");
         configuration.update(properties);
-        when(nextStore.checkInDiskByConsumeOffset(anyString(), anyInt(), anyLong())).thenReturn(true);
+        when(nextStore.checkInStoreByConsumeOffset(anyString(), anyInt(), anyLong())).thenReturn(true);
         Assert.assertSame(result2, store.getMessage("group", mq.getTopic(), mq.getQueueId(), 0, 0, null));
     }
 

File: store/src/test/java/org/apache/rocketmq/store/MultiDispatchTest.java
Patch:
@@ -79,7 +79,7 @@ public void queueKey() {
     @Test
     public void wrapMultiDispatch() {
         MessageExtBrokerInner messageExtBrokerInner = buildMessageMultiQueue();
-        messageStore.assignOffset(messageExtBrokerInner, (short) 1);
+        messageStore.assignOffset(messageExtBrokerInner);
         assertEquals(messageExtBrokerInner.getProperty(MessageConst.PROPERTY_INNER_MULTI_QUEUE_OFFSET), "0,0");
     }
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/GetBrokerConfigCommand.java
Patch:
@@ -45,7 +45,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Get broker config by cluster or special broker!";
+        return "Get broker config by cluster or special broker";
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/consumer/GetConsumerConfigSubCommand.java
Patch:
@@ -43,7 +43,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Get consumer config by subscription group name!";
+        return "Get consumer config by subscription group name";
     }
 
     @Override

File: store/src/main/java/org/apache/rocketmq/store/kv/CompactionStore.java
Patch:
@@ -74,7 +74,7 @@ public CompactionStore(DefaultMessageStore defaultMessageStore) {
         this.compactionLogPath = Paths.get(compactionPath, COMPACTION_LOG_DIR).toString();
         this.compactionCqPath = Paths.get(compactionPath, COMPACTION_CQ_DIR).toString();
         this.positionMgr = new CompactionPositionMgr(compactionPath);
-        this.compactionThreadNum = Math.min(Runtime.getRuntime().availableProcessors(), config.getCompactionThreadNum());
+        this.compactionThreadNum = Math.min(Runtime.getRuntime().availableProcessors(), Math.max(1, config.getCompactionThreadNum()));
 
         this.compactionSchedule = Executors.newScheduledThreadPool(this.compactionThreadNum,
             new ThreadFactoryImpl("compactionSchedule_"));

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/RemotingProtocolServer.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.acl.AccessValidator;
+import org.apache.rocketmq.acl.plain.PlainAccessValidator;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.future.FutureTaskExt;
@@ -258,6 +259,7 @@ protected RequestPipeline createRequestPipeline() {
         };
 
         List<AccessValidator> accessValidatorList = new ArrayList<>();
+        accessValidatorList.add(new PlainAccessValidator());
         // add pipeline
         // the last pipe add will execute at the first
         return pipeline.pipe(new AuthenticationPipeline(accessValidatorList));

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/pipeline/AuthenticationPipeline.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.List;
 import org.apache.rocketmq.acl.AccessResource;
 import org.apache.rocketmq.acl.AccessValidator;
-import org.apache.rocketmq.acl.plain.PlainAccessValidator;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
@@ -38,7 +37,6 @@ public AuthenticationPipeline(List<AccessValidator> accessValidatorList) {
     public void execute(ChannelHandlerContext ctx, RemotingCommand request, ProxyContext context) throws Exception {
         ProxyConfig config = ConfigurationManager.getProxyConfig();
         if (config.isEnableACL()) {
-            accessValidatorList.add(new PlainAccessValidator());
             for (AccessValidator accessValidator : accessValidatorList) {
                 AccessResource accessResource = accessValidator.parse(request, context.getRemoteAddress());
                 accessValidator.validate(accessResource);

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -737,8 +737,7 @@ public boolean initialize() throws CloneNotSupportedException {
 
         if (result) {
             try {
-                DefaultMessageStore defaultMessageStore = new DefaultMessageStore(this.messageStoreConfig, this.brokerStatsManager, this.messageArrivingListener, this.brokerConfig);
-                defaultMessageStore.setTopicConfigTable(topicConfigManager.getTopicConfigTable());
+                DefaultMessageStore defaultMessageStore = new DefaultMessageStore(this.messageStoreConfig, this.brokerStatsManager, this.messageArrivingListener, this.brokerConfig, topicConfigManager.getTopicConfigTable());
 
                 if (messageStoreConfig.isEnableDLegerCommitLog()) {
                     DLedgerRoleChangeHandler roleChangeHandler = new DLedgerRoleChangeHandler(this, defaultMessageStore);

File: broker/src/test/java/org/apache/rocketmq/broker/filter/MessageStoreWithFilterTest.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.MixAll;
@@ -159,7 +160,7 @@ public void arriving(String topic, int queueId, long logicOffset, long tagsCode,
                                      long msgStoreTime, byte[] filterBitMap, Map<String, String> properties) {
                 }
             }
-            , brokerConfig);
+            , brokerConfig, new ConcurrentHashMap<>());
 
         master.getDispatcherList().addFirst(new CommitLogDispatcher() {
             @Override

File: broker/src/test/java/org/apache/rocketmq/broker/schedule/ScheduleMessageServiceTest.java
Patch:
@@ -119,7 +119,7 @@ public void setUp() throws Exception {
 
         brokerConfig = new BrokerConfig();
         BrokerStatsManager manager = new BrokerStatsManager(brokerConfig.getBrokerClusterName(), brokerConfig.isEnableDetailStat());
-        messageStore = new DefaultMessageStore(messageStoreConfig, manager, new MyMessageArrivingListener(), new BrokerConfig());
+        messageStore = new DefaultMessageStore(messageStoreConfig, manager, new MyMessageArrivingListener(), new BrokerConfig(), new ConcurrentHashMap<>());
 
         assertThat(messageStore.load()).isTrue();
 

File: store/src/main/java/org/apache/rocketmq/store/kv/CompactionStore.java
Patch:
@@ -29,9 +29,9 @@
 import org.apache.rocketmq.common.utils.CleanupPolicyUtils;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.store.DefaultMessageStore;
 import org.apache.rocketmq.store.DispatchRequest;
 import org.apache.rocketmq.store.GetMessageResult;
-import org.apache.rocketmq.store.MessageStore;
 import org.apache.rocketmq.store.SelectMappedBufferResult;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 
@@ -53,7 +53,7 @@ public class CompactionStore {
     private final String compactionPath;
     private final String compactionLogPath;
     private final String compactionCqPath;
-    private final MessageStore defaultMessageStore;
+    private final DefaultMessageStore defaultMessageStore;
     private final CompactionPositionMgr positionMgr;
     private final ConcurrentHashMap<String, CompactionLog> compactionLogTable;
     private final ScheduledExecutorService compactionSchedule;
@@ -65,7 +65,7 @@ public class CompactionStore {
 
     private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
 
-    public CompactionStore(MessageStore defaultMessageStore) {
+    public CompactionStore(DefaultMessageStore defaultMessageStore) {
         this.defaultMessageStore = defaultMessageStore;
         this.compactionLogTable = new ConcurrentHashMap<>();
         MessageStoreConfig config = defaultMessageStore.getMessageStoreConfig();

File: store/src/test/java/org/apache/rocketmq/store/AppendCallbackTest.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.List;
 import java.util.Set;
 
+import java.util.concurrent.ConcurrentHashMap;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.message.Message;
@@ -55,7 +56,7 @@ public void init() throws Exception {
         messageStoreConfig.setStorePathRootDir(System.getProperty("java.io.tmpdir") + File.separator + "unitteststore");
         messageStoreConfig.setStorePathCommitLog(System.getProperty("java.io.tmpdir") + File.separator + "unitteststore" + File.separator + "commitlog");
         //too much reference
-        DefaultMessageStore messageStore = new DefaultMessageStore(messageStoreConfig, null, null, new BrokerConfig());
+        DefaultMessageStore messageStore = new DefaultMessageStore(messageStoreConfig, null, null, new BrokerConfig(), new ConcurrentHashMap<>());
         CommitLog commitLog = new CommitLog(messageStore);
         callback = commitLog.new DefaultAppendMessageCallback();
     }

File: store/src/test/java/org/apache/rocketmq/store/BatchPutMessageTest.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.message.Message;
@@ -78,7 +79,7 @@ private MessageStore buildMessageStore() throws Exception {
         messageStoreConfig.setStorePathCommitLog(System.getProperty("java.io.tmpdir") + File.separator
             + "putmessagesteststore" + File.separator + "commitlog");
         messageStoreConfig.setHaListenPort(0);
-        return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager("simpleTest", true), new MyMessageArrivingListener(), new BrokerConfig());
+        return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager("simpleTest", true), new MyMessageArrivingListener(), new BrokerConfig(), new ConcurrentHashMap<>());
     }
 
     @Test

File: store/src/test/java/org/apache/rocketmq/store/ConsumeQueueTest.java
Patch:
@@ -24,6 +24,7 @@
 import java.net.SocketAddress;
 import java.net.UnknownHostException;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.TimeUnit;
 
@@ -151,7 +152,7 @@ public void arriving(String topic, int queueId, long logicOffset, long tagsCode,
                     long msgStoreTime, byte[] filterBitMap, Map<String, String> properties) {
                 }
             }
-            , brokerConfig);
+            , brokerConfig, new ConcurrentHashMap<>());
 
         assertThat(master.load()).isTrue();
 
@@ -179,7 +180,7 @@ public void arriving(String topic, int queueId, long logicOffset, long tagsCode,
                     long msgStoreTime, byte[] filterBitMap, Map<String, String> properties) {
                 }
             }
-            , brokerConfig);
+            , brokerConfig, new ConcurrentHashMap<>());
 
         assertThat(master.load()).isTrue();
 

File: store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreCleanFilesTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.store;
 
+import java.util.concurrent.ConcurrentHashMap;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.UtilAll;
@@ -483,7 +484,7 @@ private MessageStoreConfig genMessageStoreConfig(String deleteWhen, int diskMaxU
 
     private void initMessageStore(MessageStoreConfig messageStoreConfig, double diskSpaceCleanForciblyRatio) throws Exception {
         messageStore = new DefaultMessageStore(messageStoreConfig,
-                new BrokerStatsManager("test", true), new MyMessageArrivingListener(), new BrokerConfig());
+                new BrokerStatsManager("test", true), new MyMessageArrivingListener(), new BrokerConfig(), new ConcurrentHashMap<>());
 
         cleanCommitLogService = getCleanCommitLogService();
         cleanConsumeQueueService = getCleanConsumeQueueService();

File: store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreShutDownTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.rocketmq.store;
 
 import java.io.File;
+import java.util.concurrent.ConcurrentHashMap;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.store.config.FlushDiskType;
@@ -74,7 +75,7 @@ public DefaultMessageStore buildMessageStore() throws Exception {
         String storeRootPath = System.getProperty("java.io.tmpdir") + File.separator + "store";
         messageStoreConfig.setStorePathRootDir(storeRootPath);
         messageStoreConfig.setHaListenPort(0);
-        return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager("simpleTest", true), null, new BrokerConfig());
+        return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager("simpleTest", true), null, new BrokerConfig(), new ConcurrentHashMap<>());
     }
 
 }

File: store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreTest.java
Patch:
@@ -99,7 +99,7 @@ public void test_repeat_restart() throws Exception {
         messageStoreConfig.setMaxIndexNum(100 * 10);
         messageStoreConfig.setStorePathRootDir(System.getProperty("java.io.tmpdir") + File.separator + "store");
         messageStoreConfig.setHaListenPort(0);
-        MessageStore master = new DefaultMessageStore(messageStoreConfig, null, new MyMessageArrivingListener(), new BrokerConfig());
+        MessageStore master = new DefaultMessageStore(messageStoreConfig, null, new MyMessageArrivingListener(), new BrokerConfig(), new ConcurrentHashMap<>());
 
         boolean load = master.load();
         assertTrue(load);
@@ -144,7 +144,7 @@ private MessageStore buildMessageStore(String storePathRootDir) throws Exception
         return new DefaultMessageStore(messageStoreConfig,
             new BrokerStatsManager("simpleTest", true),
             new MyMessageArrivingListener(),
-            new BrokerConfig());
+            new BrokerConfig(), new ConcurrentHashMap<>());
     }
 
     @Test

File: store/src/test/java/org/apache/rocketmq/store/HATest.java
Patch:
@@ -27,6 +27,7 @@
 import java.time.Duration;
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.MixAll;
@@ -250,7 +251,7 @@ public void destroy() throws Exception {
     private MessageStore buildMessageStore(MessageStoreConfig messageStoreConfig, long brokerId) throws Exception {
         BrokerConfig brokerConfig = new BrokerConfig();
         brokerConfig.setBrokerId(brokerId);
-        return new DefaultMessageStore(messageStoreConfig, brokerStatsManager, null, brokerConfig);
+        return new DefaultMessageStore(messageStoreConfig, brokerStatsManager, null, brokerConfig, new ConcurrentHashMap<>());
     }
 
     private void buildMessageStoreConfig(MessageStoreConfig messageStoreConfig) {

File: store/src/test/java/org/apache/rocketmq/store/MultiDispatchTest.java
Patch:
@@ -21,6 +21,7 @@
 import java.net.InetSocketAddress;
 import java.nio.charset.Charset;
 
+import java.util.concurrent.ConcurrentHashMap;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.message.MessageConst;
@@ -57,7 +58,7 @@ public void init() throws Exception {
         messageStoreConfig.setEnableMultiDispatch(true);
         BrokerConfig brokerConfig = new BrokerConfig();
         //too much reference
-        messageStore = new DefaultMessageStore(messageStoreConfig, null, null, brokerConfig);
+        messageStore = new DefaultMessageStore(messageStoreConfig, null, null, brokerConfig, new ConcurrentHashMap<>());
         consumeQueue = new ConsumeQueue("xxx", 0,
             getStorePathConsumeQueue(messageStoreConfig.getStorePathRootDir()), messageStoreConfig.getMappedFileSizeConsumeQueue(), messageStore);
     }

File: store/src/test/java/org/apache/rocketmq/store/dledger/DLedgerMultiPathTest.java
Patch:
@@ -21,6 +21,7 @@
 import java.time.Duration;
 import java.util.Objects;
 import java.util.UUID;
+import java.util.concurrent.ConcurrentHashMap;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.store.DefaultMessageStore;
@@ -107,7 +108,7 @@ protected DefaultMessageStore createDLedgerMessageStore(String base, String grou
         storeConfig.setdLegerSelfId(selfId);
         DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig, new BrokerStatsManager("DLedgerCommitLogTest", true), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {
 
-        }, new BrokerConfig());
+        }, new BrokerConfig(), new ConcurrentHashMap<>());
         Assert.assertTrue(defaultMessageStore.load());
         defaultMessageStore.start();
         return defaultMessageStore;

File: store/src/test/java/org/apache/rocketmq/store/dledger/MessageStoreTestBase.java
Patch:
@@ -21,6 +21,7 @@
 import java.io.File;
 import java.net.UnknownHostException;
 import java.util.Arrays;
+import java.util.concurrent.ConcurrentHashMap;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
@@ -60,7 +61,7 @@ protected DefaultMessageStore createDledgerMessageStore(String base, String grou
         storeConfig.setRecheckReputOffsetFromCq(true);
         DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig,  new BrokerStatsManager("DLedgerCommitlogTest", true), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {
 
-        }, new BrokerConfig());
+        }, new BrokerConfig(), new ConcurrentHashMap<>());
         DLedgerServer dLegerServer = ((DLedgerCommitLog) defaultMessageStore.getCommitLog()).getdLedgerServer();
         if (leaderId != null) {
             dLegerServer.getdLedgerConfig().setEnableLeaderElector(false);
@@ -109,7 +110,7 @@ protected DefaultMessageStore createMessageStore(String base, boolean createAbor
         storeConfig.setFlushDiskType(FlushDiskType.ASYNC_FLUSH);
         DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig,  new BrokerStatsManager("CommitlogTest", true), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {
 
-        }, new BrokerConfig());
+        }, new BrokerConfig(), new ConcurrentHashMap<>());
 
         if (createAbort) {
             String fileName = StorePathConfigHelper.getAbortFile(storeConfig.getStorePathRootDir());

File: store/src/test/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHATest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.store.ha.autoswitch;
 
+import java.util.concurrent.ConcurrentHashMap;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.MixAll;
@@ -497,7 +498,7 @@ private DefaultMessageStore buildMessageStore(MessageStoreConfig messageStoreCon
         BrokerConfig brokerConfig = new BrokerConfig();
         brokerConfig.setBrokerId(brokerId);
         brokerConfig.setEnableControllerMode(true);
-        return new DefaultMessageStore(messageStoreConfig, brokerStatsManager, null, brokerConfig);
+        return new DefaultMessageStore(messageStoreConfig, brokerStatsManager, null, brokerConfig, new ConcurrentHashMap<>());
     }
 
     private void buildMessageStoreConfig(MessageStoreConfig messageStoreConfig, int mappedFileSize) {

File: store/src/test/java/org/apache/rocketmq/store/queue/BatchConsumeQueueTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.store.queue;
 
+import java.util.concurrent.ConcurrentHashMap;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.store.ConsumeQueue;
 import org.apache.rocketmq.store.DefaultMessageStore;
@@ -299,7 +300,7 @@ protected MessageStore createMessageStore(String baseDir) throws Exception {
             new BrokerStatsManager("simpleTest", true),
             (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {
             },
-            new BrokerConfig());
+            new BrokerConfig(), new ConcurrentHashMap<>());
     }
 
 }

File: store/src/test/java/org/apache/rocketmq/store/queue/ConsumeQueueTest.java
Patch:
@@ -20,6 +20,7 @@
 import java.nio.ByteBuffer;
 import java.util.Map;
 import java.util.UUID;
+import java.util.concurrent.ConcurrentHashMap;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.attribute.CQType;
@@ -74,7 +75,7 @@ protected DefaultMessageStore gen() throws Exception {
         DefaultMessageStore master = new DefaultMessageStore(
             messageStoreConfig, new BrokerStatsManager(brokerConfig),
             (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {
-            }, brokerConfig);
+            }, brokerConfig, new ConcurrentHashMap<>());
 
         assertThat(master.load()).isTrue();
 
@@ -112,7 +113,7 @@ protected void putMsg(DefaultMessageStore messageStore) throws Exception {
     public void testIterator() throws Exception {
         final int msgNum = 100;
         final int msgSize = 1000;
-        MessageStore messageStore =  createMessageStore(null, true);
+        MessageStore messageStore =  createMessageStore(null, true, null);
         messageStore.load();
         String topic = UUID.randomUUID().toString();
         //The initial min max offset, before and after the creation of consume queue

File: store/src/test/java/org/apache/rocketmq/store/timer/TimerMessageStoreTest.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.Callable;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.rocketmq.common.BrokerConfig;
@@ -99,7 +100,7 @@ public void init() throws Exception {
         storeConfig.setTimerInterceptDelayLevel(true);
         storeConfig.setTimerPrecisionMs(precisionMs);
 
-        messageStore = new DefaultMessageStore(storeConfig, new BrokerStatsManager("TimerTest",false), new MyMessageArrivingListener(), new BrokerConfig());
+        messageStore = new DefaultMessageStore(storeConfig, new BrokerStatsManager("TimerTest",false), new MyMessageArrivingListener(), new BrokerConfig(), new ConcurrentHashMap<>());
         boolean load = messageStore.load();
         assertTrue(load);
         messageStore.start();

File: store/src/main/java/org/apache/rocketmq/store/queue/BatchConsumeQueue.java
Patch:
@@ -41,7 +41,7 @@
 import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.logfile.MappedFile;
 
-public class BatchConsumeQueue implements ConsumeQueueInterface, FileQueueLifeCycle {
+public class BatchConsumeQueue implements ConsumeQueueInterface {
     protected static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
 
     /**

File: store/src/main/java/org/apache/rocketmq/store/queue/ConsumeQueueInterface.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.rocketmq.store.DispatchRequest;
 import org.apache.rocketmq.store.MessageFilter;
 
-public interface ConsumeQueueInterface {
+public interface ConsumeQueueInterface extends FileQueueLifeCycle {
     /**
      * Get the topic name
      * @return the topic this cq belongs to.

File: store/src/main/java/org/apache/rocketmq/store/queue/ConsumeQueueStore.java
Patch:
@@ -79,7 +79,7 @@ public void setTopicConfigTable(ConcurrentMap<String, TopicConfig> topicConfigTa
     }
 
     private FileQueueLifeCycle getLifeCycle(String topic, int queueId) {
-        return (FileQueueLifeCycle) findOrCreateConsumeQueue(topic, queueId);
+        return findOrCreateConsumeQueue(topic, queueId);
     }
 
     public long rollNextFile(ConsumeQueueInterface consumeQueue, final long offset) {
@@ -220,7 +220,7 @@ public boolean recoverConcurrently() {
                     FutureTask<Boolean> futureTask = new FutureTask<>(() -> {
                         boolean ret = true;
                         try {
-                            ((FileQueueLifeCycle) logic).recover();
+                            logic.recover();
                         } catch (Throwable e) {
                             ret = false;
                             log.error("Exception occurs while recover consume queue concurrently, " +

File: store/src/main/java/org/apache/rocketmq/store/queue/SparseConsumeQueue.java
Patch:
@@ -330,7 +330,7 @@ private <T> T getMax(MappedFile mappedFile, Function<ByteBuffer, T> function) {
             short batchSize = byteBuffer.getShort();
             if (offset >= 0 && size > 0 && msgBaseOffset >= 0 && batchSize > 0) {
                 byteBuffer.position(i);     //reset position
-                return function.apply(byteBuffer);
+                return function.apply(byteBuffer.slice());
             }
         }
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/DefaultPullMessageResultHandler.java
Patch:
@@ -154,8 +154,8 @@ public RemotingCommand handle(final GetMessageResult getMessageResult,
                             .addListener((ChannelFutureListener) future -> {
                                 getMessageResult.release();
                                 Attributes attributes = RemotingMetricsManager.newAttributesBuilder()
-                                    .put(LABEL_REQUEST_CODE, RemotingMetricsManager.getRequestCodeDesc(request.getCode()))
-                                    .put(LABEL_RESPONSE_CODE, RemotingMetricsManager.getResponseCodeDesc(finalResponse.getCode()))
+                                    .put(LABEL_REQUEST_CODE, RemotingHelper.getRequestCodeDesc(request.getCode()))
+                                    .put(LABEL_RESPONSE_CODE, RemotingHelper.getResponseCodeDesc(finalResponse.getCode()))
                                     .put(LABEL_RESULT, RemotingMetricsManager.getWriteAndFlushResult(future))
                                     .build();
                                 RemotingMetricsManager.rpcLatency.record(request.getProcessTimer().elapsed(TimeUnit.MILLISECONDS), attributes);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PeekMessageProcessor.java
Patch:
@@ -201,8 +201,8 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
                             .addListener((ChannelFutureListener) future -> {
                                 tmpGetMessageResult.release();
                                 Attributes attributes = RemotingMetricsManager.newAttributesBuilder()
-                                    .put(LABEL_REQUEST_CODE, RemotingMetricsManager.getRequestCodeDesc(request.getCode()))
-                                    .put(LABEL_RESPONSE_CODE, RemotingMetricsManager.getResponseCodeDesc(finalResponse.getCode()))
+                                    .put(LABEL_REQUEST_CODE, RemotingHelper.getRequestCodeDesc(request.getCode()))
+                                    .put(LABEL_RESPONSE_CODE, RemotingHelper.getResponseCodeDesc(finalResponse.getCode()))
                                     .put(LABEL_RESULT, RemotingMetricsManager.getWriteAndFlushResult(future))
                                     .build();
                                 RemotingMetricsManager.rpcLatency.record(request.getProcessTimer().elapsed(TimeUnit.MILLISECONDS), attributes);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java
Patch:
@@ -497,8 +497,8 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
                                 .addListener((ChannelFutureListener) future -> {
                                     tmpGetMessageResult.release();
                                     Attributes attributes = RemotingMetricsManager.newAttributesBuilder()
-                                        .put(LABEL_REQUEST_CODE, RemotingMetricsManager.getRequestCodeDesc(request.getCode()))
-                                        .put(LABEL_RESPONSE_CODE, RemotingMetricsManager.getResponseCodeDesc(finalResponse.getCode()))
+                                        .put(LABEL_REQUEST_CODE, RemotingHelper.getRequestCodeDesc(request.getCode()))
+                                        .put(LABEL_RESPONSE_CODE, RemotingHelper.getResponseCodeDesc(finalResponse.getCode()))
                                         .put(LABEL_RESULT, RemotingMetricsManager.getWriteAndFlushResult(future))
                                         .build();
                                     RemotingMetricsManager.rpcLatency.record(request.getProcessTimer().elapsed(TimeUnit.MILLISECONDS), attributes);

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ContextVariable.java
Patch:
@@ -26,4 +26,6 @@ public class ContextVariable {
     public static final String CLIENT_VERSION = "client-version";
     public static final String REMAINING_MS = "remaining-ms";
     public static final String ACTION = "action";
+    public static final String PROTOCOL_TYPE = "protocol-type";
+
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/AuthenticationInterceptor.java
Patch:
@@ -49,6 +49,7 @@ public <R, W> ServerCall.Listener<R> interceptCall(ServerCall<R, W> call, Metada
             public void onMessage(R message) {
                 GeneratedMessageV3 messageV3 = (GeneratedMessageV3) message;
                 headers.put(InterceptorConstants.RPC_NAME, messageV3.getDescriptorForType().getFullName());
+                headers.put(InterceptorConstants.SIMPLE_RPC_NAME, messageV3.getDescriptorForType().getName());
                 if (ConfigurationManager.getProxyConfig().isEnableACL()) {
                     try {
                         AuthenticationHeader authenticationHeader = AuthenticationHeader.builder()

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/InterceptorConstants.java
Patch:
@@ -59,6 +59,9 @@ public class InterceptorConstants {
     public static final Metadata.Key<String> RPC_NAME
         = Metadata.Key.of("x-mq-rpc-name", Metadata.ASCII_STRING_MARSHALLER);
 
+    public static final Metadata.Key<String> SIMPLE_RPC_NAME
+            = Metadata.Key.of("x-mq-simple-rpc-name", Metadata.ASCII_STRING_MARSHALLER);
+
     public static final Metadata.Key<String> SESSION_TOKEN
         = Metadata.Key.of("x-mq-session-token", Metadata.ASCII_STRING_MARSHALLER);
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplication.java
Patch:
@@ -63,6 +63,7 @@
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.proxy.processor.channel.ChannelProtocolType;
 
 public class GrpcMessagingApplication extends MessagingServiceGrpc.MessagingServiceImplBase implements StartAndShutdown {
     private final static Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
@@ -171,9 +172,10 @@ protected ProxyContext createContext() {
             .setLocalAddress(getDefaultStringMetadataInfo(headers, InterceptorConstants.LOCAL_ADDRESS))
             .setRemoteAddress(getDefaultStringMetadataInfo(headers, InterceptorConstants.REMOTE_ADDRESS))
             .setClientID(getDefaultStringMetadataInfo(headers, InterceptorConstants.CLIENT_ID))
+            .setProtocolType(ChannelProtocolType.GRPC_V2.getName())
             .setLanguage(getDefaultStringMetadataInfo(headers, InterceptorConstants.LANGUAGE))
             .setClientVersion(getDefaultStringMetadataInfo(headers, InterceptorConstants.CLIENT_VERSION))
-            .setAction(getDefaultStringMetadataInfo(headers, InterceptorConstants.RPC_NAME));
+            .setAction(getDefaultStringMetadataInfo(headers, InterceptorConstants.SIMPLE_RPC_NAME));
         if (ctx.getDeadline() != null) {
             context.setRemainingMs(ctx.getDeadline().timeRemaining(TimeUnit.MILLISECONDS));
         }

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessor.java
Patch:
@@ -154,7 +154,7 @@ protected void scheduleRenewTask() {
             log.error("unexpect error when schedule renew task", e);
         }
 
-        log.info("scan for renewal done. cost:{}ms", stopwatch.elapsed().toMillis());
+        log.debug("scan for renewal done. cost:{}ms", stopwatch.elapsed().toMillis());
     }
 
     protected void renewMessage(ReceiptHandleGroup group, String msgID, String handleStr) {

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -205,8 +205,8 @@ public static void writeResponse(Channel channel, RemotingCommand request, @Null
         }
         AttributesBuilder attributesBuilder = RemotingMetricsManager.newAttributesBuilder()
             .put(LABEL_IS_LONG_POLLING, request.isSuspended())
-            .put(LABEL_REQUEST_CODE, RemotingMetricsManager.getRequestCodeDesc(request.getCode()))
-            .put(LABEL_RESPONSE_CODE, RemotingMetricsManager.getResponseCodeDesc(response.getCode()));
+            .put(LABEL_REQUEST_CODE, RemotingHelper.getRequestCodeDesc(request.getCode()))
+            .put(LABEL_RESPONSE_CODE, RemotingHelper.getResponseCodeDesc(response.getCode()));
         if (request.isOnewayRPC()) {
             attributesBuilder.put(LABEL_RESULT, RESULT_ONEWAY);
             RemotingMetricsManager.rpcLatency.record(request.getProcessTimer().elapsed(TimeUnit.MILLISECONDS), attributesBuilder.build());
@@ -287,7 +287,7 @@ public void processRequestCommand(final ChannelHandlerContext ctx, final Remotin
             writeResponse(ctx.channel(), cmd, response);
         } catch (Throwable e) {
             AttributesBuilder attributesBuilder = RemotingMetricsManager.newAttributesBuilder()
-                .put(LABEL_REQUEST_CODE, RemotingMetricsManager.getRequestCodeDesc(cmd.getCode()))
+                .put(LABEL_REQUEST_CODE, RemotingHelper.getRequestCodeDesc(cmd.getCode()))
                 .put(LABEL_RESULT, RESULT_PROCESS_REQUEST_FAILED);
             RemotingMetricsManager.rpcLatency.record(cmd.getProcessTimer().elapsed(TimeUnit.MILLISECONDS), attributesBuilder.build());
         }

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RequestCode.java
Patch:
@@ -278,6 +278,4 @@ public class RequestCode {
     public static final int CONTROLLER_GET_NEXT_BROKER_ID = 1012;
 
     public static final int CONTROLLER_APPLY_BROKER_ID = 1013;
-
-
 }

File: store/src/main/java/org/apache/rocketmq/store/AppendMessageCallback.java
Patch:
@@ -26,15 +26,15 @@
 public interface AppendMessageCallback {
 
     /**
-     * After message serialization, write MapedByteBuffer
+     * After message serialization, write MappedByteBuffer
      *
      * @return How many bytes to write
      */
     AppendMessageResult doAppend(final long fileFromOffset, final ByteBuffer byteBuffer,
         final int maxBlank, final MessageExtBrokerInner msg, PutMessageContext putMessageContext);
 
     /**
-     * After batched message serialization, write MapedByteBuffer
+     * After batched message serialization, write MappedByteBuffer
      *
      * @param messageExtBatch, backed up by a byte array
      * @return How many bytes to write

File: store/src/main/java/org/apache/rocketmq/store/timer/TimerMessageStore.java
Patch:
@@ -1600,7 +1600,6 @@ public void run() {
                     timerLog.getMappedFileQueue().flush(0);
                     timerWheel.flush();
                     timerCheckpoint.flush();
-                    timerLog.getMappedFileQueue().flush(0);
                     if (System.currentTimeMillis() - start > storeConfig.getTimerProgressLogIntervalMs()) {
                         start = System.currentTimeMillis();
                         long tmpQueueOffset = currQueueOffset;

File: common/src/main/java/org/apache/rocketmq/common/utils/NetworkUtil.java
Patch:
@@ -116,7 +116,7 @@ public static String getLocalAddress() {
             // prefer ipv4
             if (!ipv4Result.isEmpty()) {
                 for (String ip : ipv4Result) {
-                    if (ip.startsWith("127.0") || ip.startsWith("192.168")) {
+                    if (ip.startsWith("127.0") || ip.startsWith("192.168") || ip.startsWith("0.")) {
                         continue;
                     }
 

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -2885,7 +2885,7 @@ private void pollBatchDispatchRequest() {
                     BatchDispatchRequest task = batchDispatchRequestQueue.peek();
                     batchDispatchRequestExecutor.execute(() -> {
                         try {
-                            ByteBuffer tmpByteBuffer = task.byteBuffer.duplicate();
+                            ByteBuffer tmpByteBuffer = task.byteBuffer;
                             tmpByteBuffer.position(task.position);
                             tmpByteBuffer.limit(task.position + task.size);
                             List<DispatchRequest> dispatchRequestList = new ArrayList<>();
@@ -3018,7 +3018,7 @@ public void createBatchDispatchRequest(ByteBuffer byteBuffer, int position, int
                 return;
             }
             mappedPageHoldCount.getAndIncrement();
-            BatchDispatchRequest task = new BatchDispatchRequest(byteBuffer, position, size, batchId++);
+            BatchDispatchRequest task = new BatchDispatchRequest(byteBuffer.duplicate(), position, size, batchId++);
             batchDispatchRequestQueue.offer(task);
         }
 

File: broker/src/main/java/org/apache/rocketmq/broker/dledger/DLedgerRoleChangeHandler.java
Patch:
@@ -77,10 +77,10 @@ public void run() {
                                     succ = false;
                                     break;
                                 }
-                                if (dLegerServer.getdLedgerStore().getLedgerEndIndex() == -1) {
+                                if (dLegerServer.getDLedgerStore().getLedgerEndIndex() == -1) {
                                     break;
                                 }
-                                if (dLegerServer.getdLedgerStore().getLedgerEndIndex() == dLegerServer.getdLedgerStore().getCommittedIndex()
+                                if (dLegerServer.getDLedgerStore().getLedgerEndIndex() == dLegerServer.getDLedgerStore().getCommittedIndex()
                                     && messageStore.dispatchBehindBytes() == 0) {
                                     break;
                                 }

File: store/src/main/java/org/apache/rocketmq/store/ConsumeQueue.java
Patch:
@@ -723,7 +723,7 @@ public void putMessagePositionInfoWrapper(DispatchRequest request) {
     }
 
     private boolean checkMultiDispatchQueue(DispatchRequest dispatchRequest) {
-        if (!this.messageStore.getMessageStoreConfig().isEnableMultiDispatch()) {
+        if (!this.messageStore.getMessageStoreConfig().isEnableMultiDispatch() || dispatchRequest.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
             return false;
         }
         Map<String, String> prop = dispatchRequest.getPropertiesMap();
@@ -791,7 +791,7 @@ public void assignQueueOffset(QueueOffsetAssigner queueOffsetAssigner, MessageEx
         long queueOffset = queueOffsetAssigner.assignQueueOffset(topicQueueKey, messageNum);
         msg.setQueueOffset(queueOffset);
         // For LMQ
-        if (!messageStore.getMessageStoreConfig().isEnableMultiDispatch()) {
+        if (!messageStore.getMessageStoreConfig().isEnableMultiDispatch() || msg.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
             return;
         }
         String multiDispatchQueue = msg.getProperty(MessageConst.PROPERTY_INNER_MULTI_DISPATCH);

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -2812,7 +2812,7 @@ public void doReput() {
 
         private void notifyMessageArrive4MultiQueue(DispatchRequest dispatchRequest) {
             Map<String, String> prop = dispatchRequest.getPropertiesMap();
-            if (prop == null) {
+            if (prop == null || dispatchRequest.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
                 return;
             }
             String multiDispatchQueue = prop.get(MessageConst.PROPERTY_INNER_MULTI_DISPATCH);

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java
Patch:
@@ -193,7 +193,7 @@ public class ProxyConfig implements ConfigFile {
 
     private boolean enableAclRpcHookForClusterMode = false;
 
-    private boolean useDelayLevel = true;
+    private boolean useDelayLevel = false;
     private String messageDelayLevel = "1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h";
     private transient Map<Integer /* level */, Long/* delay timeMillis */> delayLevelTable = new ConcurrentHashMap<>();
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/producer/SendMessageActivityTest.java
Patch:
@@ -229,7 +229,7 @@ public void testBuildMessage() {
             Resource.newBuilder().setName(TOPIC).build()).get(0);
 
         assertEquals(MessageClientIDSetter.getUniqID(messageExt), msgId);
-        assertEquals(String.valueOf(2), messageExt.getProperty(MessageConst.PROPERTY_DELAY_TIME_LEVEL));
+        assertEquals(deliveryTime, Long.parseLong(messageExt.getProperty(MessageConst.PROPERTY_TIMER_DELIVER_MS)));
     }
 
     @Test

File: store/src/main/java/org/apache/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -59,7 +59,7 @@ public class MessageStoreConfig {
 
     private int maxOffsetMapSize = 100 * 1024 * 1024;
 
-    private int compactionThreadNum = 0;
+    private int compactionThreadNum = 6;
 
     private boolean enableCompaction = true;
 

File: acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java
Patch:
@@ -16,15 +16,14 @@
  */
 package org.apache.rocketmq.acl.common;
 
-import com.alibaba.fastjson.JSONObject;
-
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.InputStream;
 import java.io.PrintWriter;
 import java.util.Map;
 import java.util.SortedMap;
 
+import com.alibaba.fastjson.JSONObject;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
@@ -254,7 +253,7 @@ public static <T> T getYamlDataObject(InputStream fis, Class<T> clazz) {
         }
     }
 
-    public static boolean writeDataObject(String path, Map<String, Object> dataMap) {
+    public static boolean writeDataObject(String path, Object dataMap) {
         Yaml yaml = new Yaml();
         try (PrintWriter pw = new PrintWriter(path, "UTF-8")) {
             String dumpAsMap = yaml.dumpAsMap(dataMap);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AckMessageProcessor.java
Patch:
@@ -71,7 +71,7 @@ public void startPopReviveService() {
 
     public void shutdownPopReviveService() {
         for (PopReviveService popReviveService : popReviveServices) {
-            popReviveService.stop();
+            popReviveService.shutdown();
         }
     }
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/EndTransactionProcessor.java
Patch:
@@ -300,6 +300,7 @@ private RemotingCommand sendFinalMessage(MessageExtBrokerInner msgInner) {
                     response.setCode(ResponseCode.SYSTEM_ERROR);
                     response.setRemark(String.format("accurate timer message is not enabled, timerWheelEnable is %s",
                         this.brokerController.getMessageStoreConfig().isTimerWheelEnable()));
+                    break;
                 case UNKNOWN_ERROR:
                     response.setCode(ResponseCode.SYSTEM_ERROR);
                     response.setRemark("UNKNOWN_ERROR");

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PullMessageProcessor.java
Patch:
@@ -308,13 +308,15 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
 
         if (!PermName.isReadable(this.brokerController.getBrokerConfig().getBrokerPermission())) {
             response.setCode(ResponseCode.NO_PERMISSION);
+            responseHeader.setForbiddenType(ForbiddenType.BROKER_FORBIDDEN);
             response.setRemark(String.format("the broker[%s] pulling message is forbidden",
                 this.brokerController.getBrokerConfig().getBrokerIP1()));
             return response;
         }
 
         if (request.getCode() == RequestCode.LITE_PULL_MESSAGE && !this.brokerController.getBrokerConfig().isLitePullMessageEnable()) {
             response.setCode(ResponseCode.NO_PERMISSION);
+            responseHeader.setForbiddenType(ForbiddenType.BROKER_FORBIDDEN);
             response.setRemark(
                 "the broker[" + this.brokerController.getBrokerConfig().getBrokerIP1() + "] for lite pull consumer is forbidden");
             return response;
@@ -335,9 +337,6 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
             return response;
         }
 
-        final boolean hasCommitOffsetFlag = PullSysFlag.hasCommitOffsetFlag(requestHeader.getSysFlag());
-        final boolean hasSubscriptionFlag = PullSysFlag.hasSubscriptionFlag(requestHeader.getSysFlag());
-
         TopicConfig topicConfig = this.brokerController.getTopicConfigManager().selectTopicConfig(requestHeader.getTopic());
         if (null == topicConfig) {
             LOGGER.error("the topic {} not exist, consumer: {}", requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(channel));
@@ -386,6 +385,7 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
 
         SubscriptionData subscriptionData = null;
         ConsumerFilterData consumerFilterData = null;
+        final boolean hasSubscriptionFlag = PullSysFlag.hasSubscriptionFlag(requestHeader.getSysFlag());
         if (hasSubscriptionFlag) {
             try {
                 subscriptionData = FilterAPI.build(

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/FileRegionEncoder.java
Patch:
@@ -69,7 +69,7 @@ public void close() throws IOException {
         long toTransfer = msg.count();
 
         while (true) {
-            long transferred = msg.transfered();
+            long transferred = msg.transferred();
             if (toTransfer - transferred <= 0) {
                 break;
             }

File: store/src/test/java/org/apache/rocketmq/store/queue/BatchConsumeMessageTest.java
Patch:
@@ -261,7 +261,7 @@ public void testDispatchNormalConsumeQueue() throws Exception {
         Assert.assertEquals(0, consumeQueue.getMinOffsetInQueue());
         Assert.assertEquals(0, consumeQueue.getOffsetInQueueByTime(0));
         Assert.assertEquals(50, consumeQueue.getOffsetInQueueByTime(timeMid));
-        Assert.assertEquals(99, consumeQueue.getOffsetInQueueByTime(timeMid + Integer.MAX_VALUE));
+        Assert.assertEquals(100, consumeQueue.getOffsetInQueueByTime(timeMid + Integer.MAX_VALUE));
         Assert.assertEquals(100, consumeQueue.getMaxOffsetInQueue());
         //check the messagestore
         Assert.assertEquals(100, messageStore.getMessageTotalInQueue(topic, 0));

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/TieredMessageStore.java
Patch:
@@ -69,6 +69,7 @@ public TieredMessageStore(MessageStorePluginContext context, MessageStore next)
         TieredStoreUtil.addSystemTopic(storeConfig.getBrokerClusterName());
         TieredStoreUtil.addSystemTopic(brokerName);
 
+        TieredStoreExecutor.init();
         this.metadataStore = TieredStoreUtil.getMetadataStore(storeConfig);
         this.fetcher = new TieredMessageFetcher(storeConfig);
         this.dispatcher = new TieredDispatcher(next, storeConfig);

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/provider/posix/PosixFileSegment.java
Patch:
@@ -189,7 +189,7 @@ public CompletableFuture<Boolean> commit0(TieredFileSegmentInputStream inputStre
 
         CompletableFuture<Boolean> future = new CompletableFuture<>();
         try {
-            TieredStoreExecutor.COMMIT_EXECUTOR.execute(() -> {
+            TieredStoreExecutor.commitExecutor.execute(() -> {
                 try {
                     byte[] byteArray = ByteStreams.toByteArray(inputStream);
                     if (byteArray.length != length) {

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/TieredDispatcherTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.rocketmq.store.SelectMappedBufferResult;
 import org.apache.rocketmq.tieredstore.common.AppendResult;
 import org.apache.rocketmq.tieredstore.common.TieredMessageStoreConfig;
+import org.apache.rocketmq.tieredstore.common.TieredStoreExecutor;
 import org.apache.rocketmq.tieredstore.container.TieredConsumeQueue;
 import org.apache.rocketmq.tieredstore.container.TieredContainerManager;
 import org.apache.rocketmq.tieredstore.container.TieredMessageQueueContainer;
@@ -58,13 +59,15 @@ public void setUp() {
         storeConfig.setBrokerName(storeConfig.getBrokerName());
         mq = new MessageQueue("TieredMessageQueueContainerTest", storeConfig.getBrokerName(), 0);
         metadataStore = TieredStoreUtil.getMetadataStore(storeConfig);
+        TieredStoreExecutor.init();
     }
 
     @After
     public void tearDown() throws IOException {
         TieredStoreTestUtil.destroyContainerManager();
         TieredStoreTestUtil.destroyMetadataStore();
         TieredStoreTestUtil.destroyTempDir(storePath);
+        TieredStoreExecutor.shutdown();
     }
 
     @Test

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/TieredMessageFetcherTest.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.rocketmq.tieredstore.common.BoundaryType;
 import org.apache.rocketmq.tieredstore.common.SelectMappedBufferResultWrapper;
 import org.apache.rocketmq.tieredstore.common.TieredMessageStoreConfig;
+import org.apache.rocketmq.tieredstore.common.TieredStoreExecutor;
 import org.apache.rocketmq.tieredstore.container.TieredContainerManager;
 import org.apache.rocketmq.tieredstore.container.TieredIndexFile;
 import org.apache.rocketmq.tieredstore.container.TieredMessageQueueContainer;
@@ -65,13 +66,15 @@ public void setUp() {
         storeConfig.setTieredStoreIndexFileMaxIndexNum(3);
         mq = new MessageQueue("TieredMessageFetcherTest", storeConfig.getBrokerName(), 0);
         TieredStoreUtil.getMetadataStore(storeConfig);
+        TieredStoreExecutor.init();
     }
 
     @After
     public void tearDown() throws IOException {
         TieredStoreTestUtil.destroyContainerManager();
         TieredStoreTestUtil.destroyMetadataStore();
         TieredStoreTestUtil.destroyTempDir(storePath);
+        TieredStoreExecutor.shutdown();
     }
 
     public Triple<TieredMessageFetcher, ByteBuffer, ByteBuffer> buildFetcher() {

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/TieredMessageStoreTest.java
Patch:
@@ -41,6 +41,7 @@
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 import org.apache.rocketmq.store.plugin.MessageStorePluginContext;
 import org.apache.rocketmq.tieredstore.common.BoundaryType;
+import org.apache.rocketmq.tieredstore.common.TieredStoreExecutor;
 import org.apache.rocketmq.tieredstore.container.TieredContainerManager;
 import org.apache.rocketmq.tieredstore.container.TieredMessageQueueContainer;
 import org.apache.rocketmq.tieredstore.util.TieredStoreUtil;
@@ -104,6 +105,7 @@ public void setUp() {
 
     @After
     public void tearDown() throws IOException {
+        TieredStoreExecutor.shutdown();
         TieredStoreTestUtil.destroyContainerManager();
         TieredStoreTestUtil.destroyMetadataStore();
         TieredStoreTestUtil.destroyTempDir(storePath);
@@ -290,7 +292,7 @@ public void testMetrics() {
 
     @Test
     public void testShutdownAndDestroy() {
+        store.shutdown();
         store.destroy();
-//        store.shutdown();
     }
 }

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/container/TieredContainerManagerTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.tieredstore.TieredStoreTestUtil;
 import org.apache.rocketmq.tieredstore.common.TieredMessageStoreConfig;
+import org.apache.rocketmq.tieredstore.common.TieredStoreExecutor;
 import org.apache.rocketmq.tieredstore.metadata.TieredMetadataStore;
 import org.apache.rocketmq.tieredstore.util.TieredStoreUtil;
 import org.awaitility.Awaitility;
@@ -47,13 +48,15 @@ public void setUp() {
         storeConfig.setBrokerName(storeConfig.getBrokerName());
         mq = new MessageQueue("TieredContainerManagerTest", storeConfig.getBrokerName(), 0);
         metadataStore = TieredStoreUtil.getMetadataStore(storeConfig);
+        TieredStoreExecutor.init();
     }
 
     @After
     public void tearDown() throws IOException {
         TieredStoreTestUtil.destroyContainerManager();
         TieredStoreTestUtil.destroyMetadataStore();
         TieredStoreTestUtil.destroyTempDir(storePath);
+        TieredStoreExecutor.shutdown();
     }
 
 

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/provider/posix/PosixFileSegmentTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.tieredstore.TieredStoreTestUtil;
 import org.apache.rocketmq.tieredstore.common.TieredMessageStoreConfig;
+import org.apache.rocketmq.tieredstore.common.TieredStoreExecutor;
 import org.apache.rocketmq.tieredstore.provider.TieredFileSegment;
 import org.junit.After;
 import org.junit.Assert;
@@ -44,13 +45,15 @@ public void setUp() {
         storeConfig = new TieredMessageStoreConfig();
         storeConfig.setTieredStoreFilepath(storePath);
         mq = new MessageQueue("OSSFileSegmentTest", "broker", 0);
+        TieredStoreExecutor.init();
     }
 
     @After
     public void tearDown() throws IOException {
         TieredStoreTestUtil.destroyContainerManager();
         TieredStoreTestUtil.destroyMetadataStore();
         TieredStoreTestUtil.destroyTempDir(storePath);
+        TieredStoreExecutor.shutdown();
     }
 
     @Test

File: proxy/src/main/java/org/apache/rocketmq/proxy/ProxyStartup.java
Patch:
@@ -100,7 +100,7 @@ public static void main(String[] args) {
                 }
             }));
         } catch (Exception e) {
-            System.err.println("find an unexpect err." + e);
+            e.printStackTrace();
             log.error("find an unexpect err.", e);
             System.exit(1);
         }

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/Configuration.java
Patch:
@@ -58,6 +58,7 @@ public static String loadJsonConfig() throws Exception {
         }
 
         File file = new File(filePath);
+        log.info("The current configuration file path is {}", filePath);
         if (!file.exists()) {
             log.warn("the config file {} not exist", filePath);
             throw new RuntimeException(String.format("the config file %s not exist", filePath));

File: controller/src/main/java/org/apache/rocketmq/controller/impl/heartbeat/DefaultBrokerHeartbeatManager.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.controller.BrokerHeartbeatManager;
+import org.apache.rocketmq.controller.helper.BrokerLifecycleListener;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
@@ -99,7 +100,7 @@ private void notifyBrokerInActive(String clusterName, String brokerName, Long br
     }
 
     @Override
-    public void addBrokerLifecycleListener(BrokerLifecycleListener listener) {
+    public void registerBrokerLifecycleListener(BrokerLifecycleListener listener) {
         this.brokerLifecycleListeners.add(listener);
     }
 

File: controller/src/test/java/org/apache/rocketmq/controller/impl/DefaultBrokerHeartbeatManagerTest.java
Patch:
@@ -41,7 +41,7 @@ public void init() {
     @Test
     public void testDetectBrokerAlive() throws InterruptedException {
         final CountDownLatch latch = new CountDownLatch(1);
-        this.heartbeatManager.addBrokerLifecycleListener((clusterName, brokerName, brokerId) -> {
+        this.heartbeatManager.registerBrokerLifecycleListener((clusterName, brokerName, brokerId) -> {
             latch.countDown();
         });
         this.heartbeatManager.onBrokerHeartbeat("cluster1", "broker1", "127.0.0.1:7000", 1L,3000L, null,

File: common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
Patch:
@@ -263,7 +263,7 @@ public class BrokerConfig extends BrokerIdentity {
      * Transaction message check interval.
      */
     @ImportantField
-    private long transactionCheckInterval = 60 * 1000;
+    private long transactionCheckInterval = 30 * 1000;
 
     /**
      * transaction batch op message

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/ResponseCode.java
Patch:
@@ -92,6 +92,8 @@ public class ResponseCode extends RemotingSysResponseCode {
 
     public static final int NOT_LEADER_FOR_QUEUE = 501;
 
+    public static final int ILLEGAL_OPERATION = 604;
+
     public static final int RPC_UNKNOWN = -1000;
     public static final int RPC_ADDR_IS_NULL = -1002;
     public static final int RPC_SEND_TO_CHANNEL_FAILED = -1004;

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DLedgerController.java
Patch:
@@ -190,7 +190,7 @@ public CompletableFuture<RemotingCommand> getReplicaInfo(final GetReplicaInfoReq
     @Override
     public CompletableFuture<RemotingCommand> getSyncStateData(List<String> brokerNames) {
         return this.scheduler.appendEvent("getSyncStateData",
-            () -> this.replicasInfoManager.getSyncStateData(brokerNames), false);
+            () -> this.replicasInfoManager.getSyncStateData(brokerNames, brokerAlivePredicate), false);
     }
 
     @Override

File: controller/src/test/java/org/apache/rocketmq/controller/impl/manager/ReplicasInfoManagerTest.java
Patch:
@@ -87,7 +87,7 @@ public void destroy() {
     }
 
     private BrokerReplicasInfo.ReplicasInfo getReplicasInfo(String brokerName) {
-        ControllerResult<Void> syncStateData = this.replicasInfoManager.getSyncStateData(Arrays.asList(brokerName));
+        ControllerResult<Void> syncStateData = this.replicasInfoManager.getSyncStateData(Arrays.asList(brokerName), (a, b, c) -> true);
         BrokerReplicasInfo replicasInfo = RemotingSerializable.decode(syncStateData.getBody(), BrokerReplicasInfo.class);
         return replicasInfo.getReplicasInfoTable().get(brokerName);
     }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -398,6 +398,7 @@ private RemotingCommand handlePutMessageResult(PutMessageResult putMessageResult
                 response.setCode(ResponseCode.SYSTEM_ERROR);
                 response.setRemark(String.format("accurate timer message is not enabled, timerWheelEnable is %s",
                      this.brokerController.getMessageStoreConfig().isTimerWheelEnable()));
+                break;
             case SERVICE_NOT_AVAILABLE:
                 response.setCode(ResponseCode.SERVICE_NOT_AVAILABLE);
                 response.setRemark(

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServerBuilder.java
Patch:
@@ -162,9 +162,8 @@ public GrpcServerBuilder configInterceptor() {
             log.info("ServiceProvider loaded no AccessValidator, using default org.apache.rocketmq.acl.plain.PlainAccessValidator");
             accessValidators.add(new PlainAccessValidator());
         }
-        if (!accessValidators.isEmpty()) {
-            this.serverBuilder.intercept(new AuthenticationInterceptor(accessValidators));
-        }
+
+        this.serverBuilder.intercept(new AuthenticationInterceptor(accessValidators));
 
         this.serverBuilder
             .intercept(new GlobalExceptionInterceptor())

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcConverter.java
Patch:
@@ -140,9 +140,11 @@ protected SystemProperties buildSystemProperties(MessageExt messageExt) {
 
         // message_id
         String uniqKey = messageExt.getProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX);
+
         if (uniqKey == null) {
             uniqKey = messageExt.getMsgId();
         }
+
         if (uniqKey != null) {
             systemPropertiesBuilder.setMessageId(uniqKey);
         }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -111,6 +111,7 @@
 import org.apache.rocketmq.remoting.protocol.body.QuerySubscriptionResponseBody;
 import org.apache.rocketmq.remoting.protocol.body.QueueTimeSpan;
 import org.apache.rocketmq.remoting.protocol.body.ResetOffsetBody;
+import org.apache.rocketmq.remoting.protocol.body.SyncStateSet;
 import org.apache.rocketmq.remoting.protocol.body.TopicConfigAndMappingSerializeWrapper;
 import org.apache.rocketmq.remoting.protocol.body.TopicList;
 import org.apache.rocketmq.remoting.protocol.body.UnlockBatchRequestBody;
@@ -2628,14 +2629,15 @@ private RemotingCommand resetMasterFlushOffset(ChannelHandlerContext ctx,
     private RemotingCommand notifyBrokerRoleChanged(ChannelHandlerContext ctx,
         RemotingCommand request) throws RemotingCommandException {
         NotifyBrokerRoleChangedRequestHeader requestHeader = (NotifyBrokerRoleChangedRequestHeader) request.decodeCommandCustomHeader(NotifyBrokerRoleChangedRequestHeader.class);
+        SyncStateSet syncStateSetInfo = RemotingSerializable.decode(request.getBody(), SyncStateSet.class);
 
         RemotingCommand response = RemotingCommand.createResponseCommand(null);
 
         LOGGER.info("Receive notifyBrokerRoleChanged request, try to change brokerRole, request:{}", requestHeader);
 
         final ReplicasManager replicasManager = this.brokerController.getReplicasManager();
         if (replicasManager != null) {
-            replicasManager.changeBrokerRole(requestHeader.getMasterBrokerId(), requestHeader.getMasterAddress(), requestHeader.getMasterEpoch(), requestHeader.getSyncStateSetEpoch());
+            replicasManager.changeBrokerRole(requestHeader.getMasterBrokerId(), requestHeader.getMasterAddress(), requestHeader.getMasterEpoch(), requestHeader.getSyncStateSetEpoch(), syncStateSetInfo.getSyncStateSet());
         }
         response.setCode(ResponseCode.SUCCESS);
         response.setRemark(null);

File: controller/src/main/java/org/apache/rocketmq/controller/ControllerManager.java
Patch:
@@ -53,6 +53,7 @@
 import org.apache.rocketmq.remoting.protocol.ResponseCode;
 import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
 import org.apache.rocketmq.remoting.protocol.body.RoleChangeNotifyEntry;
+import org.apache.rocketmq.remoting.protocol.body.SyncStateSet;
 import org.apache.rocketmq.remoting.protocol.header.NotifyBrokerRoleChangedRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoRequestHeader;
@@ -188,6 +189,7 @@ public void doNotifyBrokerRoleChanged(final String brokerAddr, final RoleChangeN
             final NotifyBrokerRoleChangedRequestHeader requestHeader = new NotifyBrokerRoleChangedRequestHeader(entry.getMasterAddress(), entry.getMasterBrokerId(),
                     entry.getMasterEpoch(), entry.getSyncStateSetEpoch());
             final RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.NOTIFY_BROKER_ROLE_CHANGED, requestHeader);
+            request.setBody(new SyncStateSet(entry.getSyncStateSet(), entry.getSyncStateSetEpoch()).encode());
             try {
                 this.remotingClient.invokeOneway(brokerAddr, request, 3000);
             } catch (final Exception e) {

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/controller/ElectMasterResponseHeader.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 
+
 public class ElectMasterResponseHeader implements CommandCustomHeader {
 
     private Long masterBrokerId;

File: store/src/main/java/org/apache/rocketmq/store/metrics/DefaultStoreMetricsManager.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.store.metrics;
 
+import com.google.common.collect.Lists;
 import io.opentelemetry.api.common.Attributes;
 import io.opentelemetry.api.common.AttributesBuilder;
 import io.opentelemetry.api.metrics.LongCounter;
@@ -24,7 +25,6 @@
 import io.opentelemetry.sdk.metrics.InstrumentSelector;
 import io.opentelemetry.sdk.metrics.View;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import java.util.function.Supplier;
 import org.apache.rocketmq.common.Pair;
@@ -70,7 +70,7 @@ public class DefaultStoreMetricsManager {
     public static LongCounter timerEnqueueTotal = new NopLongCounter();
 
     public static List<Pair<InstrumentSelector, View>> getMetricsView() {
-        return Collections.emptyList();
+        return Lists.newArrayList();
     }
 
     public static void init(Meter meter, Supplier<AttributesBuilder> attributesBuilderSupplier,

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -1357,7 +1357,7 @@ public int deleteTopics(final Set<String> deleteTopics) {
             // destroy consume queue dir
             String consumeQueueDir = StorePathConfigHelper.getStorePathConsumeQueue(
                 this.messageStoreConfig.getStorePathRootDir()) + File.separator + topic;
-            String consumeQueueExtDir = StorePathConfigHelper.getStorePathConsumeQueue(
+            String consumeQueueExtDir = StorePathConfigHelper.getStorePathConsumeQueueExt(
                 this.messageStoreConfig.getStorePathRootDir()) + File.separator + topic;
             String batchConsumeQueueDir = StorePathConfigHelper.getStorePathBatchConsumeQueue(
                 this.messageStoreConfig.getStorePathRootDir()) + File.separator + topic;

File: acl/src/main/java/org/apache/rocketmq/acl/AccessValidator.java
Patch:
@@ -65,7 +65,7 @@ public interface AccessValidator {
      *
      * @return
      */
-    boolean deleteAccessConfig(String accesskey);
+    boolean deleteAccessConfig(String accessKey);
 
     /**
      * Get the access resource config version information

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessValidator.java
Patch:
@@ -56,8 +56,8 @@ public boolean updateAccessConfig(PlainAccessConfig plainAccessConfig) {
     }
 
     @Override
-    public boolean deleteAccessConfig(String accesskey) {
-        return aclPlugEngine.deleteAccessConfig(accesskey);
+    public boolean deleteAccessConfig(String accessKey) {
+        return aclPlugEngine.deleteAccessConfig(accessKey);
     }
 
     @Override

File: client/src/main/java/org/apache/rocketmq/client/producer/DefaultMQProducer.java
Patch:
@@ -769,7 +769,7 @@ public TransactionSendResult sendMessageInTransaction(Message msg,
     /**
      * This method will be removed in a certain version after April 5, 2020, so please do not use this method.
      *
-     * @param key accesskey
+     * @param key accessKey
      * @param newTopic topic name
      * @param queueNum topic's queue number
      * @param attributes
@@ -785,7 +785,7 @@ public void createTopic(String key, String newTopic, int queueNum, Map<String, S
      * Create a topic on broker. This method will be removed in a certain version after April 5, 2020, so please do not
      * use this method.
      *
-     * @param key accesskey
+     * @param key accessKey
      * @param newTopic topic name
      * @param queueNum topic's queue number
      * @param topicSysFlag topic system flag

File: store/src/test/java/org/apache/rocketmq/store/timer/TimerMessageStoreTest.java
Patch:
@@ -305,7 +305,7 @@ public void testDeleteTimerMessage() throws Exception {
 
         MessageExtBrokerInner delMsg = buildMessage(delayMs, topic, false);
         transformTimerMessage(timerMessageStore,delMsg);
-        MessageAccessor.putProperty(delMsg, TimerMessageStore.TIMER_DELETE_UNIQKEY, uniqKey);
+        MessageAccessor.putProperty(delMsg, TimerMessageStore.TIMER_DELETE_UNIQUE_KEY, uniqKey);
         delMsg.setPropertiesString(MessageDecoder.messageProperties2String(delMsg.getProperties()));
         assertEquals(PutMessageStatus.PUT_OK, messageStore.putMessage(delMsg).getPutMessageStatus());
 
@@ -338,7 +338,7 @@ public void testPutDeleteTimerMessage() throws Exception {
 
         MessageExtBrokerInner delMsg = buildMessage(delayMs, topic, false);
         transformTimerMessage(timerMessageStore,delMsg);
-        MessageAccessor.putProperty(delMsg, TimerMessageStore.TIMER_DELETE_UNIQKEY, "XXX");
+        MessageAccessor.putProperty(delMsg, TimerMessageStore.TIMER_DELETE_UNIQUE_KEY, "XXX");
         delMsg.setPropertiesString(MessageDecoder.messageProperties2String(delMsg.getProperties()));
         assertEquals(PutMessageStatus.PUT_OK, messageStore.putMessage(delMsg).getPutMessageStatus());
 
@@ -361,7 +361,7 @@ public Boolean call() {
 
         // Test put expired delete msg.
         MessageExtBrokerInner expiredInner = buildMessage(System.currentTimeMillis() - 100, topic, false);
-        MessageAccessor.putProperty(expiredInner, TimerMessageStore.TIMER_DELETE_UNIQKEY, "XXX");
+        MessageAccessor.putProperty(expiredInner, TimerMessageStore.TIMER_DELETE_UNIQUE_KEY, "XXX");
         PutMessageResult putMessageResult = transformTimerMessage(timerMessageStore,expiredInner);
         assertEquals(PutMessageStatus.WHEEL_TIMER_MSG_ILLEGAL, putMessageResult.getPutMessageStatus());
     }

File: tools/src/main/java/org/apache/rocketmq/tools/command/acl/DeleteAccessConfigSubCommand.java
Patch:
@@ -83,7 +83,7 @@ public void execute(CommandLine commandLine, Options options,
                 defaultMQAdminExt.deletePlainAccessConfig(addr, accessKey);
 
                 System.out.printf("delete plain access config account from %s success.%n", addr);
-                System.out.printf("account's accesskey is:%s", accessKey);
+                System.out.printf("account's accessKey is:%s", accessKey);
                 return;
 
             } else if (commandLine.hasOption('c')) {
@@ -98,7 +98,7 @@ public void execute(CommandLine commandLine, Options options,
                     System.out.printf("delete plain access config account from %s success.%n", addr);
                 }
 
-                System.out.printf("account's accesskey is:%s", accessKey);
+                System.out.printf("account's accessKey is:%s", accessKey);
                 return;
             }
 

File: broker/src/main/java/org/apache/rocketmq/broker/controller/ReplicasManager.java
Patch:
@@ -202,7 +202,7 @@ private boolean startBasicService() {
             // The scheduled task for heartbeat sending is not starting now, so we should manually send heartbeat request
             this.sendHeartbeatToController();
             if (this.masterBrokerId != null || brokerElect()) {
-                LOGGER.info("Master in this broker set is elected, masterBrokerId: {}, masterBrokerAddr: {}", this.masterAddress, this.masterBrokerId);
+                LOGGER.info("Master in this broker set is elected, masterBrokerId: {}, masterBrokerAddr: {}", this.masterBrokerId, this.masterAddress);
                 this.state = State.RUNNING;
                 this.brokerController.setIsolated(false);
                 LOGGER.info("All register process has been done, change state to: {}", this.state);

File: controller/src/test/java/org/apache/rocketmq/controller/ControllerManagerTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.controller.impl.controller;
+package org.apache.rocketmq.controller;
 
 import java.io.File;
 import java.time.Duration;
@@ -26,7 +26,6 @@
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.common.ControllerConfig;
 import org.apache.rocketmq.common.UtilAll;
-import org.apache.rocketmq.controller.ControllerManager;
 import org.apache.rocketmq.controller.impl.DLedgerController;
 import org.apache.rocketmq.remoting.RemotingClient;
 import org.apache.rocketmq.remoting.netty.NettyClientConfig;

File: controller/src/test/java/org/apache/rocketmq/controller/ControllerTestBase.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.controller.impl.controller;
+package org.apache.rocketmq.controller;
 
 public class ControllerTestBase {
 

File: controller/src/test/java/org/apache/rocketmq/controller/impl/DefaultBrokerHeartbeatManagerTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.controller.impl.controller.impl;
+package org.apache.rocketmq.controller.impl;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;

File: common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
Patch:
@@ -381,7 +381,7 @@ public boolean isEnable() {
         }
     }
 
-    private MetricsExporterType metricsExporterType = MetricsExporterType.LOGGER;
+    private MetricsExporterType metricsExporterType = MetricsExporterType.DISABLE;
 
     private String metricsGrpcExporterTarget = "";
     private String metricsGrpcExporterHeader = "";

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
Patch:
@@ -114,6 +114,7 @@ private boolean reviveRetry(PopCheckPoint popCheckPoint, MessageExt messageExt)
             MessageAccessor.setProperties(msgInner, new HashMap<>());
         }
         msgInner.setBornTimestamp(messageExt.getBornTimestamp());
+        msgInner.setFlag(messageExt.getFlag());
         msgInner.setSysFlag(messageExt.getSysFlag());
         msgInner.setBornHost(brokerController.getStoreHost());
         msgInner.setStoreHost(brokerController.getStoreHost());

File: broker/src/main/java/org/apache/rocketmq/broker/controller/ReplicasManager.java
Patch:
@@ -717,7 +717,7 @@ private void schedulingCheckSyncStateSet() {
             this.checkSyncStateSetTaskFuture.cancel(false);
         }
         this.checkSyncStateSetTaskFuture = this.scheduledService.scheduleAtFixedRate(() -> {
-            final Set<Long> newSyncStateSet = this.haService.maybeShrinkInSyncStateSet();
+            final Set<Long> newSyncStateSet = this.haService.maybeShrinkSyncStateSet();
             newSyncStateSet.add(this.brokerControllerId);
             synchronized (this) {
                 if (this.syncStateSet != null) {

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAService.java
Patch:
@@ -229,10 +229,10 @@ public void notifySyncStateSetChanged(final Set<Long> newSyncStateSet) {
     }
 
     /**
-     * Check and maybe shrink the inSyncStateSet.
+     * Check and maybe shrink the SyncStateSet.
      * A slave will be removed from SyncStateSet if (curTime - HaConnection.lastCaughtUpTime) > option(haMaxTimeSlaveNotCatchup)
      */
-    public Set<Long> maybeShrinkInSyncStateSet() {
+    public Set<Long> maybeShrinkSyncStateSet() {
         final Set<Long> newSyncStateSet = getLocalSyncStateSet();
         boolean isSyncStateSetChanged = false;
         final long haMaxTimeSlaveNotCatchup = this.defaultMessageStore.getMessageStoreConfig().getHaMaxTimeSlaveNotCatchup();
@@ -253,7 +253,7 @@ public Set<Long> maybeShrinkInSyncStateSet() {
     }
 
     /**
-     * Check and maybe add the slave to inSyncStateSet. A slave will be added to SyncStateSet if its slaveMaxOffset >=
+     * Check and maybe add the slave to SyncStateSet. A slave will be added to SyncStateSet if its slaveMaxOffset >=
      * current confirmOffset, and it is caught up to an offset within the current leader epoch.
      */
     public void maybeExpandInSyncStateSet(final Long slaveBrokerId, final long slaveMaxOffset) {

File: broker/src/test/java/org/apache/rocketmq/broker/controller/ReplicasManagerRegisterTest.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.out.BrokerOuterAPI;
 import org.apache.rocketmq.broker.slave.SlaveSynchronize;
+import org.apache.rocketmq.broker.topic.TopicConfigManager;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;
@@ -105,9 +106,11 @@ public void setUp() throws Exception {
         this.mockedMessageStore = Mockito.mock(DefaultMessageStore.class);
         this.mockedBrokerOuterAPI = Mockito.mock(BrokerOuterAPI.class);
         this.mockedAutoSwitchHAService = Mockito.mock(AutoSwitchHAService.class);
+        TopicConfigManager mockedTopicConfigManager = new TopicConfigManager();
         when(mockedBrokerController.getBrokerOuterAPI()).thenReturn(mockedBrokerOuterAPI);
         when(mockedBrokerController.getMessageStore()).thenReturn(mockedMessageStore);
         when(mockedBrokerController.getBrokerConfig()).thenReturn(BROKER_CONFIG);
+        when(mockedBrokerController.getTopicConfigManager()).thenReturn(mockedTopicConfigManager);
         when(mockedMessageStore.getHaService()).thenReturn(mockedAutoSwitchHAService);
         when(mockedBrokerController.getSlaveSynchronize()).thenReturn(new SlaveSynchronize(mockedBrokerController));
 

File: broker/src/test/java/org/apache/rocketmq/broker/controller/ReplicasManagerTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.out.BrokerOuterAPI;
 import org.apache.rocketmq.broker.slave.SlaveSynchronize;
+import org.apache.rocketmq.broker.topic.TopicConfigManager;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.Pair;
 import org.apache.rocketmq.common.UtilAll;
@@ -139,6 +140,7 @@ public void before() throws Exception {
         getReplicaInfoResponseHeader.setMasterEpoch(NEW_MASTER_EPOCH);
         syncStateSet = new SyncStateSet(Sets.newLinkedHashSet(SYNC_STATE), NEW_MASTER_EPOCH);
         result = new Pair<>(getReplicaInfoResponseHeader, syncStateSet);
+        TopicConfigManager topicConfigManager = new TopicConfigManager();
         when(defaultMessageStore.getMessageStoreConfig()).thenReturn(messageStoreConfig);
         when(brokerController.getMessageStore()).thenReturn(defaultMessageStore);
         when(brokerController.getMessageStore().getHaService()).thenReturn(autoSwitchHAService);
@@ -147,6 +149,7 @@ public void before() throws Exception {
         when(brokerController.getSlaveSynchronize()).thenReturn(slaveSynchronize);
         when(brokerController.getBrokerOuterAPI()).thenReturn(brokerOuterAPI);
         when(brokerController.getBrokerAddr()).thenReturn(OLD_MASTER_ADDRESS);
+        when(brokerController.getTopicConfigManager()).thenReturn(topicConfigManager);
         when(brokerOuterAPI.getControllerMetaData(any())).thenReturn(getMetaDataResponseHeader);
         when(brokerOuterAPI.checkAddressReachable(any())).thenReturn(true);
         when(brokerOuterAPI.getNextBrokerId(any(), any(), any())).thenReturn(getNextBrokerIdResponseHeader);

File: broker/src/main/java/org/apache/rocketmq/broker/controller/ReplicasManager.java
Patch:
@@ -717,7 +717,7 @@ private void schedulingCheckSyncStateSet() {
             this.checkSyncStateSetTaskFuture.cancel(false);
         }
         this.checkSyncStateSetTaskFuture = this.scheduledService.scheduleAtFixedRate(() -> {
-            final Set<Long> newSyncStateSet = this.haService.maybeShrinkSyncStateSet();
+            final Set<Long> newSyncStateSet = this.haService.maybeShrinkInSyncStateSet();
             newSyncStateSet.add(this.brokerControllerId);
             synchronized (this) {
                 if (this.syncStateSet != null) {

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAConnection.java
Patch:
@@ -215,7 +215,7 @@ private synchronized void maybeExpandInSyncStateSet(long slaveMaxOffset) {
         if (!this.isAsyncLearner && slaveMaxOffset >= this.lastMasterMaxOffset) {
             long caughtUpTimeMs = this.haService.getDefaultMessageStore().getMaxPhyOffset() == slaveMaxOffset ? System.currentTimeMillis() : this.lastTransferTimeMs;
             this.haService.updateConnectionLastCaughtUpTime(this.slaveId, caughtUpTimeMs);
-            this.haService.maybeExpandSyncStateSet(this.slaveId, slaveMaxOffset);
+            this.haService.maybeExpandInSyncStateSet(this.slaveId, slaveMaxOffset);
         }
     }
 

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAService.java
Patch:
@@ -229,7 +229,7 @@ public void notifySyncStateSetChanged(final Set<Long> newSyncStateSet) {
     }
 
     /**
-     * Check and maybe shrink the SyncStateSet.
+     * Check and maybe shrink the inSyncStateSet.
      * A slave will be removed from SyncStateSet if (curTime - HaConnection.lastCaughtUpTime) > option(haMaxTimeSlaveNotCatchup)
      */
     public Set<Long> maybeShrinkInSyncStateSet() {
@@ -253,7 +253,7 @@ public Set<Long> maybeShrinkInSyncStateSet() {
     }
 
     /**
-     * Check and maybe add the slave to SyncStateSet. A slave will be added to SyncStateSet if its slaveMaxOffset >=
+     * Check and maybe add the slave to inSyncStateSet. A slave will be added to SyncStateSet if its slaveMaxOffset >=
      * current confirmOffset, and it is caught up to an offset within the current leader epoch.
      */
     public void maybeExpandInSyncStateSet(final Long slaveBrokerId, final long slaveMaxOffset) {

File: controller/src/test/java/org/apache/rocketmq/controller/impl/controller/ControllerManagerTest.java
Patch:
@@ -160,7 +160,7 @@ public RemotingCommand brokerTryElect(final String controllerAddress, final Stri
         final String brokerName, final Long brokerId, final RemotingClient client) throws Exception {
         final ElectMasterRequestHeader requestHeader = ElectMasterRequestHeader.ofBrokerTrigger(clusterName, brokerName, brokerId);
         final RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_ELECT_MASTER, requestHeader);
-        RemotingCommand response = client.invokeSync(controllerAddress, request, 3000);
+        RemotingCommand response = client.invokeSync(controllerAddress, request, 10000);
         assertNotNull(response);
         return response;
     }

File: tools/src/main/java/org/apache/rocketmq/tools/command/controller/CleanControllerBrokerMetaSubCommand.java
Patch:
@@ -55,11 +55,11 @@ public Options buildCommandlineOptions(Options options) {
         opt.setRequired(true);
         options.addOption(opt);
 
-        opt = new Option("c", "clusterName", true, "the clusterName of broker");
+        opt = new Option("c", "clusterName", true, "The clusterName of broker");
         opt.setRequired(false);
         options.addOption(opt);
 
-        opt = new Option("l", "cleanLivingBroker", false, " whether clean up living brokers,default value is false");
+        opt = new Option("l", "cleanLivingBroker", false, "Whether clean up living brokers,default value is false");
         opt.setRequired(false);
         options.addOption(opt);
 
@@ -73,7 +73,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 
         String controllerAddress = commandLine.getOptionValue('a').trim();
-        String brokerName = commandLine.getOptionValue('n').trim();
+        String brokerName = commandLine.getOptionValue("bn").trim();
         String clusterName = null;
         String brokerControllerIdsToClean = null;
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/controller/ReElectMasterSubCommand.java
Patch:
@@ -68,7 +68,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
         String controllerAddress = commandLine.getOptionValue("a").trim();
         String clusterName = commandLine.getOptionValue('c').trim();
-        String brokerName = commandLine.getOptionValue('n').trim();
+        String brokerName = commandLine.getOptionValue("bn").trim();
         Long brokerId = Long.valueOf(commandLine.getOptionValue("b").trim());
 
         try {

File: controller/src/test/java/org/apache/rocketmq/controller/impl/controller/impl/DefaultBrokerHeartbeatManagerTest.java
Patch:
@@ -34,6 +34,7 @@ public void init() {
         final ControllerConfig config = new ControllerConfig();
         config.setScanNotActiveBrokerInterval(2000);
         this.heartbeatManager = new DefaultBrokerHeartbeatManager(config);
+        this.heartbeatManager.initialize();
         this.heartbeatManager.start();
     }
 

File: controller/src/test/java/org/apache/rocketmq/controller/impl/controller/impl/manager/ReplicasInfoManagerTest.java
Patch:
@@ -76,6 +76,7 @@ public void init() {
         this.config.setScanNotActiveBrokerInterval(300000000);
         this.replicasInfoManager = new ReplicasInfoManager(config);
         this.heartbeatManager = new DefaultBrokerHeartbeatManager(config);
+        this.heartbeatManager.initialize();
         this.heartbeatManager.start();
     }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -3096,7 +3096,7 @@ public Pair<ElectMasterResponseHeader, BrokerMemberGroup> electMaster(String con
     }
 
     public void cleanControllerBrokerData(String controllerAddr, String clusterName,
-        String brokerName, String brokerAddr, boolean isCleanLivingBroker)
+        String brokerName, String brokerControllerIdsToClean, boolean isCleanLivingBroker)
         throws RemotingException, InterruptedException, MQBrokerException {
 
         //get controller leader address
@@ -3105,7 +3105,7 @@ public void cleanControllerBrokerData(String controllerAddr, String clusterName,
         assert controllerMetaData.getControllerLeaderAddress() != null;
         final String leaderAddress = controllerMetaData.getControllerLeaderAddress();
 
-        CleanControllerBrokerDataRequestHeader cleanHeader = new CleanControllerBrokerDataRequestHeader(clusterName, brokerName, brokerAddr, isCleanLivingBroker);
+        CleanControllerBrokerDataRequestHeader cleanHeader = new CleanControllerBrokerDataRequestHeader(clusterName, brokerName, brokerControllerIdsToClean, isCleanLivingBroker);
         RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CLEAN_BROKER_DATA, cleanHeader);
 
         final RemotingCommand response = this.remotingClient.invokeSync(leaderAddress, request, 3000);

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExt.java
Patch:
@@ -841,7 +841,7 @@ public Pair<ElectMasterResponseHeader, BrokerMemberGroup> electMaster(String con
 
     @Override
     public void cleanControllerBrokerData(String controllerAddr, String clusterName, String brokerName,
-        String brokerAddr, boolean isCleanLivingBroker) throws RemotingException, InterruptedException, MQBrokerException {
-        this.defaultMQAdminExtImpl.cleanControllerBrokerData(controllerAddr, clusterName, brokerName, brokerAddr,isCleanLivingBroker);
+        String brokerControllerIdsToClean, boolean isCleanLivingBroker) throws RemotingException, InterruptedException, MQBrokerException {
+        this.defaultMQAdminExtImpl.cleanControllerBrokerData(controllerAddr, clusterName, brokerName, brokerControllerIdsToClean, isCleanLivingBroker);
     }
 }

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -1897,9 +1897,9 @@ public void updateControllerConfig(Properties properties,
 
     @Override
     public void cleanControllerBrokerData(String controllerAddr, String clusterName, String brokerName,
-        String brokerAddr, boolean isCleanLivingBroker)
+        String brokerIdSetToClean, boolean isCleanLivingBroker)
         throws RemotingException, InterruptedException, MQBrokerException {
-        this.mqClientInstance.getMQClientAPIImpl().cleanControllerBrokerData(controllerAddr, clusterName, brokerName, brokerAddr, isCleanLivingBroker);
+        this.mqClientInstance.getMQClientAPIImpl().cleanControllerBrokerData(controllerAddr, clusterName, brokerName, brokerIdSetToClean, isCleanLivingBroker);
     }
 
     public MQClientInstance getMqClientInstance() {

File: tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java
Patch:
@@ -470,7 +470,7 @@ Pair<ElectMasterResponseHeader, BrokerMemberGroup> electMaster(String controller
      * clean controller broker meta data
      */
     void cleanControllerBrokerData(String controllerAddr, String clusterName, String brokerName,
-        String brokerAddr,
+        String brokerControllerIdsToClean,
         boolean isCleanLivingBroker) throws RemotingException, InterruptedException, MQBrokerException;
 
 }

File: broker/src/main/java/org/apache/rocketmq/broker/controller/ReplicasManager.java
Patch:
@@ -84,7 +84,7 @@ public class ReplicasManager {
     private volatile String controllerLeaderAddress = "";
     private volatile State state = State.INITIAL;
 
-    private RegisterState registerState = RegisterState.INITIAL;
+    private volatile RegisterState registerState = RegisterState.INITIAL;
 
     private ScheduledFuture<?> checkSyncStateSetTaskFuture;
     private ScheduledFuture<?> slaveSyncFuture;
@@ -191,6 +191,7 @@ private boolean startBasicService() {
             }
             // register 5 times but still unsuccessful
             if (this.state != State.REGISTER_TO_CONTROLLER_DONE) {
+                LOGGER.error("Register to broker failed 5 times");
                 return false;
             }
         }

File: broker/src/main/java/org/apache/rocketmq/broker/controller/ReplicasManager.java
Patch:
@@ -436,7 +436,7 @@ private boolean register() {
                     return false;
                 }
                 if (!createMetadataFileAndDeleteTemp()) {
-                    LOGGER.error("Failed to create metadata file and delete temp metadata file, temp metadata: {}", this.brokerMetadata);
+                    LOGGER.error("Failed to create metadata file and delete temp metadata file, temp metadata: {}", this.tempBrokerMetadata);
                     return false;
                 }
                 this.registerState = RegisterState.CREATE_METADATA_FILE_DONE;

File: broker/src/test/java/org/apache/rocketmq/broker/controller/ReplicasManagerRegisterTest.java
Patch:
@@ -166,7 +166,7 @@ public void testBrokerRegisterSuccessAndRestartWithChangedBrokerConfig() throws
         replicasManagerRestart = new ReplicasManager(mockedBrokerController);
         replicasManagerRestart.start();
         Assert.assertEquals(ReplicasManager.RegisterState.CREATE_METADATA_FILE_DONE, replicasManagerRestart.getRegisterState());
-
+        mockedBrokerController.getBrokerConfig().setBrokerClusterName(CLUSTER_NAME);
     }
 
     @Test

File: controller/src/main/java/org/apache/rocketmq/controller/Controller.java
Patch:
@@ -105,7 +105,7 @@ CompletableFuture<RemotingCommand> alterSyncStateSet(
     RemotingCommand getControllerMetadata();
 
     /**
-     * Get inSyncStateData for target brokers, this api is used for admin tools.
+     * Get SyncStateData for target brokers, this api is used for admin tools.
      */
     CompletableFuture<RemotingCommand> getSyncStateData(final List<String> brokerNames);
 

File: controller/src/test/java/org/apache/rocketmq/controller/impl/controller/impl/DLedgerControllerTest.java
Patch:
@@ -194,7 +194,7 @@ public DLedgerController mockMetaData(boolean enableElectUncleanMaster) throws E
         final GetReplicaInfoResponseHeader replicaInfo = (GetReplicaInfoResponseHeader) getInfoResponse.readCustomHeader();
         assertEquals(1, replicaInfo.getMasterEpoch().intValue());
         assertEquals(DEFAULT_IP[0], replicaInfo.getMasterAddress());
-        // Try alter sync state set
+        // Try alter SyncStateSet
         final HashSet<Long> newSyncStateSet = new HashSet<>();
         newSyncStateSet.add(1L);
         newSyncStateSet.add(2L);

File: store/src/main/java/org/apache/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -318,7 +318,7 @@ public class MessageStoreConfig {
     private int minInSyncReplicas = 1;
 
     /**
-     * Each message must be written successfully to all replicas in InSyncStateSet.
+     * Each message must be written successfully to all replicas in SyncStateSet.
      */
     @ImportantField
     private boolean allAckInSyncStateSet = false;

File: store/src/main/java/org/apache/rocketmq/store/ha/GroupTransferService.java
Patch:
@@ -95,7 +95,7 @@ private void doWaitTransfer() {
                     }
 
                     if (allAckInSyncStateSet && this.haService instanceof AutoSwitchHAService) {
-                        // In this mode, we must wait for all replicas that in InSyncStateSet.
+                        // In this mode, we must wait for all replicas that in SyncStateSet.
                         final AutoSwitchHAService autoSwitchHAService = (AutoSwitchHAService) this.haService;
                         final Set<Long> syncStateSet = autoSwitchHAService.getSyncStateSet();
                         if (syncStateSet.size() <= 1) {

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAConnection.java
Patch:
@@ -215,7 +215,7 @@ private synchronized void maybeExpandInSyncStateSet(long slaveMaxOffset) {
         if (!this.isAsyncLearner && slaveMaxOffset >= this.lastMasterMaxOffset) {
             long caughtUpTimeMs = this.haService.getDefaultMessageStore().getMaxPhyOffset() == slaveMaxOffset ? System.currentTimeMillis() : this.lastTransferTimeMs;
             this.haService.updateConnectionLastCaughtUpTime(this.slaveId, caughtUpTimeMs);
-            this.haService.maybeExpandInSyncStateSet(this.slaveId, slaveMaxOffset);
+            this.haService.maybeExpandSyncStateSet(this.slaveId, slaveMaxOffset);
         }
     }
 

File: test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleIntegrationTest.java
Patch:
@@ -126,7 +126,7 @@ public void testCheckSyncStateSet() throws Exception {
 
         mockData(topic);
 
-        // Check sync state set
+        // Check SyncStateSet
         final ReplicasManager replicasManager = brokerController1.getReplicasManager();
         SyncStateSet syncStateSet = replicasManager.getSyncStateSet();
         assertEquals(2, syncStateSet.getSyncStateSet().size());

File: controller/src/main/java/org/apache/rocketmq/controller/processor/ControllerRequestProcessor.java
Patch:
@@ -156,6 +156,9 @@ private RemotingCommand handleControllerGetMetadataInfo(ChannelHandlerContext ct
 
     private RemotingCommand handleBrokerHeartbeat(ChannelHandlerContext ctx, RemotingCommand request) throws Exception {
         final BrokerHeartbeatRequestHeader requestHeader = (BrokerHeartbeatRequestHeader) request.decodeCommandCustomHeader(BrokerHeartbeatRequestHeader.class);
+        if (requestHeader.getBrokerId() == null) {
+            return RemotingCommand.createResponseCommand(ResponseCode.CONTROLLER_INVALID_REQUEST, "Heart beat with empty brokerId");
+        }
         this.heartbeatManager.onBrokerHeartbeat(requestHeader.getClusterName(), requestHeader.getBrokerName(), requestHeader.getBrokerAddr(), requestHeader.getBrokerId(),
                 requestHeader.getHeartbeatTimeoutMills(), ctx.channel(), requestHeader.getEpoch(), requestHeader.getMaxOffset(), requestHeader.getConfirmOffset(), requestHeader.getElectionPriority());
         return RemotingCommand.createResponseCommand(ResponseCode.SUCCESS, "Heart beat success");

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAClient.java
Patch:
@@ -86,6 +86,7 @@ public class AutoSwitchHAClient extends ServiceThread implements HAClient {
      * │                        HANDSHAKE  Header                              │               body            │
      * </pre>
      */
+    @Deprecated
     public static final int HANDSHAKE_SIZE = HANDSHAKE_HEADER_SIZE + 50;
 
     /**
@@ -105,7 +106,7 @@ public class AutoSwitchHAClient extends ServiceThread implements HAClient {
     private static final int READ_MAX_BUFFER_SIZE = 1024 * 1024 * 4;
     private final AtomicReference<String> masterHaAddress = new AtomicReference<>();
     private final AtomicReference<String> masterAddress = new AtomicReference<>();
-    private final ByteBuffer handshakeHeaderBuffer = ByteBuffer.allocate(HANDSHAKE_SIZE);
+    private final ByteBuffer handshakeHeaderBuffer = ByteBuffer.allocate(HANDSHAKE_HEADER_SIZE);
     private final ByteBuffer transferHeaderBuffer = ByteBuffer.allocate(TRANSFER_HEADER_SIZE);
     private final AutoSwitchHAService haService;
     private final ByteBuffer byteBufferRead = ByteBuffer.allocate(READ_MAX_BUFFER_SIZE);

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -1741,7 +1741,7 @@ protected void sendHeartbeat() {
                         this.brokerConfig.getBrokerClusterName(),
                         this.getBrokerAddr(),
                         this.brokerConfig.getBrokerName(),
-                        this.brokerConfig.getBrokerId(),
+                        this.replicasManager.getBrokerId(),
                         this.brokerConfig.getSendHeartbeatTimeoutMillis(),
                         this.brokerConfig.isInBrokerContainer(), this.replicasManager.getLastEpoch(),
                         this.messageStore.getMaxPhyOffset(),

File: controller/src/main/java/org/apache/rocketmq/controller/impl/manager/ReplicasInfoManager.java
Patch:
@@ -215,7 +215,6 @@ public ControllerResult<ElectMasterResponseHeader> electMaster(final ElectMaster
             response.setSyncStateSetEpoch(syncStateSetEpoch + 1);
             BrokerMemberGroup brokerMemberGroup = buildBrokerMemberGroup(brokerName);
             if (null != brokerMemberGroup) {
-                response.setBrokerMemberGroup(brokerMemberGroup);
                 result.setBody(brokerMemberGroup.encode());
             }
             final ElectMasterEvent event = new ElectMasterEvent(brokerName, newMaster);
@@ -313,6 +312,8 @@ public ControllerResult<RegisterSuccessResponseHeader> registerSuccess(final Reg
             // if master still exist
             response.setMasterBrokerId(syncStateInfo.getMasterBrokerId());
             response.setMasterAddress(brokerReplicaInfo.getBrokerAddress(response.getMasterBrokerId()));
+            response.setMasterEpoch(syncStateInfo.getMasterEpoch());
+            response.setSyncStateSetEpoch(syncStateInfo.getSyncStateSetEpoch());
         }
         // if this broker's address has been changed, we need to update it
         if (!brokerAddress.equals(brokerReplicaInfo.getBrokerAddress(brokerId))) {

File: controller/src/main/java/org/apache/rocketmq/controller/processor/ControllerRequestProcessor.java
Patch:
@@ -130,11 +130,10 @@ private RemotingCommand handleControllerElectMaster(ChannelHandlerContext ctx,
         final CompletableFuture<RemotingCommand> future = this.controllerManager.getController().electMaster(electMasterRequest);
         if (future != null) {
             final RemotingCommand response = future.get(WAIT_TIMEOUT_OUT, TimeUnit.SECONDS);
-            final ElectMasterResponseHeader responseHeader = (ElectMasterResponseHeader) response.readCustomHeader();
 
-            if (response.getCode() == ResponseCode.SUCCESS && responseHeader != null) {
+            if (response.getCode() == ResponseCode.SUCCESS) {
                 if (this.controllerManager.getControllerConfig().isNotifyBrokerRoleChanged()) {
-                    this.controllerManager.notifyBrokerRoleChanged(RoleChangeNotifyEntry.convert(responseHeader));
+                    this.controllerManager.notifyBrokerRoleChanged(RoleChangeNotifyEntry.convert(response));
                 }
             }
             return response;

File: test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleIntegrationTest.java
Patch:
@@ -181,9 +181,7 @@ public void testAddBroker() throws Exception {
 
         BrokerController broker3 = startBroker(nameserverAddress, controllerAddress, brokerName, 3, nextPort(), nextPort(), nextPort(), BrokerRole.SLAVE, DEFAULT_FILE_SIZE);
         waitSlaveReady(broker3.getMessageStore());
-
         checkMessage(broker3.getMessageStore(), topic, 10, 0);
-
         putMessage(this.brokerController1.getMessageStore(), topic);
         checkMessage(broker3.getMessageStore(), topic, 20, 0);
         shutdownAndClearBroker();

File: broker/src/main/java/org/apache/rocketmq/broker/out/BrokerOuterAPI.java
Patch:
@@ -1306,6 +1306,7 @@ public void sendHeartbeatToController(final String controllerAddress,
         requestHeader.setConfirmOffset(confirmOffset);
         requestHeader.setHeartbeatTimeoutMills(controllerHeartBeatTimeoutMills);
         requestHeader.setElectionPriority(electionPriority);
+        requestHeader.setBrokerId(brokerId);
         brokerOuterExecutor.execute(new AbstractBrokerRunnable(new BrokerIdentity(clusterName, brokerName, brokerId, isInBrokerContainer)) {
             @Override
             public void run0() {

File: controller/src/main/java/org/apache/rocketmq/controller/impl/event/EventSerializer.java
Patch:
@@ -69,6 +69,8 @@ public EventMessage deserialize(byte[] bytes) throws SerializationException {
                         return this.serializer.deserialize(data, ElectMasterEvent.class);
                     case CLEAN_BROKER_DATA_EVENT:
                         return this.serializer.deserialize(data, CleanBrokerDataEvent.class);
+                    case UPDATE_BROKER_ADDRESS:
+                        return this.serializer.deserialize(data, UpdateBrokerAddressEvent.class);
                     default:
                         break;
                 }

File: controller/src/main/java/org/apache/rocketmq/controller/impl/event/EventType.java
Patch:
@@ -48,6 +48,8 @@ public static EventType from(short id) {
                 return READ_EVENT;
             case 5:
                 return CLEAN_BROKER_DATA_EVENT;
+            case 6:
+                return UPDATE_BROKER_ADDRESS;
         }
         return null;
     }

File: test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleBase.java
Patch:
@@ -131,6 +131,8 @@ protected MessageStoreConfig buildMessageStoreConfig(final String brokerDir, fin
         storeConfig.setStorePathRootDir(STORE_PATH_ROOT_DIR + File.separator + brokerDir);
         storeConfig.setStorePathCommitLog(STORE_PATH_ROOT_DIR + File.separator + brokerDir + File.separator + "commitlog");
         storeConfig.setStorePathEpochFile(STORE_PATH_ROOT_DIR + File.separator + brokerDir + File.separator + "EpochFileCache");
+        storeConfig.setStorePathMetadata(STORE_PATH_ROOT_DIR + File.separator + brokerDir + File.separator + "metadata");
+        storeConfig.setStorePathTempMetadata(STORE_PATH_ROOT_DIR + File.separator + brokerDir + File.separator + "tempMetadata");
         storeConfig.setTotalReplicas(3);
         storeConfig.setInSyncReplicas(2);
 

File: controller/src/main/java/org/apache/rocketmq/controller/elect/impl/DefaultElectPolicy.java
Patch:
@@ -94,7 +94,7 @@ private Long tryElect(String clusterName, String brokerName, Set<Long> brokers,
         }
         if (!brokers.isEmpty()) {
             // if old master is still valid, and preferBrokerAddr is blank or is equals to oldMaster
-            if (brokers.contains(oldMaster) && (preferBrokerId == null || preferBrokerId == oldMaster)) {
+            if (brokers.contains(oldMaster) && (preferBrokerId == null || preferBrokerId.equals(oldMaster))) {
                 return oldMaster;
             }
 

File: controller/src/test/java/org/apache/rocketmq/controller/impl/controller/ControllerManagerTest.java
Patch:
@@ -114,7 +114,6 @@ public ControllerManager waitLeader(final List<ControllerManager> controllers) t
             }
             return null;
         }, item -> item != null);
-        System.out.println("leader born!!!!!");
         return manager;
     }
 

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExt.java
Patch:
@@ -833,8 +833,8 @@ public void updateControllerConfig(Properties properties,
 
     @Override
     public ElectMasterResponseHeader electMaster(String controllerAddr, String clusterName,
-        String brokerName, String brokerAddr) throws RemotingException, InterruptedException, MQBrokerException {
-        return this.defaultMQAdminExtImpl.electMaster(controllerAddr, clusterName, brokerName, brokerAddr);
+        String brokerName, Long brokerId) throws RemotingException, InterruptedException, MQBrokerException {
+        return this.defaultMQAdminExtImpl.electMaster(controllerAddr, clusterName, brokerName, brokerId);
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -1852,8 +1852,8 @@ public void resetMasterFlushOffset(String brokerAddr,
 
     @Override
     public ElectMasterResponseHeader electMaster(String controllerAddr, String clusterName,
-        String brokerName, String brokerAddr) throws RemotingException, InterruptedException, MQBrokerException {
-        return this.mqClientInstance.getMQClientAPIImpl().electMaster(controllerAddr, clusterName, brokerName, brokerAddr);
+        String brokerName, Long brokerId) throws RemotingException, InterruptedException, MQBrokerException {
+        return this.mqClientInstance.getMQClientAPIImpl().electMaster(controllerAddr, clusterName, brokerName, brokerId);
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java
Patch:
@@ -455,14 +455,14 @@ void updateControllerConfig(final Properties properties,
      * @param controllerAddr controller address
      * @param clusterName    cluster name
      * @param brokerName     broker name
-     * @param brokerAddr     broker address
+     * @param brokerId     broker id
      * @return
      * @throws RemotingException
      * @throws InterruptedException
      * @throws MQBrokerException
      */
     ElectMasterResponseHeader electMaster(String controllerAddr, String clusterName, String brokerName,
-        String brokerAddr) throws RemotingException, InterruptedException, MQBrokerException;
+        Long brokerId) throws RemotingException, InterruptedException, MQBrokerException;
 
     /**
      * clean controller broker meta data

File: tools/src/main/java/org/apache/rocketmq/tools/command/controller/ReElectMasterSubCommand.java
Patch:
@@ -45,7 +45,7 @@ public Options buildCommandlineOptions(Options options) {
         opt.setRequired(true);
         options.addOption(opt);
 
-        opt = new Option("b", "brokerAddress", true, "The address of the broker which requires to become master");
+        opt = new Option("b", "brokerId", true, "The id of the broker which requires to become master");
         opt.setRequired(true);
         options.addOption(opt);
 
@@ -68,11 +68,11 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
         String controllerAddress = commandLine.getOptionValue("a").trim();
         String clusterName = commandLine.getOptionValue('c').trim();
         String brokerName = commandLine.getOptionValue('n').trim();
-        String brokerAddress = commandLine.getOptionValue("b").trim();
+        Long brokerId = Long.valueOf(commandLine.getOptionValue("b").trim());
 
         try {
             defaultMQAdminExt.start();
-            final ElectMasterResponseHeader metaData = defaultMQAdminExt.electMaster(controllerAddress, clusterName, brokerName, brokerAddress);
+            final ElectMasterResponseHeader metaData = defaultMQAdminExt.electMaster(controllerAddress, clusterName, brokerName, brokerId);
             System.out.printf("\n#ClusterName\t%s", clusterName);
             System.out.printf("\n#BrokerName\t%s", brokerName);
             System.out.printf("\n#BrokerMasterAddr\t%s", metaData.getMasterAddress());

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -3077,7 +3077,7 @@ public ElectMasterResponseHeader electMaster(String controllerAddr, String clust
         assert controllerMetaData != null;
         assert controllerMetaData.getControllerLeaderAddress() != null;
         final String leaderAddress = controllerMetaData.getControllerLeaderAddress();
-        ElectMasterRequestHeader electRequestHeader = new ElectMasterRequestHeader(clusterName, brokerName, brokerAddr);
+        ElectMasterRequestHeader electRequestHeader = ElectMasterRequestHeader.ofAdminTrigger(clusterName, brokerName, brokerAddr);
 
         RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_ELECT_MASTER, electRequestHeader);
         final RemotingCommand response = this.remotingClient.invokeSync(leaderAddress, request, 3000);

File: controller/src/main/java/org/apache/rocketmq/controller/elect/ElectPolicy.java
Patch:
@@ -28,9 +28,9 @@ public interface ElectPolicy {
      * @param syncStateBrokers  all broker replicas in syncStateSet
      * @param allReplicaBrokers all broker replicas
      * @param oldMaster         old master
-     * @param preferBrokerAddr  the broker prefer to be elected
+     * @param brokerAddr  broker address(can be used as prefer or assigned in some elect policy)
      * @return new master's brokerAddr
      */
-    String elect(String clusterName, Set<String> syncStateBrokers, Set<String> allReplicaBrokers, String oldMaster, String preferBrokerAddr);
+    String elect(String clusterName, Set<String> syncStateBrokers, Set<String> allReplicaBrokers, String oldMaster, String brokerAddr);
 
 }

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DLedgerController.java
Patch:
@@ -107,7 +107,7 @@ public DLedgerController(final ControllerConfig controllerConfig,
 
         this.roleHandler = new RoleChangeHandler(dLedgerConfig.getSelfId());
         this.replicasInfoManager = new ReplicasInfoManager(controllerConfig);
-        this.statemachine = new DLedgerControllerStateMachine(replicasInfoManager, this.eventSerializer, dLedgerConfig.getSelfId());
+        this.statemachine = new DLedgerControllerStateMachine(replicasInfoManager, this.eventSerializer, dLedgerConfig.getGroup(), dLedgerConfig.getSelfId());
 
         // Register statemachine and role handler.
         this.dLedgerServer = new DLedgerServer(dLedgerConfig, nettyServerConfig, nettyClientConfig, channelEventListener);

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DLedgerControllerStateMachine.java
Patch:
@@ -39,10 +39,10 @@ public class DLedgerControllerStateMachine implements StateMachine {
     private final String dLedgerId;
 
     public DLedgerControllerStateMachine(final ReplicasInfoManager replicasInfoManager,
-        final EventSerializer eventSerializer, final String dLedgerId) {
+        final EventSerializer eventSerializer, final String dLedgerGroupId, final String dLedgerSelfId) {
         this.replicasInfoManager = replicasInfoManager;
         this.eventSerializer = eventSerializer;
-        this.dLedgerId = dLedgerId;
+        this.dLedgerId = generateDLedgerId(dLedgerGroupId, dLedgerSelfId);
     }
 
     @Override
@@ -79,6 +79,6 @@ public void onShutdown() {
 
     @Override
     public String getBindDLedgerId() {
-        return dLedgerId;
+        return this.dLedgerId;
     }
 }

File: tools/src/main/java/org/apache/rocketmq/tools/command/controller/ReElectMasterSubCommand.java
Patch:
@@ -75,7 +75,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
             final ElectMasterResponseHeader metaData = defaultMQAdminExt.electMaster(controllerAddress, clusterName, brokerName, brokerAddress);
             System.out.printf("\n#ClusterName\t%s", clusterName);
             System.out.printf("\n#BrokerName\t%s", brokerName);
-            System.out.printf("\n#BrokerMasterAddr\t%s", metaData.getNewMasterAddress());
+            System.out.printf("\n#BrokerMasterAddr\t%s", metaData.getMasterAddress());
             System.out.printf("\n#MasterEpoch\t%s", metaData.getMasterEpoch());
             System.out.printf("\n#SyncStateSetEpoch\t%s\n", metaData.getSyncStateSetEpoch());
             BrokerMemberGroup brokerMemberGroup = metaData.getBrokerMemberGroup();

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -1246,7 +1246,7 @@ public void subscribe(String topic, String subExpression) throws MQClientExcepti
 
     public void subscribe(String topic, String fullClassName, String filterClassSource) throws MQClientException {
         try {
-            SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData(topic, "*");
+            SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData(topic, SubscriptionData.SUB_ALL);
             subscriptionData.setSubString(fullClassName);
             subscriptionData.setClassFilterMode(true);
             subscriptionData.setFilterClassSource(filterClassSource);

File: client/src/main/java/org/apache/rocketmq/client/latency/MQFaultStrategy.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.client.latency;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
@@ -62,8 +63,9 @@ public MessageQueue selectOneMessageQueue(final TopicPublishInfo tpInfo, final S
                 for (int i = 0; i < tpInfo.getMessageQueueList().size(); i++) {
                     int pos = index++ % tpInfo.getMessageQueueList().size();
                     MessageQueue mq = tpInfo.getMessageQueueList().get(pos);
-                    if (latencyFaultTolerance.isAvailable(mq.getBrokerName()))
+                    if (!StringUtils.equals(lastBrokerName, mq.getBrokerName()) && latencyFaultTolerance.isAvailable(mq.getBrokerName())) {
                         return mq;
+                    }
                 }
 
                 final String notBestBroker = latencyFaultTolerance.pickOneAtLeast();

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -1548,8 +1548,6 @@ protected void startBasicService() throws Exception {
             this.brokerPreOnlineService.start();
         }
 
-        //Init state version after messageStore initialized.
-        this.topicConfigManager.initStateVersion();
     }
 
     public void start() throws Exception {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -777,7 +777,8 @@ private synchronized RemotingCommand updateBrokerConfig(ChannelHandlerContext ct
                     LOGGER.info("updateBrokerConfig, new config: [{}] client: {} ", properties, ctx.channel().remoteAddress());
                     this.brokerController.getConfiguration().update(properties);
                     if (properties.containsKey("brokerPermission")) {
-                        this.brokerController.getTopicConfigManager().getDataVersion().nextVersion();
+                        long stateMachineVersion = brokerController.getMessageStore() != null ? brokerController.getMessageStore().getStateMachineVersion() : 0;
+                        this.brokerController.getTopicConfigManager().getDataVersion().nextVersion(stateMachineVersion);
                         this.brokerController.registerBrokerAll(false, false, true);
                     }
                 } else {

File: broker/src/main/java/org/apache/rocketmq/broker/subscription/SubscriptionGroupManager.java
Patch:
@@ -195,7 +195,8 @@ private void updateForbiddenValue(String group, String topic, Integer forbidden)
             log.info("set group forbidden, {}@{} old: {} new: {}", group, topic, 0, forbidden);
         }
 
-        this.dataVersion.nextVersion();
+        long stateMachineVersion = brokerController.getMessageStore() != null ? brokerController.getMessageStore().getStateMachineVersion() : 0;
+        dataVersion.nextVersion(stateMachineVersion);
 
         this.persist();
     }

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAService.java
Patch:
@@ -147,8 +147,8 @@ public boolean changeToMaster(int masterEpoch) {
         }
 
         LOGGER.info("TruncateOffset is {}, confirmOffset is {}, maxPhyOffset is {}", truncateOffset, getConfirmOffset(), this.defaultMessageStore.getMaxPhyOffset());
-
         this.defaultMessageStore.recoverTopicQueueTable();
+        this.defaultMessageStore.setStateMachineVersion(masterEpoch);
         LOGGER.info("Change ha to master success, newMasterEpoch:{}, startOffset:{}", masterEpoch, newEpochEntry.getStartOffset());
         return true;
     }
@@ -178,6 +178,8 @@ public boolean changeToSlave(String newMasterAddr, int newMasterEpoch, Long slav
                 defaultMessageStore.getTransientStorePool().setRealCommit(false);
             }
 
+            this.defaultMessageStore.setStateMachineVersion(newMasterEpoch);
+
             LOGGER.info("Change ha to slave success, newMasterAddress:{}, newMasterEpoch:{}", newMasterAddr, newMasterEpoch);
             return true;
         } catch (final Exception e) {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -139,7 +139,8 @@ public class DefaultMQPushConsumerImpl implements MQConsumerInner {
     private static final int ASYNC_TIMEOUT = 3000;
 
     // only for test purpose, will be modified by reflection in unit test.
-    @SuppressWarnings("FieldMayBeFinal") private static boolean doNotUpdateTopicSubscribeInfoWhenSubscriptionChanged = false;
+    @SuppressWarnings("FieldMayBeFinal")
+    private static boolean doNotUpdateTopicSubscribeInfoWhenSubscriptionChanged = false;
 
     public DefaultMQPushConsumerImpl(DefaultMQPushConsumer defaultMQPushConsumer, RPCHook rpcHook) {
         this.defaultMQPushConsumer = defaultMQPushConsumer;

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAConnection.java
Patch:
@@ -363,7 +363,7 @@ protected boolean processReadResult(ByteBuffer byteBufferRead) {
                                 break;
                             default:
                                 LOGGER.error("Current state illegal {}", currentState);
-                                break;
+                                return false;
                         }
 
                         if (!slaveState.equals(currentState)) {

File: store/src/main/java/org/apache/rocketmq/store/TransientStorePool.java
Patch:
@@ -34,7 +34,7 @@ public class TransientStorePool {
     private final int fileSize;
     private final Deque<ByteBuffer> availableBuffers;
     private final DefaultMessageStore messageStore;
-    private volatile boolean isRealCommit;
+    private volatile boolean isRealCommit = true;
 
     public TransientStorePool(final DefaultMessageStore messageStore) {
         this.messageStore = messageStore;

File: common/src/main/java/org/apache/rocketmq/common/message/MessageType.java
Patch:
@@ -19,10 +19,10 @@
 
 public enum MessageType {
     Normal_Msg("Normal"),
-    Order_Msg("Order"),
     Trans_Msg_Half("Trans"),
     Trans_msg_Commit("TransCommit"),
-    Delay_Msg("Delay");
+    Delay_Msg("Delay"),
+    Order_Msg("Order");
 
     private final String shortName;
 

File: store/src/main/java/org/apache/rocketmq/store/ha/DefaultHAService.java
Patch:
@@ -342,7 +342,7 @@ public void run() {
 
                     if (selected != null) {
                         for (SelectionKey k : selected) {
-                            if ((k.readyOps() & SelectionKey.OP_ACCEPT) != 0) {
+                            if (k.isAcceptable()) {
                                 SocketChannel sc = ((ServerSocketChannel) k.channel()).accept();
 
                                 if (sc != null) {

File: controller/src/main/java/org/apache/rocketmq/controller/impl/manager/SyncStateInfo.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.HashSet;
 import java.util.Set;
+import org.apache.commons.lang3.StringUtils;
 
 /**
  * Manages the syncStateSet of broker replicas.
@@ -53,7 +54,7 @@ public void updateSyncStateSetInfo(Set<String> newSyncStateSet) {
     }
 
     public boolean isMasterExist() {
-        return !this.masterAddress.isEmpty();
+        return !StringUtils.isBlank(masterAddress);
     }
 
     public String getClusterName() {

File: store/src/main/java/org/apache/rocketmq/store/ha/DefaultHAClient.java
Patch:
@@ -309,6 +309,7 @@ public void run() {
             try {
                 switch (this.currentState) {
                     case SHUTDOWN:
+                        this.flowMonitor.shutdown(true);
                         return;
                     case READY:
                         if (!this.connectMaster()) {
@@ -339,6 +340,7 @@ public void run() {
             }
         }
 
+        this.flowMonitor.shutdown(true);
         log.info(this.getServiceName() + " service end");
     }
 

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAClient.java
Patch:
@@ -398,6 +398,7 @@ public void run() {
             try {
                 switch (this.currentState) {
                     case SHUTDOWN:
+                        this.flowMonitor.shutdown(true);
                         return;
                     case READY:
                         // Truncate invalid msg first
@@ -437,6 +438,8 @@ public void run() {
             }
         }
 
+        this.flowMonitor.shutdown(true);
+        LOGGER.info(this.getServiceName() + " service end");
     }
 
     /**

File: broker/src/main/java/org/apache/rocketmq/broker/schedule/ScheduleMessageService.java
Patch:
@@ -717,9 +717,7 @@ public int getResendCount() {
         }
 
         public PutResultProcess thenProcess() {
-            this.future.thenAccept(result -> {
-                this.handleResult(result);
-            });
+            this.future.thenAccept(this::handleResult);
 
             this.future.exceptionally(e -> {
                 log.error("ScheduleMessageService put message exceptionally, info: {}",

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcConverter.java
Patch:
@@ -139,7 +139,7 @@ protected SystemProperties buildSystemProperties(MessageExt messageExt) {
         }
 
         // message_id
-        String uniqKey = messageExt.getProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX);
+        String uniqKey = messageExt.getMsgId();
         if (uniqKey != null) {
             systemPropertiesBuilder.setMessageId(uniqKey);
         }

File: store/src/main/java/org/apache/rocketmq/store/ha/FlowMonitor.java
Patch:
@@ -45,7 +45,7 @@ public void calculateSpeed() {
     }
 
     public int canTransferMaxByteNum() {
-        //Flow control is not started at present
+        // Flow control is not started at present
         if (this.isFlowControlEnable()) {
             long res = Math.max(this.maxTransferByteInSecond() - this.transferredByte.get(), 0);
             return res > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) res;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -388,7 +388,7 @@ public boolean sendMessageBack(final MessageExt msg) {
             MessageAccessor.setOriginMessageId(newMsg, UtilAll.isBlank(originMsgId) ? msg.getMsgId() : originMsgId);
             newMsg.setFlag(msg.getFlag());
             MessageAccessor.putProperty(newMsg, MessageConst.PROPERTY_RETRY_TOPIC, msg.getTopic());
-            MessageAccessor.setReconsumeTime(newMsg, String.valueOf(msg.getReconsumeTimes()));
+            MessageAccessor.setReconsumeTime(newMsg, String.valueOf(msg.getReconsumeTimes() + 1));
             MessageAccessor.setMaxReconsumeTimes(newMsg, String.valueOf(getMaxReconsumeTimes()));
             MessageAccessor.clearProperty(newMsg, MessageConst.PROPERTY_TRANSACTION_PREPARED);
             newMsg.setDelayTimeLevel(3 + msg.getReconsumeTimes());

File: acl/src/test/java/org/apache/rocketmq/acl/common/PermissionTest.java
Patch:
@@ -163,8 +163,8 @@ public void AclExceptionTest() {
         Assert.assertEquals(aclExceptionWithMessage.getStatus(),"CAL_SIGNATURE_FAILED");
         aclException.setCode(10016);
         Assert.assertEquals(aclException.getCode(),10016);
-        aclException.setStatus("netaddress examine scope Exception netaddress");
-        Assert.assertEquals(aclException.getStatus(),"netaddress examine scope Exception netaddress");
+        aclException.setStatus("netAddress examine scope Exception netAddress");
+        Assert.assertEquals(aclException.getStatus(),"netAddress examine scope Exception netAddress");
     }
 
     @Test

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessor.java
Patch:
@@ -174,7 +174,7 @@ protected CompletableFuture<MessageReceiptHandle> startRenewMessage(MessageRecei
                 log.warn("handle has exceed max renewRetryTimes. handle:{}", messageReceiptHandle);
                 return CompletableFuture.completedFuture(null);
             }
-            if (current - messageReceiptHandle.getTimestamp() < messageReceiptHandle.getExpectInvisibleTime()) {
+            if (current - messageReceiptHandle.getConsumeTimestamp() < proxyConfig.getRenewMaxTimeMillis()) {
                 CompletableFuture<AckResult> future =
                     messagingProcessor.changeInvisibleTime(context, handle, messageReceiptHandle.getMessageId(),
                         messageReceiptHandle.getGroup(), messageReceiptHandle.getTopic(), proxyConfig.getRenewSliceTimeMillis());

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessorTest.java
Patch:
@@ -261,10 +261,11 @@ public void testRenewWithErrorThenOK() {
 
     @Test
     public void testRenewReceiptHandleWhenTimeout() {
-        long newInvisibleTime = 0L;
+        long newInvisibleTime = 200L;
+        long maxRenewMs = ConfigurationManager.getProxyConfig().getRenewMaxTimeMillis();
         String newReceiptHandle = ReceiptHandle.builder()
             .startOffset(0L)
-            .retrieveTime(0)
+            .retrieveTime(System.currentTimeMillis() - maxRenewMs)
             .invisibleTime(newInvisibleTime)
             .reviveQueueId(1)
             .topicType(ReceiptHandle.NORMAL_TOPIC)

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/mock/MemoryFileSegment.java
Patch:
@@ -26,11 +26,11 @@
 import org.junit.Assert;
 
 public class MemoryFileSegment extends TieredFileSegment {
-    private final ByteBuffer memStore;
+    protected final ByteBuffer memStore;
 
     public CompletableFuture<Boolean> blocker;
 
-    public static boolean checkSize = true;
+    protected boolean checkSize = true;
 
     public MemoryFileSegment(TieredFileSegment.FileSegmentType fileType, MessageQueue messageQueue, long baseOffset,
         TieredMessageStoreConfig storeConfig) {

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainPermissionManager.java
Patch:
@@ -611,7 +611,7 @@ public void validate(PlainAccessResource plainAccessResource) {
         }
 
         if (plainAccessResource.getAccessKey() == null) {
-            throw new AclException(String.format("No accessKey is configured"));
+            throw new AclException("No accessKey is configured");
         }
 
         if (!accessKeyTable.containsKey(plainAccessResource.getAccessKey())) {

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DLedgerController.java
Patch:
@@ -78,7 +78,7 @@ public class DLedgerController implements Controller {
     private final EventSerializer eventSerializer;
     private final RoleChangeHandler roleHandler;
     private final DLedgerControllerStateMachine statemachine;
-    // Usr for checking whether the broker is alive
+    // use for checking whether the broker is alive
     private BiPredicate<String, String> brokerAlivePredicate;
     // use for elect a master
     private ElectPolicy electPolicy;

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -188,9 +188,9 @@ public void start() throws MQClientException {
 
                 this.serviceState = ServiceState.RUNNING;
 
-                int theadPoolCoreSize = Integer.parseInt(System.getProperty("rocketmq.admin.threadpool.coresize", "20"));
+                int threadPoolCoreSize = Integer.parseInt(System.getProperty("rocketmq.admin.threadpool.coresize", "20"));
 
-                this.threadPoolExecutor = new ThreadPoolExecutor(theadPoolCoreSize, 100, 5, TimeUnit.MINUTES, new LinkedBlockingQueue<>(), new ThreadFactoryImpl("DefaultMQAdminExtImpl_"));
+                this.threadPoolExecutor = new ThreadPoolExecutor(threadPoolCoreSize, 100, 5, TimeUnit.MINUTES, new LinkedBlockingQueue<>(), new ThreadFactoryImpl("DefaultMQAdminExtImpl_"));
 
                 break;
             case RUNNING:

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -770,10 +770,9 @@ public boolean initialize() throws CloneNotSupportedException {
         }
         if (messageStore != null) {
             registerMessageStoreHook();
+            result = result && this.messageStore.load();
         }
 
-        result = result && this.messageStore.load();
-
         if (messageStoreConfig.isTimerWheelEnable()) {
             result = result && this.timerMessageStore.load();
         }

File: test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleBase.java
Patch:
@@ -117,7 +117,7 @@ public BrokerController startBroker(String namesrvAddress, String controllerAddr
         final BrokerController brokerController = new BrokerController(brokerConfig, nettyServerConfig, new NettyClientConfig(), storeConfig);
         assertTrue(brokerController.initialize());
         brokerController.start();
-        this.brokerList.add(brokerController);
+        brokerList.add(brokerController);
         await().atMost(20, TimeUnit.SECONDS).until(() -> (expectedRole == BrokerRole.SYNC_MASTER) == brokerController.getReplicasManager().isMasterState());
         return brokerController;
     }

File: common/src/main/java/org/apache/rocketmq/common/MQVersion.java
Patch:
@@ -18,7 +18,7 @@
 
 public class MQVersion {
 
-    public static final int CURRENT_VERSION = Version.V5_0_1.ordinal();
+    public static final int CURRENT_VERSION = Version.V5_1_0.ordinal();
 
     public static String getVersionDesc(int value) {
         int length = Version.values().length;

File: common/src/main/java/org/apache/rocketmq/common/MQVersion.java
Patch:
@@ -18,7 +18,7 @@
 
 public class MQVersion {
 
-    public static final int CURRENT_VERSION = Version.V5_0_0.ordinal();
+    public static final int CURRENT_VERSION = Version.V5_0_1.ordinal();
 
     public static String getVersionDesc(int value) {
         int length = Version.values().length;

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -2975,7 +2975,7 @@ class ConcurrentReputMessageService extends ReputMessageService {
 
         private DispatchService dispatchService;
 
-        public ConcurrentReputMessageService(){
+        public ConcurrentReputMessageService() {
             super();
             this.mainBatchDispatchRequestService = new MainBatchDispatchRequestService();
             this.dispatchService = new DispatchService();

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -54,7 +54,6 @@
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentLinkedQueue;
-import java.util.concurrent.LinkedBlockingDeque;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.Supplier;
 import org.apache.commons.lang3.StringUtils;
@@ -3086,7 +3085,7 @@ public void shutdown() {
                         this.reputFromOffset);
             }
 
-            this.shutdown();
+            super.shutdown();
         }
 
         @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/GetBrokerEpochSubCommand.java
Patch:
@@ -116,8 +116,9 @@ private void printData(Set<String> brokers, DefaultMQAdminExt defaultMQAdminExt)
                 if (i == epochList.size() - 1) {
                     epochEntry.setEndOffset(epochCache.getMaxOffset());
                 }
-                System.out.printf("\n#Epoch: %s\n", epochEntry.toString());
+                System.out.printf("\n#Epoch: %s", epochEntry.toString());
             }
+            System.out.print("\n");
         }
     }
 }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -491,10 +491,9 @@ private RemotingCommand handlePutMessageResult(PutMessageResult putMessageResult
                 int wroteSize = request.getBody().length;
                 int msgNum = Math.max(appendMessageResult != null ? appendMessageResult.getMsgNum() : 1, 1);
                 int commercialMsgNum = (int) Math.ceil(wroteSize / (double) commercialSizePerMsg);
-                int incValue = commercialMsgNum;
 
                 sendMessageContext.setCommercialSendStats(BrokerStatsManager.StatsType.SEND_FAILURE);
-                sendMessageContext.setCommercialSendTimes(incValue);
+                sendMessageContext.setCommercialSendTimes(commercialMsgNum);
                 sendMessageContext.setCommercialSendSize(wroteSize);
                 sendMessageContext.setCommercialOwner(owner);
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java
Patch:
@@ -1215,12 +1215,11 @@ private boolean isSetEqual(Set<MessageQueue> set1, Set<MessageQueue> set2) {
             return true;
         }
 
-        if (set1 == null || set2 == null || set1.size() != set2.size()
-            || set1.size() == 0 || set2.size() == 0) {
+        if (set1 == null || set2 == null || set1.size() != set2.size() || set1.size() == 0) {
             return false;
         }
 
-        Iterator iter = set2.iterator();
+        Iterator<MessageQueue> iter = set2.iterator();
         boolean isEqual = true;
         while (iter.hasNext()) {
             if (!set1.contains(iter.next())) {

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -1297,7 +1297,7 @@ public TransactionSendResult sendMessageInTransaction(final Message msg,
                     }
                     if (null != localTransactionExecuter) {
                         localTransactionState = localTransactionExecuter.executeLocalTransactionBranch(msg, arg);
-                    } else if (transactionListener != null) {
+                    } else {
                         log.debug("Used new transaction API");
                         localTransactionState = transactionListener.executeLocalTransaction(msg, arg);
                     }

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -521,9 +521,10 @@ public void updateNameServerAddressList(List<String> addrs) {
             } else if (addrs.size() != old.size()) {
                 update = true;
             } else {
-                for (int i = 0; i < addrs.size() && !update; i++) {
-                    if (!old.contains(addrs.get(i))) {
+                for (String addr : addrs) {
+                    if (!old.contains(addr)) {
                         update = true;
+                        break;
                     }
                 }
             }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ChangeInvisibleTimeProcessor.java
Patch:
@@ -212,7 +212,7 @@ private PutMessageResult appendCheckPoint(final ChangeInvisibleTimeRequestHeader
         ck.setStartOffset(offset);
         ck.setCId(requestHeader.getConsumerGroup());
         ck.setTopic(requestHeader.getTopic());
-        ck.setQueueId((byte) queueId);
+        ck.setQueueId(queueId);
         ck.addDiff(0);
         ck.setBrokerName(brokerName);
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopBufferMergeService.java
Patch:
@@ -425,7 +425,7 @@ public void addCkMock(String group, String topic, int queueId, long startOffset,
         ck.setStartOffset(startOffset);
         ck.setCId(group);
         ck.setTopic(topic);
-        ck.setQueueId((byte) queueId);
+        ck.setQueueId(queueId);
         ck.setBrokerName(brokerName);
 
         PopCheckPointWrapper pointWrapper = new PopCheckPointWrapper(reviveQueueId, Long.MAX_VALUE, ck, nextBeginOffset, true);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java
Patch:
@@ -809,7 +809,7 @@ private void appendCheckPoint(final PopMessageRequestHeader requestHeader,
         ck.setStartOffset(offset);
         ck.setCId(requestHeader.getConsumerGroup());
         ck.setTopic(topic);
-        ck.setQueueId((byte) queueId);
+        ck.setQueueId(queueId);
         ck.setBrokerName(brokerName);
         for (Long msgQueueOffset : getMessageTmpResult.getMessageQueueOffset()) {
             ck.addDiff((int) (msgQueueOffset - offset));

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
Patch:
@@ -419,7 +419,7 @@ private PopCheckPoint createMockCkForAck(AckMsg ackMsg, long reviveOffset) {
         PopCheckPoint point = new PopCheckPoint();
         point.setStartOffset(ackMsg.getStartOffset());
         point.setPopTime(ackMsg.getPopTime());
-        point.setQueueId((byte) ackMsg.getQueueId());
+        point.setQueueId(ackMsg.getQueueId());
         point.setCId(ackMsg.getConsumerGroup());
         point.setTopic(ackMsg.getTopic());
         point.setNum((byte) 0);

File: broker/src/test/java/org/apache/rocketmq/broker/processor/PopBufferMergeServiceTest.java
Patch:
@@ -100,7 +100,7 @@ public void testBasic() throws Exception {
         ck.setCId(group);
         ck.setTopic(topic);
         int queueId = 0;
-        ck.setQueueId((byte) queueId);
+        ck.setQueueId(queueId);
 
         int reviveQid = 0;
         long nextBeginOffset = 101L;

File: broker/src/test/java/org/apache/rocketmq/broker/processor/PopInflightMessageCounterTest.java
Patch:
@@ -53,7 +53,7 @@ public void testNum() {
         PopCheckPoint popCheckPoint = new PopCheckPoint();
         popCheckPoint.setTopic(topic);
         popCheckPoint.setCId(group);
-        popCheckPoint.setQueueId((byte) 0);
+        popCheckPoint.setQueueId(0);
         popCheckPoint.setPopTime(System.currentTimeMillis());
 
         counter.decrementInFlightMessageNum(popCheckPoint);

File: broker/src/test/java/org/apache/rocketmq/broker/processor/PopReviveServiceTest.java
Patch:
@@ -208,7 +208,7 @@ public static PopCheckPoint buildPopCheckPoint(long startOffset, long popTime, l
         PopCheckPoint ck = new PopCheckPoint();
         ck.setStartOffset(startOffset);
         ck.setPopTime(popTime);
-        ck.setQueueId((byte) 0);
+        ck.setQueueId(0);
         ck.setCId(GROUP);
         ck.setTopic(TOPIC);
         ck.setNum((byte) 1);

File: store/src/main/java/org/apache/rocketmq/store/pop/PopCheckPoint.java
Patch:
@@ -32,7 +32,7 @@ public class PopCheckPoint implements Comparable<PopCheckPoint> {
     @JSONField(name = "n")
     private byte num;
     @JSONField(name = "q")
-    private byte queueId;
+    private int queueId;
     @JSONField(name = "t")
     private String topic;
     @JSONField(name = "c")
@@ -96,11 +96,11 @@ public void setNum(byte num) {
         this.num = num;
     }
 
-    public byte getQueueId() {
+    public int getQueueId() {
         return queueId;
     }
 
-    public void setQueueId(byte queueId) {
+    public void setQueueId(int queueId) {
         this.queueId = queueId;
     }
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/metrics/TieredStoreMetricsConstant.java
Patch:
@@ -40,7 +40,7 @@ public class TieredStoreMetricsConstant {
 
     public static final String LABEL_TOPIC = "topic";
     public static final String LABEL_GROUP = "group";
-    public static final String LABEL_QUEUE = "queue";
+    public static final String LABEL_QUEUE_ID = "queue_id";
     public static final String LABEL_FILE_TYPE = "file_type";
 
     // blob constants

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
Patch:
@@ -131,7 +131,7 @@ private boolean reviveRetry(PopCheckPoint popCheckPoint, MessageExt messageExt)
             return false;
         }
         this.brokerController.getPopInflightMessageCounter().decrementInFlightMessageNum(popCheckPoint);
-        this.brokerController.getBrokerStatsManager().incBrokerPutNums(1);
+        this.brokerController.getBrokerStatsManager().incBrokerPutNums(popCheckPoint.getTopic(), 1);
         this.brokerController.getBrokerStatsManager().incTopicPutNums(msgInner.getTopic());
         this.brokerController.getBrokerStatsManager().incTopicPutSize(msgInner.getTopic(), putMessageResult.getAppendMessageResult().getWroteBytes());
         if (brokerController.getPopMessageProcessor() != null) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ReplyMessageProcessor.java
Patch:
@@ -295,7 +295,7 @@ private void handlePutMessageResult(PutMessageResult putMessageResult,
             this.brokerController.getBrokerStatsManager().incTopicPutNums(msg.getTopic(), putMessageResult.getAppendMessageResult().getMsgNum(), 1);
             this.brokerController.getBrokerStatsManager().incTopicPutSize(msg.getTopic(),
                 putMessageResult.getAppendMessageResult().getWroteBytes());
-            this.brokerController.getBrokerStatsManager().incBrokerPutNums(putMessageResult.getAppendMessageResult().getMsgNum());
+            this.brokerController.getBrokerStatsManager().incBrokerPutNums(msg.getTopic(), putMessageResult.getAppendMessageResult().getMsgNum());
 
             if (!BrokerMetricsManager.isRetryOrDlqTopic(msg.getTopic())) {
                 Attributes attributes = BrokerMetricsManager.newAttributesBuilder()

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -429,7 +429,7 @@ private RemotingCommand handlePutMessageResult(PutMessageResult putMessageResult
             this.brokerController.getBrokerStatsManager().incTopicPutNums(msg.getTopic(), putMessageResult.getAppendMessageResult().getMsgNum(), 1);
             this.brokerController.getBrokerStatsManager().incTopicPutSize(msg.getTopic(),
                 putMessageResult.getAppendMessageResult().getWroteBytes());
-            this.brokerController.getBrokerStatsManager().incBrokerPutNums(putMessageResult.getAppendMessageResult().getMsgNum());
+            this.brokerController.getBrokerStatsManager().incBrokerPutNums(msg.getTopic(), putMessageResult.getAppendMessageResult().getMsgNum());
             this.brokerController.getBrokerStatsManager().incTopicPutLatency(msg.getTopic(), queueIdInt,
                 (int) (this.brokerController.getMessageStore().now() - beginTimeMillis));
 

File: broker/src/main/java/org/apache/rocketmq/broker/schedule/ScheduleMessageService.java
Patch:
@@ -758,7 +758,7 @@ public void onSuccess(PutMessageResult result) {
 
                 ScheduleMessageService.this.brokerController.getBrokerStatsManager().incTopicPutNums(this.topic, result.getAppendMessageResult().getMsgNum(), 1);
                 ScheduleMessageService.this.brokerController.getBrokerStatsManager().incTopicPutSize(this.topic, result.getAppendMessageResult().getWroteBytes());
-                ScheduleMessageService.this.brokerController.getBrokerStatsManager().incBrokerPutNums(result.getAppendMessageResult().getMsgNum());
+                ScheduleMessageService.this.brokerController.getBrokerStatsManager().incBrokerPutNums(this.topic, result.getAppendMessageResult().getMsgNum());
 
                 attributes = BrokerMetricsManager.newAttributesBuilder()
                     .put(LABEL_TOPIC, topic)

File: example/src/main/java/org/apache/rocketmq/example/quickstart/Producer.java
Patch:
@@ -54,7 +54,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
          * </pre>
          */
         // Uncomment the following line while debugging, namesrvAddr should be set to your local address
-//        producer.setNamesrvAddr(DEFAULT_NAMESRVADDR);
+        producer.setNamesrvAddr(DEFAULT_NAMESRVADDR);
 
         /*
          * Launch the instance.

File: store/src/main/java/org/apache/rocketmq/store/stats/BrokerStats.java
Patch:
@@ -43,7 +43,7 @@ public void record() {
         this.msgGetTotalYesterdayMorning = this.msgGetTotalTodayMorning;
 
         this.msgPutTotalTodayMorning =
-            this.defaultMessageStore.getStoreStatsService().getPutMessageTimesTotal();
+            this.defaultMessageStore.getBrokerStatsManager().getBrokerPutNumsWithoutSystemTopic();
         this.msgGetTotalTodayMorning =
             this.defaultMessageStore.getBrokerStatsManager().getBrokerGetNumsWithoutSystemTopic();
 
@@ -84,7 +84,7 @@ public void setMsgGetTotalTodayMorning(long msgGetTotalTodayMorning) {
     }
 
     public long getMsgPutTotalTodayNow() {
-        return this.defaultMessageStore.getStoreStatsService().getPutMessageTimesTotal();
+        return this.defaultMessageStore.getBrokerStatsManager().getBrokerPutNumsWithoutSystemTopic();
     }
 
     public long getMsgGetTotalTodayNow() {

File: store/src/main/java/org/apache/rocketmq/store/timer/TimerMessageStore.java
Patch:
@@ -1050,7 +1050,7 @@ private int doPut(MessageExtBrokerInner message, boolean roll) throws Exception
                             this.brokerStatsManager.incTopicPutNums(message.getTopic(), 1, 1);
                             this.brokerStatsManager.incTopicPutSize(message.getTopic(),
                                 putMessageResult.getAppendMessageResult().getWroteBytes());
-                            this.brokerStatsManager.incBrokerPutNums(1);
+                            this.brokerStatsManager.incBrokerPutNums(message.getTopic(), 1);
                         }
                         return PUT_OK;
                     case SERVICE_NOT_AVAILABLE:

File: broker/src/test/java/org/apache/rocketmq/broker/BrokerOuterAPITest.java
Patch:
@@ -60,6 +60,7 @@
 import org.mockito.stubbing.Answer;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyLong;
@@ -110,7 +111,7 @@ public void test_needRegister_normal() throws Exception {
         when(nettyRemotingClient.invokeSync(anyString(), any(RemotingCommand.class), anyLong())).thenReturn(response);
         List<Boolean> booleanList = brokerOuterAPI.needRegister(clusterName, brokerAddr, brokerName, brokerId, topicConfigSerializeWrapper, timeOut, false);
         assertTrue(booleanList.size() > 0);
-        assertEquals(false, booleanList.contains(Boolean.FALSE));
+        assertFalse(booleanList.contains(Boolean.FALSE));
     }
 
     @Test
@@ -145,7 +146,7 @@ public boolean apply(Boolean input) {
                 }
             });
 
-        assertEquals(true, success);
+        assertTrue(success);
 
     }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -435,7 +435,7 @@ public void checkClientInBroker() throws MQClientException {
                     continue;
                 }
                 // may need to check one broker every cluster...
-                // assume that the configs of every broker in cluster are the the same.
+                // assume that the configs of every broker in cluster are the same.
                 String addr = findBrokerAddrByTopic(subscriptionData.getTopic());
 
                 if (addr != null) {
@@ -556,9 +556,9 @@ private void sendHeartbeatToAllBroker() {
                     }
                 } catch (Exception e) {
                     if (this.isBrokerInNameServer(addr)) {
-                        log.info("send heart beat to broker[{} {} {}] failed", brokerName, id, addr, e);
+                        log.warn("send heart beat to broker[{} {} {}] failed", brokerName, id, addr, e);
                     } else {
-                        log.info("send heart beat to broker[{} {} {}] exception, because the broker not up, forget it", brokerName,
+                        log.warn("send heart beat to broker[{} {} {}] exception, because the broker not up, forget it", brokerName,
                                 id, addr, e);
                     }
                 }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -428,6 +428,7 @@ private synchronized RemotingCommand updateAndCreateTopic(ChannelHandlerContext
         topicConfig.setTopicFilterType(requestHeader.getTopicFilterTypeEnum());
         topicConfig.setPerm(requestHeader.getPerm());
         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());
+        topicConfig.setOrder(requestHeader.getOrder());
         String attributesModification = requestHeader.getAttributes();
         topicConfig.setAttributes(AttributeParser.parseToMap(attributesModification));
 

File: store/src/main/java/org/apache/rocketmq/store/queue/ConsumeQueueStore.java
Patch:
@@ -375,6 +375,7 @@ public Long getMaxOffset(String topic, int queueId) {
 
     public void setTopicQueueTable(ConcurrentMap<String, Long> topicQueueTable) {
         this.queueOffsetAssigner.setTopicQueueTable(topicQueueTable);
+        this.queueOffsetAssigner.setLmqTopicQueueTable(topicQueueTable);
     }
 
     public ConcurrentMap getTopicQueueTable() {

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/container/TieredIndexFile.java
Patch:
@@ -45,8 +45,8 @@ public class TieredIndexFile {
     public static final int INDEX_FILE_BEGIN_MAGIC_CODE = 0xCCDDEEFF ^ 1880681586 + 4;
     public static final int INDEX_FILE_END_MAGIC_CODE = 0xCCDDEEFF ^ 1880681586 + 8;
     private static final int INDEX_FILE_HEADER_SIZE = 28;
-    private static final int INDEX_FILE_HASH_SLOT_SIZE = 8;
-    private static final int INDEX_FILE_HASH_ORIGIN_INDEX_SIZE = 32;
+    public static final int INDEX_FILE_HASH_SLOT_SIZE = 8;
+    public static final int INDEX_FILE_HASH_ORIGIN_INDEX_SIZE = 32;
     public static final int INDEX_FILE_HASH_COMPACT_INDEX_SIZE = 28;
 
     public static final int INDEX_FILE_HEADER_MAGIC_CODE_POSITION = 0;

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/metrics/TieredStoreMetricsConstant.java
Patch:
@@ -36,6 +36,8 @@ public class TieredStoreMetricsConstant {
     public static final String GAUGE_STORAGE_MESSAGE_RESERVE_TIME = "rocketmq_storage_message_reserve_time";
 
     public static final String LABEL_OPERATION = "operation";
+    public static final String LABEL_SUCCESS = "success";
+
     public static final String LABEL_TOPIC = "topic";
     public static final String LABEL_GROUP = "group";
     public static final String LABEL_QUEUE = "queue";

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/provider/TieredStoreProvider.java
Patch:
@@ -19,7 +19,7 @@
 import java.nio.ByteBuffer;
 import java.util.concurrent.CompletableFuture;
 
-public interface TieredStoreBackendProvider {
+public interface TieredStoreProvider {
     /**
      * Get file path in backend file system
      *

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/util/TieredStoreUtil.java
Patch:
@@ -42,7 +42,7 @@ public class TieredStoreUtil {
     public static final long PB = TB << 10;
     public static final long EB = PB << 10;
 
-    public static final String TIERED_STORE_LOGGER_NAME = "RocketMQTieredStore";
+    public static final String TIERED_STORE_LOGGER_NAME = "RocketmqTieredStore";
     public static final String RMQ_SYS_TIERED_STORE_INDEX_TOPIC = "rmq_sys_INDEX";
     public final static int MSG_ID_LENGTH = 8 + 8;
 

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/TieredMessageFetcherTest.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.rocketmq.tieredstore.common.SelectMappedBufferResultWrapper;
 import org.apache.rocketmq.tieredstore.common.TieredMessageStoreConfig;
 import org.apache.rocketmq.tieredstore.container.TieredContainerManager;
+import org.apache.rocketmq.tieredstore.container.TieredIndexFile;
 import org.apache.rocketmq.tieredstore.container.TieredMessageQueueContainer;
 import org.apache.rocketmq.tieredstore.metadata.TieredMetadataStore;
 import org.apache.rocketmq.tieredstore.mock.MemoryFileSegment;
@@ -282,6 +283,8 @@ public void testQueryMessageAsync() {
         request = new DispatchRequest(mq.getTopic(), mq.getQueueId(), MessageBufferUtilTest.MSG_LEN * 2, MessageBufferUtilTest.MSG_LEN, 0, 0, 0, "", "another-key", 0, 0, null);
         container.appendIndexFile(request);
         container.commit(true);
+        TieredIndexFile indexFile = TieredContainerManager.getIndexFile(storeConfig);
+        indexFile.commit(true);
         Assert.assertEquals(1, fetcher.queryMessageAsync(mq.getTopic(), "key", 1, 0, Long.MAX_VALUE).join().getMessageMapedList().size());
 
         QueryMessageResult result = fetcher.queryMessageAsync(mq.getTopic(), "key", 32, 0, Long.MAX_VALUE).join();

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/container/TieredIndexFileTest.java
Patch:
@@ -35,6 +35,7 @@
 import org.junit.Assert;
 import org.junit.Assume;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 
 public class TieredIndexFileTest {
@@ -61,6 +62,7 @@ public void tearDown() throws IOException {
 //        metadataStore.reLoadStore();
     }
 
+    @Ignore
     @Test
     public void testAppendAndQuery() throws IOException, ClassNotFoundException, NoSuchMethodException {
         // skip this test on windows

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -1739,7 +1739,7 @@ protected void doRegisterBrokerAll(boolean checkOrderConfig, boolean oneway,
 
     protected void sendHeartbeat() {
         if (this.brokerConfig.isEnableControllerMode()) {
-            final List<String> controllerAddresses = this.replicasManager.getControllerAddresses();
+            final List<String> controllerAddresses = this.replicasManager.getAvailableControllerAddresses();
             for (String controllerAddress : controllerAddresses) {
                 if (StringUtils.isNotEmpty(controllerAddress)) {
                     this.brokerOuterAPI.sendHeartbeatToController(

File: broker/src/test/java/org/apache/rocketmq/broker/controller/ReplicasManagerTest.java
Patch:
@@ -123,6 +123,7 @@ public void before() throws Exception {
         when(brokerController.getBrokerOuterAPI()).thenReturn(brokerOuterAPI);
         when(brokerController.getBrokerAddr()).thenReturn(OLD_MASTER_ADDRESS);
         when(brokerOuterAPI.getControllerMetaData(any())).thenReturn(getMetaDataResponseHeader);
+        when(brokerOuterAPI.checkAddressReachable(any())).thenReturn(true);
         when(brokerOuterAPI.registerBrokerToController(any(), any(), any(), any(), anyLong(), anyInt(), anyLong(), anyInt())).thenReturn(registerBrokerToControllerResponseHeader);
         when(brokerOuterAPI.getReplicaInfo(any(), any(), any())).thenReturn(result);
         replicasManager = new ReplicasManager(brokerController);

File: remoting/src/main/java/org/apache/rocketmq/remoting/RemotingClient.java
Patch:
@@ -52,5 +52,7 @@ void registerProcessor(final int requestCode, final NettyRequestProcessor proces
 
     boolean isChannelWritable(final String addr);
 
+    boolean isAddressReachable(final String addr);
+
     void closeChannels(final List<String> addrList);
 }

File: broker/src/main/java/org/apache/rocketmq/broker/out/BrokerOuterAPI.java
Patch:
@@ -183,7 +183,7 @@ public String fetchNameServerAddr() {
         return nameSrvAddr;
     }
 
-    private List<String> lookupNameServerAddress(String domain) {
+    public List<String> dnsLookupAddressByDomain(String domain) {
         List<String> addressList = new ArrayList<>();
         try {
             java.security.Security.setProperty("networkaddress.cache.ttl", "10");
@@ -208,7 +208,7 @@ public void updateNameServerAddressList(final String addrs) {
     }
 
     public void updateNameServerAddressListByDnsLookup(final String domain) {
-        List<String> lst = this.lookupNameServerAddress(domain);
+        List<String> lst = this.dnsLookupAddressByDomain(domain);
         this.remotingClient.updateNameServerAddressList(lst);
     }
 

File: broker/src/test/java/org/apache/rocketmq/broker/BrokerOuterAPITest.java
Patch:
@@ -238,7 +238,7 @@ public void testLookupAddressByDomain() throws Exception {
         init();
         brokerOuterAPI.start();
         Class<BrokerOuterAPI> clazz = BrokerOuterAPI.class;
-        Method method = clazz.getDeclaredMethod("lookupNameServerAddress", String.class);
+        Method method = clazz.getDeclaredMethod("dnsLookupAddressByDomain", String.class);
         method.setAccessible(true);
         List<String> addressList = (List<String>) method.invoke(brokerOuterAPI, "localhost:6789");
         AtomicBoolean result = new AtomicBoolean(false);

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/common/AppendResult.java
Patch:
@@ -14,14 +14,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.store.tiered.common;
+package org.apache.rocketmq.tieredstore.common;
 
 public enum AppendResult {
     SUCCESS,
     OFFSET_INCORRECT,
     BUFFER_FULL,
     FILE_FULL,
     IO_ERROR,
-    FILE_CLOSE,
+    FILE_CLOSED,
     UNKNOWN_ERROR
 }

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/common/BoundaryType.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.store.tiered.common;
+package org.apache.rocketmq.tieredstore.common;
 
 public enum BoundaryType {
     /**

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/common/TieredMessageStoreConfig.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.store.tiered.common;
+package org.apache.rocketmq.tieredstore.common;
 
 import java.io.File;
 import java.net.InetAddress;
@@ -73,7 +73,7 @@ public boolean check(TieredStorageLevel targetLevel) {
     private int tieredStoreIndexFileMaxIndexNum = 5000000 * 4;
     // index file will force rolling to next file after idle specified time, default is 3h
     private int tieredStoreIndexFileRollingIdleInterval = 3 * 60 * 60 * 1000;
-    private String tieredMetadataServiceProvider = "org.apache.rocketmq.store.tiered.metadata.TieredMetadataManager";
+    private String tieredMetadataServiceProvider = "org.apache.rocketmq.tieredstore.metadata.TieredMetadataManager";
     private String tieredBackendServiceProvider = "";
     // file reserved time, default is 72 hour
     private int tieredStoreFileReservedTime = 72;

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/common/TieredStoreExecutor.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.store.tiered.common;
+package org.apache.rocketmq.tieredstore.common;
 
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.ExecutorService;

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/exception/TieredStoreErrorCode.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.store.tiered.exception;
+package org.apache.rocketmq.tieredstore.exception;
 
 public enum TieredStoreErrorCode {
     ILLEGAL_OFFSET,

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/exception/TieredStoreException.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.store.tiered.exception;
+package org.apache.rocketmq.tieredstore.exception;
 
 public class TieredStoreException extends RuntimeException {
     private TieredStoreErrorCode errorCode;

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/metadata/FileSegmentMetadata.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.store.tiered.metadata;
+package org.apache.rocketmq.tieredstore.metadata;
 
 import org.apache.rocketmq.common.message.MessageQueue;
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/metadata/QueueMetadata.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.store.tiered.metadata;
+package org.apache.rocketmq.tieredstore.metadata;
 
 import org.apache.rocketmq.common.message.MessageQueue;
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/metadata/TieredMetadataSerializeWrapper.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.store.tiered.metadata;
+package org.apache.rocketmq.tieredstore.metadata;
 
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicInteger;

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/metadata/TopicMetadata.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.store.tiered.metadata;
+package org.apache.rocketmq.tieredstore.metadata;
 
 public class TopicMetadata {
     private int topicId;

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/util/CQItemBufferUtil.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.store.tiered.util;
+package org.apache.rocketmq.tieredstore.util;
 
 import java.nio.ByteBuffer;
 

File: tieredstore/src/main/java/org/apache/rocketmq/tieredstore/util/MessageBufferUtil.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.store.tiered.util;
+package org.apache.rocketmq.tieredstore.util;
 
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
-import org.apache.rocketmq.store.tiered.container.TieredCommitLog;
-import org.apache.rocketmq.store.tiered.container.TieredConsumeQueue;
+import org.apache.rocketmq.tieredstore.container.TieredCommitLog;
+import org.apache.rocketmq.tieredstore.container.TieredConsumeQueue;
 
 public class MessageBufferUtil {
     private static final Logger logger = LoggerFactory.getLogger(TieredStoreUtil.TIERED_STORE_LOGGER_NAME);

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/util/CQItemBufferUtilTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.store.tiered.util;
+package org.apache.rocketmq.tieredstore.util;
 
 import java.nio.ByteBuffer;
 import org.apache.rocketmq.store.ConsumeQueue;

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/util/MessageBufferUtilTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.store.tiered.util;
+package org.apache.rocketmq.tieredstore.util;
 
 import java.net.InetSocketAddress;
 import java.nio.ByteBuffer;
@@ -25,8 +25,8 @@
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageDecoder;
-import org.apache.rocketmq.store.tiered.container.TieredCommitLog;
-import org.apache.rocketmq.store.tiered.container.TieredConsumeQueue;
+import org.apache.rocketmq.tieredstore.container.TieredCommitLog;
+import org.apache.rocketmq.tieredstore.container.TieredConsumeQueue;
 import org.junit.Assert;
 import org.junit.Test;
 

File: tieredstore/src/test/java/org/apache/rocketmq/tieredstore/util/TieredStoreUtilTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.store.tiered.util;
+package org.apache.rocketmq.tieredstore.util;
 
 import java.util.HashMap;
 import java.util.Map;

File: container/src/main/java/org/apache/rocketmq/container/BrokerContainer.java
Patch:
@@ -312,7 +312,7 @@ public InnerBrokerController addDLedgerBroker(final BrokerConfig brokerConfig, f
             }
             return brokerController;
         }
-        throw new Exception(brokerIdentity.getCanonicalName() + " has already been added to current broker");
+        throw new Exception(brokerIdentity.getCanonicalName() + " has already been added to current broker container");
     }
 
     public InnerBrokerController addMasterBroker(final BrokerConfig masterBrokerConfig,
@@ -350,7 +350,7 @@ public InnerBrokerController addMasterBroker(final BrokerConfig masterBrokerConf
             }
             return masterBroker;
         }
-        throw new Exception(masterBrokerConfig.getCanonicalName() + " has already been added to current broker");
+        throw new Exception(masterBrokerConfig.getCanonicalName() + " has already been added to current broker container");
     }
 
     /**
@@ -395,7 +395,7 @@ public InnerSalveBrokerController addSlaveBroker(final BrokerConfig slaveBrokerC
             }
             return slaveBroker;
         }
-        throw new Exception(slaveBrokerConfig.getCanonicalName() + " has already been added to current broker");
+        throw new Exception(slaveBrokerConfig.getCanonicalName() + " has already been added to current broker container");
     }
 
     @Override

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java
Patch:
@@ -181,6 +181,7 @@ public void notifyLongPollingRequestIfNeed(String topic, String group, int queue
                 // notify pop queue
                 notifySuccess = this.brokerController.getPopMessageProcessor().notifyMessageArriving(topic, group, queueId);
             }
+            this.brokerController.getNotificationProcessor().notifyMessageArriving(topic, queueId);
             if (this.brokerController.getBrokerConfig().isEnablePopLog()) {
                 POP_LOGGER.info("notify long polling request. topic:{}, group:{}, queueId:{}, success:{}",
                     topic, group, queueId, notifySuccess);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
Patch:
@@ -140,6 +140,8 @@ private boolean reviveRetry(PopCheckPoint popCheckPoint, MessageExt messageExt)
                 popCheckPoint.getCId(),
                 -1
             );
+            brokerController.getNotificationProcessor().notifyMessageArriving(
+                KeyBuilder.parseNormalTopic(popCheckPoint.getTopic(), popCheckPoint.getCId()), -1);
         }
         return true;
     }

File: tieredstore/src/main/java/org/apache/rocketmq/store/tiered/metadata/TieredMetadataSerializeWrapper.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
-public class TieredStoreMetadataSerializeWrapper extends RemotingSerializable {
+public class TieredMetadataSerializeWrapper extends RemotingSerializable {
     private AtomicInteger maxTopicId;
     private Map<String /*topic*/, TopicMetadata> topicMetadataTable;
     private Map<String /*topic*/, Map<Integer /*queueId*/, QueueMetadata>> queueMetadataTable;

File: common/src/main/java/org/apache/rocketmq/common/message/MessageClientIDSetter.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.rocketmq.common.UtilAll;
 
 public class MessageClientIDSetter {
-    private static final String TOPIC_KEY_SPLITTER = "#";
+    
     private static final int LEN;
     private static final char[] FIX_STRING;
     private static final AtomicInteger COUNTER;

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/RemotingProtocolServer.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.acl.AccessValidator;
-import org.apache.rocketmq.acl.plain.PlainAccessValidator;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.future.FutureTaskExt;
@@ -258,8 +257,6 @@ protected RequestPipeline createRequestPipeline() {
         };
 
         List<AccessValidator> accessValidatorList = new ArrayList<>();
-        accessValidatorList.add(new PlainAccessValidator());
-
         // add pipeline
         // the last pipe add will execute at the first
         return pipeline.pipe(new AuthenticationPipeline(accessValidatorList));

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/pipeline/AuthenticationPipeline.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.List;
 import org.apache.rocketmq.acl.AccessResource;
 import org.apache.rocketmq.acl.AccessValidator;
+import org.apache.rocketmq.acl.plain.PlainAccessValidator;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
@@ -37,6 +38,7 @@ public AuthenticationPipeline(List<AccessValidator> accessValidatorList) {
     public void execute(ChannelHandlerContext ctx, RemotingCommand request, ProxyContext context) throws Exception {
         ProxyConfig config = ConfigurationManager.getProxyConfig();
         if (config.isEnableACL()) {
+            accessValidatorList.add(new PlainAccessValidator());
             for (AccessValidator accessValidator : accessValidatorList) {
                 AccessResource accessResource = accessValidator.parse(request, context.getRemoteAddress());
                 accessValidator.validate(accessResource);

File: common/src/main/java/org/apache/rocketmq/common/constant/LoggerName.java
Patch:
@@ -19,6 +19,7 @@
 public class LoggerName {
     public static final String FILTERSRV_LOGGER_NAME = "RocketmqFiltersrv";
     public static final String NAMESRV_LOGGER_NAME = "RocketmqNamesrv";
+    public static final String NAMESRV_CONSOLE_LOGGER_NAME = "RocketmqNamesrvConsole";
     public static final String CONTROLLER_LOGGER_NAME = "RocketmqController";
     public static final String NAMESRV_WATER_MARK_LOGGER_NAME = "RocketmqNamesrvWaterMark";
     public static final String BROKER_LOGGER_NAME = "RocketmqBroker";

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/ClusterServiceManager.java
Patch:
@@ -99,7 +99,7 @@ public ClusterServiceManager(RPCHook rpcHook) {
             new ProxyClientRemotingProcessor(producerManager),
             rpcHook,
             scheduledExecutorService);
-        this.clusterTransactionService = new ClusterTransactionService(this.topicRouteService, this.producerManager, rpcHook,
+        this.clusterTransactionService = new ClusterTransactionService(this.topicRouteService, this.producerManager,
             this.transactionClientAPIFactory);
         this.proxyRelayService = new ClusterProxyRelayService(this.clusterTransactionService);
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/transaction/ClusterTransactionServiceTest.java
Patch:
@@ -59,7 +59,7 @@ public class ClusterTransactionServiceTest extends BaseServiceTest {
     @Before
     public void before() throws Throwable {
         super.before();
-        this.clusterTransactionService = new ClusterTransactionService(this.topicRouteService, this.producerManager, null,
+        this.clusterTransactionService = new ClusterTransactionService(this.topicRouteService, this.producerManager,
             this.mqClientAPIFactory);
 
         MessageQueueView messageQueueView = new MessageQueueView(TOPIC, topicRouteData);
@@ -108,6 +108,8 @@ public void testUnSubscribeAllTransactionTopic() {
 
     @Test
     public void testScanProducerHeartBeat() throws Exception {
+        when(this.producerManager.groupOnline(anyString())).thenReturn(true);
+
         Mockito.reset(this.topicRouteService);
         String brokerName2 = "broker-2-01";
         String clusterName2 = "broker-2";

File: broker/src/main/java/org/apache/rocketmq/broker/processor/NotificationProcessor.java
Patch:
@@ -250,7 +250,7 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
             int queueId = requestHeader.getQueueId();
             hasMsg = hasMsgFromQueue(false, requestHeader, queueId);
         }
-        // if it has message, fetch retry again
+        // if it doesn't have message, fetch retry again
         if (!needRetry && !hasMsg) {
             TopicConfig retryTopicConfig =
                 this.brokerController.getTopicConfigManager().selectTopicConfig(KeyBuilder.buildPopRetryTopic(requestHeader.getTopic(), requestHeader.getConsumerGroup()));

File: broker/src/main/java/org/apache/rocketmq/broker/longpolling/NotificationRequest.java
Patch:
@@ -43,7 +43,7 @@ public RemotingCommand getRemotingCommand() {
     }
 
     public boolean isTimeout() {
-        return System.currentTimeMillis() > (expired - 3000);
+        return System.currentTimeMillis() > (expired - 500);
     }
 
     public boolean complete() {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/DefaultPullMessageResultHandler.java
Patch:
@@ -118,7 +118,7 @@ public RemotingCommand handle(final GetMessageResult getMessageResult,
                 this.brokerController.getBrokerStatsManager().incGroupGetSize(requestHeader.getConsumerGroup(), requestHeader.getTopic(),
                     getMessageResult.getBufferTotalSize());
 
-                this.brokerController.getBrokerStatsManager().incBrokerGetNums(getMessageResult.getMessageCount());
+                this.brokerController.getBrokerStatsManager().incBrokerGetNums(requestHeader.getTopic(), getMessageResult.getMessageCount());
 
                 if (!BrokerMetricsManager.isRetryOrDlqTopic(requestHeader.getTopic())) {
                     Attributes attributes = BrokerMetricsManager.newAttributesBuilder()

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PeekMessageProcessor.java
Patch:
@@ -182,7 +182,7 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
                 this.brokerController.getBrokerStatsManager().incGroupGetSize(requestHeader.getConsumerGroup(), requestHeader.getTopic(),
                     getMessageResult.getBufferTotalSize());
 
-                this.brokerController.getBrokerStatsManager().incBrokerGetNums(getMessageResult.getMessageCount());
+                this.brokerController.getBrokerStatsManager().incBrokerGetNums(requestHeader.getTopic(), getMessageResult.getMessageCount());
 
                 if (this.brokerController.getBrokerConfig().isTransferMsgByHeap()) {
                     final long beginTimeMills = this.brokerController.getMessageStore().now();

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java
Patch:
@@ -593,7 +593,7 @@ private CompletableFuture<Long> popMsgFromQueue(boolean isRetry, GetMessageResul
                     return atomicRestNum.get();
                 }
                 if (!result.getMessageMapedList().isEmpty()) {
-                    this.brokerController.getBrokerStatsManager().incBrokerGetNums(result.getMessageCount());
+                    this.brokerController.getBrokerStatsManager().incBrokerGetNums(requestHeader.getTopic(), result.getMessageCount());
                     this.brokerController.getBrokerStatsManager().incGroupGetNums(requestHeader.getConsumerGroup(), topic,
                         result.getMessageCount());
                     this.brokerController.getBrokerStatsManager().incGroupGetSize(requestHeader.getConsumerGroup(), topic,

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
Patch:
@@ -211,7 +211,7 @@ public PullResult getMessage(String group, String topic, int queueId, long offse
                     foundList = decodeMsgList(getMessageResult, deCompressBody);
                     brokerController.getBrokerStatsManager().incGroupGetNums(group, topic, getMessageResult.getMessageCount());
                     brokerController.getBrokerStatsManager().incGroupGetSize(group, topic, getMessageResult.getBufferTotalSize());
-                    brokerController.getBrokerStatsManager().incBrokerGetNums(getMessageResult.getMessageCount());
+                    brokerController.getBrokerStatsManager().incBrokerGetNums(topic, getMessageResult.getMessageCount());
                     brokerController.getBrokerStatsManager().recordDiskFallBehindTime(group, topic, queueId,
                         brokerController.getMessageStore().now() - foundList.get(foundList.size() - 1).getStoreTimestamp());
 

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageBridge.java
Patch:
@@ -138,7 +138,7 @@ private PullResult getMessage(String group, String topic, int queueId, long offs
                         getMessageResult.getMessageCount());
                     this.brokerController.getBrokerStatsManager().incGroupGetSize(group, topic,
                         getMessageResult.getBufferTotalSize());
-                    this.brokerController.getBrokerStatsManager().incBrokerGetNums(getMessageResult.getMessageCount());
+                    this.brokerController.getBrokerStatsManager().incBrokerGetNums(topic, getMessageResult.getMessageCount());
                     if (foundList == null || foundList.size() == 0) {
                         break;
                     }

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -848,7 +848,6 @@ public GetMessageResult getMessage(final String group, final String topic, final
                                 selectResult.release();
                                 continue;
                             }
-
                             this.storeStatsService.getGetMessageTransferredMsgCount().add(cqUnit.getBatchNum());
                             getResult.addMessage(selectResult, cqUnit.getQueueOffset(), cqUnit.getBatchNum());
                             status = GetMessageStatus.FOUND;

File: store/src/main/java/org/apache/rocketmq/store/stats/BrokerStats.java
Patch:
@@ -45,7 +45,7 @@ public void record() {
         this.msgPutTotalTodayMorning =
             this.defaultMessageStore.getStoreStatsService().getPutMessageTimesTotal();
         this.msgGetTotalTodayMorning =
-            this.defaultMessageStore.getStoreStatsService().getGetMessageTransferredMsgCount().longValue();
+            this.defaultMessageStore.getBrokerStatsManager().getBrokerGetNumsWithoutSystemTopic();
 
         log.info("yesterday put message total: {}", msgPutTotalTodayMorning - msgPutTotalYesterdayMorning);
         log.info("yesterday get message total: {}", msgGetTotalTodayMorning - msgGetTotalYesterdayMorning);
@@ -88,6 +88,6 @@ public long getMsgPutTotalTodayNow() {
     }
 
     public long getMsgGetTotalTodayNow() {
-        return this.defaultMessageStore.getStoreStatsService().getGetMessageTransferredMsgCount().longValue();
+        return this.defaultMessageStore.getBrokerStatsManager().getBrokerGetNumsWithoutSystemTopic();
     }
 }

File: tools/src/test/java/org/apache/rocketmq/tools/command/broker/BrokerStatusSubCommandTest.java
Patch:
@@ -39,13 +39,12 @@ protected byte[] getBody() {
     public void testExecute() throws SubCommandException {
         BrokerStatusSubCommand cmd = new BrokerStatusSubCommand();
         Options options = ServerUtil.buildCommandlineOptions(new Options());
-        String[] subargs = new String[] {"-b 127.0.0.1:" + listenPort(), "-c default-cluster"};
+        String[] subargs = new String[] {"-b 127.0.0.1:" + listenPort()};
         final CommandLine commandLine =
             ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs,
                 cmd.buildCommandlineOptions(options), new DefaultParser());
 
         cmd.execute(commandLine, options, null);
     }
 
-
 }

File: broker/src/main/java/org/apache/rocketmq/broker/offset/BroadcastOffsetManager.java
Patch:
@@ -116,7 +116,7 @@ private long getOffset(BroadcastTimedOffsetStore offsetStore, String topic, Stri
                 brokerController.getConsumerOffsetManager().queryOffset(broadcastGroupId(groupId), topic, queueId);
         }
         if (storeOffset < 0) {
-            if (!this.brokerController.getMessageStore().checkInDiskByConsumeOffset(topic, queueId, 0)) {
+            if (this.brokerController.getMessageStore().checkInMemByConsumeOffset(topic, queueId, 0, 1)) {
                 storeOffset = 0;
             } else {
                 storeOffset = brokerController.getMessageStore().getMaxOffsetInQueue(topic, queueId, true);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ConsumerManageProcessor.java
Patch:
@@ -328,8 +328,8 @@ private RemotingCommand queryConsumerOffset(ChannelHandlerContext ctx, RemotingC
                 response.setCode(ResponseCode.QUERY_NOT_FOUND);
                 response.setRemark("Not found, do not set to zero, maybe this group boot first");
             } else if (minOffset <= 0
-                && !this.brokerController.getMessageStore().checkInDiskByConsumeOffset(
-                requestHeader.getTopic(), requestHeader.getQueueId(), 0)) {
+                && this.brokerController.getMessageStore().checkInMemByConsumeOffset(
+                requestHeader.getTopic(), requestHeader.getQueueId(), 0, 1)) {
                 responseHeader.setOffset(0L);
                 response.setCode(ResponseCode.SUCCESS);
                 response.setRemark(null);

File: store/src/test/java/org/apache/rocketmq/store/queue/BatchConsumeMessageTest.java
Patch:
@@ -281,7 +281,7 @@ public void testDispatchNormalConsumeQueue() throws Exception {
         Assert.assertTrue(commitLogOffset <= messageStore.getMaxPhyOffset());
         Assert.assertEquals(commitLogMid, commitLogOffset);
 
-        Assert.assertFalse(messageStore.checkInDiskByConsumeOffset(topic, 0, 50));
+        Assert.assertTrue(messageStore.checkInMemByConsumeOffset(topic, 0, 50, 1));
     }
 
     @Test
@@ -331,7 +331,7 @@ public void testDispatchBuildBatchConsumeQueue() throws Exception {
         Assert.assertTrue(commitLogOffset >= messageStore.getMinPhyOffset());
         Assert.assertTrue(commitLogOffset <= messageStore.getMaxPhyOffset());
 
-        Assert.assertFalse(messageStore.checkInDiskByConsumeOffset(topic, 0, 300));
+        Assert.assertTrue(messageStore.checkInMemByConsumeOffset(topic, 0, 300, 1));
 
         //get the message Normally
         GetMessageResult getMessageResult = messageStore.getMessage("group", topic, 0, 0, 10 * batchNum, null);

File: store/src/main/java/org/apache/rocketmq/store/GetMessageResult.java
Patch:
@@ -114,6 +114,7 @@ public void addMessage(final SelectMappedBufferResult mapedBuffer) {
         this.bufferTotalSize += mapedBuffer.getSize();
         this.msgCount4Commercial += (int) Math.ceil(
             mapedBuffer.getSize() /  (double)commercialSizePerMsg);
+        this.messageCount++;
     }
 
     public void addMessage(final SelectMappedBufferResult mapedBuffer, final long queueOffset) {
@@ -122,13 +123,14 @@ public void addMessage(final SelectMappedBufferResult mapedBuffer, final long qu
         this.bufferTotalSize += mapedBuffer.getSize();
         this.msgCount4Commercial += (int) Math.ceil(
             mapedBuffer.getSize() /  (double)commercialSizePerMsg);
+        this.messageCount++;
         this.messageQueueOffset.add(queueOffset);
     }
 
 
     public void addMessage(final SelectMappedBufferResult mapedBuffer, final long queueOffset, final int batchNum) {
         addMessage(mapedBuffer, queueOffset);
-        messageCount += batchNum;
+        messageCount += batchNum - 1;
     }
 
     public void release() {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.JSONObject;
+import com.google.common.collect.Sets;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandlerContext;
 import java.io.UnsupportedEncodingException;
@@ -524,8 +525,7 @@ private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,
         this.brokerController.getTopicQueueMappingManager().delete(requestHeader.getTopic());
         this.brokerController.getConsumerOffsetManager().cleanOffsetByTopic(requestHeader.getTopic());
         this.brokerController.getPopInflightMessageCounter().clearInFlightMessageNumByTopicName(requestHeader.getTopic());
-        this.brokerController.getMessageStore()
-            .cleanUnusedTopic(this.brokerController.getTopicConfigManager().getTopicConfigTable().keySet());
+        this.brokerController.getMessageStore().deleteTopics(Sets.newHashSet(requestHeader.getTopic()));
         if (this.brokerController.getBrokerConfig().isAutoDeleteUnusedStats()) {
             this.brokerController.getBrokerStatsManager().onTopicDeleted(requestHeader.getTopic());
         }

File: broker/src/main/java/org/apache/rocketmq/broker/plugin/PullMessageResultHandler.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
+import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingContext;
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.store.GetMessageResult;
 import org.apache.rocketmq.store.MessageFilter;
@@ -49,5 +50,6 @@ RemotingCommand handle(final GetMessageResult getMessageResult,
                            final SubscriptionGroupConfig subscriptionGroupConfig,
                            final boolean brokerAllowSuspend,
                            final MessageFilter messageFilter,
-                           final RemotingCommand response);
+                           final RemotingCommand response,
+                           final TopicQueueMappingContext mappingContext);
 }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/DefaultPullMessageResultHandler.java
Patch:
@@ -83,7 +83,8 @@ public RemotingCommand handle(final GetMessageResult getMessageResult,
         final SubscriptionGroupConfig subscriptionGroupConfig,
         final boolean brokerAllowSuspend,
         final MessageFilter messageFilter,
-        RemotingCommand response) {
+        RemotingCommand response,
+        TopicQueueMappingContext mappingContext) {
         PullMessageProcessor processor = brokerController.getPullMessageProcessor();
         final String clientAddress = RemotingHelper.parseChannelRemoteAddr(channel);
         TopicConfig topicConfig = this.brokerController.getTopicConfigManager().selectTopicConfig(requestHeader.getTopic());
@@ -98,7 +99,6 @@ public RemotingCommand handle(final GetMessageResult getMessageResult,
         }
 
         //rewrite the response for the static topic
-        TopicQueueMappingContext mappingContext = this.brokerController.getTopicQueueMappingManager().buildTopicQueueMappingContext(requestHeader, false);
         final PullMessageResponseHeader responseHeader = (PullMessageResponseHeader) response.readCustomHeader();
         RemotingCommand rewriteResult = processor.rewriteResponseForStaticTopic(requestHeader, responseHeader, mappingContext, response.getCode());
         if (rewriteResult != null) {

File: tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminUtils.java
Patch:
@@ -148,13 +148,13 @@ public static void remappingStaticTopic(String topic, Set<String> brokersToMapIn
         ClientMetadata clientMetadata = MQAdminUtils.getBrokerMetadata(defaultMQAdminExt);
         MQAdminUtils.checkIfMasterAlive(brokerConfigMap.keySet(), defaultMQAdminExt, clientMetadata);
         // now do the remapping
-        //Step1: let the new leader can be write without the logicOffset
+        //Step1: let the new leader can be written without the logicOffset
         for (String broker: brokersToMapIn) {
             String addr = clientMetadata.findMasterBrokerAddr(broker);
             TopicConfigAndQueueMapping configMapping = brokerConfigMap.get(broker);
             defaultMQAdminExt.createStaticTopic(addr, defaultMQAdminExt.getCreateTopicKey(), configMapping, configMapping.getMappingDetail(), force);
         }
-        //Step2: forbid the write of old leader
+        //Step2: forbid to write of old leader
         for (String broker: brokersToMapOut) {
             String addr = clientMetadata.findMasterBrokerAddr(broker);
             TopicConfigAndQueueMapping configMapping = brokerConfigMap.get(broker);

File: common/src/main/java/org/apache/rocketmq/common/message/MessageDecoder.java
Patch:
@@ -278,7 +278,7 @@ public static byte[] encode(MessageExt messageExt, boolean needCompress) throws
     /**
      * Encode without store timestamp and store host, skip blank msg.
      *
-     * @param messageExt msg
+     * @param messageExt   msg
      * @param needCompress need compress or not
      * @return byte array
      * @throws IOException when compress failed
@@ -608,7 +608,7 @@ public static String messageProperties2String(Map<String, String> properties) {
     }
 
     public static Map<String, String> string2messageProperties(final String properties) {
-        Map<String, String> map = new HashMap<>();
+        Map<String, String> map = new HashMap<>(128);
         if (properties != null) {
             int len = properties.length();
             int index = 0;

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java
Patch:
@@ -490,7 +490,7 @@ public ByteBuffer encodeHeader(final int bodyLength) {
         // header data
         result.put(headerData);
 
-        ((Buffer)result).flip();
+        ((Buffer) result).flip();
 
         return result;
     }
@@ -597,7 +597,7 @@ public void setExtFields(HashMap<String, String> extFields) {
 
     public void addExtField(String key, String value) {
         if (null == extFields) {
-            extFields = new HashMap<>();
+            extFields = new HashMap<>(256);
         }
         extFields.put(key, value);
     }

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RocketMQSerializable.java
Patch:
@@ -94,7 +94,6 @@ public static int rocketMQProtocolEncode(RemotingCommand cmd, ByteBuf out) {
         return out.writerIndex() - beginIndex;
     }
 
-
     public static byte[] rocketMQProtocolEncode(RemotingCommand cmd) {
         // String remark
         byte[] remarkBytes = null;
@@ -203,7 +202,8 @@ private static int calTotalLen(int remark, int ext) {
         return length;
     }
 
-    public static RemotingCommand rocketMQProtocolDecode(final ByteBuf headerBuffer, int headerLen) throws RemotingCommandException {
+    public static RemotingCommand rocketMQProtocolDecode(final ByteBuf headerBuffer,
+        int headerLen) throws RemotingCommandException {
         RemotingCommand cmd = new RemotingCommand();
         // int code(~32767)
         cmd.setCode(headerBuffer.readShort());
@@ -231,7 +231,7 @@ public static RemotingCommand rocketMQProtocolDecode(final ByteBuf headerBuffer,
 
     public static HashMap<String, String> mapDeserialize(ByteBuf byteBuffer, int len) throws RemotingCommandException {
 
-        HashMap<String, String> map = new HashMap<>();
+        HashMap<String, String> map = new HashMap<>(128);
         int endIndex = byteBuffer.readerIndex() + len;
 
         while (byteBuffer.readerIndex() < endIndex) {

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAService.java
Patch:
@@ -351,7 +351,9 @@ public synchronized void setSyncStateSet(final Set<String> syncStateSet) {
     }
 
     public synchronized Set<String> getSyncStateSet() {
-        return new HashSet<>(this.syncStateSet);
+        HashSet<String> set = new HashSet<>(this.syncStateSet.size());
+        set.addAll(this.syncStateSet);
+        return set;
     }
 
     public void truncateEpochFilePrefix(final long offset) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -174,6 +174,7 @@
 import org.apache.rocketmq.remoting.rpc.RpcRequest;
 import org.apache.rocketmq.remoting.rpc.RpcResponse;
 import org.apache.rocketmq.store.ConsumeQueueExt;
+import org.apache.rocketmq.store.DefaultMessageStore;
 import org.apache.rocketmq.store.MessageFilter;
 import org.apache.rocketmq.store.MessageStore;
 import org.apache.rocketmq.store.PutMessageResult;
@@ -2276,7 +2277,7 @@ private HashMap<String, String> prepareRuntimeInfo() {
         }
         MessageStore messageStore = this.brokerController.getMessageStore();
         runtimeInfo.put("remainTransientStoreBufferNumbs", String.valueOf(messageStore.remainTransientStoreBufferNumbs()));
-        if (this.brokerController.getMessageStoreConfig().isTransientStorePoolEnable()) {
+        if (this.brokerController.getMessageStore() instanceof DefaultMessageStore && ((DefaultMessageStore) this.brokerController.getMessageStore()).isTransientStorePoolEnable()) {
             runtimeInfo.put("remainHowManyDataToCommit", MixAll.humanReadableByteCount(messageStore.remainHowManyDataToCommit(), false));
         }
         runtimeInfo.put("remainHowManyDataToFlush", MixAll.humanReadableByteCount(messageStore.remainHowManyDataToFlush(), false));
@@ -2606,7 +2607,6 @@ private RemotingCommand getBrokerEpochCache(ChannelHandlerContext ctx, RemotingC
         return response;
     }
 
-
     private RemotingCommand resetMasterFlushOffset(ChannelHandlerContext ctx,
         RemotingCommand request) throws RemotingCommandException {
         final RemotingCommand response = RemotingCommand.createResponseCommand(null);

File: store/src/main/java/org/apache/rocketmq/store/AllocateMappedFileService.java
Patch:
@@ -52,7 +52,7 @@ public AllocateMappedFileService(DefaultMessageStore messageStore) {
 
     public MappedFile putRequestAndReturnMappedFile(String nextFilePath, String nextNextFilePath, int fileSize) {
         int canSubmitRequests = 2;
-        if (this.messageStore.getMessageStoreConfig().isTransientStorePoolEnable()) {
+        if (this.messageStore.isTransientStorePoolEnable()) {
             if (this.messageStore.getMessageStoreConfig().isFastFailIfNoBufferInStorePool()
                 && BrokerRole.SLAVE != this.messageStore.getMessageStoreConfig().getBrokerRole()) { //if broker is slave, don't fast fail even no buffer in pool
                 canSubmitRequests = this.messageStore.getTransientStorePool().availableBufferNums() - this.requestQueue.size();
@@ -171,7 +171,7 @@ private boolean mmapOperation() {
                 long beginTime = System.currentTimeMillis();
 
                 MappedFile mappedFile;
-                if (messageStore.getMessageStoreConfig().isTransientStorePoolEnable()) {
+                if (messageStore.isTransientStorePoolEnable()) {
                     try {
                         mappedFile = ServiceLoader.load(MappedFile.class).iterator().next();
                         mappedFile.init(req.getFilePath(), req.getFileSize(), messageStore.getTransientStorePool());

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManager.java
Patch:
@@ -143,7 +143,7 @@ protected static Settings mergeSubscriptionData(Settings settings, SubscriptionG
 
         resultSettingsBuilder.getSubscriptionBuilder()
             .setReceiveBatchSize(config.getGrpcClientConsumerLongPollingBatchSize())
-            .setLongPollingTimeout(Durations.fromMillis(config.getGrpcClientConsumerLongPollingTimeoutMillis()))
+            .setLongPollingTimeout(Durations.fromMillis(config.getGrpcClientConsumerMaxLongPollingTimeoutMillis()))
             .setFifo(groupConfig.isConsumeMessageOrderly());
 
         resultSettingsBuilder.getBackoffPolicyBuilder().setMaxAttempts(groupConfig.getRetryMaxTimes() + 1);

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivityTest.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.PermName;
 import org.apache.rocketmq.proxy.common.ProxyContext;
+import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.grpc.v2.BaseActivityTest;
 import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
 import org.apache.rocketmq.proxy.service.route.MessageQueueView;
@@ -71,6 +72,7 @@ public class ReceiveMessageActivityTest extends BaseActivityTest {
     @Before
     public void before() throws Throwable {
         super.before();
+        ConfigurationManager.getProxyConfig().setGrpcClientConsumerMinLongPollingTimeoutMillis(0);
         this.receiveMessageActivity = new ReceiveMessageActivity(messagingProcessor, receiptHandleProcessor,
             grpcClientSettingsManager, grpcChannelManager);
     }

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseIT.java
Patch:
@@ -158,6 +158,7 @@ public void setUp() throws Exception {
         ConfigurationManager.getProxyConfig().setRocketMQClusterName(brokerController1.getBrokerConfig().getBrokerClusterName());
         ConfigurationManager.getProxyConfig().setHeartbeatSyncerTopicClusterName(brokerController1.getBrokerConfig().getBrokerClusterName());
         ConfigurationManager.getProxyConfig().setMinInvisibleTimeMillsForRecv(3);
+        ConfigurationManager.getProxyConfig().setGrpcClientConsumerMinLongPollingTimeoutMillis(0);
     }
 
     protected MessagingServiceGrpc.MessagingServiceStub createStub(Channel channel) {

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -746,7 +746,7 @@ public boolean initialize() throws CloneNotSupportedException {
 
                 if (messageStoreConfig.isEnableDLegerCommitLog()) {
                     DLedgerRoleChangeHandler roleChangeHandler = new DLedgerRoleChangeHandler(this, defaultMessageStore);
-                    ((DLedgerCommitLog) defaultMessageStore.getCommitLog()).getdLedgerServer().getdLedgerLeaderElector().addRoleChangeHandler(roleChangeHandler);
+                    ((DLedgerCommitLog) defaultMessageStore.getCommitLog()).getdLedgerServer().getDLedgerLeaderElector().addRoleChangeHandler(roleChangeHandler);
                 }
                 this.brokerStats = new BrokerStats(defaultMessageStore);
                 //load plugin

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java
Patch:
@@ -345,7 +345,7 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
                 String retryTopic = KeyBuilder.buildPopRetryTopic(requestHeader.getTopic(), requestHeader.getConsumerGroup());
                 SubscriptionData retrySubscriptionData = FilterAPI.build(retryTopic, SubscriptionData.SUB_ALL, requestHeader.getExpType());
                 brokerController.getConsumerManager().compensateSubscribeData(requestHeader.getConsumerGroup(),
-                    requestHeader.getTopic(), retrySubscriptionData);
+                    retryTopic, retrySubscriptionData);
 
                 ConsumerFilterData consumerFilterData = null;
                 if (!ExpressionType.isTagType(subscriptionData.getExpressionType())) {

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -1747,7 +1747,9 @@ protected void sendHeartbeat() {
                         this.brokerConfig.getSendHeartbeatTimeoutMillis(),
                         this.brokerConfig.isInBrokerContainer(), this.replicasManager.getLastEpoch(),
                         this.messageStore.getMaxPhyOffset(),
-                        this.replicasManager.getConfirmOffset()
+                        this.replicasManager.getConfirmOffset(),
+                        this.brokerConfig.getControllerHeartBeatTimeoutMills(),
+                        this.brokerConfig.getBrokerElectionPriority()
                     );
                 }
             }

File: broker/src/main/java/org/apache/rocketmq/broker/controller/ReplicasManager.java
Patch:
@@ -291,7 +291,7 @@ private boolean registerBrokerToController() {
         // Register this broker to controller, get brokerId and masterAddress.
         try {
             final RegisterBrokerToControllerResponseHeader registerResponse = this.brokerOuterAPI.registerBrokerToController(this.controllerLeaderAddress,
-                this.brokerConfig.getBrokerClusterName(), this.brokerConfig.getBrokerName(), this.localAddress,
+                this.brokerConfig.getBrokerClusterName(), this.brokerConfig.getBrokerName(), this.localAddress, this.brokerConfig.getControllerHeartBeatTimeoutMills(),
                 this.haService.getLastEpoch(), this.brokerController.getMessageStore().getMaxPhyOffset(), this.brokerConfig.getBrokerElectionPriority());
             final String newMasterAddress = registerResponse.getMasterAddress();
             if (StringUtils.isNoneEmpty(newMasterAddress)) {

File: broker/src/test/java/org/apache/rocketmq/broker/controller/ReplicasManagerTest.java
Patch:
@@ -123,7 +123,7 @@ public void before() throws Exception {
         when(brokerController.getBrokerOuterAPI()).thenReturn(brokerOuterAPI);
         when(brokerController.getBrokerAddr()).thenReturn(OLD_MASTER_ADDRESS);
         when(brokerOuterAPI.getControllerMetaData(any())).thenReturn(getMetaDataResponseHeader);
-        when(brokerOuterAPI.registerBrokerToController(any(), any(), any(), any(), anyInt(), anyLong(), anyInt())).thenReturn(registerBrokerToControllerResponseHeader);
+        when(brokerOuterAPI.registerBrokerToController(any(), any(), any(), any(), anyLong(), anyInt(), anyLong(), anyInt())).thenReturn(registerBrokerToControllerResponseHeader);
         when(brokerOuterAPI.getReplicaInfo(any(), any(), any())).thenReturn(result);
         replicasManager = new ReplicasManager(brokerController);
         autoSwitchHAService.init(defaultMessageStore);
@@ -145,7 +145,7 @@ public void changeBrokerRoleTest() {
             .doesNotThrowAnyException();
 
         // equal to localAddress
-        Assertions.assertThatCode(() -> replicasManager.changeBrokerRole(OLD_MASTER_ADDRESS, NEW_MASTER_EPOCH, OLD_MASTER_EPOCH , SLAVE_BROKER_ID))
+        Assertions.assertThatCode(() -> replicasManager.changeBrokerRole(OLD_MASTER_ADDRESS, NEW_MASTER_EPOCH, OLD_MASTER_EPOCH, SLAVE_BROKER_ID))
             .doesNotThrowAnyException();
     }
 

File: controller/src/test/java/org/apache/rocketmq/controller/impl/controller/impl/DefaultBrokerHeartbeatManagerTest.java
Patch:
@@ -43,7 +43,8 @@ public void testDetectBrokerAlive() throws InterruptedException {
         this.heartbeatManager.addBrokerLifecycleListener((clusterName, brokerName, brokerAddress, brokerId) -> {
             latch.countDown();
         });
-        this.heartbeatManager.registerBroker("cluster1", "broker1", "127.0.0.1:7000", 1L, 3000L, null, 1, 1L, 0);
+        this.heartbeatManager.onBrokerHeartbeat("cluster1", "broker1", "127.0.0.1:7000", 1L,3000L, null,
+            1, 1L,-1L, 0);
         assertTrue(latch.await(5000, TimeUnit.MILLISECONDS));
         this.heartbeatManager.shutdown();
     }

File: test/src/main/java/org/apache/rocketmq/test/util/VerifyUtils.java
Patch:
@@ -90,6 +90,7 @@ public static boolean verifyDelay(long delayTimeMills, long nextLevelDelayTimeMi
             if (time < delayTimeMills || time > nextLevelDelayTimeMills) {
                 delay = false;
                 logger.info(String.format("delay error:%s", Math.abs(time - delayTimeMills)));
+                break;
             }
         }
         return delay;

File: broker/src/main/java/org/apache/rocketmq/broker/filtersrv/FilterServerManager.java
Patch:
@@ -77,8 +77,8 @@ public void createFilterServer() {
 
     private String buildStartCommand() {
         String config = "";
-        if (BrokerStartup.configFile != null) {
-            config = String.format("-c %s", BrokerStartup.configFile);
+        if (BrokerStartup.CONFIG_FILE_HELPER.getFile() != null) {
+            config = String.format("-c %s", BrokerStartup.CONFIG_FILE_HELPER.getFile());
         }
 
         if (this.brokerController.getBrokerConfig().getNamesrvAddr() != null) {

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/controller/CleanControllerBrokerDataRequestHeader.java
Patch:
@@ -91,9 +91,9 @@ public void setCleanLivingBroker(boolean cleanLivingBroker) {
     public String toString() {
         return "CleanControllerBrokerDataRequestHeader{" +
             "clusterName='" + clusterName + '\'' +
-            "brokerName='" + brokerName + '\'' +
-            "brokerAddress='" + brokerAddress + '\'' +
-            "isCleanLivingBroker='" + isCleanLivingBroker + '\'' +
+            ", brokerName='" + brokerName + '\'' +
+            ", brokerAddress='" + brokerAddress + '\'' +
+            ", isCleanLivingBroker=" + isCleanLivingBroker +
             '}';
     }
 }

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/controller/ElectMasterRequestHeader.java
Patch:
@@ -72,8 +72,8 @@ public void setClusterName(String clusterName) {
     public String toString() {
         return "ElectMasterRequestHeader{" +
             "clusterName='" + clusterName + '\'' +
-            "brokerName='" + brokerName + '\'' +
-            "brokerAddress='" + brokerAddress + '\'' +
+            ", brokerName='" + brokerName + '\'' +
+            ", brokerAddress='" + brokerAddress + '\'' +
             '}';
     }
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/controller/ElectMasterResponseHeader.java
Patch:
@@ -67,7 +67,7 @@ public String toString() {
             "newMasterAddress='" + newMasterAddress + '\'' +
             ", masterEpoch=" + masterEpoch +
             ", syncStateSetEpoch=" + syncStateSetEpoch +
-            ", brokerMember=" + brokerMemberGroup +
+            ", brokerMemberGroup=" + brokerMemberGroup +
             '}';
     }
 

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DLedgerController.java
Patch:
@@ -166,7 +166,7 @@ public CompletableFuture<RemotingCommand> electMaster(final ElectMasterRequestHe
     @Override
     public CompletableFuture<RemotingCommand> registerBroker(RegisterBrokerToControllerRequestHeader request) {
         return this.scheduler.appendEvent("registerBroker",
-            () -> this.replicasInfoManager.registerBroker(request), true);
+            () -> this.replicasInfoManager.registerBroker(request, brokerAlivePredicate), true);
     }
 
     @Override

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java
Patch:
@@ -1173,7 +1173,6 @@ public boolean isEnableRemotingLocalProxyGrpc() {
     public void setChannelExpiredTimeout(long channelExpiredTimeout) {
         this.channelExpiredTimeout = channelExpiredTimeout;
     }
-}
 
     public void setEnableRemotingLocalProxyGrpc(boolean enableRemotingLocalProxyGrpc) {
         this.enableRemotingLocalProxyGrpc = enableRemotingLocalProxyGrpc;

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/sysmessage/HeartbeatSyncerTest.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.concurrent.CompletableFuture;
 import org.apache.commons.lang3.RandomStringUtils;
 import org.apache.rocketmq.broker.client.ClientChannelInfo;
-import org.apache.rocketmq.broker.client.ConsumerManagerInterface;
+import org.apache.rocketmq.broker.client.ConsumerManager;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.client.producer.SendStatus;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
@@ -94,7 +94,7 @@ public class HeartbeatSyncerTest extends InitConfigTest {
     @Mock
     private AdminService adminService;
     @Mock
-    private ConsumerManagerInterface consumerManager;
+    private ConsumerManager consumerManager;
     @Mock
     private MQClientAPIFactory mqClientAPIFactory;
     @Mock

File: common/src/main/java/org/apache/rocketmq/common/attribute/TopicMessageType.java
Patch:
@@ -53,9 +53,8 @@ public static TopicMessageType parseFromMessageProperty(Map<String, String> mess
             return TopicMessageType.DELAY;
         } else if (messageProperty.get(MessageConst.PROPERTY_SHARDING_KEY) != null) {
             return TopicMessageType.FIFO;
-        } else {
-            return TopicMessageType.NORMAL;
         }
+        return TopicMessageType.NORMAL;
     }
 
     public String getMetricsValue() {

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseIT.java
Patch:
@@ -156,6 +156,7 @@ public void setUp() throws Exception {
         // Set LongPollingReserveTimeInMillis to 500ms to reserve more time for IT
         ConfigurationManager.getProxyConfig().setLongPollingReserveTimeInMillis(500);
         ConfigurationManager.getProxyConfig().setRocketMQClusterName(brokerController1.getBrokerConfig().getBrokerClusterName());
+        ConfigurationManager.getProxyConfig().setHeartbeatSyncerTopicClusterName(brokerController1.getBrokerConfig().getBrokerClusterName());
         ConfigurationManager.getProxyConfig().setMinInvisibleTimeMillsForRecv(3);
     }
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/remoting/activity/PullMessageActivityTest.java
Patch:
@@ -106,7 +106,7 @@ public void testPullMessageWithoutSub() throws Exception {
         newHeader.setQueueId(0);
         newHeader.setQueueOffset(0L);
         newHeader.setMaxMsgNums(16);
-        newHeader.setSysFlag(PullSysFlag.buildSysFlag(true, false, false, false));
+        newHeader.setSysFlag(PullSysFlag.buildSysFlag(true, false, true, false));
         newHeader.setCommitOffset(0L);
         newHeader.setSuspendTimeoutMillis(1000L);
         newHeader.setSubVersion(0L);

File: broker/src/main/java/org/apache/rocketmq/broker/client/ConsumerManager.java
Patch:
@@ -38,7 +38,7 @@
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.store.stats.BrokerStatsManager;
 
-public class ConsumerManager {
+public class ConsumerManager implements ConsumerManagerInterface {
     private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final ConcurrentMap<String, ConsumerGroupInfo> consumerTable =
         new ConcurrentHashMap<>(1024);

File: broker/src/main/java/org/apache/rocketmq/broker/client/ConsumerManagerInterface.java
Patch:
@@ -20,9 +20,9 @@
 import io.netty.channel.Channel;
 import java.util.Set;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
-import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;
-import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
-import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
+import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
+import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
 public interface ConsumerManagerInterface {
 

File: broker/src/main/java/org/apache/rocketmq/broker/client/ProducerManager.java
Patch:
@@ -35,7 +35,7 @@
 import org.apache.rocketmq.remoting.protocol.body.ProducerTableInfo;
 import org.apache.rocketmq.store.stats.BrokerStatsManager;
 
-public class ProducerManager {
+public class ProducerManager implements ProducerManagerInterface {
     private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private static final long CHANNEL_EXPIRED_TIMEOUT = 1000 * 120;
     private static final int GET_AVAILABLE_CHANNEL_RETRY_COUNT = 3;

File: broker/src/main/java/org/apache/rocketmq/broker/client/ProducerManagerInterface.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.rocketmq.broker.client;
 
 import io.netty.channel.Channel;
-import org.apache.rocketmq.common.protocol.body.ProducerTableInfo;
+import org.apache.rocketmq.remoting.protocol.body.ProducerTableInfo;
 
 public interface ProducerManagerInterface {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
+import org.apache.rocketmq.common.utils.NetworkUtil;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.ProxyMode;
@@ -241,7 +242,7 @@ public class ProxyConfig implements ConfigFile {
     public void initData() {
         parseDelayLevel();
         if (StringUtils.isEmpty(localServeAddr)) {
-            this.localServeAddr = RemotingUtil.getLocalAddress();
+            this.localServeAddr = NetworkUtil.getLocalAddress();
         }
         if (StringUtils.isBlank(localServeAddr)) {
             throw new ProxyException(ProxyExceptionCode.INTERNAL_SERVER_ERROR, "get local serve ip failed");

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/channel/RemoteChannelSerializer.java
Patch:
@@ -23,11 +23,11 @@
 import java.util.Map;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class RemoteChannelSerializer {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     private static final String REMOTE_PROXY_IP_KEY = "remoteProxyIp";
     private static final String REMOTE_ADDRESS_KEY = "remoteAddress";
     private static final String LOCAL_ADDRESS_KEY = "localAddress";

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/MultiProtocolRemotingServer.java
Patch:
@@ -23,6 +23,8 @@
 import java.io.IOException;
 import java.security.cert.CertificateException;
 import org.apache.rocketmq.common.constant.LoggerName;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
 import org.apache.rocketmq.proxy.remoting.protocol.ProtocolNegotiationHandler;
@@ -33,8 +35,6 @@
 import org.apache.rocketmq.remoting.netty.NettyRemotingServer;
 import org.apache.rocketmq.remoting.netty.NettyServerConfig;
 import org.apache.rocketmq.remoting.netty.TlsSystemConfig;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 /**
  * support remoting and http2 protocol at one port

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/MultiProtocolTlsHelper.java
Patch:
@@ -34,9 +34,9 @@
 import java.security.cert.CertificateException;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.constant.LoggerName;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.netty.TlsHelper;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.tlsServerAuthClient;
 import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.tlsServerCertPath;

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/GetTopicRouteActivity.java
Patch:
@@ -23,9 +23,9 @@
 import java.util.ArrayList;
 import java.util.List;
 import org.apache.rocketmq.common.MQVersion;
-import org.apache.rocketmq.common.protocol.ResponseCode;
-import org.apache.rocketmq.common.protocol.header.namesrv.GetRouteInfoRequestHeader;
-import org.apache.rocketmq.common.protocol.route.TopicRouteData;
+import org.apache.rocketmq.remoting.protocol.ResponseCode;
+import org.apache.rocketmq.remoting.protocol.header.namesrv.GetRouteInfoRequestHeader;
+import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
 import org.apache.rocketmq.proxy.common.Address;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/PopMessageActivity.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.netty.channel.ChannelHandlerContext;
 import java.time.Duration;
-import org.apache.rocketmq.common.protocol.header.PopMessageRequestHeader;
+import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
 import org.apache.rocketmq.proxy.remoting.pipeline.RequestPipeline;

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/PullMessageActivity.java
Patch:
@@ -20,14 +20,14 @@
 import io.netty.channel.ChannelHandlerContext;
 import java.time.Duration;
 import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
-import org.apache.rocketmq.common.protocol.ResponseCode;
-import org.apache.rocketmq.common.protocol.header.PullMessageRequestHeader;
-import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
 import org.apache.rocketmq.proxy.remoting.pipeline.RequestPipeline;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
+import org.apache.rocketmq.remoting.protocol.ResponseCode;
+import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
+import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
 public class PullMessageActivity extends AbstractRemotingActivity {
     public PullMessageActivity(RequestPipeline requestPipeline,

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/SendMessageActivity.java
Patch:
@@ -22,9 +22,9 @@
 import java.util.Map;
 import org.apache.rocketmq.common.attribute.TopicMessageType;
 import org.apache.rocketmq.common.message.MessageDecoder;
-import org.apache.rocketmq.common.protocol.NamespaceUtil;
-import org.apache.rocketmq.common.protocol.RequestCode;
-import org.apache.rocketmq.common.protocol.header.SendMessageRequestHeader;
+import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
+import org.apache.rocketmq.remoting.protocol.RequestCode;
+import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/TransactionActivity.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.rocketmq.proxy.remoting.activity;
 
 import io.netty.channel.ChannelHandlerContext;
-import org.apache.rocketmq.common.protocol.ResponseCode;
-import org.apache.rocketmq.common.protocol.header.EndTransactionRequestHeader;
+import org.apache.rocketmq.remoting.protocol.ResponseCode;
+import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/channel/RemotingChannelManager.java
Patch:
@@ -26,12 +26,12 @@
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.atomic.AtomicReference;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 import org.apache.rocketmq.proxy.remoting.RemotingProxyOutClient;
 import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
 public class RemotingChannelManager implements StartAndShutdown {
     protected final static Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/common/RemotingConverter.java
Patch:
@@ -20,11 +20,11 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class RemotingConverter {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected static final Object INSTANCE_CREATE_LOCK = new Object();
     protected static volatile RemotingConverter instance;

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/protocol/http2proxy/Http2ProtocolProxyHandler.java
Patch:
@@ -31,15 +31,15 @@
 import io.netty.handler.ssl.SslProvider;
 import io.netty.handler.ssl.util.InsecureTrustManagerFactory;
 import javax.net.ssl.SSLException;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.remoting.protocol.ProtocolHandler;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 
 public class Http2ProtocolProxyHandler implements ProtocolHandler {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    private static final Logger log = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
     private static final String LOCAL_HOST = "127.0.0.1";
     /**
      * The int value of "PRI ". Now use 4 bytes to judge protocol, may be has potential risks if there is a new protocol

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/protocol/http2proxy/Http2ProxyBackendHandler.java
Patch:
@@ -22,12 +22,12 @@
 import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelInboundHandlerAdapter;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 
 public class Http2ProxyBackendHandler extends ChannelInboundHandlerAdapter {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    private static final Logger log = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
 
     private final Channel inboundChannel;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/protocol/http2proxy/Http2ProxyFrontendHandler.java
Patch:
@@ -23,12 +23,12 @@
 import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelInboundHandlerAdapter;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 
 public class Http2ProxyFrontendHandler extends ChannelInboundHandlerAdapter {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    private static final Logger log = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
     // As we use inboundChannel.eventLoop() when building the Bootstrap this does not need to be volatile as
     // the outboundChannel will use the same EventLoop (and therefore Thread) as the inboundChannel.
     private final Channel outboundChannel;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/admin/AdminService.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.rocketmq.proxy.service.admin;
 
 import java.util.List;
-import org.apache.rocketmq.common.protocol.route.BrokerData;
+import org.apache.rocketmq.remoting.protocol.route.BrokerData;
 
 public interface AdminService {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/client/ClusterConsumerManager.java
Patch:
@@ -23,9 +23,9 @@
 import org.apache.rocketmq.broker.client.ConsumerManager;
 import org.apache.rocketmq.broker.client.ConsumerManagerInterface;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
-import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;
-import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
-import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
+import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
+import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 import org.apache.rocketmq.proxy.service.admin.AdminService;
 import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/sysmessage/HeartbeatSyncer.java
Patch:
@@ -33,9 +33,9 @@
 import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;
-import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
-import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
+import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
+import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
 import org.apache.rocketmq.proxy.common.channel.ChannelHelper;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/sysmessage/HeartbeatSyncerData.java
Patch:
@@ -20,9 +20,9 @@
 import com.google.common.base.MoreObjects;
 import java.util.Set;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
-import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;
-import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
-import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
+import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
+import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.remoting.protocol.LanguageCode;
 
 public class HeartbeatSyncerData {

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/channel/GrpcClientChannelTest.java
Patch:
@@ -22,7 +22,7 @@
 import apache.rocketmq.v2.Settings;
 import org.apache.commons.lang3.RandomStringUtils;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
+import org.apache.rocketmq.proxy.config.InitConfigTest;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
 import org.apache.rocketmq.proxy.processor.channel.ChannelProtocolType;
 import org.apache.rocketmq.proxy.processor.channel.RemoteChannel;
@@ -41,7 +41,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(MockitoJUnitRunner.class)
-public class GrpcClientChannelTest extends InitConfigAndLoggerTest {
+public class GrpcClientChannelTest extends InitConfigTest {
 
     @Mock
     private ProxyRelayService proxyRelayService;

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/admin/DefaultAdminServiceTest.java
Patch:
@@ -22,9 +22,9 @@
 import java.util.Set;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.TopicConfig;
-import org.apache.rocketmq.common.protocol.ResponseCode;
-import org.apache.rocketmq.common.protocol.route.BrokerData;
-import org.apache.rocketmq.common.protocol.route.TopicRouteData;
+import org.apache.rocketmq.remoting.protocol.ResponseCode;
+import org.apache.rocketmq.remoting.protocol.route.BrokerData;
+import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
 import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIExt;
 import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
 import org.junit.Before;

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/PullMessageActivity.java
Patch:
@@ -39,7 +39,8 @@ public PullMessageActivity(RequestPipeline requestPipeline,
     protected RemotingCommand processRequest0(ChannelHandlerContext ctx, RemotingCommand request,
         ProxyContext context) throws Exception {
         PullMessageRequestHeader requestHeader = (PullMessageRequestHeader) request.decodeCommandCustomHeader(PullMessageRequestHeader.class);
-        if (!PullSysFlag.hasSubscriptionFlag(requestHeader.getSysFlag())) {
+        int sysFlag = requestHeader.getSysFlag();
+        if (!PullSysFlag.hasSubscriptionFlag(sysFlag)) {
             ConsumerGroupInfo consumerInfo = messagingProcessor.getConsumerGroupInfo(requestHeader.getConsumerGroup());
             if (consumerInfo == null) {
                 return RemotingCommand.buildErrorResponse(ResponseCode.SUBSCRIPTION_NOT_LATEST,
@@ -50,6 +51,7 @@ protected RemotingCommand processRequest0(ChannelHandlerContext ctx, RemotingCom
                 return RemotingCommand.buildErrorResponse(ResponseCode.SUBSCRIPTION_NOT_EXIST,
                     "the consumer's subscription not exist");
             }
+            requestHeader.setSysFlag(PullSysFlag.buildSysFlagWithSubscription(sysFlag));
             requestHeader.setSubscription(subscriptionData.getSubString());
             requestHeader.setExpressionType(subscriptionData.getExpressionType());
             request.writeCustomHeader(requestHeader);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/DefaultGrpcMessingActivity.java
Patch:
@@ -91,6 +91,7 @@ protected void init(MessagingProcessor messagingProcessor) {
         this.clientActivity = new ClientActivity(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);
 
         this.appendStartAndShutdown(this.receiptHandleProcessor);
+        this.appendStartAndShutdown(this.grpcClientSettingsManager);
     }
 
     @Override

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessor.java
Patch:
@@ -111,6 +111,7 @@ public void handle(ConsumerGroupEvent event, String group, Object... args) {
                             return;
                         }
                         clearGroup(new ReceiptHandleGroupKey(clientChannelInfo.getChannel(), group));
+                        log.info("clear handle of this client when client unregister. group:{}, clientChannelInfo:{}", group, clientChannelInfo);
                     }
                 }
             }

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/ClientManagerActivity.java
Patch:
@@ -156,6 +156,7 @@ public void handle(ConsumerGroupEvent event, String group, Object... args) {
                 if (args[0] instanceof ClientChannelInfo) {
                     ClientChannelInfo clientChannelInfo = (ClientChannelInfo) args[0];
                     remotingChannelManager.removeConsumerChannel(group, clientChannelInfo.getChannel());
+                    log.info("remove remoting channel when client unregister. clientChannelInfo:{}", clientChannelInfo);
                 }
             }
         }

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/GetTopicRouteActivity.java
Patch:
@@ -50,7 +50,7 @@ protected RemotingCommand processRequest0(ChannelHandlerContext ctx, RemotingCom
             (GetRouteInfoRequestHeader) request.decodeCommandCustomHeader(GetRouteInfoRequestHeader.class);
         List<Address> addressList = new ArrayList<>();
         // AddressScheme is just a placeholder and will not affect topic route result in this case.
-        addressList.add(new Address(Address.AddressScheme.IPv4, HostAndPort.fromString(proxyConfig.getRemotingAccessPoint())));
+        addressList.add(new Address(Address.AddressScheme.IPv4, HostAndPort.fromParts(proxyConfig.getRemotingAccessAddr(), proxyConfig.getRemotingListenPort())));
         ProxyTopicRouteData proxyTopicRouteData = messagingProcessor.getTopicRouteDataForProxy(context, addressList, requestHeader.getTopic());
         TopicRouteData topicRouteData = proxyTopicRouteData.buildTopicRouteData();
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServerBuilder.java
Patch:
@@ -118,7 +118,7 @@ protected void configSslContext(NettyServerBuilder serverBuilder) throws SSLExce
             return;
         }
         ProxyConfig proxyConfig = ConfigurationManager.getProxyConfig();
-        boolean tlsTestModeEnable = proxyConfig.isGrpcTlsTestModeEnable();
+        boolean tlsTestModeEnable = proxyConfig.isTlsTestModeEnable();
         if (tlsTestModeEnable) {
             SelfSignedCertificate selfSignedCertificate = new SelfSignedCertificate();
             serverBuilder.sslContext(GrpcSslContexts.forServer(selfSignedCertificate.certificate(), selfSignedCertificate.privateKey())
@@ -128,8 +128,8 @@ protected void configSslContext(NettyServerBuilder serverBuilder) throws SSLExce
             return;
         }
 
-        String tlsKeyPath = ConfigurationManager.getProxyConfig().getGrpcTlsKeyPath();
-        String tlsCertPath = ConfigurationManager.getProxyConfig().getGrpcTlsCertPath();
+        String tlsKeyPath = ConfigurationManager.getProxyConfig().getTlsKeyPath();
+        String tlsCertPath = ConfigurationManager.getProxyConfig().getTlsCertPath();
         try (InputStream serverKeyInputStream = Files.newInputStream(Paths.get(tlsKeyPath));
              InputStream serverCertificateStream = Files.newInputStream(Paths.get(tlsCertPath))) {
             serverBuilder.sslContext(GrpcSslContexts.forServer(serverCertificateStream, serverKeyInputStream)

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/protocol/http2proxy/Http2ProtocolProxyHandler.java
Patch:
@@ -43,7 +43,7 @@ public class Http2ProtocolProxyHandler implements ProtocolHandler {
     private static final String LOCAL_HOST = "127.0.0.1";
     /**
      * The int value of "PRI ". Now use 4 bytes to judge protocol, may be has potential risks if there is a new protocol
-     * which start with "PRI " too in the future
+     * which start with "PRI " in the future
      * <p>
      * The full HTTP/2 connection preface is "PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n"
      * <p>

File: common/src/main/java/org/apache/rocketmq/common/thread/ThreadPoolMonitor.java
Patch:
@@ -81,7 +81,7 @@ public static ThreadPoolExecutor createAndMonitor(int corePoolSize,
         String name,
         int queueCapacity,
         List<ThreadPoolStatusMonitor> threadPoolStatusMonitors) {
-        ThreadPoolExecutor executor = new ThreadPoolExecutor(
+        ThreadPoolExecutor executor = new FutureTaskExtThreadPoolExecutor(
             corePoolSize,
             maximumPoolSize,
             keepAliveTime,

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/BaseActivityTest.java
Patch:
@@ -71,7 +71,7 @@ public void before() throws Throwable {
         metadata.put(InterceptorConstants.LOCAL_ADDRESS, LOCAL_ADDR);
         when(messagingProcessor.getProxyRelayService()).thenReturn(proxyRelayService);
         when(messagingProcessor.getMetadataService()).thenReturn(metadataService);
-        grpcChannelManager = new GrpcChannelManager(messagingProcessor.getProxyRelayService());
+        grpcChannelManager = new GrpcChannelManager(messagingProcessor.getProxyRelayService(), grpcClientSettingsManager);
     }
 
     protected ProxyContext createContext() {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/DefaultGrpcMessingActivity.java
Patch:
@@ -78,7 +78,7 @@ protected DefaultGrpcMessingActivity(MessagingProcessor messagingProcessor) {
 
     protected void init(MessagingProcessor messagingProcessor) {
         this.grpcClientSettingsManager = new GrpcClientSettingsManager(messagingProcessor);
-        this.grpcChannelManager = new GrpcChannelManager(messagingProcessor.getProxyRelayService());
+        this.grpcChannelManager = new GrpcChannelManager(messagingProcessor.getProxyRelayService(), this.grpcClientSettingsManager);
         this.receiptHandleProcessor = new ReceiptHandleProcessor(messagingProcessor);
 
         this.receiveMessageActivity = new ReceiveMessageActivity(messagingProcessor, receiptHandleProcessor, grpcClientSettingsManager, grpcChannelManager);

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/MessagingProcessor.java
Patch:
@@ -285,6 +285,8 @@ void registerConsumerListener(
         ConsumerIdsChangeListener consumerIdsChangeListener
     );
 
+    void doChannelCloseEvent(String remoteAddr, Channel channel);
+
     ConsumerGroupInfo getConsumerGroupInfo(String consumerGroup);
 
     void addTransactionSubscription(

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/AbstractRemotingActivity.java
Patch:
@@ -67,6 +67,7 @@ protected RemotingCommand request(ChannelHandlerContext ctx, RemotingCommand req
         }
         String brokerName = request.getExtFields().get(BROKER_NAME_FIELD);
         if (request.isOnewayRPC()) {
+            messagingProcessor.requestOneway(context, brokerName, request, timeoutMillis);
             return null;
         }
         messagingProcessor.request(context, brokerName, request, timeoutMillis)

File: proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/GetTopicRouteActivity.java
Patch:
@@ -49,6 +49,7 @@ protected RemotingCommand processRequest0(ChannelHandlerContext ctx, RemotingCom
         final GetRouteInfoRequestHeader requestHeader =
             (GetRouteInfoRequestHeader) request.decodeCommandCustomHeader(GetRouteInfoRequestHeader.class);
         List<Address> addressList = new ArrayList<>();
+        // AddressScheme is just a placeholder and will not affect topic route result in this case.
         addressList.add(new Address(Address.AddressScheme.IPv4, HostAndPort.fromString(proxyConfig.getRemotingAccessPoint())));
         ProxyTopicRouteData proxyTopicRouteData = messagingProcessor.getTopicRouteDataForProxy(context, addressList, requestHeader.getTopic());
         TopicRouteData topicRouteData = proxyTopicRouteData.buildTopicRouteData();

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ProducerProcessor.java
Patch:
@@ -73,7 +73,7 @@ public CompletableFuture<List<SendResult>> sendMessage(ProxyContext ctx, QueueSe
                     // Do not check retry or dlq topic
                     if (!NamespaceUtil.isRetryTopic(topic) && !NamespaceUtil.isDLQTopic(topic)) {
                         TopicMessageType topicMessageType = serviceManager.getMetadataService().getTopicMessageType(topic);
-                        TopicMessageType messageType = parseFromMessageExt(message);
+                        TopicMessageType messageType = TopicMessageType.parseFromMessageProperty(message.getProperties());
                         topicMessageTypeValidator.validate(topicMessageType, messageType);
                     }
                 }

File: example/src/main/java/org/apache/rocketmq/example/schedule/TimerMessageConsumer.java
Patch:
@@ -22,6 +22,9 @@
 import org.apache.rocketmq.common.message.MessageExt;
 
 public class TimerMessageConsumer {
+
+    //Note: TimerMessage is a new feature in version 5.0, so be sure to upgrade RocketMQ to version 5.0+ before using it.
+
     public static final String CONSUMER_GROUP = "TimerMessageConsumerGroup";
     public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";
     public static final String TOPIC = "TimerTopic";

File: example/src/main/java/org/apache/rocketmq/example/schedule/TimerMessageProducer.java
Patch:
@@ -23,6 +23,8 @@
 
 public class TimerMessageProducer {
 
+    //Note: TimerMessage is a new feature in version 5.0, so be sure to upgrade RocketMQ to version 5.0+ before using it.
+
     public static final String PRODUCER_GROUP = "TimerMessageProducerGroup";
     public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";
     public static final String TOPIC = "TimerTopic";

File: test/src/test/java/org/apache/rocketmq/test/statictopic/StaticTopicIT.java
Patch:
@@ -345,7 +345,7 @@ public void testDoubleReadCheckConsumerOffset() throws Exception {
         int msgEachQueue = 10;
         //create static topic
         {
-            Set<String> targetBrokers = ImmutableSet.of(BROKER2_NAME);
+            Set<String> targetBrokers = ImmutableSet.of(BROKER1_NAME);
             MQAdminTestUtils.createStaticTopic(topic, queueNum, targetBrokers, defaultMQAdminExt);
             sendMessagesAndCheck(producer, targetBrokers, topic, queueNum, msgEachQueue, 0);
             consumeMessagesAndCheck(producer, consumer, topic, queueNum, msgEachQueue, 0, 1);
@@ -409,7 +409,7 @@ public void testRemappingAndClear() throws Exception {
 
         //remapping to broker2Name
         {
-            Set<String> targetBrokers = ImmutableSet.of(BROKER3_NAME);
+            Set<String> targetBrokers = ImmutableSet.of(BROKER2_NAME);
             MQAdminTestUtils.remappingStaticTopic(topic, targetBrokers, defaultMQAdminExt);
             //leave the time to refresh the metadata
             awaitRefreshStaticTopicMetadata(3000, topic, producer.getProducer(), null, defaultMQAdminExt);
@@ -425,7 +425,7 @@ public void testRemappingAndClear() throws Exception {
             sendMessagesAndCheck(producer, targetBrokers, topic, queueNum, msgEachQueue, 2 * TopicQueueMappingUtils.DEFAULT_BLOCK_SEQ_SIZE);
         }
 
-        // 1 -> 2 -> 3, currently 1 should not has any mappings
+        // 1 -> 2 -> 3, currently 1 should not have any mappings
 
         {
             for (int i = 0; i < 10; i++) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/ProxyStartup.java
Patch:
@@ -97,7 +97,6 @@ public static void main(String[] args) {
             }));
         } catch (Exception e) {
             System.err.println("find an unexpect err." + e);
-            e.printStackTrace();
             log.error("find an unexpect err.", e);
             System.exit(1);
         }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -522,6 +522,7 @@ private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,
         this.brokerController.getTopicConfigManager().deleteTopicConfig(requestHeader.getTopic());
         this.brokerController.getTopicQueueMappingManager().delete(requestHeader.getTopic());
         this.brokerController.getConsumerOffsetManager().cleanOffsetByTopic(requestHeader.getTopic());
+        this.brokerController.getPopInflightMessageCounter().clearInFlightMessageNumByTopicName(requestHeader.getTopic());
         this.brokerController.getMessageStore()
             .cleanUnusedTopic(this.brokerController.getTopicConfigManager().getTopicConfigTable().keySet());
         if (this.brokerController.getBrokerConfig().isAutoDeleteUnusedStats()) {
@@ -1325,6 +1326,7 @@ private RemotingCommand deleteSubscriptionGroup(ChannelHandlerContext ctx,
 
         if (requestHeader.isCleanOffset()) {
             this.brokerController.getConsumerOffsetManager().removeOffset(requestHeader.getGroupName());
+            this.brokerController.getPopInflightMessageCounter().clearInFlightMessageNumByGroupName(requestHeader.getGroupName());
         }
 
         if (this.brokerController.getBrokerConfig().isAutoDeleteUnusedStats()) {
@@ -1765,6 +1767,7 @@ private RemotingCommand resetOffsetInner(String topic, String group, int queueId
         ResetOffsetBody body = new ResetOffsetBody();
         String brokerName = brokerController.getBrokerConfig().getBrokerName();
         for (Map.Entry<Integer, Long> entry : queueOffsetMap.entrySet()) {
+            brokerController.getPopInflightMessageCounter().clearInFlightMessageNum(topic, group, entry.getKey());
             body.getOffsetTable().put(new MessageQueue(topic, brokerName, entry.getKey()), entry.getValue());
         }
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
Patch:
@@ -124,6 +124,7 @@ private void reviveRetry(PopCheckPoint popCheckPoint, MessageExt messageExt) thr
             putMessageResult.getAppendMessageResult().getStatus() != AppendMessageStatus.PUT_OK) {
             throw new Exception("reviveQueueId=" + queueId + ", revive error, msg is: " + msgInner);
         }
+        this.brokerController.getPopInflightMessageCounter().decrementInFlightMessageNum(popCheckPoint);
         this.brokerController.getBrokerStatsManager().incBrokerPutNums(1);
         this.brokerController.getBrokerStatsManager().incTopicPutNums(msgInner.getTopic());
         this.brokerController.getBrokerStatsManager().incTopicPutSize(msgInner.getTopic(), putMessageResult.getAppendMessageResult().getWroteBytes());

File: client/src/main/java/org/apache/rocketmq/client/consumer/store/RemoteBrokerOffsetStore.java
Patch:
@@ -240,7 +240,6 @@ private long fetchConsumeOffsetFromBroker(MessageQueue mq) throws RemotingExcept
             requestHeader.setConsumerGroup(this.groupName);
             requestHeader.setQueueId(mq.getQueueId());
             requestHeader.setBname(mq.getBrokerName());
-            requestHeader.setSetZeroIfNotFound(false);
 
             return this.mQClientFactory.getMQClientAPIImpl().queryConsumerOffset(
                 findBrokerResult.getBrokerAddr(), requestHeader, 1000 * 5);

File: common/src/main/java/org/apache/rocketmq/common/message/MessageExtBatch.java
Patch:
@@ -22,10 +22,12 @@
 public class MessageExtBatch extends MessageExtBrokerInner {
 
     private static final long serialVersionUID = -2353110995348498537L;
+
     /**
-     * Inner batch means the batch dose not need to be unwrapped
+     * Inner batch means the batch does not need to be unwrapped
      */
     private boolean isInnerBatch = false;
+
     public ByteBuffer wrap() {
         assert getBody() != null;
         return ByteBuffer.wrap(getBody(), 0, getBody().length);

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -31,11 +31,11 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 import java.util.function.Supplier;
-
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.UtilAll;
+import org.apache.rocketmq.common.attribute.CQType;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageDecoder;
@@ -52,7 +52,6 @@
 import org.apache.rocketmq.store.config.FlushDiskType;
 import org.apache.rocketmq.store.ha.HAService;
 import org.apache.rocketmq.store.logfile.MappedFile;
-import org.apache.rocketmq.common.attribute.CQType;
 
 /**
  * Store all metadata downtime for recovery, data protection reliability
@@ -1123,7 +1122,7 @@ private CompletableFuture<PutMessageStatus> handleHA(AppendMessageResult result,
      * According to receive certain message or offset storage time if an error occurs, it returns -1
      */
     public long pickupStoreTimestamp(final long offset, final int size) {
-        if (offset >= this.getMinOffset()) {
+        if (offset >= this.getMinOffset() && offset + size <= this.getMaxOffset()) {
             SelectMappedBufferResult result = this.getMessage(offset, size);
             if (null != result) {
                 try {

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -1093,7 +1093,7 @@ public long getEarliestMessageTime() {
         if (this.getCommitLog() instanceof DLedgerCommitLog) {
             minPhyOffset += DLedgerEntry.BODY_OFFSET;
         }
-        final int size = this.messageStoreConfig.getMaxMessageSize() * 2;
+        final int size = MessageDecoder.MESSAGE_STORE_TIMESTAMP_POSITION + 8;
         return this.getCommitLog().pickupStoreTimestamp(minPhyOffset, size);
     }
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ChangeInvisibleTimeProcessor.java
Patch:
@@ -206,7 +206,7 @@ private PutMessageResult appendCheckPoint(final ChangeInvisibleTimeRequestHeader
         ck.setNum((byte) 1);
         ck.setPopTime(popTime);
         ck.setInvisibleTime(requestHeader.getInvisibleTime());
-        ck.getStartOffset(offset);
+        ck.setStartOffset(offset);
         ck.setCId(requestHeader.getConsumerGroup());
         ck.setTopic(requestHeader.getTopic());
         ck.setQueueId((byte) queueId);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopBufferMergeService.java
Patch:
@@ -416,7 +416,7 @@ public void addCkMock(String group, String topic, int queueId, long startOffset,
         ck.setNum((byte) 0);
         ck.setPopTime(popTime);
         ck.setInvisibleTime(invisibleTime);
-        ck.getStartOffset(startOffset);
+        ck.setStartOffset(startOffset);
         ck.setCId(group);
         ck.setTopic(topic);
         ck.setQueueId((byte) queueId);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java
Patch:
@@ -720,7 +720,7 @@ private void appendCheckPoint(final PopMessageRequestHeader requestHeader,
         ck.setNum((byte) getMessageTmpResult.getMessageMapedList().size());
         ck.setPopTime(popTime);
         ck.setInvisibleTime(requestHeader.getInvisibleTime());
-        ck.getStartOffset(offset);
+        ck.setStartOffset(offset);
         ck.setCId(requestHeader.getConsumerGroup());
         ck.setTopic(topic);
         ck.setQueueId((byte) queueId);

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessResource.java
Patch:
@@ -121,6 +121,7 @@ public static PlainAccessResource parse(RemotingCommand request, String remoteAd
                     }
                     break;
                 case RequestCode.SEND_MESSAGE_V2:
+                case RequestCode.SEND_BATCH_MESSAGE:
                     final String topicV2 = request.getExtFields().get("b");
                     if (PlainAccessResource.isRetryTopic(topicV2)) {
                         accessResource.addResourceAndPerm(getRetryTopic(request.getExtFields().get("a")), Permission.SUB);

File: tools/src/main/java/org/apache/rocketmq/tools/admin/common/AdminToolsResultCodeEnum.java
Patch:
@@ -29,7 +29,8 @@ public enum AdminToolsResultCodeEnum {
     INTERRUPT_ERROR(-1004),
 
     TOPIC_ROUTE_INFO_NOT_EXIST(-2001),
-    CONSUMER_NOT_ONLINE(-2002);
+    CONSUMER_NOT_ONLINE(-2002),
+    BROADCAST_CONSUMPTION(-2003);
 
     private int code;
 

File: broker/src/main/java/org/apache/rocketmq/broker/controller/ReplicasManager.java
Patch:
@@ -292,7 +292,7 @@ private boolean registerBrokerToController() {
         try {
             final RegisterBrokerToControllerResponseHeader registerResponse = this.brokerOuterAPI.registerBrokerToController(this.controllerLeaderAddress,
                 this.brokerConfig.getBrokerClusterName(), this.brokerConfig.getBrokerName(), this.localAddress,
-                this.haService.getLastEpoch(), this.brokerController.getMessageStore().getMaxPhyOffset());
+                this.haService.getLastEpoch(), this.brokerController.getMessageStore().getMaxPhyOffset(), this.brokerConfig.getBrokerElectionPriority());
             final String newMasterAddress = registerResponse.getMasterAddress();
             if (StringUtils.isNoneEmpty(newMasterAddress)) {
                 if (StringUtils.equals(newMasterAddress, this.localAddress)) {

File: broker/src/main/java/org/apache/rocketmq/broker/out/BrokerOuterAPI.java
Patch:
@@ -1161,9 +1161,9 @@ public SyncStateSet alterSyncStateSet(
      */
     public RegisterBrokerToControllerResponseHeader registerBrokerToController(
             final String controllerAddress, final String clusterName,
-            final String brokerName, final String address, final int epoch, final long maxOffset) throws Exception {
+            final String brokerName, final String address, final int epoch, final long maxOffset, final int electionPriority) throws Exception {
 
-        final RegisterBrokerToControllerRequestHeader requestHeader = new RegisterBrokerToControllerRequestHeader(clusterName, brokerName, address, epoch, maxOffset);
+        final RegisterBrokerToControllerRequestHeader requestHeader = new RegisterBrokerToControllerRequestHeader(clusterName, brokerName, address, epoch, maxOffset, electionPriority);
         final RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_REGISTER_BROKER, requestHeader);
         final RemotingCommand response = this.remotingClient.invokeSync(controllerAddress, request, 3000);
         assert response != null;

File: broker/src/test/java/org/apache/rocketmq/broker/controller/ReplicasManagerTest.java
Patch:
@@ -123,7 +123,7 @@ public void before() throws Exception {
         when(brokerController.getBrokerOuterAPI()).thenReturn(brokerOuterAPI);
         when(brokerController.getBrokerAddr()).thenReturn(OLD_MASTER_ADDRESS);
         when(brokerOuterAPI.getControllerMetaData(any())).thenReturn(getMetaDataResponseHeader);
-        when(brokerOuterAPI.registerBrokerToController(any(), any(), any(), any(), anyInt(), anyLong())).thenReturn(registerBrokerToControllerResponseHeader);
+        when(brokerOuterAPI.registerBrokerToController(any(), any(), any(), any(), anyInt(), anyLong(), anyInt())).thenReturn(registerBrokerToControllerResponseHeader);
         when(brokerOuterAPI.getReplicaInfo(any(), any(), any())).thenReturn(result);
         replicasManager = new ReplicasManager(brokerController);
         autoSwitchHAService.init(defaultMessageStore);

File: controller/src/main/java/org/apache/rocketmq/controller/BrokerHeartbeatManager.java
Patch:
@@ -49,7 +49,7 @@ public interface BrokerHeartbeatManager {
      * Register new broker to heartManager.
      */
     void registerBroker(final String clusterName, final String brokerName, final String brokerAddr, final long brokerId,
-                        final Long timeoutMillis, final Channel channel, final Integer epoch, final Long maxOffset);
+                        final Long timeoutMillis, final Channel channel, final Integer epoch, final Long maxOffset, final Integer electionPriority);
 
     /**
      * Broker channel close

File: controller/src/main/java/org/apache/rocketmq/controller/processor/ControllerRequestProcessor.java
Patch:
@@ -114,7 +114,8 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand
                     final RegisterBrokerToControllerResponseHeader responseHeader = (RegisterBrokerToControllerResponseHeader) response.readCustomHeader();
                     if (responseHeader != null && responseHeader.getBrokerId() >= 0) {
                         this.heartbeatManager.registerBroker(controllerRequest.getClusterName(), controllerRequest.getBrokerName(), controllerRequest.getBrokerAddress(),
-                            responseHeader.getBrokerId(), controllerRequest.getHeartbeatTimeoutMillis(), ctx.channel(), controllerRequest.getEpoch(), controllerRequest.getMaxOffset());
+                                                             responseHeader.getBrokerId(), controllerRequest.getHeartbeatTimeoutMillis(), ctx.channel(),
+                                                             controllerRequest.getEpoch(), controllerRequest.getMaxOffset(), controllerRequest.getElectionPriority());
                     }
                     return response;
                 }

File: controller/src/test/java/org/apache/rocketmq/controller/impl/controller/impl/DefaultBrokerHeartbeatManagerTest.java
Patch:
@@ -43,7 +43,7 @@ public void testDetectBrokerAlive() throws InterruptedException {
         this.heartbeatManager.addBrokerLifecycleListener((clusterName, brokerName, brokerAddress, brokerId) -> {
             latch.countDown();
         });
-        this.heartbeatManager.registerBroker("cluster1", "broker1", "127.0.0.1:7000", 1L, 3000L, null, 1, 1L);
+        this.heartbeatManager.registerBroker("cluster1", "broker1", "127.0.0.1:7000", 1L, 3000L, null, 1, 1L, 0);
         assertTrue(latch.await(5000, TimeUnit.MILLISECONDS));
         this.heartbeatManager.shutdown();
     }

File: controller/src/main/java/org/apache/rocketmq/controller/impl/manager/BrokerInfo.java
Patch:
@@ -21,9 +21,6 @@
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicLong;
 
-/**
- * Broker info, mapping from brokerAddress to {brokerId, brokerHaAddress}.
- */
 public class BrokerInfo {
     private final String clusterName;
     private final String brokerName;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -1978,7 +1978,7 @@ private RemotingCommand queryCorrectionOffset(ChannelHandlerContext ctx,
             .queryMinOffsetInAllGroup(requestHeader.getTopic(), requestHeader.getFilterGroups());
 
         Map<Integer, Long> compareOffset =
-            this.brokerController.getConsumerOffsetManager().queryOffset(requestHeader.getTopic(), requestHeader.getCompareGroup());
+            this.brokerController.getConsumerOffsetManager().queryOffset(requestHeader.getCompareGroup(), requestHeader.getTopic());
 
         if (compareOffset != null && !compareOffset.isEmpty()) {
             for (Map.Entry<Integer, Long> entry : compareOffset.entrySet()) {

File: acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java
Patch:
@@ -22,13 +22,13 @@
 import javax.crypto.spec.SecretKeySpec;
 import org.apache.commons.codec.binary.Base64;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class AclSigner {
     public static final Charset DEFAULT_CHARSET = StandardCharsets.UTF_8;
     public static final SigningAlgorithm DEFAULT_ALGORITHM = SigningAlgorithm.HmacSHA1;
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_AUTHORIZE_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.ROCKETMQ_AUTHORIZE_LOGGER_NAME);
     private static final int CAL_SIGNATURE_FAILED = 10015;
     private static final String CAL_SIGNATURE_FAILED_MSG = "[%s:signature-failed] unable to calculate a request signature. error=%s";
 

File: acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java
Patch:
@@ -27,8 +27,8 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.yaml.snakeyaml.Yaml;
@@ -37,7 +37,7 @@
 
 public class AclUtils {
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     public static byte[] combineRequestContent(RemotingCommand request, SortedMap<String, String> fieldsMap) {
         try {

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainPermissionManager.java
Patch:
@@ -45,14 +45,14 @@
 import org.apache.rocketmq.common.PlainAccessConfig;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.srvutil.AclFileWatchService;
 
 public class PlainPermissionManager {
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private String fileHome = System.getProperty(MixAll.ROCKETMQ_HOME_PROPERTY,
         System.getenv(MixAll.ROCKETMQ_HOME_ENV));

File: acl/src/main/java/org/apache/rocketmq/acl/plain/RemoteAddressStrategyFactory.java
Patch:
@@ -23,12 +23,12 @@
 import org.apache.rocketmq.acl.common.AclException;
 import org.apache.rocketmq.acl.common.AclUtils;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class RemoteAddressStrategyFactory {
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     public static final NullRemoteAddressStrategy NULL_NET_ADDRESS_STRATEGY = new NullRemoteAddressStrategy();
 

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerPreOnlineService.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.BrokerSyncInfo;
 import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
@@ -41,7 +41,7 @@
 import org.apache.rocketmq.store.timer.TimerCheckpoint;
 
 public class BrokerPreOnlineService extends ServiceThread {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 
     private int waitBrokerIndex = 0;

File: broker/src/main/java/org/apache/rocketmq/broker/client/ClientHousekeepingService.java
Patch:
@@ -23,12 +23,12 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
 
 public class ClientHousekeepingService implements ChannelEventListener {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 
     private ScheduledExecutorService scheduledExecutorService;

File: broker/src/main/java/org/apache/rocketmq/broker/client/ConsumerGroupInfo.java
Patch:
@@ -26,14 +26,14 @@
 import java.util.concurrent.ConcurrentMap;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
 public class ConsumerGroupInfo {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final String groupName;
     private final ConcurrentMap<String/* Topic */, SubscriptionData> subscriptionTable =
         new ConcurrentHashMap<>();

File: broker/src/main/java/org/apache/rocketmq/broker/client/ConsumerManager.java
Patch:
@@ -28,16 +28,16 @@
 import java.util.stream.Collectors;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.store.stats.BrokerStatsManager;
 
 public class ConsumerManager {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private static final long CHANNEL_EXPIRED_TIMEOUT = 1000 * 120;
     private final ConcurrentMap<String, ConsumerGroupInfo> consumerTable =
         new ConcurrentHashMap<>(1024);

File: broker/src/main/java/org/apache/rocketmq/broker/client/DefaultConsumerIdsChangeListener.java
Patch:
@@ -28,12 +28,12 @@
 import org.apache.rocketmq.common.AbstractBrokerRunnable;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.utils.ThreadUtils;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
 public class DefaultConsumerIdsChangeListener implements ConsumerIdsChangeListener {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
     private final int cacheSize = 8096;
 

File: broker/src/main/java/org/apache/rocketmq/broker/client/ProducerManager.java
Patch:
@@ -28,15 +28,15 @@
 import java.util.concurrent.CopyOnWriteArrayList;
 import org.apache.rocketmq.broker.util.PositiveAtomicCounter;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.body.ProducerInfo;
 import org.apache.rocketmq.remoting.protocol.body.ProducerTableInfo;
 import org.apache.rocketmq.store.stats.BrokerStatsManager;
 
 public class ProducerManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private static final long CHANNEL_EXPIRED_TIMEOUT = 1000 * 120;
     private static final int GET_AVAILABLE_CHANNEL_RETRY_COUNT = 3;
     private final ConcurrentHashMap<String /* group name */, ConcurrentHashMap<Channel, ClientChannelInfo>> groupChannelTable =

File: broker/src/main/java/org/apache/rocketmq/broker/client/net/Broker2Client.java
Patch:
@@ -34,8 +34,8 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.message.MessageQueueForC;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
 import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
@@ -51,7 +51,7 @@
 import org.apache.rocketmq.remoting.protocol.header.ResetOffsetRequestHeader;
 
 public class Broker2Client {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 
     public Broker2Client(BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/client/rebalance/RebalanceLockManager.java
Patch:
@@ -18,8 +18,8 @@
 
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 import java.util.HashSet;
 import java.util.Set;
@@ -29,7 +29,7 @@
 import java.util.concurrent.locks.ReentrantLock;
 
 public class RebalanceLockManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.REBALANCE_LOCK_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.REBALANCE_LOCK_LOGGER_NAME);
     private final static long REBALANCE_LOCK_MAX_LIVE_TIME = Long.parseLong(System.getProperty(
         "rocketmq.broker.rebalance.lockMaxLiveTime", "60000"));
     private final Lock lock = new ReentrantLock();

File: broker/src/main/java/org/apache/rocketmq/broker/controller/ReplicasManager.java
Patch:
@@ -36,8 +36,8 @@
 import org.apache.rocketmq.common.Pair;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.EpochEntry;
 import org.apache.rocketmq.remoting.protocol.body.SyncStateSet;
 import org.apache.rocketmq.remoting.protocol.header.controller.GetMetaDataResponseHeader;
@@ -55,7 +55,7 @@
  * syncStateSet, only master will start this timed task.
  */
 public class ReplicasManager {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private static final int RETRY_INTERVAL_SECOND = 5;
 

File: broker/src/main/java/org/apache/rocketmq/broker/dledger/DLedgerRoleChangeHandler.java
Patch:
@@ -27,15 +27,15 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.DefaultMessageStore;
 import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.dledger.DLedgerCommitLog;
 
 public class DLedgerRoleChangeHandler implements DLedgerLeaderElector.RoleChangeHandler {
 
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private ExecutorService executorService;
     private BrokerController brokerController;
     private DefaultMessageStore messageStore;

File: broker/src/main/java/org/apache/rocketmq/broker/failover/EscapeBridge.java
Patch:
@@ -44,16 +44,16 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.store.GetMessageResult;
 import org.apache.rocketmq.store.MessageStore;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
 
 public class EscapeBridge {
-    protected static final InternalLogger LOG = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    protected static final Logger LOG = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private static final long SEND_TIMEOUT = 3000L;
     private static final long DEFAULT_PULL_TIMEOUT_MILLIS = 1000 * 10L;
     private final String innerProducerGroupName;

File: broker/src/main/java/org/apache/rocketmq/broker/filter/CommitLogDispatcherCalcBitMap.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.filter.util.BitsArray;
 import org.apache.rocketmq.store.CommitLogDispatcher;
 import org.apache.rocketmq.store.DispatchRequest;
@@ -34,7 +34,7 @@
  */
 public class CommitLogDispatcherCalcBitMap implements CommitLogDispatcher {
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.FILTER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.FILTER_LOGGER_NAME);
 
     protected final BrokerConfig brokerConfig;
     protected final ConsumerFilterManager consumerFilterManager;

File: broker/src/main/java/org/apache/rocketmq/broker/filter/ConsumerFilterManager.java
Patch:
@@ -32,8 +32,8 @@
 import org.apache.rocketmq.filter.FilterFactory;
 import org.apache.rocketmq.filter.util.BloomFilter;
 import org.apache.rocketmq.filter.util.BloomFilterData;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
@@ -42,7 +42,7 @@
  */
 public class ConsumerFilterManager extends ConfigManager {
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.FILTER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.FILTER_LOGGER_NAME);
 
     private static final long MS_24_HOUR = 24 * 3600 * 1000;
 

File: broker/src/main/java/org/apache/rocketmq/broker/filter/ExpressionMessageFilter.java
Patch:
@@ -24,15 +24,15 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.filter.util.BitsArray;
 import org.apache.rocketmq.filter.util.BloomFilter;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.store.ConsumeQueueExt;
 import org.apache.rocketmq.store.MessageFilter;
 
 public class ExpressionMessageFilter implements MessageFilter {
 
-    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.FILTER_LOGGER_NAME);
+    protected static final Logger log = LoggerFactory.getLogger(LoggerName.FILTER_LOGGER_NAME);
 
     protected final SubscriptionData subscriptionData;
     protected final ConsumerFilterData consumerFilterData;

File: broker/src/main/java/org/apache/rocketmq/broker/filtersrv/FilterServerManager.java
Patch:
@@ -33,14 +33,14 @@
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 
 public class FilterServerManager {
 
     public static final long FILTER_SERVER_MAX_IDLE_TIME_MILLS = 30000;
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final ConcurrentMap<Channel, FilterServerInfo> filterServerTable =
         new ConcurrentHashMap<>(16);
     private final BrokerController brokerController;

File: broker/src/main/java/org/apache/rocketmq/broker/filtersrv/FilterServerUtil.java
Patch:
@@ -18,10 +18,10 @@
 package org.apache.rocketmq.broker.filtersrv;
 
 
-import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
 
 public class FilterServerUtil {
-    public static void callShell(final String shellString, final InternalLogger log) {
+    public static void callShell(final String shellString, final Logger log) {
         Process process = null;
         try {
             String[] cmdArray = splitShellString(shellString);

File: broker/src/main/java/org/apache/rocketmq/broker/latency/BrokerFastFailure.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.netty.RequestTask;
 import org.apache.rocketmq.remoting.protocol.RemotingSysResponseCode;
 
@@ -35,7 +35,7 @@
  * BrokerController#getPullThreadPoolQueue()}
  */
 public class BrokerFastFailure {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final ScheduledExecutorService scheduledExecutorService;
     private final BrokerController brokerController;
 

File: broker/src/main/java/org/apache/rocketmq/broker/longpolling/LmqPullRequestHoldService.java
Patch:
@@ -19,12 +19,12 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 
 public class LmqPullRequestHoldService extends PullRequestHoldService {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     public LmqPullRequestHoldService(BrokerController brokerController) {
         super(brokerController);

File: broker/src/main/java/org/apache/rocketmq/broker/longpolling/PullRequestHoldService.java
Patch:
@@ -25,12 +25,12 @@
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.SystemClock;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.ConsumeQueueExt;
 
 public class PullRequestHoldService extends ServiceThread {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     protected static final String TOPIC_QUEUEID_SEPARATOR = "@";
     protected final BrokerController brokerController;
     private final SystemClock systemClock = new SystemClock();

File: broker/src/main/java/org/apache/rocketmq/broker/metrics/BrokerMetricsManager.java
Patch:
@@ -56,8 +56,8 @@
 import org.apache.rocketmq.common.metrics.NopLongHistogram;
 import org.apache.rocketmq.common.metrics.NopObservableLongGauge;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.metrics.RemotingMetricsManager;
 import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
 import org.apache.rocketmq.store.DefaultMessageStore;
@@ -97,7 +97,7 @@
 import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.PROTOCOL_TYPE_REMOTING;
 
 public class BrokerMetricsManager {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final BrokerConfig brokerConfig;
     private final MessageStore messageStore;

File: broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java
Patch:
@@ -33,8 +33,8 @@
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.constant.PermName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.store.MessageStore;
 import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
@@ -49,7 +49,7 @@ public class ConsumerLagCalculator {
     private final MessageStore messageStore;
     private final PopBufferMergeService popBufferMergeService;
 
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     public ConsumerLagCalculator(BrokerController brokerController) {
         this.brokerConfig = brokerController.getBrokerConfig();

File: broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOffsetManager.java
Patch:
@@ -31,13 +31,13 @@
 import org.apache.rocketmq.common.ConfigManager;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
 public class ConsumerOffsetManager extends ConfigManager {
-    private static final InternalLogger LOG = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOG = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     public static final String TOPIC_GROUP_SEPARATOR = "@";
 
     private DataVersion dataVersion = new DataVersion();

File: broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOrderInfoLockManager.java
Patch:
@@ -29,11 +29,11 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class ConsumerOrderInfoLockManager {
-    private static final InternalLogger POP_LOGGER = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
+    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
     private final BrokerController brokerController;
     private final Map<Key, Timeout> timeoutMap = new ConcurrentHashMap<>();
     private final Timer timer;

File: broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOrderInfoManager.java
Patch:
@@ -32,14 +32,14 @@
 import org.apache.rocketmq.common.ConfigManager;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
 
 public class ConsumerOrderInfoManager extends ConfigManager {
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private static final String TOPIC_GROUP_SEPARATOR = "@";
     private static final long CLEAN_SPAN_FROM_LAST = 24 * 3600 * 1000;
 

File: broker/src/main/java/org/apache/rocketmq/broker/out/BrokerOuterAPI.java
Patch:
@@ -58,8 +58,8 @@
 import org.apache.rocketmq.common.namesrv.TopAddressing;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.InvokeCallback;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.RemotingClient;
@@ -132,7 +132,7 @@
 import static org.apache.rocketmq.remoting.protocol.ResponseCode.CONTROLLER_NOT_LEADER;
 
 public class BrokerOuterAPI {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final RemotingClient remotingClient;
     private final TopAddressing topAddressing = new DefaultTopAddressing(MixAll.getWSAddr());
     private String nameSrvAddr = null;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AckMessageProcessor.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.utils.DataConverter;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -43,7 +43,7 @@
 import org.apache.rocketmq.store.pop.AckMsg;
 
 public class AckMessageProcessor implements NettyRequestProcessor {
-    private static final InternalLogger POP_LOGGER = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
+    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
     private final BrokerController brokerController;
     private String reviveTopic;
     private PopReviveService[] popReviveServices;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -72,8 +72,8 @@
 import org.apache.rocketmq.common.stats.StatsSnapshot;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.filter.util.BitsArray;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
@@ -189,7 +189,7 @@
 import static org.apache.rocketmq.remoting.protocol.RemotingCommand.buildErrorResponse;
 
 public class AdminBrokerProcessor implements NettyRequestProcessor {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     protected final BrokerController brokerController;
 
     public AdminBrokerProcessor(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ChangeInvisibleTimeProcessor.java
Patch:
@@ -28,8 +28,8 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.utils.DataConverter;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -44,7 +44,7 @@
 import org.apache.rocketmq.store.pop.PopCheckPoint;
 
 public class ChangeInvisibleTimeProcessor implements NettyRequestProcessor {
-    private static final InternalLogger POP_LOGGER = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
+    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
     private final BrokerController brokerController;
     private final String reviveTopic;
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ClientManageProcessor.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.common.filter.ExpressionType;
 import org.apache.rocketmq.common.sysflag.TopicSysFlag;
 import org.apache.rocketmq.filter.FilterFactory;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -44,7 +44,7 @@
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public class ClientManageProcessor implements NettyRequestProcessor {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 
     public ClientManageProcessor(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ConsumerManageProcessor.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
 import org.apache.rocketmq.broker.offset.ConsumerOffsetManager;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -48,7 +48,7 @@
 import static org.apache.rocketmq.remoting.protocol.RemotingCommand.buildErrorResponse;
 
 public class ConsumerManageProcessor implements NettyRequestProcessor {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 
     public ConsumerManageProcessor(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/DefaultPullMessageResultHandler.java
Patch:
@@ -39,8 +39,8 @@
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.metrics.RemotingMetricsManager;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.remoting.protocol.ResponseCode;
@@ -63,7 +63,7 @@
 
 public class DefaultPullMessageResultHandler implements PullMessageResultHandler {
 
-    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    protected static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     protected final BrokerController brokerController;
 
     public DefaultPullMessageResultHandler(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/EndTransactionProcessor.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -42,7 +42,7 @@
  * EndTransaction processor: process commit and rollback message
  */
 public class EndTransactionProcessor implements NettyRequestProcessor {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
     private final BrokerController brokerController;
 
     public EndTransactionProcessor(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ForwardRequestProcessor.java
Patch:
@@ -19,13 +19,13 @@
 import io.netty.channel.ChannelHandlerContext;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public class ForwardRequestProcessor implements NettyRequestProcessor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final BrokerController brokerController;
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/NotificationProcessor.java
Patch:
@@ -32,8 +32,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.constant.PermName;
 import org.apache.rocketmq.common.help.FAQUrl;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRemotingAbstract;
@@ -46,7 +46,7 @@
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public class NotificationProcessor implements NettyRequestProcessor {
-    private static final InternalLogger POP_LOGGER = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
+    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
     private final BrokerController brokerController;
     private Random random = new Random(System.currentTimeMillis());
     private static final String BORN_TIME = "bornTime";

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PeekMessageProcessor.java
Patch:
@@ -36,8 +36,8 @@
 import org.apache.rocketmq.common.help.FAQUrl;
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.metrics.RemotingMetricsManager;
@@ -59,7 +59,7 @@
 import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_RESULT;
 
 public class PeekMessageProcessor implements NettyRequestProcessor {
-    private static final InternalLogger LOG = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOG = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
     private Random random = new Random(System.currentTimeMillis());
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PollingInfoProcessor.java
Patch:
@@ -26,8 +26,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.constant.PermName;
 import org.apache.rocketmq.common.help.FAQUrl;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -38,7 +38,7 @@
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public class PollingInfoProcessor implements NettyRequestProcessor {
-    private static final InternalLogger POP_LOGGER = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
+    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
     private final BrokerController brokerController;
 
     public PollingInfoProcessor(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopBufferMergeService.java
Patch:
@@ -31,8 +31,8 @@
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.utils.DataConverter;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
@@ -41,7 +41,7 @@
 import org.apache.rocketmq.store.pop.PopCheckPoint;
 
 public class PopBufferMergeService extends ServiceThread {
-    private static final InternalLogger POP_LOGGER = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
+    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
     ConcurrentHashMap<String/*mergeKey*/, PopCheckPointWrapper>
         buffer = new ConcurrentHashMap<>(1024 * 16);
     ConcurrentHashMap<String/*topic@cid@queueId*/, QueueWithTime<PopCheckPointWrapper>> commitOffsets =

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
Patch:
@@ -42,8 +42,8 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.DataConverter;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.AppendMessageStatus;
 import org.apache.rocketmq.store.GetMessageResult;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
@@ -56,7 +56,7 @@
 import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
 
 public class PopReviveService extends ServiceThread {
-    private static final InternalLogger POP_LOGGER = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
+    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
 
     private int queueId;
     private BrokerController brokerController;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PullMessageProcessor.java
Patch:
@@ -38,8 +38,8 @@
 import org.apache.rocketmq.common.filter.ExpressionType;
 import org.apache.rocketmq.common.help.FAQUrl;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRemotingAbstract;
@@ -75,7 +75,7 @@
 import static org.apache.rocketmq.remoting.protocol.RemotingCommand.buildErrorResponse;
 
 public class PullMessageProcessor implements NettyRequestProcessor {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private List<ConsumeMessageHook> consumeMessageHookList;
     private PullMessageResultHandler pullMessageResultHandler;
     private final BrokerController brokerController;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/QueryMessageProcessor.java
Patch:
@@ -26,8 +26,8 @@
 import org.apache.rocketmq.broker.pagecache.QueryMessageTransfer;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.metrics.RemotingMetricsManager;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -45,7 +45,7 @@
 import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_RESULT;
 
 public class QueryMessageProcessor implements NettyRequestProcessor {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 
     public QueryMessageProcessor(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ReplyMessageProcessor.java
Patch:
@@ -36,8 +36,8 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
@@ -55,7 +55,7 @@
 import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
 
 public class ReplyMessageProcessor extends AbstractSendMessageProcessor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     public ReplyMessageProcessor(final BrokerController brokerController) {
         super(brokerController);

File: broker/src/main/java/org/apache/rocketmq/broker/schedule/ScheduleMessageService.java
Patch:
@@ -50,8 +50,8 @@
 import org.apache.rocketmq.common.running.RunningStats;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.ThreadUtils;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
@@ -66,7 +66,7 @@
 import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
 
 public class ScheduleMessageService extends ConfigManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private static final long FIRST_DELAY_TIME = 1000L;
     private static final long DELAY_FOR_A_WHILE = 100L;

File: broker/src/main/java/org/apache/rocketmq/broker/slave/SlaveSynchronize.java
Patch:
@@ -23,8 +23,8 @@
 import org.apache.rocketmq.broker.subscription.SubscriptionGroupManager;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.body.ConsumerOffsetSerializeWrapper;
 import org.apache.rocketmq.remoting.protocol.body.MessageRequestModeSerializeWrapper;
 import org.apache.rocketmq.remoting.protocol.body.SubscriptionGroupWrapper;
@@ -34,7 +34,7 @@
 import org.apache.rocketmq.store.timer.TimerMetrics;
 
 public class SlaveSynchronize {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
     private volatile String masterAddr = null;
 

File: broker/src/main/java/org/apache/rocketmq/broker/subscription/SubscriptionGroupManager.java
Patch:
@@ -26,14 +26,14 @@
 import org.apache.rocketmq.common.ConfigManager;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public class SubscriptionGroupManager extends ConfigManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final ConcurrentMap<String, SubscriptionGroupConfig> subscriptionGroupTable =
         new ConcurrentHashMap<>(1024);

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java
Patch:
@@ -42,16 +42,16 @@
 import org.apache.rocketmq.common.constant.PermName;
 import org.apache.rocketmq.common.sysflag.TopicSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.remoting.protocol.body.KVTable;
 import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
 public class TopicConfigManager extends ConfigManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private static final long LOCK_TIMEOUT_MILLIS = 3000;
     private static final int SCHEDULE_TOPIC_QUEUE_NUM = 18;
 

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicQueueMappingCleanService.java
Patch:
@@ -30,8 +30,8 @@
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.RequestCode;
 import org.apache.rocketmq.remoting.protocol.admin.TopicOffset;
 import org.apache.rocketmq.remoting.protocol.admin.TopicStatsTable;
@@ -49,7 +49,7 @@
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 
 public class TopicQueueMappingCleanService extends ServiceThread {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private TopicQueueMappingManager topicQueueMappingManager;
     private BrokerOuterAPI brokerOuterAPI;

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicQueueMappingManager.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.rocketmq.broker.BrokerPathConfigHelper;
 import org.apache.rocketmq.common.ConfigManager;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.remoting.protocol.ResponseCode;
@@ -43,7 +43,7 @@
 import static org.apache.rocketmq.remoting.protocol.RemotingCommand.buildErrorResponse;
 
 public class TopicQueueMappingManager extends ConfigManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private static final long LOCK_TIMEOUT_MILLIS = 3000;
     private transient final Lock lock = new ReentrantLock();
 

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicRouteInfoManager.java
Patch:
@@ -36,8 +36,8 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 import org.apache.rocketmq.remoting.protocol.ResponseCode;
@@ -48,7 +48,7 @@ public class TopicRouteInfoManager {
 
     private static final long GET_TOPIC_ROUTE_TIMEOUT = 3000L;
     private static final long LOCK_TIMEOUT_MILLIS = 3000L;
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final Lock lockNamesrv = new ReentrantLock();
     private final ConcurrentMap<String/* Topic */, TopicRouteData> topicRouteTable = new ConcurrentHashMap<>();

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/AbstractTransactionalMessageCheckListener.java
Patch:
@@ -27,12 +27,12 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.header.CheckTransactionStateRequestHeader;
 
 public abstract class AbstractTransactionalMessageCheckListener {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
     private BrokerController brokerController;
 

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/TransactionalMessageCheckService.java
Patch:
@@ -19,11 +19,11 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class TransactionalMessageCheckService extends ServiceThread {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
     private BrokerController brokerController;
 

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/DefaultTransactionalMessageCheckListener.java
Patch:
@@ -24,16 +24,16 @@
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
 
 import java.util.concurrent.ThreadLocalRandom;
 
 public class DefaultTransactionalMessageCheckListener extends AbstractTransactionalMessageCheckListener {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
     public DefaultTransactionalMessageCheckListener() {
         super();

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageBridge.java
Patch:
@@ -44,10 +44,10 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InnerLoggerFactory;
-import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.GetMessageResult;
 import org.apache.rocketmq.store.MessageStore;
 import org.apache.rocketmq.store.PutMessageResult;
@@ -58,7 +58,7 @@
 import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
 
 public class TransactionalMessageBridge {
-    private static final InternalLogger LOGGER = InnerLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
     private final ConcurrentHashMap<Integer, MessageQueue> opQueueMap = new ConcurrentHashMap<>();
     private final BrokerController brokerController;

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageServiceImpl.java
Patch:
@@ -40,16 +40,16 @@
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.ResponseCode;
 import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
 import org.apache.rocketmq.store.config.BrokerRole;
 
 public class TransactionalMessageServiceImpl implements TransactionalMessageService {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
     private TransactionalMessageBridge transactionalMessageBridge;
 

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalOpBatchService.java
Patch:
@@ -19,11 +19,11 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class TransactionalOpBatchService extends ServiceThread {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
     private BrokerController brokerController;
     private TransactionalMessageServiceImpl transactionalMessageService;

File: broker/src/main/java/org/apache/rocketmq/broker/util/HookUtils.java
Patch:
@@ -32,16 +32,16 @@
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.QueueTypeUtils;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
 import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.timer.TimerMessageStore;
 
 public class HookUtils {
 
-    protected static final InternalLogger LOG = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    protected static final Logger LOG = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private static AtomicLong printTimes = new AtomicLong(0);
 

File: broker/src/test/java/org/apache/rocketmq/broker/util/TransactionalMessageServiceImpl.java
Patch:
@@ -23,13 +23,13 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
 import org.apache.rocketmq.store.PutMessageResult;
 
 public class TransactionalMessageServiceImpl implements TransactionalMessageService {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
     @Override
     public PutMessageResult prepareMessage(MessageExtBrokerInner messageInner) {

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultLitePullConsumer.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.rocketmq.client.consumer.store.OffsetStore;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.impl.consumer.DefaultLitePullConsumerImpl;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.trace.AsyncTraceDispatcher;
 import org.apache.rocketmq.client.trace.TraceDispatcher;
 import org.apache.rocketmq.client.trace.hook.ConsumeMessageTraceHookImpl;
@@ -34,14 +33,15 @@
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class DefaultLitePullConsumer extends ClientConfig implements LitePullConsumer {
 
-    private final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(DefaultLitePullConsumer.class);
 
     private final DefaultLitePullConsumerImpl defaultLitePullConsumerImpl;
 

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumer.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.trace.AsyncTraceDispatcher;
 import org.apache.rocketmq.client.trace.TraceDispatcher;
 import org.apache.rocketmq.client.trace.hook.ConsumeMessageTraceHookImpl;
@@ -40,11 +39,12 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 /**
  * In most scenarios, this is the mostly recommended class to consume messages.
@@ -63,7 +63,7 @@
  */
 public class DefaultMQPushConsumer extends ClientConfig implements MQPushConsumer {
 
-    private final InternalLogger log = ClientLogger.getLog();
+    private final Logger log = LoggerFactory.getLogger(DefaultMQPushConsumer.class);
 
     /**
      * Internal implementation. Most of the functions herein are delegated to it.

File: client/src/main/java/org/apache/rocketmq/client/consumer/MQPullConsumerScheduleService.java
Patch:
@@ -24,21 +24,21 @@
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.client.exception.MQClientException;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 /**
  * Schedule service for pull consumer.
  * This Consumer will be removed in 2022, and a better implementation {@link
  * DefaultLitePullConsumer} is recommend to use in the scenario of actively pulling messages.
  */
 public class MQPullConsumerScheduleService {
-    private final InternalLogger log = ClientLogger.getLog();
+    private final Logger log = LoggerFactory.getLogger(MQPullConsumerScheduleService.class);
     private final MessageQueueListener messageQueueListener = new MessageQueueListenerImpl();
     private final ConcurrentMap<MessageQueue, PullTaskImpl> taskTable =
         new ConcurrentHashMap<>();

File: client/src/main/java/org/apache/rocketmq/client/consumer/store/LocalFileOffsetStore.java
Patch:
@@ -28,13 +28,13 @@
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.help.FAQUrl;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.remoting.exception.RemotingException;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 /**
  * Local storage implementation
@@ -43,7 +43,7 @@ public class LocalFileOffsetStore implements OffsetStore {
     public final static String LOCAL_OFFSET_STORE_DIR = System.getProperty(
         "rocketmq.client.localOffsetStoreDir",
         System.getProperty("user.home") + File.separator + ".rocketmq_offsets");
-    private final static InternalLogger log = ClientLogger.getLog();
+    private final static Logger log = LoggerFactory.getLogger(LocalFileOffsetStore.class);
     private final MQClientInstance mQClientFactory;
     private final String groupName;
     private final String storePath;

File: client/src/main/java/org/apache/rocketmq/client/consumer/store/RemoteBrokerOffsetStore.java
Patch:
@@ -28,20 +28,20 @@
 import org.apache.rocketmq.client.exception.OffsetNotFoundException;
 import org.apache.rocketmq.client.impl.FindBrokerResult;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.header.QueryConsumerOffsetRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 /**
  * Remote storage implementation
  */
 public class RemoteBrokerOffsetStore implements OffsetStore {
-    private final static InternalLogger log = ClientLogger.getLog();
+    private final static Logger log = LoggerFactory.getLogger(RemoteBrokerOffsetStore.class);
     private final MQClientInstance mQClientFactory;
     private final String groupName;
     private ConcurrentMap<MessageQueue, AtomicLong> offsetTable =

File: client/src/main/java/org/apache/rocketmq/client/impl/MQAdminImpl.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
 import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.help.FAQUrl;
@@ -44,7 +43,6 @@
 import org.apache.rocketmq.common.message.MessageId;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.InvokeCallback;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.exception.RemotingException;
@@ -56,10 +54,12 @@
 import org.apache.rocketmq.remoting.protocol.header.QueryMessageResponseHeader;
 import org.apache.rocketmq.remoting.protocol.route.BrokerData;
 import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class MQAdminImpl {
 
-    private final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(MQAdminImpl.class);
     private final MQClientInstance mQClientFactory;
     private long timeoutMillis = 6000;
 

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -50,7 +50,6 @@
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
 import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
 import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.producer.SendCallback;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.client.producer.SendStatus;
@@ -74,7 +73,6 @@
 import org.apache.rocketmq.common.namesrv.NameServerUpdateCallback;
 import org.apache.rocketmq.common.namesrv.TopAddressing;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.InvokeCallback;
 import org.apache.rocketmq.remoting.RPCHook;
@@ -219,11 +217,13 @@
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.remoting.rpchook.DynamicalExtFieldRPCHook;
 import org.apache.rocketmq.remoting.rpchook.StreamTypeRPCHook;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 import static org.apache.rocketmq.remoting.protocol.RemotingSysResponseCode.SUCCESS;
 
 public class MQClientAPIImpl implements NameServerUpdateCallback {
-    private final static InternalLogger log = ClientLogger.getLog();
+    private final static Logger log = LoggerFactory.getLogger(MQClientAPIImpl.class);
     private static boolean sendSmartMsg =
         Boolean.parseBoolean(System.getProperty("org.apache.rocketmq.client.sendSmartMsg", "true"));
 

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientManager.java
Patch:
@@ -21,12 +21,12 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.rocketmq.client.ClientConfig;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
-import org.apache.rocketmq.client.log.ClientLogger;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class MQClientManager {
-    private final static InternalLogger log = ClientLogger.getLog();
+    private final static Logger log = LoggerFactory.getLogger(MQClientManager.class);
     private static MQClientManager instance = new MQClientManager();
     private AtomicInteger factoryIndexGenerator = new AtomicInteger();
     private ConcurrentMap<String/* clientId */, MQClientInstance> factoryTable =

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java
Patch:
@@ -35,7 +35,6 @@
 import org.apache.rocketmq.client.consumer.listener.ConsumeReturnType;
 import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
 import org.apache.rocketmq.client.hook.ConsumeMessageContext;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.stat.ConsumerStatsManager;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
@@ -44,12 +43,13 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.utils.ThreadUtils;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.protocol.body.CMResult;
 import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class ConsumeMessageConcurrentlyService implements ConsumeMessageService {
-    private static final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(ConsumeMessageConcurrentlyService.class);
     private final DefaultMQPushConsumerImpl defaultMQPushConsumerImpl;
     private final DefaultMQPushConsumer defaultMQPushConsumer;
     private final MessageListenerConcurrently messageListener;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -33,7 +33,6 @@
 import org.apache.rocketmq.client.consumer.listener.ConsumeReturnType;
 import org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;
 import org.apache.rocketmq.client.hook.ConsumeMessageContext;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.stat.ConsumerStatsManager;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
@@ -44,14 +43,15 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.utils.ThreadUtils;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 import org.apache.rocketmq.remoting.protocol.body.CMResult;
 import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class ConsumeMessageOrderlyService implements ConsumeMessageService {
-    private static final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(ConsumeMessageOrderlyService.class);
     private final static long MAX_TIME_CONSUME_CONTINUOUSLY =
         Long.parseLong(System.getProperty("rocketmq.client.maxTimeConsumeContinuously", "60000"));
     private final DefaultMQPushConsumerImpl defaultMQPushConsumerImpl;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessagePopConcurrentlyService.java
Patch:
@@ -35,7 +35,6 @@
 import org.apache.rocketmq.client.consumer.listener.ConsumeReturnType;
 import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
 import org.apache.rocketmq.client.hook.ConsumeMessageContext;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.stat.ConsumerStatsManager;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
@@ -45,13 +44,14 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.utils.ThreadUtils;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.protocol.body.CMResult;
 import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
 import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class ConsumeMessagePopConcurrentlyService implements ConsumeMessageService {
-    private static final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(ConsumeMessagePopConcurrentlyService.class);
     private final DefaultMQPushConsumerImpl defaultMQPushConsumerImpl;
     private final DefaultMQPushConsumer defaultMQPushConsumer;
     private final MessageListenerConcurrently messageListener;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessagePopOrderlyService.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;
 import org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;
 import org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.stat.ConsumerStatsManager;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
@@ -41,14 +40,15 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.utils.ThreadUtils;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 import org.apache.rocketmq.remoting.protocol.body.CMResult;
 import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class ConsumeMessagePopOrderlyService implements ConsumeMessageService {
-    private static final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(ConsumeMessagePopOrderlyService.class);
     private final DefaultMQPushConsumerImpl defaultMQPushConsumerImpl;
     private final DefaultMQPushConsumer defaultMQPushConsumer;
     private final MessageListenerOrderly messageListener;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java
Patch:
@@ -55,7 +55,6 @@
 import org.apache.rocketmq.client.impl.CommunicationMode;
 import org.apache.rocketmq.client.impl.MQClientManager;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ServiceState;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
@@ -65,7 +64,6 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
@@ -74,10 +72,12 @@
 import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class DefaultLitePullConsumerImpl implements MQConsumerInner {
 
-    private final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(DefaultLitePullConsumerImpl.class);
 
     private final long consumerStartTimestamp = System.currentTimeMillis();
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java
Patch:
@@ -42,7 +42,6 @@
 import org.apache.rocketmq.client.impl.CommunicationMode;
 import org.apache.rocketmq.client.impl.MQClientManager;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ServiceState;
 import org.apache.rocketmq.common.UtilAll;
@@ -55,7 +54,6 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingException;
@@ -65,14 +63,16 @@
 import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 /**
  * This class will be removed in 2022, and a better implementation {@link DefaultLitePullConsumerImpl} is recommend to use
  * in the scenario of actively pulling messages.
  */
 @Deprecated
 public class DefaultMQPullConsumerImpl implements MQConsumerInner {
-    private final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(DefaultMQPullConsumerImpl.class);
     private final DefaultMQPullConsumer defaultMQPullConsumer;
     private final long consumerStartTimestamp = System.currentTimeMillis();
     private final RPCHook rpcHook;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ProcessQueue.java
Patch:
@@ -28,12 +28,12 @@
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.message.MessageAccessor;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.protocol.body.ProcessQueueInfo;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 /**
  * Queue consumption snapshot
@@ -43,7 +43,7 @@ public class ProcessQueue {
         Long.parseLong(System.getProperty("rocketmq.client.rebalance.lockMaxLiveTime", "30000"));
     public final static long REBALANCE_LOCK_INTERVAL = Long.parseLong(System.getProperty("rocketmq.client.rebalance.lockInterval", "20000"));
     private final static long PULL_MAX_IDLE_TIME = Long.parseLong(System.getProperty("rocketmq.client.pull.pullMaxIdleTime", "120000"));
-    private final InternalLogger log = ClientLogger.getLog();
+    private final Logger log = LoggerFactory.getLogger(ProcessQueue.class);
     private final ReadWriteLock treeMapLock = new ReentrantReadWriteLock();
     private final TreeMap<Long, MessageExt> msgTreeMap = new TreeMap<>();
     private final AtomicLong msgCount = new AtomicLong();

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/PullAPIWrapper.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.rocketmq.client.impl.CommunicationMode;
 import org.apache.rocketmq.client.impl.FindBrokerResult;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.MQVersion;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.filter.ExpressionType;
@@ -45,15 +44,16 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class PullAPIWrapper {
-    private final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(PullAPIWrapper.class);
     private final MQClientInstance mQClientFactory;
     private final String consumerGroup;
     private final boolean unitMode;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceImpl.java
Patch:
@@ -31,23 +31,23 @@
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.impl.FindBrokerResult;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.KeyBuilder;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.message.MessageQueueAssignment;
 import org.apache.rocketmq.common.message.MessageRequestMode;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
 import org.apache.rocketmq.remoting.protocol.body.LockBatchRequestBody;
 import org.apache.rocketmq.remoting.protocol.body.UnlockBatchRequestBody;
 import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
 import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public abstract class RebalanceImpl {
-    protected static final InternalLogger log = ClientLogger.getLog();
+    protected static final Logger log = LoggerFactory.getLogger(RebalanceImpl.class);
 
     protected final ConcurrentMap<MessageQueue, ProcessQueue> processQueueTable = new ConcurrentHashMap<>(64);
     protected final ConcurrentMap<MessageQueue, PopProcessQueue> popProcessQueueTable = new ConcurrentHashMap<>(64);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceService.java
Patch:
@@ -17,15 +17,15 @@
 package org.apache.rocketmq.client.impl.consumer;
 
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.ServiceThread;
-import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class RebalanceService extends ServiceThread {
     private static long waitInterval =
         Long.parseLong(System.getProperty(
             "rocketmq.client.rebalance.waitInterval", "20000"));
-    private final InternalLogger log = ClientLogger.getLog();
+    private final Logger log = LoggerFactory.getLogger(RebalanceService.class);
     private final MQClientInstance mqClientFactory;
 
     public RebalanceService(MQClientInstance mqClientFactory) {

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -52,7 +52,6 @@
 import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
 import org.apache.rocketmq.client.impl.producer.MQProducerInner;
 import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
 import org.apache.rocketmq.client.stat.ConsumerStatsManager;
 import org.apache.rocketmq.common.MQVersion;
@@ -65,7 +64,6 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.message.MessageQueueAssignment;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.netty.NettyClientConfig;
@@ -82,12 +80,14 @@
 import org.apache.rocketmq.remoting.protocol.route.BrokerData;
 import org.apache.rocketmq.remoting.protocol.route.QueueData;
 import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 import static org.apache.rocketmq.remoting.rpc.ClientMetadata.topicRouteData2EndpointsForStaticTopic;
 
 public class MQClientInstance {
     private final static long LOCK_TIMEOUT_MILLIS = 3000;
-    private final static InternalLogger log = ClientLogger.getLog();
+    private final static Logger log = LoggerFactory.getLogger(MQClientInstance.class);
     private final ClientConfig clientConfig;
     private final String clientId;
     private final long bootTimestamp = System.currentTimeMillis();

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -51,7 +51,6 @@
 import org.apache.rocketmq.client.impl.MQClientManager;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
 import org.apache.rocketmq.client.latency.MQFaultStrategy;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
 import org.apache.rocketmq.client.producer.LocalTransactionExecuter;
 import org.apache.rocketmq.client.producer.LocalTransactionState;
@@ -85,7 +84,6 @@
 import org.apache.rocketmq.common.message.MessageType;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.utils.CorrelationIdUtil;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingConnectException;
 import org.apache.rocketmq.remoting.exception.RemotingException;
@@ -95,10 +93,12 @@
 import org.apache.rocketmq.remoting.protocol.header.CheckTransactionStateRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class DefaultMQProducerImpl implements MQProducerInner {
 
-    private final InternalLogger log = ClientLogger.getLog();
+    private final Logger log = LoggerFactory.getLogger(DefaultMQProducerImpl.class);
     private final Random random = new Random();
     private final DefaultMQProducer defaultMQProducer;
     private final ConcurrentMap<String/* topic */, TopicPublishInfo> topicPublishInfoTable =

File: client/src/main/java/org/apache/rocketmq/client/latency/MQFaultStrategy.java
Patch:
@@ -18,12 +18,12 @@
 package org.apache.rocketmq.client.latency;
 
 import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class MQFaultStrategy {
-    private final static InternalLogger log = ClientLogger.getLog();
+    private final static Logger log = LoggerFactory.getLogger(MQFaultStrategy.class);
     private final LatencyFaultTolerance<String> latencyFaultTolerance = new LatencyFaultToleranceImpl();
 
     private boolean sendLatencyFaultEnable = false;

File: client/src/main/java/org/apache/rocketmq/client/producer/RequestFutureHolder.java
Patch:
@@ -31,12 +31,12 @@
 import org.apache.rocketmq.client.common.ClientErrorCode;
 import org.apache.rocketmq.client.exception.RequestTimeoutException;
 import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
-import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class RequestFutureHolder {
-    private static InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(RequestFutureHolder.class);
     private static final RequestFutureHolder INSTANCE = new RequestFutureHolder();
     private ConcurrentHashMap<String, RequestResponseFuture> requestFutureTable = new ConcurrentHashMap<>();
     private final Set<DefaultMQProducerImpl> producerSet = new HashSet<>();

File: client/src/main/java/org/apache/rocketmq/client/stat/ConsumerStatsManager.java
Patch:
@@ -18,14 +18,14 @@
 package org.apache.rocketmq.client.stat;
 
 import java.util.concurrent.ScheduledExecutorService;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.stats.StatsItemSet;
 import org.apache.rocketmq.common.stats.StatsSnapshot;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.protocol.body.ConsumeStatus;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class ConsumerStatsManager {
-    private static final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(ConsumerStatsManager.class);
 
     private static final String TOPIC_AND_GROUP_CONSUME_OK_TPS = "CONSUME_OK_TPS";
     private static final String TOPIC_AND_GROUP_CONSUME_FAILED_TPS = "CONSUME_FAILED_TPS";

File: common/src/main/java/org/apache/rocketmq/common/AbstractBrokerRunnable.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.rocketmq.common;
 
-import org.apache.rocketmq.logging.InnerLoggerFactory;
-
 public abstract class AbstractBrokerRunnable implements Runnable {
     protected final BrokerIdentity brokerIdentity;
 
@@ -35,7 +33,7 @@ public AbstractBrokerRunnable(BrokerIdentity brokerIdentity) {
     public void run() {
         if (brokerIdentity.isInBrokerContainer()) {
             // set threadlocal broker identity to forward logging to corresponding broker
-            InnerLoggerFactory.BROKER_IDENTITY.set(brokerIdentity.getCanonicalName());
+//            InnerLoggerFactory.BROKER_IDENTITY.set(brokerIdentity.getCanonicalName());
         }
         run2();
     }

File: common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
Patch:
@@ -23,11 +23,11 @@
 import org.apache.rocketmq.common.message.MessageRequestMode;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class BrokerConfig extends BrokerIdentity {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private String brokerConfigPath = null;
 

File: common/src/main/java/org/apache/rocketmq/common/ConfigManager.java
Patch:
@@ -19,11 +19,11 @@
 import java.io.IOException;
 import java.util.Map;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public abstract class ConfigManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     public abstract String encode();
 

File: common/src/main/java/org/apache/rocketmq/common/ServiceThread.java
Patch:
@@ -19,11 +19,11 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public abstract class ServiceThread implements Runnable {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private static final long JOIN_TIME = 90 * 1000;
 

File: common/src/main/java/org/apache/rocketmq/common/ThreadFactoryImpl.java
Patch:
@@ -20,12 +20,12 @@
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.atomic.AtomicLong;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class ThreadFactoryImpl implements ThreadFactory {
 
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private final AtomicLong threadIndex = new AtomicLong(0);
     private final String threadNamePrefix;

File: common/src/main/java/org/apache/rocketmq/common/compression/Lz4Compressor.java
Patch:
@@ -23,11 +23,11 @@
 import net.jpountz.lz4.LZ4FrameInputStream;
 import net.jpountz.lz4.LZ4FrameOutputStream;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class Lz4Compressor implements Compressor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     @Override
     public byte[] compress(byte[] src, int level) throws IOException {

File: common/src/main/java/org/apache/rocketmq/common/compression/ZlibCompressor.java
Patch:
@@ -23,11 +23,11 @@
 import java.util.zip.DeflaterOutputStream;
 import java.util.zip.InflaterInputStream;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class ZlibCompressor implements Compressor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     @Override
     public byte[] compress(byte[] src, int level) throws IOException {

File: common/src/main/java/org/apache/rocketmq/common/compression/ZstdCompressor.java
Patch:
@@ -23,11 +23,11 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class ZstdCompressor implements Compressor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     @Override
     public byte[] compress(byte[] src, int level) throws IOException {

File: common/src/main/java/org/apache/rocketmq/common/namesrv/DefaultTopAddressing.java
Patch:
@@ -28,12 +28,12 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.help.FAQUrl;
 import org.apache.rocketmq.common.utils.HttpTinyClient;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class DefaultTopAddressing implements TopAddressing {
 
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private String nsAddr;
     private String wsAddr;

File: common/src/main/java/org/apache/rocketmq/common/queue/ConcurrentTreeMap.java
Patch:
@@ -22,14 +22,14 @@
 import java.util.TreeMap;
 import java.util.concurrent.locks.ReentrantLock;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 /**
  * thread safe
  */
 public class ConcurrentTreeMap<K, V> {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final ReentrantLock lock;
     private TreeMap<K, V> tree;
     private RoundQueue<K> roundQueue;

File: common/src/main/java/org/apache/rocketmq/common/stats/MomentStatsItem.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 import org.apache.rocketmq.common.UtilAll;
-import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
 
 public class MomentStatsItem {
 
@@ -30,10 +30,10 @@ public class MomentStatsItem {
     private final String statsName;
     private final String statsKey;
     private final ScheduledExecutorService scheduledExecutorService;
-    private final InternalLogger log;
+    private final Logger log;
 
     public MomentStatsItem(String statsName, String statsKey,
-        ScheduledExecutorService scheduledExecutorService, InternalLogger log) {
+        ScheduledExecutorService scheduledExecutorService, Logger log) {
         this.statsName = statsName;
         this.statsKey = statsKey;
         this.scheduledExecutorService = scheduledExecutorService;

File: common/src/main/java/org/apache/rocketmq/common/stats/MomentStatsItemSet.java
Patch:
@@ -24,16 +24,16 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.common.UtilAll;
-import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
 
 public class MomentStatsItemSet {
     private final ConcurrentMap<String/* key */, MomentStatsItem> statsItemTable =
         new ConcurrentHashMap<>(128);
     private final String statsName;
     private final ScheduledExecutorService scheduledExecutorService;
-    private final InternalLogger log;
+    private final Logger log;
 
-    public MomentStatsItemSet(String statsName, ScheduledExecutorService scheduledExecutorService, InternalLogger log) {
+    public MomentStatsItemSet(String statsName, ScheduledExecutorService scheduledExecutorService, Logger log) {
         this.statsName = statsName;
         this.scheduledExecutorService = scheduledExecutorService;
         this.log = log;

File: common/src/main/java/org/apache/rocketmq/common/utils/NetworkUtil.java
Patch:
@@ -29,13 +29,13 @@
 import java.util.ArrayList;
 import java.util.Enumeration;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class NetworkUtil {
     public static final String OS_NAME = System.getProperty("os.name");
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
     private static boolean isLinuxPlatform = false;
     private static boolean isWindowsPlatform = false;
 

File: common/src/main/java/org/apache/rocketmq/common/utils/ThreadUtils.java
Patch:
@@ -26,11 +26,11 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public final class ThreadUtils {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.TOOLS_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.TOOLS_LOGGER_NAME);
 
     public static ExecutorService newThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime,
         TimeUnit unit, BlockingQueue<Runnable> workQueue, String processName, boolean isDaemon) {

File: container/src/main/java/org/apache/rocketmq/container/BrokerContainer.java
Patch:
@@ -39,8 +39,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.container.logback.BrokerLogbackConfigurator;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.Configuration;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.RemotingServer;
@@ -51,7 +51,7 @@
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 
 public class BrokerContainer implements IBrokerContainer {
-    private static final InternalLogger LOG = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOG = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final ScheduledExecutorService scheduledExecutorService = new ScheduledThreadPoolExecutor(1,
         new BasicThreadFactory.Builder()

File: container/src/main/java/org/apache/rocketmq/container/BrokerContainerProcessor.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.rocketmq.common.BrokerIdentity;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -41,7 +41,7 @@
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 
 public class BrokerContainerProcessor implements NettyRequestProcessor {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerContainer brokerContainer;
     private List<BrokerBootHook> brokerBootHookList;
 

File: controller/src/main/java/org/apache/rocketmq/controller/BrokerHousekeepingService.java
Patch:
@@ -18,12 +18,12 @@
 
 import io.netty.channel.Channel;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
 
 public class BrokerHousekeepingService implements ChannelEventListener {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
     private final ControllerManager controllerManager;
 
     public BrokerHousekeepingService(ControllerManager controllerManager) {

File: controller/src/main/java/org/apache/rocketmq/controller/ControllerManager.java
Patch:
@@ -34,8 +34,8 @@
 import org.apache.rocketmq.controller.impl.DLedgerController;
 import org.apache.rocketmq.controller.impl.DefaultBrokerHeartbeatManager;
 import org.apache.rocketmq.controller.processor.ControllerRequestProcessor;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.Configuration;
 import org.apache.rocketmq.remoting.RemotingClient;
 import org.apache.rocketmq.remoting.RemotingServer;
@@ -50,7 +50,7 @@
 import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;
 
 public class ControllerManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
 
     private final ControllerConfig controllerConfig;
     private final NettyServerConfig nettyServerConfig;

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DLedgerController.java
Patch:
@@ -47,8 +47,8 @@
 import org.apache.rocketmq.controller.impl.event.EventMessage;
 import org.apache.rocketmq.controller.impl.event.EventSerializer;
 import org.apache.rocketmq.controller.impl.manager.ReplicasInfoManager;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
 import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.RemotingServer;
@@ -69,7 +69,7 @@
  */
 public class DLedgerController implements Controller {
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
     private final DLedgerServer dLedgerServer;
     private final ControllerConfig controllerConfig;
     private final DLedgerConfig dLedgerConfig;

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DLedgerControllerStateMachine.java
Patch:
@@ -26,14 +26,14 @@
 import org.apache.rocketmq.controller.impl.event.EventMessage;
 import org.apache.rocketmq.controller.impl.event.EventSerializer;
 import org.apache.rocketmq.controller.impl.manager.ReplicasInfoManager;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 /**
  * The state machine implementation of the dledger controller
  */
 public class DLedgerControllerStateMachine implements StateMachine {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
     private final ReplicasInfoManager replicasInfoManager;
     private final EventSerializer eventSerializer;
     private final String dLedgerId;

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DefaultBrokerHeartbeatManager.java
Patch:
@@ -33,12 +33,12 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.controller.BrokerHeartbeatManager;
 import org.apache.rocketmq.controller.BrokerLiveInfo;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 
 public class DefaultBrokerHeartbeatManager implements BrokerHeartbeatManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
     private static final long DEFAULT_BROKER_CHANNEL_EXPIRED_TIME = 1000 * 10;
     private final ScheduledExecutorService scheduledService = Executors.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("DefaultBrokerHeartbeatManager_scheduledService_"));
     private final ExecutorService executor = Executors.newFixedThreadPool(2, new ThreadFactoryImpl("DefaultBrokerHeartbeatManager_executorService_"));

File: controller/src/main/java/org/apache/rocketmq/controller/impl/manager/ReplicasInfoManager.java
Patch:
@@ -37,8 +37,8 @@
 import org.apache.rocketmq.controller.impl.event.ElectMasterEvent;
 import org.apache.rocketmq.controller.impl.event.EventMessage;
 import org.apache.rocketmq.controller.impl.event.EventType;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.ResponseCode;
 import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
 import org.apache.rocketmq.remoting.protocol.body.InSyncStateData;
@@ -59,7 +59,7 @@
  * be called sequentially
  */
 public class ReplicasInfoManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
     private final ControllerConfig controllerConfig;
     private final Map<String/* brokerName */, BrokerInfo> replicaInfoTable;
     private final Map<String/* brokerName */, SyncStateInfo> syncStateSetInfoTable;

File: controller/src/main/java/org/apache/rocketmq/controller/processor/ControllerRequestProcessor.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.controller.BrokerHeartbeatManager;
 import org.apache.rocketmq.controller.ControllerManager;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
@@ -59,7 +59,7 @@
  * Processor for controller request
  */
 public class ControllerRequestProcessor implements NettyRequestProcessor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
     private static final int WAIT_TIMEOUT_OUT = 5;
     private final ControllerManager controllerManager;
     private final BrokerHeartbeatManager heartbeatManager;

File: example/src/main/java/org/apache/rocketmq/example/rpc/AsyncRequestProducer.java
Patch:
@@ -18,15 +18,15 @@
 package org.apache.rocketmq.example.rpc;
 
 import org.apache.rocketmq.client.exception.MQClientException;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
 import org.apache.rocketmq.client.producer.RequestCallback;
 import org.apache.rocketmq.common.message.Message;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class AsyncRequestProducer {
-    private static final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(AsyncRequestProducer.class);
 
     public static void main(String[] args) throws MQClientException, InterruptedException {
         String producerGroup = "please_rename_unique_group_name";

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/kvconfig/KVConfigManager.java
Patch:
@@ -23,13 +23,13 @@
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.remoting.protocol.body.KVTable;
 
 public class KVConfigManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
 
     private final NamesrvController namesrvController;
 

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/ClientRequestProcessor.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.help.FAQUrl;
 import org.apache.rocketmq.common.namesrv.NamesrvUtil;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -37,7 +37,7 @@
 
 public class ClientRequestProcessor implements NettyRequestProcessor {
 
-    private static InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
 
     protected NamesrvController namesrvController;
     private long startupTimeMillis;

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/ClusterTestRequestProcessor.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.help.FAQUrl;
 import org.apache.rocketmq.common.namesrv.NamesrvUtil;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
@@ -32,7 +32,7 @@
 import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
 
 public class ClusterTestRequestProcessor extends ClientRequestProcessor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
     private final DefaultMQAdminExt adminExt;
     private final String productEnvName;
 

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/DefaultRequestProcessor.java
Patch:
@@ -28,8 +28,8 @@
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.namesrv.NamesrvUtil;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
@@ -68,7 +68,7 @@
 import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
 
 public class DefaultRequestProcessor implements NettyRequestProcessor {
-    private static InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
 
     protected final NamesrvController namesrvController;
 

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/BatchUnregistrationService.java
Patch:
@@ -24,8 +24,8 @@
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.namesrv.NamesrvConfig;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.header.namesrv.UnRegisterBrokerRequestHeader;
 
 /**
@@ -35,7 +35,7 @@
 public class BatchUnregistrationService extends ServiceThread {
     private final RouteInfoManager routeInfoManager;
     private BlockingQueue<UnRegisterBrokerRequestHeader> unregistrationQueue;
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
 
     public BatchUnregistrationService(RouteInfoManager routeInfoManager, NamesrvConfig namesrvConfig) {
         this.routeInfoManager = routeInfoManager;

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java
Patch:
@@ -42,8 +42,8 @@
 import org.apache.rocketmq.common.sysflag.TopicSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.ConcurrentHashMapUtils;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingConnectException;
@@ -67,7 +67,7 @@
 import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingInfo;
 
 public class RouteInfoManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
     private final static long DEFAULT_BROKER_CHANNEL_EXPIRED_TIME = 1000 * 60 * 2;
     private final ReadWriteLock lock = new ReentrantReadWriteLock();
     private final Map<String/* topic */, Map<String, QueueData>> topicQueueTable;

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/processor/RequestProcessorTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.namesrv.NamesrvConfig;
-import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.namesrv.routeinfo.RouteInfoManager;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
@@ -67,7 +67,7 @@ public class RequestProcessorTest {
 
     private RouteInfoManager routeInfoManager;
 
-    private InternalLogger logger;
+    private Logger logger;
 
     @Before
     public void init() throws Exception {
@@ -88,7 +88,7 @@ public void init() throws Exception {
 
         registerRouteInfoManager();
 
-        logger = mock(InternalLogger.class);
+        logger = mock(Logger.class);
         setFinalStatic(DefaultRequestProcessor.class.getDeclaredField("log"), logger);
     }
 

File: openmessaging/src/main/java/io/openmessaging/rocketmq/producer/AbstractOMSProducer.java
Patch:
@@ -31,9 +31,7 @@
 import io.openmessaging.rocketmq.utils.BeanUtils;
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.exception.RemotingConnectException;
 import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
 import org.apache.rocketmq.remoting.protocol.LanguageCode;
@@ -42,7 +40,6 @@
 import static io.openmessaging.rocketmq.utils.OMSUtil.buildInstanceName;
 
 abstract class AbstractOMSProducer implements ServiceLifecycle, MessageFactory {
-    final static InternalLogger log = ClientLogger.getLog();
     final KeyValue properties;
     final DefaultMQProducer rocketmqProducer;
     private boolean started = false;

File: openmessaging/src/main/java/io/openmessaging/rocketmq/promise/DefaultPromise.java
Patch:
@@ -19,14 +19,14 @@
 import io.openmessaging.Promise;
 import io.openmessaging.FutureListener;
 import io.openmessaging.exception.OMSRuntimeException;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 import java.util.ArrayList;
 import java.util.List;
 
 public class DefaultPromise<V> implements Promise<V> {
-    private static final InternalLogger LOG = InternalLoggerFactory.getLogger(DefaultPromise.class);
+    private static final Logger LOG = LoggerFactory.getLogger(DefaultPromise.class);
     private final Object lock = new Object();
     private volatile FutureState state = FutureState.DOING;
     private V result = null;

File: openmessaging/src/main/java/io/openmessaging/rocketmq/utils/BeanUtils.java
Patch:
@@ -25,11 +25,11 @@
 import java.util.Properties;
 import java.util.Set;
 import org.apache.commons.lang3.StringUtils;
-import org.apache.rocketmq.client.log.ClientLogger;
-import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public final class BeanUtils {
-    static InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(BeanUtils.class);
 
     /**
      * Maps primitive {@code Class}es to their corresponding wrapper {@code Class}.

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/Configuration.java
Patch:
@@ -28,8 +28,8 @@
 import java.util.concurrent.atomic.AtomicReference;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class Configuration {
     private final static Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java
Patch:
@@ -32,8 +32,8 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.proxy.ProxyMode;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class ProxyConfig implements ConfigFile {
     private final static Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServer.java
Patch:
@@ -19,12 +19,12 @@
 
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 
 public class GrpcServer implements StartAndShutdown {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private final io.grpc.Server server;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServerBuilder.java
Patch:
@@ -40,8 +40,8 @@
 import org.apache.rocketmq.acl.AccessValidator;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.utils.ServiceProvider;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.grpc.interceptor.AuthenticationInterceptor;
@@ -50,7 +50,7 @@
 import org.apache.rocketmq.proxy.grpc.interceptor.HeaderInterceptor;
 
 public class GrpcServerBuilder {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     protected NettyServerBuilder serverBuilder;
 
     public static GrpcServerBuilder newBuilder(ThreadPoolExecutor executor, int port) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/GlobalExceptionInterceptor.java
Patch:
@@ -26,11 +26,11 @@
 import io.grpc.Status;
 import io.grpc.StatusRuntimeException;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class GlobalExceptionInterceptor implements ServerInterceptor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     @Override
     public <R, W> ServerCall.Listener<R> interceptCall(

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/AbstractMessingActivity.java
Patch:
@@ -18,15 +18,15 @@
 
 import apache.rocketmq.v2.Resource;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcValidator;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
 
 public abstract class AbstractMessingActivity {
-    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    protected static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     protected final MessagingProcessor messagingProcessor;
     protected final GrpcClientSettingsManager grpcClientSettingsManager;
     protected final GrpcChannelManager grpcChannelManager;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/DefaultGrpcMessingActivity.java
Patch:
@@ -40,8 +40,8 @@
 import io.grpc.stub.StreamObserver;
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
@@ -58,7 +58,7 @@
 import org.apache.rocketmq.proxy.processor.ReceiptHandleProcessor;
 
 public class DefaultGrpcMessingActivity extends AbstractStartAndShutdown implements GrpcMessingActivity {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected GrpcClientSettingsManager grpcClientSettingsManager;
     protected GrpcChannelManager grpcChannelManager;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplication.java
Patch:
@@ -61,8 +61,8 @@
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseWriter;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class GrpcMessagingApplication extends MessagingServiceGrpc.MessagingServiceImplBase implements StartAndShutdown {
     private final static Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/channel/GrpcClientChannel.java
Patch:
@@ -30,8 +30,8 @@
 import java.util.concurrent.atomic.AtomicReference;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcConverter;
 import org.apache.rocketmq.proxy.service.relay.ProxyChannel;
@@ -46,7 +46,7 @@
 import org.apache.rocketmq.remoting.protocol.header.GetConsumerRunningInfoRequestHeader;
 
 public class GrpcClientChannel extends ProxyChannel {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private final GrpcChannelManager grpcChannelManager;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/client/ClientActivity.java
Patch:
@@ -46,8 +46,8 @@
 import org.apache.rocketmq.common.attribute.TopicMessageType;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.AbstractMessingActivity;
 import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
@@ -70,7 +70,7 @@
 
 public class ClientActivity extends AbstractMessingActivity {
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     public ClientActivity(MessagingProcessor messagingProcessor,
         GrpcClientSettingsManager grpcClientSettingsManager,

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcConverter.java
Patch:
@@ -43,12 +43,12 @@
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.utils.BinaryUtil;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 
 public class GrpcConverter {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected static final Object INSTANCE_CREATE_LOCK = new Object();
     protected static volatile GrpcConverter instance;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcValidator.java
Patch:
@@ -26,12 +26,12 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 
 public class GrpcValidator {
-    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    protected static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected static final Object INSTANCE_CREATE_LOCK = new Object();
     protected static volatile GrpcValidator instance;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/ResponseBuilder.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.utils.ExceptionUtils;
 import org.apache.rocketmq.proxy.service.route.TopicRouteHelper;
@@ -35,7 +35,7 @@
 
 public class ResponseBuilder {
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     protected static final Map<Integer, Code> RESPONSE_CODE_MAPPING = new ConcurrentHashMap<>();
 
     protected static final Object INSTANCE_CREATE_LOCK = new Object();

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/ResponseWriter.java
Patch:
@@ -22,11 +22,11 @@
 import io.grpc.stub.ServerCallStreamObserver;
 import io.grpc.stub.StreamObserver;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class ResponseWriter {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected static final Object INSTANCE_CREATE_LOCK = new Object();
     protected static volatile ResponseWriter instance;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageResponseStreamWriter.java
Patch:
@@ -31,16 +31,16 @@
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseWriter;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
 
 public class ReceiveMessageResponseStreamWriter {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     protected static final long NACK_INVISIBLE_TIME = Duration.ofSeconds(1).toMillis();
 
     protected final MessagingProcessor messagingProcessor;

File: proxy/src/main/java/org/apache/rocketmq/proxy/metrics/ProxyMetricsManager.java
Patch:
@@ -42,8 +42,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.AGGREGATION_DELTA;
 import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_AGGREGATION;

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ConsumerProcessor.java
Patch:
@@ -37,8 +37,8 @@
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
@@ -59,7 +59,7 @@
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
 public class ConsumerProcessor extends AbstractProcessor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private final ExecutorService executor;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ProducerProcessor.java
Patch:
@@ -33,8 +33,8 @@
 import org.apache.rocketmq.common.message.MessageId;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
@@ -51,7 +51,7 @@
 import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
 
 public class ProducerProcessor extends AbstractProcessor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     private final ExecutorService executor;
     private final TopicMessageTypeValidator topicMessageTypeValidator;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessor.java
Patch:
@@ -52,8 +52,8 @@
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.remoting.protocol.subscription.RetryPolicy;
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class ReceiptHandleProcessor extends AbstractStartAndShutdown {
     protected final static Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/ClusterServiceManager.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.rocketmq.broker.client.ProducerGroupEvent;
 import org.apache.rocketmq.broker.client.ProducerManager;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
@@ -48,7 +48,7 @@
 import org.apache.rocketmq.remoting.RPCHook;
 
 public class ClusterServiceManager extends AbstractStartAndShutdown implements ServiceManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected ClusterTransactionService clusterTransactionService;
     protected ProducerManager producerManager;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/channel/ChannelManager.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.utils.ConcurrentHashMapUtils;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class ChannelManager {
     private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/channel/SimpleChannel.java
Patch:
@@ -32,8 +32,8 @@
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 /**
  * SimpleChannel is used to handle writeAndFlush situation in processor
@@ -42,7 +42,7 @@
  * @see io.netty.channel.Channel#writeAndFlush
  */
 public class SimpleChannel extends AbstractChannel {
-    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    protected static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected final String remoteAddress;
     protected final String localAddress;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/message/LocalMessageService.java
Patch:
@@ -71,8 +71,8 @@
 import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.SendMessageResponseHeader;
 import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class LocalMessageService implements MessageService {
     private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/metadata/ClusterMetadataService.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.common.attribute.TopicMessageType;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.AbstractCacheLoader;
 import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
@@ -39,7 +39,7 @@
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public class ClusterMetadataService extends AbstractStartAndShutdown implements MetadataService {
-    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    protected static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     private static final long DEFAULT_TIMEOUT = 3000;
 
     private final TopicRouteService topicRouteService;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/mqclient/MQClientAPIExt.java
Patch:
@@ -44,8 +44,8 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyClientConfig;
@@ -77,7 +77,7 @@
 import org.apache.rocketmq.remoting.protocol.heartbeat.HeartbeatData;
 
 public class MQClientAPIExt extends MQClientAPIImpl {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private final ClientConfig clientConfig;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/mqclient/ProxyClientRemotingProcessor.java
Patch:
@@ -26,16 +26,16 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.remoting.protocol.RequestCode;
 import org.apache.rocketmq.remoting.protocol.header.CheckTransactionStateRequestHeader;
 
 public class ProxyClientRemotingProcessor extends ClientRemotingProcessor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     private final ProducerManager producerManager;
 
     public ProxyClientRemotingProcessor(ProducerManager producerManager) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/relay/ProxyChannel.java
Patch:
@@ -34,8 +34,8 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.service.channel.SimpleChannel;
 import org.apache.rocketmq.proxy.service.transaction.TransactionData;
@@ -48,7 +48,7 @@
 import org.apache.rocketmq.remoting.protocol.header.GetConsumerRunningInfoRequestHeader;
 
 public abstract class ProxyChannel extends SimpleChannel {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     protected final SocketAddress remoteSocketAddress;
     protected final SocketAddress localSocketAddress;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/TopicRouteService.java
Patch:
@@ -30,8 +30,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.AbstractCacheLoader;
 import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.common.Address;
@@ -44,7 +44,7 @@
 import org.checkerframework.checker.nullness.qual.Nullable;
 
 public abstract class TopicRouteService extends AbstractStartAndShutdown {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private final MQClientAPIFactory mqClientAPIFactory;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/ClusterTransactionService.java
Patch:
@@ -34,8 +34,8 @@
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
@@ -47,7 +47,7 @@
 import org.apache.rocketmq.remoting.protocol.route.BrokerData;
 
 public class ClusterTransactionService extends AbstractTransactionService {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private static final String TRANS_HEARTBEAT_CLIENT_ID = "rmq-proxy-producer-client";
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/TransactionDataManager.java
Patch:
@@ -29,13 +29,13 @@
 import java.util.concurrent.atomic.AtomicReference;
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 
 public class TransactionDataManager implements StartAndShutdown {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected final AtomicLong maxTransactionDataExpireTime = new AtomicLong(System.currentTimeMillis());
     protected final Map<String /* producerGroup@transactionId */, NavigableSet<TransactionData>> transactionIdDataMap = new ConcurrentHashMap<>();

File: proxy/src/test/java/org/apache/rocketmq/proxy/common/ReceiptHandleGroupTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
 import org.apache.rocketmq.common.message.MessageClientIDSetter;
 import org.apache.rocketmq.proxy.common.utils.FutureUtils;
-import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
+import org.apache.rocketmq.proxy.config.InitConfigTest;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -37,7 +37,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
-public class ReceiptHandleGroupTest extends InitConfigAndLoggerTest {
+public class ReceiptHandleGroupTest extends InitConfigTest {
 
     private static final String TOPIC = "topic";
     private static final String GROUP = "group";

File: proxy/src/test/java/org/apache/rocketmq/proxy/config/ConfigurationManagerTest.java
Patch:
@@ -22,7 +22,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class ConfigurationManagerTest extends InitConfigAndLoggerTest {
+public class ConfigurationManagerTest extends InitConfigTest {
 
     @Test
     public void testInitEnv() {

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/AbstractMessingActivityTest.java
Patch:
@@ -20,7 +20,7 @@
 import apache.rocketmq.v2.Resource;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
+import org.apache.rocketmq.proxy.config.InitConfigTest;
 import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcProxyException;
@@ -30,7 +30,7 @@
 
 import static org.junit.Assert.assertThrows;
 
-public class AbstractMessingActivityTest extends InitConfigAndLoggerTest {
+public class AbstractMessingActivityTest extends InitConfigTest {
 
     public static class MockMessingActivity extends AbstractMessingActivity {
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/BaseActivityTest.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.UUID;
 import org.apache.rocketmq.proxy.common.ContextVariable;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
+import org.apache.rocketmq.proxy.config.InitConfigTest;
 import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
 import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
@@ -41,7 +41,7 @@
 
 @Ignore
 @RunWith(MockitoJUnitRunner.Silent.class)
-public class BaseActivityTest extends InitConfigAndLoggerTest {
+public class BaseActivityTest extends InitConfigTest {
     protected static final Random RANDOM = new Random();
     protected MessagingProcessor messagingProcessor;
     protected GrpcClientSettingsManager grpcClientSettingsManager;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplicationTest.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
+import org.apache.rocketmq.proxy.config.InitConfigTest;
 import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
 import org.junit.Assert;
@@ -47,7 +47,7 @@
 import static org.junit.Assert.assertEquals;
 
 @RunWith(MockitoJUnitRunner.class)
-public class GrpcMessagingApplicationTest extends InitConfigAndLoggerTest {
+public class GrpcMessagingApplicationTest extends InitConfigTest {
     protected static final String REMOTE_ADDR = "192.168.0.1:8080";
     protected static final String LOCAL_ADDR = "127.0.0.1:8080";
     protected static final String CLIENT_ID = "client-id" + UUID.randomUUID();

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/BaseProcessorTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
+import org.apache.rocketmq.proxy.config.InitConfigTest;
 import org.apache.rocketmq.proxy.service.ServiceManager;
 import org.apache.rocketmq.proxy.service.message.MessageService;
 import org.apache.rocketmq.proxy.service.metadata.MetadataService;
@@ -45,7 +45,7 @@
 
 @Ignore
 @RunWith(MockitoJUnitRunner.Silent.class)
-public class BaseProcessorTest extends InitConfigAndLoggerTest {
+public class BaseProcessorTest extends InitConfigTest {
     protected static final Random RANDOM = new Random();
 
     @Mock

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/BaseServiceTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.HashMap;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.MixAll;
-import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
+import org.apache.rocketmq.proxy.config.InitConfigTest;
 import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIExt;
 import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.proxy.service.route.MessageQueueView;
@@ -41,7 +41,7 @@
 
 @Ignore
 @RunWith(MockitoJUnitRunner.Silent.class)
-public class BaseServiceTest extends InitConfigAndLoggerTest {
+public class BaseServiceTest extends InitConfigTest {
 
     protected TopicRouteService topicRouteService;
     protected MQClientAPIFactory mqClientAPIFactory;

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/message/LocalMessageServiceTest.java
Patch:
@@ -51,7 +51,7 @@
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
-import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
+import org.apache.rocketmq.proxy.config.InitConfigTest;
 import org.apache.rocketmq.proxy.service.channel.ChannelManager;
 import org.apache.rocketmq.proxy.service.channel.SimpleChannelHandlerContext;
 import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
@@ -80,7 +80,7 @@
 import static org.assertj.core.api.Assertions.catchThrowableOfType;
 
 @RunWith(MockitoJUnitRunner.class)
-public class LocalMessageServiceTest extends InitConfigAndLoggerTest {
+public class LocalMessageServiceTest extends InitConfigTest {
     private LocalMessageService localMessageService;
     @Mock
     private SendMessageProcessor sendMessageProcessorMock;

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/transaction/AbstractTransactionServiceTest.java
Patch:
@@ -24,15 +24,15 @@
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
+import org.apache.rocketmq.proxy.config.InitConfigTest;
 import org.junit.Before;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 
-public class AbstractTransactionServiceTest extends InitConfigAndLoggerTest {
+public class AbstractTransactionServiceTest extends InitConfigTest {
 
     private static final String BROKER_NAME = "mockBroker";
     private static final String PRODUCER_GROUP = "producerGroup";

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/transaction/TransactionDataManagerTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.commons.lang3.time.StopWatch;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.message.MessageClientIDSetter;
-import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
+import org.apache.rocketmq.proxy.config.InitConfigTest;
 import org.junit.After;
 import org.junit.Assume;
 import org.junit.Before;
@@ -34,7 +34,7 @@
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 
-public class TransactionDataManagerTest extends InitConfigAndLoggerTest {
+public class TransactionDataManagerTest extends InitConfigTest {
     private static final String PRODUCER_GROUP = "producerGroup";
     private static final Random RANDOM = new Random();
     private TransactionDataManager transactionDataManager;

File: remoting/src/main/java/org/apache/rocketmq/remoting/common/RemotingHelper.java
Patch:
@@ -27,8 +27,8 @@
 import java.nio.ByteBuffer;
 import java.nio.channels.SocketChannel;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.exception.RemotingConnectException;
 import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
@@ -42,7 +42,7 @@ public class RemotingHelper {
     public static final String DEFAULT_CHARSET = "UTF-8";
     public static final String DEFAULT_CIDR_ALL = "0.0.0.0/0";
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(ROCKETMQ_REMOTING);
+    private static final Logger log = LoggerFactory.getLogger(ROCKETMQ_REMOTING);
     private static final AttributeKey<String> REMOTE_ADDR_KEY = AttributeKey.valueOf("RemoteAddr");
 
     public static SocketAddress string2SocketAddress(final String addr) {

File: remoting/src/main/java/org/apache/rocketmq/remoting/common/ServiceThread.java
Patch:
@@ -17,14 +17,14 @@
 package org.apache.rocketmq.remoting.common;
 
 
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 /**
  * Base class for background thread
  */
 public abstract class ServiceThread implements Runnable {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    private static final Logger log = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
 
     private static final long JOIN_TIME = 90 * 1000;
     protected final Thread thread;

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyDecoder.java
Patch:
@@ -20,13 +20,13 @@
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.LengthFieldBasedFrameDecoder;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public class NettyDecoder extends LengthFieldBasedFrameDecoder {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    private static final Logger log = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
 
     private static final int FRAME_MAX_LENGTH =
         Integer.parseInt(System.getProperty("com.rocketmq.remoting.frameMaxLength", "16777216"));

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyEncoder.java
Patch:
@@ -20,14 +20,14 @@
 import io.netty.channel.ChannelHandler;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToByteEncoder;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 @ChannelHandler.Sharable
 public class NettyEncoder extends MessageToByteEncoder<RemotingCommand> {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    private static final Logger log = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
 
     @Override
     public void encode(ChannelHandlerContext ctx, RemotingCommand remotingCommand, ByteBuf out)

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -42,8 +42,8 @@
 import org.apache.rocketmq.common.Pair;
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.UtilAll;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
 import org.apache.rocketmq.remoting.InvokeCallback;
 import org.apache.rocketmq.remoting.RPCHook;
@@ -69,7 +69,7 @@ public abstract class NettyRemotingAbstract {
     /**
      * Remoting logger instance.
      */
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    private static final Logger log = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
 
     /**
      * Semaphore to limit maximum number of on-going one-way requests, which protects system memory footprint.

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -69,8 +69,8 @@
 import java.util.concurrent.locks.ReentrantLock;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.Pair;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
 import org.apache.rocketmq.remoting.InvokeCallback;
 import org.apache.rocketmq.remoting.RemotingClient;
@@ -83,7 +83,7 @@
 import org.apache.rocketmq.remoting.proxy.SocksProxyConfig;
 
 public class NettyRemotingClient extends NettyRemotingAbstract implements RemotingClient {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    private static final Logger LOGGER = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
 
     private static final long LOCK_TIMEOUT_MILLIS = 3000;
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/TlsHelper.java
Patch:
@@ -31,8 +31,8 @@
 import java.security.cert.CertificateException;
 import java.util.Properties;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.TLS_CLIENT_AUTHSERVER;
 import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.TLS_CLIENT_CERTPATH;
@@ -73,7 +73,7 @@ public interface DecryptionStrategy {
         InputStream decryptPrivateKey(String privateKeyEncryptPath, boolean forClient) throws IOException;
     }
 
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    private static final Logger LOGGER = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
 
     private static DecryptionStrategy decryptionStrategy = new DecryptionStrategy() {
         @Override

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/MQProtosHelper.java
Patch:
@@ -18,13 +18,13 @@
 package org.apache.rocketmq.remoting.protocol;
 
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterBrokerRequestHeader;
 
 public class MQProtosHelper {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     public static boolean registerBrokerToNameServer(final String nsaddr, final String brokerAddr,
         final long timeoutMillis) {

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java
Patch:
@@ -32,8 +32,8 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicInteger;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
@@ -43,7 +43,7 @@ public class RemotingCommand {
     public static final String SERIALIZE_TYPE_PROPERTY = "rocketmq.serialize.type";
     public static final String SERIALIZE_TYPE_ENV = "ROCKETMQ_SERIALIZE_TYPE";
     public static final String REMOTING_VERSION_KEY = "rocketmq.remoting.version";
-    static final InternalLogger log = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    static final Logger log = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
     private static final int RPC_TYPE = 0; // 0, REQUEST_COMMAND
     private static final int RPC_ONEWAY = 1; // 0, RPC
     private static final Map<Class<? extends CommandCustomHeader>, Field[]> CLASS_HASH_MAP =

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/RegisterBrokerBody.java
Patch:
@@ -34,15 +34,15 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingInfo;
 
 public class RegisterBrokerBody extends RemotingSerializable {
 
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
     private TopicConfigAndMappingSerializeWrapper topicConfigSerializeWrapper = new TopicConfigAndMappingSerializeWrapper();
     private List<String> filterServerList = new ArrayList<>();
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/rpc/ClientMetadata.java
Patch:
@@ -27,16 +27,16 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
 import org.apache.rocketmq.remoting.protocol.route.BrokerData;
 import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
 import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingInfo;
 import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingUtils;
 
 public class ClientMetadata {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private final ConcurrentMap<String/* Topic */, TopicRouteData> topicRouteTable = new ConcurrentHashMap<>();
     private final ConcurrentMap<String/* Topic */, ConcurrentMap<MessageQueue, String/*brokerName*/>> topicEndPointsTable = new ConcurrentHashMap<>();

File: srvutil/src/main/java/org/apache/rocketmq/srvutil/AclFileWatchService.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import java.io.File;
 import java.io.IOException;
 import java.nio.file.Files;
@@ -34,7 +34,7 @@
 import java.util.Map;
 
 public class AclFileWatchService extends ServiceThread {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private final String aclPath;
     private int aclFilesNum;

File: srvutil/src/main/java/org/apache/rocketmq/srvutil/FileWatchService.java
Patch:
@@ -29,11 +29,11 @@
 import org.apache.rocketmq.common.LifecycleAwareServiceThread;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 public class FileWatchService extends LifecycleAwareServiceThread {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private final Map<String, String> currentHash = new HashMap<>();
     private final Listener listener;

File: srvutil/src/main/java/org/apache/rocketmq/srvutil/ShutdownHookThread.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.rocketmq.srvutil;
 
-import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
 
 import java.util.concurrent.Callable;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -29,7 +29,7 @@
 public class ShutdownHookThread extends Thread {
     private volatile boolean hasShutdown = false;
     private AtomicInteger shutdownTimes = new AtomicInteger(0);
-    private final InternalLogger log;
+    private final Logger log;
     private final Callable callback;
 
     /**
@@ -38,7 +38,7 @@ public class ShutdownHookThread extends Thread {
      * @param log The log instance is used in hook thread.
      * @param callback The call back function.
      */
-    public ShutdownHookThread(InternalLogger log, Callable callback) {
+    public ShutdownHookThread(Logger log, Callable callback) {
         super("ShutdownHook");
         this.log = log;
         this.callback = callback;

File: store/src/main/java/org/apache/rocketmq/store/AllocateMappedFileService.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.logfile.DefaultMappedFile;
 import org.apache.rocketmq.store.logfile.MappedFile;
@@ -37,7 +37,7 @@
  * Create MappedFile in advance
  */
 public class AllocateMappedFileService extends ServiceThread {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
     private static int waitTimeOut = 1000 * 5;
     private ConcurrentMap<String, AllocateRequest> requestTable =
         new ConcurrentHashMap<>();

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -45,8 +45,8 @@
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.QueueTypeUtils;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.MessageExtEncoder.PutMessageThreadLocal;
 import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.config.FlushDiskType;
@@ -60,7 +60,7 @@
 public class CommitLog implements Swappable {
     // Message's MAGIC CODE daa320a7
     public final static int MESSAGE_MAGIC_CODE = -626843481;
-    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    protected static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
     // End of file empty MAGIC CODE cbd43194
     public final static int BLANK_MAGIC_CODE = -875286124;
     protected final MappedFileQueue mappedFileQueue;

File: store/src/main/java/org/apache/rocketmq/store/ConsumeQueueExt.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.rocketmq.store;
 
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 
 import java.io.File;
 import java.nio.ByteBuffer;
@@ -38,7 +38,7 @@
  * <li>4. Pls keep this file small.</li>
  */
 public class ConsumeQueueExt {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
 
     private final MappedFileQueue mappedFileQueue;
     private final String topic;

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -71,8 +71,8 @@
 import org.apache.rocketmq.common.utils.CleanupPolicyUtils;
 import org.apache.rocketmq.common.utils.QueueTypeUtils;
 import org.apache.rocketmq.common.utils.ServiceProvider;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;
 import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.config.FlushDiskType;
@@ -99,7 +99,7 @@
 import org.apache.rocketmq.store.util.PerfCounter;
 
 public class DefaultMessageStore implements MessageStore {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
 
     public final PerfCounter.Ticks perfs = new PerfCounter.Ticks(LOGGER);
 

File: store/src/main/java/org/apache/rocketmq/store/FlushDiskWatcher.java
Patch:
@@ -21,12 +21,12 @@
 
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.CommitLog.GroupCommitRequest;
 
 public class FlushDiskWatcher extends ServiceThread {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
     private final LinkedBlockingQueue<GroupCommitRequest> commitRequests = new LinkedBlockingQueue<>();
 
     @Override

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DLedgerController.java
Patch:
@@ -112,7 +112,7 @@ public DLedgerController(final ControllerConfig controllerConfig,
         // Register statemachine and role handler.
         this.dLedgerServer = new DLedgerServer(dLedgerConfig, nettyServerConfig, nettyClientConfig, channelEventListener);
         this.dLedgerServer.registerStateMachine(this.statemachine);
-        this.dLedgerServer.getdLedgerLeaderElector().addRoleChangeHandler(this.roleHandler);
+        this.dLedgerServer.getDLedgerLeaderElector().addRoleChangeHandler(this.roleHandler);
     }
 
     @Override

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/DefaultRequestProcessor.java
Patch:
@@ -286,7 +286,8 @@ private RegisterBrokerBody extractRegisterBrokerBodyFromRequest(RemotingCommand
 
         if (request.getBody() != null) {
             try {
-                registerBrokerBody = RegisterBrokerBody.decode(request.getBody(), requestHeader.isCompressed());
+                Version brokerVersion = MQVersion.value2Version(request.getVersion());
+                registerBrokerBody = RegisterBrokerBody.decode(request.getBody(), requestHeader.isCompressed(), brokerVersion);
             } catch (Exception e) {
                 throw new RemotingCommandException("Failed to decode RegisterBrokerBody", e);
             }

File: remoting/src/test/java/org/apache/rocketmq/remoting/protocol/RegisterBrokerBodyTest.java
Patch:
@@ -20,6 +20,8 @@
 import java.io.IOException;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
+
+import org.apache.rocketmq.common.MQVersion;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.remoting.protocol.body.RegisterBrokerBody;
 import org.apache.rocketmq.remoting.protocol.body.TopicConfigAndMappingSerializeWrapper;
@@ -43,7 +45,7 @@ public void test_encode_decode() throws IOException {
 
         byte[] compareEncode = registerBrokerBody.encode(true);
         byte[] encode2 = registerBrokerBody.encode(false);
-        RegisterBrokerBody decodeRegisterBrokerBody = RegisterBrokerBody.decode(compareEncode, true);
+        RegisterBrokerBody decodeRegisterBrokerBody = RegisterBrokerBody.decode(compareEncode, true, MQVersion.Version.V5_0_0);
 
         assertEquals(registerBrokerBody.getTopicConfigSerializeWrapper().getTopicConfigTable().size(), decodeRegisterBrokerBody.getTopicConfigSerializeWrapper().getTopicConfigTable().size());
 

File: acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java
Patch:
@@ -22,13 +22,13 @@
 import javax.crypto.spec.SecretKeySpec;
 import org.apache.commons.codec.binary.Base64;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 public class AclSigner {
     public static final Charset DEFAULT_CHARSET = StandardCharsets.UTF_8;
     public static final SigningAlgorithm DEFAULT_ALGORITHM = SigningAlgorithm.HmacSHA1;
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.ROCKETMQ_AUTHORIZE_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_AUTHORIZE_LOGGER_NAME);
     private static final int CAL_SIGNATURE_FAILED = 10015;
     private static final String CAL_SIGNATURE_FAILED_MSG = "[%s:signature-failed] unable to calculate a request signature. error=%s";
 

File: acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java
Patch:
@@ -27,8 +27,8 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.yaml.snakeyaml.Yaml;
@@ -37,7 +37,7 @@
 
 public class AclUtils {
 
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     public static byte[] combineRequestContent(RemotingCommand request, SortedMap<String, String> fieldsMap) {
         try {

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainPermissionManager.java
Patch:
@@ -45,14 +45,14 @@
 import org.apache.rocketmq.common.PlainAccessConfig;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.srvutil.AclFileWatchService;
 
 public class PlainPermissionManager {
 
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private String fileHome = System.getProperty(MixAll.ROCKETMQ_HOME_PROPERTY,
         System.getenv(MixAll.ROCKETMQ_HOME_ENV));

File: acl/src/main/java/org/apache/rocketmq/acl/plain/RemoteAddressStrategyFactory.java
Patch:
@@ -23,12 +23,12 @@
 import org.apache.rocketmq.acl.common.AclException;
 import org.apache.rocketmq.acl.common.AclUtils;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 public class RemoteAddressStrategyFactory {
 
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     public static final NullRemoteAddressStrategy NULL_NET_ADDRESS_STRATEGY = new NullRemoteAddressStrategy();
 

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerPreOnlineService.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.BrokerSyncInfo;
 import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
@@ -41,7 +41,7 @@
 import org.apache.rocketmq.store.timer.TimerCheckpoint;
 
 public class BrokerPreOnlineService extends ServiceThread {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 
     private int waitBrokerIndex = 0;

File: broker/src/main/java/org/apache/rocketmq/broker/client/ClientHousekeepingService.java
Patch:
@@ -23,12 +23,12 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
 
 public class ClientHousekeepingService implements ChannelEventListener {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 
     private ScheduledExecutorService scheduledExecutorService;

File: broker/src/main/java/org/apache/rocketmq/broker/client/ConsumerGroupInfo.java
Patch:
@@ -26,14 +26,14 @@
 import java.util.concurrent.ConcurrentMap;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
 public class ConsumerGroupInfo {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final String groupName;
     private final ConcurrentMap<String/* Topic */, SubscriptionData> subscriptionTable =
         new ConcurrentHashMap<>();

File: broker/src/main/java/org/apache/rocketmq/broker/client/ConsumerManager.java
Patch:
@@ -28,16 +28,16 @@
 import java.util.stream.Collectors;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.store.stats.BrokerStatsManager;
 
 public class ConsumerManager {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private static final long CHANNEL_EXPIRED_TIMEOUT = 1000 * 120;
     private final ConcurrentMap<String, ConsumerGroupInfo> consumerTable =
         new ConcurrentHashMap<>(1024);

File: broker/src/main/java/org/apache/rocketmq/broker/client/DefaultConsumerIdsChangeListener.java
Patch:
@@ -28,12 +28,12 @@
 import org.apache.rocketmq.common.AbstractBrokerRunnable;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.utils.ThreadUtils;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
 public class DefaultConsumerIdsChangeListener implements ConsumerIdsChangeListener {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
     private final int cacheSize = 8096;
 

File: broker/src/main/java/org/apache/rocketmq/broker/client/ProducerManager.java
Patch:
@@ -28,15 +28,15 @@
 import java.util.concurrent.CopyOnWriteArrayList;
 import org.apache.rocketmq.broker.util.PositiveAtomicCounter;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.body.ProducerInfo;
 import org.apache.rocketmq.remoting.protocol.body.ProducerTableInfo;
 import org.apache.rocketmq.store.stats.BrokerStatsManager;
 
 public class ProducerManager {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private static final long CHANNEL_EXPIRED_TIMEOUT = 1000 * 120;
     private static final int GET_AVAILABLE_CHANNEL_RETRY_COUNT = 3;
     private final ConcurrentHashMap<String /* group name */, ConcurrentHashMap<Channel, ClientChannelInfo>> groupChannelTable =

File: broker/src/main/java/org/apache/rocketmq/broker/client/net/Broker2Client.java
Patch:
@@ -34,8 +34,8 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.message.MessageQueueForC;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
 import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
@@ -51,7 +51,7 @@
 import org.apache.rocketmq.remoting.protocol.header.ResetOffsetRequestHeader;
 
 public class Broker2Client {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 
     public Broker2Client(BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/client/rebalance/RebalanceLockManager.java
Patch:
@@ -18,8 +18,8 @@
 
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 import java.util.HashSet;
 import java.util.Set;
@@ -29,7 +29,7 @@
 import java.util.concurrent.locks.ReentrantLock;
 
 public class RebalanceLockManager {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.REBALANCE_LOCK_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.REBALANCE_LOCK_LOGGER_NAME);
     private final static long REBALANCE_LOCK_MAX_LIVE_TIME = Long.parseLong(System.getProperty(
         "rocketmq.broker.rebalance.lockMaxLiveTime", "60000"));
     private final Lock lock = new ReentrantLock();

File: broker/src/main/java/org/apache/rocketmq/broker/controller/ReplicasManager.java
Patch:
@@ -36,8 +36,8 @@
 import org.apache.rocketmq.common.Pair;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.EpochEntry;
 import org.apache.rocketmq.remoting.protocol.body.SyncStateSet;
 import org.apache.rocketmq.remoting.protocol.header.namesrv.controller.GetMetaDataResponseHeader;
@@ -55,7 +55,7 @@
  * syncStateSet, only master will start this timed task.
  */
 public class ReplicasManager {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private static final int RETRY_INTERVAL_SECOND = 5;
 

File: broker/src/main/java/org/apache/rocketmq/broker/dledger/DLedgerRoleChangeHandler.java
Patch:
@@ -27,15 +27,15 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.store.DefaultMessageStore;
 import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.dledger.DLedgerCommitLog;
 
 public class DLedgerRoleChangeHandler implements DLedgerLeaderElector.RoleChangeHandler {
 
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private ExecutorService executorService;
     private BrokerController brokerController;
     private DefaultMessageStore messageStore;

File: broker/src/main/java/org/apache/rocketmq/broker/failover/EscapeBridge.java
Patch:
@@ -44,16 +44,16 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.store.GetMessageResult;
 import org.apache.rocketmq.store.MessageStore;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
 
 public class EscapeBridge {
-    protected static final Logger LOG = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    protected static final InternalLogger LOG = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private static final long SEND_TIMEOUT = 3000L;
     private static final long DEFAULT_PULL_TIMEOUT_MILLIS = 1000 * 10L;
     private final String innerProducerGroupName;

File: broker/src/main/java/org/apache/rocketmq/broker/filter/CommitLogDispatcherCalcBitMap.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.filter.util.BitsArray;
 import org.apache.rocketmq.store.CommitLogDispatcher;
 import org.apache.rocketmq.store.DispatchRequest;
@@ -34,7 +34,7 @@
  */
 public class CommitLogDispatcherCalcBitMap implements CommitLogDispatcher {
 
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.FILTER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.FILTER_LOGGER_NAME);
 
     protected final BrokerConfig brokerConfig;
     protected final ConsumerFilterManager consumerFilterManager;

File: broker/src/main/java/org/apache/rocketmq/broker/filter/ConsumerFilterManager.java
Patch:
@@ -32,8 +32,8 @@
 import org.apache.rocketmq.filter.FilterFactory;
 import org.apache.rocketmq.filter.util.BloomFilter;
 import org.apache.rocketmq.filter.util.BloomFilterData;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
@@ -42,7 +42,7 @@
  */
 public class ConsumerFilterManager extends ConfigManager {
 
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.FILTER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.FILTER_LOGGER_NAME);
 
     private static final long MS_24_HOUR = 24 * 3600 * 1000;
 

File: broker/src/main/java/org/apache/rocketmq/broker/filter/ExpressionMessageFilter.java
Patch:
@@ -24,15 +24,15 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.filter.util.BitsArray;
 import org.apache.rocketmq.filter.util.BloomFilter;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.store.ConsumeQueueExt;
 import org.apache.rocketmq.store.MessageFilter;
 
 public class ExpressionMessageFilter implements MessageFilter {
 
-    protected static final Logger log = LoggerFactory.getLogger(LoggerName.FILTER_LOGGER_NAME);
+    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.FILTER_LOGGER_NAME);
 
     protected final SubscriptionData subscriptionData;
     protected final ConsumerFilterData consumerFilterData;

File: broker/src/main/java/org/apache/rocketmq/broker/filtersrv/FilterServerManager.java
Patch:
@@ -33,14 +33,14 @@
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 
 public class FilterServerManager {
 
     public static final long FILTER_SERVER_MAX_IDLE_TIME_MILLS = 30000;
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final ConcurrentMap<Channel, FilterServerInfo> filterServerTable =
         new ConcurrentHashMap<>(16);
     private final BrokerController brokerController;

File: broker/src/main/java/org/apache/rocketmq/broker/filtersrv/FilterServerUtil.java
Patch:
@@ -18,10 +18,10 @@
 package org.apache.rocketmq.broker.filtersrv;
 
 
-import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.logging.InternalLogger;
 
 public class FilterServerUtil {
-    public static void callShell(final String shellString, final Logger log) {
+    public static void callShell(final String shellString, final InternalLogger log) {
         Process process = null;
         try {
             String[] cmdArray = splitShellString(shellString);

File: broker/src/main/java/org/apache/rocketmq/broker/latency/BrokerFastFailure.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.netty.RequestTask;
 import org.apache.rocketmq.remoting.protocol.RemotingSysResponseCode;
 
@@ -35,7 +35,7 @@
  * BrokerController#getPullThreadPoolQueue()}
  */
 public class BrokerFastFailure {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final ScheduledExecutorService scheduledExecutorService;
     private final BrokerController brokerController;
 

File: broker/src/main/java/org/apache/rocketmq/broker/longpolling/LmqPullRequestHoldService.java
Patch:
@@ -19,12 +19,12 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 
 public class LmqPullRequestHoldService extends PullRequestHoldService {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     public LmqPullRequestHoldService(BrokerController brokerController) {
         super(brokerController);

File: broker/src/main/java/org/apache/rocketmq/broker/longpolling/PullRequestHoldService.java
Patch:
@@ -25,12 +25,12 @@
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.SystemClock;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.store.ConsumeQueueExt;
 
 public class PullRequestHoldService extends ServiceThread {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     protected static final String TOPIC_QUEUEID_SEPARATOR = "@";
     protected final BrokerController brokerController;
     private final SystemClock systemClock = new SystemClock();

File: broker/src/main/java/org/apache/rocketmq/broker/metrics/BrokerMetricsManager.java
Patch:
@@ -56,8 +56,8 @@
 import org.apache.rocketmq.common.metrics.NopLongHistogram;
 import org.apache.rocketmq.common.metrics.NopObservableLongGauge;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.metrics.RemotingMetricsManager;
 import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
 import org.apache.rocketmq.store.DefaultMessageStore;
@@ -97,7 +97,7 @@
 import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.PROTOCOL_TYPE_REMOTING;
 
 public class BrokerMetricsManager {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final BrokerConfig brokerConfig;
     private final MessageStore messageStore;

File: broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java
Patch:
@@ -33,8 +33,8 @@
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.constant.PermName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.store.MessageStore;
 import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
@@ -49,7 +49,7 @@ public class ConsumerLagCalculator {
     private final MessageStore messageStore;
     private final PopBufferMergeService popBufferMergeService;
 
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     public ConsumerLagCalculator(BrokerController brokerController) {
         this.brokerConfig = brokerController.getBrokerConfig();

File: broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOffsetManager.java
Patch:
@@ -31,13 +31,13 @@
 import org.apache.rocketmq.common.ConfigManager;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
 public class ConsumerOffsetManager extends ConfigManager {
-    private static final Logger LOG = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger LOG = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     public static final String TOPIC_GROUP_SEPARATOR = "@";
 
     private DataVersion dataVersion = new DataVersion();

File: broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOrderInfoLockManager.java
Patch:
@@ -29,11 +29,11 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 public class ConsumerOrderInfoLockManager {
-    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
+    private static final InternalLogger POP_LOGGER = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
     private final BrokerController brokerController;
     private final Map<Key, Timeout> timeoutMap = new ConcurrentHashMap<>();
     private final Timer timer;

File: broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOrderInfoManager.java
Patch:
@@ -32,14 +32,14 @@
 import org.apache.rocketmq.common.ConfigManager;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
 
 public class ConsumerOrderInfoManager extends ConfigManager {
 
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private static final String TOPIC_GROUP_SEPARATOR = "@";
     private static final long CLEAN_SPAN_FROM_LAST = 24 * 3600 * 1000;
 

File: broker/src/main/java/org/apache/rocketmq/broker/out/BrokerOuterAPI.java
Patch:
@@ -58,8 +58,8 @@
 import org.apache.rocketmq.common.namesrv.TopAddressing;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.InvokeCallback;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.RemotingClient;
@@ -132,7 +132,7 @@
 import static org.apache.rocketmq.remoting.protocol.ResponseCode.CONTROLLER_NOT_LEADER;
 
 public class BrokerOuterAPI {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final RemotingClient remotingClient;
     private final TopAddressing topAddressing = new DefaultTopAddressing(MixAll.getWSAddr());
     private String nameSrvAddr = null;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AckMessageProcessor.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.utils.DataConverter;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -43,7 +43,7 @@
 import org.apache.rocketmq.store.pop.AckMsg;
 
 public class AckMessageProcessor implements NettyRequestProcessor {
-    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
+    private static final InternalLogger POP_LOGGER = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
     private final BrokerController brokerController;
     private String reviveTopic;
     private PopReviveService[] popReviveServices;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -72,8 +72,8 @@
 import org.apache.rocketmq.common.stats.StatsSnapshot;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.filter.util.BitsArray;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
@@ -189,7 +189,7 @@
 import static org.apache.rocketmq.remoting.protocol.RemotingCommand.buildErrorResponse;
 
 public class AdminBrokerProcessor implements NettyRequestProcessor {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     protected final BrokerController brokerController;
 
     public AdminBrokerProcessor(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ChangeInvisibleTimeProcessor.java
Patch:
@@ -28,8 +28,8 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.utils.DataConverter;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -44,7 +44,7 @@
 import org.apache.rocketmq.store.pop.PopCheckPoint;
 
 public class ChangeInvisibleTimeProcessor implements NettyRequestProcessor {
-    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
+    private static final InternalLogger POP_LOGGER = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
     private final BrokerController brokerController;
     private final String reviveTopic;
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ClientManageProcessor.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.common.filter.ExpressionType;
 import org.apache.rocketmq.common.sysflag.TopicSysFlag;
 import org.apache.rocketmq.filter.FilterFactory;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -44,7 +44,7 @@
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public class ClientManageProcessor implements NettyRequestProcessor {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 
     public ClientManageProcessor(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ConsumerManageProcessor.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
 import org.apache.rocketmq.broker.offset.ConsumerOffsetManager;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -48,7 +48,7 @@
 import static org.apache.rocketmq.remoting.protocol.RemotingCommand.buildErrorResponse;
 
 public class ConsumerManageProcessor implements NettyRequestProcessor {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 
     public ConsumerManageProcessor(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/DefaultPullMessageResultHandler.java
Patch:
@@ -39,8 +39,8 @@
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.metrics.RemotingMetricsManager;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.remoting.protocol.ResponseCode;
@@ -63,7 +63,7 @@
 
 public class DefaultPullMessageResultHandler implements PullMessageResultHandler {
 
-    protected static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     protected final BrokerController brokerController;
 
     public DefaultPullMessageResultHandler(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/EndTransactionProcessor.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -42,7 +42,7 @@
  * EndTransaction processor: process commit and rollback message
  */
 public class EndTransactionProcessor implements NettyRequestProcessor {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
     private final BrokerController brokerController;
 
     public EndTransactionProcessor(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ForwardRequestProcessor.java
Patch:
@@ -19,13 +19,13 @@
 import io.netty.channel.ChannelHandlerContext;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public class ForwardRequestProcessor implements NettyRequestProcessor {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final BrokerController brokerController;
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/NotificationProcessor.java
Patch:
@@ -32,8 +32,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.constant.PermName;
 import org.apache.rocketmq.common.help.FAQUrl;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRemotingAbstract;
@@ -46,7 +46,7 @@
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public class NotificationProcessor implements NettyRequestProcessor {
-    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
+    private static final InternalLogger POP_LOGGER = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
     private final BrokerController brokerController;
     private Random random = new Random(System.currentTimeMillis());
     private static final String BORN_TIME = "bornTime";

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PeekMessageProcessor.java
Patch:
@@ -36,8 +36,8 @@
 import org.apache.rocketmq.common.help.FAQUrl;
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.metrics.RemotingMetricsManager;
@@ -59,7 +59,7 @@
 import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_RESULT;
 
 public class PeekMessageProcessor implements NettyRequestProcessor {
-    private static final Logger LOG = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger LOG = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
     private Random random = new Random(System.currentTimeMillis());
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PollingInfoProcessor.java
Patch:
@@ -26,8 +26,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.constant.PermName;
 import org.apache.rocketmq.common.help.FAQUrl;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -38,7 +38,7 @@
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public class PollingInfoProcessor implements NettyRequestProcessor {
-    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
+    private static final InternalLogger POP_LOGGER = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
     private final BrokerController brokerController;
 
     public PollingInfoProcessor(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopBufferMergeService.java
Patch:
@@ -31,8 +31,8 @@
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.utils.DataConverter;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
@@ -41,7 +41,7 @@
 import org.apache.rocketmq.store.pop.PopCheckPoint;
 
 public class PopBufferMergeService extends ServiceThread {
-    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
+    private static final InternalLogger POP_LOGGER = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
     ConcurrentHashMap<String/*mergeKey*/, PopCheckPointWrapper>
         buffer = new ConcurrentHashMap<>(1024 * 16);
     ConcurrentHashMap<String/*topic@cid@queueId*/, QueueWithTime<PopCheckPointWrapper>> commitOffsets =

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
Patch:
@@ -42,8 +42,8 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.DataConverter;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.store.AppendMessageStatus;
 import org.apache.rocketmq.store.GetMessageResult;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
@@ -56,7 +56,7 @@
 import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
 
 public class PopReviveService extends ServiceThread {
-    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
+    private static final InternalLogger POP_LOGGER = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
 
     private int queueId;
     private BrokerController brokerController;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PullMessageProcessor.java
Patch:
@@ -38,8 +38,8 @@
 import org.apache.rocketmq.common.filter.ExpressionType;
 import org.apache.rocketmq.common.help.FAQUrl;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRemotingAbstract;
@@ -75,7 +75,7 @@
 import static org.apache.rocketmq.remoting.protocol.RemotingCommand.buildErrorResponse;
 
 public class PullMessageProcessor implements NettyRequestProcessor {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private List<ConsumeMessageHook> consumeMessageHookList;
     private PullMessageResultHandler pullMessageResultHandler;
     private final BrokerController brokerController;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/QueryMessageProcessor.java
Patch:
@@ -26,8 +26,8 @@
 import org.apache.rocketmq.broker.pagecache.QueryMessageTransfer;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.metrics.RemotingMetricsManager;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -45,7 +45,7 @@
 import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_RESULT;
 
 public class QueryMessageProcessor implements NettyRequestProcessor {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 
     public QueryMessageProcessor(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ReplyMessageProcessor.java
Patch:
@@ -36,8 +36,8 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
@@ -55,7 +55,7 @@
 import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
 
 public class ReplyMessageProcessor extends AbstractSendMessageProcessor {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     public ReplyMessageProcessor(final BrokerController brokerController) {
         super(brokerController);

File: broker/src/main/java/org/apache/rocketmq/broker/schedule/ScheduleMessageService.java
Patch:
@@ -50,8 +50,8 @@
 import org.apache.rocketmq.common.running.RunningStats;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.ThreadUtils;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
@@ -66,7 +66,7 @@
 import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
 
 public class ScheduleMessageService extends ConfigManager {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private static final long FIRST_DELAY_TIME = 1000L;
     private static final long DELAY_FOR_A_WHILE = 100L;

File: broker/src/main/java/org/apache/rocketmq/broker/slave/SlaveSynchronize.java
Patch:
@@ -23,8 +23,8 @@
 import org.apache.rocketmq.broker.subscription.SubscriptionGroupManager;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.body.ConsumerOffsetSerializeWrapper;
 import org.apache.rocketmq.remoting.protocol.body.MessageRequestModeSerializeWrapper;
 import org.apache.rocketmq.remoting.protocol.body.SubscriptionGroupWrapper;
@@ -34,7 +34,7 @@
 import org.apache.rocketmq.store.timer.TimerMetrics;
 
 public class SlaveSynchronize {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
     private volatile String masterAddr = null;
 

File: broker/src/main/java/org/apache/rocketmq/broker/subscription/SubscriptionGroupManager.java
Patch:
@@ -26,14 +26,14 @@
 import org.apache.rocketmq.common.ConfigManager;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public class SubscriptionGroupManager extends ConfigManager {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final ConcurrentMap<String, SubscriptionGroupConfig> subscriptionGroupTable =
         new ConcurrentHashMap<>(1024);

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java
Patch:
@@ -42,16 +42,16 @@
 import org.apache.rocketmq.common.constant.PermName;
 import org.apache.rocketmq.common.sysflag.TopicSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.remoting.protocol.body.KVTable;
 import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
 public class TopicConfigManager extends ConfigManager {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private static final long LOCK_TIMEOUT_MILLIS = 3000;
     private static final int SCHEDULE_TOPIC_QUEUE_NUM = 18;
 

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicQueueMappingCleanService.java
Patch:
@@ -30,8 +30,8 @@
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.RequestCode;
 import org.apache.rocketmq.remoting.protocol.admin.TopicOffset;
 import org.apache.rocketmq.remoting.protocol.admin.TopicStatsTable;
@@ -49,7 +49,7 @@
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 
 public class TopicQueueMappingCleanService extends ServiceThread {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private TopicQueueMappingManager topicQueueMappingManager;
     private BrokerOuterAPI brokerOuterAPI;

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicQueueMappingManager.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.rocketmq.broker.BrokerPathConfigHelper;
 import org.apache.rocketmq.common.ConfigManager;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.remoting.protocol.ResponseCode;
@@ -43,7 +43,7 @@
 import static org.apache.rocketmq.remoting.protocol.RemotingCommand.buildErrorResponse;
 
 public class TopicQueueMappingManager extends ConfigManager {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private static final long LOCK_TIMEOUT_MILLIS = 3000;
     private transient final Lock lock = new ReentrantLock();
 

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicRouteInfoManager.java
Patch:
@@ -36,8 +36,8 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 import org.apache.rocketmq.remoting.protocol.ResponseCode;
@@ -48,7 +48,7 @@ public class TopicRouteInfoManager {
 
     private static final long GET_TOPIC_ROUTE_TIMEOUT = 3000L;
     private static final long LOCK_TIMEOUT_MILLIS = 3000L;
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final Lock lockNamesrv = new ReentrantLock();
     private final ConcurrentMap<String/* Topic */, TopicRouteData> topicRouteTable = new ConcurrentHashMap<>();

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/AbstractTransactionalMessageCheckListener.java
Patch:
@@ -27,12 +27,12 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.header.CheckTransactionStateRequestHeader;
 
 public abstract class AbstractTransactionalMessageCheckListener {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
     private BrokerController brokerController;
 

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/TransactionalMessageCheckService.java
Patch:
@@ -19,11 +19,11 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 public class TransactionalMessageCheckService extends ServiceThread {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
     private BrokerController brokerController;
 

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/DefaultTransactionalMessageCheckListener.java
Patch:
@@ -24,16 +24,16 @@
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
 
 import java.util.concurrent.ThreadLocalRandom;
 
 public class DefaultTransactionalMessageCheckListener extends AbstractTransactionalMessageCheckListener {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
     public DefaultTransactionalMessageCheckListener() {
         super();

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageBridge.java
Patch:
@@ -44,10 +44,10 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.logging.InnerLoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.GetMessageResult;
 import org.apache.rocketmq.store.MessageStore;
 import org.apache.rocketmq.store.PutMessageResult;
@@ -58,7 +58,7 @@
 import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
 
 public class TransactionalMessageBridge {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InnerLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
     private final ConcurrentHashMap<Integer, MessageQueue> opQueueMap = new ConcurrentHashMap<>();
     private final BrokerController brokerController;

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageServiceImpl.java
Patch:
@@ -40,16 +40,16 @@
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.ResponseCode;
 import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
 import org.apache.rocketmq.store.config.BrokerRole;
 
 public class TransactionalMessageServiceImpl implements TransactionalMessageService {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
     private TransactionalMessageBridge transactionalMessageBridge;
 

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalOpBatchService.java
Patch:
@@ -19,11 +19,11 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 public class TransactionalOpBatchService extends ServiceThread {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
     private BrokerController brokerController;
     private TransactionalMessageServiceImpl transactionalMessageService;

File: broker/src/main/java/org/apache/rocketmq/broker/util/HookUtils.java
Patch:
@@ -32,16 +32,16 @@
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.QueueTypeUtils;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
 import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.timer.TimerMessageStore;
 
 public class HookUtils {
 
-    protected static final Logger LOG = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    protected static final InternalLogger LOG = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private static AtomicLong printTimes = new AtomicLong(0);
 

File: broker/src/test/java/org/apache/rocketmq/broker/util/TransactionalMessageServiceImpl.java
Patch:
@@ -23,13 +23,13 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
 import org.apache.rocketmq.store.PutMessageResult;
 
 public class TransactionalMessageServiceImpl implements TransactionalMessageService {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
     @Override
     public PutMessageResult prepareMessage(MessageExtBrokerInner messageInner) {

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultLitePullConsumer.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.rocketmq.client.consumer.store.OffsetStore;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.impl.consumer.DefaultLitePullConsumerImpl;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.trace.AsyncTraceDispatcher;
 import org.apache.rocketmq.client.trace.TraceDispatcher;
 import org.apache.rocketmq.client.trace.hook.ConsumeMessageTraceHookImpl;
@@ -33,15 +34,14 @@
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class DefaultLitePullConsumer extends ClientConfig implements LitePullConsumer {
 
-    private static final Logger log = LoggerFactory.getLogger(DefaultLitePullConsumer.class);
+    private final InternalLogger log = ClientLogger.getLog();
 
     private final DefaultLitePullConsumerImpl defaultLitePullConsumerImpl;
 

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumer.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.trace.AsyncTraceDispatcher;
 import org.apache.rocketmq.client.trace.TraceDispatcher;
 import org.apache.rocketmq.client.trace.hook.ConsumeMessageTraceHookImpl;
@@ -39,12 +40,11 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 /**
  * In most scenarios, this is the mostly recommended class to consume messages.
@@ -63,7 +63,7 @@
  */
 public class DefaultMQPushConsumer extends ClientConfig implements MQPushConsumer {
 
-    private final Logger log = LoggerFactory.getLogger(DefaultMQPushConsumer.class);
+    private final InternalLogger log = ClientLogger.getLog();
 
     /**
      * Internal implementation. Most of the functions herein are delegated to it.

File: client/src/main/java/org/apache/rocketmq/client/consumer/MQPullConsumerScheduleService.java
Patch:
@@ -24,21 +24,21 @@
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.client.exception.MQClientException;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.message.MessageQueue;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 /**
  * Schedule service for pull consumer.
  * This Consumer will be removed in 2022, and a better implementation {@link
  * DefaultLitePullConsumer} is recommend to use in the scenario of actively pulling messages.
  */
 public class MQPullConsumerScheduleService {
-    private final Logger log = LoggerFactory.getLogger(MQPullConsumerScheduleService.class);
+    private final InternalLogger log = ClientLogger.getLog();
     private final MessageQueueListener messageQueueListener = new MessageQueueListenerImpl();
     private final ConcurrentMap<MessageQueue, PullTaskImpl> taskTable =
         new ConcurrentHashMap<>();

File: client/src/main/java/org/apache/rocketmq/client/consumer/store/LocalFileOffsetStore.java
Patch:
@@ -28,13 +28,13 @@
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.help.FAQUrl;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.remoting.exception.RemotingException;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 /**
  * Local storage implementation
@@ -43,7 +43,7 @@ public class LocalFileOffsetStore implements OffsetStore {
     public final static String LOCAL_OFFSET_STORE_DIR = System.getProperty(
         "rocketmq.client.localOffsetStoreDir",
         System.getProperty("user.home") + File.separator + ".rocketmq_offsets");
-    private final static Logger log = LoggerFactory.getLogger(LocalFileOffsetStore.class);
+    private final static InternalLogger log = ClientLogger.getLog();
     private final MQClientInstance mQClientFactory;
     private final String groupName;
     private final String storePath;

File: client/src/main/java/org/apache/rocketmq/client/consumer/store/RemoteBrokerOffsetStore.java
Patch:
@@ -28,20 +28,20 @@
 import org.apache.rocketmq.client.exception.OffsetNotFoundException;
 import org.apache.rocketmq.client.impl.FindBrokerResult;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.message.MessageQueue;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.header.QueryConsumerOffsetRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 /**
  * Remote storage implementation
  */
 public class RemoteBrokerOffsetStore implements OffsetStore {
-    private final static Logger log = LoggerFactory.getLogger(RemoteBrokerOffsetStore.class);
+    private final static InternalLogger log = ClientLogger.getLog();
     private final MQClientInstance mQClientFactory;
     private final String groupName;
     private ConcurrentMap<MessageQueue, AtomicLong> offsetTable =

File: client/src/main/java/org/apache/rocketmq/client/impl/MQAdminImpl.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
 import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.help.FAQUrl;
@@ -43,6 +44,7 @@
 import org.apache.rocketmq.common.message.MessageId;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.utils.NetworkUtil;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.InvokeCallback;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.exception.RemotingException;
@@ -54,12 +56,10 @@
 import org.apache.rocketmq.remoting.protocol.header.QueryMessageResponseHeader;
 import org.apache.rocketmq.remoting.protocol.route.BrokerData;
 import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class MQAdminImpl {
 
-    private static final Logger log = LoggerFactory.getLogger(MQAdminImpl.class);
+    private final InternalLogger log = ClientLogger.getLog();
     private final MQClientInstance mQClientFactory;
     private long timeoutMillis = 6000;
 

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -50,6 +50,7 @@
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
 import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
 import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.producer.SendCallback;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.client.producer.SendStatus;
@@ -73,6 +74,7 @@
 import org.apache.rocketmq.common.namesrv.NameServerUpdateCallback;
 import org.apache.rocketmq.common.namesrv.TopAddressing;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.InvokeCallback;
 import org.apache.rocketmq.remoting.RPCHook;
@@ -217,13 +219,11 @@
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.remoting.rpchook.DynamicalExtFieldRPCHook;
 import org.apache.rocketmq.remoting.rpchook.StreamTypeRPCHook;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 import static org.apache.rocketmq.remoting.protocol.RemotingSysResponseCode.SUCCESS;
 
 public class MQClientAPIImpl implements NameServerUpdateCallback {
-    private final static Logger log = LoggerFactory.getLogger(MQClientAPIImpl.class);
+    private final static InternalLogger log = ClientLogger.getLog();
     private static boolean sendSmartMsg =
         Boolean.parseBoolean(System.getProperty("org.apache.rocketmq.client.sendSmartMsg", "true"));
 

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientManager.java
Patch:
@@ -21,12 +21,12 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.rocketmq.client.ClientConfig;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
+import org.apache.rocketmq.client.log.ClientLogger;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class MQClientManager {
-    private final static Logger log = LoggerFactory.getLogger(MQClientManager.class);
+    private final static InternalLogger log = ClientLogger.getLog();
     private static MQClientManager instance = new MQClientManager();
     private AtomicInteger factoryIndexGenerator = new AtomicInteger();
     private ConcurrentMap<String/* clientId */, MQClientInstance> factoryTable =

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.rocketmq.client.consumer.listener.ConsumeReturnType;
 import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
 import org.apache.rocketmq.client.hook.ConsumeMessageContext;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.stat.ConsumerStatsManager;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
@@ -43,13 +44,12 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.utils.ThreadUtils;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.protocol.body.CMResult;
 import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class ConsumeMessageConcurrentlyService implements ConsumeMessageService {
-    private static final Logger log = LoggerFactory.getLogger(ConsumeMessageConcurrentlyService.class);
+    private static final InternalLogger log = ClientLogger.getLog();
     private final DefaultMQPushConsumerImpl defaultMQPushConsumerImpl;
     private final DefaultMQPushConsumer defaultMQPushConsumer;
     private final MessageListenerConcurrently messageListener;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.rocketmq.client.consumer.listener.ConsumeReturnType;
 import org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;
 import org.apache.rocketmq.client.hook.ConsumeMessageContext;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.stat.ConsumerStatsManager;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
@@ -43,15 +44,14 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.utils.ThreadUtils;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 import org.apache.rocketmq.remoting.protocol.body.CMResult;
 import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class ConsumeMessageOrderlyService implements ConsumeMessageService {
-    private static final Logger log = LoggerFactory.getLogger(ConsumeMessageOrderlyService.class);
+    private static final InternalLogger log = ClientLogger.getLog();
     private final static long MAX_TIME_CONSUME_CONTINUOUSLY =
         Long.parseLong(System.getProperty("rocketmq.client.maxTimeConsumeContinuously", "60000"));
     private final DefaultMQPushConsumerImpl defaultMQPushConsumerImpl;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessagePopConcurrentlyService.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.rocketmq.client.consumer.listener.ConsumeReturnType;
 import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
 import org.apache.rocketmq.client.hook.ConsumeMessageContext;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.stat.ConsumerStatsManager;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
@@ -44,14 +45,13 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.utils.ThreadUtils;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.protocol.body.CMResult;
 import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
 import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class ConsumeMessagePopConcurrentlyService implements ConsumeMessageService {
-    private static final Logger log = LoggerFactory.getLogger(ConsumeMessagePopConcurrentlyService.class);
+    private static final InternalLogger log = ClientLogger.getLog();
     private final DefaultMQPushConsumerImpl defaultMQPushConsumerImpl;
     private final DefaultMQPushConsumer defaultMQPushConsumer;
     private final MessageListenerConcurrently messageListener;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessagePopOrderlyService.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;
 import org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;
 import org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.stat.ConsumerStatsManager;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
@@ -40,15 +41,14 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.utils.ThreadUtils;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 import org.apache.rocketmq.remoting.protocol.body.CMResult;
 import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class ConsumeMessagePopOrderlyService implements ConsumeMessageService {
-    private static final Logger log = LoggerFactory.getLogger(ConsumeMessagePopOrderlyService.class);
+    private static final InternalLogger log = ClientLogger.getLog();
     private final DefaultMQPushConsumerImpl defaultMQPushConsumerImpl;
     private final DefaultMQPushConsumer defaultMQPushConsumer;
     private final MessageListenerOrderly messageListener;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java
Patch:
@@ -55,6 +55,7 @@
 import org.apache.rocketmq.client.impl.CommunicationMode;
 import org.apache.rocketmq.client.impl.MQClientManager;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ServiceState;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
@@ -64,6 +65,7 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
@@ -72,12 +74,10 @@
 import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class DefaultLitePullConsumerImpl implements MQConsumerInner {
 
-    private static final Logger log = LoggerFactory.getLogger(DefaultLitePullConsumerImpl.class);
+    private final InternalLogger log = ClientLogger.getLog();
 
     private final long consumerStartTimestamp = System.currentTimeMillis();
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java
Patch:
@@ -42,6 +42,7 @@
 import org.apache.rocketmq.client.impl.CommunicationMode;
 import org.apache.rocketmq.client.impl.MQClientManager;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ServiceState;
 import org.apache.rocketmq.common.UtilAll;
@@ -54,6 +55,7 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingException;
@@ -63,16 +65,14 @@
 import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 /**
  * This class will be removed in 2022, and a better implementation {@link DefaultLitePullConsumerImpl} is recommend to use
  * in the scenario of actively pulling messages.
  */
 @Deprecated
 public class DefaultMQPullConsumerImpl implements MQConsumerInner {
-    private static final Logger log = LoggerFactory.getLogger(DefaultMQPullConsumerImpl.class);
+    private final InternalLogger log = ClientLogger.getLog();
     private final DefaultMQPullConsumer defaultMQPullConsumer;
     private final long consumerStartTimestamp = System.currentTimeMillis();
     private final RPCHook rpcHook;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ProcessQueue.java
Patch:
@@ -28,12 +28,12 @@
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.message.MessageAccessor;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.protocol.body.ProcessQueueInfo;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 /**
  * Queue consumption snapshot
@@ -43,7 +43,7 @@ public class ProcessQueue {
         Long.parseLong(System.getProperty("rocketmq.client.rebalance.lockMaxLiveTime", "30000"));
     public final static long REBALANCE_LOCK_INTERVAL = Long.parseLong(System.getProperty("rocketmq.client.rebalance.lockInterval", "20000"));
     private final static long PULL_MAX_IDLE_TIME = Long.parseLong(System.getProperty("rocketmq.client.pull.pullMaxIdleTime", "120000"));
-    private final Logger log = LoggerFactory.getLogger(ProcessQueue.class);
+    private final InternalLogger log = ClientLogger.getLog();
     private final ReadWriteLock treeMapLock = new ReentrantReadWriteLock();
     private final TreeMap<Long, MessageExt> msgTreeMap = new TreeMap<>();
     private final AtomicLong msgCount = new AtomicLong();

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/PullAPIWrapper.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.rocketmq.client.impl.CommunicationMode;
 import org.apache.rocketmq.client.impl.FindBrokerResult;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.MQVersion;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.filter.ExpressionType;
@@ -44,16 +45,15 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class PullAPIWrapper {
-    private static final Logger log = LoggerFactory.getLogger(PullAPIWrapper.class);
+    private final InternalLogger log = ClientLogger.getLog();
     private final MQClientInstance mQClientFactory;
     private final String consumerGroup;
     private final boolean unitMode;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceImpl.java
Patch:
@@ -31,23 +31,23 @@
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.impl.FindBrokerResult;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.KeyBuilder;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.message.MessageQueueAssignment;
 import org.apache.rocketmq.common.message.MessageRequestMode;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
 import org.apache.rocketmq.remoting.protocol.body.LockBatchRequestBody;
 import org.apache.rocketmq.remoting.protocol.body.UnlockBatchRequestBody;
 import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
 import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public abstract class RebalanceImpl {
-    protected static final Logger log = LoggerFactory.getLogger(RebalanceImpl.class);
+    protected static final InternalLogger log = ClientLogger.getLog();
 
     protected final ConcurrentMap<MessageQueue, ProcessQueue> processQueueTable = new ConcurrentHashMap<>(64);
     protected final ConcurrentMap<MessageQueue, PopProcessQueue> popProcessQueueTable = new ConcurrentHashMap<>(64);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceService.java
Patch:
@@ -17,15 +17,15 @@
 package org.apache.rocketmq.client.impl.consumer;
 
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.ServiceThread;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
 
 public class RebalanceService extends ServiceThread {
     private static long waitInterval =
         Long.parseLong(System.getProperty(
             "rocketmq.client.rebalance.waitInterval", "20000"));
-    private final Logger log = LoggerFactory.getLogger(RebalanceService.class);
+    private final InternalLogger log = ClientLogger.getLog();
     private final MQClientInstance mqClientFactory;
 
     public RebalanceService(MQClientInstance mqClientFactory) {

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -52,6 +52,7 @@
 import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
 import org.apache.rocketmq.client.impl.producer.MQProducerInner;
 import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
 import org.apache.rocketmq.client.stat.ConsumerStatsManager;
 import org.apache.rocketmq.common.MQVersion;
@@ -64,6 +65,7 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.message.MessageQueueAssignment;
 import org.apache.rocketmq.common.topic.TopicValidator;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.netty.NettyClientConfig;
@@ -80,14 +82,12 @@
 import org.apache.rocketmq.remoting.protocol.route.BrokerData;
 import org.apache.rocketmq.remoting.protocol.route.QueueData;
 import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 import static org.apache.rocketmq.remoting.rpc.ClientMetadata.topicRouteData2EndpointsForStaticTopic;
 
 public class MQClientInstance {
     private final static long LOCK_TIMEOUT_MILLIS = 3000;
-    private final static Logger log = LoggerFactory.getLogger(MQClientInstance.class);
+    private final static InternalLogger log = ClientLogger.getLog();
     private final ClientConfig clientConfig;
     private final String clientId;
     private final long bootTimestamp = System.currentTimeMillis();

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -51,6 +51,7 @@
 import org.apache.rocketmq.client.impl.MQClientManager;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
 import org.apache.rocketmq.client.latency.MQFaultStrategy;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
 import org.apache.rocketmq.client.producer.LocalTransactionExecuter;
 import org.apache.rocketmq.client.producer.LocalTransactionState;
@@ -84,6 +85,7 @@
 import org.apache.rocketmq.common.message.MessageType;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.utils.CorrelationIdUtil;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingConnectException;
 import org.apache.rocketmq.remoting.exception.RemotingException;
@@ -93,12 +95,10 @@
 import org.apache.rocketmq.remoting.protocol.header.CheckTransactionStateRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class DefaultMQProducerImpl implements MQProducerInner {
 
-    private final Logger log = LoggerFactory.getLogger(DefaultMQProducerImpl.class);
+    private final InternalLogger log = ClientLogger.getLog();
     private final Random random = new Random();
     private final DefaultMQProducer defaultMQProducer;
     private final ConcurrentMap<String/* topic */, TopicPublishInfo> topicPublishInfoTable =

File: client/src/main/java/org/apache/rocketmq/client/latency/MQFaultStrategy.java
Patch:
@@ -18,12 +18,12 @@
 package org.apache.rocketmq.client.latency;
 
 import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
 
 public class MQFaultStrategy {
-    private final static Logger log = LoggerFactory.getLogger(MQFaultStrategy.class);
+    private final static InternalLogger log = ClientLogger.getLog();
     private final LatencyFaultTolerance<String> latencyFaultTolerance = new LatencyFaultToleranceImpl();
 
     private boolean sendLatencyFaultEnable = false;

File: client/src/main/java/org/apache/rocketmq/client/producer/RequestFutureHolder.java
Patch:
@@ -31,12 +31,12 @@
 import org.apache.rocketmq.client.common.ClientErrorCode;
 import org.apache.rocketmq.client.exception.RequestTimeoutException;
 import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
 
 public class RequestFutureHolder {
-    private static final Logger log = LoggerFactory.getLogger(RequestFutureHolder.class);
+    private static InternalLogger log = ClientLogger.getLog();
     private static final RequestFutureHolder INSTANCE = new RequestFutureHolder();
     private ConcurrentHashMap<String, RequestResponseFuture> requestFutureTable = new ConcurrentHashMap<>();
     private final Set<DefaultMQProducerImpl> producerSet = new HashSet<>();

File: client/src/main/java/org/apache/rocketmq/client/stat/ConsumerStatsManager.java
Patch:
@@ -18,14 +18,14 @@
 package org.apache.rocketmq.client.stat;
 
 import java.util.concurrent.ScheduledExecutorService;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.stats.StatsItemSet;
 import org.apache.rocketmq.common.stats.StatsSnapshot;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.protocol.body.ConsumeStatus;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class ConsumerStatsManager {
-    private static final Logger log = LoggerFactory.getLogger(ConsumerStatsManager.class);
+    private static final InternalLogger log = ClientLogger.getLog();
 
     private static final String TOPIC_AND_GROUP_CONSUME_OK_TPS = "CONSUME_OK_TPS";
     private static final String TOPIC_AND_GROUP_CONSUME_FAILED_TPS = "CONSUME_FAILED_TPS";

File: common/src/main/java/org/apache/rocketmq/common/AbstractBrokerRunnable.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.rocketmq.common;
 
+import org.apache.rocketmq.logging.InnerLoggerFactory;
+
 public abstract class AbstractBrokerRunnable implements Runnable {
     protected final BrokerIdentity brokerIdentity;
 
@@ -33,7 +35,7 @@ public AbstractBrokerRunnable(BrokerIdentity brokerIdentity) {
     public void run() {
         if (brokerIdentity.isInBrokerContainer()) {
             // set threadlocal broker identity to forward logging to corresponding broker
-//            InnerLoggerFactory.BROKER_IDENTITY.set(brokerIdentity.getCanonicalName());
+            InnerLoggerFactory.BROKER_IDENTITY.set(brokerIdentity.getCanonicalName());
         }
         run2();
     }

File: common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
Patch:
@@ -23,11 +23,11 @@
 import org.apache.rocketmq.common.message.MessageRequestMode;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 public class BrokerConfig extends BrokerIdentity {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private String brokerConfigPath = null;
 

File: common/src/main/java/org/apache/rocketmq/common/ConfigManager.java
Patch:
@@ -19,11 +19,11 @@
 import java.io.IOException;
 import java.util.Map;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 public abstract class ConfigManager {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     public abstract String encode();
 

File: common/src/main/java/org/apache/rocketmq/common/ServiceThread.java
Patch:
@@ -19,11 +19,11 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 public abstract class ServiceThread implements Runnable {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private static final long JOIN_TIME = 90 * 1000;
 

File: common/src/main/java/org/apache/rocketmq/common/ThreadFactoryImpl.java
Patch:
@@ -20,12 +20,12 @@
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.atomic.AtomicLong;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 public class ThreadFactoryImpl implements ThreadFactory {
 
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private final AtomicLong threadIndex = new AtomicLong(0);
     private final String threadNamePrefix;

File: common/src/main/java/org/apache/rocketmq/common/compression/Lz4Compressor.java
Patch:
@@ -23,11 +23,11 @@
 import net.jpountz.lz4.LZ4FrameInputStream;
 import net.jpountz.lz4.LZ4FrameOutputStream;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 public class Lz4Compressor implements Compressor {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     @Override
     public byte[] compress(byte[] src, int level) throws IOException {

File: common/src/main/java/org/apache/rocketmq/common/compression/ZlibCompressor.java
Patch:
@@ -23,11 +23,11 @@
 import java.util.zip.DeflaterOutputStream;
 import java.util.zip.InflaterInputStream;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 public class ZlibCompressor implements Compressor {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     @Override
     public byte[] compress(byte[] src, int level) throws IOException {

File: common/src/main/java/org/apache/rocketmq/common/compression/ZstdCompressor.java
Patch:
@@ -23,11 +23,11 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 public class ZstdCompressor implements Compressor {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     @Override
     public byte[] compress(byte[] src, int level) throws IOException {

File: common/src/main/java/org/apache/rocketmq/common/namesrv/DefaultTopAddressing.java
Patch:
@@ -28,12 +28,12 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.help.FAQUrl;
 import org.apache.rocketmq.common.utils.HttpTinyClient;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 public class DefaultTopAddressing implements TopAddressing {
 
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private String nsAddr;
     private String wsAddr;

File: common/src/main/java/org/apache/rocketmq/common/queue/ConcurrentTreeMap.java
Patch:
@@ -22,14 +22,14 @@
 import java.util.TreeMap;
 import java.util.concurrent.locks.ReentrantLock;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 /**
  * thread safe
  */
 public class ConcurrentTreeMap<K, V> {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final ReentrantLock lock;
     private TreeMap<K, V> tree;
     private RoundQueue<K> roundQueue;

File: common/src/main/java/org/apache/rocketmq/common/stats/MomentStatsItem.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 import org.apache.rocketmq.common.UtilAll;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.logging.InternalLogger;
 
 public class MomentStatsItem {
 
@@ -30,10 +30,10 @@ public class MomentStatsItem {
     private final String statsName;
     private final String statsKey;
     private final ScheduledExecutorService scheduledExecutorService;
-    private final Logger log;
+    private final InternalLogger log;
 
     public MomentStatsItem(String statsName, String statsKey,
-        ScheduledExecutorService scheduledExecutorService, Logger log) {
+        ScheduledExecutorService scheduledExecutorService, InternalLogger log) {
         this.statsName = statsName;
         this.statsKey = statsKey;
         this.scheduledExecutorService = scheduledExecutorService;

File: common/src/main/java/org/apache/rocketmq/common/stats/MomentStatsItemSet.java
Patch:
@@ -24,16 +24,16 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.common.UtilAll;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.logging.InternalLogger;
 
 public class MomentStatsItemSet {
     private final ConcurrentMap<String/* key */, MomentStatsItem> statsItemTable =
         new ConcurrentHashMap<>(128);
     private final String statsName;
     private final ScheduledExecutorService scheduledExecutorService;
-    private final Logger log;
+    private final InternalLogger log;
 
-    public MomentStatsItemSet(String statsName, ScheduledExecutorService scheduledExecutorService, Logger log) {
+    public MomentStatsItemSet(String statsName, ScheduledExecutorService scheduledExecutorService, InternalLogger log) {
         this.statsName = statsName;
         this.scheduledExecutorService = scheduledExecutorService;
         this.log = log;

File: common/src/main/java/org/apache/rocketmq/common/utils/NetworkUtil.java
Patch:
@@ -29,13 +29,13 @@
 import java.util.ArrayList;
 import java.util.Enumeration;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 public class NetworkUtil {
     public static final String OS_NAME = System.getProperty("os.name");
 
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
     private static boolean isLinuxPlatform = false;
     private static boolean isWindowsPlatform = false;
 

File: common/src/main/java/org/apache/rocketmq/common/utils/ThreadUtils.java
Patch:
@@ -26,11 +26,11 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 public final class ThreadUtils {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.TOOLS_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.TOOLS_LOGGER_NAME);
 
     public static ExecutorService newThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime,
         TimeUnit unit, BlockingQueue<Runnable> workQueue, String processName, boolean isDaemon) {

File: container/src/main/java/org/apache/rocketmq/container/BrokerContainer.java
Patch:
@@ -39,8 +39,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.container.logback.BrokerLogbackConfigurator;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.Configuration;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.RemotingServer;
@@ -51,7 +51,7 @@
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 
 public class BrokerContainer implements IBrokerContainer {
-    private static final Logger LOG = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger LOG = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final ScheduledExecutorService scheduledExecutorService = new ScheduledThreadPoolExecutor(1,
         new BasicThreadFactory.Builder()

File: container/src/main/java/org/apache/rocketmq/container/BrokerContainerProcessor.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.rocketmq.common.BrokerIdentity;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -41,7 +41,7 @@
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 
 public class BrokerContainerProcessor implements NettyRequestProcessor {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerContainer brokerContainer;
     private List<BrokerBootHook> brokerBootHookList;
 

File: controller/src/main/java/org/apache/rocketmq/controller/BrokerHousekeepingService.java
Patch:
@@ -18,12 +18,12 @@
 
 import io.netty.channel.Channel;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
 
 public class BrokerHousekeepingService implements ChannelEventListener {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
     private final ControllerManager controllerManager;
 
     public BrokerHousekeepingService(ControllerManager controllerManager) {

File: controller/src/main/java/org/apache/rocketmq/controller/ControllerManager.java
Patch:
@@ -34,8 +34,8 @@
 import org.apache.rocketmq.controller.impl.DLedgerController;
 import org.apache.rocketmq.controller.impl.DefaultBrokerHeartbeatManager;
 import org.apache.rocketmq.controller.processor.ControllerRequestProcessor;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.Configuration;
 import org.apache.rocketmq.remoting.RemotingClient;
 import org.apache.rocketmq.remoting.RemotingServer;
@@ -50,7 +50,7 @@
 import org.apache.rocketmq.remoting.protocol.header.namesrv.controller.ElectMasterResponseHeader;
 
 public class ControllerManager {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
 
     private final ControllerConfig controllerConfig;
     private final NettyServerConfig nettyServerConfig;

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DLedgerController.java
Patch:
@@ -47,8 +47,8 @@
 import org.apache.rocketmq.controller.impl.event.EventMessage;
 import org.apache.rocketmq.controller.impl.event.EventSerializer;
 import org.apache.rocketmq.controller.impl.manager.ReplicasInfoManager;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
 import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.RemotingServer;
@@ -69,7 +69,7 @@
  */
 public class DLedgerController implements Controller {
 
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
     private final DLedgerServer dLedgerServer;
     private final ControllerConfig controllerConfig;
     private final DLedgerConfig dLedgerConfig;

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DLedgerControllerStateMachine.java
Patch:
@@ -26,14 +26,14 @@
 import org.apache.rocketmq.controller.impl.event.EventMessage;
 import org.apache.rocketmq.controller.impl.event.EventSerializer;
 import org.apache.rocketmq.controller.impl.manager.ReplicasInfoManager;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 /**
  * The state machine implementation of the dledger controller
  */
 public class DLedgerControllerStateMachine implements StateMachine {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
     private final ReplicasInfoManager replicasInfoManager;
     private final EventSerializer eventSerializer;
     private final String dLedgerId;

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DefaultBrokerHeartbeatManager.java
Patch:
@@ -33,12 +33,12 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.controller.BrokerHeartbeatManager;
 import org.apache.rocketmq.controller.BrokerLiveInfo;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 
 public class DefaultBrokerHeartbeatManager implements BrokerHeartbeatManager {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
     private static final long DEFAULT_BROKER_CHANNEL_EXPIRED_TIME = 1000 * 10;
     private final ScheduledExecutorService scheduledService = Executors.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("DefaultBrokerHeartbeatManager_scheduledService_"));
     private final ExecutorService executor = Executors.newFixedThreadPool(2, new ThreadFactoryImpl("DefaultBrokerHeartbeatManager_executorService_"));

File: controller/src/main/java/org/apache/rocketmq/controller/impl/manager/ReplicasInfoManager.java
Patch:
@@ -37,8 +37,8 @@
 import org.apache.rocketmq.controller.impl.event.ElectMasterEvent;
 import org.apache.rocketmq.controller.impl.event.EventMessage;
 import org.apache.rocketmq.controller.impl.event.EventType;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.ResponseCode;
 import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
 import org.apache.rocketmq.remoting.protocol.body.InSyncStateData;
@@ -59,7 +59,7 @@
  * be called sequentially
  */
 public class ReplicasInfoManager {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
     private final ControllerConfig controllerConfig;
     private final Map<String/* brokerName */, BrokerInfo> replicaInfoTable;
     private final Map<String/* brokerName */, SyncStateInfo> syncStateSetInfoTable;

File: controller/src/main/java/org/apache/rocketmq/controller/processor/ControllerRequestProcessor.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.controller.BrokerHeartbeatManager;
 import org.apache.rocketmq.controller.ControllerManager;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
@@ -59,7 +59,7 @@
  * Processor for controller request
  */
 public class ControllerRequestProcessor implements NettyRequestProcessor {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
     private static final int WAIT_TIMEOUT_OUT = 5;
     private final ControllerManager controllerManager;
     private final BrokerHeartbeatManager heartbeatManager;

File: example/src/main/java/org/apache/rocketmq/example/rpc/AsyncRequestProducer.java
Patch:
@@ -18,15 +18,15 @@
 package org.apache.rocketmq.example.rpc;
 
 import org.apache.rocketmq.client.exception.MQClientException;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
 import org.apache.rocketmq.client.producer.RequestCallback;
 import org.apache.rocketmq.common.message.Message;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class AsyncRequestProducer {
-    private static final Logger log = LoggerFactory.getLogger(AsyncRequestProducer.class);
+    private static final InternalLogger log = ClientLogger.getLog();
 
     public static void main(String[] args) throws MQClientException, InterruptedException {
         String producerGroup = "please_rename_unique_group_name";

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/kvconfig/KVConfigManager.java
Patch:
@@ -23,13 +23,13 @@
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.remoting.protocol.body.KVTable;
 
 public class KVConfigManager {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
 
     private final NamesrvController namesrvController;
 

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/ClientRequestProcessor.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.help.FAQUrl;
 import org.apache.rocketmq.common.namesrv.NamesrvUtil;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -37,7 +37,7 @@
 
 public class ClientRequestProcessor implements NettyRequestProcessor {
 
-    private static Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
 
     protected NamesrvController namesrvController;
     private long startupTimeMillis;

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/ClusterTestRequestProcessor.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.help.FAQUrl;
 import org.apache.rocketmq.common.namesrv.NamesrvUtil;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
@@ -32,7 +32,7 @@
 import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
 
 public class ClusterTestRequestProcessor extends ClientRequestProcessor {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
     private final DefaultMQAdminExt adminExt;
     private final String productEnvName;
 

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/DefaultRequestProcessor.java
Patch:
@@ -28,8 +28,8 @@
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.namesrv.NamesrvUtil;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
@@ -68,7 +68,7 @@
 import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
 
 public class DefaultRequestProcessor implements NettyRequestProcessor {
-    private static Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
 
     protected final NamesrvController namesrvController;
 

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/BatchUnregistrationService.java
Patch:
@@ -24,8 +24,8 @@
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.namesrv.NamesrvConfig;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.header.namesrv.UnRegisterBrokerRequestHeader;
 
 /**
@@ -35,7 +35,7 @@
 public class BatchUnregistrationService extends ServiceThread {
     private final RouteInfoManager routeInfoManager;
     private BlockingQueue<UnRegisterBrokerRequestHeader> unregistrationQueue;
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
 
     public BatchUnregistrationService(RouteInfoManager routeInfoManager, NamesrvConfig namesrvConfig) {
         this.routeInfoManager = routeInfoManager;

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java
Patch:
@@ -42,8 +42,8 @@
 import org.apache.rocketmq.common.sysflag.TopicSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.ConcurrentHashMapUtils;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingConnectException;
@@ -67,7 +67,7 @@
 import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingInfo;
 
 public class RouteInfoManager {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
     private final static long DEFAULT_BROKER_CHANNEL_EXPIRED_TIME = 1000 * 60 * 2;
     private final ReadWriteLock lock = new ReentrantReadWriteLock();
     private final Map<String/* topic */, Map<String, QueueData>> topicQueueTable;

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/processor/RequestProcessorTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.namesrv.NamesrvConfig;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.namesrv.routeinfo.RouteInfoManager;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
@@ -67,7 +67,7 @@ public class RequestProcessorTest {
 
     private RouteInfoManager routeInfoManager;
 
-    private Logger logger;
+    private InternalLogger logger;
 
     @Before
     public void init() throws Exception {
@@ -88,7 +88,7 @@ public void init() throws Exception {
 
         registerRouteInfoManager();
 
-        logger = mock(Logger.class);
+        logger = mock(InternalLogger.class);
         setFinalStatic(DefaultRequestProcessor.class.getDeclaredField("log"), logger);
     }
 

File: openmessaging/src/main/java/io/openmessaging/rocketmq/producer/AbstractOMSProducer.java
Patch:
@@ -31,7 +31,9 @@
 import io.openmessaging.rocketmq.utils.BeanUtils;
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
+import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
+import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.exception.RemotingConnectException;
 import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
 import org.apache.rocketmq.remoting.protocol.LanguageCode;
@@ -40,6 +42,7 @@
 import static io.openmessaging.rocketmq.utils.OMSUtil.buildInstanceName;
 
 abstract class AbstractOMSProducer implements ServiceLifecycle, MessageFactory {
+    final static InternalLogger log = ClientLogger.getLog();
     final KeyValue properties;
     final DefaultMQProducer rocketmqProducer;
     private boolean started = false;

File: openmessaging/src/main/java/io/openmessaging/rocketmq/promise/DefaultPromise.java
Patch:
@@ -19,14 +19,14 @@
 import io.openmessaging.Promise;
 import io.openmessaging.FutureListener;
 import io.openmessaging.exception.OMSRuntimeException;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 import java.util.ArrayList;
 import java.util.List;
 
 public class DefaultPromise<V> implements Promise<V> {
-    private static final Logger LOG = LoggerFactory.getLogger(DefaultPromise.class);
+    private static final InternalLogger LOG = InternalLoggerFactory.getLogger(DefaultPromise.class);
     private final Object lock = new Object();
     private volatile FutureState state = FutureState.DOING;
     private V result = null;

File: openmessaging/src/main/java/io/openmessaging/rocketmq/utils/BeanUtils.java
Patch:
@@ -25,11 +25,11 @@
 import java.util.Properties;
 import java.util.Set;
 import org.apache.commons.lang3.StringUtils;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.client.log.ClientLogger;
+import org.apache.rocketmq.logging.InternalLogger;
 
 public final class BeanUtils {
-    private static final Logger log = LoggerFactory.getLogger(BeanUtils.class);
+    static InternalLogger log = ClientLogger.getLog();
 
     /**
      * Maps primitive {@code Class}es to their corresponding wrapper {@code Class}.

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/Configuration.java
Patch:
@@ -28,8 +28,8 @@
 import java.util.concurrent.atomic.AtomicReference;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class Configuration {
     private final static Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java
Patch:
@@ -32,8 +32,8 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.proxy.ProxyMode;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class ProxyConfig implements ConfigFile {
     private final static Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServer.java
Patch:
@@ -19,12 +19,12 @@
 
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 
 public class GrpcServer implements StartAndShutdown {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private final io.grpc.Server server;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServerBuilder.java
Patch:
@@ -40,8 +40,8 @@
 import org.apache.rocketmq.acl.AccessValidator;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.utils.ServiceProvider;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.grpc.interceptor.AuthenticationInterceptor;
@@ -50,7 +50,7 @@
 import org.apache.rocketmq.proxy.grpc.interceptor.HeaderInterceptor;
 
 public class GrpcServerBuilder {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     protected NettyServerBuilder serverBuilder;
 
     public static GrpcServerBuilder newBuilder(ThreadPoolExecutor executor, int port) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/GlobalExceptionInterceptor.java
Patch:
@@ -26,11 +26,11 @@
 import io.grpc.Status;
 import io.grpc.StatusRuntimeException;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 public class GlobalExceptionInterceptor implements ServerInterceptor {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     @Override
     public <R, W> ServerCall.Listener<R> interceptCall(

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/AbstractMessingActivity.java
Patch:
@@ -18,15 +18,15 @@
 
 import apache.rocketmq.v2.Resource;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcValidator;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
 
 public abstract class AbstractMessingActivity {
-    protected static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     protected final MessagingProcessor messagingProcessor;
     protected final GrpcClientSettingsManager grpcClientSettingsManager;
     protected final GrpcChannelManager grpcChannelManager;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/DefaultGrpcMessingActivity.java
Patch:
@@ -40,8 +40,8 @@
 import io.grpc.stub.StreamObserver;
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
@@ -58,7 +58,7 @@
 import org.apache.rocketmq.proxy.processor.ReceiptHandleProcessor;
 
 public class DefaultGrpcMessingActivity extends AbstractStartAndShutdown implements GrpcMessingActivity {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected GrpcClientSettingsManager grpcClientSettingsManager;
     protected GrpcChannelManager grpcChannelManager;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplication.java
Patch:
@@ -61,8 +61,8 @@
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseWriter;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class GrpcMessagingApplication extends MessagingServiceGrpc.MessagingServiceImplBase implements StartAndShutdown {
     private final static Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/channel/GrpcClientChannel.java
Patch:
@@ -30,8 +30,8 @@
 import java.util.concurrent.atomic.AtomicReference;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcConverter;
 import org.apache.rocketmq.proxy.service.relay.ProxyChannel;
@@ -46,7 +46,7 @@
 import org.apache.rocketmq.remoting.protocol.header.GetConsumerRunningInfoRequestHeader;
 
 public class GrpcClientChannel extends ProxyChannel {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private final GrpcChannelManager grpcChannelManager;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/client/ClientActivity.java
Patch:
@@ -46,8 +46,8 @@
 import org.apache.rocketmq.common.attribute.TopicMessageType;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.AbstractMessingActivity;
 import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
@@ -70,7 +70,7 @@
 
 public class ClientActivity extends AbstractMessingActivity {
 
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     public ClientActivity(MessagingProcessor messagingProcessor,
         GrpcClientSettingsManager grpcClientSettingsManager,

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcConverter.java
Patch:
@@ -43,12 +43,12 @@
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.utils.BinaryUtil;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 
 public class GrpcConverter {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected static final Object INSTANCE_CREATE_LOCK = new Object();
     protected static volatile GrpcConverter instance;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcValidator.java
Patch:
@@ -26,12 +26,12 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 
 public class GrpcValidator {
-    protected static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected static final Object INSTANCE_CREATE_LOCK = new Object();
     protected static volatile GrpcValidator instance;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/ResponseBuilder.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.utils.ExceptionUtils;
 import org.apache.rocketmq.proxy.service.route.TopicRouteHelper;
@@ -35,7 +35,7 @@
 
 public class ResponseBuilder {
 
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     protected static final Map<Integer, Code> RESPONSE_CODE_MAPPING = new ConcurrentHashMap<>();
 
     protected static final Object INSTANCE_CREATE_LOCK = new Object();

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/ResponseWriter.java
Patch:
@@ -22,11 +22,11 @@
 import io.grpc.stub.ServerCallStreamObserver;
 import io.grpc.stub.StreamObserver;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 public class ResponseWriter {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected static final Object INSTANCE_CREATE_LOCK = new Object();
     protected static volatile ResponseWriter instance;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageResponseStreamWriter.java
Patch:
@@ -31,16 +31,16 @@
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseWriter;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
 
 public class ReceiveMessageResponseStreamWriter {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     protected static final long NACK_INVISIBLE_TIME = Duration.ofSeconds(1).toMillis();
 
     protected final MessagingProcessor messagingProcessor;

File: proxy/src/main/java/org/apache/rocketmq/proxy/metrics/ProxyMetricsManager.java
Patch:
@@ -42,8 +42,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.AGGREGATION_DELTA;
 import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_AGGREGATION;

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ConsumerProcessor.java
Patch:
@@ -37,8 +37,8 @@
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
@@ -59,7 +59,7 @@
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
 public class ConsumerProcessor extends AbstractProcessor {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private final ExecutorService executor;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ProducerProcessor.java
Patch:
@@ -33,8 +33,8 @@
 import org.apache.rocketmq.common.message.MessageId;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
@@ -51,7 +51,7 @@
 import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
 
 public class ProducerProcessor extends AbstractProcessor {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     private final ExecutorService executor;
     private final TopicMessageTypeValidator topicMessageTypeValidator;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessor.java
Patch:
@@ -52,8 +52,8 @@
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.remoting.protocol.subscription.RetryPolicy;
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class ReceiptHandleProcessor extends AbstractStartAndShutdown {
     protected final static Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/ClusterServiceManager.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.rocketmq.broker.client.ProducerGroupEvent;
 import org.apache.rocketmq.broker.client.ProducerManager;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
@@ -48,7 +48,7 @@
 import org.apache.rocketmq.remoting.RPCHook;
 
 public class ClusterServiceManager extends AbstractStartAndShutdown implements ServiceManager {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected ClusterTransactionService clusterTransactionService;
     protected ProducerManager producerManager;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/channel/ChannelManager.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.utils.ConcurrentHashMapUtils;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class ChannelManager {
     private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/channel/SimpleChannel.java
Patch:
@@ -32,8 +32,8 @@
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 /**
  * SimpleChannel is used to handle writeAndFlush situation in processor
@@ -42,7 +42,7 @@
  * @see io.netty.channel.Channel#writeAndFlush
  */
 public class SimpleChannel extends AbstractChannel {
-    protected static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected final String remoteAddress;
     protected final String localAddress;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/message/LocalMessageService.java
Patch:
@@ -71,8 +71,8 @@
 import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.SendMessageResponseHeader;
 import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class LocalMessageService implements MessageService {
     private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/metadata/ClusterMetadataService.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.common.attribute.TopicMessageType;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.common.AbstractCacheLoader;
 import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
@@ -39,7 +39,7 @@
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public class ClusterMetadataService extends AbstractStartAndShutdown implements MetadataService {
-    protected static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     private static final long DEFAULT_TIMEOUT = 3000;
 
     private final TopicRouteService topicRouteService;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/mqclient/MQClientAPIExt.java
Patch:
@@ -44,8 +44,8 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyClientConfig;
@@ -77,7 +77,7 @@
 import org.apache.rocketmq.remoting.protocol.heartbeat.HeartbeatData;
 
 public class MQClientAPIExt extends MQClientAPIImpl {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private final ClientConfig clientConfig;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/mqclient/ProxyClientRemotingProcessor.java
Patch:
@@ -26,16 +26,16 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.remoting.protocol.RequestCode;
 import org.apache.rocketmq.remoting.protocol.header.CheckTransactionStateRequestHeader;
 
 public class ProxyClientRemotingProcessor extends ClientRemotingProcessor {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     private final ProducerManager producerManager;
 
     public ProxyClientRemotingProcessor(ProducerManager producerManager) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/relay/ProxyChannel.java
Patch:
@@ -34,8 +34,8 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.service.channel.SimpleChannel;
 import org.apache.rocketmq.proxy.service.transaction.TransactionData;
@@ -48,7 +48,7 @@
 import org.apache.rocketmq.remoting.protocol.header.GetConsumerRunningInfoRequestHeader;
 
 public abstract class ProxyChannel extends SimpleChannel {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     protected final SocketAddress remoteSocketAddress;
     protected final SocketAddress localSocketAddress;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/TopicRouteService.java
Patch:
@@ -30,8 +30,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.common.AbstractCacheLoader;
 import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.common.Address;
@@ -44,7 +44,7 @@
 import org.checkerframework.checker.nullness.qual.Nullable;
 
 public abstract class TopicRouteService extends AbstractStartAndShutdown {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private final MQClientAPIFactory mqClientAPIFactory;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/ClusterTransactionService.java
Patch:
@@ -34,8 +34,8 @@
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
@@ -47,7 +47,7 @@
 import org.apache.rocketmq.remoting.protocol.route.BrokerData;
 
 public class ClusterTransactionService extends AbstractTransactionService {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private static final String TRANS_HEARTBEAT_CLIENT_ID = "rmq-proxy-producer-client";
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/TransactionDataManager.java
Patch:
@@ -29,13 +29,13 @@
 import java.util.concurrent.atomic.AtomicReference;
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 
 public class TransactionDataManager implements StartAndShutdown {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected final AtomicLong maxTransactionDataExpireTime = new AtomicLong(System.currentTimeMillis());
     protected final Map<String /* producerGroup@transactionId */, NavigableSet<TransactionData>> transactionIdDataMap = new ConcurrentHashMap<>();

File: proxy/src/test/java/org/apache/rocketmq/proxy/common/ReceiptHandleGroupTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
 import org.apache.rocketmq.common.message.MessageClientIDSetter;
 import org.apache.rocketmq.proxy.common.utils.FutureUtils;
-import org.apache.rocketmq.proxy.config.InitConfigTest;
+import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -37,7 +37,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
-public class ReceiptHandleGroupTest extends InitConfigTest {
+public class ReceiptHandleGroupTest extends InitConfigAndLoggerTest {
 
     private static final String TOPIC = "topic";
     private static final String GROUP = "group";

File: proxy/src/test/java/org/apache/rocketmq/proxy/config/ConfigurationManagerTest.java
Patch:
@@ -22,7 +22,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class ConfigurationManagerTest extends InitConfigTest {
+public class ConfigurationManagerTest extends InitConfigAndLoggerTest {
 
     @Test
     public void testInitEnv() {

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/AbstractMessingActivityTest.java
Patch:
@@ -20,7 +20,7 @@
 import apache.rocketmq.v2.Resource;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.proxy.config.InitConfigTest;
+import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
 import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcProxyException;
@@ -30,7 +30,7 @@
 
 import static org.junit.Assert.assertThrows;
 
-public class AbstractMessingActivityTest extends InitConfigTest {
+public class AbstractMessingActivityTest extends InitConfigAndLoggerTest {
 
     public static class MockMessingActivity extends AbstractMessingActivity {
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/BaseActivityTest.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.UUID;
 import org.apache.rocketmq.proxy.common.ContextVariable;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.apache.rocketmq.proxy.config.InitConfigTest;
+import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
 import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
 import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
@@ -41,7 +41,7 @@
 
 @Ignore
 @RunWith(MockitoJUnitRunner.Silent.class)
-public class BaseActivityTest extends InitConfigTest {
+public class BaseActivityTest extends InitConfigAndLoggerTest {
     protected static final Random RANDOM = new Random();
     protected MessagingProcessor messagingProcessor;
     protected GrpcClientSettingsManager grpcClientSettingsManager;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplicationTest.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.apache.rocketmq.proxy.config.InitConfigTest;
+import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
 import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
 import org.junit.Assert;
@@ -47,7 +47,7 @@
 import static org.junit.Assert.assertEquals;
 
 @RunWith(MockitoJUnitRunner.class)
-public class GrpcMessagingApplicationTest extends InitConfigTest {
+public class GrpcMessagingApplicationTest extends InitConfigAndLoggerTest {
     protected static final String REMOTE_ADDR = "192.168.0.1:8080";
     protected static final String LOCAL_ADDR = "127.0.0.1:8080";
     protected static final String CLIENT_ID = "client-id" + UUID.randomUUID();

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/BaseProcessorTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.apache.rocketmq.proxy.config.InitConfigTest;
+import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
 import org.apache.rocketmq.proxy.service.ServiceManager;
 import org.apache.rocketmq.proxy.service.message.MessageService;
 import org.apache.rocketmq.proxy.service.metadata.MetadataService;
@@ -45,7 +45,7 @@
 
 @Ignore
 @RunWith(MockitoJUnitRunner.Silent.class)
-public class BaseProcessorTest extends InitConfigTest {
+public class BaseProcessorTest extends InitConfigAndLoggerTest {
     protected static final Random RANDOM = new Random();
 
     @Mock

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/BaseServiceTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.HashMap;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.MixAll;
-import org.apache.rocketmq.proxy.config.InitConfigTest;
+import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
 import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIExt;
 import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.proxy.service.route.MessageQueueView;
@@ -41,7 +41,7 @@
 
 @Ignore
 @RunWith(MockitoJUnitRunner.Silent.class)
-public class BaseServiceTest extends InitConfigTest {
+public class BaseServiceTest extends InitConfigAndLoggerTest {
 
     protected TopicRouteService topicRouteService;
     protected MQClientAPIFactory mqClientAPIFactory;

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/message/LocalMessageServiceTest.java
Patch:
@@ -51,7 +51,7 @@
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
-import org.apache.rocketmq.proxy.config.InitConfigTest;
+import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
 import org.apache.rocketmq.proxy.service.channel.ChannelManager;
 import org.apache.rocketmq.proxy.service.channel.SimpleChannelHandlerContext;
 import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
@@ -80,7 +80,7 @@
 import static org.assertj.core.api.Assertions.catchThrowableOfType;
 
 @RunWith(MockitoJUnitRunner.class)
-public class LocalMessageServiceTest extends InitConfigTest {
+public class LocalMessageServiceTest extends InitConfigAndLoggerTest {
     private LocalMessageService localMessageService;
     @Mock
     private SendMessageProcessor sendMessageProcessorMock;

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/transaction/AbstractTransactionServiceTest.java
Patch:
@@ -24,15 +24,15 @@
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.apache.rocketmq.proxy.config.InitConfigTest;
+import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
 import org.junit.Before;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 
-public class AbstractTransactionServiceTest extends InitConfigTest {
+public class AbstractTransactionServiceTest extends InitConfigAndLoggerTest {
 
     private static final String BROKER_NAME = "mockBroker";
     private static final String PRODUCER_GROUP = "producerGroup";

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/transaction/TransactionDataManagerTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.commons.lang3.time.StopWatch;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.message.MessageClientIDSetter;
-import org.apache.rocketmq.proxy.config.InitConfigTest;
+import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
 import org.junit.After;
 import org.junit.Assume;
 import org.junit.Before;
@@ -34,7 +34,7 @@
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 
-public class TransactionDataManagerTest extends InitConfigTest {
+public class TransactionDataManagerTest extends InitConfigAndLoggerTest {
     private static final String PRODUCER_GROUP = "producerGroup";
     private static final Random RANDOM = new Random();
     private TransactionDataManager transactionDataManager;

File: remoting/src/main/java/org/apache/rocketmq/remoting/common/RemotingHelper.java
Patch:
@@ -27,8 +27,8 @@
 import java.nio.ByteBuffer;
 import java.nio.channels.SocketChannel;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.exception.RemotingConnectException;
 import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
@@ -42,7 +42,7 @@ public class RemotingHelper {
     public static final String DEFAULT_CHARSET = "UTF-8";
     public static final String DEFAULT_CIDR_ALL = "0.0.0.0/0";
 
-    private static final Logger log = LoggerFactory.getLogger(ROCKETMQ_REMOTING);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(ROCKETMQ_REMOTING);
     private static final AttributeKey<String> REMOTE_ADDR_KEY = AttributeKey.valueOf("RemoteAddr");
 
     public static SocketAddress string2SocketAddress(final String addr) {

File: remoting/src/main/java/org/apache/rocketmq/remoting/common/ServiceThread.java
Patch:
@@ -17,14 +17,14 @@
 package org.apache.rocketmq.remoting.common;
 
 
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 /**
  * Base class for background thread
  */
 public abstract class ServiceThread implements Runnable {
-    private static final Logger log = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
 
     private static final long JOIN_TIME = 90 * 1000;
     protected final Thread thread;

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyDecoder.java
Patch:
@@ -20,13 +20,13 @@
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.LengthFieldBasedFrameDecoder;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public class NettyDecoder extends LengthFieldBasedFrameDecoder {
-    private static final Logger log = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
 
     private static final int FRAME_MAX_LENGTH =
         Integer.parseInt(System.getProperty("com.rocketmq.remoting.frameMaxLength", "16777216"));

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyEncoder.java
Patch:
@@ -20,14 +20,14 @@
 import io.netty.channel.ChannelHandler;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToByteEncoder;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 @ChannelHandler.Sharable
 public class NettyEncoder extends MessageToByteEncoder<RemotingCommand> {
-    private static final Logger log = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
 
     @Override
     public void encode(ChannelHandlerContext ctx, RemotingCommand remotingCommand, ByteBuf out)

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -42,8 +42,8 @@
 import org.apache.rocketmq.common.Pair;
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.UtilAll;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
 import org.apache.rocketmq.remoting.InvokeCallback;
 import org.apache.rocketmq.remoting.RPCHook;
@@ -69,7 +69,7 @@ public abstract class NettyRemotingAbstract {
     /**
      * Remoting logger instance.
      */
-    private static final Logger log = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
 
     /**
      * Semaphore to limit maximum number of on-going one-way requests, which protects system memory footprint.

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -69,8 +69,8 @@
 import java.util.concurrent.locks.ReentrantLock;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.Pair;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
 import org.apache.rocketmq.remoting.InvokeCallback;
 import org.apache.rocketmq.remoting.RemotingClient;
@@ -83,7 +83,7 @@
 import org.apache.rocketmq.remoting.proxy.SocksProxyConfig;
 
 public class NettyRemotingClient extends NettyRemotingAbstract implements RemotingClient {
-    private static final Logger LOGGER = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
 
     private static final long LOCK_TIMEOUT_MILLIS = 3000;
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/TlsHelper.java
Patch:
@@ -31,8 +31,8 @@
 import java.security.cert.CertificateException;
 import java.util.Properties;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.TLS_CLIENT_AUTHSERVER;
 import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.TLS_CLIENT_CERTPATH;
@@ -73,7 +73,7 @@ public interface DecryptionStrategy {
         InputStream decryptPrivateKey(String privateKeyEncryptPath, boolean forClient) throws IOException;
     }
 
-    private static final Logger LOGGER = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
 
     private static DecryptionStrategy decryptionStrategy = new DecryptionStrategy() {
         @Override

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/MQProtosHelper.java
Patch:
@@ -18,13 +18,13 @@
 package org.apache.rocketmq.remoting.protocol;
 
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterBrokerRequestHeader;
 
 public class MQProtosHelper {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     public static boolean registerBrokerToNameServer(final String nsaddr, final String brokerAddr,
         final long timeoutMillis) {

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java
Patch:
@@ -32,8 +32,8 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicInteger;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
@@ -43,7 +43,7 @@ public class RemotingCommand {
     public static final String SERIALIZE_TYPE_PROPERTY = "rocketmq.serialize.type";
     public static final String SERIALIZE_TYPE_ENV = "ROCKETMQ_SERIALIZE_TYPE";
     public static final String REMOTING_VERSION_KEY = "rocketmq.remoting.version";
-    static final Logger log = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    static final InternalLogger log = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
     private static final int RPC_TYPE = 0; // 0, REQUEST_COMMAND
     private static final int RPC_ONEWAY = 1; // 0, RPC
     private static final Map<Class<? extends CommandCustomHeader>, Field[]> CLASS_HASH_MAP =

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/RegisterBrokerBody.java
Patch:
@@ -33,15 +33,15 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingInfo;
 
 public class RegisterBrokerBody extends RemotingSerializable {
 
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
     private TopicConfigAndMappingSerializeWrapper topicConfigSerializeWrapper = new TopicConfigAndMappingSerializeWrapper();
     private List<String> filterServerList = new ArrayList<>();
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/rpc/ClientMetadata.java
Patch:
@@ -27,16 +27,16 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
 import org.apache.rocketmq.remoting.protocol.route.BrokerData;
 import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
 import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingInfo;
 import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingUtils;
 
 public class ClientMetadata {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private final ConcurrentMap<String/* Topic */, TopicRouteData> topicRouteTable = new ConcurrentHashMap<>();
     private final ConcurrentMap<String/* Topic */, ConcurrentMap<MessageQueue, String/*brokerName*/>> topicEndPointsTable = new ConcurrentHashMap<>();

File: srvutil/src/main/java/org/apache/rocketmq/srvutil/AclFileWatchService.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import java.io.File;
 import java.io.IOException;
 import java.nio.file.Files;
@@ -34,7 +34,7 @@
 import java.util.Map;
 
 public class AclFileWatchService extends ServiceThread {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private final String aclPath;
     private int aclFilesNum;

File: srvutil/src/main/java/org/apache/rocketmq/srvutil/FileWatchService.java
Patch:
@@ -29,11 +29,11 @@
 import org.apache.rocketmq.common.LifecycleAwareServiceThread;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 public class FileWatchService extends LifecycleAwareServiceThread {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private final Map<String, String> currentHash = new HashMap<>();
     private final Listener listener;

File: srvutil/src/main/java/org/apache/rocketmq/srvutil/ShutdownHookThread.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.rocketmq.srvutil;
 
-import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.logging.InternalLogger;
 
 import java.util.concurrent.Callable;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -29,7 +29,7 @@
 public class ShutdownHookThread extends Thread {
     private volatile boolean hasShutdown = false;
     private AtomicInteger shutdownTimes = new AtomicInteger(0);
-    private final Logger log;
+    private final InternalLogger log;
     private final Callable callback;
 
     /**
@@ -38,7 +38,7 @@ public class ShutdownHookThread extends Thread {
      * @param log The log instance is used in hook thread.
      * @param callback The call back function.
      */
-    public ShutdownHookThread(Logger log, Callable callback) {
+    public ShutdownHookThread(InternalLogger log, Callable callback) {
         super("ShutdownHook");
         this.log = log;
         this.callback = callback;

File: store/src/main/java/org/apache/rocketmq/store/AllocateMappedFileService.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.logfile.DefaultMappedFile;
 import org.apache.rocketmq.store.logfile.MappedFile;
@@ -37,7 +37,7 @@
  * Create MappedFile in advance
  */
 public class AllocateMappedFileService extends ServiceThread {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
     private static int waitTimeOut = 1000 * 5;
     private ConcurrentMap<String, AllocateRequest> requestTable =
         new ConcurrentHashMap<>();

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -45,8 +45,8 @@
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.QueueTypeUtils;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.store.MessageExtEncoder.PutMessageThreadLocal;
 import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.config.FlushDiskType;
@@ -60,7 +60,7 @@
 public class CommitLog implements Swappable {
     // Message's MAGIC CODE daa320a7
     public final static int MESSAGE_MAGIC_CODE = -626843481;
-    protected static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
     // End of file empty MAGIC CODE cbd43194
     public final static int BLANK_MAGIC_CODE = -875286124;
     protected final MappedFileQueue mappedFileQueue;

File: store/src/main/java/org/apache/rocketmq/store/ConsumeQueueExt.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.rocketmq.store;
 
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 import java.io.File;
 import java.nio.ByteBuffer;
@@ -38,7 +38,7 @@
  * <li>4. Pls keep this file small.</li>
  */
 public class ConsumeQueueExt {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
 
     private final MappedFileQueue mappedFileQueue;
     private final String topic;

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -71,8 +71,8 @@
 import org.apache.rocketmq.common.utils.CleanupPolicyUtils;
 import org.apache.rocketmq.common.utils.QueueTypeUtils;
 import org.apache.rocketmq.common.utils.ServiceProvider;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;
 import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.config.FlushDiskType;
@@ -99,7 +99,7 @@
 import org.apache.rocketmq.store.util.PerfCounter;
 
 public class DefaultMessageStore implements MessageStore {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
 
     public final PerfCounter.Ticks perfs = new PerfCounter.Ticks(LOGGER);
 

File: store/src/main/java/org/apache/rocketmq/store/FlushDiskWatcher.java
Patch:
@@ -21,12 +21,12 @@
 
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.store.CommitLog.GroupCommitRequest;
 
 public class FlushDiskWatcher extends ServiceThread {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
     private final LinkedBlockingQueue<GroupCommitRequest> commitRequests = new LinkedBlockingQueue<>();
 
     @Override

File: store/src/main/java/org/apache/rocketmq/store/MessageExtEncoder.java
Patch:
@@ -25,13 +25,13 @@
 import org.apache.rocketmq.common.message.MessageExtBatch;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 import java.nio.ByteBuffer;
 
 public class MessageExtEncoder {
-    protected static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
     private ByteBuf byteBuf;
     // The maximum length of the message body.
     private int maxMessageBodySize;

File: store/src/main/java/org/apache/rocketmq/store/StoreCheckpoint.java
Patch:
@@ -24,12 +24,12 @@
 import java.nio.channels.FileChannel.MapMode;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.store.logfile.DefaultMappedFile;
 
 public class StoreCheckpoint {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
     private final RandomAccessFile randomAccessFile;
     private final FileChannel fileChannel;
     private final MappedByteBuffer mappedByteBuffer;

File: store/src/main/java/org/apache/rocketmq/store/StoreStatsService.java
Patch:
@@ -31,11 +31,11 @@
 import org.apache.rocketmq.common.BrokerIdentity;
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 public class StoreStatsService extends ServiceThread {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
 
     private static final int FREQUENCY_OF_SAMPLING = 1000;
 

File: store/src/main/java/org/apache/rocketmq/store/StoreUtil.java
Patch:
@@ -18,8 +18,8 @@
 
 import com.google.common.base.Preconditions;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.shade.org.slf4j.Logger;
-import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.store.logfile.MappedFile;
 
 import java.lang.management.ManagementFactory;
@@ -29,7 +29,7 @@
 import static java.lang.String.format;
 
 public class StoreUtil {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
 
     public static final long TOTAL_PHYSICAL_MEMORY_SIZE = getTotalPhysicalMemorySize();
 

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -1427,6 +1427,8 @@ protected void shutdownScheduledExecutorService(ScheduledExecutorService schedul
         try {
             scheduledExecutorService.awaitTermination(5000, TimeUnit.MILLISECONDS);
         } catch (InterruptedException ignore) {
+            BrokerController.LOG.warn("shutdown ScheduledExecutorService was Interrupted!  ", ignore);
+            Thread.currentThread().interrupt();
         }
     }
 

File: acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java
Patch:
@@ -22,13 +22,13 @@
 import javax.crypto.spec.SecretKeySpec;
 import org.apache.commons.codec.binary.Base64;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class AclSigner {
     public static final Charset DEFAULT_CHARSET = StandardCharsets.UTF_8;
     public static final SigningAlgorithm DEFAULT_ALGORITHM = SigningAlgorithm.HmacSHA1;
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_AUTHORIZE_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.ROCKETMQ_AUTHORIZE_LOGGER_NAME);
     private static final int CAL_SIGNATURE_FAILED = 10015;
     private static final String CAL_SIGNATURE_FAILED_MSG = "[%s:signature-failed] unable to calculate a request signature. error=%s";
 

File: acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java
Patch:
@@ -27,8 +27,8 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.yaml.snakeyaml.Yaml;
@@ -37,7 +37,7 @@
 
 public class AclUtils {
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     public static byte[] combineRequestContent(RemotingCommand request, SortedMap<String, String> fieldsMap) {
         try {

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainPermissionManager.java
Patch:
@@ -45,14 +45,14 @@
 import org.apache.rocketmq.common.PlainAccessConfig;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.srvutil.AclFileWatchService;
 
 public class PlainPermissionManager {
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private String fileHome = System.getProperty(MixAll.ROCKETMQ_HOME_PROPERTY,
         System.getenv(MixAll.ROCKETMQ_HOME_ENV));

File: acl/src/main/java/org/apache/rocketmq/acl/plain/RemoteAddressStrategyFactory.java
Patch:
@@ -23,12 +23,12 @@
 import org.apache.rocketmq.acl.common.AclException;
 import org.apache.rocketmq.acl.common.AclUtils;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class RemoteAddressStrategyFactory {
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     public static final NullRemoteAddressStrategy NULL_NET_ADDRESS_STRATEGY = new NullRemoteAddressStrategy();
 

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerPreOnlineService.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.BrokerSyncInfo;
 import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
@@ -41,7 +41,7 @@
 import org.apache.rocketmq.store.timer.TimerCheckpoint;
 
 public class BrokerPreOnlineService extends ServiceThread {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 
     private int waitBrokerIndex = 0;

File: broker/src/main/java/org/apache/rocketmq/broker/client/ClientHousekeepingService.java
Patch:
@@ -23,12 +23,12 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
 
 public class ClientHousekeepingService implements ChannelEventListener {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 
     private ScheduledExecutorService scheduledExecutorService;

File: broker/src/main/java/org/apache/rocketmq/broker/client/ConsumerGroupInfo.java
Patch:
@@ -26,14 +26,14 @@
 import java.util.concurrent.ConcurrentMap;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
 public class ConsumerGroupInfo {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final String groupName;
     private final ConcurrentMap<String/* Topic */, SubscriptionData> subscriptionTable =
         new ConcurrentHashMap<>();

File: broker/src/main/java/org/apache/rocketmq/broker/client/ConsumerManager.java
Patch:
@@ -28,16 +28,16 @@
 import java.util.stream.Collectors;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.store.stats.BrokerStatsManager;
 
 public class ConsumerManager {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private static final long CHANNEL_EXPIRED_TIMEOUT = 1000 * 120;
     private final ConcurrentMap<String, ConsumerGroupInfo> consumerTable =
         new ConcurrentHashMap<>(1024);

File: broker/src/main/java/org/apache/rocketmq/broker/client/DefaultConsumerIdsChangeListener.java
Patch:
@@ -28,12 +28,12 @@
 import org.apache.rocketmq.common.AbstractBrokerRunnable;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.utils.ThreadUtils;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
 public class DefaultConsumerIdsChangeListener implements ConsumerIdsChangeListener {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
     private final int cacheSize = 8096;
 

File: broker/src/main/java/org/apache/rocketmq/broker/client/ProducerManager.java
Patch:
@@ -28,15 +28,15 @@
 import java.util.concurrent.CopyOnWriteArrayList;
 import org.apache.rocketmq.broker.util.PositiveAtomicCounter;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.body.ProducerInfo;
 import org.apache.rocketmq.remoting.protocol.body.ProducerTableInfo;
 import org.apache.rocketmq.store.stats.BrokerStatsManager;
 
 public class ProducerManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private static final long CHANNEL_EXPIRED_TIMEOUT = 1000 * 120;
     private static final int GET_AVAILABLE_CHANNEL_RETRY_COUNT = 3;
     private final ConcurrentHashMap<String /* group name */, ConcurrentHashMap<Channel, ClientChannelInfo>> groupChannelTable =

File: broker/src/main/java/org/apache/rocketmq/broker/client/net/Broker2Client.java
Patch:
@@ -34,8 +34,8 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.message.MessageQueueForC;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
 import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
@@ -51,7 +51,7 @@
 import org.apache.rocketmq.remoting.protocol.header.ResetOffsetRequestHeader;
 
 public class Broker2Client {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 
     public Broker2Client(BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/client/rebalance/RebalanceLockManager.java
Patch:
@@ -18,8 +18,8 @@
 
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 import java.util.HashSet;
 import java.util.Set;
@@ -29,7 +29,7 @@
 import java.util.concurrent.locks.ReentrantLock;
 
 public class RebalanceLockManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.REBALANCE_LOCK_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.REBALANCE_LOCK_LOGGER_NAME);
     private final static long REBALANCE_LOCK_MAX_LIVE_TIME = Long.parseLong(System.getProperty(
         "rocketmq.broker.rebalance.lockMaxLiveTime", "60000"));
     private final Lock lock = new ReentrantLock();

File: broker/src/main/java/org/apache/rocketmq/broker/controller/ReplicasManager.java
Patch:
@@ -36,8 +36,8 @@
 import org.apache.rocketmq.common.Pair;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.EpochEntry;
 import org.apache.rocketmq.remoting.protocol.body.SyncStateSet;
 import org.apache.rocketmq.remoting.protocol.header.namesrv.controller.GetMetaDataResponseHeader;
@@ -55,7 +55,7 @@
  * syncStateSet, only master will start this timed task.
  */
 public class ReplicasManager {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private static final int RETRY_INTERVAL_SECOND = 5;
 

File: broker/src/main/java/org/apache/rocketmq/broker/dledger/DLedgerRoleChangeHandler.java
Patch:
@@ -27,15 +27,15 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.DefaultMessageStore;
 import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.dledger.DLedgerCommitLog;
 
 public class DLedgerRoleChangeHandler implements DLedgerLeaderElector.RoleChangeHandler {
 
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private ExecutorService executorService;
     private BrokerController brokerController;
     private DefaultMessageStore messageStore;

File: broker/src/main/java/org/apache/rocketmq/broker/failover/EscapeBridge.java
Patch:
@@ -44,16 +44,16 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.store.GetMessageResult;
 import org.apache.rocketmq.store.MessageStore;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
 
 public class EscapeBridge {
-    protected static final InternalLogger LOG = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    protected static final Logger LOG = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private static final long SEND_TIMEOUT = 3000L;
     private static final long DEFAULT_PULL_TIMEOUT_MILLIS = 1000 * 10L;
     private final String innerProducerGroupName;

File: broker/src/main/java/org/apache/rocketmq/broker/filter/CommitLogDispatcherCalcBitMap.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.filter.util.BitsArray;
 import org.apache.rocketmq.store.CommitLogDispatcher;
 import org.apache.rocketmq.store.DispatchRequest;
@@ -34,7 +34,7 @@
  */
 public class CommitLogDispatcherCalcBitMap implements CommitLogDispatcher {
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.FILTER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.FILTER_LOGGER_NAME);
 
     protected final BrokerConfig brokerConfig;
     protected final ConsumerFilterManager consumerFilterManager;

File: broker/src/main/java/org/apache/rocketmq/broker/filter/ConsumerFilterManager.java
Patch:
@@ -32,8 +32,8 @@
 import org.apache.rocketmq.filter.FilterFactory;
 import org.apache.rocketmq.filter.util.BloomFilter;
 import org.apache.rocketmq.filter.util.BloomFilterData;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
@@ -42,7 +42,7 @@
  */
 public class ConsumerFilterManager extends ConfigManager {
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.FILTER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.FILTER_LOGGER_NAME);
 
     private static final long MS_24_HOUR = 24 * 3600 * 1000;
 

File: broker/src/main/java/org/apache/rocketmq/broker/filter/ExpressionMessageFilter.java
Patch:
@@ -24,15 +24,15 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.filter.util.BitsArray;
 import org.apache.rocketmq.filter.util.BloomFilter;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.store.ConsumeQueueExt;
 import org.apache.rocketmq.store.MessageFilter;
 
 public class ExpressionMessageFilter implements MessageFilter {
 
-    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.FILTER_LOGGER_NAME);
+    protected static final Logger log = LoggerFactory.getLogger(LoggerName.FILTER_LOGGER_NAME);
 
     protected final SubscriptionData subscriptionData;
     protected final ConsumerFilterData consumerFilterData;

File: broker/src/main/java/org/apache/rocketmq/broker/filtersrv/FilterServerManager.java
Patch:
@@ -33,14 +33,14 @@
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 
 public class FilterServerManager {
 
     public static final long FILTER_SERVER_MAX_IDLE_TIME_MILLS = 30000;
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final ConcurrentMap<Channel, FilterServerInfo> filterServerTable =
         new ConcurrentHashMap<>(16);
     private final BrokerController brokerController;

File: broker/src/main/java/org/apache/rocketmq/broker/filtersrv/FilterServerUtil.java
Patch:
@@ -18,10 +18,10 @@
 package org.apache.rocketmq.broker.filtersrv;
 
 
-import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
 
 public class FilterServerUtil {
-    public static void callShell(final String shellString, final InternalLogger log) {
+    public static void callShell(final String shellString, final Logger log) {
         Process process = null;
         try {
             String[] cmdArray = splitShellString(shellString);

File: broker/src/main/java/org/apache/rocketmq/broker/latency/BrokerFastFailure.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.netty.RequestTask;
 import org.apache.rocketmq.remoting.protocol.RemotingSysResponseCode;
 
@@ -35,7 +35,7 @@
  * BrokerController#getPullThreadPoolQueue()}
  */
 public class BrokerFastFailure {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final ScheduledExecutorService scheduledExecutorService;
     private final BrokerController brokerController;
 

File: broker/src/main/java/org/apache/rocketmq/broker/longpolling/LmqPullRequestHoldService.java
Patch:
@@ -19,12 +19,12 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 
 public class LmqPullRequestHoldService extends PullRequestHoldService {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     public LmqPullRequestHoldService(BrokerController brokerController) {
         super(brokerController);

File: broker/src/main/java/org/apache/rocketmq/broker/longpolling/PullRequestHoldService.java
Patch:
@@ -25,12 +25,12 @@
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.SystemClock;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.ConsumeQueueExt;
 
 public class PullRequestHoldService extends ServiceThread {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     protected static final String TOPIC_QUEUEID_SEPARATOR = "@";
     protected final BrokerController brokerController;
     private final SystemClock systemClock = new SystemClock();

File: broker/src/main/java/org/apache/rocketmq/broker/metrics/BrokerMetricsManager.java
Patch:
@@ -56,8 +56,8 @@
 import org.apache.rocketmq.common.metrics.NopLongHistogram;
 import org.apache.rocketmq.common.metrics.NopObservableLongGauge;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.metrics.RemotingMetricsManager;
 import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
 import org.apache.rocketmq.store.DefaultMessageStore;
@@ -97,7 +97,7 @@
 import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.PROTOCOL_TYPE_REMOTING;
 
 public class BrokerMetricsManager {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final BrokerConfig brokerConfig;
     private final MessageStore messageStore;

File: broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java
Patch:
@@ -33,8 +33,8 @@
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.constant.PermName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.store.MessageStore;
 import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
@@ -49,7 +49,7 @@ public class ConsumerLagCalculator {
     private final MessageStore messageStore;
     private final PopBufferMergeService popBufferMergeService;
 
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     public ConsumerLagCalculator(BrokerController brokerController) {
         this.brokerConfig = brokerController.getBrokerConfig();

File: broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOffsetManager.java
Patch:
@@ -31,13 +31,13 @@
 import org.apache.rocketmq.common.ConfigManager;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
 public class ConsumerOffsetManager extends ConfigManager {
-    private static final InternalLogger LOG = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOG = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     public static final String TOPIC_GROUP_SEPARATOR = "@";
 
     private DataVersion dataVersion = new DataVersion();

File: broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOrderInfoLockManager.java
Patch:
@@ -29,11 +29,11 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class ConsumerOrderInfoLockManager {
-    private static final InternalLogger POP_LOGGER = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
+    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
     private final BrokerController brokerController;
     private final Map<Key, Timeout> timeoutMap = new ConcurrentHashMap<>();
     private final Timer timer;

File: broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOrderInfoManager.java
Patch:
@@ -32,14 +32,14 @@
 import org.apache.rocketmq.common.ConfigManager;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
 
 public class ConsumerOrderInfoManager extends ConfigManager {
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private static final String TOPIC_GROUP_SEPARATOR = "@";
     private static final long CLEAN_SPAN_FROM_LAST = 24 * 3600 * 1000;
 

File: broker/src/main/java/org/apache/rocketmq/broker/out/BrokerOuterAPI.java
Patch:
@@ -58,8 +58,8 @@
 import org.apache.rocketmq.common.namesrv.TopAddressing;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.InvokeCallback;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.RemotingClient;
@@ -132,7 +132,7 @@
 import static org.apache.rocketmq.remoting.protocol.ResponseCode.CONTROLLER_NOT_LEADER;
 
 public class BrokerOuterAPI {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final RemotingClient remotingClient;
     private final TopAddressing topAddressing = new DefaultTopAddressing(MixAll.getWSAddr());
     private String nameSrvAddr = null;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AckMessageProcessor.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.utils.DataConverter;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -43,7 +43,7 @@
 import org.apache.rocketmq.store.pop.AckMsg;
 
 public class AckMessageProcessor implements NettyRequestProcessor {
-    private static final InternalLogger POP_LOGGER = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
+    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
     private final BrokerController brokerController;
     private String reviveTopic;
     private PopReviveService[] popReviveServices;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -72,8 +72,8 @@
 import org.apache.rocketmq.common.stats.StatsSnapshot;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.filter.util.BitsArray;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
@@ -189,7 +189,7 @@
 import static org.apache.rocketmq.remoting.protocol.RemotingCommand.buildErrorResponse;
 
 public class AdminBrokerProcessor implements NettyRequestProcessor {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     protected final BrokerController brokerController;
 
     public AdminBrokerProcessor(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ChangeInvisibleTimeProcessor.java
Patch:
@@ -28,8 +28,8 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.utils.DataConverter;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -44,7 +44,7 @@
 import org.apache.rocketmq.store.pop.PopCheckPoint;
 
 public class ChangeInvisibleTimeProcessor implements NettyRequestProcessor {
-    private static final InternalLogger POP_LOGGER = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
+    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
     private final BrokerController brokerController;
     private final String reviveTopic;
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ClientManageProcessor.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.common.filter.ExpressionType;
 import org.apache.rocketmq.common.sysflag.TopicSysFlag;
 import org.apache.rocketmq.filter.FilterFactory;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -44,7 +44,7 @@
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public class ClientManageProcessor implements NettyRequestProcessor {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 
     public ClientManageProcessor(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ConsumerManageProcessor.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
 import org.apache.rocketmq.broker.offset.ConsumerOffsetManager;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -48,7 +48,7 @@
 import static org.apache.rocketmq.remoting.protocol.RemotingCommand.buildErrorResponse;
 
 public class ConsumerManageProcessor implements NettyRequestProcessor {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 
     public ConsumerManageProcessor(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/DefaultPullMessageResultHandler.java
Patch:
@@ -39,8 +39,8 @@
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.metrics.RemotingMetricsManager;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.remoting.protocol.ResponseCode;
@@ -63,7 +63,7 @@
 
 public class DefaultPullMessageResultHandler implements PullMessageResultHandler {
 
-    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    protected static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     protected final BrokerController brokerController;
 
     public DefaultPullMessageResultHandler(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/EndTransactionProcessor.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -42,7 +42,7 @@
  * EndTransaction processor: process commit and rollback message
  */
 public class EndTransactionProcessor implements NettyRequestProcessor {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
     private final BrokerController brokerController;
 
     public EndTransactionProcessor(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ForwardRequestProcessor.java
Patch:
@@ -19,13 +19,13 @@
 import io.netty.channel.ChannelHandlerContext;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public class ForwardRequestProcessor implements NettyRequestProcessor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final BrokerController brokerController;
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/NotificationProcessor.java
Patch:
@@ -32,8 +32,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.constant.PermName;
 import org.apache.rocketmq.common.help.FAQUrl;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRemotingAbstract;
@@ -46,7 +46,7 @@
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public class NotificationProcessor implements NettyRequestProcessor {
-    private static final InternalLogger POP_LOGGER = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
+    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
     private final BrokerController brokerController;
     private Random random = new Random(System.currentTimeMillis());
     private static final String BORN_TIME = "bornTime";

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PeekMessageProcessor.java
Patch:
@@ -36,8 +36,8 @@
 import org.apache.rocketmq.common.help.FAQUrl;
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.metrics.RemotingMetricsManager;
@@ -59,7 +59,7 @@
 import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_RESULT;
 
 public class PeekMessageProcessor implements NettyRequestProcessor {
-    private static final InternalLogger LOG = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOG = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
     private Random random = new Random(System.currentTimeMillis());
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PollingInfoProcessor.java
Patch:
@@ -26,8 +26,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.constant.PermName;
 import org.apache.rocketmq.common.help.FAQUrl;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -38,7 +38,7 @@
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public class PollingInfoProcessor implements NettyRequestProcessor {
-    private static final InternalLogger POP_LOGGER = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
+    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
     private final BrokerController brokerController;
 
     public PollingInfoProcessor(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopBufferMergeService.java
Patch:
@@ -31,8 +31,8 @@
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.utils.DataConverter;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
@@ -41,7 +41,7 @@
 import org.apache.rocketmq.store.pop.PopCheckPoint;
 
 public class PopBufferMergeService extends ServiceThread {
-    private static final InternalLogger POP_LOGGER = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
+    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
     ConcurrentHashMap<String/*mergeKey*/, PopCheckPointWrapper>
         buffer = new ConcurrentHashMap<>(1024 * 16);
     ConcurrentHashMap<String/*topic@cid@queueId*/, QueueWithTime<PopCheckPointWrapper>> commitOffsets =

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
Patch:
@@ -42,8 +42,8 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.DataConverter;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.AppendMessageStatus;
 import org.apache.rocketmq.store.GetMessageResult;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
@@ -56,7 +56,7 @@
 import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
 
 public class PopReviveService extends ServiceThread {
-    private static final InternalLogger POP_LOGGER = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
+    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
 
     private int queueId;
     private BrokerController brokerController;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PullMessageProcessor.java
Patch:
@@ -38,8 +38,8 @@
 import org.apache.rocketmq.common.filter.ExpressionType;
 import org.apache.rocketmq.common.help.FAQUrl;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRemotingAbstract;
@@ -75,7 +75,7 @@
 import static org.apache.rocketmq.remoting.protocol.RemotingCommand.buildErrorResponse;
 
 public class PullMessageProcessor implements NettyRequestProcessor {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private List<ConsumeMessageHook> consumeMessageHookList;
     private PullMessageResultHandler pullMessageResultHandler;
     private final BrokerController brokerController;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/QueryMessageProcessor.java
Patch:
@@ -26,8 +26,8 @@
 import org.apache.rocketmq.broker.pagecache.QueryMessageTransfer;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.metrics.RemotingMetricsManager;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -45,7 +45,7 @@
 import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_RESULT;
 
 public class QueryMessageProcessor implements NettyRequestProcessor {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 
     public QueryMessageProcessor(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ReplyMessageProcessor.java
Patch:
@@ -36,8 +36,8 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
@@ -55,7 +55,7 @@
 import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
 
 public class ReplyMessageProcessor extends AbstractSendMessageProcessor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     public ReplyMessageProcessor(final BrokerController brokerController) {
         super(brokerController);

File: broker/src/main/java/org/apache/rocketmq/broker/schedule/ScheduleMessageService.java
Patch:
@@ -50,8 +50,8 @@
 import org.apache.rocketmq.common.running.RunningStats;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.ThreadUtils;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
@@ -66,7 +66,7 @@
 import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
 
 public class ScheduleMessageService extends ConfigManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private static final long FIRST_DELAY_TIME = 1000L;
     private static final long DELAY_FOR_A_WHILE = 100L;

File: broker/src/main/java/org/apache/rocketmq/broker/slave/SlaveSynchronize.java
Patch:
@@ -23,8 +23,8 @@
 import org.apache.rocketmq.broker.subscription.SubscriptionGroupManager;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.body.ConsumerOffsetSerializeWrapper;
 import org.apache.rocketmq.remoting.protocol.body.MessageRequestModeSerializeWrapper;
 import org.apache.rocketmq.remoting.protocol.body.SubscriptionGroupWrapper;
@@ -34,7 +34,7 @@
 import org.apache.rocketmq.store.timer.TimerMetrics;
 
 public class SlaveSynchronize {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
     private volatile String masterAddr = null;
 

File: broker/src/main/java/org/apache/rocketmq/broker/subscription/SubscriptionGroupManager.java
Patch:
@@ -26,14 +26,14 @@
 import org.apache.rocketmq.common.ConfigManager;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public class SubscriptionGroupManager extends ConfigManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final ConcurrentMap<String, SubscriptionGroupConfig> subscriptionGroupTable =
         new ConcurrentHashMap<>(1024);

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java
Patch:
@@ -42,16 +42,16 @@
 import org.apache.rocketmq.common.constant.PermName;
 import org.apache.rocketmq.common.sysflag.TopicSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.remoting.protocol.body.KVTable;
 import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
 public class TopicConfigManager extends ConfigManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private static final long LOCK_TIMEOUT_MILLIS = 3000;
     private static final int SCHEDULE_TOPIC_QUEUE_NUM = 18;
 

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicQueueMappingCleanService.java
Patch:
@@ -30,8 +30,8 @@
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.RequestCode;
 import org.apache.rocketmq.remoting.protocol.admin.TopicOffset;
 import org.apache.rocketmq.remoting.protocol.admin.TopicStatsTable;
@@ -49,7 +49,7 @@
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 
 public class TopicQueueMappingCleanService extends ServiceThread {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private TopicQueueMappingManager topicQueueMappingManager;
     private BrokerOuterAPI brokerOuterAPI;

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicQueueMappingManager.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.rocketmq.broker.BrokerPathConfigHelper;
 import org.apache.rocketmq.common.ConfigManager;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.remoting.protocol.ResponseCode;
@@ -43,7 +43,7 @@
 import static org.apache.rocketmq.remoting.protocol.RemotingCommand.buildErrorResponse;
 
 public class TopicQueueMappingManager extends ConfigManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private static final long LOCK_TIMEOUT_MILLIS = 3000;
     private transient final Lock lock = new ReentrantLock();
 

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicRouteInfoManager.java
Patch:
@@ -36,8 +36,8 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 import org.apache.rocketmq.remoting.protocol.ResponseCode;
@@ -48,7 +48,7 @@ public class TopicRouteInfoManager {
 
     private static final long GET_TOPIC_ROUTE_TIMEOUT = 3000L;
     private static final long LOCK_TIMEOUT_MILLIS = 3000L;
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final Lock lockNamesrv = new ReentrantLock();
     private final ConcurrentMap<String/* Topic */, TopicRouteData> topicRouteTable = new ConcurrentHashMap<>();

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/AbstractTransactionalMessageCheckListener.java
Patch:
@@ -27,12 +27,12 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.header.CheckTransactionStateRequestHeader;
 
 public abstract class AbstractTransactionalMessageCheckListener {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
     private BrokerController brokerController;
 

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/TransactionalMessageCheckService.java
Patch:
@@ -19,11 +19,11 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class TransactionalMessageCheckService extends ServiceThread {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
     private BrokerController brokerController;
 

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/DefaultTransactionalMessageCheckListener.java
Patch:
@@ -24,16 +24,16 @@
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
 
 import java.util.concurrent.ThreadLocalRandom;
 
 public class DefaultTransactionalMessageCheckListener extends AbstractTransactionalMessageCheckListener {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
     public DefaultTransactionalMessageCheckListener() {
         super();

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageBridge.java
Patch:
@@ -44,10 +44,10 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InnerLoggerFactory;
-import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.GetMessageResult;
 import org.apache.rocketmq.store.MessageStore;
 import org.apache.rocketmq.store.PutMessageResult;
@@ -58,7 +58,7 @@
 import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
 
 public class TransactionalMessageBridge {
-    private static final InternalLogger LOGGER = InnerLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
     private final ConcurrentHashMap<Integer, MessageQueue> opQueueMap = new ConcurrentHashMap<>();
     private final BrokerController brokerController;

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageServiceImpl.java
Patch:
@@ -40,16 +40,16 @@
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.ResponseCode;
 import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
 import org.apache.rocketmq.store.config.BrokerRole;
 
 public class TransactionalMessageServiceImpl implements TransactionalMessageService {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
     private TransactionalMessageBridge transactionalMessageBridge;
 

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalOpBatchService.java
Patch:
@@ -19,11 +19,11 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class TransactionalOpBatchService extends ServiceThread {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
     private BrokerController brokerController;
     private TransactionalMessageServiceImpl transactionalMessageService;

File: broker/src/main/java/org/apache/rocketmq/broker/util/HookUtils.java
Patch:
@@ -32,16 +32,16 @@
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.QueueTypeUtils;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
 import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.timer.TimerMessageStore;
 
 public class HookUtils {
 
-    protected static final InternalLogger LOG = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    protected static final Logger LOG = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private static AtomicLong printTimes = new AtomicLong(0);
 

File: broker/src/test/java/org/apache/rocketmq/broker/util/TransactionalMessageServiceImpl.java
Patch:
@@ -23,13 +23,13 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
 import org.apache.rocketmq.store.PutMessageResult;
 
 public class TransactionalMessageServiceImpl implements TransactionalMessageService {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
     @Override
     public PutMessageResult prepareMessage(MessageExtBrokerInner messageInner) {

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultLitePullConsumer.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.rocketmq.client.consumer.store.OffsetStore;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.impl.consumer.DefaultLitePullConsumerImpl;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.trace.AsyncTraceDispatcher;
 import org.apache.rocketmq.client.trace.TraceDispatcher;
 import org.apache.rocketmq.client.trace.hook.ConsumeMessageTraceHookImpl;
@@ -34,14 +33,15 @@
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class DefaultLitePullConsumer extends ClientConfig implements LitePullConsumer {
 
-    private final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(DefaultLitePullConsumer.class);
 
     private final DefaultLitePullConsumerImpl defaultLitePullConsumerImpl;
 

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumer.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.trace.AsyncTraceDispatcher;
 import org.apache.rocketmq.client.trace.TraceDispatcher;
 import org.apache.rocketmq.client.trace.hook.ConsumeMessageTraceHookImpl;
@@ -40,11 +39,12 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 /**
  * In most scenarios, this is the mostly recommended class to consume messages.
@@ -63,7 +63,7 @@
  */
 public class DefaultMQPushConsumer extends ClientConfig implements MQPushConsumer {
 
-    private final InternalLogger log = ClientLogger.getLog();
+    private final Logger log = LoggerFactory.getLogger(DefaultMQPushConsumer.class);
 
     /**
      * Internal implementation. Most of the functions herein are delegated to it.

File: client/src/main/java/org/apache/rocketmq/client/consumer/MQPullConsumerScheduleService.java
Patch:
@@ -24,21 +24,21 @@
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.client.exception.MQClientException;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 /**
  * Schedule service for pull consumer.
  * This Consumer will be removed in 2022, and a better implementation {@link
  * DefaultLitePullConsumer} is recommend to use in the scenario of actively pulling messages.
  */
 public class MQPullConsumerScheduleService {
-    private final InternalLogger log = ClientLogger.getLog();
+    private final Logger log = LoggerFactory.getLogger(MQPullConsumerScheduleService.class);
     private final MessageQueueListener messageQueueListener = new MessageQueueListenerImpl();
     private final ConcurrentMap<MessageQueue, PullTaskImpl> taskTable =
         new ConcurrentHashMap<>();

File: client/src/main/java/org/apache/rocketmq/client/consumer/store/LocalFileOffsetStore.java
Patch:
@@ -28,13 +28,13 @@
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.help.FAQUrl;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.remoting.exception.RemotingException;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 /**
  * Local storage implementation
@@ -43,7 +43,7 @@ public class LocalFileOffsetStore implements OffsetStore {
     public final static String LOCAL_OFFSET_STORE_DIR = System.getProperty(
         "rocketmq.client.localOffsetStoreDir",
         System.getProperty("user.home") + File.separator + ".rocketmq_offsets");
-    private final static InternalLogger log = ClientLogger.getLog();
+    private final static Logger log = LoggerFactory.getLogger(LocalFileOffsetStore.class);
     private final MQClientInstance mQClientFactory;
     private final String groupName;
     private final String storePath;

File: client/src/main/java/org/apache/rocketmq/client/consumer/store/RemoteBrokerOffsetStore.java
Patch:
@@ -28,20 +28,20 @@
 import org.apache.rocketmq.client.exception.OffsetNotFoundException;
 import org.apache.rocketmq.client.impl.FindBrokerResult;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.header.QueryConsumerOffsetRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 /**
  * Remote storage implementation
  */
 public class RemoteBrokerOffsetStore implements OffsetStore {
-    private final static InternalLogger log = ClientLogger.getLog();
+    private final static Logger log = LoggerFactory.getLogger(RemoteBrokerOffsetStore.class);
     private final MQClientInstance mQClientFactory;
     private final String groupName;
     private ConcurrentMap<MessageQueue, AtomicLong> offsetTable =

File: client/src/main/java/org/apache/rocketmq/client/impl/MQAdminImpl.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
 import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.help.FAQUrl;
@@ -44,7 +43,6 @@
 import org.apache.rocketmq.common.message.MessageId;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.InvokeCallback;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.exception.RemotingException;
@@ -56,10 +54,12 @@
 import org.apache.rocketmq.remoting.protocol.header.QueryMessageResponseHeader;
 import org.apache.rocketmq.remoting.protocol.route.BrokerData;
 import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class MQAdminImpl {
 
-    private final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(MQAdminImpl.class);
     private final MQClientInstance mQClientFactory;
     private long timeoutMillis = 6000;
 

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -50,7 +50,6 @@
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
 import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
 import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.producer.SendCallback;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.client.producer.SendStatus;
@@ -74,7 +73,6 @@
 import org.apache.rocketmq.common.namesrv.NameServerUpdateCallback;
 import org.apache.rocketmq.common.namesrv.TopAddressing;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.InvokeCallback;
 import org.apache.rocketmq.remoting.RPCHook;
@@ -219,11 +217,13 @@
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.remoting.rpchook.DynamicalExtFieldRPCHook;
 import org.apache.rocketmq.remoting.rpchook.StreamTypeRPCHook;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 import static org.apache.rocketmq.remoting.protocol.RemotingSysResponseCode.SUCCESS;
 
 public class MQClientAPIImpl implements NameServerUpdateCallback {
-    private final static InternalLogger log = ClientLogger.getLog();
+    private final static Logger log = LoggerFactory.getLogger(MQClientAPIImpl.class);
     private static boolean sendSmartMsg =
         Boolean.parseBoolean(System.getProperty("org.apache.rocketmq.client.sendSmartMsg", "true"));
 

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientManager.java
Patch:
@@ -21,12 +21,12 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.rocketmq.client.ClientConfig;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
-import org.apache.rocketmq.client.log.ClientLogger;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class MQClientManager {
-    private final static InternalLogger log = ClientLogger.getLog();
+    private final static Logger log = LoggerFactory.getLogger(MQClientManager.class);
     private static MQClientManager instance = new MQClientManager();
     private AtomicInteger factoryIndexGenerator = new AtomicInteger();
     private ConcurrentMap<String/* clientId */, MQClientInstance> factoryTable =

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java
Patch:
@@ -35,7 +35,6 @@
 import org.apache.rocketmq.client.consumer.listener.ConsumeReturnType;
 import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
 import org.apache.rocketmq.client.hook.ConsumeMessageContext;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.stat.ConsumerStatsManager;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
@@ -44,12 +43,13 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.utils.ThreadUtils;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.protocol.body.CMResult;
 import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class ConsumeMessageConcurrentlyService implements ConsumeMessageService {
-    private static final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(ConsumeMessageConcurrentlyService.class);
     private final DefaultMQPushConsumerImpl defaultMQPushConsumerImpl;
     private final DefaultMQPushConsumer defaultMQPushConsumer;
     private final MessageListenerConcurrently messageListener;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -33,7 +33,6 @@
 import org.apache.rocketmq.client.consumer.listener.ConsumeReturnType;
 import org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;
 import org.apache.rocketmq.client.hook.ConsumeMessageContext;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.stat.ConsumerStatsManager;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
@@ -44,14 +43,15 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.utils.ThreadUtils;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 import org.apache.rocketmq.remoting.protocol.body.CMResult;
 import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class ConsumeMessageOrderlyService implements ConsumeMessageService {
-    private static final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(ConsumeMessageOrderlyService.class);
     private final static long MAX_TIME_CONSUME_CONTINUOUSLY =
         Long.parseLong(System.getProperty("rocketmq.client.maxTimeConsumeContinuously", "60000"));
     private final DefaultMQPushConsumerImpl defaultMQPushConsumerImpl;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessagePopConcurrentlyService.java
Patch:
@@ -35,7 +35,6 @@
 import org.apache.rocketmq.client.consumer.listener.ConsumeReturnType;
 import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
 import org.apache.rocketmq.client.hook.ConsumeMessageContext;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.stat.ConsumerStatsManager;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
@@ -45,13 +44,14 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.utils.ThreadUtils;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.protocol.body.CMResult;
 import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
 import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class ConsumeMessagePopConcurrentlyService implements ConsumeMessageService {
-    private static final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(ConsumeMessagePopConcurrentlyService.class);
     private final DefaultMQPushConsumerImpl defaultMQPushConsumerImpl;
     private final DefaultMQPushConsumer defaultMQPushConsumer;
     private final MessageListenerConcurrently messageListener;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessagePopOrderlyService.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;
 import org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;
 import org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.stat.ConsumerStatsManager;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
@@ -41,14 +40,15 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.utils.ThreadUtils;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 import org.apache.rocketmq.remoting.protocol.body.CMResult;
 import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class ConsumeMessagePopOrderlyService implements ConsumeMessageService {
-    private static final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(ConsumeMessagePopOrderlyService.class);
     private final DefaultMQPushConsumerImpl defaultMQPushConsumerImpl;
     private final DefaultMQPushConsumer defaultMQPushConsumer;
     private final MessageListenerOrderly messageListener;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java
Patch:
@@ -55,7 +55,6 @@
 import org.apache.rocketmq.client.impl.CommunicationMode;
 import org.apache.rocketmq.client.impl.MQClientManager;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ServiceState;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
@@ -65,7 +64,6 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
@@ -74,10 +72,12 @@
 import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class DefaultLitePullConsumerImpl implements MQConsumerInner {
 
-    private final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(DefaultLitePullConsumerImpl.class);
 
     private final long consumerStartTimestamp = System.currentTimeMillis();
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java
Patch:
@@ -42,7 +42,6 @@
 import org.apache.rocketmq.client.impl.CommunicationMode;
 import org.apache.rocketmq.client.impl.MQClientManager;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ServiceState;
 import org.apache.rocketmq.common.UtilAll;
@@ -55,7 +54,6 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingException;
@@ -65,14 +63,16 @@
 import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 /**
  * This class will be removed in 2022, and a better implementation {@link DefaultLitePullConsumerImpl} is recommend to use
  * in the scenario of actively pulling messages.
  */
 @Deprecated
 public class DefaultMQPullConsumerImpl implements MQConsumerInner {
-    private final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(DefaultMQPullConsumerImpl.class);
     private final DefaultMQPullConsumer defaultMQPullConsumer;
     private final long consumerStartTimestamp = System.currentTimeMillis();
     private final RPCHook rpcHook;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ProcessQueue.java
Patch:
@@ -28,12 +28,12 @@
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.message.MessageAccessor;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.protocol.body.ProcessQueueInfo;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 /**
  * Queue consumption snapshot
@@ -43,7 +43,7 @@ public class ProcessQueue {
         Long.parseLong(System.getProperty("rocketmq.client.rebalance.lockMaxLiveTime", "30000"));
     public final static long REBALANCE_LOCK_INTERVAL = Long.parseLong(System.getProperty("rocketmq.client.rebalance.lockInterval", "20000"));
     private final static long PULL_MAX_IDLE_TIME = Long.parseLong(System.getProperty("rocketmq.client.pull.pullMaxIdleTime", "120000"));
-    private final InternalLogger log = ClientLogger.getLog();
+    private final Logger log = LoggerFactory.getLogger(ProcessQueue.class);
     private final ReadWriteLock treeMapLock = new ReentrantReadWriteLock();
     private final TreeMap<Long, MessageExt> msgTreeMap = new TreeMap<>();
     private final AtomicLong msgCount = new AtomicLong();

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/PullAPIWrapper.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.rocketmq.client.impl.CommunicationMode;
 import org.apache.rocketmq.client.impl.FindBrokerResult;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.MQVersion;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.filter.ExpressionType;
@@ -45,15 +44,16 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class PullAPIWrapper {
-    private final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(PullAPIWrapper.class);
     private final MQClientInstance mQClientFactory;
     private final String consumerGroup;
     private final boolean unitMode;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceImpl.java
Patch:
@@ -31,23 +31,23 @@
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.impl.FindBrokerResult;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.KeyBuilder;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.message.MessageQueueAssignment;
 import org.apache.rocketmq.common.message.MessageRequestMode;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
 import org.apache.rocketmq.remoting.protocol.body.LockBatchRequestBody;
 import org.apache.rocketmq.remoting.protocol.body.UnlockBatchRequestBody;
 import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
 import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public abstract class RebalanceImpl {
-    protected static final InternalLogger log = ClientLogger.getLog();
+    protected static final Logger log = LoggerFactory.getLogger(RebalanceImpl.class);
 
     protected final ConcurrentMap<MessageQueue, ProcessQueue> processQueueTable = new ConcurrentHashMap<>(64);
     protected final ConcurrentMap<MessageQueue, PopProcessQueue> popProcessQueueTable = new ConcurrentHashMap<>(64);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceService.java
Patch:
@@ -17,15 +17,15 @@
 package org.apache.rocketmq.client.impl.consumer;
 
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.ServiceThread;
-import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class RebalanceService extends ServiceThread {
     private static long waitInterval =
         Long.parseLong(System.getProperty(
             "rocketmq.client.rebalance.waitInterval", "20000"));
-    private final InternalLogger log = ClientLogger.getLog();
+    private final Logger log = LoggerFactory.getLogger(RebalanceService.class);
     private final MQClientInstance mqClientFactory;
 
     public RebalanceService(MQClientInstance mqClientFactory) {

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -52,7 +52,6 @@
 import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
 import org.apache.rocketmq.client.impl.producer.MQProducerInner;
 import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
 import org.apache.rocketmq.client.stat.ConsumerStatsManager;
 import org.apache.rocketmq.common.MQVersion;
@@ -65,7 +64,6 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.message.MessageQueueAssignment;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.netty.NettyClientConfig;
@@ -82,12 +80,14 @@
 import org.apache.rocketmq.remoting.protocol.route.BrokerData;
 import org.apache.rocketmq.remoting.protocol.route.QueueData;
 import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 import static org.apache.rocketmq.remoting.rpc.ClientMetadata.topicRouteData2EndpointsForStaticTopic;
 
 public class MQClientInstance {
     private final static long LOCK_TIMEOUT_MILLIS = 3000;
-    private final static InternalLogger log = ClientLogger.getLog();
+    private final static Logger log = LoggerFactory.getLogger(MQClientInstance.class);
     private final ClientConfig clientConfig;
     private final String clientId;
     private final long bootTimestamp = System.currentTimeMillis();

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -51,7 +51,6 @@
 import org.apache.rocketmq.client.impl.MQClientManager;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
 import org.apache.rocketmq.client.latency.MQFaultStrategy;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
 import org.apache.rocketmq.client.producer.LocalTransactionExecuter;
 import org.apache.rocketmq.client.producer.LocalTransactionState;
@@ -85,7 +84,6 @@
 import org.apache.rocketmq.common.message.MessageType;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.utils.CorrelationIdUtil;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingConnectException;
 import org.apache.rocketmq.remoting.exception.RemotingException;
@@ -95,10 +93,12 @@
 import org.apache.rocketmq.remoting.protocol.header.CheckTransactionStateRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class DefaultMQProducerImpl implements MQProducerInner {
 
-    private final InternalLogger log = ClientLogger.getLog();
+    private final Logger log = LoggerFactory.getLogger(DefaultMQProducerImpl.class);
     private final Random random = new Random();
     private final DefaultMQProducer defaultMQProducer;
     private final ConcurrentMap<String/* topic */, TopicPublishInfo> topicPublishInfoTable =

File: client/src/main/java/org/apache/rocketmq/client/latency/MQFaultStrategy.java
Patch:
@@ -18,12 +18,12 @@
 package org.apache.rocketmq.client.latency;
 
 import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class MQFaultStrategy {
-    private final static InternalLogger log = ClientLogger.getLog();
+    private final static Logger log = LoggerFactory.getLogger(MQFaultStrategy.class);
     private final LatencyFaultTolerance<String> latencyFaultTolerance = new LatencyFaultToleranceImpl();
 
     private boolean sendLatencyFaultEnable = false;

File: client/src/main/java/org/apache/rocketmq/client/producer/RequestFutureHolder.java
Patch:
@@ -31,12 +31,12 @@
 import org.apache.rocketmq.client.common.ClientErrorCode;
 import org.apache.rocketmq.client.exception.RequestTimeoutException;
 import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
-import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class RequestFutureHolder {
-    private static InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(RequestFutureHolder.class);
     private static final RequestFutureHolder INSTANCE = new RequestFutureHolder();
     private ConcurrentHashMap<String, RequestResponseFuture> requestFutureTable = new ConcurrentHashMap<>();
     private final Set<DefaultMQProducerImpl> producerSet = new HashSet<>();

File: client/src/main/java/org/apache/rocketmq/client/stat/ConsumerStatsManager.java
Patch:
@@ -18,14 +18,14 @@
 package org.apache.rocketmq.client.stat;
 
 import java.util.concurrent.ScheduledExecutorService;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.stats.StatsItemSet;
 import org.apache.rocketmq.common.stats.StatsSnapshot;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.protocol.body.ConsumeStatus;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class ConsumerStatsManager {
-    private static final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(ConsumerStatsManager.class);
 
     private static final String TOPIC_AND_GROUP_CONSUME_OK_TPS = "CONSUME_OK_TPS";
     private static final String TOPIC_AND_GROUP_CONSUME_FAILED_TPS = "CONSUME_FAILED_TPS";

File: common/src/main/java/org/apache/rocketmq/common/AbstractBrokerRunnable.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.rocketmq.common;
 
-import org.apache.rocketmq.logging.InnerLoggerFactory;
-
 public abstract class AbstractBrokerRunnable implements Runnable {
     protected final BrokerIdentity brokerIdentity;
 
@@ -35,7 +33,7 @@ public AbstractBrokerRunnable(BrokerIdentity brokerIdentity) {
     public void run() {
         if (brokerIdentity.isInBrokerContainer()) {
             // set threadlocal broker identity to forward logging to corresponding broker
-            InnerLoggerFactory.BROKER_IDENTITY.set(brokerIdentity.getCanonicalName());
+//            InnerLoggerFactory.BROKER_IDENTITY.set(brokerIdentity.getCanonicalName());
         }
         run2();
     }

File: common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
Patch:
@@ -23,11 +23,11 @@
 import org.apache.rocketmq.common.message.MessageRequestMode;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class BrokerConfig extends BrokerIdentity {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private String brokerConfigPath = null;
 

File: common/src/main/java/org/apache/rocketmq/common/ConfigManager.java
Patch:
@@ -19,11 +19,11 @@
 import java.io.IOException;
 import java.util.Map;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public abstract class ConfigManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     public abstract String encode();
 

File: common/src/main/java/org/apache/rocketmq/common/ServiceThread.java
Patch:
@@ -19,11 +19,11 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public abstract class ServiceThread implements Runnable {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private static final long JOIN_TIME = 90 * 1000;
 

File: common/src/main/java/org/apache/rocketmq/common/ThreadFactoryImpl.java
Patch:
@@ -20,12 +20,12 @@
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.atomic.AtomicLong;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class ThreadFactoryImpl implements ThreadFactory {
 
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private final AtomicLong threadIndex = new AtomicLong(0);
     private final String threadNamePrefix;

File: common/src/main/java/org/apache/rocketmq/common/compression/Lz4Compressor.java
Patch:
@@ -23,11 +23,11 @@
 import net.jpountz.lz4.LZ4FrameInputStream;
 import net.jpountz.lz4.LZ4FrameOutputStream;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class Lz4Compressor implements Compressor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     @Override
     public byte[] compress(byte[] src, int level) throws IOException {

File: common/src/main/java/org/apache/rocketmq/common/compression/ZlibCompressor.java
Patch:
@@ -23,11 +23,11 @@
 import java.util.zip.DeflaterOutputStream;
 import java.util.zip.InflaterInputStream;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class ZlibCompressor implements Compressor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     @Override
     public byte[] compress(byte[] src, int level) throws IOException {

File: common/src/main/java/org/apache/rocketmq/common/compression/ZstdCompressor.java
Patch:
@@ -23,11 +23,11 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class ZstdCompressor implements Compressor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     @Override
     public byte[] compress(byte[] src, int level) throws IOException {

File: common/src/main/java/org/apache/rocketmq/common/namesrv/DefaultTopAddressing.java
Patch:
@@ -28,12 +28,12 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.help.FAQUrl;
 import org.apache.rocketmq.common.utils.HttpTinyClient;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class DefaultTopAddressing implements TopAddressing {
 
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private String nsAddr;
     private String wsAddr;

File: common/src/main/java/org/apache/rocketmq/common/queue/ConcurrentTreeMap.java
Patch:
@@ -22,14 +22,14 @@
 import java.util.TreeMap;
 import java.util.concurrent.locks.ReentrantLock;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 /**
  * thread safe
  */
 public class ConcurrentTreeMap<K, V> {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final ReentrantLock lock;
     private TreeMap<K, V> tree;
     private RoundQueue<K> roundQueue;

File: common/src/main/java/org/apache/rocketmq/common/stats/MomentStatsItem.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 import org.apache.rocketmq.common.UtilAll;
-import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
 
 public class MomentStatsItem {
 
@@ -30,10 +30,10 @@ public class MomentStatsItem {
     private final String statsName;
     private final String statsKey;
     private final ScheduledExecutorService scheduledExecutorService;
-    private final InternalLogger log;
+    private final Logger log;
 
     public MomentStatsItem(String statsName, String statsKey,
-        ScheduledExecutorService scheduledExecutorService, InternalLogger log) {
+        ScheduledExecutorService scheduledExecutorService, Logger log) {
         this.statsName = statsName;
         this.statsKey = statsKey;
         this.scheduledExecutorService = scheduledExecutorService;

File: common/src/main/java/org/apache/rocketmq/common/stats/MomentStatsItemSet.java
Patch:
@@ -24,16 +24,16 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.common.UtilAll;
-import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
 
 public class MomentStatsItemSet {
     private final ConcurrentMap<String/* key */, MomentStatsItem> statsItemTable =
         new ConcurrentHashMap<>(128);
     private final String statsName;
     private final ScheduledExecutorService scheduledExecutorService;
-    private final InternalLogger log;
+    private final Logger log;
 
-    public MomentStatsItemSet(String statsName, ScheduledExecutorService scheduledExecutorService, InternalLogger log) {
+    public MomentStatsItemSet(String statsName, ScheduledExecutorService scheduledExecutorService, Logger log) {
         this.statsName = statsName;
         this.scheduledExecutorService = scheduledExecutorService;
         this.log = log;

File: common/src/main/java/org/apache/rocketmq/common/utils/NetworkUtil.java
Patch:
@@ -29,13 +29,13 @@
 import java.util.ArrayList;
 import java.util.Enumeration;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class NetworkUtil {
     public static final String OS_NAME = System.getProperty("os.name");
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
     private static boolean isLinuxPlatform = false;
     private static boolean isWindowsPlatform = false;
 

File: common/src/main/java/org/apache/rocketmq/common/utils/ThreadUtils.java
Patch:
@@ -26,11 +26,11 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public final class ThreadUtils {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.TOOLS_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.TOOLS_LOGGER_NAME);
 
     public static ExecutorService newThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime,
         TimeUnit unit, BlockingQueue<Runnable> workQueue, String processName, boolean isDaemon) {

File: container/src/main/java/org/apache/rocketmq/container/BrokerContainer.java
Patch:
@@ -39,8 +39,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.container.logback.BrokerLogbackConfigurator;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.Configuration;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.RemotingServer;
@@ -51,7 +51,7 @@
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 
 public class BrokerContainer implements IBrokerContainer {
-    private static final InternalLogger LOG = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOG = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final ScheduledExecutorService scheduledExecutorService = new ScheduledThreadPoolExecutor(1,
         new BasicThreadFactory.Builder()

File: container/src/main/java/org/apache/rocketmq/container/BrokerContainerProcessor.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.rocketmq.common.BrokerIdentity;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -41,7 +41,7 @@
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 
 public class BrokerContainerProcessor implements NettyRequestProcessor {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerContainer brokerContainer;
     private List<BrokerBootHook> brokerBootHookList;
 

File: controller/src/main/java/org/apache/rocketmq/controller/BrokerHousekeepingService.java
Patch:
@@ -18,12 +18,12 @@
 
 import io.netty.channel.Channel;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
 
 public class BrokerHousekeepingService implements ChannelEventListener {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
     private final ControllerManager controllerManager;
 
     public BrokerHousekeepingService(ControllerManager controllerManager) {

File: controller/src/main/java/org/apache/rocketmq/controller/ControllerManager.java
Patch:
@@ -34,8 +34,8 @@
 import org.apache.rocketmq.controller.impl.DLedgerController;
 import org.apache.rocketmq.controller.impl.DefaultBrokerHeartbeatManager;
 import org.apache.rocketmq.controller.processor.ControllerRequestProcessor;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.Configuration;
 import org.apache.rocketmq.remoting.RemotingClient;
 import org.apache.rocketmq.remoting.RemotingServer;
@@ -50,7 +50,7 @@
 import org.apache.rocketmq.remoting.protocol.header.namesrv.controller.ElectMasterResponseHeader;
 
 public class ControllerManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
 
     private final ControllerConfig controllerConfig;
     private final NettyServerConfig nettyServerConfig;

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DLedgerController.java
Patch:
@@ -47,8 +47,8 @@
 import org.apache.rocketmq.controller.impl.event.EventMessage;
 import org.apache.rocketmq.controller.impl.event.EventSerializer;
 import org.apache.rocketmq.controller.impl.manager.ReplicasInfoManager;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
 import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.RemotingServer;
@@ -69,7 +69,7 @@
  */
 public class DLedgerController implements Controller {
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
     private final DLedgerServer dLedgerServer;
     private final ControllerConfig controllerConfig;
     private final DLedgerConfig dLedgerConfig;

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DLedgerControllerStateMachine.java
Patch:
@@ -26,14 +26,14 @@
 import org.apache.rocketmq.controller.impl.event.EventMessage;
 import org.apache.rocketmq.controller.impl.event.EventSerializer;
 import org.apache.rocketmq.controller.impl.manager.ReplicasInfoManager;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 /**
  * The state machine implementation of the dledger controller
  */
 public class DLedgerControllerStateMachine implements StateMachine {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
     private final ReplicasInfoManager replicasInfoManager;
     private final EventSerializer eventSerializer;
     private final String dLedgerId;

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DefaultBrokerHeartbeatManager.java
Patch:
@@ -33,12 +33,12 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.controller.BrokerHeartbeatManager;
 import org.apache.rocketmq.controller.BrokerLiveInfo;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 
 public class DefaultBrokerHeartbeatManager implements BrokerHeartbeatManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
     private static final long DEFAULT_BROKER_CHANNEL_EXPIRED_TIME = 1000 * 10;
     private final ScheduledExecutorService scheduledService = Executors.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("DefaultBrokerHeartbeatManager_scheduledService_"));
     private final ExecutorService executor = Executors.newFixedThreadPool(2, new ThreadFactoryImpl("DefaultBrokerHeartbeatManager_executorService_"));

File: controller/src/main/java/org/apache/rocketmq/controller/impl/manager/ReplicasInfoManager.java
Patch:
@@ -37,8 +37,8 @@
 import org.apache.rocketmq.controller.impl.event.ElectMasterEvent;
 import org.apache.rocketmq.controller.impl.event.EventMessage;
 import org.apache.rocketmq.controller.impl.event.EventType;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.ResponseCode;
 import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
 import org.apache.rocketmq.remoting.protocol.body.InSyncStateData;
@@ -59,7 +59,7 @@
  * be called sequentially
  */
 public class ReplicasInfoManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
     private final ControllerConfig controllerConfig;
     private final Map<String/* brokerName */, BrokerInfo> replicaInfoTable;
     private final Map<String/* brokerName */, SyncStateInfo> syncStateSetInfoTable;

File: controller/src/main/java/org/apache/rocketmq/controller/processor/ControllerRequestProcessor.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.controller.BrokerHeartbeatManager;
 import org.apache.rocketmq.controller.ControllerManager;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
@@ -59,7 +59,7 @@
  * Processor for controller request
  */
 public class ControllerRequestProcessor implements NettyRequestProcessor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
     private static final int WAIT_TIMEOUT_OUT = 5;
     private final ControllerManager controllerManager;
     private final BrokerHeartbeatManager heartbeatManager;

File: example/src/main/java/org/apache/rocketmq/example/rpc/AsyncRequestProducer.java
Patch:
@@ -18,15 +18,15 @@
 package org.apache.rocketmq.example.rpc;
 
 import org.apache.rocketmq.client.exception.MQClientException;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
 import org.apache.rocketmq.client.producer.RequestCallback;
 import org.apache.rocketmq.common.message.Message;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class AsyncRequestProducer {
-    private static final InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(AsyncRequestProducer.class);
 
     public static void main(String[] args) throws MQClientException, InterruptedException {
         String producerGroup = "please_rename_unique_group_name";

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/kvconfig/KVConfigManager.java
Patch:
@@ -23,13 +23,13 @@
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.remoting.protocol.body.KVTable;
 
 public class KVConfigManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
 
     private final NamesrvController namesrvController;
 

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/ClientRequestProcessor.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.help.FAQUrl;
 import org.apache.rocketmq.common.namesrv.NamesrvUtil;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -37,7 +37,7 @@
 
 public class ClientRequestProcessor implements NettyRequestProcessor {
 
-    private static InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
 
     protected NamesrvController namesrvController;
     private long startupTimeMillis;

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/ClusterTestRequestProcessor.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.help.FAQUrl;
 import org.apache.rocketmq.common.namesrv.NamesrvUtil;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
@@ -32,7 +32,7 @@
 import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
 
 public class ClusterTestRequestProcessor extends ClientRequestProcessor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
     private final DefaultMQAdminExt adminExt;
     private final String productEnvName;
 

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/DefaultRequestProcessor.java
Patch:
@@ -28,8 +28,8 @@
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.namesrv.NamesrvUtil;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
@@ -68,7 +68,7 @@
 import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
 
 public class DefaultRequestProcessor implements NettyRequestProcessor {
-    private static InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
 
     protected final NamesrvController namesrvController;
 

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/BatchUnregistrationService.java
Patch:
@@ -24,8 +24,8 @@
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.namesrv.NamesrvConfig;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.header.namesrv.UnRegisterBrokerRequestHeader;
 
 /**
@@ -35,7 +35,7 @@
 public class BatchUnregistrationService extends ServiceThread {
     private final RouteInfoManager routeInfoManager;
     private BlockingQueue<UnRegisterBrokerRequestHeader> unregistrationQueue;
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
 
     public BatchUnregistrationService(RouteInfoManager routeInfoManager, NamesrvConfig namesrvConfig) {
         this.routeInfoManager = routeInfoManager;

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java
Patch:
@@ -42,8 +42,8 @@
 import org.apache.rocketmq.common.sysflag.TopicSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.ConcurrentHashMapUtils;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingConnectException;
@@ -67,7 +67,7 @@
 import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingInfo;
 
 public class RouteInfoManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
     private final static long DEFAULT_BROKER_CHANNEL_EXPIRED_TIME = 1000 * 60 * 2;
     private final ReadWriteLock lock = new ReentrantReadWriteLock();
     private final Map<String/* topic */, Map<String, QueueData>> topicQueueTable;

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/processor/RequestProcessorTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.namesrv.NamesrvConfig;
-import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.namesrv.routeinfo.RouteInfoManager;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
@@ -67,7 +67,7 @@ public class RequestProcessorTest {
 
     private RouteInfoManager routeInfoManager;
 
-    private InternalLogger logger;
+    private Logger logger;
 
     @Before
     public void init() throws Exception {
@@ -88,7 +88,7 @@ public void init() throws Exception {
 
         registerRouteInfoManager();
 
-        logger = mock(InternalLogger.class);
+        logger = mock(Logger.class);
         setFinalStatic(DefaultRequestProcessor.class.getDeclaredField("log"), logger);
     }
 

File: openmessaging/src/main/java/io/openmessaging/rocketmq/producer/AbstractOMSProducer.java
Patch:
@@ -31,9 +31,7 @@
 import io.openmessaging.rocketmq.utils.BeanUtils;
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
-import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.exception.RemotingConnectException;
 import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
 import org.apache.rocketmq.remoting.protocol.LanguageCode;
@@ -42,7 +40,6 @@
 import static io.openmessaging.rocketmq.utils.OMSUtil.buildInstanceName;
 
 abstract class AbstractOMSProducer implements ServiceLifecycle, MessageFactory {
-    final static InternalLogger log = ClientLogger.getLog();
     final KeyValue properties;
     final DefaultMQProducer rocketmqProducer;
     private boolean started = false;

File: openmessaging/src/main/java/io/openmessaging/rocketmq/promise/DefaultPromise.java
Patch:
@@ -19,14 +19,14 @@
 import io.openmessaging.Promise;
 import io.openmessaging.FutureListener;
 import io.openmessaging.exception.OMSRuntimeException;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 import java.util.ArrayList;
 import java.util.List;
 
 public class DefaultPromise<V> implements Promise<V> {
-    private static final InternalLogger LOG = InternalLoggerFactory.getLogger(DefaultPromise.class);
+    private static final Logger LOG = LoggerFactory.getLogger(DefaultPromise.class);
     private final Object lock = new Object();
     private volatile FutureState state = FutureState.DOING;
     private V result = null;

File: openmessaging/src/main/java/io/openmessaging/rocketmq/utils/BeanUtils.java
Patch:
@@ -25,11 +25,11 @@
 import java.util.Properties;
 import java.util.Set;
 import org.apache.commons.lang3.StringUtils;
-import org.apache.rocketmq.client.log.ClientLogger;
-import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public final class BeanUtils {
-    static InternalLogger log = ClientLogger.getLog();
+    private static final Logger log = LoggerFactory.getLogger(BeanUtils.class);
 
     /**
      * Maps primitive {@code Class}es to their corresponding wrapper {@code Class}.

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/Configuration.java
Patch:
@@ -28,8 +28,8 @@
 import java.util.concurrent.atomic.AtomicReference;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class Configuration {
     private final static Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java
Patch:
@@ -32,8 +32,8 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.proxy.ProxyMode;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class ProxyConfig implements ConfigFile {
     private final static Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServer.java
Patch:
@@ -19,12 +19,12 @@
 
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 
 public class GrpcServer implements StartAndShutdown {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private final io.grpc.Server server;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServerBuilder.java
Patch:
@@ -40,8 +40,8 @@
 import org.apache.rocketmq.acl.AccessValidator;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.utils.ServiceProvider;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.grpc.interceptor.AuthenticationInterceptor;
@@ -50,7 +50,7 @@
 import org.apache.rocketmq.proxy.grpc.interceptor.HeaderInterceptor;
 
 public class GrpcServerBuilder {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     protected NettyServerBuilder serverBuilder;
 
     public static GrpcServerBuilder newBuilder(ThreadPoolExecutor executor, int port) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/GlobalExceptionInterceptor.java
Patch:
@@ -26,11 +26,11 @@
 import io.grpc.Status;
 import io.grpc.StatusRuntimeException;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class GlobalExceptionInterceptor implements ServerInterceptor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     @Override
     public <R, W> ServerCall.Listener<R> interceptCall(

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/AbstractMessingActivity.java
Patch:
@@ -18,15 +18,15 @@
 
 import apache.rocketmq.v2.Resource;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcValidator;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
 
 public abstract class AbstractMessingActivity {
-    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    protected static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     protected final MessagingProcessor messagingProcessor;
     protected final GrpcClientSettingsManager grpcClientSettingsManager;
     protected final GrpcChannelManager grpcChannelManager;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/DefaultGrpcMessingActivity.java
Patch:
@@ -40,8 +40,8 @@
 import io.grpc.stub.StreamObserver;
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
@@ -58,7 +58,7 @@
 import org.apache.rocketmq.proxy.processor.ReceiptHandleProcessor;
 
 public class DefaultGrpcMessingActivity extends AbstractStartAndShutdown implements GrpcMessingActivity {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected GrpcClientSettingsManager grpcClientSettingsManager;
     protected GrpcChannelManager grpcChannelManager;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplication.java
Patch:
@@ -61,8 +61,8 @@
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseWriter;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class GrpcMessagingApplication extends MessagingServiceGrpc.MessagingServiceImplBase implements StartAndShutdown {
     private final static Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/channel/GrpcClientChannel.java
Patch:
@@ -30,8 +30,8 @@
 import java.util.concurrent.atomic.AtomicReference;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcConverter;
 import org.apache.rocketmq.proxy.service.relay.ProxyChannel;
@@ -46,7 +46,7 @@
 import org.apache.rocketmq.remoting.protocol.header.GetConsumerRunningInfoRequestHeader;
 
 public class GrpcClientChannel extends ProxyChannel {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private final GrpcChannelManager grpcChannelManager;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/client/ClientActivity.java
Patch:
@@ -46,8 +46,8 @@
 import org.apache.rocketmq.common.attribute.TopicMessageType;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.AbstractMessingActivity;
 import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
@@ -70,7 +70,7 @@
 
 public class ClientActivity extends AbstractMessingActivity {
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     public ClientActivity(MessagingProcessor messagingProcessor,
         GrpcClientSettingsManager grpcClientSettingsManager,

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcConverter.java
Patch:
@@ -43,12 +43,12 @@
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.utils.BinaryUtil;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 
 public class GrpcConverter {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected static final Object INSTANCE_CREATE_LOCK = new Object();
     protected static volatile GrpcConverter instance;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcValidator.java
Patch:
@@ -26,12 +26,12 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 
 public class GrpcValidator {
-    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    protected static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected static final Object INSTANCE_CREATE_LOCK = new Object();
     protected static volatile GrpcValidator instance;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/ResponseBuilder.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.utils.ExceptionUtils;
 import org.apache.rocketmq.proxy.service.route.TopicRouteHelper;
@@ -35,7 +35,7 @@
 
 public class ResponseBuilder {
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     protected static final Map<Integer, Code> RESPONSE_CODE_MAPPING = new ConcurrentHashMap<>();
 
     protected static final Object INSTANCE_CREATE_LOCK = new Object();

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/ResponseWriter.java
Patch:
@@ -22,11 +22,11 @@
 import io.grpc.stub.ServerCallStreamObserver;
 import io.grpc.stub.StreamObserver;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class ResponseWriter {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected static final Object INSTANCE_CREATE_LOCK = new Object();
     protected static volatile ResponseWriter instance;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageResponseStreamWriter.java
Patch:
@@ -31,16 +31,16 @@
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseWriter;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
 
 public class ReceiveMessageResponseStreamWriter {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     protected static final long NACK_INVISIBLE_TIME = Duration.ofSeconds(1).toMillis();
 
     protected final MessagingProcessor messagingProcessor;

File: proxy/src/main/java/org/apache/rocketmq/proxy/metrics/ProxyMetricsManager.java
Patch:
@@ -42,8 +42,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.AGGREGATION_DELTA;
 import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_AGGREGATION;

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ConsumerProcessor.java
Patch:
@@ -37,8 +37,8 @@
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
@@ -59,7 +59,7 @@
 import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
 public class ConsumerProcessor extends AbstractProcessor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private final ExecutorService executor;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ProducerProcessor.java
Patch:
@@ -33,8 +33,8 @@
 import org.apache.rocketmq.common.message.MessageId;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
@@ -51,7 +51,7 @@
 import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
 
 public class ProducerProcessor extends AbstractProcessor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     private final ExecutorService executor;
     private final TopicMessageTypeValidator topicMessageTypeValidator;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessor.java
Patch:
@@ -52,8 +52,8 @@
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.remoting.protocol.subscription.RetryPolicy;
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class ReceiptHandleProcessor extends AbstractStartAndShutdown {
     protected final static Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/ClusterServiceManager.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.rocketmq.broker.client.ProducerGroupEvent;
 import org.apache.rocketmq.broker.client.ProducerManager;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
@@ -48,7 +48,7 @@
 import org.apache.rocketmq.remoting.RPCHook;
 
 public class ClusterServiceManager extends AbstractStartAndShutdown implements ServiceManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected ClusterTransactionService clusterTransactionService;
     protected ProducerManager producerManager;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/channel/ChannelManager.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.utils.ConcurrentHashMapUtils;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class ChannelManager {
     private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/channel/SimpleChannel.java
Patch:
@@ -32,8 +32,8 @@
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 /**
  * SimpleChannel is used to handle writeAndFlush situation in processor
@@ -42,7 +42,7 @@
  * @see io.netty.channel.Channel#writeAndFlush
  */
 public class SimpleChannel extends AbstractChannel {
-    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    protected static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected final String remoteAddress;
     protected final String localAddress;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/message/LocalMessageService.java
Patch:
@@ -71,8 +71,8 @@
 import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
 import org.apache.rocketmq.remoting.protocol.header.SendMessageResponseHeader;
 import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class LocalMessageService implements MessageService {
     private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/metadata/ClusterMetadataService.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.common.attribute.TopicMessageType;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.AbstractCacheLoader;
 import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
@@ -39,7 +39,7 @@
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public class ClusterMetadataService extends AbstractStartAndShutdown implements MetadataService {
-    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    protected static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     private static final long DEFAULT_TIMEOUT = 3000;
 
     private final TopicRouteService topicRouteService;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/mqclient/MQClientAPIExt.java
Patch:
@@ -44,8 +44,8 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyClientConfig;
@@ -77,7 +77,7 @@
 import org.apache.rocketmq.remoting.protocol.heartbeat.HeartbeatData;
 
 public class MQClientAPIExt extends MQClientAPIImpl {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private final ClientConfig clientConfig;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/mqclient/ProxyClientRemotingProcessor.java
Patch:
@@ -26,16 +26,16 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.remoting.protocol.RequestCode;
 import org.apache.rocketmq.remoting.protocol.header.CheckTransactionStateRequestHeader;
 
 public class ProxyClientRemotingProcessor extends ClientRemotingProcessor {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     private final ProducerManager producerManager;
 
     public ProxyClientRemotingProcessor(ProducerManager producerManager) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/relay/ProxyChannel.java
Patch:
@@ -34,8 +34,8 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.service.channel.SimpleChannel;
 import org.apache.rocketmq.proxy.service.transaction.TransactionData;
@@ -48,7 +48,7 @@
 import org.apache.rocketmq.remoting.protocol.header.GetConsumerRunningInfoRequestHeader;
 
 public abstract class ProxyChannel extends SimpleChannel {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     protected final SocketAddress remoteSocketAddress;
     protected final SocketAddress localSocketAddress;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/TopicRouteService.java
Patch:
@@ -30,8 +30,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.AbstractCacheLoader;
 import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.common.Address;
@@ -44,7 +44,7 @@
 import org.checkerframework.checker.nullness.qual.Nullable;
 
 public abstract class TopicRouteService extends AbstractStartAndShutdown {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private final MQClientAPIFactory mqClientAPIFactory;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/ClusterTransactionService.java
Patch:
@@ -34,8 +34,8 @@
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
@@ -47,7 +47,7 @@
 import org.apache.rocketmq.remoting.protocol.route.BrokerData;
 
 public class ClusterTransactionService extends AbstractTransactionService {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private static final String TRANS_HEARTBEAT_CLIENT_ID = "rmq-proxy-producer-client";
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/TransactionDataManager.java
Patch:
@@ -29,13 +29,13 @@
 import java.util.concurrent.atomic.AtomicReference;
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 
 public class TransactionDataManager implements StartAndShutdown {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected final AtomicLong maxTransactionDataExpireTime = new AtomicLong(System.currentTimeMillis());
     protected final Map<String /* producerGroup@transactionId */, NavigableSet<TransactionData>> transactionIdDataMap = new ConcurrentHashMap<>();

File: proxy/src/test/java/org/apache/rocketmq/proxy/common/ReceiptHandleGroupTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
 import org.apache.rocketmq.common.message.MessageClientIDSetter;
 import org.apache.rocketmq.proxy.common.utils.FutureUtils;
-import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
+import org.apache.rocketmq.proxy.config.InitConfigTest;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -37,7 +37,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
-public class ReceiptHandleGroupTest extends InitConfigAndLoggerTest {
+public class ReceiptHandleGroupTest extends InitConfigTest {
 
     private static final String TOPIC = "topic";
     private static final String GROUP = "group";

File: proxy/src/test/java/org/apache/rocketmq/proxy/config/ConfigurationManagerTest.java
Patch:
@@ -22,7 +22,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class ConfigurationManagerTest extends InitConfigAndLoggerTest {
+public class ConfigurationManagerTest extends InitConfigTest {
 
     @Test
     public void testInitEnv() {

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/AbstractMessingActivityTest.java
Patch:
@@ -20,7 +20,7 @@
 import apache.rocketmq.v2.Resource;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
+import org.apache.rocketmq.proxy.config.InitConfigTest;
 import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcProxyException;
@@ -30,7 +30,7 @@
 
 import static org.junit.Assert.assertThrows;
 
-public class AbstractMessingActivityTest extends InitConfigAndLoggerTest {
+public class AbstractMessingActivityTest extends InitConfigTest {
 
     public static class MockMessingActivity extends AbstractMessingActivity {
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/BaseActivityTest.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.UUID;
 import org.apache.rocketmq.proxy.common.ContextVariable;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
+import org.apache.rocketmq.proxy.config.InitConfigTest;
 import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
 import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
@@ -41,7 +41,7 @@
 
 @Ignore
 @RunWith(MockitoJUnitRunner.Silent.class)
-public class BaseActivityTest extends InitConfigAndLoggerTest {
+public class BaseActivityTest extends InitConfigTest {
     protected static final Random RANDOM = new Random();
     protected MessagingProcessor messagingProcessor;
     protected GrpcClientSettingsManager grpcClientSettingsManager;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplicationTest.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
+import org.apache.rocketmq.proxy.config.InitConfigTest;
 import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
 import org.junit.Assert;
@@ -47,7 +47,7 @@
 import static org.junit.Assert.assertEquals;
 
 @RunWith(MockitoJUnitRunner.class)
-public class GrpcMessagingApplicationTest extends InitConfigAndLoggerTest {
+public class GrpcMessagingApplicationTest extends InitConfigTest {
     protected static final String REMOTE_ADDR = "192.168.0.1:8080";
     protected static final String LOCAL_ADDR = "127.0.0.1:8080";
     protected static final String CLIENT_ID = "client-id" + UUID.randomUUID();

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/BaseProcessorTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
+import org.apache.rocketmq.proxy.config.InitConfigTest;
 import org.apache.rocketmq.proxy.service.ServiceManager;
 import org.apache.rocketmq.proxy.service.message.MessageService;
 import org.apache.rocketmq.proxy.service.metadata.MetadataService;
@@ -45,7 +45,7 @@
 
 @Ignore
 @RunWith(MockitoJUnitRunner.Silent.class)
-public class BaseProcessorTest extends InitConfigAndLoggerTest {
+public class BaseProcessorTest extends InitConfigTest {
     protected static final Random RANDOM = new Random();
 
     @Mock

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/BaseServiceTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.HashMap;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.MixAll;
-import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
+import org.apache.rocketmq.proxy.config.InitConfigTest;
 import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIExt;
 import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.proxy.service.route.MessageQueueView;
@@ -41,7 +41,7 @@
 
 @Ignore
 @RunWith(MockitoJUnitRunner.Silent.class)
-public class BaseServiceTest extends InitConfigAndLoggerTest {
+public class BaseServiceTest extends InitConfigTest {
 
     protected TopicRouteService topicRouteService;
     protected MQClientAPIFactory mqClientAPIFactory;

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/message/LocalMessageServiceTest.java
Patch:
@@ -51,7 +51,7 @@
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
-import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
+import org.apache.rocketmq.proxy.config.InitConfigTest;
 import org.apache.rocketmq.proxy.service.channel.ChannelManager;
 import org.apache.rocketmq.proxy.service.channel.SimpleChannelHandlerContext;
 import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
@@ -80,7 +80,7 @@
 import static org.assertj.core.api.Assertions.catchThrowableOfType;
 
 @RunWith(MockitoJUnitRunner.class)
-public class LocalMessageServiceTest extends InitConfigAndLoggerTest {
+public class LocalMessageServiceTest extends InitConfigTest {
     private LocalMessageService localMessageService;
     @Mock
     private SendMessageProcessor sendMessageProcessorMock;

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/transaction/AbstractTransactionServiceTest.java
Patch:
@@ -24,15 +24,15 @@
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
+import org.apache.rocketmq.proxy.config.InitConfigTest;
 import org.junit.Before;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 
-public class AbstractTransactionServiceTest extends InitConfigAndLoggerTest {
+public class AbstractTransactionServiceTest extends InitConfigTest {
 
     private static final String BROKER_NAME = "mockBroker";
     private static final String PRODUCER_GROUP = "producerGroup";

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/transaction/TransactionDataManagerTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.commons.lang3.time.StopWatch;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.message.MessageClientIDSetter;
-import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
+import org.apache.rocketmq.proxy.config.InitConfigTest;
 import org.junit.After;
 import org.junit.Assume;
 import org.junit.Before;
@@ -34,7 +34,7 @@
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 
-public class TransactionDataManagerTest extends InitConfigAndLoggerTest {
+public class TransactionDataManagerTest extends InitConfigTest {
     private static final String PRODUCER_GROUP = "producerGroup";
     private static final Random RANDOM = new Random();
     private TransactionDataManager transactionDataManager;

File: remoting/src/main/java/org/apache/rocketmq/remoting/common/RemotingHelper.java
Patch:
@@ -27,8 +27,8 @@
 import java.nio.ByteBuffer;
 import java.nio.channels.SocketChannel;
 import org.apache.rocketmq.common.utils.NetworkUtil;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.exception.RemotingConnectException;
 import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
@@ -42,7 +42,7 @@ public class RemotingHelper {
     public static final String DEFAULT_CHARSET = "UTF-8";
     public static final String DEFAULT_CIDR_ALL = "0.0.0.0/0";
 
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(ROCKETMQ_REMOTING);
+    private static final Logger log = LoggerFactory.getLogger(ROCKETMQ_REMOTING);
     private static final AttributeKey<String> REMOTE_ADDR_KEY = AttributeKey.valueOf("RemoteAddr");
 
     public static SocketAddress string2SocketAddress(final String addr) {

File: remoting/src/main/java/org/apache/rocketmq/remoting/common/ServiceThread.java
Patch:
@@ -17,14 +17,14 @@
 package org.apache.rocketmq.remoting.common;
 
 
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 /**
  * Base class for background thread
  */
 public abstract class ServiceThread implements Runnable {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    private static final Logger log = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
 
     private static final long JOIN_TIME = 90 * 1000;
     protected final Thread thread;

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyDecoder.java
Patch:
@@ -20,13 +20,13 @@
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.LengthFieldBasedFrameDecoder;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public class NettyDecoder extends LengthFieldBasedFrameDecoder {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    private static final Logger log = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
 
     private static final int FRAME_MAX_LENGTH =
         Integer.parseInt(System.getProperty("com.rocketmq.remoting.frameMaxLength", "16777216"));

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyEncoder.java
Patch:
@@ -20,14 +20,14 @@
 import io.netty.channel.ChannelHandler;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToByteEncoder;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 @ChannelHandler.Sharable
 public class NettyEncoder extends MessageToByteEncoder<RemotingCommand> {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    private static final Logger log = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
 
     @Override
     public void encode(ChannelHandlerContext ctx, RemotingCommand remotingCommand, ByteBuf out)

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -42,8 +42,8 @@
 import org.apache.rocketmq.common.Pair;
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.UtilAll;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
 import org.apache.rocketmq.remoting.InvokeCallback;
 import org.apache.rocketmq.remoting.RPCHook;
@@ -69,7 +69,7 @@ public abstract class NettyRemotingAbstract {
     /**
      * Remoting logger instance.
      */
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    private static final Logger log = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
 
     /**
      * Semaphore to limit maximum number of on-going one-way requests, which protects system memory footprint.

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -69,8 +69,8 @@
 import java.util.concurrent.locks.ReentrantLock;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.Pair;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
 import org.apache.rocketmq.remoting.InvokeCallback;
 import org.apache.rocketmq.remoting.RemotingClient;
@@ -83,7 +83,7 @@
 import org.apache.rocketmq.remoting.proxy.SocksProxyConfig;
 
 public class NettyRemotingClient extends NettyRemotingAbstract implements RemotingClient {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    private static final Logger LOGGER = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
 
     private static final long LOCK_TIMEOUT_MILLIS = 3000;
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/TlsHelper.java
Patch:
@@ -31,8 +31,8 @@
 import java.security.cert.CertificateException;
 import java.util.Properties;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.TLS_CLIENT_AUTHSERVER;
 import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.TLS_CLIENT_CERTPATH;
@@ -73,7 +73,7 @@ public interface DecryptionStrategy {
         InputStream decryptPrivateKey(String privateKeyEncryptPath, boolean forClient) throws IOException;
     }
 
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    private static final Logger LOGGER = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
 
     private static DecryptionStrategy decryptionStrategy = new DecryptionStrategy() {
         @Override

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/MQProtosHelper.java
Patch:
@@ -18,13 +18,13 @@
 package org.apache.rocketmq.remoting.protocol;
 
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterBrokerRequestHeader;
 
 public class MQProtosHelper {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     public static boolean registerBrokerToNameServer(final String nsaddr, final String brokerAddr,
         final long timeoutMillis) {

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java
Patch:
@@ -32,8 +32,8 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicInteger;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
@@ -43,7 +43,7 @@ public class RemotingCommand {
     public static final String SERIALIZE_TYPE_PROPERTY = "rocketmq.serialize.type";
     public static final String SERIALIZE_TYPE_ENV = "ROCKETMQ_SERIALIZE_TYPE";
     public static final String REMOTING_VERSION_KEY = "rocketmq.remoting.version";
-    static final InternalLogger log = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
+    static final Logger log = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);
     private static final int RPC_TYPE = 0; // 0, REQUEST_COMMAND
     private static final int RPC_ONEWAY = 1; // 0, RPC
     private static final Map<Class<? extends CommandCustomHeader>, Field[]> CLASS_HASH_MAP =

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/RegisterBrokerBody.java
Patch:
@@ -33,15 +33,15 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingInfo;
 
 public class RegisterBrokerBody extends RemotingSerializable {
 
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
     private TopicConfigAndMappingSerializeWrapper topicConfigSerializeWrapper = new TopicConfigAndMappingSerializeWrapper();
     private List<String> filterServerList = new ArrayList<>();
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/rpc/ClientMetadata.java
Patch:
@@ -27,16 +27,16 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
 import org.apache.rocketmq.remoting.protocol.route.BrokerData;
 import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
 import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingInfo;
 import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingUtils;
 
 public class ClientMetadata {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private final ConcurrentMap<String/* Topic */, TopicRouteData> topicRouteTable = new ConcurrentHashMap<>();
     private final ConcurrentMap<String/* Topic */, ConcurrentMap<MessageQueue, String/*brokerName*/>> topicEndPointsTable = new ConcurrentHashMap<>();

File: srvutil/src/main/java/org/apache/rocketmq/srvutil/AclFileWatchService.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import java.io.File;
 import java.io.IOException;
 import java.nio.file.Files;
@@ -34,7 +34,7 @@
 import java.util.Map;
 
 public class AclFileWatchService extends ServiceThread {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private final String aclPath;
     private int aclFilesNum;

File: srvutil/src/main/java/org/apache/rocketmq/srvutil/FileWatchService.java
Patch:
@@ -29,11 +29,11 @@
 import org.apache.rocketmq.common.LifecycleAwareServiceThread;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class FileWatchService extends LifecycleAwareServiceThread {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     private final Map<String, String> currentHash = new HashMap<>();
     private final Listener listener;

File: srvutil/src/main/java/org/apache/rocketmq/srvutil/ShutdownHookThread.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.rocketmq.srvutil;
 
-import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
 
 import java.util.concurrent.Callable;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -29,7 +29,7 @@
 public class ShutdownHookThread extends Thread {
     private volatile boolean hasShutdown = false;
     private AtomicInteger shutdownTimes = new AtomicInteger(0);
-    private final InternalLogger log;
+    private final Logger log;
     private final Callable callback;
 
     /**
@@ -38,7 +38,7 @@ public class ShutdownHookThread extends Thread {
      * @param log The log instance is used in hook thread.
      * @param callback The call back function.
      */
-    public ShutdownHookThread(InternalLogger log, Callable callback) {
+    public ShutdownHookThread(Logger log, Callable callback) {
         super("ShutdownHook");
         this.log = log;
         this.callback = callback;

File: store/src/main/java/org/apache/rocketmq/store/AllocateMappedFileService.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.logfile.DefaultMappedFile;
 import org.apache.rocketmq.store.logfile.MappedFile;
@@ -37,7 +37,7 @@
  * Create MappedFile in advance
  */
 public class AllocateMappedFileService extends ServiceThread {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
     private static int waitTimeOut = 1000 * 5;
     private ConcurrentMap<String, AllocateRequest> requestTable =
         new ConcurrentHashMap<>();

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -45,8 +45,8 @@
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.common.utils.QueueTypeUtils;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.MessageExtEncoder.PutMessageThreadLocal;
 import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.config.FlushDiskType;
@@ -60,7 +60,7 @@
 public class CommitLog implements Swappable {
     // Message's MAGIC CODE daa320a7
     public final static int MESSAGE_MAGIC_CODE = -626843481;
-    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    protected static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
     // End of file empty MAGIC CODE cbd43194
     public final static int BLANK_MAGIC_CODE = -875286124;
     protected final MappedFileQueue mappedFileQueue;

File: store/src/main/java/org/apache/rocketmq/store/ConsumeQueueExt.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.rocketmq.store;
 
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 import java.io.File;
 import java.nio.ByteBuffer;
@@ -38,7 +38,7 @@
  * <li>4. Pls keep this file small.</li>
  */
 public class ConsumeQueueExt {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
 
     private final MappedFileQueue mappedFileQueue;
     private final String topic;

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -71,8 +71,8 @@
 import org.apache.rocketmq.common.utils.CleanupPolicyUtils;
 import org.apache.rocketmq.common.utils.QueueTypeUtils;
 import org.apache.rocketmq.common.utils.ServiceProvider;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;
 import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.config.FlushDiskType;
@@ -99,7 +99,7 @@
 import org.apache.rocketmq.store.util.PerfCounter;
 
 public class DefaultMessageStore implements MessageStore {
-    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
 
     public final PerfCounter.Ticks perfs = new PerfCounter.Ticks(LOGGER);
 

File: store/src/main/java/org/apache/rocketmq/store/FlushDiskWatcher.java
Patch:
@@ -21,12 +21,12 @@
 
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.CommitLog.GroupCommitRequest;
 
 public class FlushDiskWatcher extends ServiceThread {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
     private final LinkedBlockingQueue<GroupCommitRequest> commitRequests = new LinkedBlockingQueue<>();
 
     @Override

File: store/src/main/java/org/apache/rocketmq/store/MessageExtEncoder.java
Patch:
@@ -25,13 +25,13 @@
 import org.apache.rocketmq.common.message.MessageExtBatch;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 import java.nio.ByteBuffer;
 
 public class MessageExtEncoder {
-    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    protected static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
     private ByteBuf byteBuf;
     // The maximum length of the message body.
     private int maxMessageBodySize;

File: store/src/main/java/org/apache/rocketmq/store/StoreCheckpoint.java
Patch:
@@ -24,12 +24,12 @@
 import java.nio.channels.FileChannel.MapMode;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.logfile.DefaultMappedFile;
 
 public class StoreCheckpoint {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
     private final RandomAccessFile randomAccessFile;
     private final FileChannel fileChannel;
     private final MappedByteBuffer mappedByteBuffer;

File: store/src/main/java/org/apache/rocketmq/store/StoreStatsService.java
Patch:
@@ -31,11 +31,11 @@
 import org.apache.rocketmq.common.BrokerIdentity;
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 
 public class StoreStatsService extends ServiceThread {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
 
     private static final int FREQUENCY_OF_SAMPLING = 1000;
 

File: store/src/main/java/org/apache/rocketmq/store/StoreUtil.java
Patch:
@@ -18,8 +18,8 @@
 
 import com.google.common.base.Preconditions;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.shade.org.slf4j.Logger;
+import org.apache.rocketmq.shade.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.store.logfile.MappedFile;
 
 import java.lang.management.ManagementFactory;
@@ -29,7 +29,7 @@
 import static java.lang.String.format;
 
 public class StoreUtil {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
 
     public static final long TOTAL_PHYSICAL_MEMORY_SIZE = getTotalPhysicalMemorySize();
 

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -1651,7 +1651,7 @@ public TopicConfigSerializeWrapper getUserTopicConfig(final String brokerAddr, f
     @Override
     public void createTopic(String key, String newTopic, int queueNum,
         Map<String, String> attributes) throws MQClientException {
-        createTopic(key, newTopic, queueNum, 0, null);
+        createTopic(key, newTopic, queueNum, 0, attributes);
     }
 
     @Override

File: broker/src/main/java/org/apache/rocketmq/broker/metrics/BrokerMetricsManager.java
Patch:
@@ -516,4 +516,5 @@ public void shutdown() {
             prometheusHttpServer.shutdown();
         }
     }
+
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/ProxyStartup.java
Patch:
@@ -134,7 +134,7 @@ protected static CommandLineArgument parseCommandLineArgument(String[] args) {
     }
 
     private static Options buildCommandlineOptions() {
-        Options options =  ServerUtil.buildCommandlineOptions(new Options());
+        Options options = ServerUtil.buildCommandlineOptions(new Options());
 
         Option opt = new Option("bc", "brokerConfigPath", true, "Broker config file path for local mode");
         opt.setRequired(false);

File: proxy/src/main/java/org/apache/rocketmq/proxy/metrics/ProxyMetricsManager.java
Patch:
@@ -69,6 +69,9 @@ public class ProxyMetricsManager implements StartAndShutdown {
     public static ObservableLongGauge proxyUp = null;
 
     public static void initLocalMode(BrokerMetricsManager brokerMetricsManager, ProxyConfig proxyConfig) {
+        if (proxyConfig.getMetricsExporterType() == BrokerConfig.MetricsExporterType.DISABLE) {
+            return;
+        }
         ProxyMetricsManager.proxyConfig = proxyConfig;
         LABEL_MAP.put(LABEL_NODE_TYPE, NODE_TYPE_PROXY);
         LABEL_MAP.put(LABEL_CLUSTER_NAME, proxyConfig.getProxyClusterName());

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServerBuilder.java
Patch:
@@ -144,7 +144,7 @@ protected void configSslContext(NettyServerBuilder serverBuilder) throws SSLExce
 
     public GrpcServerBuilder configInterceptor() {
         // grpc interceptors, including acl, logging etc.
-        List<AccessValidator> accessValidators = ServiceProvider.load(ServiceProvider.ACL_VALIDATOR_ID, AccessValidator.class);
+        List<AccessValidator> accessValidators = ServiceProvider.load(AccessValidator.class);
         if (!accessValidators.isEmpty()) {
             this.serverBuilder.intercept(new AuthenticationInterceptor(accessValidators));
         }

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -206,7 +206,7 @@ public DefaultMessageStore(final MessageStoreConfig messageStoreConfig, final Br
                 this.haService = new AutoSwitchHAService();
                 LOGGER.warn("Load AutoSwitch HA Service: {}", AutoSwitchHAService.class.getSimpleName());
             } else {
-                this.haService = ServiceProvider.loadClass(ServiceProvider.HA_SERVICE_ID, HAService.class);
+                this.haService = ServiceProvider.loadClass(HAService.class);
                 if (null == this.haService) {
                     this.haService = new DefaultHAService();
                     LOGGER.warn("Load default HA Service: {}", DefaultHAService.class.getSimpleName());

File: common/src/main/java/org/apache/rocketmq/common/utils/NetworkUtil.java
Patch:
@@ -95,12 +95,12 @@ public static String getLocalAddress() {
             ArrayList<String> ipv4Result = new ArrayList<>();
             ArrayList<String> ipv6Result = new ArrayList<>();
             while (enumeration.hasMoreElements()) {
-                final NetworkInterface networkInterface = enumeration.nextElement();
-                if (isBridge(networkInterface)) {
+                final NetworkInterface nif = enumeration.nextElement();
+                if (isBridge(nif) || nif.isVirtual() || nif.isPointToPoint() || !nif.isUp()) {
                     continue;
                 }
 
-                final Enumeration<InetAddress> en = networkInterface.getInetAddresses();
+                final Enumeration<InetAddress> en = nif.getInetAddresses();
                 while (en.hasMoreElements()) {
                     final InetAddress address = en.nextElement();
                     if (!address.isLoopbackAddress()) {

File: common/src/test/java/org/apache/rocketmq/common/NetworkUtilTest.java
Patch:
@@ -16,17 +16,19 @@
  */
 package org.apache.rocketmq.common;
 
+import java.net.InetAddress;
 import org.apache.rocketmq.common.utils.NetworkUtil;
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class NetworkUtilTest {
     @Test
-    public void testGetLocalAddress() throws Exception {
+    public void testGetLocalAddress() {
         String localAddress = NetworkUtil.getLocalAddress();
         assertThat(localAddress).isNotNull();
         assertThat(localAddress.length()).isGreaterThan(0);
+        assertThat(localAddress).isNotEqualTo(InetAddress.getLoopbackAddress().getHostAddress());
     }
 
     @Test

File: acl/src/main/java/org/apache/rocketmq/acl/AccessValidator.java
Patch:
@@ -22,8 +22,8 @@
 import java.util.Map;
 import org.apache.rocketmq.acl.common.AuthenticationHeader;
 import org.apache.rocketmq.common.AclConfig;
-import org.apache.rocketmq.common.DataVersion;
 import org.apache.rocketmq.common.PlainAccessConfig;
+import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public interface AccessValidator {

File: acl/src/main/java/org/apache/rocketmq/acl/common/Permission.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Set;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.acl.plain.PlainAccessResource;
-import org.apache.rocketmq.common.protocol.RequestCode;
+import org.apache.rocketmq.remoting.protocol.RequestCode;
 
 public class Permission {
 

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessValidator.java
Patch:
@@ -23,8 +23,8 @@
 import org.apache.rocketmq.acl.AccessValidator;
 import org.apache.rocketmq.acl.common.AuthenticationHeader;
 import org.apache.rocketmq.common.AclConfig;
-import org.apache.rocketmq.common.DataVersion;
 import org.apache.rocketmq.common.PlainAccessConfig;
+import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public class PlainAccessValidator implements AccessValidator {

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainPermissionManager.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.alibaba.fastjson.JSONArray;
 import com.alibaba.fastjson.JSONObject;
-
 import java.io.File;
 import java.io.IOException;
 import java.nio.file.FileAlreadyExistsException;
@@ -35,21 +34,20 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicLong;
-
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.acl.PermissionChecker;
 import org.apache.rocketmq.acl.common.AclConstants;
 import org.apache.rocketmq.acl.common.AclException;
 import org.apache.rocketmq.acl.common.AclUtils;
 import org.apache.rocketmq.acl.common.Permission;
 import org.apache.rocketmq.common.AclConfig;
-import org.apache.rocketmq.common.DataVersion;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.PlainAccessConfig;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.srvutil.AclFileWatchService;
 
 public class PlainPermissionManager {

File: acl/src/test/java/org/apache/rocketmq/acl/common/AclClientRPCHookTest.java
Patch:
@@ -22,11 +22,11 @@
 import java.util.TreeMap;
 import java.util.concurrent.ConcurrentHashMap;
 import org.apache.rocketmq.common.MixAll;
-import org.apache.rocketmq.common.protocol.RequestCode;
-import org.apache.rocketmq.common.protocol.header.PullMessageRequestHeader;
 import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
+import org.apache.rocketmq.remoting.protocol.RequestCode;
 import org.apache.rocketmq.remoting.protocol.RequestType;
+import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
 import org.junit.Test;
 
 import static org.apache.rocketmq.acl.common.SessionCredentials.ACCESS_KEY;
@@ -113,4 +113,4 @@ private SortedMap<String, String> oldVersionParseRequestContent(RemotingCommand
             throw new RuntimeException("incompatible exception.", e);
         }
     }
-}
\ No newline at end of file
+}

File: acl/src/test/java/org/apache/rocketmq/acl/plain/PlainPermissionManagerTest.java
Patch:
@@ -34,8 +34,8 @@
 import org.apache.rocketmq.acl.common.AclUtils;
 import org.apache.rocketmq.acl.common.Permission;
 import org.apache.rocketmq.common.AclConfig;
-import org.apache.rocketmq.common.DataVersion;
 import org.apache.rocketmq.common.PlainAccessConfig;
+import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.assertj.core.api.Assertions;
 import org.assertj.core.util.Lists;
 import org.junit.Assert;

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java
Patch:
@@ -31,9 +31,9 @@
 import org.apache.rocketmq.common.MQVersion;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
+import org.apache.rocketmq.common.utils.NetworkUtil;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
-import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.apache.rocketmq.remoting.netty.NettyClientConfig;
 import org.apache.rocketmq.remoting.netty.NettyServerConfig;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
@@ -136,7 +136,7 @@ public static BrokerController createBrokerController(String[] args) {
                 try {
                     String[] addrArray = namesrvAddr.split(";");
                     for (String addr : addrArray) {
-                        RemotingUtil.string2SocketAddress(addr);
+                        NetworkUtil.string2SocketAddress(addr);
                     }
                 } catch (Exception e) {
                     System.out.printf(

File: broker/src/main/java/org/apache/rocketmq/broker/client/ConsumerGroupInfo.java
Patch:
@@ -28,9 +28,9 @@
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
-import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;
-import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
-import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
+import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
+import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
 public class ConsumerGroupInfo {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);

File: broker/src/main/java/org/apache/rocketmq/broker/client/DefaultConsumerIdsChangeListener.java
Patch:
@@ -24,14 +24,13 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
-
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.AbstractBrokerRunnable;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
 public class DefaultConsumerIdsChangeListener implements ConsumerIdsChangeListener {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);

File: broker/src/main/java/org/apache/rocketmq/broker/loadbalance/MessageRequestModeManager.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.BrokerPathConfigHelper;
 import org.apache.rocketmq.common.ConfigManager;
-import org.apache.rocketmq.common.protocol.body.SetMessageRequestModeRequestBody;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
+import org.apache.rocketmq.remoting.protocol.body.SetMessageRequestModeRequestBody;
 
 public class MessageRequestModeManager extends ConfigManager {
 

File: broker/src/main/java/org/apache/rocketmq/broker/longpolling/PullRequest.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.rocketmq.broker.longpolling;
 
 import io.netty.channel.Channel;
-import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
+import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.store.MessageFilter;
 
 public class PullRequest {

File: broker/src/main/java/org/apache/rocketmq/broker/metrics/BrokerMetricsManager.java
Patch:
@@ -55,11 +55,11 @@
 import org.apache.rocketmq.common.metrics.NopLongCounter;
 import org.apache.rocketmq.common.metrics.NopLongHistogram;
 import org.apache.rocketmq.common.metrics.NopObservableLongGauge;
-import org.apache.rocketmq.common.protocol.header.SendMessageRequestHeader;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.metrics.RemotingMetricsManager;
+import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
 import org.apache.rocketmq.store.MessageStore;
 
 import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.AGGREGATION_DELTA;

File: broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerAttr.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.rocketmq.broker.metrics;
 
 import com.google.common.base.Objects;
-import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.remoting.protocol.LanguageCode;
+import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
 
 public class ConsumerAttr {
     String group;

File: broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java
Patch:
@@ -33,9 +33,9 @@
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.constant.PermName;
-import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.store.MessageStore;
 import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
 

File: broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOffsetManager.java
Patch:
@@ -29,11 +29,11 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.BrokerPathConfigHelper;
 import org.apache.rocketmq.common.ConfigManager;
-import org.apache.rocketmq.common.DataVersion;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
 public class ConsumerOffsetManager extends ConfigManager {

File: broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOrderInfoManager.java
Patch:
@@ -32,10 +32,10 @@
 import org.apache.rocketmq.common.ConfigManager;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.common.protocol.header.ExtraInfoUtil;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
+import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
 
 public class ConsumerOrderInfoManager extends ConfigManager {
 

File: broker/src/main/java/org/apache/rocketmq/broker/plugin/PullMessageResultHandler.java
Patch:
@@ -18,10 +18,10 @@
 package org.apache.rocketmq.broker.plugin;
 
 import io.netty.channel.Channel;
-import org.apache.rocketmq.common.protocol.header.PullMessageRequestHeader;
-import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
-import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
+import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
+import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
+import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.store.GetMessageResult;
 import org.apache.rocketmq.store.MessageFilter;
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/EndTransactionProcessor.java
Patch:
@@ -25,16 +25,16 @@
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.common.protocol.ResponseCode;
-import org.apache.rocketmq.common.protocol.header.EndTransactionRequestHeader;
+import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
-import org.apache.rocketmq.common.message.MessageExtBrokerInner;
+import org.apache.rocketmq.remoting.protocol.ResponseCode;
+import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.config.BrokerRole;
 

File: broker/src/main/java/org/apache/rocketmq/broker/schedule/DelayOffsetSerializeWrapper.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
-import org.apache.rocketmq.common.DataVersion;
+import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
 public class DelayOffsetSerializeWrapper extends RemotingSerializable {

File: broker/src/main/java/org/apache/rocketmq/broker/subscription/LmqSubscriptionGroupManager.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.MixAll;
-import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
+import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public class LmqSubscriptionGroupManager extends SubscriptionGroupManager {
 

File: broker/src/main/java/org/apache/rocketmq/broker/subscription/SubscriptionGroupManager.java
Patch:
@@ -24,13 +24,13 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.BrokerPathConfigHelper;
 import org.apache.rocketmq.common.ConfigManager;
-import org.apache.rocketmq.common.DataVersion;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
-import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
+import org.apache.rocketmq.remoting.protocol.DataVersion;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
+import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public class SubscriptionGroupManager extends ConfigManager {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/TransactionalMessageService.java
Patch:
@@ -16,11 +16,11 @@
  */
 package org.apache.rocketmq.broker.transaction;
 
+import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.common.protocol.header.EndTransactionRequestHeader;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
+import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
 import org.apache.rocketmq.store.PutMessageResult;
-import java.util.concurrent.CompletableFuture;
 
 public interface TransactionalMessageService {
 

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageUtil.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.rocketmq.broker.transaction.queue;
 
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.message.MessageAccessor;
@@ -26,9 +28,6 @@
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
 
-import java.nio.charset.Charset;
-import java.nio.charset.StandardCharsets;
-
 public class TransactionalMessageUtil {
     public static final String REMOVE_TAG = "d";
     public static final Charset CHARSET = StandardCharsets.UTF_8;

File: broker/src/test/java/org/apache/rocketmq/broker/client/ConsumerManagerScannerTest.java
Patch:
@@ -24,9 +24,9 @@
 import java.util.List;
 import java.util.Map;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
-import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;
-import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.remoting.protocol.LanguageCode;
+import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
+import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -143,4 +143,4 @@ public void testClientUnregisterEventInScanNotActiveChannel() {
         ClientChannelInfo clientChannelInfo = (ClientChannelInfo) groupEventListMap.get(ConsumerGroupEvent.CLIENT_UNREGISTER).get(0).args[0];
         assertThat(clientChannelInfo).isSameAs(clientInfo);
     }
-}
\ No newline at end of file
+}

File: broker/src/test/java/org/apache/rocketmq/broker/client/ConsumerManagerTest.java
Patch:
@@ -25,10 +25,10 @@
 import org.apache.rocketmq.broker.filter.ConsumerFilterManager;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
-import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;
-import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
-import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.remoting.protocol.LanguageCode;
+import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
+import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.store.stats.BrokerStatsManager;
 import org.assertj.core.api.Assertions;
 import org.junit.Before;

File: broker/src/test/java/org/apache/rocketmq/broker/longpolling/PullRequestHoldServiceTest.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.BrokerConfig;
-import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
+import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.store.DefaultMessageFilter;
 import org.apache.rocketmq.store.DefaultMessageStore;
 import org.assertj.core.api.Assertions;

File: broker/src/test/java/org/apache/rocketmq/broker/offset/ConsumerOrderInfoManagerTest.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.rocketmq.broker.topic.TopicConfigManager;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.TopicConfig;
-import org.apache.rocketmq.common.protocol.header.ExtraInfoUtil;
-import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
+import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
+import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 import org.assertj.core.util.Lists;
 import org.junit.Before;
 import org.junit.Test;
@@ -497,4 +497,4 @@ public void testLoadFromOldVersionOrderInfoData() {
         assertEquals(1, orderInfoMap.get(ExtraInfoUtil.getQueueOffsetMapKey(TOPIC, QUEUE_ID_0, 3)).intValue());
         assertEquals(1, orderInfoMap.get(ExtraInfoUtil.getQueueOffsetMapKey(TOPIC, QUEUE_ID_0, 4)).intValue());
     }
-}
\ No newline at end of file
+}

File: broker/src/test/java/org/apache/rocketmq/broker/offset/LmqConsumerOffsetManagerTest.java
Patch:
@@ -19,16 +19,15 @@
 
 import java.io.File;
 import java.util.Map;
-
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.subscription.LmqSubscriptionGroupManager;
 import org.apache.rocketmq.broker.topic.LmqTopicConfigManager;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.UtilAll;
-import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.remoting.netty.NettyClientConfig;
 import org.apache.rocketmq.remoting.netty.NettyServerConfig;
+import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 import org.junit.After;
 import org.junit.Test;
@@ -105,4 +104,4 @@ public void destroy() {
         UtilAll.deleteFile(new File(new MessageStoreConfig().getStorePathRootDir()));
     }
 
-}
\ No newline at end of file
+}

File: broker/src/test/java/org/apache/rocketmq/broker/processor/PopBufferMergeServiceTest.java
Patch:
@@ -25,9 +25,9 @@
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.TopicConfig;
-import org.apache.rocketmq.common.protocol.heartbeat.ConsumerData;
 import org.apache.rocketmq.remoting.netty.NettyClientConfig;
 import org.apache.rocketmq.remoting.netty.NettyServerConfig;
+import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumerData;
 import org.apache.rocketmq.store.DefaultMessageStore;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 import org.apache.rocketmq.store.pop.AckMsg;
@@ -122,4 +122,4 @@ public void testBasic() throws Exception {
             popBufferMergeService.shutdown(true);
         }
     }
-}
\ No newline at end of file
+}

File: broker/src/test/java/org/apache/rocketmq/broker/transaction/queue/DefaultTransactionalMessageCheckListenerTest.java
Patch:
@@ -22,10 +22,10 @@
 import org.apache.rocketmq.common.message.MessageAccessor;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
+import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.remoting.netty.NettyClientConfig;
 import org.apache.rocketmq.remoting.netty.NettyServerConfig;
-import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.store.MessageStore;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 import org.junit.After;

File: client/src/main/java/org/apache/rocketmq/client/ClientConfig.java
Patch:
@@ -23,11 +23,11 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.common.protocol.NamespaceUtil;
 import org.apache.rocketmq.common.utils.NameServerAddressUtils;
-import org.apache.rocketmq.remoting.common.RemotingUtil;
+import org.apache.rocketmq.common.utils.NetworkUtil;
 import org.apache.rocketmq.remoting.netty.TlsSystemConfig;
 import org.apache.rocketmq.remoting.protocol.LanguageCode;
+import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 import org.apache.rocketmq.remoting.protocol.RequestType;
 
 /**
@@ -39,7 +39,7 @@ public class ClientConfig {
     public static final String DECODE_READ_BODY = "com.rocketmq.read.body";
     public static final String DECODE_DECOMPRESS_BODY = "com.rocketmq.decompress.body";
     private String namesrvAddr = NameServerAddressUtils.getNameServerAddresses();
-    private String clientIP = RemotingUtil.getLocalAddress();
+    private String clientIP = NetworkUtil.getLocalAddress();
     private String instanceName = System.getProperty("rocketmq.client.name", "DEFAULT");
     private int clientCallbackExecutorThreads = Runtime.getRuntime().availableProcessors();
     protected String namespace;

File: client/src/main/java/org/apache/rocketmq/client/MQHelper.java
Patch:
@@ -20,9 +20,9 @@
 import java.util.TreeSet;
 import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
 import org.apache.rocketmq.client.log.ClientLogger;
-import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 
 public class MQHelper {
     @Deprecated

File: client/src/main/java/org/apache/rocketmq/client/Validators.java
Patch:
@@ -17,17 +17,17 @@
 
 package org.apache.rocketmq.client;
 
-import static org.apache.rocketmq.common.topic.TopicValidator.isTopicOrGroupIllegal;
-
 import java.util.Properties;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.PermName;
 import org.apache.rocketmq.common.message.Message;
-import org.apache.rocketmq.common.protocol.ResponseCode;
 import org.apache.rocketmq.common.topic.TopicValidator;
+import org.apache.rocketmq.remoting.protocol.ResponseCode;
+
+import static org.apache.rocketmq.common.topic.TopicValidator.isTopicOrGroupIllegal;
 
 /**
  * Common Validator

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultLitePullConsumer.java
Patch:
@@ -34,10 +34,10 @@
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.common.protocol.NamespaceUtil;
-import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
+import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
+import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 
 public class DefaultLitePullConsumer extends ClientConfig implements LitePullConsumer {
 

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPullConsumer.java
Patch:
@@ -30,10 +30,10 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.common.protocol.NamespaceUtil;
-import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingException;
+import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
+import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 
 /**
  * @deprecated Default pulling consumer. This class will be removed in 2022, and a better implementation {@link

File: client/src/main/java/org/apache/rocketmq/client/consumer/MQPullConsumerScheduleService.java
Patch:
@@ -27,10 +27,10 @@
 import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.common.protocol.NamespaceUtil;
-import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
+import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
+import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 
 /**
  * Schedule service for pull consumer.

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageService.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.List;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.common.protocol.body.ConsumeMessageDirectlyResult;
+import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
 
 public interface ConsumeMessageService {
     void start();

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/PopProcessQueue.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.rocketmq.client.impl.consumer;
 
 import java.util.concurrent.atomic.AtomicInteger;
-import org.apache.rocketmq.common.protocol.body.PopProcessQueueInfo;
+import org.apache.rocketmq.remoting.protocol.body.PopProcessQueueInfo;
 
 /**
  * Queue consumption snapshot

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceLitePullImpl.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;
-import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
+import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 
 public class RebalanceLitePullImpl extends RebalanceImpl {
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalancePullImpl.java
Patch:
@@ -23,8 +23,8 @@
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;
-import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
+import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 
 public class RebalancePullImpl extends RebalanceImpl {
     private final DefaultMQPullConsumerImpl defaultMQPullConsumerImpl;

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/MQProducerInner.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.rocketmq.client.producer.TransactionCheckListener;
 import org.apache.rocketmq.client.producer.TransactionListener;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.common.protocol.header.CheckTransactionStateRequestHeader;
+import org.apache.rocketmq.remoting.protocol.header.CheckTransactionStateRequestHeader;
 
 public interface MQProducerInner {
     Set<String> getPublishTopicList();

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/TopicPublishInfo.java
Patch:
@@ -20,8 +20,8 @@
 import java.util.List;
 import org.apache.rocketmq.client.common.ThreadLocalIndex;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.common.protocol.route.QueueData;
-import org.apache.rocketmq.common.protocol.route.TopicRouteData;
+import org.apache.rocketmq.remoting.protocol.route.QueueData;
+import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
 
 public class TopicPublishInfo {
     private boolean orderTopic = false;

File: client/src/main/java/org/apache/rocketmq/client/producer/DefaultMQProducer.java
Patch:
@@ -41,11 +41,11 @@
 import org.apache.rocketmq.common.message.MessageClientIDSetter;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.common.protocol.ResponseCode;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingException;
+import org.apache.rocketmq.remoting.protocol.ResponseCode;
 
 /**
  * This class is the entry point for applications intending to send messages. </p>
@@ -284,7 +284,7 @@ public void setUseTLS(boolean useTLS) {
             ((AsyncTraceDispatcher) traceDispatcher).getTraceProducer().setUseTLS(useTLS);
         }
     }
-    
+
     /**
      * Start this producer instance. </p>
      *

File: client/src/main/java/org/apache/rocketmq/client/producer/TransactionMQProducer.java
Patch:
@@ -19,8 +19,8 @@
 import java.util.concurrent.ExecutorService;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.message.Message;
-import org.apache.rocketmq.common.protocol.NamespaceUtil;
 import org.apache.rocketmq.remoting.RPCHook;
+import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 
 public class TransactionMQProducer extends DefaultMQProducer {
     private TransactionCheckListener transactionCheckListener;

File: client/src/main/java/org/apache/rocketmq/client/stat/ConsumerStatsManager.java
Patch:
@@ -18,12 +18,11 @@
 package org.apache.rocketmq.client.stat;
 
 import java.util.concurrent.ScheduledExecutorService;
-
 import org.apache.rocketmq.client.log.ClientLogger;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.common.protocol.body.ConsumeStatus;
 import org.apache.rocketmq.common.stats.StatsItemSet;
 import org.apache.rocketmq.common.stats.StatsSnapshot;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.remoting.protocol.body.ConsumeStatus;
 
 public class ConsumerStatsManager {
     private static final InternalLogger log = ClientLogger.getLog();

File: client/src/main/java/org/apache/rocketmq/client/trace/AsyncTraceDispatcher.java
Patch:
@@ -29,7 +29,6 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
-
 import org.apache.rocketmq.client.AccessChannel;
 import org.apache.rocketmq.client.common.ThreadLocalIndex;
 import org.apache.rocketmq.client.exception.MQClientException;

File: client/src/main/java/org/apache/rocketmq/client/trace/hook/EndTransactionTraceHookImpl.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.client.trace.hook;
 
+import java.util.ArrayList;
 import org.apache.rocketmq.client.hook.EndTransactionContext;
 import org.apache.rocketmq.client.hook.EndTransactionHook;
 import org.apache.rocketmq.client.trace.AsyncTraceDispatcher;
@@ -27,9 +28,7 @@
 import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageType;
-import org.apache.rocketmq.common.protocol.NamespaceUtil;
-
-import java.util.ArrayList;
+import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 
 public class EndTransactionTraceHookImpl implements EndTransactionHook {
 

File: client/src/main/java/org/apache/rocketmq/client/trace/hook/SendMessageTraceHookImpl.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.rocketmq.client.trace.TraceContext;
 import org.apache.rocketmq.client.trace.TraceDispatcher;
 import org.apache.rocketmq.client.trace.TraceType;
-import org.apache.rocketmq.common.protocol.NamespaceUtil;
+import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 
 public class SendMessageTraceHookImpl implements SendMessageHook {
 

File: client/src/test/java/org/apache/rocketmq/client/ValidatorsTest.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.constant.PermName;
-import org.apache.rocketmq.common.protocol.ResponseCode;
 import org.apache.rocketmq.common.topic.TopicValidator;
+import org.apache.rocketmq.remoting.protocol.ResponseCode;
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -41,7 +41,7 @@ public void testGroupNameBlank() {
             assertThat(e.getErrorMessage()).isEqualTo("the specified group is blank");
         }
     }
-    
+
     @Test
     public void testCheckTopic_Success() throws MQClientException {
         Validators.checkTopic("Hello");

File: client/src/test/java/org/apache/rocketmq/client/consumer/DefaultMQPullConsumerTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.common.protocol.header.PullMessageRequestHeader;
+import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
@@ -161,4 +161,4 @@ private PullResultExt createPullResult(PullMessageRequestHeader requestHeader, P
         List<MessageExt> messageExtList) throws Exception {
         return new PullResultExt(pullStatus, requestHeader.getQueueOffset() + messageExtList.size(), 123, 2048, messageExtList, 0, new byte[] {});
     }
-}
\ No newline at end of file
+}

File: client/src/test/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumerTest.java
Patch:
@@ -57,10 +57,10 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.common.protocol.header.PullMessageRequestHeader;
-import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingException;
+import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
+import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 import org.junit.AfterClass;
 import org.junit.Assert;
 import org.junit.Before;

File: client/src/test/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyServiceTest.java
Patch:
@@ -27,7 +27,6 @@
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicReference;
-
 import org.apache.commons.lang3.reflect.FieldUtils;
 import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
 import org.apache.rocketmq.client.consumer.PullCallback;
@@ -47,11 +46,12 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.common.protocol.header.PullMessageRequestHeader;
 import org.apache.rocketmq.common.stats.StatsItem;
 import org.apache.rocketmq.common.stats.StatsItemSet;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingException;
+import org.apache.rocketmq.remoting.protocol.body.ConsumeStatus;
+import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -183,7 +183,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
 
         Thread.sleep(1000);
 
-        org.apache.rocketmq.common.protocol.body.ConsumeStatus stats = normalServie.getConsumerStatsManager().consumeStatus(pushConsumer.getDefaultMQPushConsumerImpl().groupName(),topic);
+        ConsumeStatus stats = normalServie.getConsumerStatsManager().consumeStatus(pushConsumer.getDefaultMQPushConsumerImpl().groupName(),topic);
 
         ConsumerStatsManager mgr  =   normalServie.getConsumerStatsManager();
 

File: client/src/test/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyServiceTest.java
Patch:
@@ -29,7 +29,6 @@
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicReference;
-
 import org.apache.commons.lang3.reflect.FieldUtils;
 import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
 import org.apache.rocketmq.client.consumer.PullCallback;
@@ -47,9 +46,9 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.common.protocol.body.CMResult;
-import org.apache.rocketmq.common.protocol.header.PullMessageRequestHeader;
 import org.apache.rocketmq.remoting.RPCHook;
+import org.apache.rocketmq.remoting.protocol.body.CMResult;
+import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mock;

File: client/src/test/java/org/apache/rocketmq/client/impl/consumer/ProcessQueueTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Collections;
 import java.util.List;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.common.protocol.body.ProcessQueueInfo;
+import org.apache.rocketmq.remoting.protocol.body.ProcessQueueInfo;
 import org.assertj.core.util.Lists;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -117,4 +117,4 @@ private List<MessageExt> createMessageList(int count) {
         }
         return messageExtList;
     }
-}
\ No newline at end of file
+}

File: client/src/test/java/org/apache/rocketmq/client/impl/consumer/RebalancePushImplTest.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
-
 import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
 import org.apache.rocketmq.client.consumer.rebalance.AllocateMessageQueueAveragely;
 import org.apache.rocketmq.client.consumer.store.OffsetStore;
@@ -30,8 +29,8 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
-import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
+import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQConsumerWithOpenTracingTest.java
Patch:
@@ -62,9 +62,9 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.common.protocol.header.PullMessageRequestHeader;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingException;
+import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: common/src/main/java/org/apache/rocketmq/common/utils/IOTinyUtils.java
Patch:
@@ -29,14 +29,14 @@
 import java.io.Reader;
 import java.io.Writer;
 import java.nio.channels.FileChannel;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
-import org.apache.rocketmq.remoting.common.RemotingHelper;
 
 public class IOTinyUtils {
 
     static public String toString(InputStream input, String encoding) throws IOException {
-        return (null == encoding) ? toString(new InputStreamReader(input, RemotingHelper.DEFAULT_CHARSET)) : toString(new InputStreamReader(
+        return (null == encoding) ? toString(new InputStreamReader(input, StandardCharsets.UTF_8)) : toString(new InputStreamReader(
             input, encoding));
     }
 

File: container/src/main/java/org/apache/rocketmq/container/BrokerContainer.java
Patch:
@@ -27,22 +27,21 @@
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
-
 import org.apache.commons.lang3.concurrent.BasicThreadFactory;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.BrokerPathConfigHelper;
-import org.apache.rocketmq.container.logback.BrokerLogbackConfigurator;
 import org.apache.rocketmq.broker.out.BrokerOuterAPI;
 import org.apache.rocketmq.common.AbstractBrokerRunnable;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.BrokerIdentity;
-import org.apache.rocketmq.common.Configuration;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.utils.ThreadUtils;
+import org.apache.rocketmq.container.logback.BrokerLogbackConfigurator;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.remoting.Configuration;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.RemotingServer;
 import org.apache.rocketmq.remoting.netty.NettyClientConfig;

File: container/src/main/java/org/apache/rocketmq/container/BrokerContainerConfig.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.annotation.ImportantField;
-import org.apache.rocketmq.remoting.common.RemotingUtil;
+import org.apache.rocketmq.common.utils.NetworkUtil;
 
 public class BrokerContainerConfig {
 
@@ -35,7 +35,7 @@ public class BrokerContainerConfig {
     private boolean fetchNamesrvAddrByAddressServer = false;
 
     @ImportantField
-    private String brokerContainerIP = RemotingUtil.getLocalAddress();
+    private String brokerContainerIP = NetworkUtil.getLocalAddress();
 
     private String brokerConfigPaths = null;
 

File: container/src/test/java/org/apache/rocketmq/container/BrokerPreOnlineTest.java
Patch:
@@ -21,13 +21,12 @@
 import java.time.Duration;
 import java.util.HashMap;
 import java.util.Map;
-
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.BrokerPreOnlineService;
 import org.apache.rocketmq.broker.out.BrokerOuterAPI;
 import org.apache.rocketmq.broker.transaction.TransactionalMessageCheckService;
 import org.apache.rocketmq.common.BrokerConfig;
-import org.apache.rocketmq.common.protocol.body.BrokerMemberGroup;
+import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
 import org.apache.rocketmq.store.DefaultMessageStore;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 import org.junit.Test;

File: controller/src/main/java/org/apache/rocketmq/controller/impl/event/ControllerResult.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import org.apache.rocketmq.common.protocol.ResponseCode;
+import org.apache.rocketmq.remoting.protocol.ResponseCode;
 
 public class ControllerResult<T> {
     private final List<EventMessage> events;

File: example/src/main/java/org/apache/rocketmq/example/broadcast/PushConsumer.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
-import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 
 public class PushConsumer {
 
@@ -52,4 +52,4 @@ public static void main(String[] args) throws InterruptedException, MQClientExce
         consumer.start();
         System.out.printf("Broadcast Consumer Started.%n");
     }
-}
\ No newline at end of file
+}

File: example/src/main/java/org/apache/rocketmq/example/simple/PopPushConsumer.java
Patch:
@@ -23,8 +23,8 @@
 import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
 import org.apache.rocketmq.common.message.MessageRequestMode;
-import org.apache.rocketmq.common.protocol.body.ClusterInfo;
-import org.apache.rocketmq.common.protocol.route.BrokerData;
+import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
+import org.apache.rocketmq.remoting.protocol.route.BrokerData;
 import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
 
 public class PopPushConsumer {

File: example/src/main/java/org/apache/rocketmq/example/simple/PullScheduleService.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.rocketmq.client.consumer.PullTaskContext;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
 
 public class PullScheduleService {
 

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/kvconfig/KVConfigManager.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
-import org.apache.rocketmq.common.protocol.body.KVTable;
 import org.apache.rocketmq.namesrv.NamesrvController;
+import org.apache.rocketmq.remoting.protocol.body.KVTable;
 
 public class KVConfigManager {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/ClientRequestProcessor.java
Patch:
@@ -25,15 +25,15 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.help.FAQUrl;
 import org.apache.rocketmq.common.namesrv.NamesrvUtil;
-import org.apache.rocketmq.common.protocol.ResponseCode;
-import org.apache.rocketmq.common.protocol.header.namesrv.GetRouteInfoRequestHeader;
-import org.apache.rocketmq.common.protocol.route.TopicRouteData;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
+import org.apache.rocketmq.remoting.protocol.ResponseCode;
+import org.apache.rocketmq.remoting.protocol.header.namesrv.GetRouteInfoRequestHeader;
+import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
 
 public class ClientRequestProcessor implements NettyRequestProcessor {
 

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/BatchUnregistrationService.java
Patch:
@@ -24,9 +24,9 @@
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.namesrv.NamesrvConfig;
-import org.apache.rocketmq.common.protocol.header.namesrv.UnRegisterBrokerRequestHeader;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.remoting.protocol.header.namesrv.UnRegisterBrokerRequestHeader;
 
 /**
  * BatchUnregistrationService provides a mechanism to unregister brokers in batch manner, which speeds up broker-offline

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/NamesrvControllerTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.rocketmq.namesrv;
 
-import org.apache.rocketmq.common.Configuration;
 import org.apache.rocketmq.common.namesrv.NamesrvConfig;
 import org.apache.rocketmq.namesrv.kvconfig.KVConfigManager;
 import org.apache.rocketmq.namesrv.routeinfo.RouteInfoManager;
+import org.apache.rocketmq.remoting.Configuration;
 import org.apache.rocketmq.remoting.RemotingServer;
 import org.apache.rocketmq.remoting.netty.NettyServerConfig;
 import org.junit.Assert;
@@ -88,4 +88,4 @@ public void getConfiguration() {
         Configuration configuration = namesrvController.getConfiguration();
         Assert.assertNotNull(configuration);
     }
-}
\ No newline at end of file
+}

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/routeinfo/GetRouteInfoBenchmark.java
Patch:
@@ -29,11 +29,11 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 import org.apache.commons.lang3.RandomStringUtils;
-import org.apache.rocketmq.common.DataVersion;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.namesrv.NamesrvConfig;
-import org.apache.rocketmq.common.protocol.body.TopicConfigSerializeWrapper;
 import org.apache.rocketmq.common.utils.ThreadUtils;
+import org.apache.rocketmq.remoting.protocol.DataVersion;
+import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.annotations.BenchmarkMode;
 import org.openjdk.jmh.annotations.Fork;

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/routeinfo/RegisterBrokerBenchmark.java
Patch:
@@ -29,11 +29,11 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 import org.apache.commons.lang3.RandomStringUtils;
-import org.apache.rocketmq.common.DataVersion;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.namesrv.NamesrvConfig;
-import org.apache.rocketmq.common.protocol.body.TopicConfigSerializeWrapper;
 import org.apache.rocketmq.common.utils.ThreadUtils;
+import org.apache.rocketmq.remoting.protocol.DataVersion;
+import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.annotations.BenchmarkMode;
 import org.openjdk.jmh.annotations.Fork;

File: openmessaging/src/main/java/io/openmessaging/rocketmq/producer/AbstractOMSProducer.java
Patch:
@@ -34,10 +34,10 @@
 import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
 import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.common.protocol.ResponseCode;
 import org.apache.rocketmq.remoting.exception.RemotingConnectException;
 import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
 import org.apache.rocketmq.remoting.protocol.LanguageCode;
+import org.apache.rocketmq.remoting.protocol.ResponseCode;
 
 import static io.openmessaging.rocketmq.utils.OMSUtil.buildInstanceName;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/utils/FilterUtils.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.rocketmq.proxy.common.utils;
 
 import java.util.Set;
-import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
+import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
 public class FilterUtils {
     /**

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/RequestMapping.java
Patch:
@@ -29,7 +29,7 @@
 import apache.rocketmq.v2.SendMessageRequest;
 import java.util.HashMap;
 import java.util.Map;
-import org.apache.rocketmq.common.protocol.RequestCode;
+import org.apache.rocketmq.remoting.protocol.RequestCode;
 
 public class RequestMapping {
     private final static Map<String, Integer> REQUEST_MAP = new HashMap<String, Integer>() {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/channel/GrpcChannelManager.java
Patch:
@@ -26,13 +26,13 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
-import org.apache.rocketmq.common.protocol.ResponseCode;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.service.relay.ProxyRelayResult;
 import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
+import org.apache.rocketmq.remoting.protocol.ResponseCode;
 
 public class GrpcChannelManager implements StartAndShutdown {
     private final ProxyRelayService proxyRelayService;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcConverter.java
Patch:
@@ -40,12 +40,12 @@
 import org.apache.rocketmq.common.filter.ExpressionType;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.common.protocol.NamespaceUtil;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.utils.BinaryUtil;
+import org.apache.rocketmq.common.utils.NetworkUtil;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
-import org.apache.rocketmq.remoting.common.RemotingUtil;
+import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
 
 public class GrpcConverter {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
@@ -193,7 +193,7 @@ protected SystemProperties buildSystemProperties(MessageExt messageExt) {
         // store_host
         SocketAddress storeHost = messageExt.getStoreHost();
         if (storeHost != null) {
-            systemPropertiesBuilder.setStoreHost(RemotingUtil.socketAddress2String(storeHost));
+            systemPropertiesBuilder.setStoreHost(NetworkUtil.socketAddress2String(storeHost));
         }
 
         // delivery_timestamp

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/ResponseBuilder.java
Patch:
@@ -25,13 +25,13 @@
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.common.protocol.ResponseCode;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.utils.ExceptionUtils;
 import org.apache.rocketmq.proxy.service.route.TopicRouteHelper;
 import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
+import org.apache.rocketmq.remoting.protocol.ResponseCode;
 
 public class ResponseBuilder {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/PopMessageResultFilterImpl.java
Patch:
@@ -17,10 +17,10 @@
 package org.apache.rocketmq.proxy.grpc.v2.consumer;
 
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.utils.FilterUtils;
 import org.apache.rocketmq.proxy.processor.PopMessageResultFilter;
+import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
 public class PopMessageResultFilterImpl implements PopMessageResultFilter {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java
Patch:
@@ -28,10 +28,8 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.client.consumer.PopStatus;
 import org.apache.rocketmq.common.constant.ConsumeInitMode;
-import org.apache.rocketmq.common.filter.FilterAPI;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.proxy.common.MessageReceiptHandle;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
@@ -46,6 +44,8 @@
 import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
 import org.apache.rocketmq.proxy.service.route.MessageQueueSelector;
 import org.apache.rocketmq.proxy.service.route.MessageQueueView;
+import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
+import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
 public class ReceiveMessageActivity extends AbstractMessingActivity {
     protected ReceiptHandleProcessor receiptHandleProcessor;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivity.java
Patch:
@@ -39,7 +39,6 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.attribute.TopicMessageType;
 import org.apache.rocketmq.common.constant.PermName;
-import org.apache.rocketmq.common.protocol.route.QueueData;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.grpc.v2.AbstractMessingActivity;
@@ -49,6 +48,7 @@
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
 import org.apache.rocketmq.proxy.service.route.ProxyTopicRouteData;
+import org.apache.rocketmq.remoting.protocol.route.QueueData;
 
 public class RouteActivity extends AbstractMessingActivity {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ClientProcessor.java
Patch:
@@ -23,11 +23,11 @@
 import org.apache.rocketmq.broker.client.ConsumerIdsChangeListener;
 import org.apache.rocketmq.broker.client.ProducerChangeListener;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
-import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;
-import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
-import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.service.ServiceManager;
+import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
+import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
+import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
 public class ClientProcessor extends AbstractProcessor {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/PopMessageResultFilter.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.rocketmq.proxy.processor;
 
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.proxy.common.ProxyContext;
+import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
 public interface PopMessageResultFilter {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessor.java
Patch:
@@ -38,8 +38,6 @@
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
-import org.apache.rocketmq.common.subscription.RetryPolicy;
-import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
 import org.apache.rocketmq.common.utils.ConcurrentHashMapUtils;
 import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
@@ -52,6 +50,8 @@
 import org.apache.rocketmq.proxy.common.utils.ExceptionUtils;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
+import org.apache.rocketmq.remoting.protocol.subscription.RetryPolicy;
+import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/metadata/ClusterMetadataService.java
Patch:
@@ -24,9 +24,6 @@
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.common.attribute.TopicMessageType;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.common.protocol.route.BrokerData;
-import org.apache.rocketmq.common.statictopic.TopicConfigAndQueueMapping;
-import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
@@ -37,6 +34,9 @@
 import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.proxy.service.route.TopicRouteHelper;
 import org.apache.rocketmq.proxy.service.route.TopicRouteService;
+import org.apache.rocketmq.remoting.protocol.route.BrokerData;
+import org.apache.rocketmq.remoting.protocol.statictopic.TopicConfigAndQueueMapping;
+import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public class ClusterMetadataService extends AbstractStartAndShutdown implements MetadataService {
     protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/metadata/LocalMetadataService.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.attribute.TopicMessageType;
-import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
+import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public class LocalMetadataService implements MetadataService {
     private final BrokerController brokerController;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/metadata/MetadataService.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.rocketmq.proxy.service.metadata;
 
 import org.apache.rocketmq.common.attribute.TopicMessageType;
-import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
+import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 
 public interface MetadataService {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/relay/AbstractProxyRelayService.java
Patch:
@@ -20,14 +20,14 @@
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.common.protocol.header.CheckTransactionStateRequestHeader;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
 import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
 import org.apache.rocketmq.proxy.service.transaction.TransactionData;
 import org.apache.rocketmq.proxy.service.transaction.TransactionService;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
+import org.apache.rocketmq.remoting.protocol.header.CheckTransactionStateRequestHeader;
 
 public abstract class AbstractProxyRelayService implements ProxyRelayService {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/ClusterTopicRouteService.java
Patch:
@@ -19,10 +19,10 @@
 import java.util.List;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.common.protocol.route.BrokerData;
-import org.apache.rocketmq.common.protocol.route.TopicRouteData;
 import org.apache.rocketmq.proxy.common.Address;
 import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
+import org.apache.rocketmq.remoting.protocol.route.BrokerData;
+import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
 
 public class ClusterTopicRouteService extends TopicRouteService {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/LocalTopicRouteService.java
Patch:
@@ -25,12 +25,12 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.common.protocol.route.BrokerData;
-import org.apache.rocketmq.common.protocol.route.QueueData;
-import org.apache.rocketmq.common.protocol.route.TopicRouteData;
 import org.apache.rocketmq.proxy.common.Address;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
+import org.apache.rocketmq.remoting.protocol.route.BrokerData;
+import org.apache.rocketmq.remoting.protocol.route.QueueData;
+import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
 
 public class LocalTopicRouteService extends TopicRouteService {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/MessageQueueSelector.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.constant.PermName;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.common.protocol.route.QueueData;
+import org.apache.rocketmq.remoting.protocol.route.QueueData;
 
 public class MessageQueueSelector {
     private static final int BROKER_ACTING_QUEUE_ID = -1;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/MessageQueueView.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.rocketmq.proxy.service.route;
 
 import com.google.common.base.MoreObjects;
-import org.apache.rocketmq.common.protocol.route.TopicRouteData;
+import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
 
 public class MessageQueueView {
     public static final MessageQueueView WRAPPED_EMPTY_QUEUE = new MessageQueueView("", new TopicRouteData());
@@ -61,4 +61,4 @@ public String toString() {
             .add("topicRouteWrapper", topicRouteWrapper)
             .toString();
     }
-}
\ No newline at end of file
+}

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/ProxyTopicRouteData.java
Patch:
@@ -21,10 +21,10 @@
 import java.util.List;
 import java.util.Map;
 import java.util.stream.Collectors;
-import org.apache.rocketmq.common.protocol.route.BrokerData;
-import org.apache.rocketmq.common.protocol.route.QueueData;
-import org.apache.rocketmq.common.protocol.route.TopicRouteData;
 import org.apache.rocketmq.proxy.common.Address;
+import org.apache.rocketmq.remoting.protocol.route.BrokerData;
+import org.apache.rocketmq.remoting.protocol.route.QueueData;
+import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
 
 public class ProxyTopicRouteData {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/TopicRouteHelper.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.rocketmq.client.common.ClientErrorCode;
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
-import org.apache.rocketmq.common.protocol.ResponseCode;
+import org.apache.rocketmq.remoting.protocol.ResponseCode;
 
 public class TopicRouteHelper {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/TopicRouteService.java
Patch:
@@ -29,8 +29,6 @@
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.common.protocol.ResponseCode;
-import org.apache.rocketmq.common.protocol.route.TopicRouteData;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
@@ -40,6 +38,8 @@
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
+import org.apache.rocketmq.remoting.protocol.ResponseCode;
+import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import org.checkerframework.checker.nullness.qual.Nullable;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/TopicRouteWrapper.java
Patch:
@@ -21,9 +21,9 @@
 import java.util.Map;
 import java.util.Optional;
 import org.apache.rocketmq.common.MixAll;
-import org.apache.rocketmq.common.protocol.route.BrokerData;
-import org.apache.rocketmq.common.protocol.route.QueueData;
-import org.apache.rocketmq.common.protocol.route.TopicRouteData;
+import org.apache.rocketmq.remoting.protocol.route.BrokerData;
+import org.apache.rocketmq.remoting.protocol.route.QueueData;
+import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
 
 public class TopicRouteWrapper {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/AbstractTransactionService.java
Patch:
@@ -19,10 +19,10 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.message.Message;
-import org.apache.rocketmq.common.protocol.header.EndTransactionRequestHeader;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
+import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
 
 public abstract class AbstractTransactionService implements TransactionService, StartAndShutdown {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/ClusterTransactionService.java
Patch:
@@ -33,9 +33,6 @@
 import org.apache.rocketmq.broker.client.ProducerManager;
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.common.protocol.heartbeat.HeartbeatData;
-import org.apache.rocketmq.common.protocol.heartbeat.ProducerData;
-import org.apache.rocketmq.common.protocol.route.BrokerData;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
@@ -45,6 +42,9 @@
 import org.apache.rocketmq.proxy.service.route.MessageQueueView;
 import org.apache.rocketmq.proxy.service.route.TopicRouteService;
 import org.apache.rocketmq.remoting.RPCHook;
+import org.apache.rocketmq.remoting.protocol.heartbeat.HeartbeatData;
+import org.apache.rocketmq.remoting.protocol.heartbeat.ProducerData;
+import org.apache.rocketmq.remoting.protocol.route.BrokerData;
 
 public class ClusterTransactionService extends AbstractTransactionService {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/EndTransactionRequestData.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.rocketmq.proxy.service.transaction;
 
-import org.apache.rocketmq.common.protocol.header.EndTransactionRequestHeader;
+import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
 
 public class EndTransactionRequestData {
     private String brokerName;

File: proxy/src/test/java/org/apache/rocketmq/proxy/common/utils/FilterUtilTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.rocketmq.proxy.common.utils;
 
-import org.apache.rocketmq.common.filter.FilterAPI;
-import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
+import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
+import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -48,4 +48,4 @@ public void testTagNotMatchedNull() throws Exception {
         assertThat(FilterUtils.isTagMatched(subscriptionData.getTagsSet(), null)).isFalse();
     }
 
-} 
+}

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/AbstractMessingActivityTest.java
Patch:
@@ -74,4 +74,4 @@ private static String createString(int len) {
         }
         return sb.toString();
     }
-}
\ No newline at end of file
+}

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/BaseActivityTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.time.Duration;
 import java.util.Random;
 import java.util.UUID;
-import org.apache.rocketmq.common.protocol.header.ExtraInfoUtil;
 import org.apache.rocketmq.proxy.common.ContextVariable;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
@@ -32,6 +31,7 @@
 import org.apache.rocketmq.proxy.processor.ReceiptHandleProcessor;
 import org.apache.rocketmq.proxy.service.metadata.MetadataService;
 import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
+import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
 import org.junit.Ignore;
 import org.junit.runner.RunWith;
 import org.mockito.junit.MockitoJUnitRunner;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageResponseStreamWriterTest.java
Patch:
@@ -38,9 +38,9 @@
 import org.apache.rocketmq.common.message.MessageClientIDSetter;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.common.protocol.header.ExtraInfoUtil;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.BaseActivityTest;
+import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
@@ -155,4 +155,4 @@ private static MessageExt createMessageExt(String topic, String tags) {
                 RANDOM.nextInt(Integer.MAX_VALUE), topic, "mockBroker", RANDOM.nextInt(Integer.MAX_VALUE), RANDOM.nextInt(Integer.MAX_VALUE)));
         return messageExt;
     }
-}
\ No newline at end of file
+}

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/producer/ForwardMessageToDLQActivityTest.java
Patch:
@@ -24,10 +24,10 @@
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
 import org.apache.rocketmq.common.message.MessageClientIDSetter;
-import org.apache.rocketmq.common.protocol.ResponseCode;
 import org.apache.rocketmq.proxy.common.MessageReceiptHandle;
 import org.apache.rocketmq.proxy.grpc.v2.BaseActivityTest;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
+import org.apache.rocketmq.remoting.protocol.ResponseCode;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
@@ -91,4 +91,4 @@ public void testForwardMessageToDeadLetterQueueWhenHasMappingHandle() throws Thr
         assertEquals(Code.OK, response.getStatus().getCode());
         assertEquals(savedHandleStr, receiptHandleCaptor.getValue().getReceiptHandle());
     }
-}
\ No newline at end of file
+}

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/BaseProcessorTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.rocketmq.common.message.MessageClientIDSetter;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.common.protocol.header.ExtraInfoUtil;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
 import org.apache.rocketmq.proxy.service.ServiceManager;
@@ -36,6 +35,7 @@
 import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
 import org.apache.rocketmq.proxy.service.route.TopicRouteService;
 import org.apache.rocketmq.proxy.service.transaction.TransactionService;
+import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
 import org.junit.Ignore;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessorTest.java
Patch:
@@ -43,7 +43,6 @@
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
 import org.apache.rocketmq.common.message.MessageClientIDSetter;
-import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.proxy.common.ContextVariable;
 import org.apache.rocketmq.proxy.common.MessageReceiptHandle;
 import org.apache.rocketmq.proxy.common.ProxyContext;
@@ -53,6 +52,7 @@
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.remoting.protocol.LanguageCode;
+import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
@@ -621,4 +621,4 @@ public int compareTo(Channel o) {
             return 1;
         }
     }
-}
\ No newline at end of file
+}

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/TransactionProcessorTest.java
Patch:
@@ -18,9 +18,9 @@
 package org.apache.rocketmq.proxy.processor;
 
 import java.util.concurrent.CompletableFuture;
-import org.apache.rocketmq.common.protocol.header.EndTransactionRequestHeader;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.proxy.service.transaction.EndTransactionRequestData;
+import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
@@ -71,4 +71,4 @@ protected void testEndTransaction(int sysFlag, TransactionStatus transactionStat
 
         reset(this.messageService);
     }
-}
\ No newline at end of file
+}

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/message/ClusterMessageServiceTest.java
Patch:
@@ -19,13 +19,13 @@
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
 import org.apache.rocketmq.common.message.MessageClientIDSetter;
-import org.apache.rocketmq.common.protocol.ResponseCode;
-import org.apache.rocketmq.common.protocol.header.AckMessageRequestHeader;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
 import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.proxy.service.route.TopicRouteService;
+import org.apache.rocketmq.remoting.protocol.ResponseCode;
+import org.apache.rocketmq.remoting.protocol.header.AckMessageRequestHeader;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -75,4 +75,4 @@ public void testAckMessageByInvalidBrokerNameHandle() throws Exception {
             assertEquals(ProxyExceptionCode.INVALID_RECEIPT_HANDLE, proxyException.getCode());
         }
     }
-}
\ No newline at end of file
+}

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/metadata/ClusterMetadataServiceTest.java
Patch:
@@ -19,10 +19,10 @@
 
 import java.util.HashMap;
 import org.apache.rocketmq.common.attribute.TopicMessageType;
-import org.apache.rocketmq.common.statictopic.TopicConfigAndQueueMapping;
-import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.service.BaseServiceTest;
+import org.apache.rocketmq.remoting.protocol.statictopic.TopicConfigAndQueueMapping;
+import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -67,4 +67,4 @@ public void testGetSubscriptionGroupConfig() {
         assertNotNull(this.clusterMetadataService.getSubscriptionGroupConfig(GROUP));
         assertEquals(1, this.clusterMetadataService.subscriptionGroupConfigCache.asMap().size());
     }
-}
\ No newline at end of file
+}

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/route/ClusterTopicRouteServiceTest.java
Patch:
@@ -27,17 +27,17 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.MixAll;
-import org.apache.rocketmq.common.protocol.ResponseCode;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
 import org.apache.rocketmq.proxy.common.Address;
 import org.apache.rocketmq.proxy.service.BaseServiceTest;
-import static org.assertj.core.api.Assertions.assertThat;
+import org.apache.rocketmq.remoting.protocol.ResponseCode;
 import org.assertj.core.util.Lists;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.junit.Before;
 import org.junit.Test;
 
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.catchThrowableOfType;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
@@ -116,4 +116,4 @@ public void testTopicRouteCaffeineCache() throws InterruptedException {
         TimeUnit.SECONDS.sleep(5);
         assertThat(value).isEqualTo(topicCache.get(key));
     }
-}
\ No newline at end of file
+}

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/route/LocalTopicRouteServiceTest.java
Patch:
@@ -28,10 +28,10 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.constant.PermName;
-import org.apache.rocketmq.common.protocol.ResponseCode;
 import org.apache.rocketmq.proxy.common.Address;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.service.BaseServiceTest;
+import org.apache.rocketmq.remoting.protocol.ResponseCode;
 import org.assertj.core.util.Lists;
 import org.junit.Before;
 import org.junit.Test;
@@ -99,4 +99,4 @@ public void testGetTopicRouteForProxy() throws Throwable {
                 ConfigurationManager.getProxyConfig().getGrpcServerPort()))),
             proxyTopicRouteData.getBrokerDatas().get(0).getBrokerAddrs().get(MixAll.MASTER_ID));
     }
-}
\ No newline at end of file
+}

File: remoting/src/main/java/org/apache/rocketmq/remoting/metrics/RemotingMetricsConstant.java
Patch:
@@ -19,8 +19,8 @@
 import java.lang.reflect.Field;
 import java.util.HashMap;
 import java.util.Map;
-import org.apache.rocketmq.common.protocol.RequestCode;
-import org.apache.rocketmq.common.protocol.ResponseCode;
+import org.apache.rocketmq.remoting.protocol.RequestCode;
+import org.apache.rocketmq.remoting.protocol.ResponseCode;
 
 public class RemotingMetricsConstant {
     public static final String HISTOGRAM_RPC_LATENCY = "rocketmq_rpc_latency";

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyDecoder.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
-import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public class NettyDecoder extends LengthFieldBasedFrameDecoder {
@@ -50,7 +49,7 @@ public Object decode(ChannelHandlerContext ctx, ByteBuf in) throws Exception {
             return cmd;
         } catch (Exception e) {
             log.error("decode exception, " + RemotingHelper.parseChannelRemoteAddr(ctx.channel()), e);
-            RemotingUtil.closeChannel(ctx.channel());
+            RemotingHelper.closeChannel(ctx.channel());
         } finally {
             if (null != frame) {
                 frame.release();

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyEncoder.java
Patch:
@@ -20,10 +20,9 @@
 import io.netty.channel.ChannelHandler;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToByteEncoder;
-import org.apache.rocketmq.remoting.common.RemotingHelper;
-import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 @ChannelHandler.Sharable
@@ -44,7 +43,7 @@ public void encode(ChannelHandlerContext ctx, RemotingCommand remotingCommand, B
             if (remotingCommand != null) {
                 log.error(remotingCommand.toString());
             }
-            RemotingUtil.closeChannel(ctx.channel());
+            RemotingHelper.closeChannel(ctx.channel());
         }
     }
 }

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -40,14 +40,15 @@
 import java.util.function.Consumer;
 import javax.annotation.Nullable;
 import org.apache.rocketmq.common.Pair;
+import org.apache.rocketmq.common.ServiceThread;
+import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
 import org.apache.rocketmq.remoting.InvokeCallback;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.common.SemaphoreReleaseOnlyOnce;
-import org.apache.rocketmq.remoting.common.ServiceThread;
 import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
 import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
 import org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException;
@@ -324,7 +325,7 @@ private Runnable buildProcessRequestHandler(ChannelHandlerContext ctx, RemotingC
 
                 if (!cmd.isOnewayRPC()) {
                     response = RemotingCommand.createResponseCommand(RemotingSysResponseCode.SYSTEM_ERROR,
-                            RemotingHelper.exceptionSimpleDesc(e));
+                            UtilAll.exceptionSimpleDesc(e));
                     response.setOpaque(opaque);
                     writeResponse(ctx.channel(), cmd, response);
                 }

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -75,7 +75,6 @@
 import org.apache.rocketmq.remoting.InvokeCallback;
 import org.apache.rocketmq.remoting.RemotingClient;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
-import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.apache.rocketmq.remoting.exception.RemotingConnectException;
 import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
 import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
@@ -451,7 +450,7 @@ public void closeChannel(final String addr, final Channel channel) {
                         LOGGER.info("closeChannel: the channel[{}] was removed from channel table", addrRemote);
                     }
 
-                    RemotingUtil.closeChannel(channel);
+                    RemotingHelper.closeChannel(channel);
                 } catch (Exception e) {
                     LOGGER.error("closeChannel: close the channel exception", e);
                 } finally {
@@ -496,7 +495,7 @@ public void closeChannel(final Channel channel) {
                     if (removeItemFromTable) {
                         this.channelTables.remove(addrRemote);
                         LOGGER.info("closeChannel: the channel[{}] was removed from channel table", addrRemote);
-                        RemotingUtil.closeChannel(channel);
+                        RemotingHelper.closeChannel(channel);
                     }
                 } catch (Exception e) {
                     LOGGER.error("closeChannel: close the channel exception", e);

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/BrokerSyncInfo.java
Patch:
@@ -15,9 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.common;
-
-import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
+package org.apache.rocketmq.remoting.protocol;
 
 public class BrokerSyncInfo extends RemotingSerializable {
     /**

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/DataVersion.java
Patch:
@@ -14,10 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.common;
+package org.apache.rocketmq.remoting.protocol;
 
 import java.util.concurrent.atomic.AtomicLong;
-import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
 public class DataVersion extends RemotingSerializable {
     private long stateVersion = 0L;

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/EpochEntry.java
Patch:
@@ -15,10 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.common;
+package org.apache.rocketmq.remoting.protocol;
 
 import java.util.Objects;
-import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
 public class EpochEntry extends RemotingSerializable {
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/ForbiddenType.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.common.protocol;
+package org.apache.rocketmq.remoting.protocol;
 
 /**
- * 
+ *
  * gives the reason for a no permission messaging pulling.
  *
  */

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/MQProtosHelper.java
Patch:
@@ -15,14 +15,13 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.common.protocol;
+package org.apache.rocketmq.remoting.protocol;
 
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
-import org.apache.rocketmq.common.protocol.header.namesrv.RegisterBrokerRequestHeader;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
-import org.apache.rocketmq.remoting.protocol.RemotingCommand;
+import org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterBrokerRequestHeader;
 
 public class MQProtosHelper {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/NamespaceUtil.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.common.protocol;
+package org.apache.rocketmq.remoting.protocol;
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.MixAll;
@@ -170,4 +170,4 @@ public static boolean isRetryTopic(String resource) {
     public static boolean isDLQTopic(String resource) {
         return StringUtils.isNotBlank(resource) && resource.startsWith(MixAll.DLQ_GROUP_TOPIC_PREFIX);
     }
-}
\ No newline at end of file
+}

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RequestCode.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.common.protocol;
+package org.apache.rocketmq.remoting.protocol;
 
 public class RequestCode {
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RequestSource.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.common.protocol;
+package org.apache.rocketmq.remoting.protocol;
 
 public enum RequestSource {
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/ResponseCode.java
Patch:
@@ -15,9 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.common.protocol;
-
-import org.apache.rocketmq.remoting.protocol.RemotingSysResponseCode;
+package org.apache.rocketmq.remoting.protocol;
 
 public class ResponseCode extends RemotingSysResponseCode {
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/admin/ConsumeStats.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.common.admin;
+package org.apache.rocketmq.remoting.protocol.admin;
 
 import java.util.Map;
 import java.util.Map.Entry;

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/admin/OffsetWrapper.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.common.admin;
+package org.apache.rocketmq.remoting.protocol.admin;
 
 public class OffsetWrapper {
     private long brokerOffset;

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/admin/RollbackStats.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.common.admin;
+package org.apache.rocketmq.remoting.protocol.admin;
 
 public class RollbackStats {
     private String brokerName;

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/admin/TopicOffset.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.common.admin;
+package org.apache.rocketmq.remoting.protocol.admin;
 
 public class TopicOffset {
     private long minOffset;

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/admin/TopicStatsTable.java
Patch:
@@ -14,11 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.common.admin;
+package org.apache.rocketmq.remoting.protocol.admin;
 
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
-
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/BrokerMemberGroup.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.common.protocol.body;
+package org.apache.rocketmq.remoting.protocol.body;
 
 import com.google.common.base.Objects;
 import java.util.Collections;

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/BrokerStatsData.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.common.protocol.body;
+package org.apache.rocketmq.remoting.protocol.body;
 
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/BrokerStatsItem.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.common.protocol.body;
+package org.apache.rocketmq.remoting.protocol.body;
 
 public class BrokerStatsItem {
     private long sum;

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/CMResult.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.common.protocol.body;
+package org.apache.rocketmq.remoting.protocol.body;
 
 public enum CMResult {
     CR_SUCCESS,

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/CheckClientRequestBody.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.common.protocol.body;
+package org.apache.rocketmq.remoting.protocol.body;
 
-import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
+import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
 
 public class CheckClientRequestBody extends RemotingSerializable {
 

File: broker/src/main/java/org/apache/rocketmq/broker/longpolling/PullRequestHoldService.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
-
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.SystemClock;
@@ -53,6 +52,7 @@ public void suspendPullRequest(final String topic, final int queueId, final Pull
             }
         }
 
+        pullRequest.getRequestCommand().setSuspended(true);
         mpr.addPullRequest(pullRequest);
     }
 

File: remoting/src/main/java/org/apache/rocketmq/common/metrics/NopLongCounter.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.broker.metrics;
+package org.apache.rocketmq.common.metrics;
 
 import io.opentelemetry.api.common.Attributes;
 import io.opentelemetry.api.metrics.LongCounter;

File: remoting/src/main/java/org/apache/rocketmq/common/metrics/NopLongHistogram.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.broker.metrics;
+package org.apache.rocketmq.common.metrics;
 
 import io.opentelemetry.api.common.Attributes;
 import io.opentelemetry.api.metrics.LongHistogram;

File: remoting/src/main/java/org/apache/rocketmq/common/metrics/NopLongUpDownCounter.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.broker.metrics;
+package org.apache.rocketmq.common.metrics;
 
 import io.opentelemetry.api.common.Attributes;
 import io.opentelemetry.api.metrics.LongUpDownCounter;

File: remoting/src/main/java/org/apache/rocketmq/common/metrics/NopObservableLongGauge.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.broker.metrics;
+package org.apache.rocketmq.common.metrics;
 
 import io.opentelemetry.api.metrics.ObservableLongGauge;
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/RemotingServer.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.netty.channel.Channel;
 import java.util.concurrent.ExecutorService;
-import org.apache.rocketmq.remoting.common.Pair;
+import org.apache.rocketmq.common.Pair;
 import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
 import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
 import org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException;

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -68,12 +68,12 @@
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.rocketmq.common.Pair;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
 import org.apache.rocketmq.remoting.InvokeCallback;
 import org.apache.rocketmq.remoting.RemotingClient;
-import org.apache.rocketmq.remoting.common.Pair;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.apache.rocketmq.remoting.exception.RemotingConnectException;

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingServer.java
Patch:
@@ -55,12 +55,12 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
+import org.apache.rocketmq.common.Pair;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.ChannelEventListener;
 import org.apache.rocketmq.remoting.InvokeCallback;
 import org.apache.rocketmq.remoting.RemotingServer;
-import org.apache.rocketmq.remoting.common.Pair;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.apache.rocketmq.remoting.common.TlsMode;

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumer.java
Patch:
@@ -75,7 +75,7 @@ public class DefaultMQPushConsumer extends ClientConfig implements MQPushConsume
      * load balance. It's required and needs to be globally unique.
      * </p>
      *
-     * See <a href="http://rocketmq.apache.org/docs/core-concept/">here</a> for further discussion.
+     * See <a href="https://rocketmq.apache.org/docs/introduction/02concepts">here</a> for further discussion.
      */
     private String consumerGroup;
 

File: client/src/main/java/org/apache/rocketmq/client/producer/DefaultMQProducer.java
Patch:
@@ -81,7 +81,7 @@ public class DefaultMQProducer extends ClientConfig implements MQProducer {
      *
      * For non-transactional messages, it does not matter as long as it's unique per process. </p>
      *
-     * See <a href="http://rocketmq.apache.org/docs/core-concept/">core concepts</a> for more discussion.
+     * See <a href="https://rocketmq.apache.org/docs/introduction/02concepts">core concepts</a> for more discussion.
      */
     private String producerGroup;
 

File: common/src/main/java/org/apache/rocketmq/common/statictopic/TopicQueueMappingUtils.java
Patch:
@@ -651,6 +651,8 @@ public static LogicQueueMappingItem findLogicQueueMappingItem(List<LogicQueueMap
             LogicQueueMappingItem item =  mappingItems.get(i);
             if (ignoreNegative && item.getLogicOffset() < 0) {
                 continue;
+            } else {
+                return item;
             }
         }
         return null;

File: broker/src/main/java/org/apache/rocketmq/broker/schedule/ScheduleMessageService.java
Patch:
@@ -66,7 +66,7 @@
 import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
 
 public class ScheduleMessageService extends ConfigManager {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private static final long FIRST_DELAY_TIME = 1000L;
     private static final long DELAY_FOR_A_WHILE = 100L;

File: store/src/test/java/org/apache/rocketmq/store/timer/TimerMessageStoreTest.java
Patch:
@@ -261,6 +261,7 @@ public void testTimerFlowControl() throws Exception {
     public void testPutExpiredTimerMessage() throws Exception {
         // Skip on Mac to make CI pass
         Assume.assumeFalse(MixAll.isMac());
+        Assume.assumeFalse(MixAll.isWindows());
 
         String topic = "TimerTest_testPutExpiredTimerMessage";
 

File: test/src/main/java/org/apache/rocketmq/test/util/MQAdminTestUtils.java
Patch:
@@ -77,7 +77,7 @@ public static boolean createTopic(String nameSrvAddr, String clusterName, String
         return true;
     }
 
-    private static boolean checkTopicExist(DefaultMQAdminExt mqAdminExt, String topic) {
+    public static boolean checkTopicExist(DefaultMQAdminExt mqAdminExt, String topic) {
         boolean createResult = false;
         try {
             TopicStatsTable topicInfo = mqAdminExt.examineTopicStats(topic);

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessorTest.java
Patch:
@@ -247,7 +247,7 @@ public void testRenewWithErrorThenOK() {
             return futureList.get(count.getAndIncrement());
         }).when(messagingProcessor).changeInvisibleTime(Mockito.any(ProxyContext.class), Mockito.any(ReceiptHandle.class), Mockito.eq(MESSAGE_ID),
             Mockito.eq(GROUP), Mockito.eq(TOPIC), Mockito.eq(ConfigurationManager.getProxyConfig().getRenewSliceTimeMillis()));
-        await().atMost(Duration.ofSeconds(1)).until(() -> {
+        await().pollDelay(Duration.ZERO).pollInterval(Duration.ofMillis(10)).atMost(Duration.ofSeconds(10)).until(() -> {
             receiptHandleProcessor.scheduleRenewTask();
             try {
                 ReceiptHandleGroup receiptHandleGroup = receiptHandleProcessor.receiptHandleGroupMap.values().stream().findFirst().get();

File: store/src/test/java/org/apache/rocketmq/store/ConsumeQueueTest.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.concurrent.TimeUnit;
 
 import org.apache.rocketmq.common.BrokerConfig;
+import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageDecoder;
@@ -41,6 +42,7 @@
 import org.junit.Assert;
 import org.junit.Test;
 import org.mockito.Mockito;
+import org.junit.Assume;
 
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.assertj.core.api.Assertions.assertThat;
@@ -292,6 +294,7 @@ public void testPutMessagePositionInfo_buildCQRepeatedly() throws Exception {
 
     @Test
     public void testPutMessagePositionInfoWrapper_MultiQueue() throws Exception {
+        Assume.assumeFalse(MixAll.isWindows());
         DefaultMessageStore messageStore = null;
         try {
             messageStore = genForMultiQueue();

File: store/src/test/java/org/apache/rocketmq/store/MappedFileQueueTest.java
Patch:
@@ -19,12 +19,14 @@
 
 import java.util.concurrent.CountDownLatch;
 import org.apache.commons.lang3.RandomStringUtils;
+import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.store.logfile.DefaultMappedFile;
 import org.apache.rocketmq.store.logfile.MappedFile;
 import org.assertj.core.util.Lists;
 import org.junit.After;
+import org.junit.Assume;
 import org.junit.Test;
 
 import java.io.File;
@@ -391,6 +393,7 @@ public void testMappedFile_CleanSwapedMap() throws InterruptedException {
 
     @Test
     public void testMappedFile_Rename() throws IOException, InterruptedException {
+        Assume.assumeFalse(MixAll.isWindows());
         final String fixedMsg = RandomStringUtils.randomAlphanumeric(128);
         final byte[] msgByteArr = fixedMsg.getBytes(StandardCharsets.UTF_8);
         final int mappedFileSize = 5 * 1024 * 1024;

File: store/src/test/java/org/apache/rocketmq/store/dledger/DLedgerCommitlogTest.java
Patch:
@@ -38,6 +38,8 @@
 import org.apache.rocketmq.store.PutMessageStatus;
 import org.junit.Assert;
 import org.junit.Test;
+import org.junit.Assume;
+import org.apache.rocketmq.common.MixAll;
 
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.apache.rocketmq.store.StoreTestUtil.releaseMmapFilesOnWindows;
@@ -236,6 +238,7 @@ public void testBatchPutAndGetMessage() throws Exception {
 
     @Test
     public void testAsyncPutAndGetMessage() throws Exception {
+        Assume.assumeFalse(MixAll.isWindows());
         String base = createBaseDir();
         String peers = String.format("n0-localhost:%d", nextPort());
         String group = UUID.randomUUID().toString();

File: store/src/test/java/org/apache/rocketmq/store/kv/CompactionLogTest.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.common.collect.Lists;
 import org.apache.commons.lang3.RandomStringUtils;
 import org.apache.commons.lang3.reflect.FieldUtils;
+import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageExtBrokerInner;
@@ -38,6 +39,7 @@
 import org.apache.rocketmq.store.logfile.DefaultMappedFile;
 import org.apache.rocketmq.store.logfile.MappedFile;
 import org.apache.rocketmq.store.queue.SparseConsumeQueue;
+import org.junit.Assume;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -231,6 +233,7 @@ public void testCompaction() throws DigestException, NoSuchAlgorithmException, I
 
     @Test
     public void testReplaceFiles() throws IOException, IllegalAccessException {
+        Assume.assumeFalse(MixAll.isWindows());
         CompactionLog clog = mock(CompactionLog.class);
         doCallRealMethod().when(clog).replaceFiles(anyList(), any(CompactionLog.TopicPartitionLog.class),
             any(CompactionLog.TopicPartitionLog.class));

File: broker/src/main/java/org/apache/rocketmq/broker/schedule/ScheduleMessageService.java
Patch:
@@ -339,8 +339,7 @@ public boolean parseDelayLevel() {
                 }
             }
         } catch (Exception e) {
-            log.error("parseDelayLevel exception", e);
-            log.info("levelString String = {}", levelString);
+            log.error("parse message delay level failed. messageDelayLevel = {}", levelString, e);
             return false;
         }
 

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -263,8 +263,7 @@ public boolean parseDelayLevel() {
                 this.delayLevelTable.put(level, delayTimeMillis);
             }
         } catch (Exception e) {
-            LOGGER.error("parseDelayLevel exception", e);
-            LOGGER.info("levelString String = {}", levelString);
+            LOGGER.error("parse message delay level failed. messageDelayLevel = {}", levelString, e);
             return false;
         }
 

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/pop/PopBigMessageIT.java
Patch:
@@ -82,7 +82,7 @@ private void testSendAndRecvBigMsg() {
         });
 
         // no ack, msg will put into pop retry topic
-        await().atMost(Duration.ofSeconds(6)).untilAsserted(() -> {
+        await().atMost(Duration.ofSeconds(60)).untilAsserted(() -> {
             PopResult retryPopResult = popMessageAsync(Duration.ofSeconds(3).toMillis(), 1, 5000).get();
             assertEquals(PopStatus.FOUND, retryPopResult.getPopStatus());
 

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAClient.java
Patch:
@@ -92,7 +92,7 @@ public class AutoSwitchHAClient extends ServiceThread implements HAClient {
     /**
      * Current epoch
      */
-    private volatile long currentReceivedEpoch;
+    private volatile int currentReceivedEpoch;
 
     public AutoSwitchHAClient(AutoSwitchHAService haService, DefaultMessageStore defaultMessageStore,
         EpochFileCache epochCache) throws IOException {

File: broker/src/test/java/org/apache/rocketmq/broker/failover/EscapeBridgeTest.java
Patch:
@@ -145,7 +145,7 @@ public void getMessageTest() {
         when(brokerController.getMessageStoreByBrokerName(any())).thenReturn(defaultMessageStore);
         Assertions.assertThatCode(() -> escapeBridge.putMessage(messageExtBrokerInner)).doesNotThrowAnyException();
 
-        Assertions.assertThatCode(() -> escapeBridge.getMessage(TEST_TOPIC, 0, DEFAULT_QUEUE_ID, BROKER_NAME)).doesNotThrowAnyException();
+        Assertions.assertThatCode(() -> escapeBridge.getMessage(TEST_TOPIC, 0, DEFAULT_QUEUE_ID, BROKER_NAME, false)).doesNotThrowAnyException();
     }
 
     @Test
@@ -160,7 +160,7 @@ public void decodeMsgListTest() {
         SelectMappedBufferResult result = new SelectMappedBufferResult(0, byteBuffer, 10, mappedFile);
 
         getMessageResult.addMessage(result);
-        Assertions.assertThatCode(() -> escapeBridge.decodeMsgList(getMessageResult)).doesNotThrowAnyException();
+        Assertions.assertThatCode(() -> escapeBridge.decodeMsgList(getMessageResult, false)).doesNotThrowAnyException();
     }
 
 }

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/NamesrvStartup.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.InputStream;
 import java.nio.file.Files;
 import java.nio.file.Paths;
+import java.text.MessageFormat;
 import java.util.Properties;
 import java.util.concurrent.Callable;
 import org.apache.commons.cli.CommandLine;
@@ -147,7 +148,8 @@ public static NamesrvController createAndStartNamesrvController() throws Excepti
 
         NamesrvController controller = createNamesrvController();
         start(controller);
-        String tip = "The Name Server boot success. serializeType=" + RemotingCommand.getSerializeTypeConfigInThisServer();
+        NettyServerConfig serverConfig = controller.getNettyServerConfig();
+        String tip = MessageFormat.format("The Name Server boot success. serializeType={0}, address {1}:{2}", RemotingCommand.getSerializeTypeConfigInThisServer(), serverConfig.getBindAddress(), serverConfig.getListenPort());
         log.info(tip);
         System.out.printf("%s%n", tip);
         return controller;

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -1788,6 +1788,7 @@ protected void handleRegisterBrokerResult(List<RegisterBrokerResult> registerBro
             if (registerBrokerResult != null) {
                 if (this.updateMasterHAServerAddrPeriodically && registerBrokerResult.getHaServerAddr() != null) {
                     this.messageStore.updateHaMasterAddress(registerBrokerResult.getHaServerAddr());
+                    this.messageStore.updateMasterAddress(registerBrokerResult.getMasterAddr());
                 }
 
                 this.slaveSynchronize.setMasterAddr(registerBrokerResult.getMasterAddr());

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -51,7 +51,7 @@
 import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
-import org.apache.rocketmq.common.utils.DeletePolicyUtils;
+import org.apache.rocketmq.common.utils.CleanupPolicyUtils;
 import org.apache.rocketmq.common.utils.QueueTypeUtils;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
@@ -250,7 +250,7 @@ public RemotingCommand sendMessage(final ChannelHandlerContext ctx,
 
         MessageAccessor.setProperties(msgInner, oriProps);
 
-        CleanupPolicy cleanupPolicy = DeletePolicyUtils.getDeletePolicy(Optional.of(topicConfig));
+        CleanupPolicy cleanupPolicy = CleanupPolicyUtils.getDeletePolicy(Optional.of(topicConfig));
         if (Objects.equals(cleanupPolicy, CleanupPolicy.COMPACTION)) {
             if (StringUtils.isBlank(msgInner.getKeys())) {
                 response.setCode(ResponseCode.MESSAGE_ILLEGAL);

File: common/src/main/java/org/apache/rocketmq/common/TopicAttributes.java
Patch:
@@ -31,8 +31,8 @@ public class TopicAttributes {
         newHashSet("BatchCQ", "SimpleCQ"),
         "SimpleCQ"
     );
-    public static final EnumAttribute DELETE_POLICY_ATTRIBUTE = new EnumAttribute(
-        "delete.policy",
+    public static final EnumAttribute CLEANUP_POLICY_ATTRIBUTE = new EnumAttribute(
+        "cleanup.policy",
         false,
         newHashSet("DELETE", "COMPACTION"),
         "DELETE"
@@ -49,7 +49,7 @@ public class TopicAttributes {
     static {
         ALL = new HashMap<>();
         ALL.put(QUEUE_TYPE_ATTRIBUTE.getName(), QUEUE_TYPE_ATTRIBUTE);
-        ALL.put(DELETE_POLICY_ATTRIBUTE.getName(), DELETE_POLICY_ATTRIBUTE);
+        ALL.put(CLEANUP_POLICY_ATTRIBUTE.getName(), CLEANUP_POLICY_ATTRIBUTE);
         ALL.put(TOPIC_MESSAGE_TYPE_ATTRIBUTE.getName(), TOPIC_MESSAGE_TYPE_ATTRIBUTE);
     }
 }

File: common/src/main/java/org/apache/rocketmq/common/message/MessageDecoder.java
Patch:
@@ -43,6 +43,8 @@ public class MessageDecoder {
     public final static int MESSAGE_PHYSIC_OFFSET_POSITION = 28;
     public final static int MESSAGE_STORE_TIMESTAMP_POSITION = 56;
     public final static int MESSAGE_MAGIC_CODE = -626843481;
+    // End of file empty MAGIC CODE cbd43194
+    public final static int BLANK_MAGIC_CODE = -875286124;
     public static final char NAME_VALUE_SEPARATOR = 1;
     public static final char PROPERTY_SEPARATOR = 2;
     public static final int PHY_POS_POSITION = 4 + 4 + 4 + 4 + 4 + 8;

File: store/src/main/java/org/apache/rocketmq/store/MultiPathMappedFileQueue.java
Patch:
@@ -77,7 +77,7 @@ public boolean load() {
     }
 
     @Override
-    protected MappedFile tryCreateMappedFile(long createOffset) {
+    public MappedFile tryCreateMappedFile(long createOffset) {
         long fileIdx = createOffset / this.mappedFileSize;
         Set<String> storePath = getPaths();
         Set<String> readonlyPathSet = getReadonlyPaths();

File: store/src/test/java/org/apache/rocketmq/store/AppendCallbackTest.java
Patch:
@@ -31,7 +31,6 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageExtBatch;
-import org.apache.rocketmq.store.CommitLog.MessageExtEncoder;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 import org.junit.After;
 import org.junit.Before;

File: store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreTest.java
Patch:
@@ -812,7 +812,7 @@ public void testPutLongMessage() throws Exception {
         MessageExtBrokerInner messageExtBrokerInner = buildMessage();
         CommitLog commitLog = ((DefaultMessageStore) messageStore).getCommitLog();
         MessageStoreConfig messageStoreConfig = ((DefaultMessageStore) messageStore).getMessageStoreConfig();
-        CommitLog.PutMessageThreadLocal putMessageThreadLocal = commitLog.getPutMessageThreadLocal().get();
+        MessageExtEncoder.PutMessageThreadLocal putMessageThreadLocal = commitLog.getPutMessageThreadLocal().get();
 
         //body size, topic size, properties size exactly equal to max size
         messageExtBrokerInner.setBody(new byte[messageStoreConfig.getMaxMessageSize()]);

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -71,6 +71,7 @@
 import org.apache.rocketmq.tools.command.ha.HAStatusSubCommand;
 import org.apache.rocketmq.tools.command.message.CheckMsgSendRTCommand;
 import org.apache.rocketmq.tools.command.message.ConsumeMessageCommand;
+import org.apache.rocketmq.tools.command.message.DumpCompactionLogCommand;
 import org.apache.rocketmq.tools.command.message.PrintMessageByQueueCommand;
 import org.apache.rocketmq.tools.command.message.PrintMessageSubCommand;
 import org.apache.rocketmq.tools.command.message.QueryMsgByIdSubCommand;
@@ -267,6 +268,7 @@ public static void initCommand() {
         initCommand(new UpdateControllerConfigSubCommand());
         initCommand(new ReElectMasterSubCommand());
         initCommand(new CleanControllerBrokerDataSubCommand());
+        initCommand(new DumpCompactionLogCommand());
     }
 
     private static void initLogback() throws Exception {

File: broker/src/test/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageServiceImplTest.java
Patch:
@@ -112,6 +112,7 @@ public void testCheck_withDiscard() {
         when(bridge.getHalfMessage(0, 0, 1)).thenReturn(createDiscardPullResult(TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC, 5, "hellp", 1));
         when(bridge.getHalfMessage(0, 1, 1)).thenReturn(createPullResult(TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC, 6, "hellp", 0));
         when(bridge.getOpMessage(anyInt(), anyLong(), anyInt())).thenReturn(createOpPulResult(TopicValidator.RMQ_SYS_TRANS_OP_HALF_TOPIC, 1, "10", 1));
+        when(bridge.getBrokerController()).thenReturn(this.brokerController);
         long timeOut = this.brokerController.getBrokerConfig().getTransactionTimeOut();
         int checkMax = this.brokerController.getBrokerConfig().getTransactionCheckMax();
         final AtomicInteger checkMessage = new AtomicInteger(0);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AckMessageProcessor.java
Patch:
@@ -164,7 +164,8 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
                 }
                 long nextOffset = brokerController.getConsumerOrderInfoManager().commitAndNext(
                     requestHeader.getTopic(), requestHeader.getConsumerGroup(),
-                    requestHeader.getQueueId(), requestHeader.getOffset());
+                    requestHeader.getQueueId(), requestHeader.getOffset(),
+                    ExtraInfoUtil.getPopTime(extraInfo));
                 if (nextOffset > -1) {
                     this.brokerController.getConsumerOffsetManager().commitOffset(channel.remoteAddress().toString(),
                         requestHeader.getConsumerGroup(), requestHeader.getTopic(),

File: test/src/test/java/org/apache/rocketmq/test/base/BaseConf.java
Patch:
@@ -44,6 +44,7 @@
 import org.apache.rocketmq.test.client.rmq.RMQTransactionalProducer;
 import org.apache.rocketmq.test.clientinterface.AbstractMQConsumer;
 import org.apache.rocketmq.test.clientinterface.AbstractMQProducer;
+import org.apache.rocketmq.test.clientinterface.MQConsumer;
 import org.apache.rocketmq.test.factory.ConsumerFactory;
 import org.apache.rocketmq.test.listener.AbstractListener;
 import org.apache.rocketmq.test.util.MQAdminTestUtils;
@@ -317,6 +318,8 @@ public static void shutdown(List<Object> mqClients) {
                 ((MQPullConsumer) mqClient).shutdown();
             } else if (mqClient instanceof MQPushConsumer) {
                 ((MQPushConsumer) mqClient).shutdown();
+            } else if (mqClient instanceof MQConsumer) {
+                ((MQConsumer) mqClient).shutdown();
             }
         }));
     }

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -1365,9 +1365,6 @@ protected void shutdownBasicService() {
             this.consumerManageExecutor.shutdown();
         }
 
-        if (this.fileWatchService != null) {
-            this.fileWatchService.shutdown();
-        }
         if (this.transactionalMessageCheckService != null) {
             this.transactionalMessageCheckService.shutdown(false);
         }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/EndTransactionProcessor.java
Patch:
@@ -251,7 +251,7 @@ private RemotingCommand sendFinalMessage(MessageExtBrokerInner msgInner) {
                 case WHEEL_TIMER_MSG_ILLEGAL:
                     response.setCode(ResponseCode.MESSAGE_ILLEGAL);
                     response.setRemark(String.format("timer message illegal, the delay time should not be bigger than the max delay %dms; or if set del msg, the delay time should be bigger than the current time",
-                        this.brokerController.getMessageStoreConfig().getTimerMaxDelaySec() * 1000));
+                        this.brokerController.getMessageStoreConfig().getTimerMaxDelaySec() * 1000L));
                     break;
                 case WHEEL_TIMER_FLOW_CONTROL:
                     response.setCode(ResponseCode.SYSTEM_ERROR);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -368,7 +368,7 @@ private RemotingCommand handlePutMessageResult(PutMessageResult putMessageResult
             case WHEEL_TIMER_MSG_ILLEGAL:
                 response.setCode(ResponseCode.MESSAGE_ILLEGAL);
                 response.setRemark(String.format("timer message illegal, the delay time should not be bigger than the max delay %dms; or if set del msg, the delay time should be bigger than the current time",
-                    this.brokerController.getMessageStoreConfig().getTimerMaxDelaySec() * 1000));
+                    this.brokerController.getMessageStoreConfig().getTimerMaxDelaySec() * 1000L));
                 break;
             case WHEEL_TIMER_FLOW_CONTROL:
                 response.setCode(ResponseCode.SYSTEM_ERROR);

File: broker/src/main/java/org/apache/rocketmq/broker/util/HookUtils.java
Patch:
@@ -176,7 +176,7 @@ private static PutMessageResult transformTimerMessage(BrokerController brokerCon
             return new PutMessageResult(PutMessageStatus.WHEEL_TIMER_MSG_ILLEGAL, null);
         }
         if (deliverMs > System.currentTimeMillis()) {
-            if (delayLevel <= 0 && deliverMs - System.currentTimeMillis() > brokerController.getMessageStoreConfig().getTimerMaxDelaySec() * 1000) {
+            if (delayLevel <= 0 && deliverMs - System.currentTimeMillis() > brokerController.getMessageStoreConfig().getTimerMaxDelaySec() * 1000L) {
                 return new PutMessageResult(PutMessageStatus.WHEEL_TIMER_MSG_ILLEGAL, null);
             }
 

File: store/src/test/java/org/apache/rocketmq/store/timer/TimerMessageStoreTest.java
Patch:
@@ -136,7 +136,7 @@ private static PutMessageResult transformTimerMessage(TimerMessageStore timerMes
             return new PutMessageResult(PutMessageStatus.WHEEL_TIMER_MSG_ILLEGAL, null);
         }
         if (deliverMs > System.currentTimeMillis()) {
-            if (delayLevel <= 0 && deliverMs - System.currentTimeMillis() > storeConfig.getTimerMaxDelaySec() * 1000) {
+            if (delayLevel <= 0 && deliverMs - System.currentTimeMillis() > storeConfig.getTimerMaxDelaySec() * 1000L) {
                 return new PutMessageResult(PutMessageStatus.WHEEL_TIMER_MSG_ILLEGAL, null);
             }
 

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQConsumerWithTraceTest.java
Patch:
@@ -89,7 +89,7 @@
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.when;
 
-@RunWith(MockitoJUnitRunner.class)
+@RunWith(MockitoJUnitRunner.Silent.class)
 public class DefaultMQConsumerWithTraceTest {
     private String consumerGroup;
     private String consumerGroupNormal;
@@ -105,7 +105,7 @@ public class DefaultMQConsumerWithTraceTest {
     private RebalancePushImpl rebalancePushImpl;
     private DefaultMQPushConsumer pushConsumer;
     private DefaultMQPushConsumer normalPushConsumer;
-    private DefaultMQPushConsumer customTraceTopicpushConsumer;
+    private DefaultMQPushConsumer customTraceTopicPushConsumer;
 
     private AsyncTraceDispatcher asyncTraceDispatcher;
     private MQClientInstance mQClientTraceFactory;
@@ -126,7 +126,7 @@ public void init() throws Exception {
         pushConsumer = new DefaultMQPushConsumer(consumerGroup, true, "");
         consumerGroupNormal = "FooBarGroup" + System.currentTimeMillis();
         normalPushConsumer = new DefaultMQPushConsumer(consumerGroupNormal, false, "");
-        customTraceTopicpushConsumer = new DefaultMQPushConsumer(consumerGroup, true, customerTraceTopic);
+        customTraceTopicPushConsumer = new DefaultMQPushConsumer(consumerGroup, true, customerTraceTopic);
         pushConsumer.setNamesrvAddr("127.0.0.1:9876");
         pushConsumer.setPullInterval(60 * 1000);
 

File: controller/src/main/java/org/apache/rocketmq/controller/ControllerStartup.java
Patch:
@@ -26,13 +26,13 @@
 import java.util.Properties;
 import java.util.concurrent.Callable;
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.rocketmq.common.ControllerConfig;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.common.ControllerConfig;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.netty.NettyClientConfig;
@@ -71,7 +71,7 @@ public static ControllerManager main0(String[] args) {
 
     public static ControllerManager createControllerManager(String[] args) throws IOException, JoranException {
         Options options = ServerUtil.buildCommandlineOptions(new Options());
-        commandLine = ServerUtil.parseCmdLine("mqcontroller", args, buildCommandlineOptions(options), new PosixParser());
+        commandLine = ServerUtil.parseCmdLine("mqcontroller", args, buildCommandlineOptions(options), new DefaultParser());
         if (null == commandLine) {
             System.exit(-1);
             return null;

File: example/src/main/java/org/apache/rocketmq/example/benchmark/BatchProducer.java
Patch:
@@ -28,9 +28,9 @@
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.LongAdder;
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.lang3.RandomStringUtils;
 import org.apache.rocketmq.client.exception.MQBrokerException;
@@ -56,7 +56,7 @@ public static void main(String[] args) throws MQClientException {
         System.setProperty(RemotingCommand.SERIALIZE_TYPE_PROPERTY, SerializeType.ROCKETMQ.name());
 
         Options options = ServerUtil.buildCommandlineOptions(new Options());
-        CommandLine commandLine = ServerUtil.parseCmdLine("benchmarkBatchProducer", args, buildCommandlineOptions(options), new PosixParser());
+        CommandLine commandLine = ServerUtil.parseCmdLine("benchmarkBatchProducer", args, buildCommandlineOptions(options), new DefaultParser());
         if (null == commandLine) {
             System.exit(-1);
         }

File: example/src/main/java/org/apache/rocketmq/example/benchmark/Producer.java
Patch:
@@ -20,9 +20,9 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.atomic.LongAdder;
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.commons.lang3.RandomStringUtils;
 import org.apache.commons.lang3.concurrent.BasicThreadFactory;
 import org.apache.rocketmq.client.exception.MQBrokerException;
@@ -61,7 +61,7 @@ public static void main(String[] args) throws MQClientException {
         System.setProperty(RemotingCommand.SERIALIZE_TYPE_PROPERTY, SerializeType.ROCKETMQ.name());
 
         Options options = ServerUtil.buildCommandlineOptions(new Options());
-        CommandLine commandLine = ServerUtil.parseCmdLine("benchmarkProducer", args, buildCommandlineOptions(options), new PosixParser());
+        CommandLine commandLine = ServerUtil.parseCmdLine("benchmarkProducer", args, buildCommandlineOptions(options), new DefaultParser());
         if (null == commandLine) {
             System.exit(-1);
         }

File: example/src/main/java/org/apache/rocketmq/example/benchmark/TransactionProducer.java
Patch:
@@ -18,9 +18,9 @@
 package org.apache.rocketmq.example.benchmark;
 
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.commons.lang3.concurrent.BasicThreadFactory;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.producer.LocalTransactionState;
@@ -65,7 +65,7 @@ public class TransactionProducer {
     public static void main(String[] args) throws MQClientException, UnsupportedEncodingException {
         System.setProperty(RemotingCommand.SERIALIZE_TYPE_PROPERTY, SerializeType.ROCKETMQ.name());
         Options options = ServerUtil.buildCommandlineOptions(new Options());
-        CommandLine commandLine = ServerUtil.parseCmdLine("TransactionProducer", args, buildCommandlineOptions(options), new PosixParser());
+        CommandLine commandLine = ServerUtil.parseCmdLine("TransactionProducer", args, buildCommandlineOptions(options), new DefaultParser());
         TxSendConfig config = new TxSendConfig();
         config.topic = commandLine.hasOption('t') ? commandLine.getOptionValue('t').trim() : "BenchmarkTest";
         config.threadCount = commandLine.hasOption('w') ? Integer.parseInt(commandLine.getOptionValue('w')) : 32;

File: example/src/main/java/org/apache/rocketmq/example/operation/Consumer.java
Patch:
@@ -19,11 +19,11 @@
 import java.util.List;
 import java.util.concurrent.atomic.AtomicLong;
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.HelpFormatter;
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
-import org.apache.commons.cli.PosixParser;
 import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
 import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
 import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
@@ -91,7 +91,7 @@ public static CommandLine buildCommandline(String[] args) {
         opt.setRequired(true);
         options.addOption(opt);
 
-        PosixParser parser = new PosixParser();
+        DefaultParser parser = new DefaultParser();
         HelpFormatter hf = new HelpFormatter();
         hf.setWidth(110);
         CommandLine commandLine = null;

File: example/src/main/java/org/apache/rocketmq/example/operation/Producer.java
Patch:
@@ -17,11 +17,11 @@
 package org.apache.rocketmq.example.operation;
 
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.HelpFormatter;
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
-import org.apache.commons.cli.PosixParser;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
 import org.apache.rocketmq.client.producer.SendResult;
@@ -89,7 +89,7 @@ public static CommandLine buildCommandline(String[] args) {
         opt.setRequired(true);
         options.addOption(opt);
 
-        PosixParser parser = new PosixParser();
+        DefaultParser parser = new DefaultParser();
         HelpFormatter hf = new HelpFormatter();
         hf.setWidth(110);
         CommandLine commandLine = null;

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/NamesrvStartup.java
Patch:
@@ -25,9 +25,9 @@
 import java.util.Properties;
 import java.util.concurrent.Callable;
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.rocketmq.common.MQVersion;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
@@ -86,7 +86,7 @@ public static void parseCommandlineAndConfigFile(String[] args) throws Exception
         System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, Integer.toString(MQVersion.CURRENT_VERSION));
 
         Options options = ServerUtil.buildCommandlineOptions(new Options());
-        CommandLine commandLine = ServerUtil.parseCmdLine("mqnamesrv", args, buildCommandlineOptions(options), new PosixParser());
+        CommandLine commandLine = ServerUtil.parseCmdLine("mqnamesrv", args, buildCommandlineOptions(options), new DefaultParser());
         if (null == commandLine) {
             System.exit(-1);
             return;

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -23,8 +23,8 @@
 import java.util.ArrayList;
 import java.util.List;
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.rocketmq.acl.common.AclUtils;
 import org.apache.rocketmq.common.MQVersion;
 import org.apache.rocketmq.common.MixAll;
@@ -150,7 +150,7 @@ public static void main0(String[] args, RPCHook rpcHook) {
                         Options options = ServerUtil.buildCommandlineOptions(new Options());
                         final CommandLine commandLine =
                             ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options),
-                                new PosixParser());
+                                new DefaultParser());
                         if (null == commandLine) {
                             return;
                         }

File: tools/src/main/java/org/apache/rocketmq/tools/command/queue/QueryConsumeQueueCommand.java
Patch:
@@ -19,9 +19,9 @@
 
 import com.alibaba.fastjson.JSON;
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.protocol.body.ConsumeQueueData;
 import org.apache.rocketmq.common.protocol.body.QueryConsumeQueueResponseBody;
@@ -40,7 +40,7 @@ public static void main(String[] args) {
         String[] subargs = new String[] {"-t TopicTest", "-q 0", "-i 6447", "-b 100.81.165.119:10911"};
         final CommandLine commandLine =
             ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options),
-                new PosixParser());
+                new DefaultParser());
         cmd.execute(commandLine, options, null);
     }
 

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -47,7 +47,6 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
-import java.util.concurrent.atomic.AtomicLong;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.AbstractBrokerRunnable;
 import org.apache.rocketmq.common.BrokerConfig;
@@ -138,8 +137,6 @@ public class DefaultMessageStore implements MessageStore {
     private StoreCheckpoint storeCheckpoint;
     private TimerMessageStore timerMessageStore;
 
-    private AtomicLong printTimes = new AtomicLong(0);
-
     private final LinkedList<CommitLogDispatcher> dispatcherList;
 
     private RandomAccessFile lockFile;

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/AbstractTransactionalMessageCheckListener.java
Patch:
@@ -56,6 +56,7 @@ public void sendCheckMessage(MessageExt msgExt) throws Exception {
         checkTransactionStateRequestHeader.setMsgId(msgExt.getUserProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX));
         checkTransactionStateRequestHeader.setTransactionId(checkTransactionStateRequestHeader.getMsgId());
         checkTransactionStateRequestHeader.setTranStateTableOffset(msgExt.getQueueOffset());
+        checkTransactionStateRequestHeader.setBname(brokerController.getBrokerConfig().getBrokerName());
         msgExt.setTopic(msgExt.getUserProperty(MessageConst.PROPERTY_REAL_TOPIC));
         msgExt.setQueueId(Integer.parseInt(msgExt.getUserProperty(MessageConst.PROPERTY_REAL_QUEUE_ID)));
         msgExt.setStoreSize(0);

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -1451,6 +1451,7 @@ public boolean registerClient(final String addr, final HeartbeatData heartbeat,
 
     public void consumerSendMessageBack(
         final String addr,
+        final String brokerName,
         final MessageExt msg,
         final String consumerGroup,
         final int delayLevel,
@@ -1466,6 +1467,7 @@ public void consumerSendMessageBack(
         requestHeader.setDelayLevel(delayLevel);
         requestHeader.setOriginMsgId(msg.getMsgId());
         requestHeader.setMaxReconsumeTimes(maxConsumeRetryTimes);
+        requestHeader.setBname(brokerName);
 
         RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),
             request, timeoutMillis);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java
Patch:
@@ -622,8 +622,8 @@ public void sendMessageBack(MessageExt msg, int delayLevel, final String brokerN
                 consumerGroup = this.defaultMQPullConsumer.getConsumerGroup();
             }
 
-            this.mQClientFactory.getMQClientAPIImpl().consumerSendMessageBack(brokerAddr, msg, consumerGroup, delayLevel, 3000,
-                this.defaultMQPullConsumer.getMaxReconsumeTimes());
+            this.mQClientFactory.getMQClientAPIImpl().consumerSendMessageBack(brokerAddr, brokerName, msg, consumerGroup,
+                delayLevel, 3000, this.defaultMQPullConsumer.getMaxReconsumeTimes());
         } catch (Exception e) {
             log.error("sendMessageBack Exception, " + this.defaultMQPullConsumer.getConsumerGroup(), e);
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -732,7 +732,7 @@ private void sendMessageBack(MessageExt msg, int delayLevel, final String broker
             } else {
                 String brokerAddr = (null != brokerName) ? this.mQClientFactory.findBrokerAddressInPublish(brokerName)
                         : RemotingHelper.parseSocketAddressAddr(msg.getStoreHost());
-                this.mQClientFactory.getMQClientAPIImpl().consumerSendMessageBack(brokerAddr, msg,
+                this.mQClientFactory.getMQClientAPIImpl().consumerSendMessageBack(brokerAddr, brokerName, msg,
                         this.defaultMQPushConsumer.getConsumerGroup(), delayLevel, 5000, getMaxReconsumeTimes());
             }
         } catch (Exception e) {
@@ -794,6 +794,7 @@ void ackAsync(MessageExt message, String consumerGroup) {
             requestHeader.setOffset(queueOffset);
             requestHeader.setConsumerGroup(consumerGroup);
             requestHeader.setExtraInfo(extraInfo);
+            requestHeader.setBname(brokerName);
             this.mQClientFactory.getMQClientAPIImpl().ackMessageAsync(findBrokerResult.getBrokerAddr(), ASYNC_TIMEOUT, new AckCallback() {
                 @Override
                 public void onSuccess(AckResult ackResult) {
@@ -837,6 +838,7 @@ void changePopInvisibleTimeAsync(String topic, String consumerGroup, String extr
             requestHeader.setConsumerGroup(consumerGroup);
             requestHeader.setExtraInfo(extraInfo);
             requestHeader.setInvisibleTime(invisibleTime);
+            requestHeader.setBname(brokerName);
             //here the broker should be polished
             this.mQClientFactory.getMQClientAPIImpl().changeInvisibleTimeAsync(brokerName, findBrokerResult.getBrokerAddr(), requestHeader, ASYNC_TIMEOUT, callback);
             return;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/PullAPIWrapper.java
Patch:
@@ -379,6 +379,7 @@ public void popAsync(MessageQueue mq, long invisibleTime, int maxNums, String co
             requestHeader.setExpType(expressionType);
             requestHeader.setExp(expression);
             requestHeader.setOrder(order);
+            requestHeader.setBname(mq.getBrokerName());
             //give 1000 ms for server response
             if (poll) {
                 requestHeader.setPollTime(timeout);

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -375,6 +375,7 @@ private void processTransactionState(
                 thisHeader.setProducerGroup(producerGroup);
                 thisHeader.setTranStateTableOffset(checkRequestHeader.getTranStateTableOffset());
                 thisHeader.setFromTransactionCheck(true);
+                thisHeader.setBname(checkRequestHeader.getBname());
 
                 String uniqueKey = message.getProperties().get(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX);
                 if (uniqueKey == null) {
@@ -835,6 +836,7 @@ private SendResult sendKernelImpl(final Message msg,
                 requestHeader.setReconsumeTimes(0);
                 requestHeader.setUnitMode(this.isUnitMode());
                 requestHeader.setBatch(msg instanceof MessageBatch);
+                requestHeader.setBname(brokerName);
                 if (requestHeader.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
                     String reconsumeTimes = MessageAccessor.getReconsumeTime(msg);
                     if (reconsumeTimes != null) {
@@ -1365,6 +1367,7 @@ public void endTransaction(
         EndTransactionRequestHeader requestHeader = new EndTransactionRequestHeader();
         requestHeader.setTransactionId(transactionId);
         requestHeader.setCommitLogOffset(id.getOffset());
+        requestHeader.setBname(destBrokerName);
         switch (localTransactionState) {
             case COMMIT_MESSAGE:
                 requestHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_COMMIT_TYPE);

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/AckMessageRequestHeader.java
Patch:
@@ -17,11 +17,11 @@
 package org.apache.rocketmq.common.protocol.header;
 
 import com.google.common.base.MoreObjects;
-import org.apache.rocketmq.remoting.CommandCustomHeader;
+import org.apache.rocketmq.common.rpc.TopicQueueRequestHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 
-public class AckMessageRequestHeader implements CommandCustomHeader {
+public class AckMessageRequestHeader extends TopicQueueRequestHeader {
     @CFNotNull
     private String consumerGroup;
     @CFNotNull

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/ChangeInvisibleTimeRequestHeader.java
Patch:
@@ -17,11 +17,11 @@
 package org.apache.rocketmq.common.protocol.header;
 
 import com.google.common.base.MoreObjects;
-import org.apache.rocketmq.remoting.CommandCustomHeader;
+import org.apache.rocketmq.common.rpc.TopicQueueRequestHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 
-public class ChangeInvisibleTimeRequestHeader implements CommandCustomHeader {
+public class ChangeInvisibleTimeRequestHeader extends TopicQueueRequestHeader {
     @CFNotNull
     private String consumerGroup;
     @CFNotNull

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/CheckTransactionStateRequestHeader.java
Patch:
@@ -21,11 +21,11 @@
 package org.apache.rocketmq.common.protocol.header;
 
 import com.google.common.base.MoreObjects;
-import org.apache.rocketmq.remoting.CommandCustomHeader;
+import org.apache.rocketmq.common.rpc.RpcRequestHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 
-public class CheckTransactionStateRequestHeader implements CommandCustomHeader {
+public class CheckTransactionStateRequestHeader extends RpcRequestHeader {
     @CFNotNull
     private Long tranStateTableOffset;
     @CFNotNull

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/ConsumerSendMsgBackRequestHeader.java
Patch:
@@ -18,12 +18,12 @@
 package org.apache.rocketmq.common.protocol.header;
 
 import com.google.common.base.MoreObjects;
-import org.apache.rocketmq.remoting.CommandCustomHeader;
+import org.apache.rocketmq.common.rpc.RpcRequestHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.annotation.CFNullable;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 
-public class ConsumerSendMsgBackRequestHeader implements CommandCustomHeader {
+public class ConsumerSendMsgBackRequestHeader extends RpcRequestHeader {
     @CFNotNull
     private Long offset;
     @CFNotNull

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/EndTransactionRequestHeader.java
Patch:
@@ -18,13 +18,13 @@
 package org.apache.rocketmq.common.protocol.header;
 
 import com.google.common.base.MoreObjects;
+import org.apache.rocketmq.common.rpc.RpcRequestHeader;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
-import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.annotation.CFNullable;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 
-public class EndTransactionRequestHeader implements CommandCustomHeader {
+public class EndTransactionRequestHeader extends RpcRequestHeader {
     @CFNotNull
     private String producerGroup;
     @CFNotNull

File: broker/src/test/java/org/apache/rocketmq/broker/processor/ReplyMessageProcessorTest.java
Patch:
@@ -96,7 +96,7 @@ public void testProcessRequest_Success() throws RemotingCommandException, Interr
         when(messageStore.putMessage(any(MessageExtBrokerInner.class))).thenReturn(new PutMessageResult(PutMessageStatus.PUT_OK, new AppendMessageResult(AppendMessageStatus.PUT_OK)));
         brokerController.getProducerManager().registerProducer(group, clientInfo);
         final RemotingCommand request = createSendMessageRequestHeaderCommand(RequestCode.SEND_REPLY_MESSAGE);
-        when(brokerController.getBroker2Client().callClient(any(Channel.class), any(RemotingCommand.class))).thenReturn(createResponse(ResponseCode.SUCCESS, request));
+        when(brokerController.getBroker2Client().callClient(any(), any(RemotingCommand.class))).thenReturn(createResponse(ResponseCode.SUCCESS, request));
         RemotingCommand responseToReturn = replyMessageProcessor.processRequest(handlerContext, request);
         assertThat(responseToReturn.getCode()).isEqualTo(ResponseCode.SUCCESS);
         assertThat(responseToReturn.getOpaque()).isEqualTo(request.getOpaque());

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ContextVariable.java
Patch:
@@ -21,6 +21,7 @@ public class ContextVariable {
     public static final String REMOTE_ADDRESS = "remote-address";
     public static final String LOCAL_ADDRESS = "local-address";
     public static final String CLIENT_ID = "client-id";
+    public static final String CHANNEL = "channel";
     public static final String LANGUAGE = "language";
     public static final String CLIENT_VERSION = "client-version";
     public static final String REMAINING_MS = "remaining-ms";

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/AckMessageActivity.java
Patch:
@@ -98,7 +98,7 @@ protected CompletableFuture<AckMessageResultEntry> processAckMessage(ProxyContex
             String handleString = ackMessageEntry.getReceiptHandle();
 
             String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());
-            MessageReceiptHandle messageReceiptHandle = receiptHandleProcessor.removeReceiptHandle(ctx.getClientID(), group, ackMessageEntry.getMessageId(), ackMessageEntry.getReceiptHandle());
+            MessageReceiptHandle messageReceiptHandle = receiptHandleProcessor.removeReceiptHandle(grpcChannelManager.getChannel(ctx.getClientID()), group, ackMessageEntry.getMessageId(), ackMessageEntry.getReceiptHandle());
             if (messageReceiptHandle != null) {
                 handleString = messageReceiptHandle.getReceiptHandleStr();
             }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ChangeInvisibleDurationActivity.java
Patch:
@@ -55,7 +55,7 @@ public CompletableFuture<ChangeInvisibleDurationResponse> changeInvisibleDuratio
             ReceiptHandle receiptHandle = ReceiptHandle.decode(request.getReceiptHandle());
             String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());
 
-            MessageReceiptHandle messageReceiptHandle = receiptHandleProcessor.removeReceiptHandle(ctx.getClientID(), group, request.getMessageId(), receiptHandle.getReceiptHandle());
+            MessageReceiptHandle messageReceiptHandle = receiptHandleProcessor.removeReceiptHandle(grpcChannelManager.getChannel(ctx.getClientID()), group, request.getMessageId(), receiptHandle.getReceiptHandle());
             if (messageReceiptHandle != null) {
                 receiptHandle = ReceiptHandle.decode(messageReceiptHandle.getReceiptHandleStr());
             }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java
Patch:
@@ -124,7 +124,7 @@ public void receiveMessage(ProxyContext ctx, ReceiveMessageRequest request,
                                 MessageReceiptHandle messageReceiptHandle =
                                     new MessageReceiptHandle(group, topic, messageExt.getQueueId(), receiptHandle, messageExt.getMsgId(),
                                         messageExt.getQueueOffset(), messageExt.getReconsumeTimes());
-                                receiptHandleProcessor.addReceiptHandle(ctx.getClientID(), group, messageExt.getMsgId(), receiptHandle, messageReceiptHandle);
+                                receiptHandleProcessor.addReceiptHandle(grpcChannelManager.getChannel(ctx.getClientID()), group, messageExt.getMsgId(), receiptHandle, messageReceiptHandle);
                             }
                         }
                     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/producer/ForwardMessageToDLQActivity.java
Patch:
@@ -48,7 +48,7 @@ public CompletableFuture<ForwardMessageToDeadLetterQueueResponse> forwardMessage
 
             String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());
             String handleString = request.getReceiptHandle();
-            MessageReceiptHandle messageReceiptHandle = receiptHandleProcessor.removeReceiptHandle(ctx.getClientID(), group, request.getMessageId(), request.getReceiptHandle());
+            MessageReceiptHandle messageReceiptHandle = receiptHandleProcessor.removeReceiptHandle(grpcChannelManager.getChannel(ctx.getClientID()), group, request.getMessageId(), request.getReceiptHandle());
             if (messageReceiptHandle != null) {
                 handleString = messageReceiptHandle.getReceiptHandleStr();
             }

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ClientProcessor.java
Patch:
@@ -88,9 +88,9 @@ public void registerConsumer(
     public ClientChannelInfo findConsumerChannel(
         ProxyContext ctx,
         String consumerGroup,
-        String clientId
+        Channel channel
     ) {
-        return this.serviceManager.getConsumerManager().findChannel(consumerGroup, clientId);
+        return this.serviceManager.getConsumerManager().findChannel(consumerGroup, channel);
     }
 
     public void unRegisterConsumer(

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/DefaultMessagingProcessor.java
Patch:
@@ -246,8 +246,8 @@ public void registerConsumer(ProxyContext ctx, String consumerGroup, ClientChann
     }
 
     @Override
-    public ClientChannelInfo findConsumerChannel(ProxyContext ctx, String consumerGroup, String clientId) {
-        return this.clientProcessor.findConsumerChannel(ctx, consumerGroup, clientId);
+    public ClientChannelInfo findConsumerChannel(ProxyContext ctx, String consumerGroup, Channel channel) {
+        return this.clientProcessor.findConsumerChannel(ctx, consumerGroup, channel);
     }
 
     @Override

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/MessagingProcessor.java
Patch:
@@ -266,7 +266,7 @@ void registerConsumer(
     ClientChannelInfo findConsumerChannel(
         ProxyContext ctx,
         String consumerGroup,
-        String clientId
+        Channel channel
     );
 
     void unRegisterConsumer(

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/client/ClientActivityTest.java
Patch:
@@ -208,7 +208,6 @@ protected void assertClientChannelInfo(ClientChannelInfo clientChannelInfo, Stri
         GrpcClientChannel channel = (GrpcClientChannel) clientChannelInfo.getChannel();
         assertEquals(REMOTE_ADDR, channel.getRemoteAddress());
         assertEquals(LOCAL_ADDR, channel.getLocalAddress());
-        assertEquals(group, channel.getGroup());
     }
 
     @Test

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ChangeInvisibleDurationActivityTest.java
Patch:
@@ -92,7 +92,7 @@ public void testChangeInvisibleDurationActivityWhenHasMappingHandle() throws Thr
         when(this.messagingProcessor.changeInvisibleTime(
             any(), receiptHandleCaptor.capture(), anyString(), anyString(), anyString(), invisibleTimeArgumentCaptor.capture()
         )).thenReturn(CompletableFuture.completedFuture(ackResult));
-        when(receiptHandleProcessor.removeReceiptHandle(anyString(), anyString(), anyString(), anyString()))
+        when(receiptHandleProcessor.removeReceiptHandle(any(), anyString(), anyString(), anyString()))
             .thenReturn(new MessageReceiptHandle("group", "topic", 0, savedHandleStr, "msgId", 0, 0));
 
         ChangeInvisibleDurationResponse response = this.changeInvisibleDurationActivity.changeInvisibleDuration(

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/producer/ForwardMessageToDLQActivityTest.java
Patch:
@@ -75,7 +75,7 @@ public void testForwardMessageToDeadLetterQueueWhenHasMappingHandle() throws Thr
             .thenReturn(CompletableFuture.completedFuture(RemotingCommand.createResponseCommand(ResponseCode.SUCCESS, "")));
 
         String savedHandleStr = buildReceiptHandle("topic", System.currentTimeMillis(),3000);
-        when(receiptHandleProcessor.removeReceiptHandle(anyString(), anyString(), anyString(), anyString()))
+        when(receiptHandleProcessor.removeReceiptHandle(any(), anyString(), anyString(), anyString()))
             .thenReturn(new MessageReceiptHandle("group", "topic", 0, savedHandleStr, "msgId", 0, 0));
 
         ForwardMessageToDeadLetterQueueResponse response = this.forwardMessageToDLQActivity.forwardMessageToDeadLetterQueue(

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/mqclient/ProxyClientRemotingProcessorTest.java
Patch:
@@ -75,7 +75,7 @@ public void testTransactionCheck() throws Exception {
                 proxyRelayResultFuture));
 
         GrpcClientChannel grpcClientChannel = new GrpcClientChannel(proxyRelayService, null,
-            ProxyContext.create().setRemoteAddress("127.0.0.1:8888").setLocalAddress("127.0.0.1:10911"), "group", "clientId");
+            ProxyContext.create().setRemoteAddress("127.0.0.1:8888").setLocalAddress("127.0.0.1:10911"), "clientId");
         when(producerManager.getAvailableChannel(anyString()))
             .thenReturn(grpcClientChannel);
 

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -44,6 +44,7 @@
 import org.apache.commons.io.FilenameUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.acl.AccessValidator;
+import org.apache.rocketmq.acl.plain.PlainAccessValidator;
 import org.apache.rocketmq.broker.client.ClientHousekeepingService;
 import org.apache.rocketmq.broker.client.ConsumerIdsChangeListener;
 import org.apache.rocketmq.broker.client.ConsumerManager;
@@ -916,8 +917,8 @@ private void initialAcl() {
 
         List<AccessValidator> accessValidators = ServiceProvider.load(ServiceProvider.ACL_VALIDATOR_ID, AccessValidator.class);
         if (accessValidators.isEmpty()) {
-            LOG.info("The broker dose not load the AccessValidator");
-            return;
+            LOG.info("ServiceProvider loaded no AccessValidator, using default org.apache.rocketmq.acl.plain.PlainAccessValidator");
+            accessValidators.add(new PlainAccessValidator());
         }
 
         for (AccessValidator accessValidator : accessValidators) {

File: broker/src/main/java/org/apache/rocketmq/broker/offset/LmqConsumerOffsetManager.java
Patch:
@@ -92,7 +92,7 @@ public void decode(String jsonString) {
         if (jsonString != null) {
             LmqConsumerOffsetManager obj = RemotingSerializable.fromJson(jsonString, LmqConsumerOffsetManager.class);
             if (obj != null) {
-                super.offsetTable = obj.offsetTable;
+                super.setOffsetTable(obj.getOffsetTable());
                 this.lmqOffsetTable = obj.lmqOffsetTable;
             }
         }

File: store/src/main/java/org/apache/rocketmq/store/GetMessageStatus.java
Patch:
@@ -35,4 +35,6 @@ public enum GetMessageStatus {
     NO_MATCHED_LOGIC_QUEUE,
 
     NO_MESSAGE_IN_QUEUE,
+
+    OFFSET_RESET
 }

File: acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java
Patch:
@@ -55,7 +55,7 @@ protected SortedMap<String, String> parseRequestContent(RemotingCommand request)
         request.makeCustomHeaderToNet();
         Map<String, String> extFields = request.getExtFields();
         // Sort property
-        return new TreeMap<String, String>(extFields);
+        return new TreeMap<>(extFields);
     }
 
     public SessionCredentials getSessionCredentials() {

File: acl/src/main/java/org/apache/rocketmq/acl/common/Permission.java
Patch:
@@ -30,7 +30,7 @@ public class Permission {
     public static final byte PUB = 1 << 2;
     public static final byte SUB = 1 << 3;
 
-    public static final Set<Integer> ADMIN_CODE = new HashSet<Integer>();
+    public static final Set<Integer> ADMIN_CODE = new HashSet<>();
 
     static {
         // UPDATE_AND_CREATE_TOPIC

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessResource.java
Patch:
@@ -174,7 +174,7 @@ public static PlainAccessResource parse(RemotingCommand request, String remoteAd
         }
 
         // Content
-        SortedMap<String, String> map = new TreeMap<String, String>();
+        SortedMap<String, String> map = new TreeMap<>();
         for (Map.Entry<String, String> entry : request.getExtFields().entrySet()) {
             if (!SessionCredentials.SIGNATURE.equals(entry.getKey())
                 && !MixAll.UNIQUE_MSG_QUERY_FLAG.equals(entry.getKey())) {

File: acl/src/test/java/org/apache/rocketmq/acl/common/AclClientRPCHookTest.java
Patch:
@@ -35,7 +35,7 @@
 
 public class AclClientRPCHookTest {
     protected ConcurrentHashMap<Class<? extends CommandCustomHeader>, Field[]> fieldCache =
-        new ConcurrentHashMap<Class<? extends CommandCustomHeader>, Field[]>();
+        new ConcurrentHashMap<>();
     private AclClientRPCHook aclClientRPCHook = new AclClientRPCHook(null);
 
     @Test
@@ -81,7 +81,7 @@ public void testParseRequestContentWithStreamRequestType() {
     private SortedMap<String, String> oldVersionParseRequestContent(RemotingCommand request, String ak, String securityToken) {
         CommandCustomHeader header = request.readCustomHeader();
         // Sort property
-        SortedMap<String, String> map = new TreeMap<String, String>();
+        SortedMap<String, String> map = new TreeMap<>();
         map.put(ACCESS_KEY, ak);
         if (securityToken != null) {
             map.put(SECURITY_TOKEN, securityToken);

File: acl/src/test/java/org/apache/rocketmq/acl/plain/PlainPermissionManagerTest.java
Patch:
@@ -119,7 +119,7 @@ public void buildPlainAccessResourceTest() {
         plainAccessResource = plainPermissionManager.buildPlainAccessResource(plainAccess);
         Assert.assertEquals(plainAccessResource.isAdmin(), true);
 
-        List<String> groups = new ArrayList<String>();
+        List<String> groups = new ArrayList<>();
         groups.add("groupA=DENY");
         groups.add("groupB=PUB|SUB");
         groups.add("groupC=PUB");
@@ -132,7 +132,7 @@ public void buildPlainAccessResourceTest() {
         Assert.assertEquals(resourcePermMap.get(PlainAccessResource.getRetryTopic("groupB")).byteValue(), Permission.PUB | Permission.SUB);
         Assert.assertEquals(resourcePermMap.get(PlainAccessResource.getRetryTopic("groupC")).byteValue(), Permission.PUB);
 
-        List<String> topics = new ArrayList<String>();
+        List<String> topics = new ArrayList<>();
         topics.add("topicA=DENY");
         topics.add("topicB=PUB|SUB");
         topics.add("topicC=PUB");

File: broker/src/main/java/org/apache/rocketmq/broker/client/ConsumerGroupInfo.java
Patch:
@@ -36,9 +36,9 @@ public class ConsumerGroupInfo {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final String groupName;
     private final ConcurrentMap<String/* Topic */, SubscriptionData> subscriptionTable =
-        new ConcurrentHashMap<String, SubscriptionData>();
+        new ConcurrentHashMap<>();
     private final ConcurrentMap<Channel, ClientChannelInfo> channelInfoTable =
-        new ConcurrentHashMap<Channel, ClientChannelInfo>(16);
+        new ConcurrentHashMap<>(16);
     private volatile ConsumeType consumeType;
     private volatile MessageModel messageModel;
     private volatile ConsumeFromWhere consumeFromWhere;

File: broker/src/main/java/org/apache/rocketmq/broker/client/ConsumerManager.java
Patch:
@@ -42,7 +42,7 @@ public class ConsumerManager {
     private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private static final long CHANNEL_EXPIRED_TIMEOUT = 1000 * 120;
     private final ConcurrentMap<String, ConsumerGroupInfo> consumerTable =
-        new ConcurrentHashMap<String, ConsumerGroupInfo>(1024);
+        new ConcurrentHashMap<>(1024);
     private final List<ConsumerIdsChangeListener> consumerIdsChangeListenerList = new CopyOnWriteArrayList<>();
     protected final BrokerStatsManager brokerStatsManager;
 

File: broker/src/main/java/org/apache/rocketmq/broker/client/net/Broker2Client.java
Patch:
@@ -118,7 +118,7 @@ public RemotingCommand resetOffset(String topic, String group, long timeStamp, b
             return response;
         }
 
-        Map<MessageQueue, Long> offsetTable = new HashMap<MessageQueue, Long>();
+        Map<MessageQueue, Long> offsetTable = new HashMap<>();
 
         for (int i = 0; i < topicConfig.getWriteQueueNums(); i++) {
             MessageQueue mq = new MessageQueue();
@@ -238,7 +238,7 @@ public RemotingCommand getConsumeStatus(String topic, String group, String origi
             RemotingCommand.createRequestCommand(RequestCode.GET_CONSUMER_STATUS_FROM_CLIENT,
                 requestHeader);
 
-        Map<String, Map<MessageQueue, Long>> consumerStatusTable = new HashMap<String, Map<MessageQueue, Long>>();
+        Map<String, Map<MessageQueue, Long>> consumerStatusTable = new HashMap<>();
         ConcurrentMap<Channel, ClientChannelInfo> channelInfoTable =
             this.brokerController.getConsumerManager().getConsumerGroupInfo(group).getChannelInfoTable();
         if (null == channelInfoTable || channelInfoTable.isEmpty()) {

File: broker/src/main/java/org/apache/rocketmq/broker/client/rebalance/RebalanceLockManager.java
Patch:
@@ -34,7 +34,7 @@ public class RebalanceLockManager {
         "rocketmq.broker.rebalance.lockMaxLiveTime", "60000"));
     private final Lock lock = new ReentrantLock();
     private final ConcurrentMap<String/* group */, ConcurrentHashMap<MessageQueue, LockEntry>> mqLockTable =
-        new ConcurrentHashMap<String, ConcurrentHashMap<MessageQueue, LockEntry>>(1024);
+        new ConcurrentHashMap<>(1024);
 
     public boolean isLockAllExpired(final String group) {
         final ConcurrentHashMap<MessageQueue, LockEntry> lockEntryMap = mqLockTable.get(group);
@@ -124,8 +124,8 @@ private boolean isLocked(final String group, final MessageQueue mq, final String
 
     public Set<MessageQueue> tryLockBatch(final String group, final Set<MessageQueue> mqs,
         final String clientId) {
-        Set<MessageQueue> lockedMqs = new HashSet<MessageQueue>(mqs.size());
-        Set<MessageQueue> notLockedMqs = new HashSet<MessageQueue>(mqs.size());
+        Set<MessageQueue> lockedMqs = new HashSet<>(mqs.size());
+        Set<MessageQueue> notLockedMqs = new HashSet<>(mqs.size());
 
         for (MessageQueue mq : mqs) {
             if (this.isLocked(group, mq, clientId)) {

File: broker/src/main/java/org/apache/rocketmq/broker/filter/ConsumerFilterManager.java
Patch:
@@ -48,7 +48,7 @@ public class ConsumerFilterManager extends ConfigManager {
     private static final long MS_24_HOUR = 24 * 3600 * 1000;
 
     private ConcurrentMap<String/*Topic*/, FilterDataMapByTopic>
-        filterDataByTopic = new ConcurrentHashMap<String/*Topic*/, FilterDataMapByTopic>(256);
+        filterDataByTopic = new ConcurrentHashMap<>(256);
 
     private transient BrokerController brokerController;
     private transient BloomFilter bloomFilter;
@@ -176,7 +176,7 @@ public ConsumerFilterData get(final String topic, final String consumerGroup) {
     }
 
     public Collection<ConsumerFilterData> getByGroup(final String consumerGroup) {
-        Collection<ConsumerFilterData> ret = new HashSet<ConsumerFilterData>();
+        Collection<ConsumerFilterData> ret = new HashSet<>();
 
         Iterator<FilterDataMapByTopic> topicIterator = this.filterDataByTopic.values().iterator();
         while (topicIterator.hasNext()) {
@@ -324,7 +324,7 @@ public void setFilterDataByTopic(final ConcurrentHashMap<String, FilterDataMapBy
     public static class FilterDataMapByTopic {
 
         private ConcurrentMap<String/*consumer group*/, ConsumerFilterData>
-            groupFilterData = new ConcurrentHashMap<String, ConsumerFilterData>();
+            groupFilterData = new ConcurrentHashMap<>();
 
         private String topic;
 

File: broker/src/main/java/org/apache/rocketmq/broker/filter/MessageEvaluationContext.java
Patch:
@@ -48,7 +48,7 @@ public Map<String, Object> keyValues() {
             return null;
         }
 
-        Map<String, Object> copy = new HashMap<String, Object>(properties.size(), 1);
+        Map<String, Object> copy = new HashMap<>(properties.size(), 1);
 
         for (Entry<String, String> entry : properties.entrySet()) {
             copy.put(entry.getKey(), entry.getValue());

File: broker/src/main/java/org/apache/rocketmq/broker/filtersrv/FilterServerManager.java
Patch:
@@ -41,7 +41,7 @@ public class FilterServerManager {
     public static final long FILTER_SERVER_MAX_IDLE_TIME_MILLS = 30000;
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final ConcurrentMap<Channel, FilterServerInfo> filterServerTable =
-        new ConcurrentHashMap<Channel, FilterServerInfo>(16);
+        new ConcurrentHashMap<>(16);
     private final BrokerController brokerController;
 
     private ScheduledExecutorService scheduledExecutorService = Executors

File: broker/src/main/java/org/apache/rocketmq/broker/latency/BrokerFixedThreadPoolExecutor.java
Patch:
@@ -52,6 +52,6 @@ public BrokerFixedThreadPoolExecutor(final int corePoolSize, final int maximumPo
 
     @Override
     protected <T> RunnableFuture<T> newTaskFor(final Runnable runnable, final T value) {
-        return new FutureTaskExt<T>(runnable, value);
+        return new FutureTaskExt<>(runnable, value);
     }
 }

File: broker/src/main/java/org/apache/rocketmq/broker/loadbalance/MessageRequestModeManager.java
Patch:
@@ -28,7 +28,7 @@ public class MessageRequestModeManager extends ConfigManager {
     private transient BrokerController brokerController;
 
     private ConcurrentHashMap<String/*topic*/, ConcurrentHashMap<String/*consumerGroup*/, SetMessageRequestModeRequestBody>>
-        messageRequestModeMap = new ConcurrentHashMap<String, ConcurrentHashMap<String, SetMessageRequestModeRequestBody>>();
+        messageRequestModeMap = new ConcurrentHashMap<>();
 
     public MessageRequestModeManager() {
         // empty construct for decode
@@ -41,7 +41,7 @@ public MessageRequestModeManager(BrokerController brokerController) {
     public void setMessageRequestMode(String topic, String consumerGroup, SetMessageRequestModeRequestBody requestBody) {
         ConcurrentHashMap<String, SetMessageRequestModeRequestBody> consumerGroup2ModeMap = messageRequestModeMap.get(topic);
         if (consumerGroup2ModeMap == null) {
-            consumerGroup2ModeMap = new ConcurrentHashMap<String, SetMessageRequestModeRequestBody>();
+            consumerGroup2ModeMap = new ConcurrentHashMap<>();
             ConcurrentHashMap<String, SetMessageRequestModeRequestBody> pre =
                 messageRequestModeMap.putIfAbsent(topic, consumerGroup2ModeMap);
             if (pre != null) {

File: broker/src/main/java/org/apache/rocketmq/broker/longpolling/PullRequestHoldService.java
Patch:
@@ -36,7 +36,7 @@ public class PullRequestHoldService extends ServiceThread {
     protected final BrokerController brokerController;
     private final SystemClock systemClock = new SystemClock();
     protected ConcurrentMap<String/* topic@queueId */, ManyPullRequest> pullRequestTable =
-        new ConcurrentHashMap<String, ManyPullRequest>(1024);
+        new ConcurrentHashMap<>(1024);
 
     public PullRequestHoldService(final BrokerController brokerController) {
         this.brokerController = brokerController;
@@ -126,7 +126,7 @@ public void notifyMessageArriving(final String topic, final int queueId, final l
         if (mpr != null) {
             List<PullRequest> requestList = mpr.cloneListAndClear();
             if (requestList != null) {
-                List<PullRequest> replayList = new ArrayList<PullRequest>();
+                List<PullRequest> replayList = new ArrayList<>();
 
                 for (PullRequest request : requestList) {
                     long newestOffset = maxOffset;

File: broker/src/main/java/org/apache/rocketmq/broker/out/BrokerOuterAPI.java
Patch:
@@ -204,7 +204,7 @@ private List<String> lookupNameServerAddress(String domain) {
 
     public void updateNameServerAddressList(final String addrs) {
         String[] addrArray = addrs.split(";");
-        List<String> lst = new ArrayList<String>(Arrays.asList(addrArray));
+        List<String> lst = new ArrayList<>(Arrays.asList(addrArray));
         this.remotingClient.updateNameServerAddressList(lst);
     }
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
Patch:
@@ -94,7 +94,7 @@ private void reviveRetry(PopCheckPoint popCheckPoint, MessageExt messageExt) thr
         if (messageExt.getTags() != null) {
             msgInner.setTags(messageExt.getTags());
         } else {
-            MessageAccessor.setProperties(msgInner, new HashMap<String, String>());
+            MessageAccessor.setProperties(msgInner, new HashMap<>());
         }
         msgInner.setBornTimestamp(messageExt.getBornTimestamp());
         msgInner.setBornHost(brokerController.getStoreHost());

File: broker/src/main/java/org/apache/rocketmq/broker/schedule/DelayOffsetSerializeWrapper.java
Patch:
@@ -23,7 +23,7 @@
 
 public class DelayOffsetSerializeWrapper extends RemotingSerializable {
     private ConcurrentMap<Integer /* level */, Long/* offset */> offsetTable =
-        new ConcurrentHashMap<Integer, Long>(32);
+        new ConcurrentHashMap<>(32);
 
     private DataVersion dataVersion;
 

File: broker/src/main/java/org/apache/rocketmq/broker/schedule/ScheduleMessageService.java
Patch:
@@ -67,10 +67,10 @@ public class ScheduleMessageService extends ConfigManager {
     private static final long DELAY_FOR_A_SLEEP = 10L;
 
     private final ConcurrentMap<Integer /* level */, Long/* delay timeMillis */> delayLevelTable =
-        new ConcurrentHashMap<Integer, Long>(32);
+        new ConcurrentHashMap<>(32);
 
     private final ConcurrentMap<Integer /* level */, Long/* offset */> offsetTable =
-        new ConcurrentHashMap<Integer, Long>(32);
+        new ConcurrentHashMap<>(32);
     private final AtomicBoolean started = new AtomicBoolean(false);
     private ScheduledExecutorService deliverExecutorService;
     private int maxDelayLevel;
@@ -305,7 +305,7 @@ public String encode(final boolean prettyFormat) {
     }
 
     public boolean parseDelayLevel() {
-        HashMap<String, Long> timeUnitTable = new HashMap<String, Long>();
+        HashMap<String, Long> timeUnitTable = new HashMap<>();
         timeUnitTable.put("s", 1000L);
         timeUnitTable.put("m", 1000L * 60);
         timeUnitTable.put("h", 1000L * 60 * 60);

File: broker/src/main/java/org/apache/rocketmq/broker/subscription/SubscriptionGroupManager.java
Patch:
@@ -35,10 +35,10 @@ public class SubscriptionGroupManager extends ConfigManager {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final ConcurrentMap<String, SubscriptionGroupConfig> subscriptionGroupTable =
-        new ConcurrentHashMap<String, SubscriptionGroupConfig>(1024);
+        new ConcurrentHashMap<>(1024);
 
     private final ConcurrentMap<String, ConcurrentMap<String, Integer>> forbiddenTable =
-        new ConcurrentHashMap<String, ConcurrentMap<String, Integer>>(4);
+        new ConcurrentHashMap<>(4);
 
     private final DataVersion dataVersion = new DataVersion();
     private transient BrokerController brokerController;
@@ -182,7 +182,7 @@ private void updateForbiddenValue(String group, String topic, Integer forbidden)
 
         ConcurrentMap<String, Integer> topicsPermMap = this.forbiddenTable.get(group);
         if (topicsPermMap == null) {
-            this.forbiddenTable.putIfAbsent(group, new ConcurrentHashMap<String, Integer>());
+            this.forbiddenTable.putIfAbsent(group, new ConcurrentHashMap<>());
             topicsPermMap = this.forbiddenTable.get(group);
         }
         Integer old = topicsPermMap.put(topic, forbidden);

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java
Patch:
@@ -59,7 +59,7 @@ public class TopicConfigManager extends ConfigManager {
     private transient final Lock topicConfigTableLock = new ReentrantLock();
 
     private final ConcurrentMap<String, TopicConfig> topicConfigTable =
-        new ConcurrentHashMap<String, TopicConfig>(1024);
+        new ConcurrentHashMap<>(1024);
     private final DataVersion dataVersion = new DataVersion();
     private transient BrokerController brokerController;
 

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/AbstractTransactionalMessageCheckListener.java
Patch:
@@ -97,7 +97,7 @@ public void shutDown() {
 
     public synchronized void initExecutorService() {
         if (executorService == null) {
-            executorService = new ThreadPoolExecutor(2, 5, 100, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(2000),
+            executorService = new ThreadPoolExecutor(2, 5, 100, TimeUnit.SECONDS, new ArrayBlockingQueue<>(2000),
                 new ThreadFactoryImpl("Transaction-msg-check-thread", brokerController.getBrokerIdentity()), new CallerRunsPolicy());
         }
     }

File: broker/src/test/java/org/apache/rocketmq/broker/filter/CommitLogDispatcherCalcBitMapTest.java
Patch:
@@ -55,7 +55,7 @@ public void testDispatch_filterDataIllegal() {
             filterManager);
 
         for (int i = 0; i < 1; i++) {
-            Map<String, String> properties = new HashMap<String, String>(4);
+            Map<String, String> properties = new HashMap<>(4);
             properties.put("a", String.valueOf(i * 10 + 5));
 
             String topic = "topic" + i;
@@ -99,7 +99,7 @@ public void testDispatch_blankFilterData() {
             filterManager);
 
         for (int i = 0; i < 10; i++) {
-            Map<String, String> properties = new HashMap<String, String>(4);
+            Map<String, String> properties = new HashMap<>(4);
             properties.put("a", String.valueOf(i * 10 + 5));
 
             String topic = "topic" + i;
@@ -136,7 +136,7 @@ public void testDispatch() {
             filterManager);
 
         for (int i = 0; i < 10; i++) {
-            Map<String, String> properties = new HashMap<String, String>(4);
+            Map<String, String> properties = new HashMap<>(4);
             properties.put("a", String.valueOf(i * 10 + 5));
 
             String topic = "topic" + i;

File: broker/src/test/java/org/apache/rocketmq/broker/filter/MessageStoreWithFilterTest.java
Patch:
@@ -180,7 +180,7 @@ public void dispatch(DispatchRequest request) {
 
     protected List<MessageExtBrokerInner> putMsg(DefaultMessageStore master, int topicCount,
                                                  int msgCountPerTopic) throws Exception {
-        List<MessageExtBrokerInner> msgs = new ArrayList<MessageExtBrokerInner>();
+        List<MessageExtBrokerInner> msgs = new ArrayList<>();
         for (int i = 0; i < topicCount; i++) {
             String realTopic = TOPIC + i;
             for (int j = 0; j < msgCountPerTopic; j++) {
@@ -201,7 +201,7 @@ protected List<MessageExtBrokerInner> putMsg(DefaultMessageStore master, int top
     }
 
     protected List<MessageExtBrokerInner> filtered(List<MessageExtBrokerInner> msgs, ConsumerFilterData filterData) {
-        List<MessageExtBrokerInner> filteredMsgs = new ArrayList<MessageExtBrokerInner>();
+        List<MessageExtBrokerInner> filteredMsgs = new ArrayList<>();
 
         for (MessageExtBrokerInner messageExtBrokerInner : msgs) {
 

File: broker/src/test/java/org/apache/rocketmq/broker/offset/ConsumerOffsetManagerTest.java
Patch:
@@ -33,7 +33,7 @@ public class ConsumerOffsetManagerTest {
     @Before
     public void init() {
         consumerOffsetManager = new ConsumerOffsetManager();
-        ConcurrentHashMap<String, ConcurrentMap<Integer, Long>> offsetTable = new ConcurrentHashMap<String, ConcurrentMap<Integer, Long>>(512);
+        ConcurrentHashMap<String, ConcurrentMap<Integer, Long>> offsetTable = new ConcurrentHashMap<>(512);
         offsetTable.put(KEY,new ConcurrentHashMap<Integer, Long>() {{
                 put(1,2L);
                 put(2,3L);

File: broker/src/test/java/org/apache/rocketmq/broker/processor/ReplyMessageProcessorTest.java
Patch:
@@ -121,7 +121,7 @@ private SendMessageRequestHeader createSendMessageRequestHeader() {
         requestHeader.setBornTimestamp(System.currentTimeMillis());
         requestHeader.setFlag(124);
         requestHeader.setReconsumeTimes(0);
-        Map<String, String> map = new HashMap<String, String>();
+        Map<String, String> map = new HashMap<>();
         map.put(MessageConst.PROPERTY_MESSAGE_REPLY_TO_CLIENT, "127.0.0.1");
         requestHeader.setProperties(MessageDecoder.messageProperties2String(map));
         return requestHeader;

File: broker/src/test/java/org/apache/rocketmq/broker/schedule/ScheduleMessageServiceTest.java
Patch:
@@ -219,7 +219,7 @@ public void testDeliverDelayedMessageTimerTask() throws Exception {
         // timer run maybe delay, then consumer message again
         // and wait offsetTable
         TimeUnit.SECONDS.sleep(15);
-        scheduleMessageService.buildRunningStats(new HashMap<String, String>());
+        scheduleMessageService.buildRunningStats(new HashMap<>());
 
         messageResult = getMessage(realQueueId, offset);
         // now,found the message

File: broker/src/test/java/org/apache/rocketmq/broker/topic/TopicQueueMappingManagerTest.java
Patch:
@@ -73,7 +73,7 @@ private void delete(TopicQueueMappingManager topicQueueMappingManager) throws Ex
     public void testEncodeDecode() throws Exception {
         Map<String, TopicQueueMappingDetail> mappingDetailMap = new HashMap<>();
         TopicQueueMappingManager topicQueueMappingManager = null;
-        Set<String> brokers = new HashSet<String>();
+        Set<String> brokers = new HashSet<>();
         brokers.add(BROKER1_NAME);
         {
             for (int i = 0; i < 10; i++) {

File: client/src/main/java/org/apache/rocketmq/client/ClientConfig.java
Patch:
@@ -125,7 +125,7 @@ public String withNamespace(String resource) {
     }
 
     public Set<String> withNamespace(Set<String> resourceSet) {
-        Set<String> resourceWithNamespace = new HashSet<String>();
+        Set<String> resourceWithNamespace = new HashSet<>();
         for (String resource : resourceSet) {
             resourceWithNamespace.add(withNamespace(resource));
         }
@@ -137,7 +137,7 @@ public String withoutNamespace(String resource) {
     }
 
     public Set<String> withoutNamespace(Set<String> resourceSet) {
-        Set<String> resourceWithoutNamespace = new HashSet<String>();
+        Set<String> resourceWithoutNamespace = new HashSet<>();
         for (String resource : resourceSet) {
             resourceWithoutNamespace.add(withoutNamespace(resource));
         }

File: client/src/main/java/org/apache/rocketmq/client/MQHelper.java
Patch:
@@ -60,7 +60,7 @@ public static void resetOffsetByTimestamp(
         try {
             mqs = consumer.fetchSubscribeMessageQueues(topic);
             if (mqs != null && !mqs.isEmpty()) {
-                TreeSet<MessageQueue> mqsNew = new TreeSet<MessageQueue>(mqs);
+                TreeSet<MessageQueue> mqsNew = new TreeSet<>(mqs);
                 for (MessageQueue mq : mqsNew) {
                     long offset = consumer.searchOffset(mq, timestamp);
                     if (offset >= 0) {

File: client/src/main/java/org/apache/rocketmq/client/common/ThreadLocalIndex.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Random;
 
 public class ThreadLocalIndex {
-    private final ThreadLocal<Integer> threadLocalIndex = new ThreadLocal<Integer>();
+    private final ThreadLocal<Integer> threadLocalIndex = new ThreadLocal<>();
     private final Random random = new Random();
     private final static int POSITIVE_MASK = 0x7FFFFFFF;
 

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPullConsumer.java
Patch:
@@ -76,7 +76,7 @@ public class DefaultMQPullConsumer extends ClientConfig implements MQPullConsume
     /**
      * Topic set you want to register
      */
-    private Set<String> registerTopics = new HashSet<String>();
+    private Set<String> registerTopics = new HashSet<>();
     /**
      * Queue allocation algorithm
      */

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumer.java
Patch:
@@ -142,7 +142,7 @@ public class DefaultMQPushConsumer extends ClientConfig implements MQPushConsume
     /**
      * Subscription relationship
      */
-    private Map<String /* topic */, String /* sub expression */> subscription = new HashMap<String, String>();
+    private Map<String /* topic */, String /* sub expression */> subscription = new HashMap<>();
 
     /**
      * Message listener
@@ -670,7 +670,7 @@ public Map<String, String> getSubscription() {
      */
     @Deprecated
     public void setSubscription(Map<String, String> subscription) {
-        Map<String, String> subscriptionWithNamespace = new HashMap<String, String>(subscription.size(), 1);
+        Map<String, String> subscriptionWithNamespace = new HashMap<>(subscription.size(), 1);
         for (Entry<String, String> topicEntry : subscription.entrySet()) {
             subscriptionWithNamespace.put(withNamespace(topicEntry.getKey()), topicEntry.getValue());
         }

File: client/src/main/java/org/apache/rocketmq/client/consumer/MQPullConsumerScheduleService.java
Patch:
@@ -41,11 +41,11 @@ public class MQPullConsumerScheduleService {
     private final InternalLogger log = ClientLogger.getLog();
     private final MessageQueueListener messageQueueListener = new MessageQueueListenerImpl();
     private final ConcurrentMap<MessageQueue, PullTaskImpl> taskTable =
-        new ConcurrentHashMap<MessageQueue, PullTaskImpl>();
+        new ConcurrentHashMap<>();
     private DefaultMQPullConsumer defaultMQPullConsumer;
     private int pullThreadNums = 20;
     private ConcurrentMap<String /* topic */, PullTaskCallback> callbackTable =
-        new ConcurrentHashMap<String, PullTaskCallback>();
+        new ConcurrentHashMap<>();
     private ScheduledThreadPoolExecutor scheduledThreadPoolExecutor;
 
     public MQPullConsumerScheduleService(final String consumerGroup) {

File: client/src/main/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueAveragely.java
Patch:
@@ -39,7 +39,7 @@ public AllocateMessageQueueAveragely(InternalLogger log) {
     public List<MessageQueue> allocate(String consumerGroup, String currentCID, List<MessageQueue> mqAll,
         List<String> cidAll) {
 
-        List<MessageQueue> result = new ArrayList<MessageQueue>();
+        List<MessageQueue> result = new ArrayList<>();
         if (!check(consumerGroup, currentCID, mqAll, cidAll)) {
             return result;
         }

File: client/src/main/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueAveragelyByCircle.java
Patch:
@@ -39,7 +39,7 @@ public AllocateMessageQueueAveragelyByCircle(InternalLogger log) {
     public List<MessageQueue> allocate(String consumerGroup, String currentCID, List<MessageQueue> mqAll,
         List<String> cidAll) {
 
-        List<MessageQueue> result = new ArrayList<MessageQueue>();
+        List<MessageQueue> result = new ArrayList<>();
         if (!check(consumerGroup, currentCID, mqAll, cidAll)) {
             return result;
         }

File: client/src/main/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueByMachineRoom.java
Patch:
@@ -31,15 +31,15 @@ public class AllocateMessageQueueByMachineRoom extends AbstractAllocateMessageQu
     public List<MessageQueue> allocate(String consumerGroup, String currentCID, List<MessageQueue> mqAll,
         List<String> cidAll) {
 
-        List<MessageQueue> result = new ArrayList<MessageQueue>();
+        List<MessageQueue> result = new ArrayList<>();
         if (!check(consumerGroup, currentCID, mqAll, cidAll)) {
             return result;
         }
         int currentIndex = cidAll.indexOf(currentCID);
         if (currentIndex < 0) {
             return result;
         }
-        List<MessageQueue> premqAll = new ArrayList<MessageQueue>();
+        List<MessageQueue> premqAll = new ArrayList<>();
         for (MessageQueue mq : mqAll) {
             String[] temp = mq.getBrokerName().split("@");
             if (temp.length == 2 && consumeridcs.contains(temp[0])) {

File: client/src/main/java/org/apache/rocketmq/client/consumer/store/LocalFileOffsetStore.java
Patch:
@@ -48,7 +48,7 @@ public class LocalFileOffsetStore implements OffsetStore {
     private final String groupName;
     private final String storePath;
     private ConcurrentMap<MessageQueue, AtomicLong> offsetTable =
-        new ConcurrentHashMap<MessageQueue, AtomicLong>();
+        new ConcurrentHashMap<>();
 
     public LocalFileOffsetStore(MQClientInstance mQClientFactory, String groupName) {
         this.mQClientFactory = mQClientFactory;
@@ -169,7 +169,7 @@ public void updateConsumeOffsetToBroker(final MessageQueue mq, final long offset
 
     @Override
     public Map<MessageQueue, Long> cloneOffsetTable(String topic) {
-        Map<MessageQueue, Long> cloneOffsetTable = new HashMap<MessageQueue, Long>(this.offsetTable.size(), 1);
+        Map<MessageQueue, Long> cloneOffsetTable = new HashMap<>(this.offsetTable.size(), 1);
         for (Map.Entry<MessageQueue, AtomicLong> entry : this.offsetTable.entrySet()) {
             MessageQueue mq = entry.getKey();
             if (!UtilAll.isBlank(topic) && !topic.equals(mq.getTopic())) {

File: client/src/main/java/org/apache/rocketmq/client/consumer/store/OffsetSerializeWrapper.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class OffsetSerializeWrapper extends RemotingSerializable {
     private ConcurrentMap<MessageQueue, AtomicLong> offsetTable =
-        new ConcurrentHashMap<MessageQueue, AtomicLong>();
+        new ConcurrentHashMap<>();
 
     public ConcurrentMap<MessageQueue, AtomicLong> getOffsetTable() {
         return offsetTable;

File: client/src/main/java/org/apache/rocketmq/client/consumer/store/RemoteBrokerOffsetStore.java
Patch:
@@ -46,7 +46,7 @@ public class RemoteBrokerOffsetStore implements OffsetStore {
     private final MQClientInstance mQClientFactory;
     private final String groupName;
     private ConcurrentMap<MessageQueue, AtomicLong> offsetTable =
-        new ConcurrentHashMap<MessageQueue, AtomicLong>();
+        new ConcurrentHashMap<>();
 
     public RemoteBrokerOffsetStore(MQClientInstance mQClientFactory, String groupName) {
         this.mQClientFactory = mQClientFactory;
@@ -118,7 +118,7 @@ public void persistAll(Set<MessageQueue> mqs) {
         if (null == mqs || mqs.isEmpty())
             return;
 
-        final HashSet<MessageQueue> unusedMQ = new HashSet<MessageQueue>();
+        final HashSet<MessageQueue> unusedMQ = new HashSet<>();
 
         for (Map.Entry<MessageQueue, AtomicLong> entry : this.offsetTable.entrySet()) {
             MessageQueue mq = entry.getKey();
@@ -176,7 +176,7 @@ public void removeOffset(MessageQueue mq) {
 
     @Override
     public Map<MessageQueue, Long> cloneOffsetTable(String topic) {
-        Map<MessageQueue, Long> cloneOffsetTable = new HashMap<MessageQueue, Long>(this.offsetTable.size(), 1);
+        Map<MessageQueue, Long> cloneOffsetTable = new HashMap<>(this.offsetTable.size(), 1);
         for (Map.Entry<MessageQueue, AtomicLong> entry : this.offsetTable.entrySet()) {
             MessageQueue mq = entry.getKey();
             if (!UtilAll.isBlank(topic) && !topic.equals(mq.getTopic())) {

File: client/src/main/java/org/apache/rocketmq/client/impl/ClientRemotingProcessor.java
Patch:
@@ -153,7 +153,7 @@ public RemotingCommand resetOffset(ChannelHandlerContext ctx,
         log.info("invoke reset offset operation from broker. brokerAddr={}, topic={}, group={}, timestamp={}",
             RemotingHelper.parseChannelRemoteAddr(ctx.channel()), requestHeader.getTopic(), requestHeader.getGroup(),
             requestHeader.getTimestamp());
-        Map<MessageQueue, Long> offsetTable = new HashMap<MessageQueue, Long>();
+        Map<MessageQueue, Long> offsetTable = new HashMap<>();
         if (request.getBody() != null) {
             ResetOffsetBody body = ResetOffsetBody.decode(request.getBody(), ResetOffsetBody.class);
             offsetTable = body.getOffsetTable();

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientManager.java
Patch:
@@ -30,7 +30,7 @@ public class MQClientManager {
     private static MQClientManager instance = new MQClientManager();
     private AtomicInteger factoryIndexGenerator = new AtomicInteger();
     private ConcurrentMap<String/* clientId */, MQClientInstance> factoryTable =
-        new ConcurrentHashMap<String, MQClientInstance>();
+        new ConcurrentHashMap<>();
 
     private MQClientManager() {
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/AssignedMessageQueue.java
Patch:
@@ -30,7 +30,7 @@ public class AssignedMessageQueue {
     private RebalanceImpl rebalanceImpl;
 
     public AssignedMessageQueue() {
-        assignedMessageQueueState = new ConcurrentHashMap<MessageQueue, MessageQueueState>();
+        assignedMessageQueueState = new ConcurrentHashMap<>();
     }
 
     public void setRebalanceImpl(RebalanceImpl rebalanceImpl) {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -72,7 +72,7 @@ public ConsumeMessageOrderlyService(DefaultMQPushConsumerImpl defaultMQPushConsu
 
         this.defaultMQPushConsumer = this.defaultMQPushConsumerImpl.getDefaultMQPushConsumer();
         this.consumerGroup = this.defaultMQPushConsumer.getConsumerGroup();
-        this.consumeRequestQueue = new LinkedBlockingQueue<Runnable>();
+        this.consumeRequestQueue = new LinkedBlockingQueue<>();
 
         String consumeThreadPrefix = null;
         if (consumerGroup.length() > 100) {
@@ -146,7 +146,7 @@ public ConsumeMessageDirectlyResult consumeMessageDirectly(MessageExt msg, Strin
         ConsumeMessageDirectlyResult result = new ConsumeMessageDirectlyResult();
         result.setOrder(true);
 
-        List<MessageExt> msgs = new ArrayList<MessageExt>();
+        List<MessageExt> msgs = new ArrayList<>();
         msgs.add(msg);
         MessageQueue mq = new MessageQueue();
         mq.setBrokerName(brokerName);
@@ -486,7 +486,7 @@ public void run() {
                                 consumeMessageContext.setMsgList(msgs);
                                 consumeMessageContext.setSuccess(false);
                                 // init the consume context type
-                                consumeMessageContext.setProps(new HashMap<String, String>());
+                                consumeMessageContext.setProps(new HashMap<>());
                                 ConsumeMessageOrderlyService.this.defaultMQPushConsumerImpl.executeHookBefore(consumeMessageContext);
                             }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessagePopOrderlyService.java
Patch:
@@ -54,7 +54,7 @@ public class ConsumeMessagePopOrderlyService implements ConsumeMessageService {
     private final DefaultMQPushConsumer defaultMQPushConsumer;
     private final MessageListenerOrderly messageListener;
     private final BlockingQueue<Runnable> consumeRequestQueue;
-    private final ConcurrentSet<ConsumeRequest> consumeRequestSet = new ConcurrentSet<ConsumeRequest>();
+    private final ConcurrentSet<ConsumeRequest> consumeRequestSet = new ConcurrentSet<>();
     private final ThreadPoolExecutor consumeExecutor;
     private final String consumerGroup;
     private final MessageQueueLock messageQueueLock = new MessageQueueLock();
@@ -69,7 +69,7 @@ public ConsumeMessagePopOrderlyService(DefaultMQPushConsumerImpl defaultMQPushCo
 
         this.defaultMQPushConsumer = this.defaultMQPushConsumerImpl.getDefaultMQPushConsumer();
         this.consumerGroup = this.defaultMQPushConsumer.getConsumerGroup();
-        this.consumeRequestQueue = new LinkedBlockingQueue<Runnable>();
+        this.consumeRequestQueue = new LinkedBlockingQueue<>();
 
         this.consumeExecutor = new ThreadPoolExecutor(
             this.defaultMQPushConsumer.getConsumeThreadMin(),
@@ -135,7 +135,7 @@ public ConsumeMessageDirectlyResult consumeMessageDirectly(MessageExt msg, Strin
         ConsumeMessageDirectlyResult result = new ConsumeMessageDirectlyResult();
         result.setOrder(true);
 
-        List<MessageExt> msgs = new ArrayList<MessageExt>();
+        List<MessageExt> msgs = new ArrayList<>();
         msgs.add(msg);
         MessageQueue mq = new MessageQueue();
         mq.setBrokerName(brokerName);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/MessageQueueLock.java
Patch:
@@ -25,7 +25,7 @@
  */
 public class MessageQueueLock {
     private ConcurrentMap<MessageQueue, ConcurrentMap<Integer, Object>> mqLockTable =
-        new ConcurrentHashMap<MessageQueue, ConcurrentMap<Integer, Object>>(32);
+        new ConcurrentHashMap<>(32);
 
     public Object fetchLockObject(final MessageQueue mq) {
         return fetchLockObject(mq, -1);
@@ -34,7 +34,7 @@ public Object fetchLockObject(final MessageQueue mq) {
     public Object fetchLockObject(final MessageQueue mq, final int shardingKeyIndex) {
         ConcurrentMap<Integer, Object> objMap = this.mqLockTable.get(mq);
         if (null == objMap) {
-            objMap = new ConcurrentHashMap<Integer, Object>(32);
+            objMap = new ConcurrentHashMap<>(32);
             ConcurrentMap<Integer, Object> prevObjMap = this.mqLockTable.putIfAbsent(mq, objMap);
             if (prevObjMap != null) {
                 objMap = prevObjMap;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ProcessQueue.java
Patch:
@@ -47,14 +47,14 @@ public class ProcessQueue {
     private final static long PULL_MAX_IDLE_TIME = Long.parseLong(System.getProperty("rocketmq.client.pull.pullMaxIdleTime", "120000"));
     private final InternalLogger log = ClientLogger.getLog();
     private final ReadWriteLock treeMapLock = new ReentrantReadWriteLock();
-    private final TreeMap<Long, MessageExt> msgTreeMap = new TreeMap<Long, MessageExt>();
+    private final TreeMap<Long, MessageExt> msgTreeMap = new TreeMap<>();
     private final AtomicLong msgCount = new AtomicLong();
     private final AtomicLong msgSize = new AtomicLong();
     private final Lock consumeLock = new ReentrantLock();
     /**
      * A subset of msgTreeMap, will only be used when orderly consume
      */
-    private final TreeMap<Long, MessageExt> consumingMsgOrderlyTreeMap = new TreeMap<Long, MessageExt>();
+    private final TreeMap<Long, MessageExt> consumingMsgOrderlyTreeMap = new TreeMap<>();
     private final AtomicLong tryUnlockTimes = new AtomicLong(0);
     private volatile long queueOffsetMax = 0L;
     private volatile boolean dropped = false;
@@ -303,7 +303,7 @@ public void makeMessageToConsumeAgain(List<MessageExt> msgs) {
     }
 
     public List<MessageExt> takeMessages(final int batchSize) {
-        List<MessageExt> result = new ArrayList<MessageExt>(batchSize);
+        List<MessageExt> result = new ArrayList<>(batchSize);
         final long now = System.currentTimeMillis();
         try {
             this.treeMapLock.writeLock().lockInterruptibly();

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/PullMessageService.java
Patch:
@@ -30,7 +30,7 @@
 
 public class PullMessageService extends ServiceThread {
     private final InternalLogger log = ClientLogger.getLog();
-    private final LinkedBlockingQueue<MessageRequest> messageRequestQueue = new LinkedBlockingQueue<MessageRequest>();
+    private final LinkedBlockingQueue<MessageRequest> messageRequestQueue = new LinkedBlockingQueue<>();
 
     private final MQClientInstance mQClientFactory;
     private final ScheduledExecutorService scheduledExecutorService = Executors

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/TopicPublishInfo.java
Patch:
@@ -26,7 +26,7 @@
 public class TopicPublishInfo {
     private boolean orderTopic = false;
     private boolean haveTopicRouterInfo = false;
-    private List<MessageQueue> messageQueueList = new ArrayList<MessageQueue>();
+    private List<MessageQueue> messageQueueList = new ArrayList<>();
     private volatile ThreadLocalIndex sendWhichQueue = new ThreadLocalIndex();
     private TopicRouteData topicRouteData;
 

File: client/src/main/java/org/apache/rocketmq/client/latency/LatencyFaultToleranceImpl.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.rocketmq.client.common.ThreadLocalIndex;
 
 public class LatencyFaultToleranceImpl implements LatencyFaultTolerance<String> {
-    private final ConcurrentHashMap<String, FaultItem> faultItemTable = new ConcurrentHashMap<String, FaultItem>(16);
+    private final ConcurrentHashMap<String, FaultItem> faultItemTable = new ConcurrentHashMap<>(16);
 
     private final ThreadLocalIndex whichItemWorst = new ThreadLocalIndex();
 
@@ -65,7 +65,7 @@ public void remove(final String name) {
     @Override
     public String pickOneAtLeast() {
         final Enumeration<FaultItem> elements = this.faultItemTable.elements();
-        List<FaultItem> tmpList = new LinkedList<FaultItem>();
+        List<FaultItem> tmpList = new LinkedList<>();
         while (elements.hasMoreElements()) {
             final FaultItem faultItem = elements.nextElement();
             tmpList.add(faultItem);

File: client/src/main/java/org/apache/rocketmq/client/producer/RequestFutureHolder.java
Patch:
@@ -38,16 +38,16 @@
 public class RequestFutureHolder {
     private static InternalLogger log = ClientLogger.getLog();
     private static final RequestFutureHolder INSTANCE = new RequestFutureHolder();
-    private ConcurrentHashMap<String, RequestResponseFuture> requestFutureTable = new ConcurrentHashMap<String, RequestResponseFuture>();
-    private final Set<DefaultMQProducerImpl> producerSet = new HashSet<DefaultMQProducerImpl>();
+    private ConcurrentHashMap<String, RequestResponseFuture> requestFutureTable = new ConcurrentHashMap<>();
+    private final Set<DefaultMQProducerImpl> producerSet = new HashSet<>();
     private ScheduledExecutorService scheduledExecutorService = null;
 
     public ConcurrentHashMap<String, RequestResponseFuture> getRequestFutureTable() {
         return requestFutureTable;
     }
 
     private void scanExpiredRequest() {
-        final List<RequestResponseFuture> rfList = new LinkedList<RequestResponseFuture>();
+        final List<RequestResponseFuture> rfList = new LinkedList<>();
         Iterator<Map.Entry<String, RequestResponseFuture>> it = requestFutureTable.entrySet().iterator();
         while (it.hasNext()) {
             Map.Entry<String, RequestResponseFuture> next = it.next();

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceTransferBean.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class TraceTransferBean {
     private String transData;
-    private Set<String> transKey = new HashSet<String>();
+    private Set<String> transKey = new HashSet<>();
 
     public String getTransData() {
         return transData;

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceView.java
Patch:
@@ -39,7 +39,7 @@ public class TraceView {
     private String status;
 
     public static List<TraceView> decodeFromTraceTransData(String key, MessageExt messageExt) {
-        List<TraceView> messageTraceViewList = new ArrayList<TraceView>();
+        List<TraceView> messageTraceViewList = new ArrayList<>();
         String messageBody = new String(messageExt.getBody(), StandardCharsets.UTF_8);
         if (messageBody == null || messageBody.length() <= 0) {
             return messageTraceViewList;

File: client/src/main/java/org/apache/rocketmq/client/trace/hook/ConsumeMessageOpenTracingHookImpl.java
Patch:
@@ -51,7 +51,7 @@ public void consumeMessageBefore(ConsumeMessageContext context) {
         if (context == null || context.getMsgList() == null || context.getMsgList().isEmpty()) {
             return;
         }
-        List<Span> spanList = new ArrayList<Span>();
+        List<Span> spanList = new ArrayList<>();
         for (MessageExt msg : context.getMsgList()) {
             if (msg == null) {
                 continue;

File: client/src/main/java/org/apache/rocketmq/client/trace/hook/ConsumeMessageTraceHookImpl.java
Patch:
@@ -54,7 +54,7 @@ public void consumeMessageBefore(ConsumeMessageContext context) {
         context.setMqTraceContext(traceContext);
         traceContext.setTraceType(TraceType.SubBefore);//
         traceContext.setGroupName(NamespaceUtil.withoutNamespace(context.getConsumerGroup()));//
-        List<TraceBean> beans = new ArrayList<TraceBean>();
+        List<TraceBean> beans = new ArrayList<>();
         for (MessageExt msg : context.getMsgList()) {
             if (msg == null) {
                 continue;

File: client/src/main/java/org/apache/rocketmq/client/trace/hook/EndTransactionTraceHookImpl.java
Patch:
@@ -53,7 +53,7 @@ public void endTransaction(EndTransactionContext context) {
         Message msg = context.getMessage();
         //build the context content of TuxeTraceContext
         TraceContext tuxeContext = new TraceContext();
-        tuxeContext.setTraceBeans(new ArrayList<TraceBean>(1));
+        tuxeContext.setTraceBeans(new ArrayList<>(1));
         tuxeContext.setTraceType(TraceType.EndTransaction);
         tuxeContext.setGroupName(NamespaceUtil.withoutNamespace(context.getProducerGroup()));
         //build the data bean object of message trace

File: client/src/main/java/org/apache/rocketmq/client/trace/hook/SendMessageTraceHookImpl.java
Patch:
@@ -48,7 +48,7 @@ public void sendMessageBefore(SendMessageContext context) {
         }
         //build the context content of TraceContext
         TraceContext traceContext = new TraceContext();
-        traceContext.setTraceBeans(new ArrayList<TraceBean>(1));
+        traceContext.setTraceBeans(new ArrayList<>(1));
         context.setMqTraceContext(traceContext);
         traceContext.setTraceType(TraceType.Pub);
         traceContext.setGroupName(NamespaceUtil.withoutNamespace(context.getProducerGroup()));

File: client/src/test/java/org/apache/rocketmq/client/common/ThreadLocalIndexTest.java
Patch:
@@ -41,7 +41,7 @@ public void testIncrementAndGet2() throws Exception {
     public void testIncrementAndGet3() throws Exception {
         ThreadLocalIndex localIndex = new ThreadLocalIndex();
         Field threadLocalIndexField = ThreadLocalIndex.class.getDeclaredField("threadLocalIndex");
-        ThreadLocal<Integer> mockThreadLocal = new ThreadLocal<Integer>();
+        ThreadLocal<Integer> mockThreadLocal = new ThreadLocal<>();
         mockThreadLocal.set(Integer.MAX_VALUE);
 
         threadLocalIndexField.setAccessible(true);

File: client/src/test/java/org/apache/rocketmq/client/consumer/DefaultMQPullConsumerTest.java
Patch:
@@ -106,7 +106,7 @@ public Object answer(InvocationOnMock mock) throws Throwable {
         assertThat(pullResult.getNextBeginOffset()).isEqualTo(1024 + 1);
         assertThat(pullResult.getMinOffset()).isEqualTo(123);
         assertThat(pullResult.getMaxOffset()).isEqualTo(2048);
-        assertThat(pullResult.getMsgFoundList()).isEqualTo(new ArrayList<Object>());
+        assertThat(pullResult.getMsgFoundList()).isEqualTo(new ArrayList<>());
     }
 
     @Test
@@ -115,7 +115,7 @@ public void testPullMessage_NotFound() throws Exception {
             @Override
             public Object answer(InvocationOnMock mock) throws Throwable {
                 PullMessageRequestHeader requestHeader = mock.getArgument(1);
-                return createPullResult(requestHeader, PullStatus.NO_NEW_MSG, new ArrayList<MessageExt>());
+                return createPullResult(requestHeader, PullStatus.NO_NEW_MSG, new ArrayList<>());
             }
         }).when(mQClientAPIImpl).pullMessage(anyString(), any(PullMessageRequestHeader.class), anyLong(), any(CommunicationMode.class), nullable(PullCallback.class));
 
@@ -147,7 +147,7 @@ public void onSuccess(PullResult pullResult) {
                 assertThat(pullResult.getNextBeginOffset()).isEqualTo(1024 + 1);
                 assertThat(pullResult.getMinOffset()).isEqualTo(123);
                 assertThat(pullResult.getMaxOffset()).isEqualTo(2048);
-                assertThat(pullResult.getMsgFoundList()).isEqualTo(new ArrayList<Object>());
+                assertThat(pullResult.getMsgFoundList()).isEqualTo(new ArrayList<>());
             }
 
             @Override

File: client/src/test/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumerTest.java
Patch:
@@ -163,7 +163,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
         field.setAccessible(true);
         field.set(null, true);
 
-        Set<MessageQueue> messageQueueSet = new HashSet<MessageQueue>();
+        Set<MessageQueue> messageQueueSet = new HashSet<>();
         messageQueueSet.add(createPullRequest().getMessageQueue());
         pushConsumerImpl.updateTopicSubscribeInfo(topic, messageQueueSet);
 
@@ -212,7 +212,7 @@ public void testStart_OffsetShouldNotNUllAfterStart() {
     @Test
     public void testPullMessage_Success() throws InterruptedException, RemotingException, MQBrokerException {
         final CountDownLatch countDownLatch = new CountDownLatch(1);
-        final AtomicReference<MessageExt> messageAtomic = new AtomicReference<MessageExt>();
+        final AtomicReference<MessageExt> messageAtomic = new AtomicReference<>();
         pushConsumer.getDefaultMQPushConsumerImpl().setConsumeMessageService(new ConsumeMessageConcurrentlyService(pushConsumer.getDefaultMQPushConsumerImpl(), new MessageListenerConcurrently() {
             @Override
             public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
@@ -235,7 +235,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
     @Test(timeout = 20000)
     public void testPullMessage_SuccessWithOrderlyService() throws Exception {
         final CountDownLatch countDownLatch = new CountDownLatch(1);
-        final AtomicReference<MessageExt> messageAtomic = new AtomicReference<MessageExt>();
+        final AtomicReference<MessageExt> messageAtomic = new AtomicReference<>();
 
         MessageListenerOrderly listenerOrderly = new MessageListenerOrderly() {
             @Override

File: client/src/test/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueAveragelyByCircleTest.java
Patch:
@@ -33,7 +33,7 @@ public void testAllocateMessageQueueAveragelyByCircle() {
         List<MessageQueue> allocateQueues = new AllocateMessageQueueAveragelyByCircle().allocate("", "CID_PREFIX", messageQueueList, consumerIdList);
         Assert.assertEquals(0, allocateQueues.size());
 
-        Map<String, int[]> consumerAllocateQueue = new HashMap<String, int[]>(consumerIdList.size());
+        Map<String, int[]> consumerAllocateQueue = new HashMap<>(consumerIdList.size());
         for (String consumerId : consumerIdList) {
             List<MessageQueue> queues = new AllocateMessageQueueAveragelyByCircle().allocate("", consumerId, messageQueueList, consumerIdList);
             int[] queueIds = new int[queues.size()];
@@ -49,15 +49,15 @@ public void testAllocateMessageQueueAveragelyByCircle() {
     }
 
     private List<String> createConsumerIdList(int size) {
-        List<String> consumerIdList = new ArrayList<String>(size);
+        List<String> consumerIdList = new ArrayList<>(size);
         for (int i = 0; i < size; i++) {
             consumerIdList.add("CID_PREFIX" + i);
         }
         return consumerIdList;
     }
 
     private List<MessageQueue> createMessageQueueList(int size) {
-        List<MessageQueue> messageQueueList = new ArrayList<MessageQueue>(size);
+        List<MessageQueue> messageQueueList = new ArrayList<>(size);
         for (int i = 0; i < size; i++) {
             MessageQueue mq = new MessageQueue("topic", "brokerName", i);
             messageQueueList.add(mq);

File: client/src/test/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueAveragelyTest.java
Patch:
@@ -37,15 +37,15 @@ public void testAllocateMessageQueueAveragely() {
     }
 
     private List<String> createConsumerIdList(int size) {
-        List<String> consumerIdList = new ArrayList<String>(size);
+        List<String> consumerIdList = new ArrayList<>(size);
         for (int i = 0; i < size; i++) {
             consumerIdList.add("CID_PREFIX" + i);
         }
         return consumerIdList;
     }
 
     private List<MessageQueue> createMessageQueueList(int size) {
-        List<MessageQueue> messageQueueList = new ArrayList<MessageQueue>(size);
+        List<MessageQueue> messageQueueList = new ArrayList<>(size);
         for (int i = 0; i < size; i++) {
             MessageQueue mq = new MessageQueue("topic", "brokerName", i);
             messageQueueList.add(mq);

File: client/src/test/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueByConfigTest.java
Patch:
@@ -32,7 +32,7 @@ public void testAllocateMessageQueueByConfig() {
         AllocateMessageQueueByConfig allocateStrategy = new AllocateMessageQueueByConfig();
         allocateStrategy.setMessageQueueList(messageQueueList);
 
-        Map<String, int[]> consumerAllocateQueue = new HashMap<String, int[]>(consumerIdList.size());
+        Map<String, int[]> consumerAllocateQueue = new HashMap<>(consumerIdList.size());
         for (String consumerId : consumerIdList) {
             List<MessageQueue> queues = allocateStrategy.allocate("", consumerId, messageQueueList, consumerIdList);
             int[] queueIds = new int[queues.size()];
@@ -46,15 +46,15 @@ public void testAllocateMessageQueueByConfig() {
     }
 
     private List<String> createConsumerIdList(int size) {
-        List<String> consumerIdList = new ArrayList<String>(size);
+        List<String> consumerIdList = new ArrayList<>(size);
         for (int i = 0; i < size; i++) {
             consumerIdList.add("CID_PREFIX" + i);
         }
         return consumerIdList;
     }
 
     private List<MessageQueue> createMessageQueueList(int size) {
-        List<MessageQueue> messageQueueList = new ArrayList<MessageQueue>(size);
+        List<MessageQueue> messageQueueList = new ArrayList<>(size);
         for (int i = 0; i < size; i++) {
             MessageQueue mq = new MessageQueue("topic", "brokerName", i);
             messageQueueList.add(mq);

File: client/src/test/java/org/apache/rocketmq/client/consumer/store/LocalFileOffsetStoreTest.java
Patch:
@@ -71,7 +71,7 @@ public void testReadOffset_FromStore() throws Exception {
         offsetStore.updateOffset(messageQueue, 1024, false);
         assertThat(offsetStore.readOffset(messageQueue, ReadOffsetType.READ_FROM_STORE)).isEqualTo(-1);
 
-        offsetStore.persistAll(new HashSet<MessageQueue>(Collections.singletonList(messageQueue)));
+        offsetStore.persistAll(new HashSet<>(Collections.singletonList(messageQueue)));
         assertThat(offsetStore.readOffset(messageQueue, ReadOffsetType.READ_FROM_STORE)).isEqualTo(1024);
     }
 

File: client/src/test/java/org/apache/rocketmq/client/consumer/store/RemoteBrokerOffsetStoreTest.java
Patch:
@@ -129,7 +129,7 @@ public Object answer(InvocationOnMock mock) throws Throwable {
         assertThat(offsetStore.readOffset(messageQueue, ReadOffsetType.READ_FROM_STORE)).isEqualTo(1023);
 
         offsetStore.updateOffset(messageQueue, 1025, false);
-        offsetStore.persistAll(new HashSet<MessageQueue>(Collections.singletonList(messageQueue)));
+        offsetStore.persistAll(new HashSet<>(Collections.singletonList(messageQueue)));
         assertThat(offsetStore.readOffset(messageQueue, ReadOffsetType.READ_FROM_STORE)).isEqualTo(1025);
     }
 

File: client/src/test/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyServiceTest.java
Patch:
@@ -155,7 +155,7 @@ public PullResult answer(InvocationOnMock mock) throws Throwable {
 
         doReturn(new FindBrokerResult("127.0.0.1:10912", false)).when(mQClientFactory).findBrokerAddressInSubscribe(anyString(), anyLong(), anyBoolean());
         doReturn(false).when(mQClientFactory).updateTopicRouteInfoFromNameServer(anyString());
-        Set<MessageQueue> messageQueueSet = new HashSet<MessageQueue>();
+        Set<MessageQueue> messageQueueSet = new HashSet<>();
         messageQueueSet.add(createPullRequest().getMessageQueue());
         pushConsumer.getDefaultMQPushConsumerImpl().updateTopicSubscribeInfo(topic, messageQueueSet);
         pushConsumer.start();
@@ -164,7 +164,7 @@ public PullResult answer(InvocationOnMock mock) throws Throwable {
     @Test
     public void testPullMessage_ConsumeSuccess() throws InterruptedException, RemotingException, MQBrokerException, NoSuchFieldException,Exception {
         final CountDownLatch countDownLatch = new CountDownLatch(1);
-        final AtomicReference<MessageExt> messageAtomic = new AtomicReference<MessageExt>();
+        final AtomicReference<MessageExt> messageAtomic = new AtomicReference<>();
 
         ConsumeMessageConcurrentlyService  normalServie = new ConsumeMessageConcurrentlyService(pushConsumer.getDefaultMQPushConsumerImpl(), new MessageListenerConcurrently() {
             @Override
@@ -235,7 +235,7 @@ private PullResultExt createPullResult(PullMessageRequestHeader requestHeader, P
     @Test
     public void testConsumeThreadName() throws Exception {
         final CountDownLatch countDownLatch = new CountDownLatch(1);
-        final AtomicReference<String> consumeThreadName = new AtomicReference<String>();
+        final AtomicReference<String> consumeThreadName = new AtomicReference<>();
 
         StringBuilder consumeGroup2 = new StringBuilder();
         for (int i = 0; i < 101; i++) {

File: client/src/test/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyServiceTest.java
Patch:
@@ -152,7 +152,7 @@ public PullResult answer(InvocationOnMock mock) throws Throwable {
 
         doReturn(new FindBrokerResult("127.0.0.1:10912", false)).when(mQClientFactory).findBrokerAddressInSubscribe(anyString(), anyLong(), anyBoolean());
         doReturn(false).when(mQClientFactory).updateTopicRouteInfoFromNameServer(anyString());
-        Set<MessageQueue> messageQueueSet = new HashSet<MessageQueue>();
+        Set<MessageQueue> messageQueueSet = new HashSet<>();
         messageQueueSet.add(createPullRequest().getMessageQueue());
         pushConsumer.getDefaultMQPushConsumerImpl().updateTopicSubscribeInfo(topic, messageQueueSet);
         pushConsumer.start();
@@ -202,7 +202,7 @@ public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs, ConsumeOrderly
     @Test
     public void testConsumeThreadName() throws Exception {
         final CountDownLatch countDownLatch = new CountDownLatch(1);
-        final AtomicReference<String> consumeThreadName = new AtomicReference<String>();
+        final AtomicReference<String> consumeThreadName = new AtomicReference<>();
 
         StringBuilder consumeGroup2 = new StringBuilder();
         for (int i = 0; i < 101; i++) {

File: client/src/test/java/org/apache/rocketmq/client/impl/consumer/ProcessQueueTest.java
Patch:
@@ -95,7 +95,7 @@ private List<MessageExt> createMessageList() {
     }
 
     private List<MessageExt> createMessageList(int count) {
-        List<MessageExt> messageExtList = new ArrayList<MessageExt>();
+        List<MessageExt> messageExtList = new ArrayList<>();
         for (int i = 0; i < count; i++) {
             MessageExt messageExt = new MessageExt();
             messageExt.setQueueOffset(i);

File: client/src/test/java/org/apache/rocketmq/client/impl/consumer/RebalancePushImplTest.java
Patch:
@@ -78,7 +78,7 @@ public void testMessageQueueChanged_CountThreshold() {
 
         // Just set pullThresholdForQueue
         defaultMQPushConsumer.getDefaultMQPushConsumer().setPullThresholdForQueue(1024);
-        Set<MessageQueue> allocateResultSet = new HashSet<MessageQueue>();
+        Set<MessageQueue> allocateResultSet = new HashSet<>();
         allocateResultSet.add(new MessageQueue(topic, "BrokerA", 0));
         allocateResultSet.add(new MessageQueue(topic, "BrokerA", 1));
         doRebalanceForcibly(rebalancePush, allocateResultSet);
@@ -119,7 +119,7 @@ public void testMessageQueueChanged_SizeThreshold() {
 
         // Just set pullThresholdSizeForQueue
         defaultMQPushConsumer.getDefaultMQPushConsumer().setPullThresholdSizeForQueue(1024);
-        Set<MessageQueue> allocateResultSet = new HashSet<MessageQueue>();
+        Set<MessageQueue> allocateResultSet = new HashSet<>();
         allocateResultSet.add(new MessageQueue(topic, "BrokerA", 0));
         allocateResultSet.add(new MessageQueue(topic, "BrokerA", 1));
         doRebalanceForcibly(rebalancePush, allocateResultSet);
@@ -144,7 +144,7 @@ public void testMessageQueueChanged_ConsumerRuntimeInfo() throws MQClientExcepti
 
         defaultMQPushConsumer.getDefaultMQPushConsumer().setPullThresholdSizeForQueue(1024);
         defaultMQPushConsumer.getDefaultMQPushConsumer().setPullThresholdForQueue(1024);
-        Set<MessageQueue> allocateResultSet = new HashSet<MessageQueue>();
+        Set<MessageQueue> allocateResultSet = new HashSet<>();
         allocateResultSet.add(new MessageQueue(topic, "BrokerA", 0));
         allocateResultSet.add(new MessageQueue(topic, "BrokerA", 1));
         doRebalanceForcibly(rebalancePush, allocateResultSet);

File: client/src/test/java/org/apache/rocketmq/client/producer/selector/SelectMessageQueueByHashTest.java
Patch:
@@ -34,7 +34,7 @@ public void testSelect() throws Exception {
 
         Message message = new Message(topic, new byte[] {});
 
-        List<MessageQueue> messageQueues = new ArrayList<MessageQueue>();
+        List<MessageQueue> messageQueues = new ArrayList<>();
         for (int i = 0; i < 10; i++) {
             MessageQueue messageQueue = new MessageQueue(topic, "DefaultBroker", i);
             messageQueues.add(messageQueue);

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQConsumerWithOpenTracingTest.java
Patch:
@@ -160,7 +160,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
 
         doReturn(new FindBrokerResult("127.0.0.1:10911", false)).when(mQClientFactory).findBrokerAddressInSubscribe(anyString(), anyLong(), anyBoolean());
 
-        Set<MessageQueue> messageQueueSet = new HashSet<MessageQueue>();
+        Set<MessageQueue> messageQueueSet = new HashSet<>();
         messageQueueSet.add(createPullRequest().getMessageQueue());
         pushConsumerImpl.updateTopicSubscribeInfo(topic, messageQueueSet);
 
@@ -176,7 +176,7 @@ public void terminate() {
     @Test
     public void testPullMessage_WithTrace_Success() throws InterruptedException, RemotingException, MQBrokerException, MQClientException {
         final CountDownLatch countDownLatch = new CountDownLatch(1);
-        final AtomicReference<MessageExt> messageAtomic = new AtomicReference<MessageExt>();
+        final AtomicReference<MessageExt> messageAtomic = new AtomicReference<>();
         pushConsumer.getDefaultMQPushConsumerImpl().setConsumeMessageService(new ConsumeMessageConcurrentlyService(pushConsumer.getDefaultMQPushConsumerImpl(), new MessageListenerConcurrently() {
             @Override
             public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,

File: common/src/main/java/org/apache/rocketmq/common/Configuration.java
Patch:
@@ -33,7 +33,7 @@ public class Configuration {
 
     private final InternalLogger log;
 
-    private List<Object> configObjectList = new ArrayList<Object>(4);
+    private List<Object> configObjectList = new ArrayList<>(4);
     private String storePath;
     private boolean storePathFromConfig = false;
     private Object storePathObject;

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -372,7 +372,7 @@ public static boolean isPropertyValid(Properties props, String key, Predicate<St
     }
 
     public static List<String> getLocalInetAddress() {
-        List<String> inetAddressList = new ArrayList<String>();
+        List<String> inetAddressList = new ArrayList<>();
         try {
             Enumeration<NetworkInterface> enumeration = NetworkInterface.getNetworkInterfaces();
             while (enumeration.hasMoreElements()) {
@@ -407,7 +407,7 @@ private static String localhost() {
 
     //Reverse logic comparing to RemotingUtil method, consider refactor in RocketMQ 5.0
     public static String getLocalhostByNetworkInterface() throws SocketException {
-        List<String> candidatesHost = new ArrayList<String>();
+        List<String> candidatesHost = new ArrayList<>();
         Enumeration<NetworkInterface> enumeration = NetworkInterface.getNetworkInterfaces();
 
         while (enumeration.hasMoreElements()) {

File: common/src/main/java/org/apache/rocketmq/common/admin/ConsumeStats.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
 public class ConsumeStats extends RemotingSerializable {
-    private Map<MessageQueue, OffsetWrapper> offsetTable = new ConcurrentHashMap<MessageQueue, OffsetWrapper>();
+    private Map<MessageQueue, OffsetWrapper> offsetTable = new ConcurrentHashMap<>();
     private double consumeTps = 0;
 
     public long computeTotalDiff() {

File: common/src/main/java/org/apache/rocketmq/common/admin/TopicStatsTable.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
 public class TopicStatsTable extends RemotingSerializable {
-    private Map<MessageQueue, TopicOffset> offsetTable = new ConcurrentHashMap<MessageQueue, TopicOffset>();
+    private Map<MessageQueue, TopicOffset> offsetTable = new ConcurrentHashMap<>();
 
     public Map<MessageQueue, TopicOffset> getOffsetTable() {
         return offsetTable;

File: common/src/main/java/org/apache/rocketmq/common/consistenthash/ConsistentHashRouter.java
Patch:
@@ -30,7 +30,7 @@
  * algorithm
  */
 public class ConsistentHashRouter<T extends Node> {
-    private final SortedMap<Long, VirtualNode<T>> ring = new TreeMap<Long, VirtualNode<T>>();
+    private final SortedMap<Long, VirtualNode<T>> ring = new TreeMap<>();
     private final HashFunction hashFunction;
 
     public ConsistentHashRouter(Collection<T> pNodes, int vNodeCount) {
@@ -65,7 +65,7 @@ public void addNode(T pNode, int vNodeCount) {
             throw new IllegalArgumentException("illegal virtual node counts :" + vNodeCount);
         int existingReplicas = getExistingReplicas(pNode);
         for (int i = 0; i < vNodeCount; i++) {
-            VirtualNode<T> vNode = new VirtualNode<T>(pNode, i + existingReplicas);
+            VirtualNode<T> vNode = new VirtualNode<>(pNode, i + existingReplicas);
             ring.put(hashFunction.hash(vNode.getKey()), vNode);
         }
     }

File: common/src/main/java/org/apache/rocketmq/common/filter/impl/PolishExpr.java
Patch:
@@ -38,8 +38,8 @@ public static List<Op> reversePolish(String expression) {
      * @return the compute result of Shunting-yard algorithm
      */
     public static List<Op> reversePolish(List<Op> tokens) {
-        List<Op> segments = new ArrayList<Op>();
-        Stack<Operator> operatorStack = new Stack<Operator>();
+        List<Op> segments = new ArrayList<>();
+        Stack<Operator> operatorStack = new Stack<>();
 
         for (int i = 0; i < tokens.size(); i++) {
             Op token = tokens.get(i);
@@ -87,7 +87,7 @@ public static List<Op> reversePolish(List<Op> tokens) {
      * @throws Exception
      */
     private static List<Op> participle(String expression) {
-        List<Op> segments = new ArrayList<Op>();
+        List<Op> segments = new ArrayList<>();
 
         int size = expression.length();
         int wordStartIndex = -1;

File: common/src/main/java/org/apache/rocketmq/common/message/Message.java
Patch:
@@ -68,7 +68,7 @@ public void setKeys(String keys) {
 
     void putProperty(final String name, final String value) {
         if (null == this.properties) {
-            this.properties = new HashMap<String, String>();
+            this.properties = new HashMap<>();
         }
 
         this.properties.put(name, value);
@@ -102,7 +102,7 @@ public String getUserProperty(final String name) {
 
     public String getProperty(final String name) {
         if (null == this.properties) {
-            this.properties = new HashMap<String, String>();
+            this.properties = new HashMap<>();
         }
 
         return this.properties.get(name);

File: common/src/main/java/org/apache/rocketmq/common/message/MessageBatch.java
Patch:
@@ -42,7 +42,7 @@ public Iterator<Message> iterator() {
     public static MessageBatch generateFromList(Collection<? extends Message> messages) {
         assert messages != null;
         assert messages.size() > 0;
-        List<Message> messageList = new ArrayList<Message>(messages.size());
+        List<Message> messageList = new ArrayList<>(messages.size());
         Message first = null;
         for (Message message : messages) {
             if (message.getDelayTimeLevel() > 0) {

File: common/src/main/java/org/apache/rocketmq/common/namesrv/DefaultTopAddressing.java
Patch:
@@ -76,7 +76,7 @@ private static String clearNewLine(final String str) {
     private List<TopAddressing> loadCustomTopAddressing() {
         ServiceLoader<TopAddressing> serviceLoader = ServiceLoader.load(TopAddressing.class);
         Iterator<TopAddressing> iterator = serviceLoader.iterator();
-        List<TopAddressing> topAddressingList = new ArrayList<TopAddressing>();
+        List<TopAddressing> topAddressingList = new ArrayList<>();
         if (iterator.hasNext()) {
             topAddressingList.add(iterator.next());
         }

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/BrokerMemberGroup.java
Patch:
@@ -30,13 +30,13 @@ public class BrokerMemberGroup extends RemotingSerializable {
 
     // Provide default constructor for serializer
     public BrokerMemberGroup() {
-        this.brokerAddrs = new HashMap<Long, String>();
+        this.brokerAddrs = new HashMap<>();
     }
 
     public BrokerMemberGroup(final String cluster, final String brokerName) {
         this.cluster = cluster;
         this.brokerName = brokerName;
-        this.brokerAddrs = new HashMap<Long, String>();
+        this.brokerAddrs = new HashMap<>();
     }
 
     public long minimumBrokerId() {

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/ClusterInfo.java
Patch:
@@ -46,7 +46,7 @@ public void setClusterAddrTable(Map<String, Set<String>> clusterAddrTable) {
     }
 
     public String[] retrieveAllAddrByCluster(String cluster) {
-        List<String> addrs = new ArrayList<String>();
+        List<String> addrs = new ArrayList<>();
         if (clusterAddrTable.containsKey(cluster)) {
             Set<String> brokerNames = clusterAddrTable.get(cluster);
             for (String brokerName : brokerNames) {

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/ConsumeByWho.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
 public class ConsumeByWho extends RemotingSerializable {
-    private HashSet<String> consumedGroup = new HashSet<String>();
-    private HashSet<String> notConsumedGroup = new HashSet<String>();
+    private HashSet<String> consumedGroup = new HashSet<>();
+    private HashSet<String> notConsumedGroup = new HashSet<>();
     private String topic;
     private int queueId;
     private long offset;

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/ConsumeStatsList.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
 public class ConsumeStatsList extends RemotingSerializable {
-    private List<Map<String/*subscriptionGroupName*/, List<ConsumeStats>>> consumeStatsList = new ArrayList<Map<String/*subscriptionGroupName*/, List<ConsumeStats>>>();
+    private List<Map<String/*subscriptionGroupName*/, List<ConsumeStats>>> consumeStatsList = new ArrayList<>();
     private String brokerAddr;
     private long totalDiff;
 

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/ConsumerConnection.java
Patch:
@@ -27,9 +27,9 @@
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
 public class ConsumerConnection extends RemotingSerializable {
-    private HashSet<Connection> connectionSet = new HashSet<Connection>();
+    private HashSet<Connection> connectionSet = new HashSet<>();
     private ConcurrentMap<String/* Topic */, SubscriptionData> subscriptionTable =
-        new ConcurrentHashMap<String, SubscriptionData>();
+        new ConcurrentHashMap<>();
     private ConsumeType consumeType;
     private MessageModel messageModel;
     private ConsumeFromWhere consumeFromWhere;

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/ConsumerOffsetSerializeWrapper.java
Patch:
@@ -24,7 +24,7 @@
 
 public class ConsumerOffsetSerializeWrapper extends RemotingSerializable {
     private ConcurrentMap<String/* topic@group */, ConcurrentMap<Integer, Long>> offsetTable =
-        new ConcurrentHashMap<String, ConcurrentMap<Integer, Long>>(512);
+        new ConcurrentHashMap<>(512);
     private DataVersion dataVersion;
 
     public ConcurrentMap<String, ConcurrentMap<Integer, Long>> getOffsetTable() {

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/GetConsumerStatusBody.java
Patch:
@@ -24,9 +24,9 @@
 
 @Deprecated
 public class GetConsumerStatusBody extends RemotingSerializable {
-    private Map<MessageQueue, Long> messageQueueTable = new HashMap<MessageQueue, Long>();
+    private Map<MessageQueue, Long> messageQueueTable = new HashMap<>();
     private Map<String, Map<MessageQueue, Long>> consumerTable =
-        new HashMap<String, Map<MessageQueue, Long>>();
+        new HashMap<>();
 
     public Map<MessageQueue, Long> getMessageQueueTable() {
         return messageQueueTable;

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/GetRemoteClientConfigBody.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.List;
 
 public class GetRemoteClientConfigBody extends RemotingSerializable {
-    private List<String> keys = new ArrayList<String>();
+    private List<String> keys = new ArrayList<>();
 
     public List<String> getKeys() {
         return keys;

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/GroupList.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
 public class GroupList extends RemotingSerializable {
-    private HashSet<String> groupList = new HashSet<String>();
+    private HashSet<String> groupList = new HashSet<>();
 
     public HashSet<String> getGroupList() {
         return groupList;

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/HARuntimeInfo.java
Patch:
@@ -27,7 +27,7 @@ public class HARuntimeInfo extends RemotingSerializable {
     private boolean master;
     private long masterCommitLogMaxOffset;
     private int inSyncSlaveNums;
-    private List<HAConnectionRuntimeInfo> haConnectionInfo = new ArrayList<HARuntimeInfo.HAConnectionRuntimeInfo>();
+    private List<HAConnectionRuntimeInfo> haConnectionInfo = new ArrayList<>();
     private HAClientRuntimeInfo haClientRuntimeInfo = new HAClientRuntimeInfo();
 
     public boolean isMaster() {

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/KVTable.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
 public class KVTable extends RemotingSerializable {
-    private HashMap<String, String> table = new HashMap<String, String>();
+    private HashMap<String, String> table = new HashMap<>();
 
     public HashMap<String, String> getTable() {
         return table;

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/LockBatchRequestBody.java
Patch:
@@ -26,7 +26,7 @@ public class LockBatchRequestBody extends RemotingSerializable {
     private String consumerGroup;
     private String clientId;
     private boolean onlyThisBroker = false;
-    private Set<MessageQueue> mqSet = new HashSet<MessageQueue>();
+    private Set<MessageQueue> mqSet = new HashSet<>();
 
     public String getConsumerGroup() {
         return consumerGroup;

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/LockBatchResponseBody.java
Patch:
@@ -24,7 +24,7 @@
 
 public class LockBatchResponseBody extends RemotingSerializable {
 
-    private Set<MessageQueue> lockOKMQSet = new HashSet<MessageQueue>();
+    private Set<MessageQueue> lockOKMQSet = new HashSet<>();
 
     public Set<MessageQueue> getLockOKMQSet() {
         return lockOKMQSet;

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/MessageRequestModeSerializeWrapper.java
Patch:
@@ -23,7 +23,7 @@
 public class MessageRequestModeSerializeWrapper extends RemotingSerializable {
 
     private ConcurrentHashMap<String/* Topic */, ConcurrentHashMap<String/* Group */, SetMessageRequestModeRequestBody>>
-            messageRequestModeMap = new ConcurrentHashMap<String, ConcurrentHashMap<String, SetMessageRequestModeRequestBody>>();
+            messageRequestModeMap = new ConcurrentHashMap<>();
 
     public ConcurrentHashMap<String, ConcurrentHashMap<String, SetMessageRequestModeRequestBody>> getMessageRequestModeMap() {
         return messageRequestModeMap;

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/ProducerConnection.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
 public class ProducerConnection extends RemotingSerializable {
-    private HashSet<Connection> connectionSet = new HashSet<Connection>();
+    private HashSet<Connection> connectionSet = new HashSet<>();
 
     public HashSet<Connection> getConnectionSet() {
         return connectionSet;

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/QueryConsumeTimeSpanBody.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
 public class QueryConsumeTimeSpanBody extends RemotingSerializable {
-    List<QueueTimeSpan> consumeTimeSpanSet = new ArrayList<QueueTimeSpan>();
+    List<QueueTimeSpan> consumeTimeSpanSet = new ArrayList<>();
 
     public List<QueueTimeSpan> getConsumeTimeSpanSet() {
         return consumeTimeSpanSet;

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/QueryCorrectionOffsetBody.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
 public class QueryCorrectionOffsetBody extends RemotingSerializable {
-    private Map<Integer, Long> correctionOffsets = new HashMap<Integer, Long>();
+    private Map<Integer, Long> correctionOffsets = new HashMap<>();
 
     public Map<Integer, Long> getCorrectionOffsets() {
         return correctionOffsets;

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/SubscriptionGroupWrapper.java
Patch:
@@ -25,7 +25,7 @@
 
 public class SubscriptionGroupWrapper extends RemotingSerializable {
     private ConcurrentMap<String, SubscriptionGroupConfig> subscriptionGroupTable =
-        new ConcurrentHashMap<String, SubscriptionGroupConfig>(1024);
+        new ConcurrentHashMap<>(1024);
     private DataVersion dataVersion = new DataVersion();
 
     public ConcurrentMap<String, SubscriptionGroupConfig> getSubscriptionGroupTable() {

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/TopicConfigAndMappingSerializeWrapper.java
Patch:
@@ -25,9 +25,9 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 public class TopicConfigAndMappingSerializeWrapper extends TopicConfigSerializeWrapper {
-    private Map<String/* topic */, TopicQueueMappingInfo> topicQueueMappingInfoMap = new ConcurrentHashMap<String, TopicQueueMappingInfo>();
+    private Map<String/* topic */, TopicQueueMappingInfo> topicQueueMappingInfoMap = new ConcurrentHashMap<>();
 
-    private Map<String/* topic */, TopicQueueMappingDetail> topicQueueMappingDetailMap = new ConcurrentHashMap<String, TopicQueueMappingDetail>();
+    private Map<String/* topic */, TopicQueueMappingDetail> topicQueueMappingDetailMap = new ConcurrentHashMap<>();
 
     private DataVersion mappingDataVersion = new DataVersion();
 

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/TopicConfigSerializeWrapper.java
Patch:
@@ -25,7 +25,7 @@
 
 public class TopicConfigSerializeWrapper extends RemotingSerializable {
     private ConcurrentMap<String, TopicConfig> topicConfigTable =
-        new ConcurrentHashMap<String, TopicConfig>();
+        new ConcurrentHashMap<>();
     private DataVersion dataVersion = new DataVersion();
 
     public ConcurrentMap<String, TopicConfig> getTopicConfigTable() {

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/UnlockBatchRequestBody.java
Patch:
@@ -26,7 +26,7 @@ public class UnlockBatchRequestBody extends RemotingSerializable {
     private String consumerGroup;
     private String clientId;
     private boolean onlyThisBroker = false;
-    private Set<MessageQueue> mqSet = new HashSet<MessageQueue>();
+    private Set<MessageQueue> mqSet = new HashSet<>();
 
     public String getConsumerGroup() {
         return consumerGroup;

File: common/src/main/java/org/apache/rocketmq/common/protocol/heartbeat/ConsumerData.java
Patch:
@@ -29,7 +29,7 @@ public class ConsumerData {
     private ConsumeType consumeType;
     private MessageModel messageModel;
     private ConsumeFromWhere consumeFromWhere;
-    private Set<SubscriptionData> subscriptionDataSet = new HashSet<SubscriptionData>();
+    private Set<SubscriptionData> subscriptionDataSet = new HashSet<>();
     private boolean unitMode;
 
     public String getGroupName() {

File: common/src/main/java/org/apache/rocketmq/common/protocol/heartbeat/HeartbeatData.java
Patch:
@@ -26,8 +26,8 @@
 
 public class HeartbeatData extends RemotingSerializable {
     private String clientID;
-    private Set<ProducerData> producerDataSet = new HashSet<ProducerData>();
-    private Set<ConsumerData> consumerDataSet = new HashSet<ConsumerData>();
+    private Set<ProducerData> producerDataSet = new HashSet<>();
+    private Set<ConsumerData> consumerDataSet = new HashSet<>();
 
     public String getClientID() {
         return clientID;

File: common/src/main/java/org/apache/rocketmq/common/protocol/heartbeat/SubscriptionData.java
Patch:
@@ -31,8 +31,8 @@ public class SubscriptionData implements Comparable<SubscriptionData> {
     private boolean classFilterMode = false;
     private String topic;
     private String subString;
-    private Set<String> tagsSet = new HashSet<String>();
-    private Set<Integer> codeSet = new HashSet<Integer>();
+    private Set<String> tagsSet = new HashSet<>();
+    private Set<Integer> codeSet = new HashSet<>();
     private long subVersion = System.currentTimeMillis();
     private String expressionType = ExpressionType.TAG;
 

File: common/src/main/java/org/apache/rocketmq/common/queue/ConcurrentTreeMap.java
Patch:
@@ -35,8 +35,8 @@ public class ConcurrentTreeMap<K, V> {
     private RoundQueue<K> roundQueue;
 
     public ConcurrentTreeMap(int capacity, Comparator<? super K> comparator) {
-        tree = new TreeMap<K, V>(comparator);
-        roundQueue = new RoundQueue<K>(capacity);
+        tree = new TreeMap<>(comparator);
+        roundQueue = new RoundQueue<>(capacity);
         lock = new ReentrantLock(true);
     }
 

File: common/src/main/java/org/apache/rocketmq/common/queue/RoundQueue.java
Patch:
@@ -30,7 +30,7 @@ public class RoundQueue<E> {
 
     public RoundQueue(int capacity) {
         this.capacity = capacity;
-        queue = new LinkedList<E>();
+        queue = new LinkedList<>();
     }
 
     public boolean put(E e) {

File: common/src/main/java/org/apache/rocketmq/common/rpc/RequestBuilder.java
Patch:
@@ -25,7 +25,7 @@
 
 public class RequestBuilder {
 
-    private static Map<Integer, Class> requestCodeMap = new HashMap<Integer, Class>();
+    private static Map<Integer, Class> requestCodeMap = new HashMap<>();
     static {
         requestCodeMap.put(RequestCode.PULL_MESSAGE, PullMessageRequestHeader.class);
     }

File: common/src/main/java/org/apache/rocketmq/common/rpc/RpcClientImpl.java
Patch:
@@ -45,7 +45,7 @@ public class RpcClientImpl implements RpcClient {
 
     private RemotingClient remotingClient;
 
-    private List<RpcClientHook> clientHookList = new ArrayList<RpcClientHook>();
+    private List<RpcClientHook> clientHookList = new ArrayList<>();
 
     public RpcClientImpl(ClientMetadata clientMetadata, RemotingClient remotingClient) {
         this.clientMetadata = clientMetadata;

File: common/src/main/java/org/apache/rocketmq/common/statictopic/TopicQueueMappingDetail.java
Patch:
@@ -28,7 +28,7 @@ public class TopicQueueMappingDetail extends TopicQueueMappingInfo {
 
     // the mapping info in current broker, do not register to nameserver
     // make sure this value is not null
-    private ConcurrentMap<Integer/*global id*/, List<LogicQueueMappingItem>> hostedQueues = new ConcurrentHashMap<Integer, List<LogicQueueMappingItem>>();
+    private ConcurrentMap<Integer/*global id*/, List<LogicQueueMappingItem>> hostedQueues = new ConcurrentHashMap<>();
 
     //make sure there is a default constructor
     public TopicQueueMappingDetail() {
@@ -59,9 +59,9 @@ public static ConcurrentMap<Integer, Integer> buildIdMap(TopicQueueMappingDetail
         assert level == LEVEL_0 ;
 
         if (mappingDetail.hostedQueues == null || mappingDetail.hostedQueues.isEmpty()) {
-            return new ConcurrentHashMap<Integer, Integer>();
+            return new ConcurrentHashMap<>();
         }
-        ConcurrentMap<Integer, Integer> tmpIdMap = new ConcurrentHashMap<Integer, Integer>();
+        ConcurrentMap<Integer, Integer> tmpIdMap = new ConcurrentHashMap<>();
         for (Map.Entry<Integer, List<LogicQueueMappingItem>> entry: mappingDetail.hostedQueues.entrySet()) {
             Integer globalId =  entry.getKey();
             List<LogicQueueMappingItem> items = entry.getValue();

File: common/src/main/java/org/apache/rocketmq/common/statictopic/TopicQueueMappingInfo.java
Patch:
@@ -47,7 +47,7 @@ public class TopicQueueMappingInfo extends RemotingSerializable {
     long epoch; //important to fence the old dirty data
     boolean dirty; //indicate if the data is dirty
     //register to broker to construct the route
-    protected ConcurrentMap<Integer/*logicId*/, Integer/*physicalId*/> currIdMap = new ConcurrentHashMap<Integer, Integer>();
+    protected ConcurrentMap<Integer/*logicId*/, Integer/*physicalId*/> currIdMap = new ConcurrentHashMap<>();
 
     public TopicQueueMappingInfo() {
 

File: common/src/main/java/org/apache/rocketmq/common/statictopic/TopicRemappingDetailWrapper.java
Patch:
@@ -35,11 +35,11 @@ public class TopicRemappingDetailWrapper extends RemotingSerializable {
     private String type;
     private long epoch;
 
-    private Map<String, TopicConfigAndQueueMapping> brokerConfigMap = new HashMap<String, TopicConfigAndQueueMapping>();
+    private Map<String, TopicConfigAndQueueMapping> brokerConfigMap = new HashMap<>();
 
-    private Set<String> brokerToMapIn = new HashSet<String>();
+    private Set<String> brokerToMapIn = new HashSet<>();
 
-    private Set<String> brokerToMapOut = new HashSet<String>();
+    private Set<String> brokerToMapOut = new HashSet<>();
 
     public TopicRemappingDetailWrapper() {
 

File: common/src/main/java/org/apache/rocketmq/common/statistics/FutureHolder.java
Patch:
@@ -23,12 +23,12 @@
 import java.util.concurrent.LinkedBlockingQueue;
 
 public class FutureHolder<T> {
-    private ConcurrentMap<T, BlockingQueue<Future>> futureMap = new ConcurrentHashMap<T, BlockingQueue<Future>>(8);
+    private ConcurrentMap<T, BlockingQueue<Future>> futureMap = new ConcurrentHashMap<>(8);
 
     public void addFuture(T t, Future future) {
         BlockingQueue<Future> list = futureMap.get(t);
         if (list == null) {
-            list = new LinkedBlockingQueue<Future>();
+            list = new LinkedBlockingQueue<>();
             BlockingQueue<Future> old = futureMap.putIfAbsent(t, list);
             if (old != null) {
                 list = old;

File: common/src/main/java/org/apache/rocketmq/common/stats/MomentStatsItemSet.java
Patch:
@@ -28,7 +28,7 @@
 
 public class MomentStatsItemSet {
     private final ConcurrentMap<String/* key */, MomentStatsItem> statsItemTable =
-        new ConcurrentHashMap<String, MomentStatsItem>(128);
+        new ConcurrentHashMap<>(128);
     private final String statsName;
     private final ScheduledExecutorService scheduledExecutorService;
     private final InternalLogger log;

File: common/src/main/java/org/apache/rocketmq/common/stats/StatsItem.java
Patch:
@@ -31,11 +31,11 @@ public class StatsItem {
 
     private final LongAdder times = new LongAdder();
 
-    private final LinkedList<CallSnapshot> csListMinute = new LinkedList<CallSnapshot>();
+    private final LinkedList<CallSnapshot> csListMinute = new LinkedList<>();
 
-    private final LinkedList<CallSnapshot> csListHour = new LinkedList<CallSnapshot>();
+    private final LinkedList<CallSnapshot> csListHour = new LinkedList<>();
 
-    private final LinkedList<CallSnapshot> csListDay = new LinkedList<CallSnapshot>();
+    private final LinkedList<CallSnapshot> csListDay = new LinkedList<>();
 
     private final String statsName;
     private final String statsKey;

File: common/src/main/java/org/apache/rocketmq/common/stats/StatsItemSet.java
Patch:
@@ -28,7 +28,7 @@
 
 public class StatsItemSet {
     private final ConcurrentMap<String/* key */, StatsItem> statsItemTable =
-        new ConcurrentHashMap<String, StatsItem>(128);
+        new ConcurrentHashMap<>(128);
 
     private final String statsName;
     private final ScheduledExecutorService scheduledExecutorService;

File: common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java
Patch:
@@ -41,12 +41,12 @@ public class TopicValidator {
     public static final boolean[] VALID_CHAR_BIT_MAP = new boolean[128];
     private static final int TOPIC_MAX_LENGTH = 127;
 
-    private static final Set<String> SYSTEM_TOPIC_SET = new HashSet<String>();
+    private static final Set<String> SYSTEM_TOPIC_SET = new HashSet<>();
 
     /**
      * Topics'set which client can not send msg!
      */
-    private static final Set<String> NOT_ALLOWED_SEND_TOPIC_SET = new HashSet<String>();
+    private static final Set<String> NOT_ALLOWED_SEND_TOPIC_SET = new HashSet<>();
 
     static {
         SYSTEM_TOPIC_SET.add(AUTO_CREATE_TOPIC_KEY_TOPIC);

File: common/src/main/java/org/apache/rocketmq/common/utils/IOTinyUtils.java
Patch:
@@ -58,7 +58,7 @@ static public long copy(Reader input, Writer output) throws IOException {
 
     static public List<String> readLines(Reader input) throws IOException {
         BufferedReader reader = toBufferedReader(input);
-        List<String> list = new ArrayList<String>();
+        List<String> list = new ArrayList<>();
         String line;
         for (; ; ) {
             line = reader.readLine();

File: common/src/main/java/org/apache/rocketmq/common/utils/MessageUtils.java
Patch:
@@ -41,7 +41,7 @@ public static int getShardingKeyIndexByMsg(MessageExt msg, int indexSize) {
     }
 
     public static Set<Integer> getShardingKeyIndexes(Collection<MessageExt> msgs, int indexSize) {
-        Set<Integer> indexSet = new HashSet<Integer>(indexSize);
+        Set<Integer> indexSet = new HashSet<>(indexSize);
         for (MessageExt msg : msgs) {
             indexSet.add(getShardingKeyIndexByMsg(msg, indexSize));
         }

File: common/src/test/java/org/apache/rocketmq/common/MessageBatchTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MessageBatchTest {
 
     public List<Message> generateMessages() {
-        List<Message> messages = new ArrayList<Message>();
+        List<Message> messages = new ArrayList<>();
         Message message1 = new Message("topic1", "body".getBytes());
         Message message2 = new Message("topic1", "body".getBytes());
 

File: common/src/test/java/org/apache/rocketmq/common/MessageEncodeDecodeTest.java
Patch:
@@ -46,7 +46,7 @@ public void testEncodeDecodeSingle() throws Exception {
 
     @Test
     public void testEncodeDecodeList() throws Exception {
-        List<Message> messages = new ArrayList<Message>(128);
+        List<Message> messages = new ArrayList<>(128);
         for (int i = 0; i < 100; i++) {
             Message message = new Message("topic", ("body" + i).getBytes());
             message.setFlag(i);

File: common/src/test/java/org/apache/rocketmq/common/RegisterBrokerBodyTest.java
Patch:
@@ -33,7 +33,7 @@ public void test_encode_decode() throws IOException {
         TopicConfigAndMappingSerializeWrapper topicConfigSerializeWrapper = new TopicConfigAndMappingSerializeWrapper();
         registerBrokerBody.setTopicConfigSerializeWrapper(topicConfigSerializeWrapper);
         
-        ConcurrentMap<String, TopicConfig> topicConfigTable = new ConcurrentHashMap<String, TopicConfig>();
+        ConcurrentMap<String, TopicConfig> topicConfigTable = new ConcurrentHashMap<>();
         for (int i = 0; i < 10000; i++) {
             topicConfigTable.put(String.valueOf(i), new TopicConfig(String.valueOf(i)));
         }

File: common/src/test/java/org/apache/rocketmq/common/admin/TopicStatsTableTest.java
Patch:
@@ -44,7 +44,7 @@ public class TopicStatsTableTest {
 
     @Before
     public void buildTopicStatsTable() {
-        HashMap<MessageQueue, TopicOffset> offsetTableMap = new HashMap<MessageQueue, TopicOffset>();
+        HashMap<MessageQueue, TopicOffset> offsetTableMap = new HashMap<>();
 
         MessageQueue messageQueue = new MessageQueue(TEST_TOPIC, TEST_BROKER, QUEUE_ID);
 

File: common/src/test/java/org/apache/rocketmq/common/filter/FilterAPITest.java
Patch:
@@ -37,7 +37,7 @@ public void testBuildSubscriptionData() throws Exception {
         assertThat(subscriptionData.getTopic()).isEqualTo(topic);
         assertThat(subscriptionData.getSubString()).isEqualTo(subString);
         String[] tags = subString.split("\\|\\|");
-        Set<String> tagSet = new HashSet<String>();
+        Set<String> tagSet = new HashSet<>();
         for (String tag : tags) {
             tagSet.add(tag.trim());
         }

File: common/src/test/java/org/apache/rocketmq/common/protocol/GroupListTest.java
Patch:
@@ -45,7 +45,7 @@ public void testSetGet() throws Exception {
     }
 
     private HashSet<String> createUniqueNewSet() {
-        HashSet<String> groups = new HashSet<String>();
+        HashSet<String> groups = new HashSet<>();
         groups.add(UUID.randomUUID().toString());
         return groups;
     }

File: common/src/test/java/org/apache/rocketmq/common/protocol/QueryConsumeTimeSpanBodyTest.java
Patch:
@@ -49,7 +49,7 @@ public void testSetGet() throws Exception {
     @Test
     public void testFromJson() throws Exception {
         QueryConsumeTimeSpanBody qctsb = new QueryConsumeTimeSpanBody();
-        List<QueueTimeSpan> queueTimeSpans = new ArrayList<QueueTimeSpan>();
+        List<QueueTimeSpan> queueTimeSpans = new ArrayList<>();
         QueueTimeSpan queueTimeSpan = new QueueTimeSpan();
         queueTimeSpan.setMinTimeStamp(1550825710000L);
         queueTimeSpan.setMaxTimeStamp(1550825790000L);
@@ -100,7 +100,7 @@ public void testEncode() throws Exception {
     }
 
     private List<QueueTimeSpan> newUniqueConsumeTimeSpanSet() {
-        List<QueueTimeSpan> queueTimeSpans = new ArrayList<QueueTimeSpan>();
+        List<QueueTimeSpan> queueTimeSpans = new ArrayList<>();
         QueueTimeSpan queueTimeSpan = new QueueTimeSpan();
         queueTimeSpan.setMinTimeStamp(System.currentTimeMillis());
         queueTimeSpan.setMaxTimeStamp(UtilAll.computeNextHourTimeMillis());

File: common/src/test/java/org/apache/rocketmq/common/protocol/body/ConsumeStatsListTest.java
Patch:
@@ -33,11 +33,11 @@ public class ConsumeStatsListTest {
     @Test
     public void testFromJson() {
         ConsumeStats consumeStats = new ConsumeStats();
-        ArrayList<ConsumeStats> consumeStatsListValue = new ArrayList<ConsumeStats>();
+        ArrayList<ConsumeStats> consumeStatsListValue = new ArrayList<>();
         consumeStatsListValue.add(consumeStats);
-        HashMap<String, List<ConsumeStats>> map = new HashMap<String, List<ConsumeStats>>();
+        HashMap<String, List<ConsumeStats>> map = new HashMap<>();
         map.put("subscriptionGroupName", consumeStatsListValue);
-        List<Map<String/*subscriptionGroupName*/, List<ConsumeStats>>> consumeStatsListValue2 = new ArrayList<Map<String, List<ConsumeStats>>>();
+        List<Map<String/*subscriptionGroupName*/, List<ConsumeStats>>> consumeStatsListValue2 = new ArrayList<>();
         consumeStatsListValue2.add(map);
 
         String brokerAddr = "brokerAddr";

File: common/src/test/java/org/apache/rocketmq/common/protocol/body/ConsumerConnectionTest.java
Patch:
@@ -35,11 +35,11 @@ public class ConsumerConnectionTest {
     @Test
     public void testFromJson() {
         ConsumerConnection consumerConnection = new ConsumerConnection();
-        HashSet<Connection> connections = new HashSet<Connection>();
+        HashSet<Connection> connections = new HashSet<>();
         Connection conn = new Connection();
         connections.add(conn);
 
-        ConcurrentHashMap<String/* Topic */, SubscriptionData> subscriptionTable = new ConcurrentHashMap<String, SubscriptionData>();
+        ConcurrentHashMap<String/* Topic */, SubscriptionData> subscriptionTable = new ConcurrentHashMap<>();
         SubscriptionData subscriptionData = new SubscriptionData();
         subscriptionTable.put("topicA", subscriptionData);
 
@@ -68,7 +68,7 @@ public void testFromJson() {
     @Test
     public void testComputeMinVersion() {
         ConsumerConnection consumerConnection = new ConsumerConnection();
-        HashSet<Connection> connections = new HashSet<Connection>();
+        HashSet<Connection> connections = new HashSet<>();
         Connection conn1 = new Connection();
         conn1.setVersion(1);
         connections.add(conn1);

File: common/src/test/java/org/apache/rocketmq/common/protocol/body/KVTableTest.java
Patch:
@@ -28,7 +28,7 @@ public class KVTableTest {
 
     @Test
     public void testFromJson() throws Exception {
-        HashMap<String, String> table = new HashMap<String, String>();
+        HashMap<String, String> table = new HashMap<>();
         table.put("key1", "value1");
         table.put("key2", "value2");
 

File: common/src/test/java/org/apache/rocketmq/common/protocol/body/MessageRequestModeSerializeWrapperTest.java
Patch:
@@ -30,7 +30,7 @@ public class MessageRequestModeSerializeWrapperTest {
     public void testFromJson() {
         MessageRequestModeSerializeWrapper  messageRequestModeSerializeWrapper = new MessageRequestModeSerializeWrapper();
         ConcurrentHashMap<String, ConcurrentHashMap<String, SetMessageRequestModeRequestBody>>
-                messageRequestModeMap = new ConcurrentHashMap<String, ConcurrentHashMap<String, SetMessageRequestModeRequestBody>>();
+                messageRequestModeMap = new ConcurrentHashMap<>();
         String topic = "TopicTest";
         String group = "Consumer";
         MessageRequestMode requestMode = MessageRequestMode.POP;

File: common/src/test/java/org/apache/rocketmq/common/protocol/body/QueryConsumeQueueResponseBodyTest.java
Patch:
@@ -40,7 +40,7 @@ public void test() {
         data.setPhysicOffset(10L);
         data.setPhysicSize(1);
         data.setTagsCode(1L);
-        List<ConsumeQueueData> list = new ArrayList<ConsumeQueueData>();
+        List<ConsumeQueueData> list = new ArrayList<>();
         list.add(data);
 
         body.setQueueData(list);

File: common/src/test/java/org/apache/rocketmq/common/protocol/body/QueryCorrectionOffsetBodyTest.java
Patch:
@@ -30,7 +30,7 @@ public class QueryCorrectionOffsetBodyTest {
     @Test
     public void testFromJson() throws Exception {
         QueryCorrectionOffsetBody qcob = new QueryCorrectionOffsetBody();
-        Map<Integer, Long> offsetMap = new HashMap<Integer, Long>();
+        Map<Integer, Long> offsetMap = new HashMap<>();
         offsetMap.put(1, 100L);
         offsetMap.put(2, 200L);
         qcob.setCorrectionOffsets(offsetMap);

File: common/src/test/java/org/apache/rocketmq/common/protocol/body/ResetOffsetBodyTest.java
Patch:
@@ -31,7 +31,7 @@ public class ResetOffsetBodyTest {
     @Test
     public void testFromJson() throws Exception {
         ResetOffsetBody rob = new ResetOffsetBody();
-        Map<MessageQueue, Long> offsetMap = new HashMap<MessageQueue, Long>();
+        Map<MessageQueue, Long> offsetMap = new HashMap<>();
         MessageQueue queue = new MessageQueue();
         queue.setQueueId(1);
         queue.setBrokerName("brokerName");

File: common/src/test/java/org/apache/rocketmq/common/protocol/body/SubscriptionGroupWrapperTest.java
Patch:
@@ -29,7 +29,7 @@ public class SubscriptionGroupWrapperTest {
     @Test
     public void testFromJson() {
         SubscriptionGroupWrapper subscriptionGroupWrapper = new SubscriptionGroupWrapper();
-        ConcurrentHashMap<String, SubscriptionGroupConfig> subscriptions = new ConcurrentHashMap<String, SubscriptionGroupConfig>();
+        ConcurrentHashMap<String, SubscriptionGroupConfig> subscriptions = new ConcurrentHashMap<>();
         SubscriptionGroupConfig subscriptionGroupConfig = new SubscriptionGroupConfig();
         subscriptionGroupConfig.setConsumeBroadcastEnable(true);
         subscriptionGroupConfig.setBrokerId(1234);

File: common/src/test/java/org/apache/rocketmq/common/stats/StatsItemSetTest.java
Patch:
@@ -52,7 +52,7 @@ public void test_statsOfFirstStatisticsCycle() throws InterruptedException {
         final String rtStatKey = "rtTest";
         final StatsItemSet statsItemSet = new StatsItemSet(tpsStatKey, scheduler, null);
         executor = new ThreadPoolExecutor(10, 20, 10, TimeUnit.SECONDS,
-            new ArrayBlockingQueue<Runnable>(100), new ThreadFactoryImpl("testMultiThread"));
+            new ArrayBlockingQueue<>(100), new ThreadFactoryImpl("testMultiThread"));
         for (int i = 0; i < 10; i++) {
             executor.submit(new Runnable() {
                 @Override
@@ -100,7 +100,7 @@ public void run() {
     private LongAdder test_unit() throws InterruptedException {
         final StatsItemSet statsItemSet = new StatsItemSet("topicTest", scheduler, null);
         executor = new ThreadPoolExecutor(10, 20, 10, TimeUnit.SECONDS,
-            new ArrayBlockingQueue<Runnable>(100), new ThreadFactoryImpl("testMultiThread"));
+            new ArrayBlockingQueue<>(100), new ThreadFactoryImpl("testMultiThread"));
         for (int i = 0; i < 10; i++) {
             executor.submit(new Runnable() {
                 @Override
@@ -121,7 +121,7 @@ public void run() {
     private AtomicLong test_unit_moment() throws InterruptedException {
         final MomentStatsItemSet statsItemSet = new MomentStatsItemSet("topicTest", scheduler, null);
         executor = new ThreadPoolExecutor(10, 20, 10, TimeUnit.SECONDS,
-            new ArrayBlockingQueue<Runnable>(100), new ThreadFactoryImpl("testMultiThread"));
+            new ArrayBlockingQueue<>(100), new ThreadFactoryImpl("testMultiThread"));
         for (int i = 0; i < 10; i++) {
             executor.submit(new Runnable() {
                 @Override

File: controller/src/main/java/org/apache/rocketmq/controller/ControllerManager.java
Patch:
@@ -86,7 +86,7 @@ public boolean initialize() {
                 new ThreadFactoryImpl("ControllerRequestExecutorThread_")) {
             @Override
             protected <T> RunnableFuture<T> newTaskFor(final Runnable runnable, final T value) {
-                return new FutureTaskExt<T>(runnable, value);
+                return new FutureTaskExt<>(runnable, value);
             }
         };
         this.heartbeatManager = new DefaultBrokerHeartbeatManager(this.controllerConfig);

File: example/src/main/java/org/apache/rocketmq/example/benchmark/Consumer.java
Patch:
@@ -82,7 +82,7 @@ public static void main(String[] args) throws MQClientException, IOException {
         ScheduledExecutorService executorService = new ScheduledThreadPoolExecutor(1,
                 new BasicThreadFactory.Builder().namingPattern("BenchmarkTimerThread-%d").daemon(true).build());
 
-        final LinkedList<Long[]> snapshotList = new LinkedList<Long[]>();
+        final LinkedList<Long[]> snapshotList = new LinkedList<>();
 
         executorService.scheduleAtFixedRate(new TimerTask() {
             @Override

File: example/src/main/java/org/apache/rocketmq/example/benchmark/Producer.java
Patch:
@@ -100,7 +100,7 @@ public static void main(String[] args) throws MQClientException {
         ScheduledExecutorService executorService = new ScheduledThreadPoolExecutor(1,
                 new BasicThreadFactory.Builder().namingPattern("BenchmarkTimerThread-%d").daemon(true).build());
 
-        final LinkedList<Long[]> snapshotList = new LinkedList<Long[]>();
+        final LinkedList<Long[]> snapshotList = new LinkedList<>();
 
         final long[] msgNums = new long[threadCount];
 

File: example/src/main/java/org/apache/rocketmq/example/benchmark/timer/TimerConsumer.java
Patch:
@@ -45,7 +45,7 @@ public class TimerConsumer {
     private final ScheduledExecutorService scheduledExecutor = new ScheduledThreadPoolExecutor(1, new ThreadFactoryImpl("ConsumerScheduleThread_"));
 
     private final StatsBenchmarkConsumer statsBenchmark = new StatsBenchmarkConsumer();
-    private final LinkedList<Long[]> snapshotList = new LinkedList<Long[]>();
+    private final LinkedList<Long[]> snapshotList = new LinkedList<>();
 
     private final DefaultMQPushConsumer consumer;
 

File: example/src/main/java/org/apache/rocketmq/example/benchmark/timer/TimerProducer.java
Patch:
@@ -63,7 +63,7 @@ public class TimerProducer {
     private final ExecutorService sendThreadPool;
 
     private final StatsBenchmarkProducer statsBenchmark = new StatsBenchmarkProducer();
-    private final LinkedList<Long[]> snapshotList = new LinkedList<Long[]>();
+    private final LinkedList<Long[]> snapshotList = new LinkedList<>();
 
     private final DefaultMQProducer producer;
 
@@ -90,7 +90,7 @@ public TimerProducer(String[] args) {
                 threadCount,
                 0L,
                 TimeUnit.MILLISECONDS,
-                new LinkedBlockingQueue<Runnable>(),
+            new LinkedBlockingQueue<>(),
                 new ThreadFactoryImpl("ProducerSendMessageThread_"));
 
         producer = new DefaultMQProducer("benchmark_producer");
@@ -138,7 +138,7 @@ public void run() {
     public void start() throws MQClientException {
         producer.start();
         System.out.printf("Start sending messages%n");
-        List<Long> delayList = new ArrayList<Long>();
+        List<Long> delayList = new ArrayList<>();
         final long startDelayTime = System.currentTimeMillis() / precisionMs * precisionMs + 2 * 60 * 1000 + 10;
         for (int slotCnt = 0; slotCnt < slotsTotal; slotCnt++) {
             for (int msgCnt = 0; msgCnt < msgsTotalPerSlotThread; msgCnt++) {

File: example/src/main/java/org/apache/rocketmq/example/simple/AclClient.java
Patch:
@@ -44,7 +44,7 @@
 
 public class AclClient {
 
-    private static final Map<MessageQueue, Long> OFFSE_TABLE = new HashMap<MessageQueue, Long>();
+    private static final Map<MessageQueue, Long> OFFSE_TABLE = new HashMap<>();
 
     private static final String ACL_ACCESS_KEY = "RocketMQ";
 

File: example/src/main/java/org/apache/rocketmq/example/simple/CachedQueue.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.rocketmq.common.message.MessageExt;
 
 public class CachedQueue {
-    private final TreeMap<Long, MessageExt> msgCachedTable = new TreeMap<Long, MessageExt>();
+    private final TreeMap<Long, MessageExt> msgCachedTable = new TreeMap<>();
 
     public TreeMap<Long, MessageExt> getMsgCachedTable() {
         return msgCachedTable;

File: example/src/main/java/org/apache/rocketmq/example/simple/RandomAsyncCommit.java
Patch:
@@ -24,7 +24,7 @@
 
 public class RandomAsyncCommit {
     private final ConcurrentHashMap<MessageQueue, CachedQueue> mqCachedTable =
-        new ConcurrentHashMap<MessageQueue, CachedQueue>();
+        new ConcurrentHashMap<>();
 
     public void putMessages(final MessageQueue mq, final List<MessageExt> msgs) {
         CachedQueue cachedQueue = this.mqCachedTable.get(mq);

File: filter/src/main/java/org/apache/rocketmq/filter/FilterFactory.java
Patch:
@@ -27,7 +27,7 @@ public class FilterFactory {
 
     public static final FilterFactory INSTANCE = new FilterFactory();
 
-    protected static final Map<String, FilterSpi> FILTER_SPI_HOLDER = new HashMap<String, FilterSpi>(4);
+    protected static final Map<String, FilterSpi> FILTER_SPI_HOLDER = new HashMap<>(4);
 
     static {
         FilterFactory.INSTANCE.register(new SqlFilter());

File: filter/src/main/java/org/apache/rocketmq/filter/expression/ComparisonExpression.java
Patch:
@@ -32,7 +32,7 @@
  */
 public abstract class ComparisonExpression extends BinaryExpression implements BooleanExpression {
 
-    public static final ThreadLocal<Boolean> CONVERT_STRING_EXPRESSIONS = new ThreadLocal<Boolean>();
+    public static final ThreadLocal<Boolean> CONVERT_STRING_EXPRESSIONS = new ThreadLocal<>();
 
     boolean convertStringExpressions = false;
 

File: filter/src/main/java/org/apache/rocketmq/filter/expression/UnaryExpression.java
Patch:
@@ -82,7 +82,7 @@ public static BooleanExpression createInExpression(PropertyExpression right, Lis
         } else if (elements.size() < 5) {
             t = elements;
         } else {
-            t = new HashSet<Object>(elements);
+            t = new HashSet<>(elements);
         }
         final Collection inList = t;
 

File: filter/src/main/java/org/apache/rocketmq/filter/parser/SelectorParser.java
Patch:
@@ -1214,7 +1214,7 @@ private int jj_ntk() {
             return jjNtk = jjNt.kind;
     }
 
-    private java.util.List<int[]> jjExpentries = new java.util.ArrayList<int[]>();
+    private java.util.List<int[]> jjExpentries = new java.util.ArrayList<>();
     private int[] jjExpentry;
     private int jjKind = -1;
     private int[] jjLasttokens = new int[100];

File: filter/src/test/java/org/apache/rocketmq/filter/ExpressionTest.java
Patch:
@@ -576,7 +576,7 @@ public KeyValue(String key, Object value) {
 
     class PropertyContext implements EvaluationContext {
 
-        public Map<String, Object> properties = new HashMap<String, Object>(8);
+        public Map<String, Object> properties = new HashMap<>(8);
 
         @Override
         public Object get(final String name) {

File: logging/src/main/java/org/apache/rocketmq/logging/InnerLoggerFactory.java
Patch:
@@ -345,7 +345,7 @@ private static void safeObjectAppend(StringBuilder sbuf, Object o) {
 
         private static void objectArrayAppend(StringBuilder sbuf, Object[] a, Map<Object[], Object> seenMap) {
             if (seenMap == null) {
-                seenMap = new HashMap<Object[], Object>();
+                seenMap = new HashMap<>();
             }
             sbuf.append('[');
             if (!seenMap.containsKey(a)) {

File: logging/src/main/java/org/apache/rocketmq/logging/InternalLoggerFactory.java
Patch:
@@ -38,9 +38,9 @@ public abstract class InternalLoggerFactory {
 
     private static String loggerType = null;
 
-    public static final ThreadLocal<String> BROKER_IDENTITY = new ThreadLocal<String>();
+    public static final ThreadLocal<String> BROKER_IDENTITY = new ThreadLocal<>();
 
-    private static ConcurrentHashMap<String, InternalLoggerFactory> loggerFactoryCache = new ConcurrentHashMap<String, InternalLoggerFactory>();
+    private static ConcurrentHashMap<String, InternalLoggerFactory> loggerFactoryCache = new ConcurrentHashMap<>();
 
     public static InternalLogger getLogger(Class clazz) {
         return getLogger(clazz.getName());

File: logging/src/main/java/org/apache/rocketmq/logging/Slf4jLoggerFactory.java
Patch:
@@ -52,7 +52,7 @@ public static class Slf4jLogger implements InternalLogger {
         private final String loggerSuffix;
         private final Logger defaultLogger;
 
-        private final Map<String, Logger> loggerMap = new HashMap<String, Logger>();
+        private final Map<String, Logger> loggerMap = new HashMap<>();
 
         public Slf4jLogger(String loggerSuffix) {
             this.loggerSuffix = loggerSuffix;

File: logging/src/main/java/org/apache/rocketmq/logging/inner/Appender.java
Patch:
@@ -131,7 +131,7 @@ public void addAppender(Appender newAppender) {
             }
 
             if (appenderList == null) {
-                appenderList = new Vector<Appender>(1);
+                appenderList = new Vector<>(1);
             }
             if (!appenderList.contains(newAppender)) {
                 appenderList.addElement(newAppender);

File: logging/src/main/java/org/apache/rocketmq/logging/inner/Logger.java
Patch:
@@ -276,7 +276,7 @@ public static class ProvisionNode extends Vector<Logger> {
 
     public static class DefaultLoggerRepository implements LoggerRepository {
 
-        final Hashtable<CategoryKey,Object> ht = new Hashtable<CategoryKey,Object>();
+        final Hashtable<CategoryKey,Object> ht = new Hashtable<>();
         Logger root;
 
         int logLevelInt;
@@ -348,7 +348,7 @@ public Logger makeNewLoggerInstance(String name) {
         }
 
         public Enumeration getCurrentLoggers() {
-            Vector<Logger> loggers = new Vector<Logger>(ht.size());
+            Vector<Logger> loggers = new Vector<>(ht.size());
 
             Enumeration elems = ht.elements();
             while (elems.hasMoreElements()) {

File: logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java
Patch:
@@ -145,9 +145,9 @@ public static class AsyncAppender extends Appender implements Appender.AppenderP
 
         public static final int DEFAULT_BUFFER_SIZE = 128;
 
-        private final List<LoggingEvent> buffer = new ArrayList<LoggingEvent>();
+        private final List<LoggingEvent> buffer = new ArrayList<>();
 
-        private final Map<String, DiscardSummary> discardMap = new HashMap<String, DiscardSummary>();
+        private final Map<String, DiscardSummary> discardMap = new HashMap<>();
 
         private int bufferSize = DEFAULT_BUFFER_SIZE;
 

File: logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingEvent.java
Patch:
@@ -104,7 +104,7 @@ public String[] getThrowableStr() {
         pw.flush();
         LineNumberReader reader = new LineNumberReader(
             new StringReader(sw.toString()));
-        ArrayList<String> lines = new ArrayList<String>();
+        ArrayList<String> lines = new ArrayList<>();
         try {
             String line = reader.readLine();
             while (line != null) {

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/kvconfig/KVConfigManager.java
Patch:
@@ -35,7 +35,7 @@ public class KVConfigManager {
 
     private final ReadWriteLock lock = new ReentrantReadWriteLock();
     private final HashMap<String/* Namespace */, HashMap<String/* Key */, String/* Value */>> configTable =
-        new HashMap<String, HashMap<String, String>>();
+        new HashMap<>();
 
     public KVConfigManager(NamesrvController namesrvController) {
         this.namesrvController = namesrvController;

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/processor/RequestProcessorTest.java
Patch:
@@ -574,7 +574,7 @@ private void registerRouteInfoManager() {
         topicConfigSerializeWrapper.setTopicConfigTable(topicConfigConcurrentHashMap);
         Channel channel = mock(Channel.class);
         RegisterBrokerResult registerBrokerResult = routeInfoManager.registerBroker("default-cluster", "127.0.0.1:10911", "default-broker", 1234, "127.0.0.1:1001", "",
-            null, topicConfigSerializeWrapper, new ArrayList<String>(), channel);
+            null, topicConfigSerializeWrapper, new ArrayList<>(), channel);
 
     }
 

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/routeinfo/GetRouteInfoBenchmark.java
Patch:
@@ -117,7 +117,7 @@ public void run() {
                             Channel channel = mock(Channel.class);
 
                             routeInfoManager.registerBroker(clusterName, brokerAddr, brokerName, 0, brokerAddr, "",
-                                null, topicConfigSerializeWrapper, new ArrayList<String>(), channel);
+                                null, topicConfigSerializeWrapper, new ArrayList<>(), channel);
                         }
                     }
                 });

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/routeinfo/RegisterBrokerBenchmark.java
Patch:
@@ -147,7 +147,7 @@ public void registerBroker() {
             "DefaultBroker" + index, 0, "127.0.0.1:400" + index,
             "",
             null,
-            topicConfigSerializeWrapper, new ArrayList<String>(), channel);
+            topicConfigSerializeWrapper, new ArrayList<>(), channel);
     }
 
     @Benchmark
@@ -170,7 +170,7 @@ public void registerBroker_Throughput() {
             "DefaultBroker" + index, 0, "127.0.0.1:400" + index,
             "",
             null,
-            topicConfigSerializeWrapper, new ArrayList<String>(), channel);
+            topicConfigSerializeWrapper, new ArrayList<>(), channel);
     }
 
     public static void main(String[] args) throws Exception {

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManagerNewTest.java
Patch:
@@ -707,7 +707,7 @@ private RegisterBrokerResult registerBroker(BrokerBasicInfo brokerInfo, Channel
             "",
             null,
             brokerInfo.enableActingMaster,
-            topicConfigSerializeWrapper, new ArrayList<String>(), channel);
+            topicConfigSerializeWrapper, new ArrayList<>(), channel);
         return registerBrokerResult;
     }
 

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManagerTest.java
Patch:
@@ -90,7 +90,7 @@ public void testQueryBrokerTopicConfig() {
             topicConfigSerializeWrapper.setTopicConfigTable(topicConfigConcurrentHashMap);
             Channel channel = mock(Channel.class);
             RegisterBrokerResult registerBrokerResult = routeInfoManager.registerBroker("default-cluster-1", "127.0.0.1:10911", "default-broker-1", 1234, "127.0.0.1:1001", "", 
-                    null, topicConfigSerializeWrapper, new ArrayList<String>(), channel);
+                    null, topicConfigSerializeWrapper, new ArrayList<>(), channel);
             assertThat(registerBrokerResult).isNotNull();
 
             DataVersion dataVersion0 = routeInfoManager.queryBrokerTopicConfig("default-cluster", "127.0.0.1:10911");
@@ -130,7 +130,7 @@ public void testRegisterBroker() {
         topicConfigSerializeWrapper.setTopicConfigTable(topicConfigConcurrentHashMap);
         Channel channel = mock(Channel.class);
         RegisterBrokerResult registerBrokerResult = routeInfoManager.registerBroker("default-cluster", "127.0.0.1:10911", "default-broker", 1234, "127.0.0.1:1001", "", 
-                null, topicConfigSerializeWrapper, new ArrayList<String>(), channel);
+                null, topicConfigSerializeWrapper, new ArrayList<>(), channel);
         assertThat(registerBrokerResult).isNotNull();
     }
 

File: openmessaging/src/main/java/io/openmessaging/rocketmq/utils/BeanUtils.java
Patch:
@@ -34,7 +34,7 @@ public final class BeanUtils {
     /**
      * Maps primitive {@code Class}es to their corresponding wrapper {@code Class}.
      */
-    private static Map<Class<?>, Class<?>> primitiveWrapperMap = new HashMap<Class<?>, Class<?>>();
+    private static Map<Class<?>, Class<?>> primitiveWrapperMap = new HashMap<>();
 
     static {
         primitiveWrapperMap.put(Boolean.TYPE, Boolean.class);
@@ -48,7 +48,7 @@ public final class BeanUtils {
         primitiveWrapperMap.put(Void.TYPE, Void.TYPE);
     }
 
-    private static Map<Class<?>, Class<?>> wrapperMap = new HashMap<Class<?>, Class<?>>();
+    private static Map<Class<?>, Class<?>> wrapperMap = new HashMap<>();
 
     static {
         for (Entry<Class<?>, Class<?>> primitiveClass : primitiveWrapperMap.entrySet()) {

File: remoting/src/main/java/org/apache/rocketmq/remoting/common/RemotingUtil.java
Patch:
@@ -96,8 +96,8 @@ public static String getLocalAddress() {
         try {
             // Traversal Network interface to get the first non-loopback and non-private address
             Enumeration<NetworkInterface> enumeration = NetworkInterface.getNetworkInterfaces();
-            ArrayList<String> ipv4Result = new ArrayList<String>();
-            ArrayList<String> ipv6Result = new ArrayList<String>();
+            ArrayList<String> ipv4Result = new ArrayList<>();
+            ArrayList<String> ipv6Result = new ArrayList<>();
             while (enumeration.hasMoreElements()) {
                 final NetworkInterface networkInterface = enumeration.nextElement();
                 if (isBridge(networkInterface)) {

File: srvutil/src/main/java/org/apache/rocketmq/util/cache/ExpiredLocalCache.java
Patch:
@@ -49,7 +49,7 @@ public T get(K key) {
     }
 
     public T put(K key, T v, long exp) {
-        CacheObject<T> value = new CacheObject<T>(exp, v);
+        CacheObject<T> value = new CacheObject<>(exp, v);
         CacheObject<T> old = cache.put(key, value);
         if (old == null) {
             return null;
@@ -59,7 +59,7 @@ public T put(K key, T v, long exp) {
     }
 
     public T putIfAbsent(K key, T v, long exp) {
-        CacheObject<T> value = new CacheObject<T>(exp, v);
+        CacheObject<T> value = new CacheObject<>(exp, v);
         CacheObject<T> old = cache.putIfAbsent(key, value);
         if (old == null) {
             return null;

File: srvutil/src/main/java/org/apache/rocketmq/util/cache/LockManager.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.rocketmq.common.protocol.header.PopMessageRequestHeader;
 
 public class LockManager {
-    private static ExpiredLocalCache<String, AtomicBoolean> expiredLocalCache = new ExpiredLocalCache<String, AtomicBoolean>(100000);
+    private static ExpiredLocalCache<String, AtomicBoolean> expiredLocalCache = new ExpiredLocalCache<>(100000);
 
     public static boolean tryLock(String key, long lockTime) {
         AtomicBoolean v = expiredLocalCache.get(key);

File: store/src/main/java/org/apache/rocketmq/store/AllocateMappedFileService.java
Patch:
@@ -40,9 +40,9 @@ public class AllocateMappedFileService extends ServiceThread {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
     private static int waitTimeOut = 1000 * 5;
     private ConcurrentMap<String, AllocateRequest> requestTable =
-        new ConcurrentHashMap<String, AllocateRequest>();
+        new ConcurrentHashMap<>();
     private PriorityBlockingQueue<AllocateRequest> requestQueue =
-        new PriorityBlockingQueue<AllocateRequest>();
+        new PriorityBlockingQueue<>();
     private volatile boolean hasException = false;
     private DefaultMessageStore messageStore;
 

File: store/src/main/java/org/apache/rocketmq/store/ConsumeQueueExt.java
Patch:
@@ -326,7 +326,7 @@ public void truncateByMinAddress(final long minAddress) {
 
         log.info("Truncate consume queue ext by min {}.", minAddress);
 
-        List<MappedFile> willRemoveFiles = new ArrayList<MappedFile>();
+        List<MappedFile> willRemoveFiles = new ArrayList<>();
 
         List<MappedFile> mappedFiles = this.mappedFileQueue.getMappedFiles();
         final long realOffset = unDecorate(minAddress);

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -167,7 +167,7 @@ public class DefaultMessageStore implements MessageStore {
     private SendMessageBackHook sendMessageBackHook;
 
     private final ConcurrentMap<Integer /* level */, Long/* delay timeMillis */> delayLevelTable =
-        new ConcurrentHashMap<Integer, Long>(32);
+        new ConcurrentHashMap<>(32);
 
     private int maxDelayLevel;
 
@@ -227,7 +227,7 @@ public DefaultMessageStore(final MessageStoreConfig messageStoreConfig, final Br
     }
 
     public boolean parseDelayLevel() {
-        HashMap<String, Long> timeUnitTable = new HashMap<String, Long>();
+        HashMap<String, Long> timeUnitTable = new HashMap<>();
         timeUnitTable.put("s", 1000L);
         timeUnitTable.put("m", 1000L * 60);
         timeUnitTable.put("h", 1000L * 60 * 60);
@@ -1276,7 +1276,7 @@ public void cleanExpiredConsumerQueue() {
 
     public Map<String, Long> getMessageIds(final String topic, final int queueId, long minOffset, long maxOffset,
         SocketAddress storeHost) {
-        Map<String, Long> messageIds = new HashMap<String, Long>();
+        Map<String, Long> messageIds = new HashMap<>();
         if (this.shutdown) {
             return messageIds;
         }

File: store/src/main/java/org/apache/rocketmq/store/QueryMessageResult.java
Patch:
@@ -23,9 +23,9 @@
 public class QueryMessageResult {
 
     private final List<SelectMappedBufferResult> messageMapedList =
-        new ArrayList<SelectMappedBufferResult>(100);
+        new ArrayList<>(100);
 
-    private final List<ByteBuffer> messageBufferList = new ArrayList<ByteBuffer>(100);
+    private final List<ByteBuffer> messageBufferList = new ArrayList<>(100);
     private long indexLastUpdateTimestamp;
     private long indexLastUpdatePhyoffset;
 

File: store/src/main/java/org/apache/rocketmq/store/ha/WaitNotifyObject.java
Patch:
@@ -29,7 +29,7 @@ public class WaitNotifyObject {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
 
     protected final ConcurrentHashMap<Long/* thread id */, AtomicBoolean/* notified */> waitingThreadTable =
-        new ConcurrentHashMap<Long, AtomicBoolean>(16);
+        new ConcurrentHashMap<>(16);
 
     protected AtomicBoolean hasNotified = new AtomicBoolean(false);
 

File: store/src/main/java/org/apache/rocketmq/store/index/IndexService.java
Patch:
@@ -44,7 +44,7 @@ public class IndexService {
     private final int hashSlotNum;
     private final int indexNum;
     private final String storePath;
-    private final ArrayList<IndexFile> indexFileList = new ArrayList<IndexFile>();
+    private final ArrayList<IndexFile> indexFileList = new ArrayList<>();
     private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();
 
     public IndexService(final DefaultMessageStore store) {
@@ -115,7 +115,7 @@ public void deleteExpiredFile(long offset) {
         }
 
         if (files != null) {
-            List<IndexFile> fileList = new ArrayList<IndexFile>();
+            List<IndexFile> fileList = new ArrayList<>();
             for (int i = 0; i < (files.length - 1); i++) {
                 IndexFile f = (IndexFile) files[i];
                 if (f.getEndPhyOffset() < offset) {
@@ -164,7 +164,7 @@ public void destroy() {
     }
 
     public QueryOffsetResult queryOffset(String topic, String key, int maxNum, long begin, long end) {
-        List<Long> phyOffsets = new ArrayList<Long>(maxNum);
+        List<Long> phyOffsets = new ArrayList<>(maxNum);
 
         long indexLastUpdateTimestamp = 0;
         long indexLastUpdatePhyoffset = 0;

File: store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java
Patch:
@@ -133,7 +133,7 @@ public class BrokerStatsManager {
     private ScheduledExecutorService commercialExecutor;
     private ScheduledExecutorService accountExecutor;
 
-    private final HashMap<String, StatsItemSet> statsTable = new HashMap<String, StatsItemSet>();
+    private final HashMap<String, StatsItemSet> statsTable = new HashMap<>();
     private final String clusterName;
     private final boolean enableQueueStat;
     private MomentStatsItemSet momentStatsItemSetFallSize;

File: store/src/test/java/org/apache/rocketmq/store/MappedFileQueueTest.java
Patch:
@@ -272,7 +272,7 @@ public void testMappedFile_SwapMap() {
 
         ThreadPoolExecutor executor = new ThreadPoolExecutor(3, 3, 1000 * 60,
             TimeUnit.MILLISECONDS,
-            new LinkedBlockingQueue<Runnable>(),
+            new LinkedBlockingQueue<>(),
             new ThreadFactoryImpl("testThreadPool"));
 
         for (int i = 0; i < mappedFileSize; i++) {
@@ -351,7 +351,7 @@ public void testMappedFile_CleanSwapedMap() throws InterruptedException {
 
         ThreadPoolExecutor executor = new ThreadPoolExecutor(5, 5, 1000 * 60,
             TimeUnit.MILLISECONDS,
-            new LinkedBlockingQueue<Runnable>(),
+            new LinkedBlockingQueue<>(),
             new ThreadFactoryImpl("testThreadPool"));
         for (int i = 0; i < mappedFileSize; i++) {
             MappedFile mappedFile = mappedFileQueue.getLastMappedFile(0);

File: store/src/test/java/org/apache/rocketmq/store/index/IndexFileTest.java
Patch:
@@ -62,7 +62,7 @@ public void testSelectPhyOffset() throws Exception {
         boolean putResult = indexFile.putKey(Long.toString(400), 400, System.currentTimeMillis());
         assertThat(putResult).isFalse();
 
-        final List<Long> phyOffsets = new ArrayList<Long>();
+        final List<Long> phyOffsets = new ArrayList<>();
         indexFile.selectPhyOffset(phyOffsets, "60", 10, 0, Long.MAX_VALUE);
         assertThat(phyOffsets).isNotEmpty();
         assertThat(phyOffsets.size()).isEqualTo(1);

File: tools/src/main/java/org/apache/rocketmq/tools/command/acl/UpdateAccessConfigSubCommand.java
Patch:
@@ -129,7 +129,7 @@ public void execute(CommandLine commandLine, Options options,
             // TopicPerms list value
             if (commandLine.hasOption('t')) {
                 String[] topicPerms = commandLine.getOptionValue('t').trim().split(",");
-                List<String> topicPermList = new ArrayList<String>();
+                List<String> topicPermList = new ArrayList<>();
                 if (topicPerms != null) {
                     for (String topicPerm : topicPerms) {
                         topicPermList.add(topicPerm);
@@ -141,7 +141,7 @@ public void execute(CommandLine commandLine, Options options,
             // GroupPerms list value
             if (commandLine.hasOption('g')) {
                 String[] groupPerms = commandLine.getOptionValue('g').trim().split(",");
-                List<String> groupPermList = new ArrayList<String>();
+                List<String> groupPermList = new ArrayList<>();
                 if (groupPerms != null) {
                     for (String groupPerm : groupPerms) {
                         groupPermList.add(groupPerm);

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/BrokerConsumeStatsSubCommad.java
Patch:
@@ -119,7 +119,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
                     String group = entry.getKey();
                     List<ConsumeStats> consumeStatsArray = entry.getValue();
                     for (ConsumeStats consumeStats : consumeStatsArray) {
-                        List<MessageQueue> mqList = new LinkedList<MessageQueue>();
+                        List<MessageQueue> mqList = new LinkedList<>();
                         mqList.addAll(consumeStats.getOffsetTable().keySet());
                         Collections.sort(mqList);
                         for (MessageQueue mq : mqList) {

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/BrokerStatusSubCommand.java
Patch:
@@ -95,7 +95,7 @@ public void printBrokerRuntimeStats(final DefaultMQAdminExt defaultMQAdminExt, f
         final boolean printBroker) throws InterruptedException, MQBrokerException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException {
         KVTable kvTable = defaultMQAdminExt.fetchBrokerRuntimeStats(brokerAddr);
 
-        TreeMap<String, String> tmp = new TreeMap<String, String>();
+        TreeMap<String, String> tmp = new TreeMap<>();
         tmp.putAll(kvTable.getTable());
 
         Iterator<Entry<String, String>> it = tmp.entrySet().iterator();

File: tools/src/main/java/org/apache/rocketmq/tools/command/cluster/CLusterSendMsgRTCommand.java
Patch:
@@ -113,7 +113,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
                 .getOptionValue('m').trim();
 
             if (commandLine.hasOption('c')) {
-                clusterNames = new TreeSet<String>();
+                clusterNames = new TreeSet<>();
                 clusterNames.add(commandLine.getOptionValue('c').trim());
             } else {
                 clusterNames = clusterAddr.keySet();

File: tools/src/main/java/org/apache/rocketmq/tools/command/cluster/ClusterListSubCommand.java
Patch:
@@ -109,7 +109,7 @@ private Set<String> getTargetClusterNames(String clusterName, ClusterInfo cluste
         if (StringUtils.isEmpty(clusterName)) {
             return clusterInfo.getClusterAddrTable().keySet();
         } else {
-            Set<String> clusterNames = new TreeSet<String>();
+            Set<String> clusterNames = new TreeSet<>();
             clusterNames.add(clusterName);
             return clusterNames;
         }
@@ -128,7 +128,7 @@ private void printClusterMoreStats(final Set<String> clusterNames,
         );
 
         for (String clusterName : clusterNames) {
-            TreeSet<String> brokerNameTreeSet = new TreeSet<String>();
+            TreeSet<String> brokerNameTreeSet = new TreeSet<>();
             Set<String> brokerNameSet = clusterInfo.getClusterAddrTable().get(clusterName);
             if (brokerNameSet != null && !brokerNameSet.isEmpty()) {
                 brokerNameTreeSet.addAll(brokerNameSet);
@@ -196,7 +196,7 @@ private void printClusterBaseInfo(final Set<String> clusterNames,
         );
 
         for (String clusterName : clusterNames) {
-            TreeSet<String> brokerNameTreeSet = new TreeSet<String>();
+            TreeSet<String> brokerNameTreeSet = new TreeSet<>();
             Set<String> brokerNameSet = clusterInfo.getClusterAddrTable().get(clusterName);
             if (brokerNameSet != null && !brokerNameSet.isEmpty()) {
                 brokerNameTreeSet.addAll(brokerNameSet);

File: tools/src/main/java/org/apache/rocketmq/tools/command/consumer/ConsumerProgressSubCommand.java
Patch:
@@ -118,7 +118,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
                 } else {
                     consumeStats = defaultMQAdminExt.examineConsumeStats(consumerGroup, topicName);
                 }
-                List<MessageQueue> mqList = new LinkedList<MessageQueue>();
+                List<MessageQueue> mqList = new LinkedList<>();
                 mqList.addAll(consumeStats.getOffsetTable().keySet());
                 Collections.sort(mqList);
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/consumer/ConsumerStatusSubCommand.java
Patch:
@@ -91,7 +91,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
             if (!commandLine.hasOption('i')) {
                 int i = 1;
                 long now = System.currentTimeMillis();
-                final TreeMap<String/* clientId */, ConsumerRunningInfo> criTable = new TreeMap<String, ConsumerRunningInfo>();
+                final TreeMap<String/* clientId */, ConsumerRunningInfo> criTable = new TreeMap<>();
                 System.out.printf("%-10s %-40s %-20s %s%n",
                     "#Index",
                     "#ClientId",

File: tools/src/main/java/org/apache/rocketmq/tools/command/consumer/ConsumerSubCommand.java
Patch:
@@ -80,7 +80,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
                 int i = 1;
                 long now = System.currentTimeMillis();
                 final TreeMap<String/* clientId */, ConsumerRunningInfo> criTable =
-                    new TreeMap<String, ConsumerRunningInfo>();
+                    new TreeMap<>();
                 for (Connection conn : cc.getConnectionSet()) {
                     try {
                         ConsumerRunningInfo consumerRunningInfo =

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/PrintMessageByQueueCommand.java
Patch:
@@ -74,7 +74,7 @@ private static void printCalculateByTag(final Map<String, AtomicLong> tagCalmap,
         if (!calByTag)
             return;
 
-        List<TagCountBean> list = new ArrayList<TagCountBean>();
+        List<TagCountBean> list = new ArrayList<>();
         for (Map.Entry<String, AtomicLong> entry : tagCalmap.entrySet()) {
             TagCountBean tagBean = new TagCountBean(entry.getKey(), entry.getValue());
             list.add(tagBean);
@@ -193,7 +193,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
                 maxOffset = consumer.searchOffset(mq, timeValue);
             }
 
-            final Map<String, AtomicLong> tagCalmap = new HashMap<String, AtomicLong>();
+            final Map<String, AtomicLong> tagCalmap = new HashMap<>();
             READQ:
             for (long offset = minOffset; offset < maxOffset; ) {
                 try {

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/AllocateMQSubCommand.java
Patch:
@@ -67,7 +67,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
             String topic = commandLine.getOptionValue('t').trim();
             String ips = commandLine.getOptionValue('i').trim();
             final String[] split = ips.split(",");
-            final List<String> ipList = new LinkedList<String>();
+            final List<String> ipList = new LinkedList<>();
             for (String ip : split) {
                 ipList.add(ip);
             }
@@ -80,7 +80,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
             RebalanceResult rr = new RebalanceResult();
 
             for (String i : ipList) {
-                final List<MessageQueue> mqResult = averagely.allocate("aa", i, new ArrayList<MessageQueue>(mqs), ipList);
+                final List<MessageQueue> mqResult = averagely.allocate("aa", i, new ArrayList<>(mqs), ipList);
                 rr.getResult().put(i, mqResult);
             }
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/RebalanceResult.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 
 public class RebalanceResult {
-    private Map<String/*ip*/, List<MessageQueue>> result = new HashMap<String, List<MessageQueue>>();
+    private Map<String/*ip*/, List<MessageQueue>> result = new HashMap<>();
 
     public Map<String, List<MessageQueue>> getResult() {
         return result;

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/RemappingStaticTopicSubCommand.java
Patch:
@@ -181,7 +181,7 @@ public void execute(final CommandLine commandLine, final Options options,
             }
             Map.Entry<Long, Integer> maxEpochAndNum = TopicQueueMappingUtils.checkNameEpochNumConsistence(topic, brokerConfigMap);
             {
-                TopicRemappingDetailWrapper oldWrapper = new TopicRemappingDetailWrapper(topic, TopicRemappingDetailWrapper.TYPE_CREATE_OR_UPDATE, maxEpochAndNum.getKey(), brokerConfigMap, new HashSet<String>(), new HashSet<String>());
+                TopicRemappingDetailWrapper oldWrapper = new TopicRemappingDetailWrapper(topic, TopicRemappingDetailWrapper.TYPE_CREATE_OR_UPDATE, maxEpochAndNum.getKey(), brokerConfigMap, new HashSet<>(), new HashSet<>());
                 String oldMappingDataFile = TopicQueueMappingUtils.writeToTemp(oldWrapper, false);
                 System.out.printf("The old mapping data is written to file " + oldMappingDataFile + "\n");
             }

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicStatusSubCommand.java
Patch:
@@ -63,7 +63,7 @@ public void execute(final CommandLine commandLine, final Options options,
             String topic = commandLine.getOptionValue('t').trim();
             TopicStatsTable topicStatsTable = defaultMQAdminExt.examineTopicStats(topic);
 
-            List<MessageQueue> mqList = new LinkedList<MessageQueue>();
+            List<MessageQueue> mqList = new LinkedList<>();
             mqList.addAll(topicStatsTable.getOffsetTable().keySet());
             Collections.sort(mqList);
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateStaticTopicSubCommand.java
Patch:
@@ -184,7 +184,7 @@ public void execute(final CommandLine commandLine, final Options options,
             }
 
             {
-                TopicRemappingDetailWrapper oldWrapper = new TopicRemappingDetailWrapper(topic, TopicRemappingDetailWrapper.TYPE_CREATE_OR_UPDATE, maxEpochAndNum.getKey(), brokerConfigMap, new HashSet<String>(), new HashSet<String>());
+                TopicRemappingDetailWrapper oldWrapper = new TopicRemappingDetailWrapper(topic, TopicRemappingDetailWrapper.TYPE_CREATE_OR_UPDATE, maxEpochAndNum.getKey(), brokerConfigMap, new HashSet<>(), new HashSet<>());
                 String oldMappingDataFile = TopicQueueMappingUtils.writeToTemp(oldWrapper, false);
                 System.out.printf("The old mapping data is written to file " + oldMappingDataFile + "\n");
             }

File: tools/src/main/java/org/apache/rocketmq/tools/monitor/MonitorService.java
Patch:
@@ -209,7 +209,7 @@ private void reportUndoneMsgs(final String consumerGroup) {
 
         if (cs != null) {
 
-            HashMap<String/* Topic */, ConsumeStats> csByTopic = new HashMap<String, ConsumeStats>();
+            HashMap<String/* Topic */, ConsumeStats> csByTopic = new HashMap<>();
             {
                 Iterator<Entry<MessageQueue, OffsetWrapper>> it = cs.getOffsetTable().entrySet().iterator();
                 while (it.hasNext()) {
@@ -244,7 +244,7 @@ private void reportUndoneMsgs(final String consumerGroup) {
     public void reportConsumerRunningInfo(final String consumerGroup) throws InterruptedException,
         MQBrokerException, RemotingException, MQClientException {
         ConsumerConnection cc = defaultMQAdminExt.examineConsumerConnectionInfo(consumerGroup);
-        TreeMap<String, ConsumerRunningInfo> infoMap = new TreeMap<String, ConsumerRunningInfo>();
+        TreeMap<String, ConsumerRunningInfo> infoMap = new TreeMap<>();
         for (Connection c : cc.getConnectionSet()) {
             String clientId = c.getClientId();
 

File: tools/src/test/java/org/apache/rocketmq/tools/command/acl/GetAccessConfigSubCommandTest.java
Patch:
@@ -16,9 +16,9 @@
  */
 package org.apache.rocketmq.tools.command.acl;
 
+import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.CommandLine;
 import org.apache.rocketmq.srvutil.ServerUtil;
 import org.junit.Test;
 

File: tools/src/test/java/org/apache/rocketmq/tools/command/acl/UpdateAccessConfigSubCommandTest.java
Patch:
@@ -72,7 +72,7 @@ public void testExecute() {
         // groupPerms list value
         if (commandLine.hasOption('g')) {
             String[] groupPerms = commandLine.getOptionValue('g').trim().split(";");
-            List<String> groupPermList = new ArrayList<String>();
+            List<String> groupPermList = new ArrayList<>();
             Collections.addAll(groupPermList, groupPerms);
             accessConfig.setGroupPerms(groupPermList);
         }

File: tools/src/test/java/org/apache/rocketmq/tools/command/broker/GetBrokerConfigCommandTest.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.rocketmq.tools.command.broker;
 
+import java.io.UnsupportedEncodingException;
+import java.util.Properties;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
@@ -25,9 +27,6 @@
 import org.apache.rocketmq.tools.command.server.ServerResponseMocker;
 import org.junit.Test;
 
-import java.io.UnsupportedEncodingException;
-import java.util.Properties;
-
 public class GetBrokerConfigCommandTest extends ServerResponseMocker {
 
     @Override

File: tools/src/test/java/org/apache/rocketmq/tools/command/connection/ConsumerConnectionSubCommandTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.tools.command.connection;
 
+import java.util.HashSet;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
@@ -29,8 +30,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import java.util.HashSet;
-
 import static org.mockito.Mockito.mock;
 
 public class ConsumerConnectionSubCommandTest {

File: tools/src/test/java/org/apache/rocketmq/tools/command/connection/ProducerConnectionSubCommandTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.tools.command.connection;
 
+import java.util.HashSet;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
@@ -29,8 +30,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import java.util.HashSet;
-
 import static org.mockito.Mockito.mock;
 
 public class ProducerConnectionSubCommandTest {

File: tools/src/test/java/org/apache/rocketmq/tools/command/consumer/ConsumerProgressSubCommandTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.tools.command.consumer;
 
+import java.util.HashMap;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
@@ -31,8 +32,6 @@
 import org.junit.Ignore;
 import org.junit.Test;
 
-import java.util.HashMap;
-
 public class ConsumerProgressSubCommandTest {
 
     private ServerResponseMocker brokerMocker;

File: tools/src/test/java/org/apache/rocketmq/tools/command/consumer/ConsumerStatusSubCommandTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.tools.command.consumer;
 
+import java.util.HashSet;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
@@ -29,8 +30,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import java.util.HashSet;
-
 import static org.mockito.Mockito.mock;
 
 public class ConsumerStatusSubCommandTest {

File: tools/src/test/java/org/apache/rocketmq/tools/command/namesrv/AddWritePermSubCommandTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.tools.command.namesrv;
 
+import java.util.HashMap;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
@@ -28,8 +29,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import java.util.HashMap;
-
 public class AddWritePermSubCommandTest {
 
     private ServerResponseMocker brokerMocker;

File: tools/src/test/java/org/apache/rocketmq/tools/command/namesrv/WipeWritePermSubCommandTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.tools.command.namesrv;
 
+import java.util.HashMap;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
@@ -27,8 +28,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import java.util.HashMap;
-
 public class WipeWritePermSubCommandTest {
     private ServerResponseMocker brokerMocker;
 

File: tools/src/test/java/org/apache/rocketmq/tools/command/producer/ProducerSubCommandTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.tools.command.producer;
 
+import java.util.HashMap;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
@@ -31,8 +32,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import java.util.HashMap;
-
 public class ProducerSubCommandTest {
     private ServerResponseMocker brokerMocker;
 

File: tools/src/test/java/org/apache/rocketmq/tools/command/server/NameServerMocker.java
Patch:
@@ -16,12 +16,11 @@
  */
 package org.apache.rocketmq.tools.command.server;
 
-import org.apache.rocketmq.common.protocol.route.BrokerData;
-import org.apache.rocketmq.common.protocol.route.TopicRouteData;
-
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
+import org.apache.rocketmq.common.protocol.route.BrokerData;
+import org.apache.rocketmq.common.protocol.route.TopicRouteData;
 
 /**
  * tools class

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/processor/ClusterTestRequestProcessorTest.java
Patch:
@@ -82,7 +82,7 @@ public void init() throws NoSuchFieldException, IllegalAccessException, Remoting
         TopicRouteData topicRouteData = new TopicRouteData();
         List<BrokerData> brokerDatas = new ArrayList<>();
         HashMap<Long, String> brokerAddrs = new HashMap<>();
-        brokerAddrs.put(1234l, "127.0.0.1:10911");
+        brokerAddrs.put(1234L, "127.0.0.1:10911");
         BrokerData brokerData = new BrokerData();
         brokerData.setCluster("default-cluster");
         brokerData.setBrokerName("default-broker");

File: store/src/main/java/org/apache/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -879,9 +879,7 @@ public void setDefaultQueryMaxNum(int defaultQueryMaxNum) {
     }
 
     /**
-     * Enable transient commitLog store pool only if transientStorePoolEnable is true and the FlushDiskType is
-     * ASYNC_FLUSH
-     *
+     * Enable transient commitLog store pool only if transientStorePoolEnable is true and broker role is not SLAVE
      * @return <tt>true</tt> or <tt>false</tt>
      */
     public boolean isTransientStorePoolEnable() {

File: remoting/src/test/java/org/apache/rocketmq/remoting/netty/NettyClientConfigTest.java
Patch:
@@ -27,7 +27,7 @@
 public class NettyClientConfigTest {
 
     @Test
-    public void testChangeConfigBySystemProperty() throws NoSuchFieldException, IllegalAccessException {
+    public void testChangeConfigBySystemProperty() {
 
 
         System.setProperty(NettySystemConfig.COM_ROCKETMQ_REMOTING_CLIENT_WORKER_SIZE, "1");
@@ -36,6 +36,7 @@ public void testChangeConfigBySystemProperty() throws NoSuchFieldException, Ille
         System.setProperty(NettySystemConfig.COM_ROCKETMQ_REMOTING_SOCKET_SNDBUF_SIZE, "16383");
         System.setProperty(NettySystemConfig.COM_ROCKETMQ_REMOTING_SOCKET_RCVBUF_SIZE, "16384");
         System.setProperty(NettySystemConfig.COM_ROCKETMQ_REMOTING_CLIENT_CLOSE_SOCKET_IF_TIMEOUT, "false");
+        System.setProperty(TlsSystemConfig.TLS_ENABLE, "true");
 
 
         NettySystemConfig.socketSndbufSize =
@@ -60,5 +61,6 @@ public void testChangeConfigBySystemProperty() throws NoSuchFieldException, Ille
         assertThat(changedConfig.getClientSocketSndBufSize()).isEqualTo(16383);
         assertThat(changedConfig.getClientSocketRcvBufSize()).isEqualTo(16384);
         assertThat(changedConfig.isClientCloseSocketIfTimeout()).isEqualTo(false);
+        assertThat(changedConfig.isUseTLS()).isEqualTo(true);
     }
 }

File: tools/src/test/java/org/apache/rocketmq/tools/command/acl/ClusterAclConfigVersionListSubCommandTest.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.rocketmq.tools.command.acl;
 
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.rocketmq.srvutil.ServerUtil;
 import org.junit.Test;
 
@@ -32,7 +32,8 @@ public void testExecute() {
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         String[] subargs = new String[] {"-c default-cluster"};
         final CommandLine commandLine =
-            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());
+            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs,
+                cmd.buildCommandlineOptions(options), new DefaultParser());
         assertThat(commandLine.getOptionValue('c').trim()).isEqualTo("default-cluster");
     }
 }

File: tools/src/test/java/org/apache/rocketmq/tools/command/acl/DeleteAccessConfigSubCommandTest.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.rocketmq.tools.command.acl;
 
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.rocketmq.srvutil.ServerUtil;
 import org.junit.Test;
 
@@ -32,7 +32,8 @@ public void testExecute() {
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         String[] subargs = new String[] {"-a unit-test", "-c default-cluster"};
         final CommandLine commandLine =
-            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());
+            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs,
+                cmd.buildCommandlineOptions(options), new DefaultParser());
         assertThat(commandLine.getOptionValue('a').trim()).isEqualTo("unit-test");
         assertThat(commandLine.getOptionValue('c').trim()).isEqualTo("default-cluster");
     }

File: tools/src/test/java/org/apache/rocketmq/tools/command/acl/GetAccessConfigSubCommandTest.java
Patch:
@@ -16,9 +16,9 @@
  */
 package org.apache.rocketmq.tools.command.acl;
 
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.CommandLine;
-import org.apache.commons.cli.PosixParser;
 import org.apache.rocketmq.srvutil.ServerUtil;
 import org.junit.Test;
 
@@ -32,7 +32,8 @@ public void testExecute() {
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         String[] subargs = new String[] {"-c default-cluster"};
         final CommandLine commandLine =
-                ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());
+                ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs,
+                    cmd.buildCommandlineOptions(options), new DefaultParser());
         assertThat(commandLine.getOptionValue('c').trim()).isEqualTo("default-cluster");
     }
 }

File: tools/src/test/java/org/apache/rocketmq/tools/command/acl/UpdateGlobalWhiteAddrSubCommandTest.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.rocketmq.tools.command.acl;
 
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.rocketmq.srvutil.ServerUtil;
 import org.junit.Test;
 
@@ -32,7 +32,8 @@ public void testExecute() {
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         String[] subargs = new String[] {"-g 10.10.103.*,192.168.0.*", "-c default-cluster"};
         final CommandLine commandLine =
-            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());
+            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs,
+                cmd.buildCommandlineOptions(options), new DefaultParser());
         assertThat(commandLine.getOptionValue('g').trim()).isEqualTo("10.10.103.*,192.168.0.*");
         assertThat(commandLine.getOptionValue('c').trim()).isEqualTo("default-cluster");
     }

File: tools/src/test/java/org/apache/rocketmq/tools/command/broker/BrokerConsumeStatsSubCommadTest.java
Patch:
@@ -21,8 +21,8 @@
 import java.util.List;
 import java.util.Map;
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.rocketmq.client.ClientConfig;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.impl.MQClientAPIImpl;
@@ -93,7 +93,8 @@ public void testExecute() throws SubCommandException, IllegalAccessException, No
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         String[] subargs = new String[] {"-b 127.0.0.1:10911", "-t 3000", "-l 5", "-o true"};
         final CommandLine commandLine =
-            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());
+            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs,
+                cmd.buildCommandlineOptions(options), new DefaultParser());
         cmd.execute(commandLine, options, null);
     }
 }

File: tools/src/test/java/org/apache/rocketmq/tools/command/broker/SendMsgStatusCommandTest.java
Patch:
@@ -18,8 +18,8 @@
 
 import java.lang.reflect.Field;
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.rocketmq.client.ClientConfig;
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
@@ -72,7 +72,8 @@ public void testExecute() {
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         String[] subargs = new String[] {"-b 127.0.0.1:10911", "-s 1024 -c 10"};
         final CommandLine commandLine =
-            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());
+            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs,
+                cmd.buildCommandlineOptions(options), new DefaultParser());
         //cmd.execute(commandLine, options, null);
     }
 }

File: tools/src/test/java/org/apache/rocketmq/tools/command/offset/ResetOffsetByTimeOldCommandTest.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.rocketmq.tools.command.offset;
 
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.rocketmq.srvutil.ServerUtil;
 import org.junit.Test;
 
@@ -31,7 +31,8 @@ public void testExecute() {
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         String[] subargs = new String[] {"-g default-group", "-t unit-test", "-s 1412131213231", "-f false"};
         final CommandLine commandLine =
-            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());
+            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs,
+                cmd.buildCommandlineOptions(options), new DefaultParser());
         assertThat(commandLine.getOptionValue('g').trim()).isEqualTo("default-group");
         assertThat(commandLine.getOptionValue('t').trim()).isEqualTo("unit-test");
         assertThat(commandLine.getOptionValue('s').trim()).isEqualTo("1412131213231");

File: tools/src/test/java/org/apache/rocketmq/tools/command/offset/SkipAccumulationCommandTest.java
Patch:
@@ -18,8 +18,8 @@
 
 import java.lang.reflect.Field;
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.rocketmq.client.ClientConfig;
 import org.apache.rocketmq.client.impl.MQClientAPIImpl;
 import org.apache.rocketmq.client.impl.MQClientManager;
@@ -71,7 +71,8 @@ public void testExecute() throws SubCommandException {
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         String[] subargs = new String[] {"-g group-test", "-t topic-test", "-f false"};
         final CommandLine commandLine =
-            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());
+            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs,
+                cmd.buildCommandlineOptions(options), new DefaultParser());
         cmd.execute(commandLine, options, null);
     }
 }

File: tools/src/test/java/org/apache/rocketmq/tools/command/topic/AllocateMQSubCommandTest.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.rocketmq.tools.command.topic;
 
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.rocketmq.srvutil.ServerUtil;
 import org.junit.Test;
 
@@ -31,7 +31,8 @@ public void testExecute() {
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         String[] subargs = new String[] {"-t unit-test", "-i 127.0.0.1:10911"};
         final CommandLine commandLine =
-            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());
+            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs,
+                cmd.buildCommandlineOptions(options), new DefaultParser());
         assertThat(commandLine.getOptionValue('t').trim()).isEqualTo("unit-test");
         assertThat(commandLine.getOptionValue("i").trim()).isEqualTo("127.0.0.1:10911");
     }

File: tools/src/test/java/org/apache/rocketmq/tools/command/topic/DeleteTopicSubCommandTest.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.rocketmq.tools.command.topic;
 
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.rocketmq.srvutil.ServerUtil;
 import org.junit.Test;
 
@@ -31,7 +31,8 @@ public void testExecute() {
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         String[] subargs = new String[] {"-t unit-test", "-c default-cluster"};
         final CommandLine commandLine =
-            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());
+            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs,
+                cmd.buildCommandlineOptions(options), new DefaultParser());
         assertThat(commandLine.getOptionValue('t').trim()).isEqualTo("unit-test");
         assertThat(commandLine.getOptionValue("c").trim()).isEqualTo("default-cluster");
     }

File: tools/src/test/java/org/apache/rocketmq/tools/command/topic/TopicClusterSubCommandTest.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.rocketmq.tools.command.topic;
 
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.rocketmq.srvutil.ServerUtil;
 import org.junit.Test;
 
@@ -31,7 +31,8 @@ public void testExecute() {
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         String[] subargs = new String[] {"-t unit-test"};
         final CommandLine commandLine =
-            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());
+            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs,
+                cmd.buildCommandlineOptions(options), new DefaultParser());
         assertThat(commandLine.getOptionValue('t').trim()).isEqualTo("unit-test");
     }
 }
\ No newline at end of file

File: tools/src/test/java/org/apache/rocketmq/tools/command/topic/TopicRouteSubCommandTest.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.rocketmq.tools.command.topic;
 
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.rocketmq.srvutil.ServerUtil;
 import org.junit.Test;
 
@@ -31,7 +31,8 @@ public void testExecute() {
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         String[] subargs = new String[] {"-t unit-test"};
         final CommandLine commandLine =
-            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());
+            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs,
+                cmd.buildCommandlineOptions(options), new DefaultParser());
         assertThat(commandLine.getOptionValue('t').trim()).isEqualTo("unit-test");
     }
 }
\ No newline at end of file

File: tools/src/test/java/org/apache/rocketmq/tools/command/topic/TopicStatusSubCommandTest.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.rocketmq.tools.command.topic;
 
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.rocketmq.srvutil.ServerUtil;
 import org.junit.Test;
 
@@ -31,7 +31,8 @@ public void testExecute() {
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         String[] subargs = new String[] {"-t unit-test"};
         final CommandLine commandLine =
-            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());
+            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs,
+                cmd.buildCommandlineOptions(options), new DefaultParser());
         assertThat(commandLine.getOptionValue('t').trim()).isEqualTo("unit-test");
     }
 }
\ No newline at end of file

File: tools/src/test/java/org/apache/rocketmq/tools/command/topic/UpdateOrderConfCommandTest.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.rocketmq.tools.command.topic;
 
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.rocketmq.srvutil.ServerUtil;
 import org.junit.Test;
 
@@ -31,7 +31,8 @@ public void testExecute() {
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         String[] subargs = new String[] {"-t unit-test", "-v default-broker:8", "-m post"};
         final CommandLine commandLine =
-            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());
+            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs,
+                cmd.buildCommandlineOptions(options), new DefaultParser());
         assertThat(commandLine.getOptionValue('t').trim()).isEqualTo("unit-test");
         assertThat(commandLine.getOptionValue('v').trim()).isEqualTo("default-broker:8");
         assertThat(commandLine.getOptionValue('m').trim()).isEqualTo("post");

File: tools/src/test/java/org/apache/rocketmq/tools/command/topic/UpdateTopicPermSubCommandTest.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.rocketmq.tools.command.topic;
 
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.rocketmq.srvutil.ServerUtil;
 import org.junit.Test;
 
@@ -31,7 +31,8 @@ public void testExecute() {
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         String[] subargs = new String[] {"-b 127.0.0.1:10911", "-c default-cluster", "-t unit-test", "-p 6"};
         final CommandLine commandLine =
-            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());
+            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs,
+                cmd.buildCommandlineOptions(options), new DefaultParser());
         assertThat(commandLine.getOptionValue('b').trim()).isEqualTo("127.0.0.1:10911");
         assertThat(commandLine.getOptionValue('c').trim()).isEqualTo("default-cluster");
         assertThat(commandLine.getOptionValue('t').trim()).isEqualTo("unit-test");

File: tools/src/test/java/org/apache/rocketmq/tools/command/topic/UpdateTopicSubCommandTest.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.rocketmq.tools.command.topic;
 
 import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.PosixParser;
 import org.apache.rocketmq.srvutil.ServerUtil;
 import org.junit.Test;
 
@@ -39,7 +39,8 @@ public void testExecute() {
             "-u false",
             "-s false"};
         final CommandLine commandLine =
-            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());
+            ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(),
+                subargs, cmd.buildCommandlineOptions(options), new DefaultParser());
         assertThat(commandLine.getOptionValue('b').trim()).isEqualTo("127.0.0.1:10911");
         assertThat(commandLine.getOptionValue('r').trim()).isEqualTo("8");
         assertThat(commandLine.getOptionValue('w').trim()).isEqualTo("8");

File: tools/src/main/java/org/apache/rocketmq/tools/command/controller/CleanControllerBrokerDataSubCommand.java
Patch:
@@ -87,7 +87,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
         }
 
         if (!isCleanLivingBroker && StringUtils.isEmpty(clusterName)) {
-            throw new IllegalArgumentException("cleanLivingBroker option is false,clusterName option can not be empty.");
+            throw new IllegalArgumentException("cleanLivingBroker option is false, clusterName option can not be empty.");
         }
 
         try {

File: client/src/main/java/org/apache/rocketmq/client/impl/MQAdminImpl.java
Patch:
@@ -454,8 +454,8 @@ public void operationComplete(ResponseFuture responseFuture) {
                 }
 
                 //If namespace not null , reset Topic without namespace.
-                for (MessageExt messageExt : messageList) {
-                    if (null != this.mQClientFactory.getClientConfig().getNamespace()) {
+                if (null != this.mQClientFactory.getClientConfig().getNamespace()) {
+                    for (MessageExt messageExt : messageList) {
                         messageExt.setTopic(NamespaceUtil.withoutNamespace(messageExt.getTopic(), this.mQClientFactory.getClientConfig().getNamespace()));
                     }
                 }

File: logging/src/test/java/org/apache/rocketmq/logging/InnerLoggerFactoryTest.java
Patch:
@@ -82,7 +82,6 @@ public void testInnerLoggerFactory() {
         logger3.debug("debug {}", "hahahah");
 
         String content = new String(byteArrayOutputStream.toByteArray());
-        System.out.println(content);
 
         Assert.assertTrue(content.contains("InnerLoggerFactoryTest"));
         Assert.assertTrue(content.contains("info"));

File: logging/src/test/java/org/apache/rocketmq/logging/inner/AppenderTest.java
Patch:
@@ -91,8 +91,6 @@ public void testInnerFile() throws IOException {
 
         String content = readFile(file);
 
-        System.out.println(content);
-
         Assert.assertTrue(content.contains("info"));
         Assert.assertTrue(content.contains("RuntimeException"));
         Assert.assertTrue(!content.contains("debug"));

File: logging/src/test/java/org/apache/rocketmq/logging/inner/LayoutTest.java
Patch:
@@ -48,7 +48,5 @@ public void testLogFormat() {
         LoggingEvent loggingEvent = new LoggingEvent(Logger.class.getName(), logger, org.apache.rocketmq.logging.inner.Level.INFO,
             "junit test error", null);
         String format = innerLayout.format(loggingEvent);
-
-        System.out.println(format);
     }
 }

File: logging/src/test/java/org/apache/rocketmq/logging/inner/LevelTest.java
Patch:
@@ -30,8 +30,8 @@ public void levelTest() {
     }
 
     @Test
-    public void loggerLevel(){
+    public void loggerLevel() {
         Level level = Logger.getRootLogger().getLevel();
-        Assert.assertTrue(level!=null);
+        Assert.assertTrue(level != null);
     }
 }

File: logging/src/test/java/org/apache/rocketmq/logging/inner/MessageFormatterTest.java
Patch:
@@ -25,15 +25,14 @@
 public class MessageFormatterTest {
 
     @Test
-    public void formatTest(){
+    public void formatTest() {
         InnerLoggerFactory.FormattingTuple logging = InnerLoggerFactory.MessageFormatter.format("this is {},and {}", "logging", 6546);
         String message = logging.getMessage();
         Assert.assertTrue(message.contains("logging"));
 
         InnerLoggerFactory.FormattingTuple format = InnerLoggerFactory.MessageFormatter.format("cause exception {}", 143545, new RuntimeException());
         String message1 = format.getMessage();
         Throwable throwable = format.getThrowable();
-        System.out.println(message1);
         Assert.assertTrue(throwable != null);
     }
 

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -2507,7 +2507,7 @@ private void doReput() {
                                 if (!DefaultMessageStore.this.getMessageStoreConfig().isDuplicationEnable() &&
                                     DefaultMessageStore.this.getMessageStoreConfig().getBrokerRole() == BrokerRole.SLAVE) {
                                     DefaultMessageStore.this.storeStatsService
-                                        .getSinglePutMessageTopicTimesTotal(dispatchRequest.getTopic()).add(1);
+                                        .getSinglePutMessageTopicTimesTotal(dispatchRequest.getTopic()).add(dispatchRequest.getBatchSize());
                                     DefaultMessageStore.this.storeStatsService
                                         .getSinglePutMessageTopicSizeTotal(dispatchRequest.getTopic())
                                         .add(dispatchRequest.getMsgSize());

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -729,7 +729,7 @@ public GetMessageResult getMessage(final String group, final String topic, final
                 status = GetMessageStatus.OFFSET_OVERFLOW_BADLY;
                 nextBeginOffset = nextOffsetCorrection(offset, maxOffset);
             } else {
-                final int maxFilterMessageCount = Math.max(16000, maxMsgNums * ConsumeQueue.CQ_STORE_UNIT_SIZE);
+                final int maxFilterMessageSize = Math.max(16000, maxMsgNums * consumeQueue.getUnitSize());
                 final boolean diskFallRecorded = this.messageStoreConfig.isDiskFallRecorded();
 
                 long maxPullSize = Math.max(maxTotalMsgSize, 100);
@@ -764,7 +764,7 @@ public GetMessageResult getMessage(final String group, final String topic, final
 
                             boolean isInDisk = checkInDiskByCommitOffset(offsetPy, maxOffsetPy);
 
-                            if (cqUnit.getQueueOffset() - offset > maxFilterMessageCount) {
+                            if ((cqUnit.getQueueOffset() - offset) * consumeQueue.getUnitSize() > maxFilterMessageSize) {
                                 break;
                             }
 

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/pop/PopSubCheckIT.java
Patch:
@@ -65,14 +65,14 @@ public void testNormalPopAck() throws Exception {
         String topic = initTopic();
         logger.info(String.format("use topic: %s; group: %s !", topic, group));
 
-        RMQNormalProducer producer = getProducer(nsAddr, topic);
+        RMQNormalProducer producer = getProducer(NAMESRV_ADDR, topic);
         producer.getProducer().setCompressMsgBodyOverHowmuch(Integer.MAX_VALUE);
 
         for (String brokerAddr : new String[]{brokerController1.getBrokerAddr(), brokerController2.getBrokerAddr()}) {
             defaultMQAdminExt.setMessageRequestMode(brokerAddr, topic, group, MessageRequestMode.POP, 8, 60_000);
         }
 
-        RMQPopConsumer consumer = ConsumerFactory.getRMQPopConsumer(nsAddr, group,
+        RMQPopConsumer consumer = ConsumerFactory.getRMQPopConsumer(NAMESRV_ADDR, group,
             topic, "*", new RMQNormalListener());
         mqClients.add(consumer);
 

File: test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithOnlySendCallBackIT.java
Patch:
@@ -39,7 +39,7 @@ public class AsyncSendWithOnlySendCallBackIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("user topic[%s]!", topic));
-        producer = getAsyncProducer(nsAddr, topic);
+        producer = getAsyncProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -50,12 +50,12 @@ public void tearDown() {
     @Test
     public void testSendWithOnlyCallBack() {
         int msgSize = 20;
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
         producer.asyncSend(msgSize);
         producer.waitForResponse(10 * 1000);
         assertThat(producer.getSuccessMsgCount()).isEqualTo(msgSize);
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());

File: test/src/test/java/org/apache/rocketmq/test/client/producer/exception/msg/ChinaPropIT.java
Patch:
@@ -37,7 +37,7 @@ public class ChinaPropIT extends BaseConf {
 
     @Before
     public void setUp() {
-        producer = ProducerFactory.getRMQProducer(nsAddr);
+        producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);
         topic = initTopic();
     }
 

File: test/src/test/java/org/apache/rocketmq/test/client/producer/exception/msg/MessageExceptionIT.java
Patch:
@@ -37,7 +37,7 @@ public class MessageExceptionIT extends BaseConf {
 
     @Before
     public void setUp() {
-        producer = ProducerFactory.getRMQProducer(nsAddr);
+        producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);
         topic = initTopic();
     }
 

File: test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendExceptionIT.java
Patch:
@@ -50,23 +50,23 @@ public void tearDown() {
     @Test(expected = java.lang.NullPointerException.class)
     public void testSendMQNull() throws Exception {
         Message msg = new Message(topic, RandomUtils.getStringByUUID().getBytes());
-        DefaultMQProducer producer = ProducerFactory.getRMQProducer(nsAddr);
+        DefaultMQProducer producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);
         MessageQueue messageQueue = null;
         producer.sendOneway(msg, messageQueue);
     }
 
     @Test(expected = org.apache.rocketmq.client.exception.MQClientException.class)
     public void testSendSelectorNull() throws Exception {
         Message msg = new Message(topic, RandomUtils.getStringByUUID().getBytes());
-        DefaultMQProducer producer = ProducerFactory.getRMQProducer(nsAddr);
+        DefaultMQProducer producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);
         MessageQueueSelector selector = null;
         producer.sendOneway(msg, selector, 100);
     }
 
     @Test(expected = org.apache.rocketmq.client.exception.MQClientException.class)
     public void testSelectorThrowsException() throws Exception {
         Message msg = new Message(topic, RandomUtils.getStringByUUID().getBytes());
-        DefaultMQProducer producer = ProducerFactory.getRMQProducer(nsAddr);
+        DefaultMQProducer producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);
         producer.sendOneway(msg, new MessageQueueSelector() {
             @Override
             public MessageQueue select(List<MessageQueue> list, Message message, Object o) {

File: test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendIT.java
Patch:
@@ -39,7 +39,7 @@ public class OneWaySendIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("user topic[%s]!", topic));
-        producer = getAsyncProducer(nsAddr, topic);
+        producer = getAsyncProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -50,13 +50,13 @@ public void tearDown() {
     @Test
     public void testOneWaySendWithOnlyMsgAsParam() {
         int msgSize = 20;
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
 
         producer.sendOneWay(msgSize);
         producer.waitForResponse(5 * 1000);
         assertThat(producer.getAllMsgBody().size()).isEqualTo(msgSize);
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());

File: test/src/test/java/org/apache/rocketmq/test/client/producer/querymsg/QueryMsgByIdExceptionIT.java
Patch:
@@ -37,7 +37,7 @@ public class QueryMsgByIdExceptionIT extends BaseConf {
     public static void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @AfterClass

File: test/src/test/java/org/apache/rocketmq/test/client/producer/querymsg/QueryMsgByIdIT.java
Patch:
@@ -43,8 +43,8 @@ public class QueryMsgByIdIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getProducer(nsAddr, topic);
-        consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+        producer = getProducer(NAMESRV_ADDR, topic);
+        consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
     }
 
     @After
@@ -57,7 +57,7 @@ public void testQueryMsg() {
         int msgSize = 20;
         producer.send(msgSize);
         Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         Assert.assertEquals("Not all are consumed", 0, VerifyUtils.verify(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()));
 

File: test/src/test/java/org/apache/rocketmq/test/client/producer/transaction/TransactionalMsgIT.java
Patch:
@@ -47,8 +47,8 @@ public class TransactionalMsgIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getTransactionalProducer(nsAddr, topic, new TransactionListenerImpl());
-        consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+        producer = getTransactionalProducer(NAMESRV_ADDR, topic, new TransactionListenerImpl());
+        consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
     }
 
     @After
@@ -64,7 +64,7 @@ public void testMessageVisibility() throws Exception {
         for (int i = 0; i < msgSize; i++) {
             producer.send(msgs.get(i), getTransactionHandle(i));
         }
-        boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(), consumer.getListener());
+        boolean recvAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(), consumer.getListener());
         assertThat(recvAll).isEqualTo(true);
     }
 

File: test/src/test/java/org/apache/rocketmq/test/container/AddAndRemoveBrokerIT.java
Patch:
@@ -62,7 +62,7 @@ public void addBrokerTest()
 
     @Test
     public void removeBrokerTest()
-        throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException{
+        throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException {
 
         boolean exceptionCaught = false;
 

File: test/src/test/java/org/apache/rocketmq/test/container/ContainerIntegrationTestBase.java
Patch:
@@ -87,8 +87,8 @@ public class ContainerIntegrationTestBase {
 
     protected static final String THREE_REPLICAS_TOPIC = "SEND_MESSAGE_TEST_TOPIC_THREE_REPLICAS";
 
-    protected static final List<BrokerContainer> brokerContainerList = new ArrayList<>();
-    protected static final List<NamesrvController> namesrvControllers = new ArrayList<>();
+    protected static List<BrokerContainer> brokerContainerList = new ArrayList<>();
+    protected static List<NamesrvController> namesrvControllers = new ArrayList<>();
 
     protected static final String BROKER_NAME_PREFIX = "TestBrokerName_";
     protected static final int COMMIT_LOG_SIZE = 128 * 1024;

File: test/src/test/java/org/apache/rocketmq/test/container/PushMultipleReplicasIT.java
Patch:
@@ -72,7 +72,7 @@ public void consumeMessageFromSlave_PushConsumer() throws MQClientException {
         // Wait topic synchronization
         await().atMost(Duration.ofMinutes(1)).until(() -> {
             InnerSalveBrokerController slaveBroker = brokerContainer2.getSlaveBrokers().iterator().next();
-           return slaveBroker.getTopicConfigManager().selectTopicConfig(TOPIC) != null;
+            return slaveBroker.getTopicConfigManager().selectTopicConfig(TOPIC) != null;
         });
         isolateBroker(master1With3Replicas);
         DefaultMQPushConsumer pushConsumer = createPushConsumer(CONSUMER_GROUP);

File: test/src/test/java/org/apache/rocketmq/test/delay/NormalMsgDelayIT.java
Patch:
@@ -41,8 +41,8 @@ public class NormalMsgDelayIT extends DelayConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getProducer(nsAddr, topic);
-        consumer = getConsumer(nsAddr, topic, "*", new RMQDelayListener());
+        producer = getProducer(NAMESRV_ADDR, topic);
+        consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQDelayListener());
     }
 
     @After
@@ -58,7 +58,7 @@ public void testDelayLevel1() throws Exception {
         producer.send(delayMsgs);
         Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         Assert.assertEquals("Not all are consumed", 0, VerifyUtils.verify(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()));
         Assert.assertEquals("Timer is not correct", true,

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/LocalGrpcIT.java
Patch:
@@ -67,7 +67,7 @@ public void testQueryAssignment() throws Exception {
 
         QueryAssignmentResponse response = blockingStub.queryAssignment(buildQueryAssignmentRequest(topic, group));
 
-        assertQueryAssignment(response, brokerNum);
+        assertQueryAssignment(response, BROKER_NUM);
     }
 
     @Test

File: store/src/test/java/org/apache/rocketmq/store/MappedFileQueueTest.java
Patch:
@@ -315,7 +315,7 @@ public void testMappedFile_SwapMap() {
                     }
                     assertThat(mappedFile != null).isTrue();
                     retryTime = 0;
-                    int pos = ((i * fixedMsg.getBytes().length) % mappedFileSize);
+                    int pos = (i * fixedMsg.getBytes().length) % mappedFileSize;
                     while ((pos + fixedMsg.getBytes().length) > mappedFile.getReadPosition() && retryTime < 10000) {
                         retryTime++;
                         if ((pos + fixedMsg.getBytes().length) > mappedFile.getReadPosition()) {
@@ -373,7 +373,7 @@ public void testMappedFile_CleanSwapedMap() throws InterruptedException {
                     }
                 } catch (Exception e) {
                     hasException.set(true);
-                }finally {
+                } finally {
                     downLatch.countDown();
                 }
             });

File: store/src/test/java/org/apache/rocketmq/store/MultiDispatchTest.java
Patch:
@@ -78,7 +78,7 @@ public void queueKey() {
     @Test
     public void wrapMultiDispatch() {
         MessageExtBrokerInner messageExtBrokerInner = buildMessageMultiQueue();
-        messageStore.assignOffset( messageExtBrokerInner, (short) 1);
+        messageStore.assignOffset(messageExtBrokerInner, (short) 1);
         assertEquals(messageExtBrokerInner.getProperty(MessageConst.PROPERTY_INNER_MULTI_QUEUE_OFFSET), "0,0");
     }
 

File: store/src/test/java/org/apache/rocketmq/store/StoreStatsServiceTest.java
Patch:
@@ -101,8 +101,6 @@ public void findPutMessageEntireTimePXTest() throws InvocationTargetException, N
         Method method = StoreStatsService.class.getDeclaredMethod("resetPutMessageTimeBuckets");
         method.setAccessible(true);
         method.invoke(storeStatsService);
-        System.out.println(storeStatsService.findPutMessageEntireTimePX(0.99));
-        System.out.println(storeStatsService.findPutMessageEntireTimePX(0.999));
     }
 
 }
\ No newline at end of file

File: store/src/test/java/org/apache/rocketmq/store/StoreTestUtil.java
Patch:
@@ -57,10 +57,10 @@ public static void flushConsumeQueue(DefaultMessageStore store) throws Exception
         field.setAccessible(true);
         DefaultMessageStore.FlushConsumeQueueService flushService = (DefaultMessageStore.FlushConsumeQueueService) field.get(store);
 
-        final int RETRY_TIMES_OVER = 3;
+        final int retryTimesOver = 3;
         Method method = DefaultMessageStore.FlushConsumeQueueService.class.getDeclaredMethod("doFlush", int.class);
         method.setAccessible(true);
-        method.invoke(flushService, RETRY_TIMES_OVER);
+        method.invoke(flushService, retryTimesOver);
     }
 
 

File: store/src/test/java/org/apache/rocketmq/store/ha/HAClientTest.java
Patch:
@@ -19,8 +19,6 @@
 
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.store.DefaultMessageStore;
-import org.apache.rocketmq.store.ha.DefaultHAClient;
-import org.apache.rocketmq.store.ha.HAClient;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: store/src/test/java/org/apache/rocketmq/store/index/IndexFileTest.java
Patch:
@@ -30,8 +30,8 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class IndexFileTest {
-    private final int HASH_SLOT_NUM = 100;
-    private final int INDEX_NUM = 400;
+    private static final int HASH_SLOT_NUM = 100;
+    private static final int INDEX_NUM = 400;
 
     @Test
     public void testPutKey() throws Exception {

File: store/src/test/java/org/apache/rocketmq/store/queue/BatchConsumeMessageTest.java
Patch:
@@ -213,7 +213,7 @@ public void testGetOffsetInQueueByTime() throws Exception {
         Assert.assertEquals(80, messageStore.getOffsetInQueueByTime(topic, 0, timeMid));
 
         // can set periodic interval for executing  DefaultMessageStore.this.cleanFilesPeriodically() method, we can execute following code.
-        // default periodic interval is 60s, This code snippet will take 60 seconds。
+        // default periodic interval is 60s, This code snippet will take 60 seconds.
         /*final long a = timeMid;
         await().atMost(Duration.ofMinutes(2)).until(()->{
             long time = messageStore.getOffsetInQueueByTime(topic, 0, a);

File: store/src/test/java/org/apache/rocketmq/store/queue/QueueTestBase.java
Patch:
@@ -99,8 +99,8 @@ public MessageExtBrokerInner buildMessage(String topic, int batchNum) {
         msg.setQueueId(0);
         msg.setSysFlag(0);
         msg.setBornTimestamp(System.currentTimeMillis());
-        msg.setStoreHost(StoreHost);
-        msg.setBornHost(StoreHost);
+        msg.setStoreHost(storeHost);
+        msg.setBornHost(storeHost);
         MessageAccessor.putProperty(msg, MessageConst.PROPERTY_INNER_NUM, String.valueOf(batchNum));
         msg.setPropertiesString(MessageDecoder.messageProperties2String(msg.getProperties()));
         if (batchNum > 1) {

File: store/src/test/java/org/apache/rocketmq/store/timer/TimerLogTest.java
Patch:
@@ -26,7 +26,9 @@
 import java.util.List;
 import java.util.Set;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertArrayEquals;
 
 public class TimerLogTest {
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ConsumerManageProcessor.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.rocketmq.broker.processor;
 
 import io.netty.channel.ChannelHandlerContext;
-import java.util.Set;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
 import org.apache.rocketmq.common.constant.LoggerName;
@@ -155,8 +154,7 @@ private RemotingCommand updateConsumerOffset(ChannelHandlerContext ctx, Remoting
         if (rewriteResult != null) {
             return rewriteResult;
         }
-        Set<String> topicSets = this.brokerController.getTopicConfigManager().getTopicConfigTable().keySet();
-        if (topicSets.contains(requestHeader.getTopic())) {
+        if (this.brokerController.getTopicConfigManager().containsTopic(requestHeader.getTopic())) {
             this.brokerController.getConsumerOffsetManager().commitOffset(RemotingHelper.parseChannelRemoteAddr(ctx.channel()), requestHeader.getConsumerGroup(),
                 requestHeader.getTopic(), requestHeader.getQueueId(), requestHeader.getCommitOffset());
             response.setCode(ResponseCode.SUCCESS);

File: acl/src/test/java/org/apache/rocketmq/acl/common/AclSignerTest.java
Patch:
@@ -22,12 +22,12 @@
 public class AclSignerTest {
 
     @Test(expected = Exception.class)
-    public void calSignatureExceptionTest(){
+    public void calSignatureExceptionTest() {
         AclSigner.calSignature(new byte[]{},"");
     }
 
     @Test
-    public void calSignatureTest(){
+    public void calSignatureTest() {
         String expectedSignature = "IUc8rrO/0gDch8CjObLQsW2rsiA=";
         Assert.assertEquals(expectedSignature, AclSigner.calSignature("RocketMQ", "12345678"));
         Assert.assertEquals(expectedSignature, AclSigner.calSignature("RocketMQ".getBytes(), "12345678"));

File: acl/src/test/java/org/apache/rocketmq/acl/plain/PlainAccessControlFlowTest.java
Patch:
@@ -276,7 +276,6 @@ public void validateSendMessage(int requestCode,
         try {
             PlainAccessResource accessResource = (PlainAccessResource) plainAccessValidator.parse(
                 RemotingCommand.decode(buf), remoteAddr);
-            System.out.println(accessResource.getWhiteRemoteAddress());
             plainAccessValidator.validate(accessResource);
         } catch (RemotingCommandException e) {
             e.printStackTrace();

File: tools/src/test/java/org/apache/rocketmq/tools/command/CommandUtilTest.java
Patch:
@@ -68,7 +68,7 @@ public void setup() throws MQClientException, NoSuchFieldException, IllegalAcces
         HashMap<String, BrokerData> brokerAddrTable = new HashMap<>();
         HashMap<String, Set<String>> clusterAddrTable = new HashMap<>();
         HashMap<Long, String> brokerAddrs = new HashMap<>();
-        brokerAddrs.put(1234l, "127.0.0.1:10911");
+        brokerAddrs.put(1234L, "127.0.0.1:10911");
         BrokerData brokerData = new BrokerData();
         brokerData.setBrokerName("default-broker");
         brokerData.setCluster("default-cluster");

File: tools/src/test/java/org/apache/rocketmq/tools/command/acl/GetAccessConfigSubCommandTest.java
Patch:
@@ -16,7 +16,9 @@
  */
 package org.apache.rocketmq.tools.command.acl;
 
-import org.apache.commons.cli.*;
+import org.apache.commons.cli.Options;
+import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.PosixParser;
 import org.apache.rocketmq.srvutil.ServerUtil;
 import org.junit.Test;
 

File: tools/src/test/java/org/apache/rocketmq/tools/command/consumer/GetConsumerConfigSubCommandTest.java
Patch:
@@ -19,14 +19,12 @@
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.PosixParser;
-import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.protocol.body.ClusterInfo;
 import org.apache.rocketmq.common.protocol.body.Connection;
 import org.apache.rocketmq.common.protocol.body.ConsumerConnection;
 import org.apache.rocketmq.common.protocol.route.BrokerData;
 import org.apache.rocketmq.srvutil.ServerUtil;
 import org.apache.rocketmq.tools.command.SubCommandException;
-import org.apache.rocketmq.tools.command.server.NameServerMocker;
 import org.apache.rocketmq.tools.command.server.ServerResponseMocker;
 import org.junit.After;
 import org.junit.Before;

File: tools/src/test/java/org/apache/rocketmq/tools/command/message/ConsumeMessageCommandTest.java
Patch:
@@ -51,7 +51,7 @@
 public class ConsumeMessageCommandTest {
     private static ConsumeMessageCommand consumeMessageCommand;
 
-    private static PullResult PULL_RESULT = mockPullResult();
+    private static final PullResult PULL_RESULT = mockPullResult();
 
     private static PullResult mockPullResult() {
         MessageExt msg = new MessageExt();

File: tools/src/test/java/org/apache/rocketmq/tools/command/message/QueryMsgTraceByIdSubCommandTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.PosixParser;
-import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.protocol.route.BrokerData;

File: tools/src/test/java/org/apache/rocketmq/tools/monitor/MonitorServiceTest.java
Patch:
@@ -118,7 +118,7 @@ public static void init() throws NoSuchFieldException, IllegalAccessException, R
         TopicRouteData topicRouteData = new TopicRouteData();
         List<BrokerData> brokerDatas = new ArrayList<>();
         HashMap<Long, String> brokerAddrs = new HashMap<>();
-        brokerAddrs.put(1234l, "127.0.0.1:10911");
+        brokerAddrs.put(1234L, "127.0.0.1:10911");
         BrokerData brokerData = new BrokerData();
         brokerData.setCluster("default-cluster");
         brokerData.setBrokerName("default-broker");

File: controller/src/test/java/org/apache/rocketmq/controller/impl/controller/ControllerManagerTest.java
Patch:
@@ -104,7 +104,6 @@ public ControllerManager waitLeader(final List<ControllerManager> controllers) t
             for (ControllerManager controllerManager : controllers) {
                 final DLedgerController controller = (DLedgerController) controllerManager.getController();
                 if (controller.getMemberState().getSelfId().equals(leaderId) && controller.isLeaderState()) {
-                    System.out.println("New leader " + leaderId);
                     return controllerManager;
                 }
             }
@@ -169,7 +168,6 @@ public void testSomeApi() throws Exception {
             heartbeatRequestHeader.setBrokerName("broker1");
             heartbeatRequestHeader.setBrokerAddr("127.0.0.1:8001");
             final RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.BROKER_HEARTBEAT, heartbeatRequestHeader);
-            System.out.println("send heartbeat success");
             try {
                 final RemotingCommand remotingCommand = this.remotingClient1.invokeSync(leaderAddr, request, 3000);
             } catch (Exception e) {
@@ -196,7 +194,6 @@ public void tearDown() {
             controller.shutdown();
         }
         for (String dir : this.baseDirs) {
-            System.out.println("Delete file " + dir);
             new File(dir).delete();
         }
         this.remotingClient.shutdown();

File: controller/src/test/java/org/apache/rocketmq/controller/impl/controller/impl/DefaultBrokerHeartbeatManagerTest.java
Patch:
@@ -41,7 +41,6 @@ public void init() {
     public void testDetectBrokerAlive() throws InterruptedException {
         final CountDownLatch latch = new CountDownLatch(1);
         this.heartbeatManager.addBrokerLifecycleListener((clusterName, brokerName, brokerAddress, brokerId) -> {
-            System.out.println("Broker shutdown:" + brokerAddress);
             latch.countDown();
         });
         this.heartbeatManager.registerBroker("cluster1", "broker1", "127.0.0.1:7000", 1L, 3000L, null, 1, 1L);

File: remoting/src/test/java/org/apache/rocketmq/remoting/protocol/RemotingCommandTest.java
Patch:
@@ -208,7 +208,7 @@ public void testEncodeAndDecode_FilledBodyWithExtFields() throws RemotingCommand
             CommandCustomHeader decodedHeader = decodedCommand.decodeCommandCustomHeader(ExtFieldsHeader.class);
             assertThat(((ExtFieldsHeader) decodedHeader).getStringValue()).isEqualTo("bilibili");
             assertThat(((ExtFieldsHeader) decodedHeader).getIntValue()).isEqualTo(2333);
-            assertThat(((ExtFieldsHeader) decodedHeader).getLongValue()).isEqualTo(23333333l);
+            assertThat(((ExtFieldsHeader) decodedHeader).getLongValue()).isEqualTo(23333333L);
             assertThat(((ExtFieldsHeader) decodedHeader).isBooleanValue()).isEqualTo(true);
             assertThat(((ExtFieldsHeader) decodedHeader).getDoubleValue()).isBetween(0.617, 0.619);
         } catch (RemotingCommandException e) {
@@ -281,7 +281,7 @@ public void checkFields() throws RemotingCommandException {
 class ExtFieldsHeader implements CommandCustomHeader {
     private String stringValue = "bilibili";
     private int intValue = 2333;
-    private long longValue = 23333333l;
+    private long longValue = 23333333L;
     private boolean booleanValue = true;
     private double doubleValue = 0.618;
 

File: broker/src/test/java/org/apache/rocketmq/broker/client/ProducerManagerTest.java
Patch:
@@ -69,8 +69,8 @@ public void scanNotActiveChannel() throws Exception {
         assertThat(producerManager.findChannel("clientId")).isNotNull();
         Field field = ProducerManager.class.getDeclaredField("CHANNEL_EXPIRED_TIMEOUT");
         field.setAccessible(true);
-        long CHANNEL_EXPIRED_TIMEOUT = field.getLong(producerManager);
-        clientInfo.setLastUpdateTimestamp(System.currentTimeMillis() - CHANNEL_EXPIRED_TIMEOUT - 10);
+        long channelExpiredTimeout = field.getLong(producerManager);
+        clientInfo.setLastUpdateTimestamp(System.currentTimeMillis() - channelExpiredTimeout - 10);
         when(channel.close()).thenReturn(mock(ChannelFuture.class));
         producerManager.scanNotActiveChannel();
         assertThat(producerManager.getGroupChannelTable().get(group)).isNull();

File: broker/src/test/java/org/apache/rocketmq/broker/controller/ReplicasManagerTest.java
Patch:
@@ -139,7 +139,7 @@ public void after() {
     }
 
     @Test
-    public void changeBrokerRoleTest(){
+    public void changeBrokerRoleTest() {
         // not equal to localAddress
         Assertions.assertThatCode(() -> replicasManager.changeBrokerRole(NEW_MASTER_ADDRESS, NEW_MASTER_EPOCH, OLD_MASTER_EPOCH, SLAVE_BROKER_ID))
             .doesNotThrowAnyException();

File: broker/src/test/java/org/apache/rocketmq/broker/pagecache/OneMessageTransferTest.java
Patch:
@@ -26,15 +26,15 @@
 public class OneMessageTransferTest {
 
     @Test
-    public void OneMessageTransferTest(){
+    public void OneMessageTransferTest() {
         ByteBuffer byteBuffer = ByteBuffer.allocate(20);
         byteBuffer.putInt(20);
         SelectMappedBufferResult selectMappedBufferResult = new SelectMappedBufferResult(0,byteBuffer,20,new DefaultMappedFile());
         OneMessageTransfer manyMessageTransfer = new OneMessageTransfer(byteBuffer,selectMappedBufferResult);
     }
 
     @Test
-    public void OneMessageTransferCountTest(){
+    public void OneMessageTransferCountTest() {
         ByteBuffer byteBuffer = ByteBuffer.allocate(20);
         byteBuffer.putInt(20);
         SelectMappedBufferResult selectMappedBufferResult = new SelectMappedBufferResult(0,byteBuffer,20,new DefaultMappedFile());
@@ -43,7 +43,7 @@ public void OneMessageTransferCountTest(){
     }
 
     @Test
-    public void OneMessageTransferPosTest(){
+    public void OneMessageTransferPosTest() {
         ByteBuffer byteBuffer = ByteBuffer.allocate(20);
         byteBuffer.putInt(20);
         SelectMappedBufferResult selectMappedBufferResult = new SelectMappedBufferResult(0,byteBuffer,20,new DefaultMappedFile());

File: broker/src/test/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessorTest.java
Patch:
@@ -103,7 +103,7 @@ public class AdminBrokerProcessorTest {
     @Spy
     private BrokerController
         brokerController = new BrokerController(new BrokerConfig(), new NettyServerConfig(), new NettyClientConfig(),
-        new MessageStoreConfig());
+            new MessageStoreConfig());
 
     @Mock
     private MessageStore messageStore;

File: broker/src/test/java/org/apache/rocketmq/broker/processor/PopReviveServiceTest.java
Patch:
@@ -32,7 +32,6 @@
 import org.apache.rocketmq.common.utils.DataConverter;
 import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.apache.rocketmq.store.MessageStore;
-import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 import org.apache.rocketmq.store.pop.AckMsg;
 import org.apache.rocketmq.store.pop.PopCheckPoint;

File: broker/src/test/java/org/apache/rocketmq/broker/processor/SendMessageProcessorTest.java
Patch:
@@ -140,7 +140,6 @@ public void sendMessageAfter(SendMessageContext context) {
         sendMessageHookList.add(sendMessageHook);
         sendMessageProcessor.registerSendMessageHook(sendMessageHookList);
         assertPutResult(ResponseCode.SUCCESS);
-        System.out.println(sendMessageContext[0]);
         assertThat(sendMessageContext[0]).isNotNull();
         assertThat(sendMessageContext[0].getTopic()).isEqualTo(topic);
         assertThat(sendMessageContext[0].getProducerGroup()).isEqualTo(group);
@@ -268,7 +267,6 @@ public void sendMessageAfter(SendMessageContext context) {
         sendMessageHookList.add(sendMessageHook);
         sendMessageProcessor.registerSendMessageHook(sendMessageHookList);
         assertPutResult(ResponseCode.FLOW_CONTROL);
-        System.out.println(sendMessageContext[0]);
         assertThat(sendMessageContext[0]).isNotNull();
         assertThat(sendMessageContext[0].getTopic()).isEqualTo(topic);
         assertThat(sendMessageContext[0].getProducerGroup()).isEqualTo(group);

File: broker/src/test/java/org/apache/rocketmq/broker/topic/TopicQueueMappingManagerTest.java
Patch:
@@ -44,12 +44,12 @@
 public class TopicQueueMappingManagerTest {
     @Mock
     private BrokerController brokerController;
-    private static final String broker1Name = "broker1";
+    private static final String BROKER1_NAME = "broker1";
 
     @Before
     public void before() {
         BrokerConfig brokerConfig = new BrokerConfig();
-        brokerConfig.setBrokerName(broker1Name);
+        brokerConfig.setBrokerName(BROKER1_NAME);
         when(brokerController.getBrokerConfig()).thenReturn(brokerConfig);
 
         MessageStoreConfig messageStoreConfig = new MessageStoreConfig();
@@ -74,7 +74,7 @@ public void testEncodeDecode() throws Exception {
         Map<String, TopicQueueMappingDetail> mappingDetailMap = new HashMap<>();
         TopicQueueMappingManager topicQueueMappingManager = null;
         Set<String> brokers = new HashSet<String>();
-        brokers.add(broker1Name);
+        brokers.add(BROKER1_NAME);
         {
             for (int i = 0; i < 10; i++) {
                 String topic = UUID.randomUUID().toString();

File: tools/src/main/java/org/apache/rocketmq/tools/command/cluster/ClusterListSubCommand.java
Patch:
@@ -251,14 +251,15 @@ private void printClusterBaseInfo(final Set<String> clusterNames,
                             }
 
                             version = kvTable.getTable().get("brokerVersionDesc");
-                            {
+
+                            if (StringUtils.isNotBlank(putTps)) {
                                 String[] tpss = putTps.split(" ");
                                 if (tpss.length > 0) {
                                     in = Double.parseDouble(tpss[0]);
                                 }
                             }
 
-                            {
+                            if (StringUtils.isNotBlank(getTransferredTps)) {
                                 String[] tpss = getTransferredTps.split(" ");
                                 if (tpss.length > 0) {
                                     out = Double.parseDouble(tpss[0]);

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -142,6 +142,7 @@ public MQClientInstance(ClientConfig clientConfig, int instanceIndex, String cli
         this.nettyClientConfig = new NettyClientConfig();
         this.nettyClientConfig.setClientCallbackExecutorThreads(clientConfig.getClientCallbackExecutorThreads());
         this.nettyClientConfig.setUseTLS(clientConfig.isUseTLS());
+        this.nettyClientConfig.setSocksProxyConfig(clientConfig.getSocksProxyConfig());
         ClientRemotingProcessor clientRemotingProcessor = new ClientRemotingProcessor(this);
         this.mQClientAPIImpl = new MQClientAPIImpl(this.nettyClientConfig, clientRemotingProcessor, rpcHook, clientConfig);
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/common/RemotingHelper.java
Patch:
@@ -37,6 +37,7 @@ public class RemotingHelper {
     public static final String ROCKETMQ_TRAFFIC = "RocketmqTraffic";
     public static final String ROCKETMQ_REMOTING = "RocketmqRemoting";
     public static final String DEFAULT_CHARSET = "UTF-8";
+    public static final String DEFAULT_CIDR_ALL = "0.0.0.0/0";
 
     private static final InternalLogger log = InternalLoggerFactory.getLogger(ROCKETMQ_REMOTING);
     private static final AttributeKey<String> REMOTE_ADDR_KEY = AttributeKey.valueOf("RemoteAddr");

File: common/src/main/java/org/apache/rocketmq/common/namesrv/DefaultTopAddressing.java
Patch:
@@ -51,7 +51,6 @@ public DefaultTopAddressing(final String wsAddr, final String unitName) {
         this.topAddressingList = loadCustomTopAddressing();
     }
 
-
     public DefaultTopAddressing(final String unitName, final Map<String, String> para, final String wsAddr) {
         this.wsAddr = wsAddr;
         this.unitName = unitName;

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java
Patch:
@@ -28,6 +28,7 @@
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Modifier;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -499,7 +500,7 @@ public ByteBuffer encodeHeader(final int bodyLength) {
         // header data
         result.put(headerData);
 
-        result.flip();
+        ((Buffer)result).flip();
 
         return result;
     }

File: tools/src/main/java/org/apache/rocketmq/tools/monitor/MonitorService.java
Patch:
@@ -196,14 +196,14 @@ private void reportUndoneMsgs(final String consumerGroup) {
         ConsumeStats cs = null;
         try {
             cs = defaultMQAdminExt.examineConsumeStats(consumerGroup);
-        } catch (Exception e) {
+        } catch (Exception ignore) {
             return;
         }
 
         ConsumerConnection cc = null;
         try {
             cc = defaultMQAdminExt.examineConsumerConnectionInfo(consumerGroup);
-        } catch (Exception e) {
+        } catch (Exception ignore) {
             return;
         }
 

File: client/src/main/java/org/apache/rocketmq/client/common/ThreadLocalIndex.java
Patch:
@@ -28,7 +28,6 @@ public int incrementAndGet() {
         Integer index = this.threadLocalIndex.get();
         if (null == index) {
             index = random.nextInt();
-            this.threadLocalIndex.set(index);
         }
         this.threadLocalIndex.set(++index);
         return Math.abs(index & POSITIVE_MASK);

File: client/src/main/java/org/apache/rocketmq/client/latency/MQFaultStrategy.java
Patch:
@@ -60,9 +60,7 @@ public MessageQueue selectOneMessageQueue(final TopicPublishInfo tpInfo, final S
             try {
                 int index = tpInfo.getSendWhichQueue().incrementAndGet();
                 for (int i = 0; i < tpInfo.getMessageQueueList().size(); i++) {
-                    int pos = Math.abs(index++) % tpInfo.getMessageQueueList().size();
-                    if (pos < 0)
-                        pos = 0;
+                    int pos = index++ % tpInfo.getMessageQueueList().size();
                     MessageQueue mq = tpInfo.getMessageQueueList().get(pos);
                     if (latencyFaultTolerance.isAvailable(mq.getBrokerName()))
                         return mq;

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/NamesrvStartup.java
Patch:
@@ -84,7 +84,6 @@ public static ControllerManager controllerManagerMain() {
 
     public static void parseCommandlineAndConfigFile(String[] args) throws Exception {
         System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, Integer.toString(MQVersion.CURRENT_VERSION));
-        //PackageConflictDetect.detectFastjson();
 
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         CommandLine commandLine = ServerUtil.parseCmdLine("mqnamesrv", args, buildCommandlineOptions(options), new PosixParser());

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/route/ZoneRouteRPCHook.java
Patch:
@@ -48,7 +48,7 @@ public void doAfterResponse(String remoteAddr, RemotingCommand request, Remoting
         if (response == null || response.getBody() == null || ResponseCode.SUCCESS != response.getCode()) {
             return;
         }
-        boolean zoneMode = Boolean.valueOf(request.getExtFields().get(MixAll.ZONE_MODE));
+        boolean zoneMode = Boolean.parseBoolean(request.getExtFields().get(MixAll.ZONE_MODE));
         if (!zoneMode) {
             return;
         }
@@ -90,7 +90,6 @@ private TopicRouteData filterByZoneName(TopicRouteData topicRouteData, String zo
                     continue;
                 }
                 brokerData.getBrokerAddrs().values()
-                    .stream()
                     .forEach(brokerAddr -> topicRouteData.getFilterServerTable().remove(brokerAddr));
             }
         }

File: tools/src/main/java/org/apache/rocketmq/tools/command/CommandUtil.java
Patch:
@@ -36,8 +36,7 @@
 
 public class CommandUtil {
 
-    private static final String ERROR_MESSAGE = "Make sure the specified clusterName exists or the name server " +
-        "connected to is correct.";
+    private static final String ERROR_MESSAGE = "Make sure the specified clusterName exists or the name server connected to is correct.";
 
     public static final String NO_MASTER_PLACEHOLDER = "NO_MASTER";
 

File: example/src/main/java/org/apache/rocketmq/example/simple/OnewayProducer.java
Patch:
@@ -18,7 +18,8 @@
 
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
 import org.apache.rocketmq.common.message.Message;
-import org.apache.rocketmq.remoting.common.RemotingHelper;
+
+import java.nio.charset.StandardCharsets;
 
 public class OnewayProducer {
     public static void main(String[] args) throws Exception {
@@ -33,7 +34,7 @@ public static void main(String[] args) throws Exception {
             Message msg = new Message("TopicTest" /* Topic */,
                     "TagA" /* Tag */,
                     ("Hello RocketMQ " +
-                            i).getBytes(RemotingHelper.DEFAULT_CHARSET) /* Message body */
+                            i).getBytes(StandardCharsets.UTF_8) /* Message body */
             );
             //Call send message to deliver message to one of brokers.
             producer.sendOneway(msg);

File: example/src/main/java/org/apache/rocketmq/example/namespace/ProducerWithNamespace.java
Patch:
@@ -16,11 +16,12 @@
  */
 package org.apache.rocketmq.example.namespace;
 
-import java.nio.charset.StandardCharsets;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.common.message.Message;
 
+import java.nio.charset.StandardCharsets;
+
 public class ProducerWithNamespace {
 
     public static final String NAMESPACE = "InstanceTest";
@@ -45,5 +46,6 @@ public static void main(String[] args) throws Exception {
                 e.printStackTrace();
             }
         }
+        producer.shutdown();
     }
 }
\ No newline at end of file

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -69,8 +69,8 @@
 import org.apache.rocketmq.broker.offset.LmqConsumerOffsetManager;
 import org.apache.rocketmq.broker.out.BrokerOuterAPI;
 import org.apache.rocketmq.broker.plugin.BrokerAttachedPlugin;
-import org.apache.rocketmq.broker.plugin.MessageStoreFactory;
-import org.apache.rocketmq.broker.plugin.MessageStorePluginContext;
+import org.apache.rocketmq.store.plugin.MessageStoreFactory;
+import org.apache.rocketmq.store.plugin.MessageStorePluginContext;
 import org.apache.rocketmq.broker.processor.AckMessageProcessor;
 import org.apache.rocketmq.broker.processor.AdminBrokerProcessor;
 import org.apache.rocketmq.broker.processor.ChangeInvisibleTimeProcessor;
@@ -729,7 +729,7 @@ public boolean initialize() throws CloneNotSupportedException {
                 }
                 this.brokerStats = new BrokerStats(defaultMessageStore);
                 //load plugin
-                MessageStorePluginContext context = new MessageStorePluginContext(this, messageStoreConfig, brokerStatsManager, messageArrivingListener);
+                MessageStorePluginContext context = new MessageStorePluginContext(messageStoreConfig, brokerStatsManager, messageArrivingListener, brokerConfig, configuration);
                 this.messageStore = MessageStoreFactory.build(context, defaultMessageStore);
                 this.messageStore.getDispatcherList().addFirst(new CommitLogDispatcherCalcBitMap(this.brokerConfig, this.consumerFilterManager));
                 if (this.brokerConfig.isEnableControllerMode()) {

File: store/src/main/java/org/apache/rocketmq/store/plugin/AbstractPluginMessageStore.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.broker.plugin;
+package org.apache.rocketmq.store.plugin;
 
 import java.nio.ByteBuffer;
 import java.util.HashMap;

File: store/src/main/java/org/apache/rocketmq/store/ConsumeQueue.java
Patch:
@@ -175,6 +175,7 @@ public void recover() {
         }
     }
 
+    @Override
     public long getTotalSize() {
         long totalSize = this.mappedFileQueue.getTotalFileSize();
         if (isExtReadEnable()) {

File: remoting/src/main/java/org/apache/rocketmq/remoting/common/RemotingHelper.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public class RemotingHelper {
+    public static final String ROCKETMQ_TRAFFIC = "RocketmqTraffic";
     public static final String ROCKETMQ_REMOTING = "RocketmqRemoting";
     public static final String DEFAULT_CHARSET = "UTF-8";
 

File: broker/src/main/java/org/apache/rocketmq/broker/util/HookUtils.java
Patch:
@@ -155,6 +155,9 @@ public static boolean checkIfTimerMessage(MessageExtBrokerInner msg) {
             if (null != msg.getProperty(MessageConst.PROPERTY_TIMER_DELAY_SEC)) {
                 MessageAccessor.clearProperty(msg, MessageConst.PROPERTY_TIMER_DELAY_SEC);
             }
+            if (null != msg.getProperty(MessageConst.PROPERTY_TIMER_DELAY_MS)) {
+                MessageAccessor.clearProperty(msg, MessageConst.PROPERTY_TIMER_DELAY_MS);
+            }
             return false;
             //return this.defaultMessageStore.getMessageStoreConfig().isTimerInterceptDelayLevel();
         }

File: acl/src/main/java/org/apache/rocketmq/acl/common/Permission.java
Patch:
@@ -50,7 +50,7 @@ public static boolean checkPermission(byte neededPerm, byte ownedPerm) {
             return false;
         }
         if ((neededPerm & ANY) > 0) {
-            return ((ownedPerm & PUB) > 0) || ((ownedPerm & SUB) > 0);
+            return (ownedPerm & PUB) > 0 || (ownedPerm & SUB) > 0;
         }
         return (neededPerm & ownedPerm) > 0;
     }

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -1510,7 +1510,7 @@ public void start() throws Exception {
 
         this.shouldStartTime = System.currentTimeMillis() + messageStoreConfig.getDisappearTimeAfterStart();
 
-        if ((messageStoreConfig.getTotalReplicas() > 1 && this.brokerConfig.isEnableSlaveActingMaster()) || this.brokerConfig.isEnableControllerMode()) {
+        if (messageStoreConfig.getTotalReplicas() > 1 && this.brokerConfig.isEnableSlaveActingMaster() || this.brokerConfig.isEnableControllerMode()) {
             isIsolated = true;
         }
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -842,7 +842,7 @@ private RemotingCommand rewriteRequestForStaticTopic(SearchOffsetRequestHeader r
                     }
                     SearchOffsetResponseHeader offsetResponseHeader = (SearchOffsetResponseHeader) rpcResponse.getHeader();
                     if (offsetResponseHeader.getOffset() < 0
-                        || (item.checkIfEndOffsetDecided() && offsetResponseHeader.getOffset() >= item.getEndOffset())) {
+                        || item.checkIfEndOffsetDecided() && offsetResponseHeader.getOffset() >= item.getEndOffset()) {
                         continue;
                     } else {
                         offset = item.computeStaticQueueOffsetStrictly(offsetResponseHeader.getOffset());

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
Patch:
@@ -173,7 +173,7 @@ protected List<MessageExt> getReviveMessage(long offset, int queueId) {
 
     private boolean reachTail(PullResult pullResult, long offset) {
         return pullResult.getPullStatus() == PullStatus.NO_NEW_MSG
-            || (pullResult.getPullStatus() == PullStatus.OFFSET_ILLEGAL && offset == pullResult.getMaxOffset());
+            || pullResult.getPullStatus() == PullStatus.OFFSET_ILLEGAL && offset == pullResult.getMaxOffset();
     }
 
     private MessageExt getBizMessage(String topic, long offset, int queueId, String brokerName) {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -438,7 +438,7 @@ public void run() {
             final Object objLock = messageQueueLock.fetchLockObject(this.messageQueue);
             synchronized (objLock) {
                 if (MessageModel.BROADCASTING.equals(ConsumeMessageOrderlyService.this.defaultMQPushConsumerImpl.messageModel())
-                    || (this.processQueue.isLocked() && !this.processQueue.isLockExpired())) {
+                    || this.processQueue.isLocked() && !this.processQueue.isLockExpired()) {
                     final long beginTime = System.currentTimeMillis();
                     for (boolean continueConsume = true; continueConsume; ) {
                         if (this.processQueue.isDropped()) {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -726,8 +726,8 @@ public void sendMessageBack(MessageExt msg, int delayLevel, final MessageQueue m
     private void sendMessageBack(MessageExt msg, int delayLevel, final String brokerName, final MessageQueue mq)
         throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
         try {
-            if ((brokerName != null && brokerName.startsWith(MixAll.LOGICAL_QUEUE_MOCK_BROKER_PREFIX))
-                || (mq != null && mq.getBrokerName().startsWith(MixAll.LOGICAL_QUEUE_MOCK_BROKER_PREFIX))) {
+            if (brokerName != null && brokerName.startsWith(MixAll.LOGICAL_QUEUE_MOCK_BROKER_PREFIX)
+                || mq != null && mq.getBrokerName().startsWith(MixAll.LOGICAL_QUEUE_MOCK_BROKER_PREFIX)) {
                 sendMessageBackAsNormalMessage(msg);
             } else {
                 String brokerAddr = (null != brokerName) ? this.mQClientFactory.findBrokerAddressInPublish(brokerName)

File: common/src/main/java/org/apache/rocketmq/common/DataVersion.java
Patch:
@@ -82,7 +82,7 @@ public boolean equals(final Object o) {
             return counter.longValue() == version.counter.longValue();
         }
 
-        return (null == counter) && (null == version.counter);
+        return null == counter && null == version.counter;
 
     }
 

File: common/src/main/java/org/apache/rocketmq/common/filter/impl/PolishExpr.java
Patch:
@@ -97,8 +97,8 @@ private static List<Op> participle(String expression) {
         for (int i = 0; i < size; i++) {
             int chValue = (int) expression.charAt(i);
 
-            if ((97 <= chValue && chValue <= 122) || (65 <= chValue && chValue <= 90)
-                || (49 <= chValue && chValue <= 57) || 95 == chValue) {
+            if (97 <= chValue && chValue <= 122 || 65 <= chValue && chValue <= 90
+                || 49 <= chValue && chValue <= 57 || 95 == chValue) {
 
                 if (Type.OPERATOR == preType || Type.SEPAERATOR == preType || Type.NULL == preType
                     || Type.PARENTHESIS == preType) {

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/ConsumerRunningInfo.java
Patch:
@@ -141,7 +141,7 @@ public static String analyzeProcessQueue(final String clientId, ConsumerRunningI
                             mq,
                             System.currentTimeMillis() - pq.getLastLockTimestamp()));
                     } else {
-                        if (pq.isDroped() && (pq.getTryUnlockTimes() > 0)) {
+                        if (pq.isDroped() && pq.getTryUnlockTimes() > 0) {
                             sb.append(String.format("%s %s unlock %d times, still failed%n",
                                 clientId,
                                 mq,

File: common/src/main/java/org/apache/rocketmq/common/statictopic/TopicQueueMappingDetail.java
Patch:
@@ -97,8 +97,8 @@ public static TopicQueueMappingInfo cloneAsMappingInfo(TopicQueueMappingDetail m
     public static boolean checkIfAsPhysical(TopicQueueMappingDetail mappingDetail, Integer globalId) {
         List<LogicQueueMappingItem> mappingItems = getMappingInfo(mappingDetail, globalId);
         return mappingItems == null
-                || (mappingItems.size() == 1
-                &&  mappingItems.get(0).getLogicOffset() == 0);
+                || mappingItems.size() == 1
+                &&  mappingItems.get(0).getLogicOffset() == 0;
     }
 
     public ConcurrentMap<Integer, List<LogicQueueMappingItem>> getHostedQueues() {

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DefaultBrokerHeartbeatManager.java
Patch:
@@ -140,7 +140,7 @@ public void onBrokerHeartbeat(String clusterName, String brokerAddr, Integer epo
         long realConfirmOffset = Optional.ofNullable(confirmOffset).orElse(-1L);
 
         prev.setLastUpdateTimestamp(System.currentTimeMillis());
-        if (realEpoch > prev.getEpoch() || (realEpoch == prev.getEpoch() && realMaxOffset > prev.getMaxOffset())) {
+        if (realEpoch > prev.getEpoch() || realEpoch == prev.getEpoch() && realMaxOffset > prev.getMaxOffset()) {
             prev.setEpoch(realEpoch);
             prev.setMaxOffset(realMaxOffset);
             prev.setConfirmOffset(realConfirmOffset);

File: logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java
Patch:
@@ -175,7 +175,7 @@ public void addAppender(final Appender newAppender) {
         }
 
         public void append(final LoggingEvent event) {
-            if ((dispatcher == null) || !dispatcher.isAlive() || (bufferSize <= 0)) {
+            if (dispatcher == null || !dispatcher.isAlive() || bufferSize <= 0) {
                 synchronized (appenderPipeline) {
                     appenderPipeline.appendLoopOnAppenders(event);
                 }
@@ -383,7 +383,7 @@ public void run() {
                             int bufferSize = buffer.size();
                             isActive = !parent.closed;
 
-                            while ((bufferSize == 0) && isActive) {
+                            while (bufferSize == 0 && isActive) {
                                 buffer.wait();
                                 bufferSize = buffer.size();
                                 isActive = !parent.closed;

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/ClientRequestProcessor.java
Patch:
@@ -61,7 +61,7 @@ public RemotingCommand getRouteInfoByTopic(ChannelHandlerContext ctx,
 
             byte[] content;
             Boolean standardJsonOnly = requestHeader.getAcceptStandardJsonOnly();
-            if (request.getVersion() >= MQVersion.Version.V4_9_4.ordinal() || (null != standardJsonOnly && standardJsonOnly)) {
+            if (request.getVersion() >= MQVersion.Version.V4_9_4.ordinal() || null != standardJsonOnly && standardJsonOnly) {
                 content = topicRouteData.encode(SerializerFeature.BrowserCompatible,
                     SerializerFeature.QuoteFieldNames, SerializerFeature.SkipTransientField,
                     SerializerFeature.MapSortField);

File: openmessaging/src/main/java/io/openmessaging/rocketmq/promise/DefaultPromise.java
Patch:
@@ -157,7 +157,7 @@ private void notifyListeners() {
     }
 
     private boolean isSuccess() {
-        return isDone() && (exception == null);
+        return isDone() && exception == null;
     }
 
     private void timeoutSoCancel() {

File: store/src/main/java/org/apache/rocketmq/store/ha/DefaultHAService.java
Patch:
@@ -99,8 +99,8 @@ public boolean isSlaveOK(final long masterPutWhere) {
         boolean result = this.connectionCount.get() > 0;
         result =
             result
-                && ((masterPutWhere - this.push2SlaveMaxOffset.get()) < this.defaultMessageStore
-                .getMessageStoreConfig().getHaMaxGapNotInSync());
+                && masterPutWhere - this.push2SlaveMaxOffset.get() < this.defaultMessageStore
+                .getMessageStoreConfig().getHaMaxGapNotInSync();
         return result;
     }
 

File: store/src/main/java/org/apache/rocketmq/store/index/IndexFile.java
Patch:
@@ -180,8 +180,8 @@ public long getEndPhyOffset() {
 
     public boolean isTimeMatched(final long begin, final long end) {
         boolean result = begin < this.indexHeader.getBeginTimestamp() && end > this.indexHeader.getEndTimestamp();
-        result = result || (begin >= this.indexHeader.getBeginTimestamp() && begin <= this.indexHeader.getEndTimestamp());
-        result = result || (end >= this.indexHeader.getBeginTimestamp() && end <= this.indexHeader.getEndTimestamp());
+        result = result || begin >= this.indexHeader.getBeginTimestamp() && begin <= this.indexHeader.getEndTimestamp();
+        result = result || end >= this.indexHeader.getBeginTimestamp() && end <= this.indexHeader.getEndTimestamp();
         return result;
     }
 
@@ -219,7 +219,7 @@ public void selectPhyOffset(final List<Long> phyOffsets, final String key, final
                         timeDiff *= 1000L;
 
                         long timeRead = this.indexHeader.getBeginTimestamp() + timeDiff;
-                        boolean timeMatched = (timeRead >= begin) && (timeRead <= end);
+                        boolean timeMatched = timeRead >= begin && timeRead <= end;
 
                         if (keyHash == keyHashRead && timeMatched) {
                             phyOffsets.add(phyOffsetRead);

File: store/src/main/java/org/apache/rocketmq/store/queue/BatchConsumeQueue.java
Patch:
@@ -504,7 +504,7 @@ boolean putBatchMessagePositionInfo(final long offset, final int size, final lon
         }
 
         long behind = System.currentTimeMillis() - storeTime;
-        if (behind > 10000 && (System.currentTimeMillis() % 10000 == 0)) {
+        if (behind > 10000 && System.currentTimeMillis() % 10000 == 0) {
             String flag = "LEVEL" + (behind / 10000);
             log.warn("Reput behind {} topic:{} queue:{} offset:{} behind:{}", flag, topic, queueId, offset, behind);
         }

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -1637,7 +1637,7 @@ public TopicConfigSerializeWrapper getUserTopicConfig(final String brokerAddr, f
         Iterator<Entry<String, TopicConfig>> iterator = topicConfigSerializeWrapper.getTopicConfigTable().entrySet().iterator();
         while (iterator.hasNext()) {
             String topic = iterator.next().getKey();
-            if (topicList.getTopicList().contains(topic) || (!specialTopic && (topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX) || topic.startsWith(MixAll.DLQ_GROUP_TOPIC_PREFIX)))) {
+            if (topicList.getTopicList().contains(topic) || !specialTopic && (topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX) || topic.startsWith(MixAll.DLQ_GROUP_TOPIC_PREFIX))) {
                 iterator.remove();
             }
         }

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -294,7 +294,7 @@ private static void printHelp() {
 
     private static SubCommand findSubCommand(final String name) {
         for (SubCommand cmd : SUB_COMMANDS) {
-            if (cmd.commandName().equalsIgnoreCase(name) || (cmd.commandAlias() != null && cmd.commandAlias().equalsIgnoreCase(name))) {
+            if (cmd.commandName().equalsIgnoreCase(name) || cmd.commandAlias() != null && cmd.commandAlias().equalsIgnoreCase(name)) {
                 return cmd;
             }
         }

File: tools/src/main/java/org/apache/rocketmq/tools/command/stats/StatsAllSubCommand.java
Patch:
@@ -91,8 +91,8 @@ public static void printTopicDetail(final DefaultMQAdminExt admin, final String
                 } catch (Exception e) {
                 }
 
-                if (!activeTopic || (inMsgCntToday > 0) ||
-                    (outMsgCntToday > 0)) {
+                if (!activeTopic || inMsgCntToday > 0 ||
+                    outMsgCntToday > 0) {
 
                     System.out.printf("%-64s  %-64s %12d %11.2f %11.2f %14d %14d%n",
                         UtilAll.frontStringAtLeast(topic, 64),
@@ -106,7 +106,7 @@ public static void printTopicDetail(final DefaultMQAdminExt admin, final String
                 }
             }
         } else {
-            if (!activeTopic || (inMsgCntToday > 0)) {
+            if (!activeTopic || inMsgCntToday > 0) {
 
                 System.out.printf("%-64s  %-64s %12d %11.2f %11s %14d %14s%n",
                     UtilAll.frontStringAtLeast(topic, 64),

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateStaticTopicSubCommand.java
Patch:
@@ -141,7 +141,7 @@ public void execute(final CommandLine commandLine, final Options options,
 
         try {
             defaultMQAdminExt.start();
-            if ((!commandLine.hasOption("b") && !commandLine.hasOption('c'))
+            if (!commandLine.hasOption("b") && !commandLine.hasOption('c')
                     || !commandLine.hasOption("qn")) {
                 ServerUtil.printCommandLineHelp("mqadmin " + this.commandName(), options);
                 return;

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/message/LocalMessageServiceTest.java
Patch:
@@ -114,7 +114,7 @@ public class LocalMessageServiceTest extends InitConfigAndLoggerTest {
     @Before
     public void setUp() throws Throwable {
         super.before();
-        ConfigurationManager.getProxyConfig().setNameSrvAddr("1.1.1.1");
+        ConfigurationManager.getProxyConfig().setNamesrvAddr("1.1.1.1");
         channelManager = new ChannelManager();
         Mockito.when(brokerControllerMock.getSendMessageProcessor()).thenReturn(sendMessageProcessorMock);
         Mockito.when(brokerControllerMock.getPopMessageProcessor()).thenReturn(popMessageProcessorMock);

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseIT.java
Patch:
@@ -152,7 +152,7 @@ public void setUp() throws Exception {
 
         ConfigurationManager.initEnv();
         ConfigurationManager.intConfig();
-        ConfigurationManager.getProxyConfig().setNameSrvAddr(nsAddr);
+        ConfigurationManager.getProxyConfig().setNamesrvAddr(nsAddr);
         // Set LongPollingReserveTimeInMillis to 500ms to reserve more time for IT
         ConfigurationManager.getProxyConfig().setLongPollingReserveTimeInMillis(500);
         ConfigurationManager.getProxyConfig().setRocketMQClusterName(brokerController1.getBrokerConfig().getBrokerClusterName());

File: broker/src/main/java/org/apache/rocketmq/broker/util/HookUtils.java
Patch:
@@ -155,6 +155,9 @@ public static boolean checkIfTimerMessage(MessageExtBrokerInner msg) {
             if (null != msg.getProperty(MessageConst.PROPERTY_TIMER_DELAY_SEC)) {
                 MessageAccessor.clearProperty(msg, MessageConst.PROPERTY_TIMER_DELAY_SEC);
             }
+            if (null != msg.getProperty(MessageConst.PROPERTY_TIMER_DELAY_MS)) {
+                MessageAccessor.clearProperty(msg, MessageConst.PROPERTY_TIMER_DELAY_MS);
+            }
             return false;
             //return this.defaultMessageStore.getMessageStoreConfig().isTimerInterceptDelayLevel();
         }

File: acl/src/main/java/org/apache/rocketmq/acl/common/Permission.java
Patch:
@@ -50,7 +50,7 @@ public static boolean checkPermission(byte neededPerm, byte ownedPerm) {
             return false;
         }
         if ((neededPerm & ANY) > 0) {
-            return ((ownedPerm & PUB) > 0) || ((ownedPerm & SUB) > 0);
+            return (ownedPerm & PUB) > 0 || (ownedPerm & SUB) > 0;
         }
         return (neededPerm & ownedPerm) > 0;
     }

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -1510,7 +1510,7 @@ public void start() throws Exception {
 
         this.shouldStartTime = System.currentTimeMillis() + messageStoreConfig.getDisappearTimeAfterStart();
 
-        if ((messageStoreConfig.getTotalReplicas() > 1 && this.brokerConfig.isEnableSlaveActingMaster()) || this.brokerConfig.isEnableControllerMode()) {
+        if (messageStoreConfig.getTotalReplicas() > 1 && this.brokerConfig.isEnableSlaveActingMaster() || this.brokerConfig.isEnableControllerMode()) {
             isIsolated = true;
         }
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -842,7 +842,7 @@ private RemotingCommand rewriteRequestForStaticTopic(SearchOffsetRequestHeader r
                     }
                     SearchOffsetResponseHeader offsetResponseHeader = (SearchOffsetResponseHeader) rpcResponse.getHeader();
                     if (offsetResponseHeader.getOffset() < 0
-                        || (item.checkIfEndOffsetDecided() && offsetResponseHeader.getOffset() >= item.getEndOffset())) {
+                        || item.checkIfEndOffsetDecided() && offsetResponseHeader.getOffset() >= item.getEndOffset()) {
                         continue;
                     } else {
                         offset = item.computeStaticQueueOffsetStrictly(offsetResponseHeader.getOffset());

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
Patch:
@@ -173,7 +173,7 @@ protected List<MessageExt> getReviveMessage(long offset, int queueId) {
 
     private boolean reachTail(PullResult pullResult, long offset) {
         return pullResult.getPullStatus() == PullStatus.NO_NEW_MSG
-            || (pullResult.getPullStatus() == PullStatus.OFFSET_ILLEGAL && offset == pullResult.getMaxOffset());
+            || pullResult.getPullStatus() == PullStatus.OFFSET_ILLEGAL && offset == pullResult.getMaxOffset();
     }
 
     private MessageExt getBizMessage(String topic, long offset, int queueId, String brokerName) {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -438,7 +438,7 @@ public void run() {
             final Object objLock = messageQueueLock.fetchLockObject(this.messageQueue);
             synchronized (objLock) {
                 if (MessageModel.BROADCASTING.equals(ConsumeMessageOrderlyService.this.defaultMQPushConsumerImpl.messageModel())
-                    || (this.processQueue.isLocked() && !this.processQueue.isLockExpired())) {
+                    || this.processQueue.isLocked() && !this.processQueue.isLockExpired()) {
                     final long beginTime = System.currentTimeMillis();
                     for (boolean continueConsume = true; continueConsume; ) {
                         if (this.processQueue.isDropped()) {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -726,8 +726,8 @@ public void sendMessageBack(MessageExt msg, int delayLevel, final MessageQueue m
     private void sendMessageBack(MessageExt msg, int delayLevel, final String brokerName, final MessageQueue mq)
         throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
         try {
-            if ((brokerName != null && brokerName.startsWith(MixAll.LOGICAL_QUEUE_MOCK_BROKER_PREFIX))
-                || (mq != null && mq.getBrokerName().startsWith(MixAll.LOGICAL_QUEUE_MOCK_BROKER_PREFIX))) {
+            if (brokerName != null && brokerName.startsWith(MixAll.LOGICAL_QUEUE_MOCK_BROKER_PREFIX)
+                || mq != null && mq.getBrokerName().startsWith(MixAll.LOGICAL_QUEUE_MOCK_BROKER_PREFIX)) {
                 sendMessageBackAsNormalMessage(msg);
             } else {
                 String brokerAddr = (null != brokerName) ? this.mQClientFactory.findBrokerAddressInPublish(brokerName)

File: common/src/main/java/org/apache/rocketmq/common/DataVersion.java
Patch:
@@ -82,7 +82,7 @@ public boolean equals(final Object o) {
             return counter.longValue() == version.counter.longValue();
         }
 
-        return (null == counter) && (null == version.counter);
+        return null == counter && null == version.counter;
 
     }
 

File: common/src/main/java/org/apache/rocketmq/common/filter/impl/PolishExpr.java
Patch:
@@ -97,8 +97,8 @@ private static List<Op> participle(String expression) {
         for (int i = 0; i < size; i++) {
             int chValue = (int) expression.charAt(i);
 
-            if ((97 <= chValue && chValue <= 122) || (65 <= chValue && chValue <= 90)
-                || (49 <= chValue && chValue <= 57) || 95 == chValue) {
+            if (97 <= chValue && chValue <= 122 || 65 <= chValue && chValue <= 90
+                || 49 <= chValue && chValue <= 57 || 95 == chValue) {
 
                 if (Type.OPERATOR == preType || Type.SEPAERATOR == preType || Type.NULL == preType
                     || Type.PARENTHESIS == preType) {

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/ConsumerRunningInfo.java
Patch:
@@ -141,7 +141,7 @@ public static String analyzeProcessQueue(final String clientId, ConsumerRunningI
                             mq,
                             System.currentTimeMillis() - pq.getLastLockTimestamp()));
                     } else {
-                        if (pq.isDroped() && (pq.getTryUnlockTimes() > 0)) {
+                        if (pq.isDroped() && pq.getTryUnlockTimes() > 0) {
                             sb.append(String.format("%s %s unlock %d times, still failed%n",
                                 clientId,
                                 mq,

File: common/src/main/java/org/apache/rocketmq/common/statictopic/TopicQueueMappingDetail.java
Patch:
@@ -97,8 +97,8 @@ public static TopicQueueMappingInfo cloneAsMappingInfo(TopicQueueMappingDetail m
     public static boolean checkIfAsPhysical(TopicQueueMappingDetail mappingDetail, Integer globalId) {
         List<LogicQueueMappingItem> mappingItems = getMappingInfo(mappingDetail, globalId);
         return mappingItems == null
-                || (mappingItems.size() == 1
-                &&  mappingItems.get(0).getLogicOffset() == 0);
+                || mappingItems.size() == 1
+                &&  mappingItems.get(0).getLogicOffset() == 0;
     }
 
     public ConcurrentMap<Integer, List<LogicQueueMappingItem>> getHostedQueues() {

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DefaultBrokerHeartbeatManager.java
Patch:
@@ -140,7 +140,7 @@ public void onBrokerHeartbeat(String clusterName, String brokerAddr, Integer epo
         long realConfirmOffset = Optional.ofNullable(confirmOffset).orElse(-1L);
 
         prev.setLastUpdateTimestamp(System.currentTimeMillis());
-        if (realEpoch > prev.getEpoch() || (realEpoch == prev.getEpoch() && realMaxOffset > prev.getMaxOffset())) {
+        if (realEpoch > prev.getEpoch() || realEpoch == prev.getEpoch() && realMaxOffset > prev.getMaxOffset()) {
             prev.setEpoch(realEpoch);
             prev.setMaxOffset(realMaxOffset);
             prev.setConfirmOffset(realConfirmOffset);

File: logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java
Patch:
@@ -175,7 +175,7 @@ public void addAppender(final Appender newAppender) {
         }
 
         public void append(final LoggingEvent event) {
-            if ((dispatcher == null) || !dispatcher.isAlive() || (bufferSize <= 0)) {
+            if (dispatcher == null || !dispatcher.isAlive() || bufferSize <= 0) {
                 synchronized (appenderPipeline) {
                     appenderPipeline.appendLoopOnAppenders(event);
                 }
@@ -383,7 +383,7 @@ public void run() {
                             int bufferSize = buffer.size();
                             isActive = !parent.closed;
 
-                            while ((bufferSize == 0) && isActive) {
+                            while (bufferSize == 0 && isActive) {
                                 buffer.wait();
                                 bufferSize = buffer.size();
                                 isActive = !parent.closed;

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/ClientRequestProcessor.java
Patch:
@@ -61,7 +61,7 @@ public RemotingCommand getRouteInfoByTopic(ChannelHandlerContext ctx,
 
             byte[] content;
             Boolean standardJsonOnly = requestHeader.getAcceptStandardJsonOnly();
-            if (request.getVersion() >= MQVersion.Version.V4_9_4.ordinal() || (null != standardJsonOnly && standardJsonOnly)) {
+            if (request.getVersion() >= MQVersion.Version.V4_9_4.ordinal() || null != standardJsonOnly && standardJsonOnly) {
                 content = topicRouteData.encode(SerializerFeature.BrowserCompatible,
                     SerializerFeature.QuoteFieldNames, SerializerFeature.SkipTransientField,
                     SerializerFeature.MapSortField);

File: openmessaging/src/main/java/io/openmessaging/rocketmq/promise/DefaultPromise.java
Patch:
@@ -157,7 +157,7 @@ private void notifyListeners() {
     }
 
     private boolean isSuccess() {
-        return isDone() && (exception == null);
+        return isDone() && exception == null;
     }
 
     private void timeoutSoCancel() {

File: store/src/main/java/org/apache/rocketmq/store/ha/DefaultHAService.java
Patch:
@@ -99,8 +99,8 @@ public boolean isSlaveOK(final long masterPutWhere) {
         boolean result = this.connectionCount.get() > 0;
         result =
             result
-                && ((masterPutWhere - this.push2SlaveMaxOffset.get()) < this.defaultMessageStore
-                .getMessageStoreConfig().getHaMaxGapNotInSync());
+                && masterPutWhere - this.push2SlaveMaxOffset.get() < this.defaultMessageStore
+                .getMessageStoreConfig().getHaMaxGapNotInSync();
         return result;
     }
 

File: store/src/main/java/org/apache/rocketmq/store/index/IndexFile.java
Patch:
@@ -180,8 +180,8 @@ public long getEndPhyOffset() {
 
     public boolean isTimeMatched(final long begin, final long end) {
         boolean result = begin < this.indexHeader.getBeginTimestamp() && end > this.indexHeader.getEndTimestamp();
-        result = result || (begin >= this.indexHeader.getBeginTimestamp() && begin <= this.indexHeader.getEndTimestamp());
-        result = result || (end >= this.indexHeader.getBeginTimestamp() && end <= this.indexHeader.getEndTimestamp());
+        result = result || begin >= this.indexHeader.getBeginTimestamp() && begin <= this.indexHeader.getEndTimestamp();
+        result = result || end >= this.indexHeader.getBeginTimestamp() && end <= this.indexHeader.getEndTimestamp();
         return result;
     }
 
@@ -219,7 +219,7 @@ public void selectPhyOffset(final List<Long> phyOffsets, final String key, final
                         timeDiff *= 1000L;
 
                         long timeRead = this.indexHeader.getBeginTimestamp() + timeDiff;
-                        boolean timeMatched = (timeRead >= begin) && (timeRead <= end);
+                        boolean timeMatched = timeRead >= begin && timeRead <= end;
 
                         if (keyHash == keyHashRead && timeMatched) {
                             phyOffsets.add(phyOffsetRead);

File: store/src/main/java/org/apache/rocketmq/store/queue/BatchConsumeQueue.java
Patch:
@@ -504,7 +504,7 @@ boolean putBatchMessagePositionInfo(final long offset, final int size, final lon
         }
 
         long behind = System.currentTimeMillis() - storeTime;
-        if (behind > 10000 && (System.currentTimeMillis() % 10000 == 0)) {
+        if (behind > 10000 && System.currentTimeMillis() % 10000 == 0) {
             String flag = "LEVEL" + (behind / 10000);
             log.warn("Reput behind {} topic:{} queue:{} offset:{} behind:{}", flag, topic, queueId, offset, behind);
         }

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -1637,7 +1637,7 @@ public TopicConfigSerializeWrapper getUserTopicConfig(final String brokerAddr, f
         Iterator<Entry<String, TopicConfig>> iterator = topicConfigSerializeWrapper.getTopicConfigTable().entrySet().iterator();
         while (iterator.hasNext()) {
             String topic = iterator.next().getKey();
-            if (topicList.getTopicList().contains(topic) || (!specialTopic && (topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX) || topic.startsWith(MixAll.DLQ_GROUP_TOPIC_PREFIX)))) {
+            if (topicList.getTopicList().contains(topic) || !specialTopic && (topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX) || topic.startsWith(MixAll.DLQ_GROUP_TOPIC_PREFIX))) {
                 iterator.remove();
             }
         }

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -294,7 +294,7 @@ private static void printHelp() {
 
     private static SubCommand findSubCommand(final String name) {
         for (SubCommand cmd : SUB_COMMANDS) {
-            if (cmd.commandName().equalsIgnoreCase(name) || (cmd.commandAlias() != null && cmd.commandAlias().equalsIgnoreCase(name))) {
+            if (cmd.commandName().equalsIgnoreCase(name) || cmd.commandAlias() != null && cmd.commandAlias().equalsIgnoreCase(name)) {
                 return cmd;
             }
         }

File: tools/src/main/java/org/apache/rocketmq/tools/command/stats/StatsAllSubCommand.java
Patch:
@@ -91,8 +91,8 @@ public static void printTopicDetail(final DefaultMQAdminExt admin, final String
                 } catch (Exception e) {
                 }
 
-                if (!activeTopic || (inMsgCntToday > 0) ||
-                    (outMsgCntToday > 0)) {
+                if (!activeTopic || inMsgCntToday > 0 ||
+                    outMsgCntToday > 0) {
 
                     System.out.printf("%-64s  %-64s %12d %11.2f %11.2f %14d %14d%n",
                         UtilAll.frontStringAtLeast(topic, 64),
@@ -106,7 +106,7 @@ public static void printTopicDetail(final DefaultMQAdminExt admin, final String
                 }
             }
         } else {
-            if (!activeTopic || (inMsgCntToday > 0)) {
+            if (!activeTopic || inMsgCntToday > 0) {
 
                 System.out.printf("%-64s  %-64s %12d %11.2f %11s %14d %14s%n",
                     UtilAll.frontStringAtLeast(topic, 64),

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateStaticTopicSubCommand.java
Patch:
@@ -141,7 +141,7 @@ public void execute(final CommandLine commandLine, final Options options,
 
         try {
             defaultMQAdminExt.start();
-            if ((!commandLine.hasOption("b") && !commandLine.hasOption('c'))
+            if (!commandLine.hasOption("b") && !commandLine.hasOption('c')
                     || !commandLine.hasOption("qn")) {
                 ServerUtil.printCommandLineHelp("mqadmin " + this.commandName(), options);
                 return;

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/message/LocalMessageServiceTest.java
Patch:
@@ -114,7 +114,7 @@ public class LocalMessageServiceTest extends InitConfigAndLoggerTest {
     @Before
     public void setUp() throws Throwable {
         super.before();
-        ConfigurationManager.getProxyConfig().setNameSrvAddr("1.1.1.1");
+        ConfigurationManager.getProxyConfig().setNamesrvAddr("1.1.1.1");
         channelManager = new ChannelManager();
         Mockito.when(brokerControllerMock.getSendMessageProcessor()).thenReturn(sendMessageProcessorMock);
         Mockito.when(brokerControllerMock.getPopMessageProcessor()).thenReturn(popMessageProcessorMock);

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseIT.java
Patch:
@@ -152,7 +152,7 @@ public void setUp() throws Exception {
 
         ConfigurationManager.initEnv();
         ConfigurationManager.intConfig();
-        ConfigurationManager.getProxyConfig().setNameSrvAddr(nsAddr);
+        ConfigurationManager.getProxyConfig().setNamesrvAddr(nsAddr);
         // Set LongPollingReserveTimeInMillis to 500ms to reserve more time for IT
         ConfigurationManager.getProxyConfig().setLongPollingReserveTimeInMillis(500);
         ConfigurationManager.getProxyConfig().setRocketMQClusterName(brokerController1.getBrokerConfig().getBrokerClusterName());

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -750,7 +750,7 @@ protected void scanChannelTablesOfNameServer() {
     private void scanAvailableNameSrv() {
         List<String> nameServerList = this.namesrvAddrList.get();
         if (nameServerList == null) {
-            LOGGER.warn("scanAvailableNameSrv Addresses of name server is empty!");
+            LOGGER.debug("scanAvailableNameSrv Addresses of name server is empty!");
             return;
         }
 

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -926,7 +926,7 @@ public CompletableFuture<PutMessageResult> asyncPutMessage(final MessageExtBroke
         PutMessageResult putMessageResult = new PutMessageResult(PutMessageStatus.PUT_OK, result);
 
         // Statistics
-        storeStatsService.getSinglePutMessageTopicTimesTotal(msg.getTopic()).add(1);
+        storeStatsService.getSinglePutMessageTopicTimesTotal(msg.getTopic()).add(result.getMsgNum());
         storeStatsService.getSinglePutMessageTopicSizeTotal(topic).add(result.getWroteBytes());
 
         return handleDiskFlushAndHA(putMessageResult, msg, needAckNums, needHandleHA);

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -816,7 +816,7 @@ public GetMessageResult getMessage(final String group, final String topic, final
                                 continue;
                             }
 
-                            this.storeStatsService.getGetMessageTransferredMsgCount().add(1);
+                            this.storeStatsService.getGetMessageTransferredMsgCount().add(cqUnit.getBatchNum());
                             getResult.addMessage(selectResult, cqUnit.getQueueOffset(), cqUnit.getBatchNum());
                             status = GetMessageStatus.FOUND;
                             nextPhyFileStartOffset = Long.MIN_VALUE;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/DefaultPullMessageResultHandler.java
Patch:
@@ -172,7 +172,7 @@ public void operationComplete(ChannelFuture future) throws Exception {
     }
 
     private boolean channelIsWritable(Channel channel, PullMessageRequestHeader requestHeader) {
-        if (this.brokerController.getBrokerConfig().isNetWorkFlowController()) {
+        if (this.brokerController.getBrokerConfig().isEnableNetWorkFlowControl()) {
             if (!channel.isWritable()) {
                 log.warn("channel {} not writable ,cid {}", channel.remoteAddress(), requestHeader.getConsumerGroup());
                 return false;

File: broker/src/test/java/org/apache/rocketmq/broker/processor/PullMessageProcessorTest.java
Patch:
@@ -83,10 +83,8 @@ public void init() {
         SubscriptionGroupManager subscriptionGroupManager = new SubscriptionGroupManager(brokerController);
         pullMessageProcessor = new PullMessageProcessor(brokerController);
         Channel mockChannel = mock(Channel.class);
-        when(mockChannel.isWritable()).thenReturn(true);
         when(mockChannel.remoteAddress()).thenReturn(new InetSocketAddress(1024));
         when(handlerContext.channel()).thenReturn(mockChannel);
-        when(handlerContext.channel().isWritable()).thenReturn(true);
         when(brokerController.getSubscriptionGroupManager()).thenReturn(subscriptionGroupManager);
         brokerController.getTopicConfigManager().getTopicConfigTable().put(topic, new TopicConfig());
         clientChannelInfo = new ClientChannelInfo(mockChannel);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -358,12 +358,12 @@ private RemotingCommand handlePutMessageResult(PutMessageResult putMessageResult
                 break;
             case WHEEL_TIMER_FLOW_CONTROL:
                 response.setCode(ResponseCode.SYSTEM_ERROR);
-                response.setRemark(String.format("send message too much, triggered the flow control max num limit is %d or the current value is greater than %d and less than %d, trigger random flow control",
+                response.setRemark(String.format("timer message is under flow control, max num limit is %d or the current value is greater than %d and less than %d, trigger random flow control",
                      this.brokerController.getMessageStoreConfig().getTimerCongestNumEachSlot() * 2L, this.brokerController.getMessageStoreConfig().getTimerCongestNumEachSlot(), this.brokerController.getMessageStoreConfig().getTimerCongestNumEachSlot() * 2L));
                 break;
             case WHEEL_TIMER_NOT_ENABLE:
                 response.setCode(ResponseCode.SYSTEM_ERROR);
-                response.setRemark(String.format("accurate delay is not enabled, timerWheelEnable is %s",
+                response.setRemark(String.format("accurate timer message is not enabled, timerWheelEnable is %s",
                      this.brokerController.getMessageStoreConfig().isTimerWheelEnable()));
             case SERVICE_NOT_AVAILABLE:
                 response.setCode(ResponseCode.SERVICE_NOT_AVAILABLE);

File: store/src/main/java/org/apache/rocketmq/store/PutMessageStatus.java
Patch:
@@ -32,6 +32,5 @@ public enum PutMessageStatus {
     LMQ_CONSUME_QUEUE_NUM_EXCEEDED,
     WHEEL_TIMER_FLOW_CONTROL,
     WHEEL_TIMER_MSG_ILLEGAL,
-    WHEEL_TIMER_NOT_ENABLE,
-    OS_PAGECACHE_BUSY
+    WHEEL_TIMER_NOT_ENABLE
 }

File: store/src/main/java/org/apache/rocketmq/store/timer/TimerMessageStore.java
Patch:
@@ -1062,7 +1062,7 @@ private int doPut(MessageExtBrokerInner message, boolean roll) throws Exception
                     case CREATE_MAPPED_FILE_FAILED:
                     case FLUSH_DISK_TIMEOUT:
                     case FLUSH_SLAVE_TIMEOUT:
-                    case OS_PAGECACHE_BUSY:
+                    case OS_PAGE_CACHE_BUSY:
                     case SLAVE_NOT_AVAILABLE:
                     case UNKNOWN_ERROR:
                     default:
@@ -1628,7 +1628,7 @@ public boolean isReject(long deliverTimeMs) {
         if (congestNum <= storeConfig.getTimerCongestNumEachSlot()) {
             return false;
         }
-        if (congestNum >= storeConfig.getTimerCongestNumEachSlot() * 2) {
+        if (congestNum >= storeConfig.getTimerCongestNumEachSlot() * 2L) {
             return true;
         }
         if (RANDOM.nextInt(1000) > 1000 * (congestNum - storeConfig.getTimerCongestNumEachSlot()) / (storeConfig.getTimerCongestNumEachSlot() + 0.1)) {

File: controller/src/test/java/org/apache/rocketmq/controller/impl/controller/impl/manager/ReplicasInfoManagerTest.java
Patch:
@@ -160,7 +160,7 @@ public void testElectMasterOldMasterStillAlive() {
         mockHeartbeatDataMasterStillAlive();
         final ControllerResult<ElectMasterResponseHeader> cResult = this.replicasInfoManager.electMaster(request,
             electPolicy);
-        assertEquals(ResponseCode.CONTROLLER_INVALID_REQUEST, cResult.getResponseCode());
+        assertEquals(ResponseCode.CONTROLLER_ELECT_MASTER_FAILED, cResult.getResponseCode());
     }
 
     @Test
@@ -213,7 +213,7 @@ public void testElectMaster() {
         final ElectMasterRequestHeader assignRequest = new ElectMasterRequestHeader("cluster1", "broker1", "127.0.0.1:9000");
         final ControllerResult<ElectMasterResponseHeader> cResult1 = this.replicasInfoManager.electMaster(assignRequest,
             new DefaultElectPolicy((clusterName, brokerAddress) -> brokerAddress.contains("127.0.0.1:9000"), null));
-        assertEquals(cResult1.getResponseCode(), ResponseCode.CONTROLLER_INVALID_REQUEST);
+        assertEquals(cResult1.getResponseCode(), ResponseCode.CONTROLLER_ELECT_MASTER_FAILED);
 
         final ElectMasterRequestHeader assignRequest1 = new ElectMasterRequestHeader("cluster1", "broker1", "127.0.0.1:9001");
         final ControllerResult<ElectMasterResponseHeader> cResult2 = this.replicasInfoManager.electMaster(assignRequest1,

File: client/src/main/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueAveragely.java
Patch:
@@ -32,7 +32,7 @@ public AllocateMessageQueueAveragely() {
     }
 
     public AllocateMessageQueueAveragely(InternalLogger log) {
-        this.log = log;
+        super(log);
     }
 
     @Override

File: client/src/main/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueAveragelyByCircle.java
Patch:
@@ -32,7 +32,7 @@ public AllocateMessageQueueAveragelyByCircle() {
     }
 
     public AllocateMessageQueueAveragelyByCircle(InternalLogger log) {
-        this.log = log;
+        super(log);
     }
 
     @Override

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ReceiptHandleGroup.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Function;
+import org.apache.rocketmq.common.utils.ConcurrentHashMapUtils;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 
 public class ReceiptHandleGroup {
@@ -74,7 +75,8 @@ public String toString() {
 
     public void put(String msgID, String handle, MessageReceiptHandle value) {
         long timeout = ConfigurationManager.getProxyConfig().getLockTimeoutMsInHandleGroup();
-        Map<String, HandleData> handleMap = receiptHandleMap.computeIfAbsent(msgID, msgIDKey -> new ConcurrentHashMap<>());
+        Map<String, HandleData> handleMap = ConcurrentHashMapUtils.computeIfAbsent((ConcurrentHashMap<String, Map<String, HandleData>>) this.receiptHandleMap,
+            msgID, msgIDKey -> new ConcurrentHashMap<>());
         handleMap.compute(handle, (handleKey, handleData) -> {
             if (handleData == null || handleData.needRemove) {
                 return new HandleData(value);

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessor.java
Patch:
@@ -40,6 +40,7 @@
 import org.apache.rocketmq.common.subscription.RetryPolicy;
 import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
+import org.apache.rocketmq.common.utils.ConcurrentHashMapUtils;
 import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.common.MessageReceiptHandle;
 import org.apache.rocketmq.proxy.common.ProxyContext;
@@ -239,7 +240,7 @@ protected void addReceiptHandle(ReceiptHandleGroupKey key, String msgID, String
         if (key == null) {
             return;
         }
-        receiptHandleGroupMap.computeIfAbsent(key,
+        ConcurrentHashMapUtils.computeIfAbsent(this.receiptHandleGroupMap, key,
             k -> new ReceiptHandleGroup()).put(msgID, receiptHandle, messageReceiptHandle);
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/channel/ChannelManager.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import org.apache.rocketmq.common.constant.LoggerName;
+import org.apache.rocketmq.common.utils.ConcurrentHashMapUtils;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -37,8 +38,7 @@ public SimpleChannel createChannel(ProxyContext context) {
             log.warn("ClientId is unexpected null or empty");
             return createChannelInner(context);
         }
-
-        SimpleChannel channel = clientIdChannelMap.computeIfAbsent(clientId, k -> createChannelInner(context));
+        SimpleChannel channel = ConcurrentHashMapUtils.computeIfAbsent(this.clientIdChannelMap,clientId, k -> createChannelInner(context));
         channel.updateLastAccessTime();
         return channel;
     }

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAService.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.protocol.body.HARuntimeInfo;
+import org.apache.rocketmq.common.utils.ConcurrentHashMapUtils;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.store.DefaultMessageStore;
@@ -237,7 +238,7 @@ public void maybeExpandInSyncStateSet(final String slaveAddress, final long slav
     }
 
     public void updateConnectionLastCaughtUpTime(final String slaveAddress, final long lastCaughtUpTimeMs) {
-        long prevTime = this.connectionCaughtUpTimeTable.computeIfAbsent(slaveAddress, k -> 0L);
+        Long prevTime = ConcurrentHashMapUtils.computeIfAbsent(this.connectionCaughtUpTimeTable, slaveAddress, k -> 0L);
         this.connectionCaughtUpTimeTable.put(slaveAddress, Math.max(prevTime, lastCaughtUpTimeMs));
     }
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -2094,7 +2094,7 @@ private HashMap<String, String> prepareRuntimeInfo() {
         if (this.brokerController.getMessageStoreConfig().isTimerWheelEnable()) {
             runtimeInfo.put("timerReadBehind", String.valueOf(this.brokerController.getMessageStore().getTimerMessageStore().getReadBehind()));
             runtimeInfo.put("timerOffsetBehind", String.valueOf(this.brokerController.getMessageStore().getTimerMessageStore().getOffsetBehind()));
-            runtimeInfo.put("timerCongestNum", String.valueOf(this.brokerController.getMessageStore().getTimerMessageStore().getALlCongestNum()));
+            runtimeInfo.put("timerCongestNum", String.valueOf(this.brokerController.getMessageStore().getTimerMessageStore().getAllCongestNum()));
             runtimeInfo.put("timerEnqueueTps", String.valueOf(this.brokerController.getMessageStore().getTimerMessageStore().getEnqueueTps()));
             runtimeInfo.put("timerDequeueTps", String.valueOf(this.brokerController.getMessageStore().getTimerMessageStore().getDequeueTps()));
         } else {

File: store/src/main/java/org/apache/rocketmq/store/timer/TimerMessageStore.java
Patch:
@@ -1603,7 +1603,7 @@ public void run() {
                             storeConfig.getBrokerRole(),
                             format(commitReadTimeMs), format(currReadTimeMs), format(currWriteTimeMs), getReadBehind(),
                             tmpQueueOffset, maxOffsetInQueue - tmpQueueOffset, timerCheckpoint.getMasterTimerQueueOffset() - tmpQueueOffset,
-                            enqueuePutQueue.size(), dequeueGetQueue.size(), dequeuePutQueue.size(), getALlCongestNum(), format(lastEnqueueButExpiredStoreTime));
+                            enqueuePutQueue.size(), dequeueGetQueue.size(), dequeuePutQueue.size(), getAllCongestNum(), format(lastEnqueueButExpiredStoreTime));
                     }
                     timerMetrics.persist();
                     waitForRunning(storeConfig.getTimerFlushIntervalMs());
@@ -1615,7 +1615,7 @@ public void run() {
         }
     }
 
-    public long getALlCongestNum() {
+    public long getAllCongestNum() {
         return timerWheel.getAllNum(currReadTimeMs);
     }
 

File: common/src/main/java/org/apache/rocketmq/common/protocol/ResponseCode.java
Patch:
@@ -88,6 +88,8 @@ public class ResponseCode extends RemotingSysResponseCode {
 
     public static final int BROKER_DISPATCH_NOT_COMPLETE = 212;
 
+    public static final int BROADCAST_CONSUMPTION = 213;
+
     public static final int FLOW_CONTROL = 215;
 
     public static final int NOT_LEADER_FOR_QUEUE = 501;

File: tools/src/main/java/org/apache/rocketmq/tools/admin/api/TrackType.java
Patch:
@@ -23,5 +23,6 @@ public enum TrackType {
     PULL,
     NOT_CONSUME_YET,
     NOT_ONLINE,
+    CONSUME_BROADCASTING,
     UNKNOWN
 }

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByIdSubCommand.java
Patch:
@@ -153,7 +153,7 @@ public static void printMsg(final DefaultMQAdminExt admin, final MessageExt msg,
             } else {
                 System.out.printf("%n%n");
                 for (MessageTrack mt : mtdList) {
-                    System.out.printf("%s", mt);
+                    System.out.printf("%s%n", mt);
                 }
             }
         } catch (Exception e) {

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java
Patch:
@@ -76,7 +76,7 @@ public class RouteInfoManager {
     private final Map<BrokerAddrInfo/* brokerAddr */, List<String>/* Filter Server */> filterServerTable;
     private final Map<String/* topic */, Map<String/*brokerName*/, TopicQueueMappingInfo>> topicQueueMappingInfoTable;
 
-    private final BatchUnRegisterService unRegisterService;
+    private final BatchUnregistrationService unRegisterService;
 
     private final NamesrvController namesrvController;
     private final NamesrvConfig namesrvConfig;
@@ -88,7 +88,7 @@ public RouteInfoManager(final NamesrvConfig namesrvConfig, NamesrvController nam
         this.brokerLiveTable = new ConcurrentHashMap<>(256);
         this.filterServerTable = new ConcurrentHashMap<>(256);
         this.topicQueueMappingInfoTable = new ConcurrentHashMap<>(1024);
-        this.unRegisterService = new BatchUnRegisterService(this, namesrvConfig);
+        this.unRegisterService = new BatchUnregistrationService(this, namesrvConfig);
         this.namesrvConfig = namesrvConfig;
         this.namesrvController = namesrvController;
     }

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -318,7 +318,7 @@ public void processResponseCommand(ChannelHandlerContext ctx, RemotingCommand cm
     private void executeInvokeCallback(final ResponseFuture responseFuture) {
         boolean runInThisThread = false;
         ExecutorService executor = this.getCallbackExecutor();
-        if (executor != null) {
+        if (executor != null && !executor.isShutdown()) {
             try {
                 executor.submit(() -> {
                     try {

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingServer.java
Patch:
@@ -219,7 +219,7 @@ public Thread newThread(Runnable r) {
                 .channel(useEpoll() ? EpollServerSocketChannel.class : NioServerSocketChannel.class)
                 .option(ChannelOption.SO_BACKLOG, 1024)
                 .option(ChannelOption.SO_REUSEADDR, true)
-                .option(ChannelOption.SO_KEEPALIVE, false)
+                .childOption(ChannelOption.SO_KEEPALIVE, false)
                 .childOption(ChannelOption.TCP_NODELAY, true)
                 .localAddress(new InetSocketAddress(this.nettyServerConfig.getListenPort()))
                 .childHandler(new ChannelInitializer<SocketChannel>() {

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicRouteInfoManager.java
Patch:
@@ -134,7 +134,7 @@ public void updateTopicRouteInfoFromNameServer(String topic, boolean isNeedUpdat
 
     private boolean updateTopicRouteTable(String topic, TopicRouteData topicRouteData) {
         TopicRouteData old = this.topicRouteTable.get(topic);
-        boolean changed = topicRouteData.topicRouteDataIsChange(old);
+        boolean changed = topicRouteData.topicRouteDataChanged(old);
         if (!changed) {
             if (!this.isNeedUpdateTopicRouteInfo(topic)) {
                 return false;

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -611,7 +611,7 @@ public boolean updateTopicRouteInfoFromNameServer(final String topic, boolean is
                     }
                     if (topicRouteData != null) {
                         TopicRouteData old = this.topicRouteTable.get(topic);
-                        boolean changed = topicRouteData.topicRouteDataIsChange(old);
+                        boolean changed = topicRouteData.topicRouteDataChanged(old);
                         if (!changed) {
                             changed = this.isNeedUpdateTopicRouteInfo(topic);
                         } else {

File: common/src/main/java/org/apache/rocketmq/common/protocol/route/TopicRouteData.java
Patch:
@@ -118,7 +118,7 @@ public TopicRouteData deepCloneTopicRouteData() {
         return topicRouteData;
     }
 
-    public boolean topicRouteDataIsChange(TopicRouteData oldData) {
+    public boolean topicRouteDataChanged(TopicRouteData oldData) {
         if (oldData == null)
             return true;
         TopicRouteData old = new TopicRouteData(oldData);

File: common/src/main/java/org/apache/rocketmq/common/rpc/ClientMetadata.java
Patch:
@@ -52,7 +52,7 @@ public void freshTopicRoute(String topic, TopicRouteData topicRouteData) {
             return;
         }
         TopicRouteData old = this.topicRouteTable.get(topic);
-        if (!topicRouteData.topicRouteDataIsChange(old)) {
+        if (!topicRouteData.topicRouteDataChanged(old)) {
             return ;
         }
         {

File: example/src/main/java/org/apache/rocketmq/example/simple/AsyncProducer.java
Patch:
@@ -32,6 +32,8 @@ public static void main(
 
         DefaultMQProducer producer = new DefaultMQProducer("Jodie_Daily_test");
         producer.start();
+        // suggest to on enableBackpressureForAsyncMode in heavy traffic, default is false
+        producer.setEnableBackpressureForAsyncMode(true);
         producer.setRetryTimesWhenSendAsyncFailed(0);
 
         int messageCount = 100;

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -431,7 +431,7 @@ public void operationComplete(ChannelFuture f) throws Exception {
                     responseTable.remove(opaque);
                     responseFuture.setCause(f.cause());
                     responseFuture.putResponse(null);
-                    log.warn("send a request command to channel <" + addr + "> failed.");
+                    log.warn("Failed to write a request command to {}, caused by underlying I/O operation failure", addr);
                 }
             });
 

File: acl/src/test/java/org/apache/rocketmq/acl/plain/PlainAccessValidatorTest.java
Patch:
@@ -547,7 +547,7 @@ public void getAccessAclYamlConfigTest() {
         Assert.assertEquals(verifyMap.get(AclConstants.CONFIG_WHITE_ADDR), "192.168.1.*");
 
         String aclFileName = System.getProperty("rocketmq.home.dir")
-            + File.separator + "conf/acl/plain_acl.yml".replace("/", File.separator);
+            + File.separator + "conf/plain_acl.yml".replace("/", File.separator);
         Map<String, DataVersion> dataVersionMap = plainAccessValidator.getAllAclConfigVersion();
         DataVersion dataVersion = dataVersionMap.get(aclFileName);
         Assert.assertEquals(0, dataVersion.getCounter().get());

File: store/src/main/java/org/apache/rocketmq/store/timer/TimerMetrics.java
Patch:
@@ -239,6 +239,7 @@ public synchronized void persist() {
                 StandardCharsets.UTF_8));
             write0(bufferedWriter);
             bufferedWriter.flush();
+            bufferedWriter.close();
             log.debug("Finished writing tmp file: {}", temp);
 
             File configFile = new File(config);

File: client/src/test/java/org/apache/rocketmq/client/consumer/DefaultLitePullConsumerTest.java
Patch:
@@ -20,13 +20,13 @@
 import java.io.ByteArrayOutputStream;
 import java.lang.reflect.Field;
 import java.net.InetSocketAddress;
+import java.time.Duration;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import org.apache.commons.lang3.reflect.FieldUtils;
 import org.apache.rocketmq.client.ClientConfig;
@@ -67,6 +67,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Fail.failBecauseExceptionWasNotThrown;
+import static org.awaitility.Awaitility.await;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyBoolean;
@@ -189,7 +190,7 @@ public void testConsumerCommitSyncWithMQOffset() throws Exception {
         //mock assign and reset offset
         litePullConsumer.assign(set);
         litePullConsumer.seek(messageQueue, 0);
-
+        await().atMost(Duration.ofSeconds(5)).untilAsserted(() -> assertThat(litePullConsumer.committed(messageQueue)).isEqualTo(0));
         //commit offset 1
         Map<MessageQueue, Long> commitOffset = new HashMap<>();
         commitOffset.put(messageQueue, 1L);

File: store/src/test/java/org/apache/rocketmq/store/stats/BrokerStatsManagerTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.rocketmq.store.stats;
 
-import org.apache.rocketmq.store.stats.BrokerStatsManager;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;

File: store/src/test/java/org/apache/rocketmq/store/stats/BrokerStatsManagerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package stats;
+package org.apache.rocketmq.store.stats;
 
 import org.apache.rocketmq.store.stats.BrokerStatsManager;
 import org.junit.After;

File: common/src/main/java/org/apache/rocketmq/common/MQVersion.java
Patch:
@@ -18,7 +18,7 @@
 
 public class MQVersion {
 
-    public static final int CURRENT_VERSION = Version.V5_0_0_SNAPSHOT.ordinal();
+    public static final int CURRENT_VERSION = Version.V5_0_0.ordinal();
 
     public static String getVersionDesc(int value) {
         int length = Version.values().length;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/AckMessageActivity.java
Patch:
@@ -100,7 +100,7 @@ protected CompletableFuture<AckMessageResultEntry> processAckMessage(ProxyContex
             String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());
             MessageReceiptHandle messageReceiptHandle = receiptHandleProcessor.removeReceiptHandle(ctx.getClientID(), group, ackMessageEntry.getMessageId(), ackMessageEntry.getReceiptHandle());
             if (messageReceiptHandle != null) {
-                handleString = messageReceiptHandle.getReceiptHandle();
+                handleString = messageReceiptHandle.getReceiptHandleStr();
             }
             CompletableFuture<AckResult> ackResultFuture = this.messagingProcessor.ackMessage(
                 ctx,

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ChangeInvisibleDurationActivity.java
Patch:
@@ -57,7 +57,7 @@ public CompletableFuture<ChangeInvisibleDurationResponse> changeInvisibleDuratio
 
             MessageReceiptHandle messageReceiptHandle = receiptHandleProcessor.removeReceiptHandle(ctx.getClientID(), group, request.getMessageId(), receiptHandle.getReceiptHandle());
             if (messageReceiptHandle != null) {
-                receiptHandle = ReceiptHandle.decode(messageReceiptHandle.getReceiptHandle());
+                receiptHandle = ReceiptHandle.decode(messageReceiptHandle.getReceiptHandleStr());
             }
             return this.messagingProcessor.changeInvisibleTime(
                 ctx,

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java
Patch:
@@ -123,7 +123,7 @@ public void receiveMessage(ProxyContext ctx, ReceiveMessageRequest request,
                             if (receiptHandle != null) {
                                 MessageReceiptHandle messageReceiptHandle =
                                     new MessageReceiptHandle(group, topic, messageExt.getQueueId(), receiptHandle, messageExt.getMsgId(),
-                                        messageExt.getQueueOffset(), messageExt.getReconsumeTimes(), proxyConfig.getRenewMaxTimeMillis());
+                                        messageExt.getQueueOffset(), messageExt.getReconsumeTimes());
                                 receiptHandleProcessor.addReceiptHandle(ctx.getClientID(), group, messageExt.getMsgId(), receiptHandle, messageReceiptHandle);
                             }
                         }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/producer/ForwardMessageToDLQActivity.java
Patch:
@@ -50,7 +50,7 @@ public CompletableFuture<ForwardMessageToDeadLetterQueueResponse> forwardMessage
             String handleString = request.getReceiptHandle();
             MessageReceiptHandle messageReceiptHandle = receiptHandleProcessor.removeReceiptHandle(ctx.getClientID(), group, request.getMessageId(), request.getReceiptHandle());
             if (messageReceiptHandle != null) {
-                handleString = messageReceiptHandle.getReceiptHandle();
+                handleString = messageReceiptHandle.getReceiptHandleStr();
             }
             ReceiptHandle receiptHandle = ReceiptHandle.decode(handleString);
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ChangeInvisibleDurationActivityTest.java
Patch:
@@ -93,7 +93,7 @@ public void testChangeInvisibleDurationActivityWhenHasMappingHandle() throws Thr
             any(), receiptHandleCaptor.capture(), anyString(), anyString(), anyString(), invisibleTimeArgumentCaptor.capture()
         )).thenReturn(CompletableFuture.completedFuture(ackResult));
         when(receiptHandleProcessor.removeReceiptHandle(anyString(), anyString(), anyString(), anyString()))
-            .thenReturn(new MessageReceiptHandle("group", "topic", 0, savedHandleStr, "msgId", 0, 0, 3000));
+            .thenReturn(new MessageReceiptHandle("group", "topic", 0, savedHandleStr, "msgId", 0, 0));
 
         ChangeInvisibleDurationResponse response = this.changeInvisibleDurationActivity.changeInvisibleDuration(
             createContext(),

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/producer/ForwardMessageToDLQActivityTest.java
Patch:
@@ -76,7 +76,7 @@ public void testForwardMessageToDeadLetterQueueWhenHasMappingHandle() throws Thr
 
         String savedHandleStr = buildReceiptHandle("topic", System.currentTimeMillis(),3000);
         when(receiptHandleProcessor.removeReceiptHandle(anyString(), anyString(), anyString(), anyString()))
-            .thenReturn(new MessageReceiptHandle("group", "topic", 0, savedHandleStr, "msgId", 0, 0, 3000));
+            .thenReturn(new MessageReceiptHandle("group", "topic", 0, savedHandleStr, "msgId", 0, 0));
 
         ForwardMessageToDeadLetterQueueResponse response = this.forwardMessageToDLQActivity.forwardMessageToDeadLetterQueue(
             createContext(),

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java
Patch:
@@ -53,7 +53,7 @@ public class BrokerStartup {
     public static CommandLine commandLine = null;
     public static String configFile = null;
     public static InternalLogger log;
-    public static final SystemConfigFileHelper configFileHelper = new SystemConfigFileHelper();
+    public static final SystemConfigFileHelper CONFIG_FILE_HELPER = new SystemConfigFileHelper();
 
     public static void main(String[] args) {
         start(createBrokerController(args));
@@ -117,10 +117,10 @@ public static BrokerController createBrokerController(String[] args) {
             if (commandLine.hasOption('c')) {
                 String file = commandLine.getOptionValue('c');
                 if (file != null) {
-                    configFileHelper.setFile(file);
+                    CONFIG_FILE_HELPER.setFile(file);
                     configFile = file;
                     BrokerPathConfigHelper.setBrokerConfigPath(file);
-                    properties = configFileHelper.loadConfig();
+                    properties = CONFIG_FILE_HELPER.loadConfig();
                 }
             }
 

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageBridge.java
Patch:
@@ -309,7 +309,7 @@ private TopicConfig selectTopicConfig(String topic) {
      */
     private boolean addRemoveTagInTransactionOp(MessageExt prepareMessage, MessageQueue messageQueue) {
         Message message = new Message(TransactionalMessageUtil.buildOpTopic(), TransactionalMessageUtil.REMOVETAG,
-            String.valueOf(prepareMessage.getQueueOffset()).getBytes(TransactionalMessageUtil.charset));
+            String.valueOf(prepareMessage.getQueueOffset()).getBytes(TransactionalMessageUtil.CHARSET));
         writeOp(message, messageQueue);
         return true;
     }

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageServiceImpl.java
Patch:
@@ -297,7 +297,7 @@ private PullResult fillOpRemoveMap(HashMap<Long, Long> removeMap,
             return pullResult;
         }
         for (MessageExt opMessageExt : opMsg) {
-            Long queueOffset = getLong(new String(opMessageExt.getBody(), TransactionalMessageUtil.charset));
+            Long queueOffset = getLong(new String(opMessageExt.getBody(), TransactionalMessageUtil.CHARSET));
             log.debug("Topic: {} tags: {}, OpOffset: {}, HalfOffset: {}", opMessageExt.getTopic(),
                 opMessageExt.getTags(), opMessageExt.getQueueOffset(), queueOffset);
             if (TransactionalMessageUtil.REMOVETAG.equals(opMessageExt.getTags())) {

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageUtil.java
Patch:
@@ -24,7 +24,7 @@
 
 public class TransactionalMessageUtil {
     public static final String REMOVETAG = "d";
-    public static final Charset charset = StandardCharsets.UTF_8;
+    public static final Charset CHARSET = StandardCharsets.UTF_8;
 
     public static String buildOpTopic() {
         return TopicValidator.RMQ_SYS_TRANS_OP_HALF_TOPIC;

File: broker/src/main/java/org/apache/rocketmq/broker/util/HookUtils.java
Patch:
@@ -37,7 +37,6 @@
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
 import org.apache.rocketmq.store.config.BrokerRole;
-import org.apache.rocketmq.store.config.MessageStoreConfig;
 import org.apache.rocketmq.store.timer.TimerMessageStore;
 
 public class HookUtils {

File: common/src/main/java/org/apache/rocketmq/common/AbstractBrokerRunnable.java
Patch:
@@ -35,7 +35,7 @@ public AbstractBrokerRunnable(BrokerIdentity brokerIdentity) {
     public void run() {
         if (brokerIdentity.isInBrokerContainer()) {
             // set threadlocal broker identity to forward logging to corresponding broker
-            InnerLoggerFactory.brokerIdentity.set(brokerIdentity.getCanonicalName());
+            InnerLoggerFactory.BROKER_IDENTITY.set(brokerIdentity.getCanonicalName());
         }
         run2();
     }

File: logging/src/main/java/org/apache/rocketmq/logging/InternalLoggerFactory.java
Patch:
@@ -38,7 +38,7 @@ public abstract class InternalLoggerFactory {
 
     private static String loggerType = null;
 
-    public static final ThreadLocal<String> brokerIdentity = new ThreadLocal<String>();
+    public static final ThreadLocal<String> BROKER_IDENTITY = new ThreadLocal<String>();
 
     private static ConcurrentHashMap<String, InternalLoggerFactory> loggerFactoryCache = new ConcurrentHashMap<String, InternalLoggerFactory>();
 

File: logging/src/main/java/org/apache/rocketmq/logging/Slf4jLoggerFactory.java
Patch:
@@ -65,7 +65,7 @@ private Logger getLogger() {
                 || loggerSuffix.equals(COMMERCIAL_LOGGER_NAME)) {
                 return defaultLogger;
             }
-            String brokerIdentity = InnerLoggerFactory.brokerIdentity.get();
+            String brokerIdentity = InnerLoggerFactory.BROKER_IDENTITY.get();
             if (brokerIdentity == null) {
                 Matcher m = PATTERN.matcher(Thread.currentThread().getName());
                 if (m.find()) {

File: srvutil/src/test/java/org/apache/rocketmq/srvutil/FileWatchServiceTest.java
Patch:
@@ -110,7 +110,7 @@ public void watchTwoFiles_ModifyOne() throws Exception {
         fileWatchService.start();
         fileWatchService.awaitStarted(1000);
         modifyFile(fileA);
-        boolean result = waitSemaphore.tryAcquire(1, 1000, TimeUnit.MILLISECONDS);
+        boolean result = waitSemaphore.tryAcquire(1, 2000, TimeUnit.MILLISECONDS);
         assertThat(result).isTrue();
         fileWatchService.shutdown();
     }

File: store/src/main/java/org/apache/rocketmq/store/timer/TimerMessageStore.java
Patch:
@@ -439,7 +439,7 @@ public void start() {
             @Override public void run() {
                 if (TimerMessageStore.this.messageStore instanceof DefaultMessageStore &&
                     ((DefaultMessageStore) TimerMessageStore.this.messageStore).getBrokerConfig().isInBrokerContainer()) {
-                    InnerLoggerFactory.brokerIdentity.set(((DefaultMessageStore) TimerMessageStore.this.messageStore).getBrokerConfig().getLoggerIdentifier());
+                    InnerLoggerFactory.BROKER_IDENTITY.set(((DefaultMessageStore) TimerMessageStore.this.messageStore).getBrokerConfig().getLoggerIdentifier());
                 }
                 try {
                     long minPy = messageStore.getMinPhyOffset();
@@ -455,7 +455,7 @@ public void start() {
             @Override public void run() {
                 if (TimerMessageStore.this.messageStore instanceof DefaultMessageStore &&
                     ((DefaultMessageStore) TimerMessageStore.this.messageStore).getBrokerConfig().isInBrokerContainer()) {
-                    InnerLoggerFactory.brokerIdentity.set(((DefaultMessageStore) TimerMessageStore.this.messageStore).getBrokerConfig().getLoggerIdentifier());
+                    InnerLoggerFactory.BROKER_IDENTITY.set(((DefaultMessageStore) TimerMessageStore.this.messageStore).getBrokerConfig().getLoggerIdentifier());
                 }
                 try {
                     if (storeConfig.isTimerEnableCheckMetrics()) {

File: store/src/main/java/org/apache/rocketmq/store/timer/TimerMetrics.java
Patch:
@@ -22,7 +22,6 @@
 import java.io.FileOutputStream;
 import java.io.OutputStreamWriter;
 import java.nio.charset.StandardCharsets;
-import java.nio.file.Paths;
 import org.apache.rocketmq.common.ConfigManager;
 import org.apache.rocketmq.common.DataVersion;
 import org.apache.rocketmq.common.constant.LoggerName;
@@ -32,7 +31,6 @@
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
 import java.io.IOException;
-import java.io.FileWriter;
 import java.io.Writer;
 import java.io.BufferedWriter;
 import java.io.File;

File: test/src/main/java/org/apache/rocketmq/test/listener/rmq/concurrent/RMQDelayListener.java
Patch:
@@ -51,7 +51,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
         long recvTime = System.currentTimeMillis();
         for (MessageExt msg : msgs) {
             if (isDebug) {
-                logger.info(listenerName + ":" + msg);
+                LOGGER.info(listenerName + ":" + msg);
             }
 
             msgBodys.addData(new String(msg.getBody(), StandardCharsets.UTF_8));

File: test/src/main/java/org/apache/rocketmq/test/listener/rmq/concurrent/RMQNormalListener.java
Patch:
@@ -53,12 +53,12 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
             msgIndex.getAndIncrement();
             if (isDebug) {
                 if (listenerName != null && !listenerName.isEmpty()) {
-                    logger.info(listenerName + ":" + msgIndex.get() + ":"
+                    LOGGER.info(listenerName + ":" + msgIndex.get() + ":"
                         + String.format("msgid:%s broker:%s queueId:%s offset:%s",
                         msg.getMsgId(), msg.getStoreHost(), msg.getQueueId(),
                         msg.getQueueOffset()));
                 } else {
-                    logger.info(msg);
+                    LOGGER.info(msg);
                 }
             }
 

File: test/src/main/java/org/apache/rocketmq/test/listener/rmq/order/RMQOrderListener.java
Patch:
@@ -71,9 +71,9 @@ public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs,
         for (MessageExt msg : msgs) {
             if (isDebug) {
                 if (listenerName != null && listenerName != "") {
-                    logger.info(listenerName + ": " + msg);
+                    LOGGER.info(listenerName + ": " + msg);
                 } else {
-                    logger.info(msg);
+                    LOGGER.info(msg);
                 }
             }
 

File: test/src/main/java/org/apache/rocketmq/test/util/FileUtil.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.io.File;
 import java.io.FileOutputStream;
-import java.io.FileWriter;
 import java.io.IOException;
 import java.io.OutputStreamWriter;
 import java.io.Writer;

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/RemappingStaticTopicSubCommand.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.rocketmq.common.protocol.body.ClusterInfo;
 import org.apache.rocketmq.common.rpc.ClientMetadata;
 import org.apache.rocketmq.common.statictopic.TopicConfigAndQueueMapping;
-import org.apache.rocketmq.common.statictopic.TopicQueueMappingOne;
 import org.apache.rocketmq.common.statictopic.TopicQueueMappingUtils;
 import org.apache.rocketmq.common.statictopic.TopicRemappingDetailWrapper;
 import org.apache.rocketmq.remoting.RPCHook;
@@ -36,7 +35,6 @@
 import org.apache.rocketmq.tools.command.SubCommandException;
 
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;

File: tools/src/main/java/org/apache/rocketmq/tools/monitor/MonitorService.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map.Entry;
-import java.util.Random;
 import java.util.TreeMap;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;

File: acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java
Patch:
@@ -19,7 +19,6 @@
 import com.alibaba.fastjson.JSONObject;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
-import java.io.FileWriter;
 import java.io.InputStream;
 import java.io.PrintWriter;
 import java.util.Map;
@@ -256,7 +255,7 @@ public static <T> T getYamlDataObject(InputStream fis, Class<T> clazz) {
 
     public static boolean writeDataObject(String path, Map<String, Object> dataMap) {
         Yaml yaml = new Yaml();
-        try (PrintWriter pw = new PrintWriter(new FileWriter(path))) {
+        try (PrintWriter pw = new PrintWriter(path, "UTF-8")) {
             String dumpAsMap = yaml.dumpAsMap(dataMap);
             pw.print(dumpAsMap);
             pw.flush();

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java
Patch:
@@ -53,7 +53,7 @@ public class BrokerStartup {
     public static CommandLine commandLine = null;
     public static String configFile = null;
     public static InternalLogger log;
-    public static SystemConfigFileHelper configFileHelper = new SystemConfigFileHelper();
+    public static final SystemConfigFileHelper configFileHelper = new SystemConfigFileHelper();
 
     public static void main(String[] args) {
         start(createBrokerController(args));

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -22,6 +22,7 @@
 import io.netty.channel.ChannelHandlerContext;
 import java.io.UnsupportedEncodingException;
 import java.net.UnknownHostException;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -374,7 +375,7 @@ private RemotingCommand updateAndGetGroupForbidden(ChannelHandlerContext ctx, Re
         groupForbidden.setGroup(group);
         groupForbidden.setTopic(topic);
         groupForbidden.setReadable(!groupManager.getForbidden(group, topic, PermName.INDEX_PERM_READ));
-        response.setBody(groupForbidden.toJson().getBytes());
+        response.setBody(groupForbidden.toJson().getBytes(StandardCharsets.UTF_8));
         return response;
     }
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopBufferMergeService.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.rocketmq.broker.processor;
 
 import com.alibaba.fastjson.JSON;
+import java.nio.charset.StandardCharsets;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
@@ -605,7 +606,7 @@ private boolean cancelCkTimer(final PopCheckPointWrapper pointWrapper) {
         PopCheckPoint point = pointWrapper.getCk();
         MessageExtBrokerInner msgInner = new MessageExtBrokerInner();
         msgInner.setTopic(popMessageProcessor.reviveTopic);
-        msgInner.setBody((pointWrapper.getReviveQueueId() + "-" + pointWrapper.getReviveQueueOffset()).getBytes());
+        msgInner.setBody((pointWrapper.getReviveQueueId() + "-" + pointWrapper.getReviveQueueOffset()).getBytes(StandardCharsets.UTF_8));
         msgInner.setQueueId(pointWrapper.getReviveQueueId());
         msgInner.setTags(PopAckConstants.CK_TAG);
         msgInner.setBornTimestamp(System.currentTimeMillis());

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ReplyMessageProcessor.java
Patch:
@@ -301,7 +301,7 @@ private void handlePutMessageResult(PutMessageResult putMessageResult,
 
                 int commercialBaseCount = brokerController.getBrokerConfig().getCommercialBaseCount();
                 int wroteSize = putMessageResult.getAppendMessageResult().getWroteBytes();
-                int incValue = (int) Math.ceil(wroteSize / commercialSizePerMsg) * commercialBaseCount;
+                int incValue = (int) Math.ceil(wroteSize * 1.0 / commercialSizePerMsg) * commercialBaseCount;
 
                 sendMessageContext.setCommercialSendStats(BrokerStatsManager.StatsType.SEND_SUCCESS);
                 sendMessageContext.setCommercialSendTimes(incValue);
@@ -311,7 +311,7 @@ private void handlePutMessageResult(PutMessageResult putMessageResult,
         } else {
             if (hasSendMessageHook()) {
                 int wroteSize = request.getBody().length;
-                int incValue = (int) Math.ceil(wroteSize / commercialSizePerMsg);
+                int incValue = (int) Math.ceil(wroteSize * 1.0 / commercialSizePerMsg);
 
                 sendMessageContext.setCommercialSendStats(BrokerStatsManager.StatsType.SEND_FAILURE);
                 sendMessageContext.setCommercialSendTimes(incValue);

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageUtil.java
Patch:
@@ -24,7 +24,7 @@
 
 public class TransactionalMessageUtil {
     public static final String REMOVETAG = "d";
-    public static Charset charset = StandardCharsets.UTF_8;
+    public static final Charset charset = StandardCharsets.UTF_8;
 
     public static String buildOpTopic() {
         return TopicValidator.RMQ_SYS_TRANS_OP_HALF_TOPIC;

File: broker/src/main/java/org/apache/rocketmq/broker/util/HookUtils.java
Patch:
@@ -127,7 +127,7 @@ public static PutMessageResult handleScheduleMessage(BrokerController brokerCont
                 || tranType == MessageSysFlag.TRANSACTION_COMMIT_TYPE) {
             if (!isRolledTimerMessage(msg)) {
                 if (checkIfTimerMessage(msg)) {
-                    if (!MessageStoreConfig.isTimerWheelEnable()) {
+                    if (!brokerController.getMessageStoreConfig().isTimerWheelEnable()) {
                         //wheel timer is not enabled, reject the message
                         return new PutMessageResult(PutMessageStatus.WHEEL_TIMER_NOT_ENABLE, null);
                     }

File: client/src/main/java/org/apache/rocketmq/client/common/ThreadLocalIndex.java
Patch:
@@ -27,10 +27,9 @@ public class ThreadLocalIndex {
     public int incrementAndGet() {
         Integer index = this.threadLocalIndex.get();
         if (null == index) {
-            index = Math.abs(random.nextInt());
+            index = random.nextInt();
             this.threadLocalIndex.set(index);
         }
-
         this.threadLocalIndex.set(++index);
         return Math.abs(index & POSITIVE_MASK);
     }

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceImpl.java
Patch:
@@ -479,7 +479,6 @@ private boolean updateProcessQueueTableInRebalance(final String topic, final Set
         final boolean isOrder) {
         boolean changed = false;
 
-        Map<MessageQueue, MessageQueue> upgradeMqTable = new HashMap<MessageQueue, MessageQueue>();
         // drop process queues no longer belong me
         HashMap<MessageQueue, ProcessQueue> removeQueueMap = new HashMap<MessageQueue, ProcessQueue>(this.processQueueTable.size());
         Iterator<Entry<MessageQueue, ProcessQueue>> it = this.processQueueTable.entrySet().iterator();

File: client/src/main/java/org/apache/rocketmq/client/trace/AsyncTraceDispatcher.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.client.trace;
 
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -394,7 +395,7 @@ public void run() {
          * @param traceTopic the topic which message trace data will send to
          */
         private void sendTraceDataByMQ(Set<String> keySet, final String data, String traceTopic) {
-            final Message message = new Message(traceTopic, data.getBytes());
+            final Message message = new Message(traceTopic, data.getBytes(StandardCharsets.UTF_8));
             // Keyset of message trace includes msgId of or original message
             message.setKeys(keySet);
             try {

File: common/src/main/java/org/apache/rocketmq/common/consistenthash/ConsistentHashRouter.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.common.consistenthash;
 
+import java.nio.charset.StandardCharsets;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.util.Collection;
@@ -122,7 +123,7 @@ public MD5Hash() {
         @Override
         public long hash(String key) {
             instance.reset();
-            instance.update(key.getBytes());
+            instance.update(key.getBytes(StandardCharsets.UTF_8));
             byte[] digest = instance.digest();
 
             long h = 0;

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/ExtraInfoUtil.java
Patch:
@@ -60,7 +60,7 @@ public static int getReviveQid(String[] extraInfoStrs) {
         if (extraInfoStrs == null || extraInfoStrs.length < 4) {
             throw new IllegalArgumentException("getReviveQid fail, extraInfoStrs length " + (extraInfoStrs == null ? 0 : extraInfoStrs.length));
         }
-        return Integer.valueOf(extraInfoStrs[3]);
+        return Integer.parseInt(extraInfoStrs[3]);
     }
 
     public static String getRealTopic(String[] extraInfoStrs, String topic, String cid) {
@@ -85,14 +85,14 @@ public static int getQueueId(String[] extraInfoStrs) {
         if (extraInfoStrs == null || extraInfoStrs.length < 7) {
             throw new IllegalArgumentException("getQueueId fail, extraInfoStrs length " + (extraInfoStrs == null ? 0 : extraInfoStrs.length));
         }
-        return Integer.valueOf(extraInfoStrs[6]);
+        return Integer.parseInt(extraInfoStrs[6]);
     }
 
     public static long getQueueOffset(String[] extraInfoStrs) {
         if (extraInfoStrs == null || extraInfoStrs.length < 8) {
             throw new IllegalArgumentException("getQueueOffset fail, extraInfoStrs length " + (extraInfoStrs == null ? 0 : extraInfoStrs.length));
         }
-        return Long.valueOf(extraInfoStrs[7]);
+        return Long.parseLong(extraInfoStrs[7]);
     }
 
     public static String buildExtraInfo(long ckQueueOffset, long popTime, long invisibleTime, int reviveQid, String topic, String brokerName, int queueId) {

File: common/src/main/java/org/apache/rocketmq/common/utils/MessageUtils.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.common.utils;
 
+import java.nio.charset.StandardCharsets;
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Set;
@@ -27,7 +28,7 @@
 public class MessageUtils {
 
     public static int getShardingKeyIndex(String shardingKey, int indexSize) {
-        return Math.abs(Hashing.murmur3_32().hashBytes(shardingKey.getBytes()).asInt() % indexSize);
+        return Math.abs(Hashing.murmur3_32().hashBytes(shardingKey.getBytes(StandardCharsets.UTF_8)).asInt() % indexSize);
     }
 
     public static int getShardingKeyIndexByMsg(MessageExt msg, int indexSize) {

File: container/src/main/java/org/apache/rocketmq/container/BrokerContainerStartup.java
Patch:
@@ -59,9 +59,9 @@ public class BrokerContainerStartup {
     public static CommandLine commandLine = null;
     public static String configFile = null;
     public static InternalLogger log;
-    public static SystemConfigFileHelper configFileHelper = new SystemConfigFileHelper();
+    public static final SystemConfigFileHelper configFileHelper = new SystemConfigFileHelper();
     public static String rocketmqHome = null;
-    public static JoranConfigurator configurator = new JoranConfigurator();
+    public static final JoranConfigurator configurator = new JoranConfigurator();
 
     public static void main(String[] args) {
         final BrokerContainer brokerContainer = startBrokerContainer(createBrokerContainer(args));

File: example/src/main/java/org/apache/rocketmq/example/batch/SplitBatchProducer.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.example.batch;
 
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
@@ -44,7 +45,7 @@ public static void main(String[] args) throws Exception {
         //large batch
         List<Message> messages = new ArrayList<>(MESSAGE_COUNT);
         for (int i = 0; i < MESSAGE_COUNT; i++) {
-            messages.add(new Message(TOPIC, TAG, "OrderID" + i, ("Hello world " + i).getBytes()));
+            messages.add(new Message(TOPIC, TAG, "OrderID" + i, ("Hello world " + i).getBytes(StandardCharsets.UTF_8)));
         }
 
         //split the large batch into small ones:

File: example/src/main/java/org/apache/rocketmq/example/namespace/ProducerWithNamespace.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.example.namespace;
 
+import java.nio.charset.StandardCharsets;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.common.message.Message;
@@ -36,7 +37,7 @@ public static void main(String[] args) throws Exception {
         producer.setNamesrvAddr(DEFAULT_NAMESRVADDR);
         producer.start();
         for (int i = 0; i < MESSAGE_COUNT; i++) {
-            Message message = new Message(TOPIC, TAG, "Hello world".getBytes());
+            Message message = new Message(TOPIC, TAG, "Hello world".getBytes(StandardCharsets.UTF_8));
             try {
                 SendResult result = producer.send(message);
                 System.out.printf("Topic:%s send success, misId is:%s%n", message.getTopic(), result.getMsgId());

File: example/src/main/java/org/apache/rocketmq/example/openmessaging/SimplePullConsumer.java
Patch:
@@ -23,6 +23,7 @@
 import io.openmessaging.consumer.PullConsumer;
 import io.openmessaging.producer.Producer;
 import io.openmessaging.producer.SendResult;
+import java.nio.charset.StandardCharsets;
 
 public class SimplePullConsumer {
 
@@ -48,7 +49,7 @@ public static void main(String[] args) {
         final String queueName = "TopicTest";
 
         producer.startup();
-        Message msg = producer.createBytesMessage(queueName, "Hello Open Messaging".getBytes());
+        Message msg = producer.createBytesMessage(queueName, "Hello Open Messaging".getBytes(StandardCharsets.UTF_8));
         SendResult sendResult = producer.send(msg);
         System.out.printf("Send Message OK. MsgId: %s%n", sendResult.messageId());
         producer.shutdown();

File: example/src/main/java/org/apache/rocketmq/example/rpc/ResponseConsumer.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.example.rpc;
 
+import java.nio.charset.StandardCharsets;
 import java.util.List;
 import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
 import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
@@ -59,7 +60,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeCo
                     try {
                         System.out.printf("handle message: %s %n", msg.toString());
                         String replyTo = MessageUtil.getReplyToClient(msg);
-                        byte[] replyContent = "reply message contents.".getBytes();
+                        byte[] replyContent = "reply message contents.".getBytes(StandardCharsets.UTF_8);
                         // create reply message with given util, do not create reply message by yourself
                         Message replyMessage = MessageUtil.createReplyMessage(msg, replyContent);
 

File: example/src/main/java/org/apache/rocketmq/example/schedule/ScheduledMessageProducer.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.example.schedule;
 
+import java.nio.charset.StandardCharsets;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.common.message.Message;
@@ -37,7 +38,7 @@ public static void main(String[] args) throws Exception {
         producer.start();
         int totalMessagesToSend = 100;
         for (int i = 0; i < totalMessagesToSend; i++) {
-            Message message = new Message(TOPIC, ("Hello scheduled message " + i).getBytes());
+            Message message = new Message(TOPIC, ("Hello scheduled message " + i).getBytes(StandardCharsets.UTF_8));
             // This message will be delivered to consumer 10 seconds later.
             message.setDelayTimeLevel(3);
             // Send the message

File: example/src/main/java/org/apache/rocketmq/example/schedule/TimerMessageProducer.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.example.schedule;
 
+import java.nio.charset.StandardCharsets;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.common.message.Message;
@@ -37,7 +38,7 @@ public static void main(String[] args) throws Exception {
         producer.start();
         int totalMessagesToSend = 10;
         for (int i = 0; i < totalMessagesToSend; i++) {
-            Message message = new Message(TOPIC, ("Hello scheduled message " + i).getBytes());
+            Message message = new Message(TOPIC, ("Hello scheduled message " + i).getBytes(StandardCharsets.UTF_8));
             // This message will be delivered to consumer 10 seconds later.
             //message.setDelayTimeSec(10);
             // The effect is the same as the above

File: example/src/main/java/org/apache/rocketmq/example/simple/AclClient.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.example.simple;
 
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -145,7 +146,7 @@ private static void printBody(List<MessageExt> msg) {
             return;
         for (MessageExt m : msg) {
             if (m != null) {
-                System.out.printf("msgId : %s  body : %s  \n\r", m.getMsgId(), new String(m.getBody()));
+                System.out.printf("msgId : %s  body : %s  \n\r", m.getMsgId(), new String(m.getBody(), StandardCharsets.UTF_8));
             }
         }
     }

File: logging/src/main/java/org/apache/rocketmq/logging/InternalLoggerFactory.java
Patch:
@@ -38,7 +38,7 @@ public abstract class InternalLoggerFactory {
 
     private static String loggerType = null;
 
-    public static ThreadLocal<String> brokerIdentity = new ThreadLocal<String>();
+    public static final ThreadLocal<String> brokerIdentity = new ThreadLocal<String>();
 
     private static ConcurrentHashMap<String, InternalLoggerFactory> loggerFactoryCache = new ConcurrentHashMap<String, InternalLoggerFactory>();
 

File: logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java
Patch:
@@ -27,6 +27,7 @@
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
 import java.io.Writer;
+import java.nio.charset.StandardCharsets;
 import java.text.MessageFormat;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -534,7 +535,7 @@ protected OutputStreamWriter createWriter(OutputStream os) {
                 }
             }
             if (retval == null) {
-                retval = new OutputStreamWriter(os);
+                retval = new OutputStreamWriter(os, StandardCharsets.UTF_8);
             }
             return retval;
         }

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/Configuration.java
Patch:
@@ -23,6 +23,7 @@
 import java.io.File;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.util.concurrent.atomic.AtomicReference;
 import org.apache.rocketmq.common.constant.LoggerName;
@@ -65,7 +66,7 @@ public static String loadJsonConfig(String configFileName) throws Exception {
             return null;
         }
 
-        return new String(Files.readAllBytes(file.toPath()));
+        return new String(Files.readAllBytes(file.toPath()), StandardCharsets.UTF_8);
     }
 
     public ProxyConfig getProxyConfig() {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManager.java
Patch:
@@ -194,9 +194,6 @@ public Settings removeAndGetClientSettings(ProxyContext ctx) {
             settings = mergeSubscriptionData(ctx, settings,
                 GrpcConverter.getInstance().wrapResourceWithNamespace(settings.getSubscription().getGroup()));
         }
-        if (settings == null) {
-            return null;
-        }
         return mergeMetric(settings);
     }
 }

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -26,6 +26,7 @@
 import java.net.SocketAddress;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileLock;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -327,7 +328,7 @@ public void start() throws Exception {
             throw new RuntimeException("Lock failed,MQ already started");
         }
 
-        lockFile.getChannel().write(ByteBuffer.wrap("lock".getBytes()));
+        lockFile.getChannel().write(ByteBuffer.wrap("lock".getBytes(StandardCharsets.UTF_8)));
         lockFile.getChannel().force(true);
 
         if (this.getMessageStoreConfig().isDuplicationEnable()) {

File: store/src/main/java/org/apache/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -62,7 +62,7 @@ public class MessageStoreConfig {
     private boolean timerEnableCheckMetrics = true;
     private boolean timerInterceptDelayLevel = false;
     private int timerMaxDelaySec = 3600 * 24 * 3;
-    private static boolean timerWheelEnable = true;
+    private boolean timerWheelEnable = true;
 
     /**
      * 1. Register to broker after (startTime + disappearTimeAfterStart)
@@ -1441,7 +1441,7 @@ public boolean isTimerWarmEnable() {
         return timerWarmEnable;
     }
 
-    public static boolean isTimerWheelEnable() {
+    public  boolean isTimerWheelEnable() {
         return timerWheelEnable;
     }
     public void setTimerWheelEnable(boolean timerWheelEnable) {

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAClient.java
Patch:
@@ -23,6 +23,7 @@
 import java.nio.channels.SelectionKey;
 import java.nio.channels.Selector;
 import java.nio.channels.SocketChannel;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicReference;
@@ -268,7 +269,7 @@ private boolean sendHandshakeHeader() throws IOException {
         // Address length
         this.handshakeHeaderBuffer.putInt(this.localAddress == null ? 0 : this.localAddress.length());
         // Slave address
-        this.handshakeHeaderBuffer.put(this.localAddress == null ? new byte[0] : this.localAddress.getBytes());
+        this.handshakeHeaderBuffer.put(this.localAddress == null ? new byte[0] : this.localAddress.getBytes(StandardCharsets.UTF_8));
 
         this.handshakeHeaderBuffer.flip();
         return this.haWriter.write(this.socketChannel, this.handshakeHeaderBuffer);

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAConnection.java
Patch:
@@ -22,6 +22,7 @@
 import java.nio.channels.SelectionKey;
 import java.nio.channels.Selector;
 import java.nio.channels.SocketChannel;
+import java.nio.charset.StandardCharsets;
 import java.util.List;
 import org.apache.rocketmq.common.EpochEntry;
 import org.apache.rocketmq.common.ServiceThread;
@@ -313,7 +314,7 @@ protected boolean processReadResult(ByteBuffer byteBufferRead) {
                                 final byte[] addressData = new byte[addressLength];
                                 byteBufferRead.position(readPosition + AutoSwitchHAClient.HANDSHAKE_HEADER_SIZE);
                                 byteBufferRead.get(addressData);
-                                AutoSwitchHAConnection.this.slaveAddress = new String(addressData);
+                                AutoSwitchHAConnection.this.slaveAddress = new String(addressData, StandardCharsets.UTF_8);
 
                                 isSlaveSendHandshake = true;
                                 byteBufferRead.position(readSocketPos);

File: test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQTransactionalProducer.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.test.client.rmq;
 
+import java.nio.charset.StandardCharsets;
 import org.apache.log4j.Logger;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.producer.LocalTransactionState;
@@ -82,10 +83,10 @@ public ResultWrapper send(Object msg, Object arg) {
             sendResult.setSendResult(true);
             sendResult.setBrokerIp(metaqResult.getMessageQueue().getBrokerName());
             if (commitMsg) {
-                msgBodys.addData(new String(message.getBody()));
+                msgBodys.addData(new String(message.getBody(), StandardCharsets.UTF_8));
             }
             originMsgs.addData(msg);
-            originMsgIndex.put(new String(message.getBody()), metaqResult);
+            originMsgIndex.put(new String(message.getBody(), StandardCharsets.UTF_8), metaqResult);
         } catch (MQClientException e) {
             if (isDebug) {
                 e.printStackTrace();

File: test/src/main/java/org/apache/rocketmq/test/clientinterface/AbstractMQProducer.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.test.clientinterface;
 
+import java.nio.charset.StandardCharsets;
 import java.util.Date;
 import java.util.List;
 import org.apache.rocketmq.common.message.MessageQueue;
@@ -98,7 +99,7 @@ public Object getMessageByTag(String tag) {
         Object objMsg = null;
         if (this instanceof RMQNormalProducer) {
             org.apache.rocketmq.common.message.Message msg = new org.apache.rocketmq.common.message.Message(
-                topic, (RandomUtil.getStringByUUID() + "." + new Date()).getBytes());
+                topic, (RandomUtil.getStringByUUID() + "." + new Date()).getBytes(StandardCharsets.UTF_8));
             objMsg = msg;
             if (tag != null) {
                 msg.setTags(tag);

File: test/src/main/java/org/apache/rocketmq/test/listener/AbstractListener.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.rocketmq.test.util.TestUtil;
 
 public class AbstractListener extends MQCollector implements MessageListener {
-    public static Logger logger = Logger.getLogger(AbstractListener.class);
+    public static final Logger logger = Logger.getLogger(AbstractListener.class);
     protected boolean isDebug = true;
     protected String listenerName = null;
     protected Collection<Object> allSendMsgs = null;

File: test/src/main/java/org/apache/rocketmq/test/listener/rmq/concurrent/RMQDelayListener.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.test.listener.rmq.concurrent;
 
+import java.nio.charset.StandardCharsets;
 import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
 import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
 import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
@@ -53,7 +54,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
                 logger.info(listenerName + ":" + msg);
             }
 
-            msgBodys.addData(new String(msg.getBody()));
+            msgBodys.addData(new String(msg.getBody(), StandardCharsets.UTF_8));
             originMsgs.addData(msg);
             msgDelayTimes.addData(Math.abs(recvTime - msg.getBornTimestamp()));
         }

File: test/src/main/java/org/apache/rocketmq/test/listener/rmq/concurrent/RMQNormalListener.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.test.listener.rmq.concurrent;
 
+import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
@@ -61,10 +62,10 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
                 }
             }
 
-            msgBodys.addData(new String(msg.getBody()));
+            msgBodys.addData(new String(msg.getBody(), StandardCharsets.UTF_8));
             originMsgs.addData(msg);
             if (originMsgIndex != null) {
-                originMsgIndex.put(new String(msg.getBody()), msg);
+                originMsgIndex.put(new String(msg.getBody(), StandardCharsets.UTF_8), msg);
             }
         }
         return consumeStatus;

File: test/src/main/java/org/apache/rocketmq/test/listener/rmq/order/RMQOrderListener.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.test.listener.rmq.order;
 
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
@@ -56,7 +57,7 @@ private void putMsg(MessageExt msg) {
             msgQueue = msgs.get(key);
         }
 
-        msgQueue.add(new String(msg.getBody()));
+        msgQueue.add(new String(msg.getBody(), StandardCharsets.UTF_8));
         msgs.put(key, msgQueue);
     }
 
@@ -77,7 +78,7 @@ public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs,
             }
 
             putMsg(msg);
-            msgBodys.addData(new String(msg.getBody()));
+            msgBodys.addData(new String(msg.getBody(), StandardCharsets.UTF_8));
             originMsgs.addData(msg);
         }
 

File: test/src/main/java/org/apache/rocketmq/test/util/DuplicateMessageInfo.java
Patch:
@@ -21,6 +21,7 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.nio.charset.StandardCharsets;
 import java.text.DecimalFormat;
 import java.util.HashMap;
 import java.util.LinkedList;
@@ -108,7 +109,7 @@ public void checkDuplicatedMessageInfo(boolean bPrintLog,
             for (int i = 0; i < msgListSize; i++)
                 strToWrite += strBQueue.get(i).toString() + "\r\n";
 
-            byteToWrite = strToWrite.getBytes();
+            byteToWrite = strToWrite.getBytes(StandardCharsets.UTF_8);
             out.write(byteToWrite);
             out.close();
         }

File: test/src/main/java/org/apache/rocketmq/test/util/TestUtil.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.rocketmq.test.util;
 
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.LinkedHashMap;
@@ -94,10 +95,10 @@ public static void waitForInput(String keyWord, String info) {
         try {
             byte[] b = new byte[1024];
             int n = System.in.read(b);
-            String s = new String(b, 0, n - 1).replace("\r", "").replace("\n", "");
+            String s = new String(b, 0, n - 1, StandardCharsets.UTF_8).replace("\r", "").replace("\n", "");
             while (!s.equals(keyWord)) {
                 n = System.in.read(b);
-                s = new String(b, 0, n - 1);
+                s = new String(b, 0, n - 1, StandardCharsets.UTF_8);
             }
         } catch (IOException e) {
             e.printStackTrace();

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -529,7 +529,8 @@ public void run() {
                 }
 
                 if (result.getOffsetTable().isEmpty()) {
-                    AdminToolResult.failure(AdminToolsResultCodeEnum.CONSUMER_NOT_ONLINE, "Not found the consumer group consume stats, because return offset table is empty, maybe the consumer not consume any message");
+                    return AdminToolResult.failure(AdminToolsResultCodeEnum.CONSUMER_NOT_ONLINE, "Not found the "
+                        + "consumer group consume stats, because return offset table is empty, maybe the consumer not consume any message");
                 }
                 return AdminToolResult.success(result);
             }

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -105,9 +105,9 @@
 import org.slf4j.LoggerFactory;
 
 public class MQAdminStartup {
-    protected static List<SubCommand> subCommandList = new ArrayList<SubCommand>();
+    protected static final List<SubCommand> subCommandList = new ArrayList<SubCommand>();
 
-    private static String rocketmqHome = System.getProperty(MixAll.ROCKETMQ_HOME_PROPERTY,
+    private static final String rocketmqHome = System.getProperty(MixAll.ROCKETMQ_HOME_PROPERTY,
         System.getenv(MixAll.ROCKETMQ_HOME_ENV));
 
     public static void main(String[] args) {

File: tools/src/main/java/org/apache/rocketmq/tools/command/offset/ResetOffsetByTimeCommand.java
Patch:
@@ -111,7 +111,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
             }
             int queueId = -1;
             if (commandLine.hasOption("q")) {
-                queueId = Integer.valueOf(commandLine.getOptionValue('q'));
+                queueId = Integer.parseInt(commandLine.getOptionValue('q'));
             }
 
             if (commandLine.hasOption('n')) {

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateStaticTopicSubCommand.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.tools.command.topic;
 
+import java.nio.charset.StandardCharsets;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.OptionGroup;
@@ -97,7 +98,8 @@ public void executeFromFile(final CommandLine commandLine, final Options options
             String topic = commandLine.getOptionValue('t').trim();
             String mapFileName = commandLine.getOptionValue('f').trim();
             String mapData = MixAll.file2String(mapFileName);
-            TopicRemappingDetailWrapper wrapper = TopicRemappingDetailWrapper.decode(mapData.getBytes(), TopicRemappingDetailWrapper.class);
+            TopicRemappingDetailWrapper wrapper = TopicRemappingDetailWrapper.decode(mapData.getBytes(StandardCharsets.UTF_8),
+                TopicRemappingDetailWrapper.class);
             //double check the config
             TopicQueueMappingUtils.checkNameEpochNumConsistence(topic, wrapper.getBrokerConfigMap());
             boolean force = false;

File: tools/src/main/java/org/apache/rocketmq/tools/monitor/MonitorService.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
+import org.apache.commons.lang3.RandomUtils;
 import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
 import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
 import org.apache.rocketmq.client.consumer.PullResult;
@@ -134,9 +135,8 @@ public void run() {
     }
 
     private String instanceName() {
-        String name =
-            System.currentTimeMillis() + new Random().nextInt() + this.monitorConfig.getNamesrvAddr();
-
+        final int randomInteger = RandomUtils.nextInt(0, Integer.MAX_VALUE);
+        String name = System.currentTimeMillis() + randomInteger + this.monitorConfig.getNamesrvAddr();
         return "MonitorService_" + name.hashCode();
     }
 

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAConnection.java
Patch:
@@ -41,7 +41,7 @@
 public class AutoSwitchHAConnection implements HAConnection {
     /**
      * Header protocol in syncing msg from master. Format: current state + body size + offset + epoch  +
-     * epochStartOffset + additionalInfo(confirmOffset). If the msg is hankeShakeMsg, the body size = EpochEntrySize *
+     * epochStartOffset + additionalInfo(confirmOffset). If the msg is handShakeMsg, the body size = EpochEntrySize *
      * EpochEntryNums, the offset is maxOffset in master.
      */
     public static final int MSG_HEADER_SIZE = 4 + 4 + 8 + 4 + 8 + 8;

File: store/src/main/java/org/apache/rocketmq/store/timer/TimerMessageStore.java
Patch:
@@ -240,12 +240,11 @@ private void calcTimerDistribution() {
                 Slot slotEach = timerWheel.getSlot(currTime + j * precisionMs);
                 periodTotal += slotEach.num;
             }
-            LOGGER.info("%d period's total num: %d\n", timerDist.get(i), periodTotal);
+            LOGGER.debug("{} period's total num: {}", timerDist.get(i), periodTotal);
             this.timerMetrics.updateDistPair(timerDist.get(i), periodTotal);
         }
         long endTime = System.currentTimeMillis();
-        LOGGER.info("Total cost Time:%d%n", endTime - startTime);
-
+        LOGGER.debug("Total cost Time: {}", endTime - startTime);
     }
 
     public void recover() {

File: common/src/test/java/org/apache/rocketmq/common/utils/CheckpointFileTest.java
Patch:
@@ -32,7 +32,7 @@
 public class CheckpointFileTest {
 
     private static final String FILE_PATH =
-        Paths.get(System.getProperty("user.home"), "store-test", "epoch.ckpt").toString();
+        Paths.get(System.getProperty("java.io.tmpdir"), "store-test", "epoch.ckpt").toString();
 
     private List<EpochEntry> entryList;
     private CheckpointFile<EpochEntry> checkpoint;

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/ClusterGrpcIT.java
Patch:
@@ -49,7 +49,7 @@ public void setUp() throws Exception {
         messagingProcessor.start();
         grpcMessagingApplication = GrpcMessagingApplication.create(messagingProcessor);
         grpcMessagingApplication.start();
-        setUpServer(grpcMessagingApplication, ConfigurationManager.getProxyConfig().getGrpcServerPort(), true);
+        setUpServer(grpcMessagingApplication, 0, true);
 
         await().atMost(Duration.ofSeconds(40)).until(() -> {
             Map<String, BrokerData> brokerDataMap = MQAdminTestUtils.getCluster(nsAddr).getBrokerAddrTable();

File: common/src/main/java/org/apache/rocketmq/common/protocol/ResponseCode.java
Patch:
@@ -111,4 +111,6 @@ public class ResponseCode extends RemotingSysResponseCode {
 
     public static final int CONTROLLER_BROKER_METADATA_NOT_EXIST = 2008;
 
+    public static final int CONTROLLER_INVALID_CLEAN_BROKER_METADATA = 2009;
+
 }

File: controller/src/main/java/org/apache/rocketmq/controller/ControllerManager.java
Patch:
@@ -189,6 +189,7 @@ public void registerProcessor() {
         controllerRemotingServer.registerProcessor(RequestCode.BROKER_HEARTBEAT, controllerRequestProcessor, this.controllerRequestExecutor);
         controllerRemotingServer.registerProcessor(RequestCode.UPDATE_CONTROLLER_CONFIG, controllerRequestProcessor, this.controllerRequestExecutor);
         controllerRemotingServer.registerProcessor(RequestCode.GET_CONTROLLER_CONFIG, controllerRequestProcessor, this.controllerRequestExecutor);
+        controllerRemotingServer.registerProcessor(RequestCode.CLEAN_BROKER_DATA, controllerRequestProcessor, this.controllerRequestExecutor);
     }
 
     public void start() {

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DefaultBrokerHeartbeatManager.java
Patch:
@@ -30,9 +30,9 @@
 import java.util.concurrent.TimeUnit;
 
 import org.apache.rocketmq.common.BrokerAddrInfo;
+import org.apache.rocketmq.common.ControllerConfig;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.common.ControllerConfig;
 import org.apache.rocketmq.controller.BrokerHeartbeatManager;
 import org.apache.rocketmq.controller.BrokerLiveInfo;
 import org.apache.rocketmq.logging.InternalLogger;

File: controller/src/main/java/org/apache/rocketmq/controller/impl/event/EventSerializer.java
Patch:
@@ -67,6 +67,8 @@ public EventMessage deserialize(byte[] bytes) throws SerializationException {
                         return this.serializer.deserialize(data, ApplyBrokerIdEvent.class);
                     case ELECT_MASTER_EVENT:
                         return this.serializer.deserialize(data, ElectMasterEvent.class);
+                    case CLEAN_BROKER_DATA_EVENT:
+                        return this.serializer.deserialize(data, CleanBrokerDataEvent.class);
                     default:
                         break;
                 }

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -1374,7 +1374,6 @@ public Message request(final Message msg,
                 @Override
                 public void onSuccess(SendResult sendResult) {
                     requestResponseFuture.setSendRequestOk(true);
-                    requestResponseFuture.putResponseMessage(msg);
                 }
 
                 @Override

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -678,7 +678,7 @@ public void run() {
                     LOG.error("ScheduledTask refresh metadata exception", e);
                 }
             }
-        }, 1, 5, TimeUnit.SECONDS);
+        }, 10, 5, TimeUnit.SECONDS);
 
         if (this.brokerConfig.getNamesrvAddr() != null) {
             this.brokerOuterAPI.updateNameServerAddressList(this.brokerConfig.getNamesrvAddr());

File: container/src/main/java/org/apache/rocketmq/container/BrokerContainer.java
Patch:
@@ -181,7 +181,7 @@ public void run2() {
                     LOG.error("ScheduledTask refresh metadata exception", e);
                 }
             }
-        }, 1, 5, TimeUnit.SECONDS);
+        }, 10, 5, TimeUnit.SECONDS);
 
         return true;
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/validator/DefaultTopicMessageTypeValidator.java
Patch:
@@ -25,7 +25,8 @@ public class DefaultTopicMessageTypeValidator implements TopicMessageTypeValidat
 
     public void validate(TopicMessageType topicMessageType, TopicMessageType messageType) {
         if (messageType.equals(TopicMessageType.UNSPECIFIED) || !messageType.equals(topicMessageType)) {
-            throw new ProxyException(ProxyExceptionCode.MESSAGE_PROPERTY_CONFLICT_WITH_TYPE, messageType.name() + " " + topicMessageType.name());
+            String errorInfo = String.format("TopicMessageType validate failed, topic type is %s, message type is %s", topicMessageType, messageType);
+            throw new ProxyException(ProxyExceptionCode.MESSAGE_PROPERTY_CONFLICT_WITH_TYPE, errorInfo);
         }
     }
 }

File: broker/src/main/java/org/apache/rocketmq/broker/controller/ReplicasManager.java
Patch:
@@ -57,6 +57,8 @@
 public class ReplicasManager {
     private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
+    private static final int RETRY_INTERVAL_SECOND = 5;
+
     private final ScheduledExecutorService scheduledService;
     private final ExecutorService executorService;
     private final BrokerController brokerController;
@@ -112,7 +114,7 @@ public void start() {
                 int retryTimes = 0;
                 do {
                     try {
-                        TimeUnit.SECONDS.sleep(1);
+                        TimeUnit.SECONDS.sleep(RETRY_INTERVAL_SECOND);
                     } catch (InterruptedException ignored) {
 
                     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/Configuration.java
Patch:
@@ -48,7 +48,7 @@ public static String loadJsonConfig(String configFileName) throws Exception {
         final String testResource = "rmq-proxy-home/conf/" + configFileName;
         try (InputStream inputStream = Configuration.class.getClassLoader().getResourceAsStream(testResource)) {
             if (null != inputStream) {
-              return CharStreams.toString(new InputStreamReader(inputStream, Charsets.UTF_8));
+                return CharStreams.toString(new InputStreamReader(inputStream, Charsets.UTF_8));
             }
         }
 

File: common/src/main/java/org/apache/rocketmq/common/protocol/ResponseCode.java
Patch:
@@ -109,4 +109,6 @@ public class ResponseCode extends RemotingSysResponseCode {
     public static final int CONTROLLER_BROKER_NOT_ALIVE = 2006;
     public static final int CONTROLLER_NOT_LEADER = 2007;
 
+    public static final int CONTROLLER_BROKER_METADATA_NOT_EXIST = 2008;
+
 }

File: controller/src/main/java/org/apache/rocketmq/controller/impl/manager/ReplicasInfoManager.java
Patch:
@@ -288,7 +288,7 @@ public ControllerResult<GetReplicaInfoResponseHeader> getReplicaInfo(final GetRe
             result.setBody(new SyncStateSet(syncStateInfo.getSyncStateSet(), syncStateInfo.getSyncStateSetEpoch()).encode());
             return result;
         }
-        result.setCodeAndRemark(ResponseCode.CONTROLLER_INVALID_REQUEST, "Broker metadata is not existed");
+        result.setCodeAndRemark(ResponseCode.CONTROLLER_BROKER_METADATA_NOT_EXIST, "Broker metadata is not existed");
         return result;
     }
 

File: acl/src/main/java/org/apache/rocketmq/acl/plain/RemoteAddressStrategyFactory.java
Patch:
@@ -50,18 +50,18 @@ public RemoteAddressStrategy getRemoteAddressStrategy(String remoteAddr) {
                 String[] strArray = StringUtils.split(remoteAddr, ":");
                 String last = strArray[strArray.length - 1];
                 if (!last.startsWith("{")) {
-                    throw new AclException(String.format("MultipleRemoteAddressStrategy netaddress examine scope Exception netaddress", remoteAddr));
+                    throw new AclException(String.format("MultipleRemoteAddressStrategy netaddress examine scope Exception netaddress: %s", remoteAddr));
                 }
                 return new MultipleRemoteAddressStrategy(AclUtils.getAddresses(remoteAddr, last));
             } else {
                 String[] strArray = StringUtils.split(remoteAddr, ".");
                 // However a right IP String provided by user,it always can be divided into 4 parts by '.'.
                 if (strArray.length < 4) {
-                    throw new AclException(String.format("MultipleRemoteAddressStrategy has got a/some wrong format IP(s) ", remoteAddr));
+                    throw new AclException(String.format("MultipleRemoteAddressStrategy has got a/some wrong format IP(s): %s ", remoteAddr));
                 }
                 String lastStr = strArray[strArray.length - 1];
                 if (!lastStr.startsWith("{")) {
-                    throw new AclException(String.format("MultipleRemoteAddressStrategy netaddress examine scope Exception netaddress", remoteAddr));
+                    throw new AclException(String.format("MultipleRemoteAddressStrategy netaddress examine scope Exception netaddress: %s", remoteAddr));
                 }
                 return new MultipleRemoteAddressStrategy(AclUtils.getAddresses(remoteAddr, lastStr));
             }

File: broker/src/test/java/org/apache/rocketmq/broker/filter/MessageStoreWithFilterTest.java
Patch:
@@ -61,7 +61,7 @@ public class MessageStoreWithFilterTest {
 
     private static final String topic = "topic";
     private static final int queueId = 0;
-    private static final String storePath = "." + File.separator + "unit_test_store";
+    private static final String storePath = System.getProperty("java.io.tmpdir") + File.separator + "unit_test_store";
     private static final int commitLogFileSize = 1024 * 1024 * 256;
     private static final int cqFileSize = 300000 * 20;
     private static final int cqExtFileSize = 300000 * 128;

File: broker/src/test/java/org/apache/rocketmq/broker/offset/ConsumerOffsetManagerTest.java
Patch:
@@ -44,12 +44,12 @@ public void init(){
     @Test
     public void cleanOffsetByTopic_NotExist(){
         consumerOffsetManager.cleanOffsetByTopic("InvalidTopic");
-        assertThat(consumerOffsetManager.getOffsetTable().containsKey(key));
+        assertThat(consumerOffsetManager.getOffsetTable().containsKey(key)).isTrue();
     }
 
     @Test
     public void cleanOffsetByTopic_Exist(){
         consumerOffsetManager.cleanOffsetByTopic("FooBar");
-        assertThat(!consumerOffsetManager.getOffsetTable().containsKey(key));
+        assertThat(!consumerOffsetManager.getOffsetTable().containsKey(key)).isTrue();
     }
 }

File: broker/src/test/java/org/apache/rocketmq/broker/schedule/ScheduleMessageServiceTest.java
Patch:
@@ -73,7 +73,7 @@ public class ScheduleMessageServiceTest {
      */
     int delayLevel = 3;
 
-    private static final String storePath = System.getProperty("user.home") + File.separator + "schedule_test#" + UUID.randomUUID();
+    private static final String storePath = System.getProperty("java.io.tmpdir") + File.separator + "schedule_test#" + UUID.randomUUID();
     private static final int commitLogFileSize = 1024;
     private static final int cqFileSize = 10;
     private static final int cqExtFileSize = 10 * (ConsumeQueueExt.CqExtUnit.MIN_EXT_UNIT_SIZE + 64);
@@ -113,6 +113,8 @@ public void setUp() throws Exception {
         messageStoreConfig.setEnableConsumeQueueExt(true);
         messageStoreConfig.setStorePathRootDir(storePath);
         messageStoreConfig.setStorePathCommitLog(storePath + File.separator + "commitlog");
+        // Let OS pick an available port
+        messageStoreConfig.setHaListenPort(0);
 
         brokerConfig = new BrokerConfig();
         BrokerStatsManager manager = new BrokerStatsManager(brokerConfig.getBrokerClusterName(), brokerConfig.isEnableDetailStat());

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -1051,7 +1051,7 @@ public void run() {
                         Validators.checkMessage(msg, defaultMQProducer);
 
                         if (!msg.getTopic().equals(mq.getTopic())) {
-                            throw new MQClientException("message's topic not equal mq's topic", null);
+                            throw new MQClientException("Topic of the message does not match its target message queue", null);
                         }
                         long costTime = System.currentTimeMillis() - beginStartTime;
                         if (timeout > costTime) {

File: client/src/test/java/org/apache/rocketmq/client/impl/factory/MQClientInstanceTest.java
Patch:
@@ -161,7 +161,7 @@ public void testConsumerRunningInfoWhenConsumersIsEmptyOrNot() throws RemotingEx
 
         runningInfo = mqClientInstance.consumerRunningInfo(group);
         assertThat(runningInfo).isNotNull();
-        assertThat(mockConsumerInner.consumerRunningInfo().getProperties().get(ConsumerRunningInfo.PROP_CONSUME_TYPE));
+        assertThat(mockConsumerInner.consumerRunningInfo().getProperties().get(ConsumerRunningInfo.PROP_CONSUME_TYPE)).isNotNull();
 
         mqClientInstance.unregisterConsumer(group);
         flag = mqClientInstance.registerConsumer(group, mock(MQConsumerInner.class));

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -220,7 +220,7 @@ public static String file2String(final File file) throws IOException {
             }
 
             if (result) {
-                return new String(data);
+                return new String(data, "UTF-8");
             }
         }
         return null;

File: common/src/test/java/org/apache/rocketmq/common/MixAllTest.java
Patch:
@@ -75,7 +75,7 @@ public void testFile2String_WithChinese() throws IOException {
             file.delete();
         }
         file.createNewFile();
-        PrintWriter out = new PrintWriter(fileName);
+        PrintWriter out = new PrintWriter(fileName, "UTF-8");
         out.write("TestForMixAll_中文");
         out.close();
         String string = MixAll.file2String(fileName);

File: common/src/test/java/org/apache/rocketmq/common/message/MessageClientIDSetterTest.java
Patch:
@@ -29,7 +29,7 @@ public void testGetTimeFromID() {
         long t = System.currentTimeMillis();
         String uniqID = MessageClientIDSetter.createUniqID();
         long t2 = MessageClientIDSetter.getNearlyTimeFromID(uniqID).getTime();
-        assertThat(t2 - t < 20);
+        assertThat(t2 - t < 20).isTrue();
     }
 
     @Test
@@ -40,7 +40,7 @@ public void testGetCountFromID() {
         String idHex2 = uniqID2.substring(uniqID2.length() - 4);
         int s1 = Integer.parseInt(idHex, 16);
         int s2 = Integer.parseInt(idHex2, 16);
-        assertThat(s1 == s2 - 1);
+        assertThat(s1 == s2 - 1).isTrue();
     }
 
 

File: common/src/test/java/org/apache/rocketmq/common/message/MessageDecoderTest.java
Patch:
@@ -257,6 +257,7 @@ public void testEncodeAndDecodeOnIPv6Host() {
         assertThat("abc").isEqualTo(decodedMsg.getTopic());
     }
 
+    @Test
     public void testNullValueProperty() throws Exception {
         MessageExt msg = new MessageExt();
         msg.setBody("x".getBytes());

File: controller/src/test/java/org/apache/rocketmq/controller/impl/controller/impl/DLedgerControllerTest.java
Patch:
@@ -54,8 +54,9 @@ public class DLedgerControllerTest {
     private List<String> baseDirs;
     private List<DLedgerController> controllers;
 
-    public DLedgerController launchController(final String group, final String peers, final String selfId, String storeType, final boolean isEnableElectUncleanMaster) {
-        final String path = "/tmp" + File.separator + group + File.separator + selfId;
+    public DLedgerController launchController(final String group, final String peers, final String selfId,
+        String storeType, final boolean isEnableElectUncleanMaster) {
+        final String path = System.getProperty("java.io.tmpdir") + File.separator + group + File.separator + selfId;
         baseDirs.add(path);
 
         final ControllerConfig config = new ControllerConfig();

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/NamesrvStartup.java
Patch:
@@ -18,10 +18,8 @@
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.joran.JoranConfigurator;
-import ch.qos.logback.core.joran.spi.JoranException;
 import java.io.BufferedInputStream;
 import java.io.FileInputStream;
-import java.io.IOException;
 import java.io.InputStream;
 import java.util.Properties;
 import java.util.concurrent.Callable;
@@ -84,7 +82,7 @@ public static ControllerManager controllerManagerMain() {
         return null;
     }
 
-    public static void parseCommandlineAndConfigFile(String[] args) throws IOException, JoranException {
+    public static void parseCommandlineAndConfigFile(String[] args) throws Exception {
         System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, Integer.toString(MQVersion.CURRENT_VERSION));
         //PackageConflictDetect.detectFastjson();
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManager.java
Patch:
@@ -77,8 +77,7 @@ protected static Settings mergeProducerData(Settings settings) {
                 .setInitial(Durations.fromMillis(config.getGrpcClientProducerBackoffInitialMillis()))
                 .setMax(Durations.fromMillis(config.getGrpcClientProducerBackoffMaxMillis()))
                 .setMultiplier(config.getGrpcClientProducerBackoffMultiplier())
-                .build())
-            .build();
+                .build());
 
         builder.getPublishingBuilder()
             .setValidateMessageType(config.isEnableTopicMessageTypeCheck())

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -175,8 +175,7 @@ public Thread newThread(Runnable r) {
 
     private static int initValueIndex() {
         Random r = new Random();
-
-        return Math.abs(r.nextInt() % 999) % 999;
+        return r.nextInt(999);
     }
 
     @Override

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyServerConfig.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.rocketmq.remoting.netty;
 
 public class NettyServerConfig implements Cloneable {
-    private int listenPort = 8888;
+    private int listenPort = 0;
     private int serverWorkerThreads = 8;
     private int serverCallbackExecutorThreads = 0;
     private int serverSelectorThreads = 3;

File: store/src/test/java/org/apache/rocketmq/store/AppendCallbackTest.java
Patch:
@@ -53,8 +53,8 @@ public void init() throws Exception {
         messageStoreConfig.setMappedFileSizeConsumeQueue(1024 * 4);
         messageStoreConfig.setMaxHashSlotNum(100);
         messageStoreConfig.setMaxIndexNum(100 * 10);
-        messageStoreConfig.setStorePathRootDir(System.getProperty("user.home") + File.separator + "unitteststore");
-        messageStoreConfig.setStorePathCommitLog(System.getProperty("user.home") + File.separator + "unitteststore" + File.separator + "commitlog");
+        messageStoreConfig.setStorePathRootDir(System.getProperty("java.io.tmpdir") + File.separator + "unitteststore");
+        messageStoreConfig.setStorePathCommitLog(System.getProperty("java.io.tmpdir") + File.separator + "unitteststore" + File.separator + "commitlog");
         //too much reference
         DefaultMessageStore messageStore = new DefaultMessageStore(messageStoreConfig, null, null, new BrokerConfig());
         CommitLog commitLog = new CommitLog(messageStore);
@@ -63,7 +63,7 @@ public void init() throws Exception {
 
     @After
     public void destroy() {
-        UtilAll.deleteFile(new File(System.getProperty("user.home") + File.separator + "unitteststore"));
+        UtilAll.deleteFile(new File(System.getProperty("java.io.tmpdir") + File.separator + "unitteststore"));
     }
 
     @Test

File: store/src/test/java/org/apache/rocketmq/store/ConsumeQueueTest.java
Patch:
@@ -46,7 +46,7 @@ public class ConsumeQueueTest {
 
     private static final String topic = "abc";
     private static final int queueId = 0;
-    private static final String storePath = "." + File.separator + "unit_test_store";
+    private static final String storePath = System.getProperty("java.io.tmpdir") + File.separator + "unit_test_store";
     private static final int commitLogFileSize = 1024 * 8;
     private static final int cqFileSize = 10 * 20;
     private static final int cqExtFileSize = 10 * (ConsumeQueueExt.CqExtUnit.MIN_EXT_UNIT_SIZE + 64);
@@ -119,7 +119,7 @@ public MessageStoreConfig buildStoreConfig(int commitLogFileSize, int cqFileSize
         messageStoreConfig.setMappedFileSizeConsumeQueueExt(cqExtFileSize);
         messageStoreConfig.setMessageIndexEnable(false);
         messageStoreConfig.setEnableConsumeQueueExt(enableCqExt);
-
+        messageStoreConfig.setHaListenPort(0);
         messageStoreConfig.setStorePathRootDir(storePath);
         messageStoreConfig.setStorePathCommitLog(storePath + File.separator + "commitlog");
 

File: store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreCleanFilesTest.java
Patch:
@@ -473,7 +473,7 @@ private MessageStoreConfig genMessageStoreConfig(String deleteWhen, int diskMaxU
         messageStoreConfig.setDeleteWhen(deleteWhen);
         messageStoreConfig.setDiskMaxUsedSpaceRatio(diskMaxUsedSpaceRatio);
 
-        String storePathRootDir = System.getProperty("user.home") + File.separator
+        String storePathRootDir = System.getProperty("java.io.tmpdir") + File.separator
                 + "DefaultMessageStoreCleanFilesTest-" + UUID.randomUUID();
         String storePathCommitLog = storePathRootDir + File.separator + "commitlog";
         messageStoreConfig.setStorePathRootDir(storePathRootDir);

File: store/src/test/java/org/apache/rocketmq/store/MultiDispatchTest.java
Patch:
@@ -49,9 +49,9 @@ public void init() throws Exception {
         messageStoreConfig.setMappedFileSizeConsumeQueue(1024 * 4);
         messageStoreConfig.setMaxHashSlotNum(100);
         messageStoreConfig.setMaxIndexNum(100 * 10);
-        messageStoreConfig.setStorePathRootDir(System.getProperty("user.home") + File.separator + "unitteststore1");
+        messageStoreConfig.setStorePathRootDir(System.getProperty("java.io.tmpdir") + File.separator + "unitteststore1");
         messageStoreConfig.setStorePathCommitLog(
-            System.getProperty("user.home") + File.separator + "unitteststore1" + File.separator + "commitlog");
+            System.getProperty("java.io.tmpdir") + File.separator + "unitteststore1" + File.separator + "commitlog");
 
         messageStoreConfig.setEnableLmq(true);
         messageStoreConfig.setEnableMultiDispatch(true);
@@ -64,7 +64,7 @@ public void init() throws Exception {
 
     @After
     public void destroy() {
-        UtilAll.deleteFile(new File(System.getProperty("user.home") + File.separator + "unitteststore1"));
+        UtilAll.deleteFile(new File(System.getProperty("java.io.tmpdir") + File.separator + "unitteststore1"));
     }
 
     @Test

File: store/src/test/java/org/apache/rocketmq/store/StoreTestBase.java
Patch:
@@ -150,7 +150,7 @@ protected MessageExtBrokerInner buildIPv6HostMessage() {
     }
 
     public static String createBaseDir() {
-        String baseDir = System.getProperty("user.home") + File.separator + "unitteststore" + File.separator + UUID.randomUUID();
+        String baseDir = System.getProperty("java.io.tmpdir") + File.separator + "unitteststore" + File.separator + UUID.randomUUID();
         final File file = new File(baseDir);
         if (file.exists()) {
             System.exit(1);

File: store/src/test/java/org/apache/rocketmq/store/timer/StoreTestUtils.java
Patch:
@@ -21,7 +21,7 @@
 
 public class StoreTestUtils {
     public static String createBaseDir() {
-        String baseDir = System.getProperty("user.home") + File.separator + "unitteststore-" + UUID.randomUUID();
+        String baseDir = System.getProperty("java.io.tmpdir") + File.separator + "unitteststore-" + UUID.randomUUID();
         final File file = new File(baseDir);
         if (file.exists()) {
             System.exit(1);

File: store/src/test/java/org/apache/rocketmq/store/timer/TimerMessageStoreTest.java
Patch:
@@ -100,8 +100,6 @@ public void init() throws Exception {
 
         messageStore = new DefaultMessageStore(storeConfig, new BrokerStatsManager("TimerTest",false), new MyMessageArrivingListener(), new BrokerConfig());
         boolean load = messageStore.load();
-        List<PutMessageHook> putMessageHookList = messageStore.getPutMessageHookList();
-
         assertTrue(load);
         messageStore.start();
     }

File: test/src/main/java/org/apache/rocketmq/test/schema/SchemaTools.java
Patch:
@@ -177,7 +177,7 @@ public int compare(Class<?> o1, Class<?> o2) {
                 }
             });
             String key = String.format("Method %s(%s)", method.getName(), Arrays.stream(parameterTypes).map(Class::getName).collect(Collectors.joining(",")));
-            String value = String.format("%s throws (%s)",
+            String value = String.format("%s throws (%s): %s",
                 isPublicOrPrivate(method.getModifiers()),
                 method.getReturnType().getName(),
                 Arrays.stream(exceptionTypes).map(Class::getName).collect(Collectors.joining(",")));

File: test/src/main/java/org/apache/rocketmq/test/util/RandomUtil.java
Patch:
@@ -265,7 +265,7 @@ public static int[] getRandomArray(int min, int max, int n) {
         Random rd = new Random();
         int index = 0;
         for (int i = 0; i < result.length; i++) {
-            index = Math.abs(rd.nextInt() % len--);
+            index = rd.nextInt(len--);
             result[i] = source[index];
             source[index] = source[len];
         }

File: test/src/test/java/org/apache/rocketmq/test/base/dledger/DLedgerProduceAndConsumeIT.java
Patch:
@@ -38,7 +38,6 @@
 import org.junit.Assert;
 import org.junit.Test;
 
-import static org.apache.rocketmq.test.base.IntegrationTestBase.nextPort;
 import static sun.util.locale.BaseLocale.SEP;
 
 public class DLedgerProduceAndConsumeIT {
@@ -57,7 +56,7 @@ public MessageStoreConfig buildStoreConfig(String brokerName, String peers, Stri
         String baseDir =  IntegrationTestBase.createBaseDir();
         storeConfig.setStorePathRootDir(baseDir);
         storeConfig.setStorePathCommitLog(baseDir + SEP + "commitlog");
-        storeConfig.setHaListenPort(nextPort());
+        storeConfig.setHaListenPort(0);
         storeConfig.setMappedFileSizeCommitLog(10 * 1024 * 1024);
         storeConfig.setEnableDLegerCommitLog(true);
         storeConfig.setdLegerGroup(brokerName);
@@ -71,7 +70,8 @@ public void testProduceAndConsume() throws Exception {
         String cluster = UUID.randomUUID().toString();
         String brokerName = UUID.randomUUID().toString();
         String selfId = "n0";
-        String peers = String.format("n0-localhost:%d", nextPort());
+        // TODO: We need to acquire the actual listening port after the peer has started.
+        String peers = String.format("n0-localhost:%d", 0);
         BrokerConfig brokerConfig = buildBrokerConfig(cluster, brokerName);
         MessageStoreConfig storeConfig = buildStoreConfig(brokerName, peers, selfId);
         BrokerController brokerController = IntegrationTestBase.createAndStartBroker(storeConfig, brokerConfig);

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgNotReceiveIT.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.rocketmq.test.client.consumer.broadcast.normal;
 
 import org.apache.log4j.Logger;
-import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadCastIT;
+import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
 import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
@@ -30,7 +30,7 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-public class BroadCastNormalMsgNotRecvIT extends BaseBroadCastIT {
+public class BroadcastNormalMsgNotReceiveIT extends BaseBroadcast {
     private static Logger logger = Logger
         .getLogger(NormalMsgTwoSameGroupConsumerIT.class);
     private RMQNormalProducer producer = null;

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgRecvCrashIT.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.rocketmq.test.client.consumer.broadcast.normal;
 
 import org.apache.log4j.Logger;
-import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadCastIT;
+import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
 import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
@@ -31,7 +31,7 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-public class BroadCastNormalMsgRecvCrashIT extends BaseBroadCastIT {
+public class BroadcastNormalMsgRecvCrashIT extends BaseBroadcast {
     private static Logger logger = Logger
         .getLogger(NormalMsgTwoSameGroupConsumerIT.class);
     private RMQNormalProducer producer = null;

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgRecvFailIT.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.log4j.Logger;
 import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
-import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadCastIT;
+import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
 import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
@@ -32,7 +32,7 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-public class BroadCastNormalMsgRecvFailIT extends BaseBroadCastIT {
+public class BroadcastNormalMsgRecvFailIT extends BaseBroadcast {
     private static Logger logger = Logger
         .getLogger(NormalMsgTwoSameGroupConsumerIT.class);
     private RMQNormalProducer producer = null;

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgRecvStartLaterIT.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.rocketmq.test.client.consumer.broadcast.normal;
 
 import org.apache.log4j.Logger;
-import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadCastIT;
+import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
 import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
@@ -31,7 +31,7 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-public class BroadCastNormalMsgRecvStartLaterIT extends BaseBroadCastIT {
+public class BroadcastNormalMsgRecvStartLaterIT extends BaseBroadcast {
     private static Logger logger = Logger
         .getLogger(NormalMsgTwoSameGroupConsumerIT.class);
     private RMQNormalProducer producer = null;

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgTwoDiffGroupRecvIT.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.rocketmq.test.client.consumer.broadcast.normal;
 
 import org.apache.log4j.Logger;
-import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadCastIT;
+import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
 import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
@@ -31,7 +31,7 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-public class BroadCastNormalMsgTwoDiffGroupRecvIT extends BaseBroadCastIT {
+public class BroadcastNormalMsgTwoDiffGroupRecvIT extends BaseBroadcast {
     private static Logger logger = Logger
         .getLogger(NormalMsgTwoSameGroupConsumerIT.class);
     private RMQNormalProducer producer = null;

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/NormalMsgTwoSameGroupConsumerIT.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.rocketmq.test.client.consumer.broadcast.normal;
 
 import org.apache.log4j.Logger;
-import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadCastIT;
+import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
 import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
@@ -31,7 +31,7 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-public class NormalMsgTwoSameGroupConsumerIT extends BaseBroadCastIT {
+public class NormalMsgTwoSameGroupConsumerIT extends BaseBroadcast {
     private static Logger logger = Logger
         .getLogger(NormalMsgTwoSameGroupConsumerIT.class);
     private RMQNormalProducer producer = null;

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/order/OrderMsgBroadcastIT.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.List;
 import org.apache.log4j.Logger;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadCastIT;
+import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
 import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.listener.rmq.order.RMQOrderListener;
@@ -38,8 +38,8 @@
  * Currently, dose not support the ordered broadcast message
  */
 @Ignore
-public class OrderMsgBroadCastIT extends BaseBroadCastIT {
-    private static Logger logger = Logger.getLogger(OrderMsgBroadCastIT.class);
+public class OrderMsgBroadcastIT extends BaseBroadcast {
+    private static Logger logger = Logger.getLogger(OrderMsgBroadcastIT.class);
     private RMQNormalProducer producer = null;
     private String topic = null;
 

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/tag/BroadcastTwoConsumerFilterIT.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.rocketmq.test.client.consumer.broadcast.tag;
 
 import org.apache.log4j.Logger;
-import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadCastIT;
+import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
 import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
@@ -31,8 +31,8 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-public class BroadCastTwoConsumerFilterIT extends BaseBroadCastIT {
-    private static Logger logger = Logger.getLogger(BroadCastTwoConsumerSubTagIT.class);
+public class BroadcastTwoConsumerFilterIT extends BaseBroadcast {
+    private static Logger logger = Logger.getLogger(BroadcastTwoConsumerSubTagIT.class);
     private RMQNormalProducer producer = null;
     private String topic = null;
 

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/tag/BroadcastTwoConsumerSubDiffTagIT.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.rocketmq.test.client.consumer.broadcast.tag;
 
 import org.apache.log4j.Logger;
-import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadCastIT;
+import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
 import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
@@ -31,8 +31,8 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-public class BroadCastTwoConsumerSubDiffTagIT extends BaseBroadCastIT {
-    private static Logger logger = Logger.getLogger(BroadCastTwoConsumerSubTagIT.class);
+public class BroadcastTwoConsumerSubDiffTagIT extends BaseBroadcast {
+    private static Logger logger = Logger.getLogger(BroadcastTwoConsumerSubTagIT.class);
     private RMQNormalProducer producer = null;
     private String topic = null;
 

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/tag/BroadcastTwoConsumerSubTagIT.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.rocketmq.test.client.consumer.broadcast.tag;
 
 import org.apache.log4j.Logger;
-import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadCastIT;
+import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
 import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
@@ -31,8 +31,8 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-public class BroadCastTwoConsumerSubTagIT extends BaseBroadCastIT {
-    private static Logger logger = Logger.getLogger(BroadCastTwoConsumerSubTagIT.class);
+public class BroadcastTwoConsumerSubTagIT extends BaseBroadcast {
+    private static Logger logger = Logger.getLogger(BroadcastTwoConsumerSubTagIT.class);
     private RMQNormalProducer producer = null;
     private String topic = null;
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -18,7 +18,6 @@
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.joran.JoranConfigurator;
-import ch.qos.logback.core.joran.spi.JoranException;
 import java.util.ArrayList;
 import java.util.List;
 import java.nio.file.Files;
@@ -268,7 +267,7 @@ public static void initCommand() {
         initCommand(new ReElectMasterSubCommand());
     }
 
-    private static void initLogback() throws JoranException {
+    private static void initLogback() throws Exception {
         LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();
         JoranConfigurator configurator = new JoranConfigurator();
         configurator.setContext(lc);

File: tools/src/main/java/org/apache/rocketmq/tools/command/acl/ClusterAclConfigVersionListSubCommand.java
Patch:
@@ -80,7 +80,7 @@ public void execute(CommandLine commandLine, Options options,
                 defaultMQAdminExt.start();
                 printClusterBaseInfo(defaultMQAdminExt, addr);
 
-                System.out.printf("get broker's plain access config version success.%n", addr);
+                System.out.printf("get broker's plain access config version success. Address:%s %n", addr);
                 return;
 
             } else if (commandLine.hasOption('c')) {

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgTraceByIdSubCommand.java
Patch:
@@ -76,6 +76,9 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
             if (commandLine.hasOption('t')) {
                 traceTopic = commandLine.getOptionValue('t').trim();
             }
+            if (commandLine.hasOption('n')) {
+                defaultMQAdminExt.setNamesrvAddr(commandLine.getOptionValue('n').trim());
+            }
             this.queryTraceByMsgId(defaultMQAdminExt, traceTopic, msgId);
         } catch (Exception e) {
             throw new SubCommandException(this.getClass().getSimpleName() + "command failed", e);

File: tools/src/test/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtTest.java
Patch:
@@ -481,6 +481,6 @@ public void testSearchOffset() throws Exception {
     @Test
     public void testExamineTopicConfig() throws MQBrokerException, RemotingException, InterruptedException {
         TopicConfig topicConfig = defaultMQAdminExt.examineTopicConfig("127.0.0.1:10911", "topic_test_examine_topicConfig");
-        assertThat(topicConfig.getTopicName().equals("topic_test_examine_topicConfig"));
+        assertThat(topicConfig.getTopicName().equals("topic_test_examine_topicConfig")).isTrue();
     }
 }
\ No newline at end of file

File: broker/src/test/java/org/apache/rocketmq/broker/failover/EscapeBridgeTest.java
Patch:
@@ -64,8 +64,6 @@ public class EscapeBridgeTest {
 
     private static final String BROKER_NAME = "broker_a";
 
-    private static final String NAMESERVER_ADDR = "127.0.0.1:9876";
-
     private static final String TEST_TOPIC = "TEST_TOPIC";
 
     private static final int DEFAULT_QUEUE_ID = 0;
@@ -81,7 +79,6 @@ public void before() throws Exception {
         escapeBridge = new EscapeBridge(brokerController);
         messageExtBrokerInner = new MessageExtBrokerInner();
         when(brokerController.getMessageStore()).thenReturn(defaultMessageStore);
-        when(brokerController.getNameServerList()).thenReturn(NAMESERVER_ADDR);
         brokerConfig.setEnableSlaveActingMaster(true);
         brokerConfig.setEnableRemoteEscape(true);
         escapeBridge.start();

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByIdSubCommand.java
Patch:
@@ -279,7 +279,7 @@ private void pushMsg(final DefaultMQAdminExt defaultMQAdminExt, final String con
         final String msgId) {
         try {
             ConsumerRunningInfo consumerRunningInfo = defaultMQAdminExt.getConsumerRunningInfo(consumerGroup, clientId, false, false);
-            if (ConsumerRunningInfo.isPushType(consumerRunningInfo)) {
+            if (consumerRunningInfo != null && ConsumerRunningInfo.isPushType(consumerRunningInfo)) {
                 ConsumeMessageDirectlyResult result =
                         defaultMQAdminExt.consumeMessageDirectly(consumerGroup, clientId, msgId);
                 System.out.printf("%s", result);

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -1269,7 +1269,7 @@ public ConsumeMessageDirectlyResult consumeMessageDirectly(final MessageExt msg,
         final String consumerGroup,
         final String brokerName) {
         MQConsumerInner mqConsumerInner = this.consumerTable.get(consumerGroup);
-        if (null != mqConsumerInner) {
+        if (null != mqConsumerInner && mqConsumerInner instanceof DefaultMQPushConsumerImpl) {
             DefaultMQPushConsumerImpl consumer = (DefaultMQPushConsumerImpl) mqConsumerInner;
 
             ConsumeMessageDirectlyResult result = consumer.getConsumeMessageService().consumeMessageDirectly(msg, brokerName);

File: acl/src/main/java/org/apache/rocketmq/acl/plain/RemoteAddressStrategyFactory.java
Patch:
@@ -50,18 +50,18 @@ public RemoteAddressStrategy getRemoteAddressStrategy(String remoteAddr) {
                 String[] strArray = StringUtils.split(remoteAddr, ":");
                 String last = strArray[strArray.length - 1];
                 if (!last.startsWith("{")) {
-                    throw new AclException(String.format("MultipleRemoteAddressStrategy netaddress examine scope Exception netaddress", remoteAddr));
+                    throw new AclException(String.format("MultipleRemoteAddressStrategy netaddress examine scope Exception netaddress: %s", remoteAddr));
                 }
                 return new MultipleRemoteAddressStrategy(AclUtils.getAddresses(remoteAddr, last));
             } else {
                 String[] strArray = StringUtils.split(remoteAddr, ".");
                 // However a right IP String provided by user,it always can be divided into 4 parts by '.'.
                 if (strArray.length < 4) {
-                    throw new AclException(String.format("MultipleRemoteAddressStrategy has got a/some wrong format IP(s) ", remoteAddr));
+                    throw new AclException(String.format("MultipleRemoteAddressStrategy has got a/some wrong format IP(s): %s ", remoteAddr));
                 }
                 String lastStr = strArray[strArray.length - 1];
                 if (!lastStr.startsWith("{")) {
-                    throw new AclException(String.format("MultipleRemoteAddressStrategy netaddress examine scope Exception netaddress", remoteAddr));
+                    throw new AclException(String.format("MultipleRemoteAddressStrategy netaddress examine scope Exception netaddress: %s", remoteAddr));
                 }
                 return new MultipleRemoteAddressStrategy(AclUtils.getAddresses(remoteAddr, lastStr));
             }

File: broker/src/test/java/org/apache/rocketmq/broker/filter/MessageStoreWithFilterTest.java
Patch:
@@ -61,7 +61,7 @@ public class MessageStoreWithFilterTest {
 
     private static final String topic = "topic";
     private static final int queueId = 0;
-    private static final String storePath = "." + File.separator + "unit_test_store";
+    private static final String storePath = System.getProperty("java.io.tmpdir") + File.separator + "unit_test_store";
     private static final int commitLogFileSize = 1024 * 1024 * 256;
     private static final int cqFileSize = 300000 * 20;
     private static final int cqExtFileSize = 300000 * 128;

File: broker/src/test/java/org/apache/rocketmq/broker/offset/ConsumerOffsetManagerTest.java
Patch:
@@ -44,12 +44,12 @@ public void init(){
     @Test
     public void cleanOffsetByTopic_NotExist(){
         consumerOffsetManager.cleanOffsetByTopic("InvalidTopic");
-        assertThat(consumerOffsetManager.getOffsetTable().containsKey(key));
+        assertThat(consumerOffsetManager.getOffsetTable().containsKey(key)).isTrue();
     }
 
     @Test
     public void cleanOffsetByTopic_Exist(){
         consumerOffsetManager.cleanOffsetByTopic("FooBar");
-        assertThat(!consumerOffsetManager.getOffsetTable().containsKey(key));
+        assertThat(!consumerOffsetManager.getOffsetTable().containsKey(key)).isTrue();
     }
 }

File: broker/src/test/java/org/apache/rocketmq/broker/processor/ReplyMessageProcessorTest.java
Patch:
@@ -48,6 +48,7 @@
 import org.apache.rocketmq.store.PutMessageStatus;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
@@ -91,6 +92,7 @@ public void init() throws IllegalAccessException, NoSuchFieldException {
         replyMessageProcessor = new ReplyMessageProcessor(brokerController);
     }
 
+    @Ignore
     @Test
     public void testProcessRequest_Success() throws RemotingCommandException, InterruptedException, RemotingTimeoutException, RemotingSendRequestException {
         when(messageStore.putMessage(any(MessageExtBrokerInner.class))).thenReturn(new PutMessageResult(PutMessageStatus.PUT_OK, new AppendMessageResult(AppendMessageStatus.PUT_OK)));

File: broker/src/test/java/org/apache/rocketmq/broker/schedule/ScheduleMessageServiceTest.java
Patch:
@@ -73,7 +73,7 @@ public class ScheduleMessageServiceTest {
      */
     int delayLevel = 3;
 
-    private static final String storePath = System.getProperty("user.home") + File.separator + "schedule_test#" + UUID.randomUUID();
+    private static final String storePath = System.getProperty("java.io.tmpdir") + File.separator + "schedule_test#" + UUID.randomUUID();
     private static final int commitLogFileSize = 1024;
     private static final int cqFileSize = 10;
     private static final int cqExtFileSize = 10 * (ConsumeQueueExt.CqExtUnit.MIN_EXT_UNIT_SIZE + 64);
@@ -113,6 +113,8 @@ public void setUp() throws Exception {
         messageStoreConfig.setEnableConsumeQueueExt(true);
         messageStoreConfig.setStorePathRootDir(storePath);
         messageStoreConfig.setStorePathCommitLog(storePath + File.separator + "commitlog");
+        // Let OS pick an available port
+        messageStoreConfig.setHaListenPort(0);
 
         brokerConfig = new BrokerConfig();
         BrokerStatsManager manager = new BrokerStatsManager(brokerConfig.getBrokerClusterName(), brokerConfig.isEnableDetailStat());

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -1058,7 +1058,7 @@ public void run() {
                         Validators.checkMessage(msg, defaultMQProducer);
 
                         if (!msg.getTopic().equals(mq.getTopic())) {
-                            throw new MQClientException("message's topic not equal mq's topic", null);
+                            throw new MQClientException("Topic of the message does not match its target message queue", null);
                         }
                         long costTime = System.currentTimeMillis() - beginStartTime;
                         if (timeout > costTime) {

File: client/src/test/java/org/apache/rocketmq/client/impl/factory/MQClientInstanceTest.java
Patch:
@@ -161,7 +161,7 @@ public void testConsumerRunningInfoWhenConsumersIsEmptyOrNot() throws RemotingEx
 
         runningInfo = mqClientInstance.consumerRunningInfo(group);
         assertThat(runningInfo).isNotNull();
-        assertThat(mockConsumerInner.consumerRunningInfo().getProperties().get(ConsumerRunningInfo.PROP_CONSUME_TYPE));
+        assertThat(mockConsumerInner.consumerRunningInfo().getProperties().get(ConsumerRunningInfo.PROP_CONSUME_TYPE)).isNotNull();
 
         mqClientInstance.unregisterConsumer(group);
         flag = mqClientInstance.registerConsumer(group, mock(MQConsumerInner.class));

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -220,7 +220,7 @@ public static String file2String(final File file) throws IOException {
             }
 
             if (result) {
-                return new String(data);
+                return new String(data, "UTF-8");
             }
         }
         return null;

File: common/src/test/java/org/apache/rocketmq/common/MixAllTest.java
Patch:
@@ -75,7 +75,7 @@ public void testFile2String_WithChinese() throws IOException {
             file.delete();
         }
         file.createNewFile();
-        PrintWriter out = new PrintWriter(fileName);
+        PrintWriter out = new PrintWriter(fileName, "UTF-8");
         out.write("TestForMixAll_中文");
         out.close();
         String string = MixAll.file2String(fileName);

File: common/src/test/java/org/apache/rocketmq/common/message/MessageClientIDSetterTest.java
Patch:
@@ -29,7 +29,7 @@ public void testGetTimeFromID() {
         long t = System.currentTimeMillis();
         String uniqID = MessageClientIDSetter.createUniqID();
         long t2 = MessageClientIDSetter.getNearlyTimeFromID(uniqID).getTime();
-        assertThat(t2 - t < 20);
+        assertThat(t2 - t < 20).isTrue();
     }
 
     @Test
@@ -40,7 +40,7 @@ public void testGetCountFromID() {
         String idHex2 = uniqID2.substring(uniqID2.length() - 4);
         int s1 = Integer.parseInt(idHex, 16);
         int s2 = Integer.parseInt(idHex2, 16);
-        assertThat(s1 == s2 - 1);
+        assertThat(s1 == s2 - 1).isTrue();
     }
 
 

File: common/src/test/java/org/apache/rocketmq/common/message/MessageDecoderTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import java.net.InetAddress;
@@ -257,6 +258,8 @@ public void testEncodeAndDecodeOnIPv6Host() {
         assertThat("abc").isEqualTo(decodedMsg.getTopic());
     }
 
+    @Ignore
+    @Test
     public void testNullValueProperty() throws Exception {
         MessageExt msg = new MessageExt();
         msg.setBody("x".getBytes());

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/NamesrvStartup.java
Patch:
@@ -18,10 +18,8 @@
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.joran.JoranConfigurator;
-import ch.qos.logback.core.joran.spi.JoranException;
 import java.io.BufferedInputStream;
 import java.io.FileInputStream;
-import java.io.IOException;
 import java.io.InputStream;
 import java.util.Properties;
 import java.util.concurrent.Callable;
@@ -84,7 +82,7 @@ public static ControllerManager controllerManagerMain() {
         return null;
     }
 
-    public static void parseCommandlineAndConfigFile(String[] args) throws IOException, JoranException {
+    public static void parseCommandlineAndConfigFile(String[] args) throws Exception {
         System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, Integer.toString(MQVersion.CURRENT_VERSION));
         //PackageConflictDetect.detectFastjson();
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManager.java
Patch:
@@ -77,8 +77,7 @@ protected static Settings mergeProducerData(Settings settings) {
                 .setInitial(Durations.fromMillis(config.getGrpcClientProducerBackoffInitialMillis()))
                 .setMax(Durations.fromMillis(config.getGrpcClientProducerBackoffMaxMillis()))
                 .setMultiplier(config.getGrpcClientProducerBackoffMultiplier())
-                .build())
-            .build();
+                .build());
 
         builder.getPublishingBuilder()
             .setValidateMessageType(config.isEnableTopicMessageTypeCheck())

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -175,8 +175,7 @@ public Thread newThread(Runnable r) {
 
     private static int initValueIndex() {
         Random r = new Random();
-
-        return Math.abs(r.nextInt() % 999) % 999;
+        return r.nextInt(999);
     }
 
     @Override

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyServerConfig.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.rocketmq.remoting.netty;
 
 public class NettyServerConfig implements Cloneable {
-    private int listenPort = 8888;
+    private int listenPort = 0;
     private int serverWorkerThreads = 8;
     private int serverCallbackExecutorThreads = 0;
     private int serverSelectorThreads = 3;

File: store/src/test/java/org/apache/rocketmq/store/AppendCallbackTest.java
Patch:
@@ -53,8 +53,8 @@ public void init() throws Exception {
         messageStoreConfig.setMappedFileSizeConsumeQueue(1024 * 4);
         messageStoreConfig.setMaxHashSlotNum(100);
         messageStoreConfig.setMaxIndexNum(100 * 10);
-        messageStoreConfig.setStorePathRootDir(System.getProperty("user.home") + File.separator + "unitteststore");
-        messageStoreConfig.setStorePathCommitLog(System.getProperty("user.home") + File.separator + "unitteststore" + File.separator + "commitlog");
+        messageStoreConfig.setStorePathRootDir(System.getProperty("java.io.tmpdir") + File.separator + "unitteststore");
+        messageStoreConfig.setStorePathCommitLog(System.getProperty("java.io.tmpdir") + File.separator + "unitteststore" + File.separator + "commitlog");
         //too much reference
         DefaultMessageStore messageStore = new DefaultMessageStore(messageStoreConfig, null, null, new BrokerConfig());
         CommitLog commitLog = new CommitLog(messageStore);
@@ -63,7 +63,7 @@ public void init() throws Exception {
 
     @After
     public void destroy() {
-        UtilAll.deleteFile(new File(System.getProperty("user.home") + File.separator + "unitteststore"));
+        UtilAll.deleteFile(new File(System.getProperty("java.io.tmpdir") + File.separator + "unitteststore"));
     }
 
     @Test

File: store/src/test/java/org/apache/rocketmq/store/ConsumeQueueTest.java
Patch:
@@ -46,7 +46,7 @@ public class ConsumeQueueTest {
 
     private static final String topic = "abc";
     private static final int queueId = 0;
-    private static final String storePath = "." + File.separator + "unit_test_store";
+    private static final String storePath = System.getProperty("java.io.tmpdir") + File.separator + "unit_test_store";
     private static final int commitLogFileSize = 1024 * 8;
     private static final int cqFileSize = 10 * 20;
     private static final int cqExtFileSize = 10 * (ConsumeQueueExt.CqExtUnit.MIN_EXT_UNIT_SIZE + 64);
@@ -119,7 +119,7 @@ public MessageStoreConfig buildStoreConfig(int commitLogFileSize, int cqFileSize
         messageStoreConfig.setMappedFileSizeConsumeQueueExt(cqExtFileSize);
         messageStoreConfig.setMessageIndexEnable(false);
         messageStoreConfig.setEnableConsumeQueueExt(enableCqExt);
-
+        messageStoreConfig.setHaListenPort(0);
         messageStoreConfig.setStorePathRootDir(storePath);
         messageStoreConfig.setStorePathCommitLog(storePath + File.separator + "commitlog");
 

File: store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreCleanFilesTest.java
Patch:
@@ -473,7 +473,7 @@ private MessageStoreConfig genMessageStoreConfig(String deleteWhen, int diskMaxU
         messageStoreConfig.setDeleteWhen(deleteWhen);
         messageStoreConfig.setDiskMaxUsedSpaceRatio(diskMaxUsedSpaceRatio);
 
-        String storePathRootDir = System.getProperty("user.home") + File.separator
+        String storePathRootDir = System.getProperty("java.io.tmpdir") + File.separator
                 + "DefaultMessageStoreCleanFilesTest-" + UUID.randomUUID();
         String storePathCommitLog = storePathRootDir + File.separator + "commitlog";
         messageStoreConfig.setStorePathRootDir(storePathRootDir);

File: store/src/test/java/org/apache/rocketmq/store/MultiDispatchTest.java
Patch:
@@ -49,9 +49,9 @@ public void init() throws Exception {
         messageStoreConfig.setMappedFileSizeConsumeQueue(1024 * 4);
         messageStoreConfig.setMaxHashSlotNum(100);
         messageStoreConfig.setMaxIndexNum(100 * 10);
-        messageStoreConfig.setStorePathRootDir(System.getProperty("user.home") + File.separator + "unitteststore1");
+        messageStoreConfig.setStorePathRootDir(System.getProperty("java.io.tmpdir") + File.separator + "unitteststore1");
         messageStoreConfig.setStorePathCommitLog(
-            System.getProperty("user.home") + File.separator + "unitteststore1" + File.separator + "commitlog");
+            System.getProperty("java.io.tmpdir") + File.separator + "unitteststore1" + File.separator + "commitlog");
 
         messageStoreConfig.setEnableLmq(true);
         messageStoreConfig.setEnableMultiDispatch(true);
@@ -64,7 +64,7 @@ public void init() throws Exception {
 
     @After
     public void destroy() {
-        UtilAll.deleteFile(new File(System.getProperty("user.home") + File.separator + "unitteststore1"));
+        UtilAll.deleteFile(new File(System.getProperty("java.io.tmpdir") + File.separator + "unitteststore1"));
     }
 
     @Test

File: store/src/test/java/org/apache/rocketmq/store/StoreTestBase.java
Patch:
@@ -150,7 +150,7 @@ protected MessageExtBrokerInner buildIPv6HostMessage() {
     }
 
     public static String createBaseDir() {
-        String baseDir = System.getProperty("user.home") + File.separator + "unitteststore" + File.separator + UUID.randomUUID();
+        String baseDir = System.getProperty("java.io.tmpdir") + File.separator + "unitteststore" + File.separator + UUID.randomUUID();
         final File file = new File(baseDir);
         if (file.exists()) {
             System.exit(1);

File: test/src/main/java/org/apache/rocketmq/test/schema/SchemaTools.java
Patch:
@@ -177,7 +177,7 @@ public int compare(Class<?> o1, Class<?> o2) {
                 }
             });
             String key = String.format("Method %s(%s)", method.getName(), Arrays.stream(parameterTypes).map(Class::getName).collect(Collectors.joining(",")));
-            String value = String.format("%s throws (%s)",
+            String value = String.format("%s throws (%s): %s",
                 isPublicOrPrivate(method.getModifiers()),
                 method.getReturnType().getName(),
                 Arrays.stream(exceptionTypes).map(Class::getName).collect(Collectors.joining(",")));

File: test/src/main/java/org/apache/rocketmq/test/util/RandomUtil.java
Patch:
@@ -265,7 +265,7 @@ public static int[] getRandomArray(int min, int max, int n) {
         Random rd = new Random();
         int index = 0;
         for (int i = 0; i < result.length; i++) {
-            index = Math.abs(rd.nextInt() % len--);
+            index = rd.nextInt(len--);
             result[i] = source[index];
             source[index] = source[len];
         }

File: test/src/test/java/org/apache/rocketmq/test/base/dledger/DLedgerProduceAndConsumeIT.java
Patch:
@@ -38,7 +38,6 @@
 import org.junit.Assert;
 import org.junit.Test;
 
-import static org.apache.rocketmq.test.base.IntegrationTestBase.nextPort;
 import static sun.util.locale.BaseLocale.SEP;
 
 public class DLedgerProduceAndConsumeIT {
@@ -57,7 +56,7 @@ public MessageStoreConfig buildStoreConfig(String brokerName, String peers, Stri
         String baseDir =  IntegrationTestBase.createBaseDir();
         storeConfig.setStorePathRootDir(baseDir);
         storeConfig.setStorePathCommitLog(baseDir + SEP + "commitlog");
-        storeConfig.setHaListenPort(nextPort());
+        storeConfig.setHaListenPort(0);
         storeConfig.setMappedFileSizeCommitLog(10 * 1024 * 1024);
         storeConfig.setEnableDLegerCommitLog(true);
         storeConfig.setdLegerGroup(brokerName);
@@ -71,7 +70,8 @@ public void testProduceAndConsume() throws Exception {
         String cluster = UUID.randomUUID().toString();
         String brokerName = UUID.randomUUID().toString();
         String selfId = "n0";
-        String peers = String.format("n0-localhost:%d", nextPort());
+        // TODO: We need to acquire the actual listening port after the peer has started.
+        String peers = String.format("n0-localhost:%d", 0);
         BrokerConfig brokerConfig = buildBrokerConfig(cluster, brokerName);
         MessageStoreConfig storeConfig = buildStoreConfig(brokerName, peers, selfId);
         BrokerController brokerController = IntegrationTestBase.createAndStartBroker(storeConfig, brokerConfig);

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgNotReceiveIT.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.rocketmq.test.client.consumer.broadcast.normal;
 
 import org.apache.log4j.Logger;
-import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadCastIT;
+import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
 import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
@@ -30,7 +30,7 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-public class BroadCastNormalMsgNotRecvIT extends BaseBroadCastIT {
+public class BroadcastNormalMsgNotReceiveIT extends BaseBroadcast {
     private static Logger logger = Logger
         .getLogger(NormalMsgTwoSameGroupConsumerIT.class);
     private RMQNormalProducer producer = null;

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgRecvCrashIT.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.rocketmq.test.client.consumer.broadcast.normal;
 
 import org.apache.log4j.Logger;
-import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadCastIT;
+import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
 import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
@@ -31,7 +31,7 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-public class BroadCastNormalMsgRecvCrashIT extends BaseBroadCastIT {
+public class BroadcastNormalMsgRecvCrashIT extends BaseBroadcast {
     private static Logger logger = Logger
         .getLogger(NormalMsgTwoSameGroupConsumerIT.class);
     private RMQNormalProducer producer = null;

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgRecvFailIT.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.log4j.Logger;
 import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
-import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadCastIT;
+import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
 import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
@@ -32,7 +32,7 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-public class BroadCastNormalMsgRecvFailIT extends BaseBroadCastIT {
+public class BroadcastNormalMsgRecvFailIT extends BaseBroadcast {
     private static Logger logger = Logger
         .getLogger(NormalMsgTwoSameGroupConsumerIT.class);
     private RMQNormalProducer producer = null;

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgRecvStartLaterIT.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.rocketmq.test.client.consumer.broadcast.normal;
 
 import org.apache.log4j.Logger;
-import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadCastIT;
+import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
 import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
@@ -31,7 +31,7 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-public class BroadCastNormalMsgRecvStartLaterIT extends BaseBroadCastIT {
+public class BroadcastNormalMsgRecvStartLaterIT extends BaseBroadcast {
     private static Logger logger = Logger
         .getLogger(NormalMsgTwoSameGroupConsumerIT.class);
     private RMQNormalProducer producer = null;

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgTwoDiffGroupRecvIT.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.rocketmq.test.client.consumer.broadcast.normal;
 
 import org.apache.log4j.Logger;
-import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadCastIT;
+import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
 import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
@@ -31,7 +31,7 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-public class BroadCastNormalMsgTwoDiffGroupRecvIT extends BaseBroadCastIT {
+public class BroadcastNormalMsgTwoDiffGroupRecvIT extends BaseBroadcast {
     private static Logger logger = Logger
         .getLogger(NormalMsgTwoSameGroupConsumerIT.class);
     private RMQNormalProducer producer = null;

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/NormalMsgTwoSameGroupConsumerIT.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.rocketmq.test.client.consumer.broadcast.normal;
 
 import org.apache.log4j.Logger;
-import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadCastIT;
+import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
 import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
@@ -31,7 +31,7 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-public class NormalMsgTwoSameGroupConsumerIT extends BaseBroadCastIT {
+public class NormalMsgTwoSameGroupConsumerIT extends BaseBroadcast {
     private static Logger logger = Logger
         .getLogger(NormalMsgTwoSameGroupConsumerIT.class);
     private RMQNormalProducer producer = null;

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/order/OrderMsgBroadcastIT.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.List;
 import org.apache.log4j.Logger;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadCastIT;
+import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
 import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.listener.rmq.order.RMQOrderListener;
@@ -38,8 +38,8 @@
  * Currently, dose not support the ordered broadcast message
  */
 @Ignore
-public class OrderMsgBroadCastIT extends BaseBroadCastIT {
-    private static Logger logger = Logger.getLogger(OrderMsgBroadCastIT.class);
+public class OrderMsgBroadcastIT extends BaseBroadcast {
+    private static Logger logger = Logger.getLogger(OrderMsgBroadcastIT.class);
     private RMQNormalProducer producer = null;
     private String topic = null;
 

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/tag/BroadcastTwoConsumerFilterIT.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.rocketmq.test.client.consumer.broadcast.tag;
 
 import org.apache.log4j.Logger;
-import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadCastIT;
+import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
 import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
@@ -31,8 +31,8 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-public class BroadCastTwoConsumerFilterIT extends BaseBroadCastIT {
-    private static Logger logger = Logger.getLogger(BroadCastTwoConsumerSubTagIT.class);
+public class BroadcastTwoConsumerFilterIT extends BaseBroadcast {
+    private static Logger logger = Logger.getLogger(BroadcastTwoConsumerSubTagIT.class);
     private RMQNormalProducer producer = null;
     private String topic = null;
 

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/tag/BroadcastTwoConsumerSubDiffTagIT.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.rocketmq.test.client.consumer.broadcast.tag;
 
 import org.apache.log4j.Logger;
-import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadCastIT;
+import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
 import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
@@ -31,8 +31,8 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-public class BroadCastTwoConsumerSubDiffTagIT extends BaseBroadCastIT {
-    private static Logger logger = Logger.getLogger(BroadCastTwoConsumerSubTagIT.class);
+public class BroadcastTwoConsumerSubDiffTagIT extends BaseBroadcast {
+    private static Logger logger = Logger.getLogger(BroadcastTwoConsumerSubTagIT.class);
     private RMQNormalProducer producer = null;
     private String topic = null;
 

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/tag/BroadcastTwoConsumerSubTagIT.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.rocketmq.test.client.consumer.broadcast.tag;
 
 import org.apache.log4j.Logger;
-import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadCastIT;
+import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
 import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
@@ -31,8 +31,8 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-public class BroadCastTwoConsumerSubTagIT extends BaseBroadCastIT {
-    private static Logger logger = Logger.getLogger(BroadCastTwoConsumerSubTagIT.class);
+public class BroadcastTwoConsumerSubTagIT extends BaseBroadcast {
+    private static Logger logger = Logger.getLogger(BroadcastTwoConsumerSubTagIT.class);
     private RMQNormalProducer producer = null;
     private String topic = null;
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -18,7 +18,6 @@
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.joran.JoranConfigurator;
-import ch.qos.logback.core.joran.spi.JoranException;
 import java.util.ArrayList;
 import java.util.List;
 import java.nio.file.Files;
@@ -268,7 +267,7 @@ public static void initCommand() {
         initCommand(new ReElectMasterSubCommand());
     }
 
-    private static void initLogback() throws JoranException {
+    private static void initLogback() throws Exception {
         LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();
         JoranConfigurator configurator = new JoranConfigurator();
         configurator.setContext(lc);

File: tools/src/main/java/org/apache/rocketmq/tools/command/acl/ClusterAclConfigVersionListSubCommand.java
Patch:
@@ -80,7 +80,7 @@ public void execute(CommandLine commandLine, Options options,
                 defaultMQAdminExt.start();
                 printClusterBaseInfo(defaultMQAdminExt, addr);
 
-                System.out.printf("get broker's plain access config version success.%n", addr);
+                System.out.printf("get broker's plain access config version success. Address:%s %n", addr);
                 return;
 
             } else if (commandLine.hasOption('c')) {

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgTraceByIdSubCommand.java
Patch:
@@ -76,6 +76,9 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
             if (commandLine.hasOption('t')) {
                 traceTopic = commandLine.getOptionValue('t').trim();
             }
+            if (commandLine.hasOption('n')) {
+                defaultMQAdminExt.setNamesrvAddr(commandLine.getOptionValue('n').trim());
+            }
             this.queryTraceByMsgId(defaultMQAdminExt, traceTopic, msgId);
         } catch (Exception e) {
             throw new SubCommandException(this.getClass().getSimpleName() + "command failed", e);

File: tools/src/test/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtTest.java
Patch:
@@ -481,6 +481,6 @@ public void testSearchOffset() throws Exception {
     @Test
     public void testExamineTopicConfig() throws MQBrokerException, RemotingException, InterruptedException {
         TopicConfig topicConfig = defaultMQAdminExt.examineTopicConfig("127.0.0.1:10911", "topic_test_examine_topicConfig");
-        assertThat(topicConfig.getTopicName().equals("topic_test_examine_topicConfig"));
+        assertThat(topicConfig.getTopicName().equals("topic_test_examine_topicConfig")).isTrue();
     }
 }
\ No newline at end of file

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -780,8 +780,7 @@ public CompletableFuture<PutMessageResult> asyncPutMessage(final MessageExtBroke
             msg.setStoreTimestamp(System.currentTimeMillis());
         }
 
-        // Set the message body BODY CRC (consider the most appropriate setting
-        // on the client)
+        // Set the message body CRC (consider the most appropriate setting on the client)
         msg.setBodyCRC(UtilAll.crc32(msg.getBody()));
         // Back to Results
         AppendMessageResult result = null;

File: tools/src/test/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtTest.java
Patch:
@@ -465,16 +465,16 @@ public void testGetAllSubscriptionGroup() throws InterruptedException, MQBrokerE
     }
 
     @Test
+    @Ignore
     public void testMaxOffset() throws Exception {
         when(mQClientAPIImpl.getMaxOffset(anyString(), any(MessageQueue.class), anyLong())).thenReturn(100L);
-
         assertThat(defaultMQAdminExt.maxOffset(new MessageQueue(topic1, broker1Name, 0))).isEqualTo(100L);
     }
 
     @Test
+    @Ignore
     public void testSearchOffset() throws Exception {
         when(mQClientAPIImpl.searchOffset(anyString(), any(MessageQueue.class), anyLong(), anyLong())).thenReturn(101L);
-
         assertThat(defaultMQAdminExt.searchOffset(new MessageQueue(topic1, broker1Name, 0), System.currentTimeMillis())).isEqualTo(101L);
     }
 

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAService.java
Patch:
@@ -262,6 +262,7 @@ public void updateConfirmOffsetWhenSlaveAck(final String slaveAddress) {
         }
     }
 
+    @Override
     public int inSyncReplicasNums(final long masterPutWhere) {
         return syncStateSet.size();
     }

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/TopicList.java
Patch:
@@ -16,12 +16,13 @@
  */
 package org.apache.rocketmq.common.protocol.body;
 
-import java.util.HashSet;
 import java.util.Set;
+import java.util.concurrent.CopyOnWriteArraySet;
+
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
 public class TopicList extends RemotingSerializable {
-    private Set<String> topicList = new HashSet<String>();
+    private Set<String> topicList = new CopyOnWriteArraySet<>();
     private String brokerAddr;
 
     public Set<String> getTopicList() {

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -797,7 +797,7 @@ private List<RollbackStats> resetOffsetByTimestampOld(String brokerAddr, QueueDa
         }
 
         if (!hasConsumed) {
-            HashMap<MessageQueue, TopicOffset> topicStatus = this.mqClientInstance.getMQClientAPIImpl().getTopicStatsInfo(brokerAddr, topic, timeoutMillis).getOffsetTable();
+            Map<MessageQueue, TopicOffset> topicStatus = this.mqClientInstance.getMQClientAPIImpl().getTopicStatsInfo(brokerAddr, topic, timeoutMillis).getOffsetTable();
             for (int i = 0; i < queueData.getReadQueueNums(); i++) {
                 MessageQueue queue = new MessageQueue(topic, queueData.getBrokerName(), i);
                 OffsetWrapper offsetWrapper = new OffsetWrapper();
@@ -1107,7 +1107,7 @@ public AdminToolResult<List<QueueTimeSpan>> queryConsumeTimeSpanConcurrent(final
         return adminToolExecute(new AdminToolHandler() {
             @Override
             public AdminToolResult doExecute() throws Exception {
-                final List<QueueTimeSpan> spanSet = new ArrayList<QueueTimeSpan>();
+                final List<QueueTimeSpan> spanSet = new CopyOnWriteArrayList<>();
                 TopicRouteData topicRouteData = examineTopicRouteInfo(topic);
 
                 if (topicRouteData == null || topicRouteData.getBrokerDatas() == null || topicRouteData.getBrokerDatas().size() == 0) {

File: store/src/main/java/org/apache/rocketmq/store/MappedFileQueue.java
Patch:
@@ -277,7 +277,7 @@ public boolean resetOffset(long offset) {
                 return false;
         }
 
-        ListIterator<MappedFile> iterator = this.mappedFiles.listIterator();
+        ListIterator<MappedFile> iterator = this.mappedFiles.listIterator(mappedFiles.size());
 
         while (iterator.hasPrevious()) {
             mappedFileLast = iterator.previous();

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ChangeInvisibleTimeProcessor.java
Patch:
@@ -189,7 +189,7 @@ private PutMessageResult appendCheckPoint(final ChangeInvisibleTimeRequestHeader
         msgInner.setDeliverTimeMs(ck.getReviveTime() - PopAckConstants.ackTimeInterval);
         msgInner.getProperties().put(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX, PopMessageProcessor.genCkUniqueId(ck));
         msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));
-        PutMessageResult putMessageResult = this.brokerController.getMessageStore().putMessage(msgInner);
+        PutMessageResult putMessageResult = this.brokerController.getEscapeBridge().putMessageToSpecificQueue(msgInner);
 
         if (brokerController.getBrokerConfig().isEnablePopLog()) {
             POP_LOGGER.info("change Invisible , appendCheckPoint, topic {}, queueId {},reviveId {}, cid {}, startOffset {}, rt {}, result {}", requestHeader.getTopic(), queueId, reviveQid, requestHeader.getConsumerGroup(), offset,

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java
Patch:
@@ -477,7 +477,7 @@ private long popMsgFromQueue(boolean isRetry, GetMessageResult getMessageResult,
             return restNum;
         }
         offset = getPopOffset(topic, requestHeader, queueId, true, lockKey);
-        GetMessageResult getMessageTmpResult;
+        GetMessageResult getMessageTmpResult = null;
         try {
             if (isOrder && brokerController.getConsumerOrderInfoManager().checkBlock(topic,
                 requestHeader.getConsumerGroup(), queueId, requestHeader.getInvisibleTime())) {
@@ -544,6 +544,8 @@ private long popMsgFromQueue(boolean isRetry, GetMessageResult getMessageResult,
 //                this.brokerController.getConsumerOffsetManager().commitOffset(channel.remoteAddress().toString(), requestHeader.getConsumerGroup(), topic,
 //                        queueId, getMessageTmpResult.getNextBeginOffset());
             }
+        } catch (Exception e) {
+            POP_LOGGER.error("Exception in popMsgFromQueue", e);
         } finally {
             queueLockManager.unLock(lockKey);
         }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
Patch:
@@ -106,7 +106,7 @@ private void reviveRetry(PopCheckPoint popCheckPoint, MessageExt messageExt) thr
         }
         msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));
         addRetryTopicIfNoExit(msgInner.getTopic(), popCheckPoint.getCId());
-        PutMessageResult putMessageResult = brokerController.getMessageStore().putMessage(msgInner);
+        PutMessageResult putMessageResult = brokerController.getEscapeBridge().putMessageToSpecificQueue(msgInner);
         if (brokerController.getBrokerConfig().isEnablePopLog()) {
             POP_LOGGER.info("reviveQueueId={},retry msg , ck={}, msg queueId {}, offset {}, reviveDelay={}, result is {} ",
                 queueId, popCheckPoint, messageExt.getQueueId(), messageExt.getQueueOffset(),

File: broker/src/test/java/org/apache/rocketmq/broker/processor/PopMessageProcessorTest.java
Patch:
@@ -78,7 +78,6 @@ public class PopMessageProcessorTest {
     public void init() {
         brokerController.setMessageStore(messageStore);
         popMessageProcessor = new PopMessageProcessor(brokerController);
-        when(messageStore.putMessage(any())).thenReturn(new PutMessageResult(PutMessageStatus.PUT_OK, new AppendMessageResult(AppendMessageStatus.PUT_OK)));
         Channel mockChannel = mock(Channel.class);
         when(mockChannel.remoteAddress()).thenReturn(new InetSocketAddress(1024));
         when(handlerContext.channel()).thenReturn(mockChannel);

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -1685,7 +1685,9 @@ protected void sendHeartbeat() {
                         this.brokerConfig.getBrokerName(),
                         this.brokerConfig.getBrokerId(),
                         this.brokerConfig.getSendHeartbeatTimeoutMillis(),
-                        this.brokerConfig.isInBrokerContainer()
+                        this.brokerConfig.isInBrokerContainer(), this.replicasManager.getLastEpoch(),
+                        this.messageStore.getMaxPhyOffset(),
+                        this.replicasManager.getConfirmOffset()
                     );
                 }
             }

File: broker/src/test/java/org/apache/rocketmq/broker/controller/ReplicasManagerTest.java
Patch:
@@ -40,6 +40,8 @@
 import org.mockito.junit.MockitoJUnitRunner;
 
 import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyInt;
+import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Mockito.when;
 
 @RunWith(MockitoJUnitRunner.class)
@@ -121,7 +123,7 @@ public void before() throws Exception {
         when(brokerController.getBrokerOuterAPI()).thenReturn(brokerOuterAPI);
         when(brokerController.getBrokerAddr()).thenReturn(OLD_MASTER_ADDRESS);
         when(brokerOuterAPI.getControllerMetaData(any())).thenReturn(getMetaDataResponseHeader);
-        when(brokerOuterAPI.registerBrokerToController(any(), any(), any(), any())).thenReturn(registerBrokerToControllerResponseHeader);
+        when(brokerOuterAPI.registerBrokerToController(any(), any(), any(), any(), anyInt(), anyLong())).thenReturn(registerBrokerToControllerResponseHeader);
         when(brokerOuterAPI.getReplicaInfo(any(), any(), any())).thenReturn(result);
         replicasManager = new ReplicasManager(brokerController);
         autoSwitchHAService.init(defaultMessageStore);

File: controller/src/main/java/org/apache/rocketmq/controller/processor/ControllerRequestProcessor.java
Patch:
@@ -114,7 +114,7 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand
                     final RegisterBrokerToControllerResponseHeader responseHeader = (RegisterBrokerToControllerResponseHeader) response.readCustomHeader();
                     if (responseHeader != null && responseHeader.getBrokerId() >= 0) {
                         this.heartbeatManager.registerBroker(controllerRequest.getClusterName(), controllerRequest.getBrokerName(), controllerRequest.getBrokerAddress(),
-                                responseHeader.getBrokerId(), controllerRequest.getHeartbeatTimeoutMillis(), ctx.channel());
+                            responseHeader.getBrokerId(), controllerRequest.getHeartbeatTimeoutMillis(), ctx.channel(), controllerRequest.getEpoch(), controllerRequest.getMaxOffset());
                     }
                     return response;
                 }
@@ -133,7 +133,8 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand
             }
             case BROKER_HEARTBEAT: {
                 final BrokerHeartbeatRequestHeader requestHeader = (BrokerHeartbeatRequestHeader) request.decodeCommandCustomHeader(BrokerHeartbeatRequestHeader.class);
-                this.heartbeatManager.onBrokerHeartbeat(requestHeader.getClusterName(), requestHeader.getBrokerAddr());
+                this.heartbeatManager.onBrokerHeartbeat(requestHeader.getClusterName(), requestHeader.getBrokerAddr(),
+                        requestHeader.getEpoch(), requestHeader.getMaxOffset(), requestHeader.getConfirmOffset());
                 return RemotingCommand.createResponseCommand(ResponseCode.SUCCESS, "Heart beat success");
             }
             case CONTROLLER_GET_SYNC_STATE_DATA: {

File: controller/src/test/java/org/apache/rocketmq/controller/impl/controller/ControllerManagerTest.java
Patch:
@@ -153,7 +153,7 @@ public void testSomeApi() throws Exception {
 
         // Send heartbeat for broker2
         ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
-        executor.scheduleAtFixedRate(()-> {
+        executor.scheduleAtFixedRate(() -> {
             final BrokerHeartbeatRequestHeader heartbeatRequestHeader = new BrokerHeartbeatRequestHeader();
             heartbeatRequestHeader.setClusterName("cluster1");
             heartbeatRequestHeader.setBrokerName("broker1");

File: controller/src/test/java/org/apache/rocketmq/controller/impl/controller/impl/DefaultBrokerHeartbeatManagerTest.java
Patch:
@@ -44,7 +44,7 @@ public void testDetectBrokerAlive() throws InterruptedException {
             System.out.println("Broker shutdown:" + brokerAddress);
             latch.countDown();
         });
-        this.heartbeatManager.registerBroker("cluster1", "broker1", "127.0.0.1:7000", 1L, 3000L, null);
+        this.heartbeatManager.registerBroker("cluster1", "broker1", "127.0.0.1:7000", 1L, 3000L, null, 1, 1L);
         assertTrue(latch.await(5000, TimeUnit.MILLISECONDS));
         this.heartbeatManager.shutdown();
     }

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAService.java
Patch:
@@ -410,7 +410,8 @@ public String getServiceName() {
             return AutoSwitchAcceptSocketService.class.getSimpleName();
         }
 
-        @Override protected HAConnection createConnection(SocketChannel sc) throws IOException {
+        @Override
+        protected HAConnection createConnection(SocketChannel sc) throws IOException {
             return new AutoSwitchHAConnection(AutoSwitchHAService.this, sc, AutoSwitchHAService.this.epochCache);
         }
     }

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessagePopConcurrentlyService.java
Patch:
@@ -286,7 +286,7 @@ private void checkNeedAckOrDelay(MessageExt msgExt) {
 
     private void changePopInvisibleTime(final MessageExt msg, String consumerGroup, int delayLevel) {
         if (0 == delayLevel) {
-            delayLevel = 3 + msg.getReconsumeTimes();
+            delayLevel = msg.getReconsumeTimes();
         }
 
         int[] delayLevelTable = this.defaultMQPushConsumerImpl.getPopDelayLevel();

File: store/src/main/java/org/apache/rocketmq/store/timer/TimerMessageStore.java
Patch:
@@ -81,7 +81,7 @@ public class TimerMessageStore {
     public static final int DAY_SECS = 24 * 3600;
     // The total days in the timer wheel when precision is 1000ms.
     // If the broker shutdown last more than the configured days, will cause message loss
-    public static final int TIMER_WHEEL_TTL_DAY = 7;
+    public static final int TIMER_WHELL_TTL_DAY = 7;
     public static final int TIMER_BLANK_SLOTS = 60;
     public static final int MAGIC_DEFAULT = 1;
     public static final int MAGIC_ROLL = 1 << 1;
@@ -153,7 +153,7 @@ public TimerMessageStore(final MessageStore messageStore, final MessageStoreConf
         this.timerLogFileSize = storeConfig.getMappedFileSizeTimerLog();
         this.precisionMs = storeConfig.getTimerPrecisionMs();
         // TimerWheel contains the fixed number of slots regardless of precision.
-        this.slotsTotal = TIMER_WHEEL_TTL_DAY * DAY_SECS;
+        this.slotsTotal = TIMER_WHELL_TTL_DAY * DAY_SECS;
         this.timerWheel = new TimerWheel(getTimerWheelPath(storeConfig.getStorePathRootDir()),
             this.slotsTotal, precisionMs);
         this.timerLog = new TimerLog(getTimerLogPath(storeConfig.getStorePathRootDir()), timerLogFileSize);

File: store/src/main/java/org/apache/rocketmq/store/timer/TimerMessageStore.java
Patch:
@@ -81,7 +81,7 @@ public class TimerMessageStore {
     public static final int DAY_SECS = 24 * 3600;
     // The total days in the timer wheel when precision is 1000ms.
     // If the broker shutdown last more than the configured days, will cause message loss
-    public static final int TIMER_WHELL_TTL_DAY = 7;
+    public static final int TIMER_WHEEL_TTL_DAY = 7;
     public static final int TIMER_BLANK_SLOTS = 60;
     public static final int MAGIC_DEFAULT = 1;
     public static final int MAGIC_ROLL = 1 << 1;
@@ -153,7 +153,7 @@ public TimerMessageStore(final MessageStore messageStore, final MessageStoreConf
         this.timerLogFileSize = storeConfig.getMappedFileSizeTimerLog();
         this.precisionMs = storeConfig.getTimerPrecisionMs();
         // TimerWheel contains the fixed number of slots regardless of precision.
-        this.slotsTotal = TIMER_WHELL_TTL_DAY * DAY_SECS;
+        this.slotsTotal = TIMER_WHEEL_TTL_DAY * DAY_SECS;
         this.timerWheel = new TimerWheel(getTimerWheelPath(storeConfig.getStorePathRootDir()),
             this.slotsTotal, precisionMs);
         this.timerLog = new TimerLog(getTimerLogPath(storeConfig.getStorePathRootDir()), timerLogFileSize);

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.rocketmq.client.impl;
 
-import com.alibaba.fastjson.JSON;
 import java.io.UnsupportedEncodingException;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
@@ -193,6 +192,7 @@
 import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.common.protocol.route.TopicRouteData;
+import org.apache.rocketmq.common.rpchook.DynamicalExtFieldRPCHook;
 import org.apache.rocketmq.common.statictopic.TopicConfigAndQueueMapping;
 import org.apache.rocketmq.common.statictopic.TopicQueueMappingDetail;
 import org.apache.rocketmq.common.subscription.GroupForbidden;
@@ -217,8 +217,8 @@
 import org.apache.rocketmq.remoting.protocol.LanguageCode;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
-
 import static org.apache.rocketmq.remoting.protocol.RemotingSysResponseCode.SUCCESS;
+import com.alibaba.fastjson.JSON;
 
 public class MQClientAPIImpl implements NameServerUpdateCallback {
     private final static InternalLogger log = ClientLogger.getLog();
@@ -249,6 +249,7 @@ public MQClientAPIImpl(final NettyClientConfig nettyClientConfig,
             this.remotingClient.registerRPCHook(new StreamTypeRPCHook());
         }
         this.remotingClient.registerRPCHook(rpcHook);
+        this.remotingClient.registerRPCHook(new DynamicalExtFieldRPCHook());
         this.remotingClient.registerProcessor(RequestCode.CHECK_TRANSACTION_STATE, this.clientRemotingProcessor, null);
 
         this.remotingClient.registerProcessor(RequestCode.NOTIFY_CONSUMER_IDS_CHANGED, this.clientRemotingProcessor, null);

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/NamesrvStartup.java
Patch:
@@ -241,7 +241,6 @@ public static Options buildCommandlineOptions(final Options options) {
         opt = new Option("p", "printConfigItem", false, "Print all config items");
         opt.setRequired(false);
         options.addOption(opt);
-
         return options;
     }
 

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/DefaultRequestProcessor.java
Patch:
@@ -238,6 +238,7 @@ public RemotingCommand registerBroker(ChannelHandlerContext ctx,
             requestHeader.getBrokerName(),
             requestHeader.getBrokerId(),
             requestHeader.getHaServerAddr(),
+            request.getExtFields().get(MixAll.ZONE_NAME),
             requestHeader.getHeartbeatTimeoutMillis(),
             requestHeader.getEnableActingMaster(),
             topicConfigWrapper,
@@ -350,10 +351,9 @@ public RemotingCommand queryBrokerTopicConfig(ChannelHandlerContext ctx,
     }
 
     public RemotingCommand unregisterBroker(ChannelHandlerContext ctx,
-        RemotingCommand request) throws RemotingCommandException {
+            RemotingCommand request) throws RemotingCommandException {
         final RemotingCommand response = RemotingCommand.createResponseCommand(null);
-        final UnRegisterBrokerRequestHeader requestHeader =
-            (UnRegisterBrokerRequestHeader) request.decodeCommandCustomHeader(UnRegisterBrokerRequestHeader.class);
+        final UnRegisterBrokerRequestHeader requestHeader = (UnRegisterBrokerRequestHeader) request.decodeCommandCustomHeader(UnRegisterBrokerRequestHeader.class);
 
         if (!this.namesrvController.getRouteInfoManager().submitUnRegisterBrokerRequest(requestHeader)) {
             log.warn("Couldn't submit the unregister broker request to handler, broker info: {}", requestHeader);

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/processor/RequestProcessorTest.java
Patch:
@@ -573,8 +573,9 @@ private void registerRouteInfoManager() {
         }
         topicConfigSerializeWrapper.setTopicConfigTable(topicConfigConcurrentHashMap);
         Channel channel = mock(Channel.class);
-        RegisterBrokerResult registerBrokerResult = routeInfoManager.registerBroker("default-cluster", "127.0.0.1:10911", "default-broker", 1234, "127.0.0.1:1001",
+        RegisterBrokerResult registerBrokerResult = routeInfoManager.registerBroker("default-cluster", "127.0.0.1:10911", "default-broker", 1234, "127.0.0.1:1001", "",
             null, topicConfigSerializeWrapper, new ArrayList<String>(), channel);
 
     }
+
 }
\ No newline at end of file

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/routeinfo/GetRouteInfoBenchmark.java
Patch:
@@ -116,7 +116,7 @@ public void run() {
                             topicConfigSerializeWrapper.setTopicConfigTable(topicConfigConcurrentHashMap);
                             Channel channel = mock(Channel.class);
 
-                            routeInfoManager.registerBroker(clusterName, brokerAddr, brokerName, 0, brokerAddr,
+                            routeInfoManager.registerBroker(clusterName, brokerAddr, brokerName, 0, brokerAddr, "",
                                 null, topicConfigSerializeWrapper, new ArrayList<String>(), channel);
                         }
                     }

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/routeinfo/RegisterBrokerBenchmark.java
Patch:
@@ -145,6 +145,7 @@ public void registerBroker() {
         routeInfoManager.registerBroker("DefaultCluster" + index,
             "127.0.0.1:500" + index,
             "DefaultBroker" + index, 0, "127.0.0.1:400" + index,
+            "",
             null,
             topicConfigSerializeWrapper, new ArrayList<String>(), channel);
     }
@@ -167,6 +168,7 @@ public void registerBroker_Throughput() {
         routeInfoManager.registerBroker("DefaultCluster" + index,
             "127.0.0.1:500" + index,
             "DefaultBroker" + index, 0, "127.0.0.1:400" + index,
+            "",
             null,
             topicConfigSerializeWrapper, new ArrayList<String>(), channel);
     }

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManagerTest.java
Patch:
@@ -89,7 +89,7 @@ public void testQueryBrokerTopicConfig() {
             topicConfigSerializeWrapper.setDataVersion(targetVersion);
             topicConfigSerializeWrapper.setTopicConfigTable(topicConfigConcurrentHashMap);
             Channel channel = mock(Channel.class);
-            RegisterBrokerResult registerBrokerResult = routeInfoManager.registerBroker("default-cluster-1", "127.0.0.1:10911", "default-broker-1", 1234, "127.0.0.1:1001",
+            RegisterBrokerResult registerBrokerResult = routeInfoManager.registerBroker("default-cluster-1", "127.0.0.1:10911", "default-broker-1", 1234, "127.0.0.1:1001", "", 
                     null, topicConfigSerializeWrapper, new ArrayList<String>(), channel);
             assertThat(registerBrokerResult).isNotNull();
 
@@ -129,7 +129,7 @@ public void testRegisterBroker() {
         topicConfigSerializeWrapper.setDataVersion(dataVersion);
         topicConfigSerializeWrapper.setTopicConfigTable(topicConfigConcurrentHashMap);
         Channel channel = mock(Channel.class);
-        RegisterBrokerResult registerBrokerResult = routeInfoManager.registerBroker("default-cluster", "127.0.0.1:10911", "default-broker", 1234, "127.0.0.1:1001",
+        RegisterBrokerResult registerBrokerResult = routeInfoManager.registerBroker("default-cluster", "127.0.0.1:10911", "default-broker", 1234, "127.0.0.1:1001", "", 
                 null, topicConfigSerializeWrapper, new ArrayList<String>(), channel);
         assertThat(registerBrokerResult).isNotNull();
     }

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManagerTestBase.java
Patch:
@@ -148,6 +148,7 @@ protected RegisterBrokerResult registerBrokerWithTopicConfig(RouteInfoManager ro
                 brokerAddr,
                 brokerName,
                 brokerId,
+                "",
                 haServerAddr,
                 null,
                 topicConfigSerializeWrapper,

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager_NewTest.java
Patch:
@@ -707,6 +707,7 @@ private RegisterBrokerResult registerBroker(BrokerBasicInfo brokerInfo, Channel
             brokerInfo.brokerName,
             brokerInfo.brokerId,
             brokerInfo.haAddr,
+            "",
             null,
             brokerInfo.enableActingMaster,
             topicConfigSerializeWrapper, new ArrayList<String>(), channel);

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -63,6 +63,7 @@
 import org.apache.rocketmq.tools.command.controller.GetControllerConfigSubCommand;
 import org.apache.rocketmq.tools.command.controller.GetControllerMetaDataSubCommand;
 import org.apache.rocketmq.tools.command.controller.UpdateControllerConfigSubCommand;
+import org.apache.rocketmq.tools.command.controller.ReElectMasterSubCommand;
 import org.apache.rocketmq.tools.command.export.ExportConfigsCommand;
 import org.apache.rocketmq.tools.command.export.ExportMetadataCommand;
 import org.apache.rocketmq.tools.command.export.ExportMetricsCommand;
@@ -264,6 +265,7 @@ public static void initCommand() {
 
         initCommand(new GetControllerConfigSubCommand());
         initCommand(new UpdateControllerConfigSubCommand());
+        initCommand(new ReElectMasterSubCommand());
     }
 
     private static void initLogback() throws JoranException {

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/BrokerMemberGroup.java
Patch:
@@ -21,8 +21,9 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
+import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
-public class BrokerMemberGroup {
+public class BrokerMemberGroup extends RemotingSerializable {
     private String cluster;
     private String brokerName;
     private Map<Long/* brokerId */, String/* broker address */> brokerAddrs;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AckMessageProcessor.java
Patch:
@@ -20,7 +20,6 @@
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandlerContext;
 import org.apache.rocketmq.broker.BrokerController;
-import org.apache.rocketmq.broker.util.MsgUtil;
 import org.apache.rocketmq.common.KeyBuilder;
 import org.apache.rocketmq.common.PopAckConstants;
 import org.apache.rocketmq.common.TopicConfig;
@@ -199,7 +198,7 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
         msgInner.setBornTimestamp(System.currentTimeMillis());
         msgInner.setBornHost(this.brokerController.getStoreHost());
         msgInner.setStoreHost(this.brokerController.getStoreHost());
-        MsgUtil.setMessageDeliverTime(this.brokerController, msgInner, ExtraInfoUtil.getPopTime(extraInfo) + ExtraInfoUtil.getInvisibleTime(extraInfo));
+        msgInner.setDeliverTimeMs(ExtraInfoUtil.getPopTime(extraInfo) + ExtraInfoUtil.getInvisibleTime(extraInfo));
         msgInner.getProperties().put(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX, PopMessageProcessor.genAckUniqueId(ackMsg));
         msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));
         PutMessageResult putMessageResult = this.brokerController.getEscapeBridge().putMessageToSpecificQueue(msgInner);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ChangeInvisibleTimeProcessor.java
Patch:
@@ -20,7 +20,6 @@
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandlerContext;
 import org.apache.rocketmq.broker.BrokerController;
-import org.apache.rocketmq.broker.util.MsgUtil;
 import org.apache.rocketmq.common.PopAckConstants;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.constant.LoggerName;
@@ -152,7 +151,7 @@ private void ackOrigin(final ChangeInvisibleTimeRequestHeader requestHeader, Str
         msgInner.setBornTimestamp(System.currentTimeMillis());
         msgInner.setBornHost(this.brokerController.getStoreHost());
         msgInner.setStoreHost(this.brokerController.getStoreHost());
-        MsgUtil.setMessageDeliverTime(this.brokerController, msgInner, ExtraInfoUtil.getPopTime(extraInfo) + ExtraInfoUtil.getInvisibleTime(extraInfo));
+        msgInner.setDeliverTimeMs(ExtraInfoUtil.getPopTime(extraInfo) + ExtraInfoUtil.getInvisibleTime(extraInfo));
         msgInner.getProperties().put(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX, PopMessageProcessor.genAckUniqueId(ackMsg));
         msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));
         PutMessageResult putMessageResult = this.brokerController.getEscapeBridge().putMessageToSpecificQueue(msgInner);
@@ -187,7 +186,7 @@ private PutMessageResult appendCheckPoint(final ChangeInvisibleTimeRequestHeader
         msgInner.setBornTimestamp(System.currentTimeMillis());
         msgInner.setBornHost(this.brokerController.getStoreHost());
         msgInner.setStoreHost(this.brokerController.getStoreHost());
-        MsgUtil.setMessageDeliverTime(this.brokerController, msgInner, ck.getReviveTime() - PopAckConstants.ackTimeInterval);
+        msgInner.setDeliverTimeMs(ck.getReviveTime() - PopAckConstants.ackTimeInterval);
         msgInner.getProperties().put(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX, PopMessageProcessor.genCkUniqueId(ck));
         msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));
         PutMessageResult putMessageResult = this.brokerController.getMessageStore().putMessage(msgInner);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java
Patch:
@@ -38,7 +38,6 @@
 import org.apache.rocketmq.broker.filter.ExpressionMessageFilter;
 import org.apache.rocketmq.broker.longpolling.PopRequest;
 import org.apache.rocketmq.broker.pagecache.ManyMessageTransfer;
-import org.apache.rocketmq.broker.util.MsgUtil;
 import org.apache.rocketmq.common.KeyBuilder;
 import org.apache.rocketmq.common.PopAckConstants;
 import org.apache.rocketmq.common.ServiceThread;
@@ -658,7 +657,7 @@ public final MessageExtBrokerInner buildCkMsg(final PopCheckPoint ck, final int
         msgInner.setBornTimestamp(System.currentTimeMillis());
         msgInner.setBornHost(this.brokerController.getStoreHost());
         msgInner.setStoreHost(this.brokerController.getStoreHost());
-        MsgUtil.setMessageDeliverTime(this.brokerController, msgInner, ck.getReviveTime() - PopAckConstants.ackTimeInterval);
+        msgInner.setDeliverTimeMs(ck.getReviveTime() - PopAckConstants.ackTimeInterval);
         msgInner.getProperties().put(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX, genCkUniqueId(ck));
         msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));
 

File: example/src/main/java/org/apache/rocketmq/example/filter/TagFilterConsumer.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.rocketmq.example.filter;
 
-import java.io.IOException;
 import java.util.List;
 import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
 import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -2334,7 +2334,7 @@ private RemotingCommand getTopicConfig(ChannelHandlerContext ctx,
         TopicConfig topicConfig = this.brokerController.getTopicConfigManager().getTopicConfigTable().get(requestHeader.getTopic());
         if (topicConfig == null) {
             LOGGER.error("No topic in this broker, client: {} topic: {}", ctx.channel().remoteAddress(), requestHeader.getTopic());
-            //be care of the response code, should set "not-exist" explictly
+            //be care of the response code, should set "not-exist" explicitly
             response.setCode(ResponseCode.TOPIC_NOT_EXIST);
             response.setRemark("No topic in this broker. topic: " + requestHeader.getTopic());
             return response;

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceDataEncoder.java
Patch:
@@ -146,7 +146,7 @@ public static TraceTransferBean encoderFromContextBean(TraceContext ctx) {
         if (ctx == null) {
             return null;
         }
-        //build message trace of the transfering entity content bean
+        //build message trace of the transferring entity content bean
         TraceTransferBean transferBean = new TraceTransferBean();
         StringBuilder sb = new StringBuilder(256);
         switch (ctx.getTraceType()) {

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceDispatcher.java
Patch:
@@ -34,7 +34,7 @@ enum Type {
     void start(String nameSrvAddr, AccessChannel accessChannel) throws MQClientException;
 
     /**
-     * Append the transfering data
+     * Append the transferring data
      * @param ctx data information
      * @return
      */

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceTransferBean.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Set;
 
 /**
- * Trace transfering bean
+ * Trace transferring bean
  */
 public class TraceTransferBean {
     private String transData;

File: common/src/main/java/org/apache/rocketmq/common/message/MessageDecoder.java
Patch:
@@ -38,9 +38,9 @@ public class MessageDecoder {
 //    public final static int MSG_ID_LENGTH = 8 + 8;
 
     public final static Charset CHARSET_UTF8 = StandardCharsets.UTF_8;
-    public final static int MESSAGE_MAGIC_CODE_POSTION = 4;
-    public final static int MESSAGE_FLAG_POSTION = 16;
-    public final static int MESSAGE_PHYSIC_OFFSET_POSTION = 28;
+    public final static int MESSAGE_MAGIC_CODE_POSITION = 4;
+    public final static int MESSAGE_FLAG_POSITION = 16;
+    public final static int MESSAGE_PHYSIC_OFFSET_POSITION = 28;
     public final static int MESSAGE_STORE_TIMESTAMP_POSITION = 56;
     public final static int MESSAGE_MAGIC_CODE = -626843481;
     public static final char NAME_VALUE_SEPARATOR = 1;

File: common/src/main/java/org/apache/rocketmq/common/statistics/StatisticsItemScheduledPrinter.java
Patch:
@@ -62,7 +62,7 @@ public void remove(final StatisticsItem statisticsItem) {
 
     public interface InitialDelay {
         /**
-         * Get inital delay value
+         * Get initial delay value
          * @return
          */
         long get();

File: common/src/main/java/org/apache/rocketmq/common/utils/ServiceProvider.java
Patch:
@@ -131,7 +131,7 @@ public static <T> List<T> load(String name, Class<?> clazz) {
                 LOG.warn("No resource file with name [{}] found.", name);
             }
         } catch (Exception e) {
-            LOG.error("Error occured when looking for resource file " + name, e);
+            LOG.error("Error occurred when looking for resource file " + name, e);
         }
         return services;
     }

File: common/src/test/java/org/apache/rocketmq/common/utils/IOTinyUtilsTest.java
Patch:
@@ -45,7 +45,7 @@ public void init() {
     }
 
     @After
-    public void destory() {
+    public void destroy() {
         File file = new File(testRootDir);
         UtilAll.deleteFile(file);
     }

File: container/src/test/java/org/apache/rocketmq/container/BrokerContainerStartupTest.java
Patch:
@@ -95,7 +95,7 @@ public void init() throws IOException {
     }
 
     @After
-    public void destory() {
+    public void destroy() {
         for (File file : TMP_FILE_LIST) {
             UtilAll.deleteFile(file);
         }

File: container/src/test/java/org/apache/rocketmq/container/BrokerContainerTest.java
Patch:
@@ -338,7 +338,7 @@ public static int generatePort(int base, int range) {
     }
 
     @After
-    public void destory() {
+    public void destroy() {
         for (File file : TMP_FILE_LIST) {
             UtilAll.deleteFile(file);
         }

File: filter/src/main/java/org/apache/rocketmq/filter/parser/SelectorParser.java
Patch:
@@ -108,7 +108,7 @@ private BooleanExpression asBooleanExpression(Expression value) throws ParseExce
     }
 
     // ----------------------------------------------------------------------------
-    // Grammer
+    // Grammar
     // ----------------------------------------------------------------------------
     final public BooleanExpression JmsSelector() throws ParseException {
         Expression left = null;

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingServer.java
Patch:
@@ -80,7 +80,7 @@ public class NettyRemotingServer extends NettyRemotingAbstract implements Remoti
     private DefaultEventExecutorGroup defaultEventExecutorGroup;
 
     /**
-     * NettyRemotingServer may holds multiple SubRemotingServer, each server will be stored in this container wih a
+     * NettyRemotingServer may holds multiple SubRemotingServer, each server will be stored in this container with a
      * ListenPort key.
      */
     private ConcurrentMap<Integer/*Port*/, NettyRemotingAbstract> remotingServerTable = new ConcurrentHashMap<Integer, NettyRemotingAbstract>();

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -711,7 +711,7 @@ protected void onCommitLogAppend(MessageExtBrokerInner msg, AppendMessageResult
     private boolean isMappedFileMatchedRecover(final MappedFile mappedFile) {
         ByteBuffer byteBuffer = mappedFile.sliceByteBuffer();
 
-        int magicCode = byteBuffer.getInt(MessageDecoder.MESSAGE_MAGIC_CODE_POSTION);
+        int magicCode = byteBuffer.getInt(MessageDecoder.MESSAGE_MAGIC_CODE_POSITION);
         if (magicCode != MESSAGE_MAGIC_CODE) {
             return false;
         }

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -815,7 +815,7 @@ public GetMessageResult getMessage(final String group, final String topic, final
                                 continue;
                             }
 
-                            this.storeStatsService.getGetMessageTransferedMsgCount().add(1);
+                            this.storeStatsService.getGetMessageTransferredMsgCount().add(1);
                             getResult.addMessage(selectResult, cqUnit.getQueueOffset(), cqUnit.getBatchNum());
                             status = GetMessageStatus.FOUND;
                             nextPhyFileStartOffset = Long.MIN_VALUE;

File: store/src/main/java/org/apache/rocketmq/store/queue/BatchConsumeQueue.java
Patch:
@@ -449,7 +449,7 @@ public void putMessagePositionInfoWrapper(DispatchRequest request) {
         final int maxRetries = 30;
         boolean canWrite = this.messageStore.getRunningFlags().isCQWriteable();
         if (request.getMsgBaseOffset() < 0 || request.getBatchSize() < 0) {
-            log.warn("[NOTIFYME]unexpected dispacth request in batch consume queue topic:{} queue:{} offset:{}", topic, queueId, request.getCommitLogOffset());
+            log.warn("[NOTIFYME]unexpected dispatch request in batch consume queue topic:{} queue:{} offset:{}", topic, queueId, request.getCommitLogOffset());
             return;
         }
         for (int i = 0; i < maxRetries && canWrite; i++) {

File: store/src/main/java/org/apache/rocketmq/store/queue/ReferredIterator.java
Patch:
@@ -22,7 +22,7 @@
 public interface ReferredIterator<T> extends Iterator<T> {
 
     /**
-     * Release the refered resources.
+     * Release the referred resources.
      */
     void release();
 

File: store/src/main/java/org/apache/rocketmq/store/stats/BrokerStats.java
Patch:
@@ -45,7 +45,7 @@ public void record() {
         this.msgPutTotalTodayMorning =
             this.defaultMessageStore.getStoreStatsService().getPutMessageTimesTotal();
         this.msgGetTotalTodayMorning =
-            this.defaultMessageStore.getStoreStatsService().getGetMessageTransferedMsgCount().longValue();
+            this.defaultMessageStore.getStoreStatsService().getGetMessageTransferredMsgCount().longValue();
 
         log.info("yesterday put message total: {}", msgPutTotalTodayMorning - msgPutTotalYesterdayMorning);
         log.info("yesterday get message total: {}", msgGetTotalTodayMorning - msgGetTotalYesterdayMorning);
@@ -88,6 +88,6 @@ public long getMsgPutTotalTodayNow() {
     }
 
     public long getMsgGetTotalTodayNow() {
-        return this.defaultMessageStore.getStoreStatsService().getGetMessageTransferedMsgCount().longValue();
+        return this.defaultMessageStore.getStoreStatsService().getGetMessageTransferredMsgCount().longValue();
     }
 }

File: store/src/test/java/org/apache/rocketmq/store/BatchPutMessageTest.java
Patch:
@@ -60,7 +60,7 @@ public void init() throws Exception {
     }
 
     @After
-    public void destory() {
+    public void destroy() {
         messageStore.shutdown();
         messageStore.destroy();
 

File: store/src/test/java/org/apache/rocketmq/store/MappedFileQueueTest.java
Patch:
@@ -378,7 +378,7 @@ public void testMappedFile_CleanSwapedMap() throws InterruptedException {
     }
 
     @After
-    public void destory() {
+    public void destroy() {
         File file = new File("target/unit_test_store");
         UtilAll.deleteFile(file);
     }

File: store/src/test/java/org/apache/rocketmq/store/MappedFileTest.java
Patch:
@@ -53,7 +53,7 @@ public void testSelectMappedBuffer() throws IOException {
     }
 
     @After
-    public void destory() {
+    public void destroy() {
         File file = new File("target/unit_test_store");
         UtilAll.deleteFile(file);
     }

File: store/src/test/java/org/apache/rocketmq/store/StoreCheckpointTest.java
Patch:
@@ -48,7 +48,7 @@ public void testWriteAndRead() throws IOException {
     }
 
     @After
-    public void destory() {
+    public void destroy() {
         File file = new File("target/checkpoint_test");
         UtilAll.deleteFile(file);
     }

File: store/src/test/java/stats/BrokerStatsManagerTest.java
Patch:
@@ -52,7 +52,7 @@ public void init() {
     }
 
     @After
-    public void destory() {
+    public void destroy() {
         brokerStatsManager.shutdown();
     }
 

File: test/src/main/java/org/apache/rocketmq/test/util/FileUtil.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Properties;
 
 public class FileUtil {
-    private static String lineSeperator = System.getProperty("line.separator");
+    private static String lineSeparator = System.getProperty("line.separator");
 
     private String filePath = "";
     private String fileName = "";
@@ -53,7 +53,7 @@ public void deleteFile() {
 
     public void appendFile(String content) {
         File file = openFile();
-        String newContent = lineSeperator + content;
+        String newContent = lineSeparator + content;
         writeFile(file, newContent, true);
     }
 
@@ -71,7 +71,7 @@ private String getPropertiesAsString(Properties properties) {
         StringBuilder sb = new StringBuilder();
         for (Entry<Object, Object> keyEnty : properties.entrySet()) {
             sb.append(keyEnty.getKey()).append("=").append((String) keyEnty.getValue())
-                    .append(lineSeperator);
+                    .append(lineSeparator);
         }
         return sb.toString();
     }

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/BaseBroadCastIT.java
Patch:
@@ -47,7 +47,7 @@ public static RMQBroadCastConsumer getBroadCastConsumer(String nsAddr, String co
         return consumer;
     }
 
-    public void printSeperator() {
+    public void printSeparator() {
         for (int i = 0; i < 3; i++) {
             logger.info(
                 "<<<<<<<<================================================================================>>>>>>>>");

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadCastNormalMsgNotRecvIT.java
Patch:
@@ -38,7 +38,7 @@ public class BroadCastNormalMsgNotRecvIT extends BaseBroadCastIT {
 
     @Before
     public void setUp() {
-        printSeperator();
+        printSeparator();
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
         producer = getProducer(nsAddr, topic);

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadCastNormalMsgRecvCrashIT.java
Patch:
@@ -39,7 +39,7 @@ public class BroadCastNormalMsgRecvCrashIT extends BaseBroadCastIT {
 
     @Before
     public void setUp() {
-        printSeperator();
+        printSeparator();
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
         producer = getProducer(nsAddr, topic);

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadCastNormalMsgRecvFailIT.java
Patch:
@@ -40,7 +40,7 @@ public class BroadCastNormalMsgRecvFailIT extends BaseBroadCastIT {
 
     @Before
     public void setUp() {
-        printSeperator();
+        printSeparator();
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
         producer = getProducer(nsAddr, topic);

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadCastNormalMsgRecvStartLaterIT.java
Patch:
@@ -39,7 +39,7 @@ public class BroadCastNormalMsgRecvStartLaterIT extends BaseBroadCastIT {
 
     @Before
     public void setUp() {
-        printSeperator();
+        printSeparator();
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
         producer = getProducer(nsAddr, topic);

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadCastNormalMsgTwoDiffGroupRecvIT.java
Patch:
@@ -39,7 +39,7 @@ public class BroadCastNormalMsgTwoDiffGroupRecvIT extends BaseBroadCastIT {
 
     @Before
     public void setUp() {
-        printSeperator();
+        printSeparator();
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
         producer = getProducer(nsAddr, topic);

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/NormalMsgTwoSameGroupConsumerIT.java
Patch:
@@ -39,7 +39,7 @@ public class NormalMsgTwoSameGroupConsumerIT extends BaseBroadCastIT {
 
     @Before
     public void setUp() {
-        printSeperator();
+        printSeparator();
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
         producer = getProducer(nsAddr, topic);

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -167,7 +167,7 @@ public void start() throws MQClientException {
                 boolean registerOK = mqClientInstance.registerAdminExt(this.defaultMQAdminExt.getAdminExtGroup(), this);
                 if (!registerOK) {
                     this.serviceState = ServiceState.CREATE_JUST;
-                    throw new MQClientException("The adminExt group[" + this.defaultMQAdminExt.getAdminExtGroup() + "] has created already, specifed another name please." + FAQUrl.suggestTodo(FAQUrl.GROUP_NAME_DUPLICATE_URL), null);
+                    throw new MQClientException("The adminExt group[" + this.defaultMQAdminExt.getAdminExtGroup() + "] has created already, specified another name please." + FAQUrl.suggestTodo(FAQUrl.GROUP_NAME_DUPLICATE_URL), null);
                 }
 
                 mqClientInstance.start();

File: tools/src/main/java/org/apache/rocketmq/tools/command/cluster/ClusterListSubCommand.java
Patch:
@@ -228,7 +228,7 @@ private void printClusterBaseInfo(final Set<String> clusterNames,
                             KVTable kvTable = defaultMQAdminExt.fetchBrokerRuntimeStats(next1.getValue());
                             isBrokerActive = Boolean.parseBoolean(kvTable.getTable().get("brokerActive"));
                             String putTps = kvTable.getTable().get("putTps");
-                            String getTransferedTps = kvTable.getTable().get("getTransferedTps");
+                            String getTransferredTps = kvTable.getTable().get("getTransferredTps");
                             sendThreadPoolQueueSize = kvTable.getTable().get("sendThreadPoolQueueSize");
                             pullThreadPoolQueueSize = kvTable.getTable().get("pullThreadPoolQueueSize");
 
@@ -259,7 +259,7 @@ private void printClusterBaseInfo(final Set<String> clusterNames,
                             }
 
                             {
-                                String[] tpss = getTransferedTps.split(" ");
+                                String[] tpss = getTransferredTps.split(" ");
                                 if (tpss.length > 0) {
                                     out = Double.parseDouble(tpss[0]);
                                 }

File: tools/src/main/java/org/apache/rocketmq/tools/command/export/ExportMetricsCommand.java
Patch:
@@ -210,13 +210,13 @@ private Map<String, Object> getRuntimeQuota(KVTable kvTable, DefaultMQAdminExt d
         double normalInTps = 0;
         double normalOutTps = 0;
         String putTps = kvTable.getTable().get("putTps");
-        String getTransferedTps = kvTable.getTable().get("getTransferedTps");
+        String getTransferredTps = kvTable.getTable().get("getTransferredTps");
         String[] inTpss = putTps.split(" ");
         if (inTpss.length > 0) {
             normalInTps = Double.parseDouble(inTpss[0]);
         }
 
-        String[] outTpss = getTransferedTps.split(" ");
+        String[] outTpss = getTransferredTps.split(" ");
         if (outTpss.length > 0) {
             normalOutTps = Double.parseDouble(outTpss[0]);
         }

File: tools/src/main/java/org/apache/rocketmq/tools/command/controller/GetControllerMetaDataSubCommand.java
Patch:
@@ -63,6 +63,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
                     System.out.printf("\n#Peer:\t%s", peer);
                 }
             }
+            System.out.printf("\n");
         } catch (Exception e) {
             throw new SubCommandException(this.getClass().getSimpleName() + " command failed", e);
         } finally {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/DefaultGrpcMessingActivity.java
Patch:
@@ -85,7 +85,7 @@ protected void init(MessagingProcessor messagingProcessor) {
         this.ackMessageActivity = new AckMessageActivity(messagingProcessor, receiptHandleProcessor, grpcClientSettingsManager, grpcChannelManager);
         this.changeInvisibleDurationActivity = new ChangeInvisibleDurationActivity(messagingProcessor, receiptHandleProcessor, grpcClientSettingsManager, grpcChannelManager);
         this.sendMessageActivity = new SendMessageActivity(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);
-        this.forwardMessageToDLQActivity = new ForwardMessageToDLQActivity(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);
+        this.forwardMessageToDLQActivity = new ForwardMessageToDLQActivity(messagingProcessor, receiptHandleProcessor, grpcClientSettingsManager, grpcChannelManager);
         this.endTransactionActivity = new EndTransactionActivity(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);
         this.routeActivity = new RouteActivity(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);
         this.clientActivity = new ClientActivity(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -110,7 +110,7 @@ public abstract class NettyRemotingAbstract {
      * Constructor, specifying capacity of one-way and asynchronous semaphores.
      *
      * @param permitsOneway Number of permits for one-way requests.
-     * @param permitsAsync Number of permits for asynchronous requests.
+     * @param permitsAsync  Number of permits for asynchronous requests.
      */
     public NettyRemotingAbstract(final int permitsOneway, final int permitsAsync) {
         this.semaphoreOneway = new Semaphore(permitsOneway, true);
@@ -210,8 +210,7 @@ public void run() {
                         if (exception == null) {
                             response = pair.getObject1().processRequest(ctx, cmd);
                         } else {
-                            response = RemotingCommand.createResponseCommand(null);
-                            response.setCode(RemotingSysResponseCode.SYSTEM_ERROR);
+                            response = RemotingCommand.createResponseCommand(RemotingSysResponseCode.SYSTEM_ERROR, null);
                         }
 
                         try {

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java
Patch:
@@ -151,7 +151,7 @@ public class ProxyConfig implements ConfigFile {
     private String messageDelayLevel = "1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h";
     private transient Map<Integer /* level */, Long/* delay timeMillis */> delayLevelTable = new ConcurrentHashMap<>();
 
-    private int metricCollectorMode = MetricCollectorMode.OFF.getOrdinal();
+    private String metricCollectorMode = MetricCollectorMode.OFF.getModeString();
     // Example address: 127.0.0.1:1234
     private String metricCollectorAddress = "";
 
@@ -821,11 +821,11 @@ public void setRenewSchedulePeriodMillis(long renewSchedulePeriodMillis) {
         this.renewSchedulePeriodMillis = renewSchedulePeriodMillis;
     }
 
-    public int getMetricCollectorMode() {
+    public String getMetricCollectorMode() {
         return metricCollectorMode;
     }
 
-    public void setMetricCollectorMode(int metricCollectorMode) {
+    public void setMetricCollectorMode(String metricCollectorMode) {
         this.metricCollectorMode = metricCollectorMode;
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManager.java
Patch:
@@ -99,7 +99,7 @@ protected Settings mergeMetric(Settings settings) {
         // Construct metric according to the proxy config
         final ProxyConfig proxyConfig = ConfigurationManager.getProxyConfig();
         final MetricCollectorMode metricCollectorMode =
-            MetricCollectorMode.getEnumByOrdinal(proxyConfig.getMetricCollectorMode());
+            MetricCollectorMode.getEnumByString(proxyConfig.getMetricCollectorMode());
         final String metricCollectorAddress = proxyConfig.getMetricCollectorAddress();
         final Metric.Builder metricBuilder = Metric.newBuilder();
         switch (metricCollectorMode) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java
Patch:
@@ -151,7 +151,7 @@ public class ProxyConfig implements ConfigFile {
     private String messageDelayLevel = "1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h";
     private transient Map<Integer /* level */, Long/* delay timeMillis */> delayLevelTable = new ConcurrentHashMap<>();
 
-    private int metricCollectorMode = MetricCollectorMode.OFF.getOrdinal();
+    private String metricCollectorMode = MetricCollectorMode.OFF.getModeString();
     // Example address: 127.0.0.1:1234
     private String metricCollectorAddress = "";
 
@@ -821,11 +821,11 @@ public void setRenewSchedulePeriodMillis(long renewSchedulePeriodMillis) {
         this.renewSchedulePeriodMillis = renewSchedulePeriodMillis;
     }
 
-    public int getMetricCollectorMode() {
+    public String getMetricCollectorMode() {
         return metricCollectorMode;
     }
 
-    public void setMetricCollectorMode(int metricCollectorMode) {
+    public void setMetricCollectorMode(String metricCollectorMode) {
         this.metricCollectorMode = metricCollectorMode;
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManager.java
Patch:
@@ -99,7 +99,7 @@ protected Settings mergeMetric(Settings settings) {
         // Construct metric according to the proxy config
         final ProxyConfig proxyConfig = ConfigurationManager.getProxyConfig();
         final MetricCollectorMode metricCollectorMode =
-            MetricCollectorMode.getEnumByOrdinal(proxyConfig.getMetricCollectorMode());
+            MetricCollectorMode.getEnumByString(proxyConfig.getMetricCollectorMode());
         final String metricCollectorAddress = proxyConfig.getMetricCollectorAddress();
         final Metric.Builder metricBuilder = Metric.newBuilder();
         switch (metricCollectorMode) {

File: broker/src/main/java/org/apache/rocketmq/broker/failover/EscapeBridge.java
Patch:
@@ -111,7 +111,7 @@ public PutMessageResult putMessage(MessageExtBrokerInner messageExt) {
         } else if (this.brokerController.getBrokerConfig().isEnableSlaveActingMaster()
             && this.brokerController.getBrokerConfig().isEnableRemoteEscape()
             && innerProducer != null) {
-            // Remote Acting lead to born timestamp, msgId changed, it need to polish.
+            // Remote Acting lead to born timestamp, msgId changed, it needs to polish.
             try {
                 messageExt.setWaitStoreMsgOK(false);
                 SendResult sendResult = innerProducer.send(messageExt);
@@ -135,7 +135,7 @@ public CompletableFuture<PutMessageResult> asyncPutMessage(MessageExtBrokerInner
         } else if (this.brokerController.getBrokerConfig().isEnableSlaveActingMaster()
             && this.brokerController.getBrokerConfig().isEnableRemoteEscape()
             && innerProducer != null) {
-            // Remote Acting lead to born timestamp, msgId changed, it need to polish.
+            // Remote Acting lead to born timestamp, msgId changed, it needs to polish.
             try {
                 messageExt.setWaitStoreMsgOK(false);
                 innerProducer.send(messageExt, new SendCallback() {
@@ -170,7 +170,7 @@ public PutMessageResult putMessageToSpecificQueue(MessageExtBrokerInner messageE
             && this.innerProducer != null) {
             try {
                 messageExt.setWaitStoreMsgOK(false);
-                // Remote Acting lead to born timestamp, msgId changed, it need to polish.
+                // Remote Acting lead to born timestamp, msgId changed, it needs to polish.
                 SendResult sendResult = innerProducer.send(messageExt, new MessageQueueSelector() {
                     @Override
                     public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/NamesrvStartup.java
Patch:
@@ -58,7 +58,7 @@ public static void main(String[] args) {
         try {
             parseCommandlineAndConfigFile(args);
             createAndStartNamesrvController();
-            if (controllerConfig.isEnableControllerInNamesrv()) {
+            if (namesrvConfig.isEnableControllerInNamesrv()) {
                 createAndStartControllerManager();
             }
         } catch (Throwable e) {

File: test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleBase.java
Patch:
@@ -125,7 +125,6 @@ protected MessageStoreConfig buildMessageStoreConfig(final String brokerName, fi
 
     protected ControllerConfig buildControllerConfig(final String id, final String peers) {
         final ControllerConfig config = new ControllerConfig();
-        config.setEnableControllerInNamesrv(true);
         config.setControllerDLegerGroup("group1");
         config.setControllerDLegerPeers(peers);
         config.setControllerDLegerSelfId(id);

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -539,7 +539,7 @@ protected void initializeResources() {
 
     protected void initializeBrokerScheduledTasks() {
         final long initialDelay = UtilAll.computeNextMorningTimeMillis() - System.currentTimeMillis();
-        final long period = 1000 * 60 * 60 * 24;
+        final long period = TimeUnit.DAYS.toMillis(1);
         this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
             @Override
             public void run() {

File: controller/src/main/java/org/apache/rocketmq/controller/processor/ControllerRequestProcessor.java
Patch:
@@ -127,6 +127,7 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand
                         }
                     }
                 }
+                break;
             }
             default: {
                 final String error = " request type " + request.getCode() + " not supported";

File: acl/src/main/java/org/apache/rocketmq/acl/common/AuthenticationHeader.java
Patch:
@@ -218,7 +218,8 @@ public void setRequestCode(int requestCode) {
         this.requestCode = requestCode;
     }
 
-    @Override public String toString() {
+    @Override
+    public String toString() {
         return MoreObjects.toStringHelper(this)
             .add("remoteAddress", remoteAddress)
             .add("tenantId", tenantId)

File: acl/src/main/java/org/apache/rocketmq/acl/common/AuthorizationHeader.java
Patch:
@@ -110,7 +110,8 @@ public void setSignature(final String signature) {
         this.signature = signature;
     }
 
-    @Override public String toString() {
+    @Override
+    public String toString() {
         return MoreObjects.toStringHelper(this)
             .add("method", method)
             .add("accessKey", accessKey)

File: broker/src/main/java/org/apache/rocketmq/broker/filtersrv/FilterServerManager.java
Patch:
@@ -54,7 +54,8 @@ public FilterServerManager(final BrokerController brokerController) {
     public void start() {
 
         this.scheduledExecutorService.scheduleAtFixedRate(new AbstractBrokerRunnable(brokerController.getBrokerConfig()) {
-            @Override public void run2() {
+            @Override
+            public void run2() {
                 try {
                     FilterServerManager.this.createFilterServer();
                 } catch (Exception e) {

File: broker/src/main/java/org/apache/rocketmq/broker/latency/BrokerFastFailure.java
Patch:
@@ -63,7 +63,8 @@ public static RequestTask castRunnable(final Runnable runnable) {
 
     public void start() {
         this.scheduledExecutorService.scheduleAtFixedRate(new AbstractBrokerRunnable(this.brokerController.getBrokerConfig()) {
-            @Override public void run2() {
+            @Override
+            public void run2() {
                 if (brokerController.getBrokerConfig().isBrokerFastFailureEnable()) {
                     cleanExpiredRequest();
                 }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AckMessageProcessor.java
Patch:
@@ -93,7 +93,8 @@ public RemotingCommand processRequest(final ChannelHandlerContext ctx,
         return this.processRequest(ctx.channel(), request, true);
     }
 
-    @Override public boolean rejectRequest() {
+    @Override
+    public boolean rejectRequest() {
         return false;
     }
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/NotificationProcessor.java
Patch:
@@ -59,7 +59,8 @@ public class NotificationProcessor implements NettyRequestProcessor {
     public NotificationProcessor(final BrokerController brokerController) {
         this.brokerController = brokerController;
         this.checkNotificationPollingThread = new Thread(new AbstractBrokerRunnable(brokerController.getBrokerConfig()) {
-            @Override public void run2() {
+            @Override
+            public void run2() {
                 while (true) {
                     if (Thread.currentThread().isInterrupted()) {
                         break;

File: broker/src/test/java/org/apache/rocketmq/broker/filter/MessageStoreWithFilterTest.java
Patch:
@@ -353,7 +353,8 @@ public void testGetMessage_withFilter_checkTagsCode() throws Exception {
         putMsg(master, topicCount, msgPerTopic);
 
         await().atMost(3, TimeUnit.SECONDS).untilAsserted(new ThrowingRunnable() {
-            @Override public void run() throws Throwable {
+            @Override
+            public void run() throws Throwable {
                 for (int i = 0; i < topicCount; i++) {
                     final String realTopic = topic + i;
                     GetMessageResult getMessageResult = master.getMessage("test", realTopic, queueId, 0, 10000,

File: client/src/main/java/org/apache/rocketmq/client/exception/MQRedirectException.java
Patch:
@@ -26,7 +26,8 @@ public MQRedirectException(byte[] responseBody) {
     }
 
     // This exception class is used as a flow control item, so stack trace is useless and performance killer.
-    @Override public synchronized Throwable fillInStackTrace() {
+    @Override
+    public synchronized Throwable fillInStackTrace() {
         this.setStackTrace(UNASSIGNED_STACK);
         return this;
     }

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalancePushImpl.java
Patch:
@@ -284,7 +284,8 @@ public ProcessQueue createProcessQueue() {
         return new ProcessQueue();
     }
 
-    @Override public ProcessQueue createProcessQueue(String topicName) {
+    @Override
+    public ProcessQueue createProcessQueue(String topicName) {
         return createProcessQueue();
     }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -187,7 +187,8 @@ public static TopicPublishInfo topicRouteData2TopicPublishInfo(final String topi
             ConcurrentMap<MessageQueue, String> mqEndPoints = topicRouteData2EndpointsForStaticTopic(topic, route);
             info.getMessageQueueList().addAll(mqEndPoints.keySet());
             Collections.sort(info.getMessageQueueList(), new Comparator<MessageQueue>() {
-                @Override public int compare(MessageQueue o1, MessageQueue o2) {
+                @Override
+                public int compare(MessageQueue o1, MessageQueue o2) {
                     return MixAll.compareInteger(o1.getQueueId(), o2.getQueueId());
                 }
             });

File: client/src/test/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumerTest.java
Patch:
@@ -375,7 +375,8 @@ public void testPullMessage_ExceptionOccursWhenComputePullFromWhere() throws MQC
         pushConsumer.getDefaultMQPushConsumerImpl().setConsumeMessageService(
                 new ConsumeMessageConcurrentlyService(pushConsumer.getDefaultMQPushConsumerImpl(),
                     new MessageListenerConcurrently() {
-                        @Override public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
+                        @Override
+                        public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
                             ConsumeConcurrentlyContext context) {
                             messageExts[0] = msgs.get(0);
                             return null;

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQConsumerWithOpenTracingTest.java
Patch:
@@ -197,7 +197,8 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
 
         // wait until consumeMessageAfter hook of tracer is done surely.
         waitAtMost(1, TimeUnit.SECONDS).until(new Callable() {
-            @Override public Object call() throws Exception {
+            @Override
+            public Object call() throws Exception {
                 return tracer.finishedSpans().size() == 1;
             }
         });

File: client/src/test/java/org/apache/rocketmq/client/trace/TransactionMQProducerWithTraceTest.java
Patch:
@@ -150,7 +150,8 @@ public void testSendMessageSync_WithTrace_Success() throws RemotingException, In
         when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());
         final AtomicReference<EndTransactionContext> context = new AtomicReference<EndTransactionContext>();
         doAnswer(new Answer() {
-            @Override public Object answer(InvocationOnMock mock) throws Throwable {
+            @Override
+            public Object answer(InvocationOnMock mock) throws Throwable {
                 context.set((EndTransactionContext) mock.getArgument(0));
                 return null;
             }

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/EpochEntryCache.java
Patch:
@@ -75,7 +75,8 @@ public void setMaxOffset(long maxOffset) {
         this.maxOffset = maxOffset;
     }
 
-    @Override public String toString() {
+    @Override
+    public String toString() {
         return "EpochEntryCache{" +
             "clusterName='" + clusterName + '\'' +
             ", brokerName='" + brokerName + '\'' +

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/InSyncStateData.java
Patch:
@@ -114,7 +114,8 @@ public void setBrokerId(Long brokerId) {
             this.brokerId = brokerId;
         }
 
-        @Override public String toString() {
+        @Override
+        public String toString() {
             return "InSyncMember{" +
                 "address='" + address + '\'' +
                 ", brokerId=" + brokerId +

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/SyncStateSet.java
Patch:
@@ -46,7 +46,8 @@ public void setSyncStateSetEpoch(int syncStateSetEpoch) {
         this.syncStateSetEpoch = syncStateSetEpoch;
     }
 
-    @Override public String toString() {
+    @Override
+    public String toString() {
         return "SyncStateSet{" +
             "syncStateSet=" + syncStateSet +
             ", syncStateSetEpoch=" + syncStateSetEpoch +

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/AddBrokerRequestHeader.java
Patch:
@@ -26,7 +26,8 @@ public class AddBrokerRequestHeader implements CommandCustomHeader {
     private String configPath;
 
 
-    @Override public void checkFields() throws RemotingCommandException {
+    @Override
+    public void checkFields() throws RemotingCommandException {
 
     }
 

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/ChangeInvisibleTimeRequestHeader.java
Patch:
@@ -95,7 +95,8 @@ public void setQueueId(Integer queueId) {
         this.queueId = queueId;
     }
 
-    @Override public String toString() {
+    @Override
+    public String toString() {
         return MoreObjects.toStringHelper(this)
             .add("consumerGroup", consumerGroup)
             .add("topic", topic)

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/CreateAccessConfigRequestHeader.java
Patch:
@@ -44,7 +44,8 @@ public class CreateAccessConfigRequestHeader implements CommandCustomHeader {
     private String groupPerms;
     
 
-    @Override public void checkFields() throws RemotingCommandException {
+    @Override
+    public void checkFields() throws RemotingCommandException {
 
     }
 

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/DeleteAccessConfigRequestHeader.java
Patch:
@@ -26,7 +26,8 @@ public class DeleteAccessConfigRequestHeader implements CommandCustomHeader {
     @CFNotNull
     private String accessKey;
 
-    @Override public void checkFields() throws RemotingCommandException {
+    @Override
+    public void checkFields() throws RemotingCommandException {
 
     }
 

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/GetBrokerAclConfigResponseHeader.java
Patch:
@@ -36,7 +36,8 @@ public class GetBrokerAclConfigResponseHeader implements CommandCustomHeader {
     @CFNotNull
     private String clusterName;
 
-    @Override public void checkFields() throws RemotingCommandException {
+    @Override
+    public void checkFields() throws RemotingCommandException {
     }
 
     public String getVersion() {

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/RemoveBrokerRequestHeader.java
Patch:
@@ -29,7 +29,8 @@ public class RemoveBrokerRequestHeader implements CommandCustomHeader {
     @CFNotNull
     private Long brokerId;
 
-    @Override public void checkFields() throws RemotingCommandException {
+    @Override
+    public void checkFields() throws RemotingCommandException {
 
     }
 

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/UpdateGlobalWhiteAddrsConfigRequestHeader.java
Patch:
@@ -27,7 +27,8 @@ public class UpdateGlobalWhiteAddrsConfigRequestHeader implements CommandCustomH
     @CFNotNull
     private String aclFileFullPath;
 
-    @Override public void checkFields() throws RemotingCommandException {
+    @Override
+    public void checkFields() throws RemotingCommandException {
 
     }
 

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/namesrv/BrokerHeartbeatRequestHeader.java
Patch:
@@ -29,7 +29,8 @@ public class BrokerHeartbeatRequestHeader implements CommandCustomHeader {
     @CFNotNull
     private String brokerName;
 
-    @Override public void checkFields() throws RemotingCommandException {
+    @Override
+    public void checkFields() throws RemotingCommandException {
 
     }
 

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/namesrv/controller/AlterSyncStateSetRequestHeader.java
Patch:
@@ -57,7 +57,8 @@ public void setMasterEpoch(int masterEpoch) {
         this.masterEpoch = masterEpoch;
     }
 
-    @Override public String toString() {
+    @Override
+    public String toString() {
         return "AlterSyncStateSetRequestHeader{" +
             "brokerName='" + brokerName + '\'' +
             ", masterAddress='" + masterAddress + '\'' +

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/namesrv/controller/AlterSyncStateSetResponseHeader.java
Patch:
@@ -33,7 +33,8 @@ public void setNewSyncStateSetEpoch(int newSyncStateSetEpoch) {
         this.newSyncStateSetEpoch = newSyncStateSetEpoch;
     }
 
-    @Override public String toString() {
+    @Override
+    public String toString() {
         return "AlterSyncStateSetResponseHeader{" +
             "newSyncStateSetEpoch=" + newSyncStateSetEpoch +
             '}';

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/namesrv/controller/ElectMasterResponseHeader.java
Patch:
@@ -61,7 +61,8 @@ public void setBrokerMemberGroup(BrokerMemberGroup brokerMemberGroup) {
         this.brokerMemberGroup = brokerMemberGroup;
     }
 
-    @Override public String toString() {
+    @Override
+    public String toString() {
         return "ElectMasterResponseHeader{" +
             "newMasterAddress='" + newMasterAddress + '\'' +
             ", masterEpoch=" + masterEpoch +

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/namesrv/controller/GetMetaDataResponseHeader.java
Patch:
@@ -77,7 +77,8 @@ public void setPeers(String peers) {
         this.peers = peers;
     }
 
-    @Override public String toString() {
+    @Override
+    public String toString() {
         return "GetMetaDataResponseHeader{" +
             "group='" + group + '\'' +
             ", controllerLeaderId='" + controllerLeaderId + '\'' +

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/namesrv/controller/GetReplicaInfoRequestHeader.java
Patch:
@@ -51,7 +51,8 @@ public void setBrokerAddress(String brokerAddress) {
         this.brokerAddress = brokerAddress;
     }
 
-    @Override public String toString() {
+    @Override
+    public String toString() {
         return "GetReplicaInfoRequestHeader{" +
             "brokerName='" + brokerName + '\'' +
             ", brokerAddress='" + brokerAddress + '\'' +

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/namesrv/controller/GetReplicaInfoResponseHeader.java
Patch:
@@ -52,7 +52,8 @@ public void setBrokerId(long brokerId) {
         this.brokerId = brokerId;
     }
 
-    @Override public String toString() {
+    @Override
+    public String toString() {
         return "GetReplicaInfoResponseHeader{" +
             "masterAddress='" + masterAddress + '\'' +
             ", masterEpoch=" + masterEpoch +

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/namesrv/controller/RegisterBrokerToControllerRequestHeader.java
Patch:
@@ -69,7 +69,8 @@ public void setHeartbeatTimeoutMillis(Long heartbeatTimeoutMillis) {
         this.heartbeatTimeoutMillis = heartbeatTimeoutMillis;
     }
 
-    @Override public String toString() {
+    @Override
+    public String toString() {
         return "RegisterBrokerRequestHeader{" +
             "clusterName='" + clusterName + '\'' +
             ", brokerName='" + brokerName + '\'' +

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/namesrv/controller/RegisterBrokerToControllerResponseHeader.java
Patch:
@@ -61,7 +61,8 @@ public void setBrokerId(long brokerId) {
         this.brokerId = brokerId;
     }
 
-    @Override public String toString() {
+    @Override
+    public String toString() {
         return "RegisterBrokerResponseHeader{" +
             "masterAddress='" + masterAddress + '\'' +
             ", masterEpoch=" + masterEpoch +

File: container/src/main/java/org/apache/rocketmq/container/BrokerContainerProcessor.java
Patch:
@@ -67,7 +67,8 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand
         return null;
     }
 
-    @Override public boolean rejectRequest() {
+    @Override
+    public boolean rejectRequest() {
         return false;
     }
 

File: container/src/main/java/org/apache/rocketmq/container/InnerBrokerController.java
Patch:
@@ -90,7 +90,8 @@ public void run2() {
             scheduleSendHeartbeat();
 
             scheduledFutures.add(this.syncBrokerMemberGroupExecutorService.scheduleAtFixedRate(new AbstractBrokerRunnable(this.getBrokerIdentity()) {
-                @Override public void run2() {
+                @Override
+                public void run2() {
                     try {
                         InnerBrokerController.this.syncBrokerMemberGroup();
                     } catch (Throwable e) {

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DefaultBrokerHeartbeatManager.java
Patch:
@@ -175,7 +175,8 @@ public BrokerLiveInfo(String brokerName, long brokerId, long lastUpdateTimestamp
             this.channel = channel;
         }
 
-        @Override public String toString() {
+        @Override
+        public String toString() {
             return "BrokerLiveInfo{" +
                 "brokerName='" + brokerName + '\'' +
                 ", brokerId=" + brokerId +

File: controller/src/main/java/org/apache/rocketmq/controller/impl/event/AlterSyncStateSetEvent.java
Patch:
@@ -46,7 +46,8 @@ public Set<String> getNewSyncStateSet() {
         return new HashSet<>(newSyncStateSet);
     }
 
-    @Override public String toString() {
+    @Override
+    public String toString() {
         return "AlterSyncStateSetEvent{" +
             "brokerName='" + brokerName + '\'' +
             ", newSyncStateSet=" + newSyncStateSet +

File: controller/src/main/java/org/apache/rocketmq/controller/impl/event/ApplyBrokerIdEvent.java
Patch:
@@ -48,7 +48,8 @@ public long getNewBrokerId() {
         return newBrokerId;
     }
 
-    @Override public String toString() {
+    @Override
+    public String toString() {
         return "ApplyBrokerIdEvent{" +
             "brokerName='" + brokerName + '\'' +
             ", brokerAddress='" + brokerAddress + '\'' +

File: controller/src/main/java/org/apache/rocketmq/controller/impl/event/ControllerResult.java
Patch:
@@ -78,7 +78,8 @@ public void addEvent(EventMessage event) {
         this.events.add(event);
     }
 
-    @Override public String toString() {
+    @Override
+    public String toString() {
         return "ControllerResult{" +
             "events=" + events +
             ", response=" + response +

File: controller/src/main/java/org/apache/rocketmq/controller/impl/event/ElectMasterEvent.java
Patch:
@@ -63,7 +63,8 @@ public String getClusterName() {
         return clusterName;
     }
 
-    @Override public String toString() {
+    @Override
+    public String toString() {
         return "ElectMasterEvent{" +
             "isNewMasterElected=" + newMasterElected +
             ", brokerName='" + brokerName + '\'' +

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/DefaultRequestProcessor.java
Patch:
@@ -139,7 +139,8 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx,
         }
     }
 
-    @Override public boolean rejectRequest() {
+    @Override
+    public boolean rejectRequest() {
         return false;
     }
 

File: remoting/src/test/java/org/apache/rocketmq/remoting/RemotingServerTest.java
Patch:
@@ -50,7 +50,8 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand
                 return request;
             }
 
-            @Override public boolean rejectRequest() {
+            @Override
+            public boolean rejectRequest() {
                 return false;
             }
         }, Executors.newCachedThreadPool());

File: store/src/main/java/org/apache/rocketmq/store/index/IndexService.java
Patch:
@@ -341,7 +341,8 @@ public IndexFile getAndCreateLastIndexFile() {
                 final IndexFile flushThisFile = prevIndexFile;
 
                 Thread flushThread = new Thread(new AbstractBrokerRunnable(defaultMessageStore.getBrokerConfig()) {
-                    @Override public void run2() {
+                    @Override
+                    public void run2() {
                         IndexService.this.flush(flushThisFile);
                     }
                 }, "FlushIndexFileThread");

File: tools/src/main/java/org/apache/rocketmq/tools/command/acl/DeleteAccessConfigSubCommand.java
Patch:
@@ -65,7 +65,8 @@ public Options buildCommandlineOptions(Options options) {
         return options;
     }
 
-    @Override public void execute(CommandLine commandLine, Options options,
+    @Override
+    public void execute(CommandLine commandLine, Options options,
         RPCHook rpcHook) throws SubCommandException {
 
         DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseIT.java
Patch:
@@ -752,6 +752,7 @@ public Endpoints buildEndpoints(int port) {
     public Settings buildSimpleConsumerClientSettings(String group) {
         return Settings.newBuilder()
             .setClientType(ClientType.SIMPLE_CONSUMER)
+            .setRequestTimeout(Durations.fromSeconds(3))
             .setSubscription(Subscription.newBuilder()
                 .setGroup(Resource.newBuilder().setName(group).build())
                 .build())

File: store/src/main/java/org/apache/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -187,7 +187,7 @@ public class MessageStoreConfig {
     private String haMasterAddress = null;
     private int haMaxGapNotInSync = 1024 * 1024 * 256;
     @ImportantField
-    private BrokerRole brokerRole = BrokerRole.ASYNC_MASTER;
+    private volatile BrokerRole brokerRole = BrokerRole.ASYNC_MASTER;
     @ImportantField
     private FlushDiskType flushDiskType = FlushDiskType.ASYNC_FLUSH;
     // Used by GroupTransferService to sync messages from master to slave

File: broker/src/test/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessorTest.java
Patch:
@@ -157,6 +157,7 @@ public void init() throws Exception {
         topic = "FooBar" + System.nanoTime();
 
         brokerController.getTopicConfigManager().getTopicConfigTable().put(topic, new TopicConfig(topic));
+        brokerController.getMessageStoreConfig().setTimerWheelEnable(false);
     }
 
     @Test
@@ -514,7 +515,6 @@ public void testGetAllDelayOffset() throws Exception {
         assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);
     }
 
-
     @Test
     public void testGetTopicConfig() throws Exception {
         String topic = "foobar";

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExt.java
Patch:
@@ -171,7 +171,7 @@ public void addBrokerToContainer(String brokerContainerAddr, String brokerConfig
     @Override
     public void updateBrokerConfig(String brokerAddr,
         Properties properties) throws RemotingConnectException, RemotingSendRequestException,
-        RemotingTimeoutException, UnsupportedEncodingException, InterruptedException, MQBrokerException {
+        RemotingTimeoutException, UnsupportedEncodingException, InterruptedException, MQBrokerException, MQClientException {
         defaultMQAdminExtImpl.updateBrokerConfig(brokerAddr, properties);
     }
 

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -237,7 +237,7 @@ public AdminToolResult adminToolExecute(AdminToolHandler handler) {
     }
 
     @Override public void updateBrokerConfig(String brokerAddr,
-        Properties properties) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, UnsupportedEncodingException, InterruptedException, MQBrokerException {
+        Properties properties) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, UnsupportedEncodingException, InterruptedException, MQBrokerException, MQClientException {
         this.mqClientInstance.getMQClientAPIImpl().updateBrokerConfig(brokerAddr, properties, timeoutMillis);
     }
 

File: tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java
Patch:
@@ -79,7 +79,7 @@ void removeBrokerFromContainer(final String brokerContainerAddr, String clusterN
         long brokerId) throws InterruptedException, MQBrokerException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException;
 
     void updateBrokerConfig(final String brokerAddr, final Properties properties) throws RemotingConnectException,
-        RemotingSendRequestException, RemotingTimeoutException, UnsupportedEncodingException, InterruptedException, MQBrokerException;
+        RemotingSendRequestException, RemotingTimeoutException, UnsupportedEncodingException, InterruptedException, MQBrokerException, MQClientException;
 
     Properties getBrokerConfig(final String brokerAddr) throws RemotingConnectException,
         RemotingSendRequestException, RemotingTimeoutException, UnsupportedEncodingException, InterruptedException, MQBrokerException;
@@ -99,7 +99,7 @@ void updateGlobalWhiteAddrConfig(final String addr,
         final String globalWhiteAddrs) throws RemotingException, MQBrokerException,
         InterruptedException, MQClientException;
 
-    void updateGlobalWhiteAddrConfig(final String addr, final String globalWhiteAddrs, String aclFileFullPath)throws RemotingException, MQBrokerException,
+    void updateGlobalWhiteAddrConfig(final String addr, final String globalWhiteAddrs, String aclFileFullPath) throws RemotingException, MQBrokerException,
         InterruptedException, MQClientException;
 
     ClusterAclVersionInfo examineBrokerClusterAclVersionInfo(

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/DefaultRequestProcessor.java
Patch:
@@ -349,8 +349,10 @@ public RemotingCommand unregisterBroker(ChannelHandlerContext ctx,
 
         if (!this.namesrvController.getRouteInfoManager().submitUnRegisterBrokerRequest(requestHeader)) {
             log.warn("Couldn't submit the unregister broker request to handler, broker info: {}", requestHeader);
+            response.setCode(ResponseCode.SYSTEM_ERROR);
+            response.setRemark(null);
+            return response;
         }
-
         response.setCode(ResponseCode.SUCCESS);
         response.setRemark(null);
         return response;

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java
Patch:
@@ -489,7 +489,6 @@ public int addWritePermOfBrokerByLock(final String brokerName) {
     }
 
     private int operateWritePermOfBroker(final String brokerName, final int requestCode) {
-        Set<String> changedTopics = new HashSet<>();
         int topicCnt = 0;
 
         Iterator<Entry<String, Map<String, QueueData>>> itTopic = this.topicQueueTable.entrySet().iterator();

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivityTest.java
Patch:
@@ -243,9 +243,9 @@ public void testGenPartitionFromQueueData() throws Exception {
 
         // test queueData with 4 read queues, 8 write queues, and rw permission, expect 4 rw queues and  4 write only queues.
         QueueData queueDataWith4R8WPermRW = createQueueData(4, 8, PermName.PERM_READ | PermName.PERM_WRITE);
-        List<MessageQueue> partitionWith4R8WPermRW = this.routeActivity.genMessageQueueFromQueueData(queueDataWith4R8WPermRW, GRPC_TOPIC, TopicMessageType.NORMAL, GRPC_BROKER);
+        List<MessageQueue> partitionWith4R8WPermRW = this.routeActivity.genMessageQueueFromQueueData(queueDataWith4R8WPermRW, GRPC_TOPIC, TopicMessageType.UNSPECIFIED, GRPC_BROKER);
         assertEquals(8, partitionWith4R8WPermRW.size());
-        assertEquals(8, partitionWith4R8WPermRW.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.NORMAL.getNumber()).count());
+        assertEquals(8, partitionWith4R8WPermRW.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.MESSAGE_TYPE_UNSPECIFIED.getNumber()).count());
         assertEquals(4, partitionWith4R8WPermRW.stream().filter(a -> a.getPermission() == Permission.WRITE).count());
         assertEquals(4, partitionWith4R8WPermRW.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());
         assertEquals(0, partitionWith4R8WPermRW.stream().filter(a -> a.getPermission() == Permission.READ).count());

File: common/src/main/java/org/apache/rocketmq/common/message/MessageConst.java
Patch:
@@ -146,5 +146,6 @@ public class MessageConst {
         STRING_HASH_SET.add(PROPERTY_TIMER_DEL_UNIQKEY);
         STRING_HASH_SET.add(PROPERTY_TIMER_DELAY_LEVEL);
         STRING_HASH_SET.add(PROPERTY_BORN_HOST);
+        STRING_HASH_SET.add(PROPERTY_BORN_TIMESTAMP);
     }
 }

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/SendMsgStatusCommand.java
Patch:
@@ -54,7 +54,7 @@ public String commandDesc() {
 
     @Override
     public Options buildCommandlineOptions(Options options) {
-        Option opt = new Option("b", "brokerName", true, "Broker Name");
+        Option opt = new Option("b", "brokerName", true, "Broker Name e.g. clusterName_brokerName as DefaultCluster_broker-a");
         opt.setRequired(true);
         options.addOption(opt);
 

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.BrokerAddrInfo;
 import org.apache.rocketmq.common.DataVersion;
 import org.apache.rocketmq.common.MixAll;
@@ -248,7 +249,7 @@ public RegisterBrokerResult registerBroker(
                 }
 
                 boolean isOldVersionBroker = enableActingMaster == null;
-                brokerData.setEnableActingMaster(!isOldVersionBroker && enableActingMaster);
+                brokerData.setEnableActingMaster(isOldVersionBroker ? false : enableActingMaster);
 
                 Map<Long, String> brokerAddrsMap = brokerData.getBrokerAddrs();
 
@@ -286,7 +287,7 @@ public RegisterBrokerResult registerBroker(
                 }
 
                 String oldAddr = brokerAddrsMap.put(brokerId, brokerAddr);
-                registerFirst = registerFirst || (null == oldAddr);
+                registerFirst = registerFirst || (StringUtils.isEmpty(oldAddr));
 
                 boolean isMaster = MixAll.MASTER_ID == brokerId;
                 boolean isPrimeSlave = !isOldVersionBroker && !isMaster

File: tools/src/main/java/org/apache/rocketmq/tools/command/acl/UpdateAccessConfigSubCommand.java
Patch:
@@ -61,7 +61,7 @@ public Options buildCommandlineOptions(Options options) {
         options.addOption(opt);
 
         opt = new Option("s", "secretKey", true, "set secretKey in acl config file");
-        opt.setRequired(false);
+        opt.setRequired(true);
         options.addOption(opt);
 
         opt = new Option("w", "whiteRemoteAddress", true, "set white ip Address for account in acl config file");

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/DeleteTopicSubCommand.java
Patch:
@@ -38,8 +38,8 @@ public static void deleteTopic(final DefaultMQAdminExt adminExt,
         final String topic
     ) throws InterruptedException, MQBrokerException, RemotingException, MQClientException {
 
-        Set<String> brokerAddressSet = CommandUtil.fetchMasterAndSlaveAddrByClusterName(adminExt, clusterName);
-        adminExt.deleteTopicInBroker(brokerAddressSet, topic);
+        Set<String> masterBrokerAddressSet = CommandUtil.fetchMasterAddrByClusterName(adminExt, clusterName);
+        adminExt.deleteTopicInBroker(masterBrokerAddressSet, topic);
         System.out.printf("delete topic [%s] from cluster [%s] success.%n", topic, clusterName);
 
         Set<String> nameServerSet = null;

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/SendMsgStatusCommand.java
Patch:
@@ -54,7 +54,7 @@ public String commandDesc() {
 
     @Override
     public Options buildCommandlineOptions(Options options) {
-        Option opt = new Option("b", "brokerName", true, "Broker Name");
+        Option opt = new Option("b", "brokerName", true, "Broker Name e.g. clusterName_brokerName as DefaultCluster_broker-a");
         opt.setRequired(true);
         options.addOption(opt);
 

File: broker/src/main/java/org/apache/rocketmq/broker/loadbalance/AssignmentManager.java
Patch:
@@ -105,6 +105,7 @@ public boolean updateTopicRouteInfoFromNameServer(final String topic) {
         try {
             TopicRouteData topicRouteData = this.brokerController.getBrokerOuterAPI().getTopicRouteInfoFromNameServer(topic, 1000 * 3);
             if (topicRouteData != null) {
+                topicRouteData.setTopicQueueMappingByBroker(null);
                 Set<MessageQueue> newSubscribeInfo = MQClientInstance.topicRouteData2TopicSubscribeInfo(topic, topicRouteData);
                 Set<MessageQueue> oldSubscribeInfo = topicSubscribeInfoTable.get(topic);
                 boolean changed = !newSubscribeInfo.equals(oldSubscribeInfo);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/PullAPIWrapper.java
Patch:
@@ -363,10 +363,10 @@ public void setDefaultBrokerId(long defaultBrokerId) {
     public void popAsync(MessageQueue mq, long invisibleTime, int maxNums, String consumerGroup,
                          long timeout, PopCallback popCallback, boolean poll, int initMode, boolean order, String expressionType, String expression)
         throws MQClientException, RemotingException, InterruptedException {
-        FindBrokerResult findBrokerResult = this.mQClientFactory.findBrokerAddressInSubscribe(this.mQClientFactory.getBrokerNameFromMessageQueue(mq), MixAll.MASTER_ID, true);
+        FindBrokerResult findBrokerResult = this.mQClientFactory.findBrokerAddressInSubscribe(mq.getBrokerName(), MixAll.MASTER_ID, true);
         if (null == findBrokerResult) {
             this.mQClientFactory.updateTopicRouteInfoFromNameServer(mq.getTopic());
-            findBrokerResult = this.mQClientFactory.findBrokerAddressInSubscribe(this.mQClientFactory.getBrokerNameFromMessageQueue(mq), MixAll.MASTER_ID, true);
+            findBrokerResult = this.mQClientFactory.findBrokerAddressInSubscribe(mq.getBrokerName(), MixAll.MASTER_ID, true);
         }
         if (findBrokerResult != null) {
             PopMessageRequestHeader requestHeader = new PopMessageRequestHeader();

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/producer/SendMessageActivityTest.java
Patch:
@@ -205,6 +205,8 @@ public void testBuildErrorMessage() {
     @Test
     public void testBuildMessage() {
         long deliveryTime = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(5);
+        ConfigurationManager.getProxyConfig().setMessageDelayLevel("1s 5s");
+        ConfigurationManager.getProxyConfig().initData();
         String msgId = MessageClientIDSetter.createUniqID();
 
         org.apache.rocketmq.common.message.Message messageExt = this.sendMessageActivity.buildMessage(null,

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/AbstractTransactionService.java
Patch:
@@ -57,7 +57,7 @@ public TransactionData addTransactionDataByBrokerName(String brokerName, String
     @Override
     public EndTransactionRequestData genEndTransactionRequestHeader(String producerGroup, Integer commitOrRollback,
         boolean fromTransactionCheck, String msgId, String transactionId) {
-        TransactionData transactionData = this.transactionDataManager.pollFirstNoExpireTransactionData(producerGroup, transactionId);
+        TransactionData transactionData = this.transactionDataManager.pollNoExpireTransactionData(producerGroup, transactionId);
         if (transactionData == null) {
             return null;
         }

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/TransactionDataManager.java
Patch:
@@ -58,13 +58,13 @@ public void addTransactionData(String producerGroup, String transactionId, Trans
         });
     }
 
-    public TransactionData pollFirstNoExpireTransactionData(String producerGroup, String transactionId) {
+    public TransactionData pollNoExpireTransactionData(String producerGroup, String transactionId) {
         AtomicReference<TransactionData> res = new AtomicReference<>();
         long currTimestamp = System.currentTimeMillis();
         this.transactionIdDataMap.computeIfPresent(buildKey(producerGroup, transactionId), (key, dataSet) -> {
-            TransactionData data = dataSet.pollFirst();
+            TransactionData data = dataSet.pollLast();
             while (data != null && data.getExpireTime() < currTimestamp) {
-                data = dataSet.pollFirst();
+                data = dataSet.pollLast();
             }
             if (data != null) {
                 res.set(data);

File: broker/src/main/java/org/apache/rocketmq/broker/client/DefaultConsumerIdsChangeListener.java
Patch:
@@ -90,6 +90,9 @@ public void handle(ConsumerGroupEvent event, String group, Object... args) {
                 Collection<SubscriptionData> subscriptionDataList = (Collection<SubscriptionData>) args[0];
                 this.brokerController.getConsumerFilterManager().register(group, subscriptionDataList);
                 break;
+            case CLIENT_REGISTER:
+            case CLIENT_UNREGISTER:
+                break;
             default:
                 throw new RuntimeException("Unknown event " + event);
         }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ChangeInvisibleTimeProcessor.java
Patch:
@@ -179,6 +179,7 @@ private PutMessageResult appendCheckPoint(final ChangeInvisibleTimeRequestHeader
         ck.setTopic(requestHeader.getTopic());
         ck.setQueueId((byte) queueId);
         ck.addDiff(0);
+        ck.setBrokerName(brokerName);
 
         msgInner.setBody(JSON.toJSONString(ck).getBytes(DataConverter.charset));
         msgInner.setQueueId(reviveQid);

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/TransactionalMessageCheckService.java
Patch:
@@ -42,8 +42,8 @@ public String getServiceName() {
     @Override
     public void run() {
         log.info("Start transaction check service thread!");
-        long checkInterval = brokerController.getBrokerConfig().getTransactionCheckInterval();
         while (!this.isStopped()) {
+            long checkInterval = brokerController.getBrokerConfig().getTransactionCheckInterval();
             this.waitForRunning(checkInterval);
         }
         log.info("End transaction check service thread!");

File: common/src/main/java/org/apache/rocketmq/common/constant/LoggerName.java
Patch:
@@ -44,4 +44,6 @@ public class LoggerName {
     public static final String ROCKETMQ_POP_LOGGER_NAME = "RocketmqPop";
     public static final String FAILOVER_LOGGER_NAME = "RocketmqFailover";
     public static final String STDOUT_LOGGER_NAME = "STDOUT";
+    public static final String PROXY_LOGGER_NAME = "RocketmqProxy";
+    public static final String PROXY_WATER_MARK_LOGGER_NAME = "RocketmqProxyWatermark";
 }

File: common/src/main/java/org/apache/rocketmq/common/message/MessageBatch.java
Patch:
@@ -39,7 +39,7 @@ public Iterator<Message> iterator() {
         return messages.iterator();
     }
 
-    public static MessageBatch generateFromList(Collection<Message> messages) {
+    public static MessageBatch generateFromList(Collection<? extends Message> messages) {
         assert messages != null;
         assert messages.size() > 0;
         List<Message> messageList = new ArrayList<Message>(messages.size());

File: broker/src/test/java/org/apache/rocketmq/broker/client/ConsumerManagerScannerTest.java
Patch:
@@ -38,7 +38,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(MockitoJUnitRunner.class)
-public class ConsumerManagerTest {
+public class ConsumerManagerScannerTest {
     private ConsumerManager consumerManager;
     private String group = "FooBar";
     private String clientId = "clientId";

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/RequestTask.java
Patch:
@@ -25,7 +25,7 @@ public class RequestTask implements Runnable {
     private final long createTimestamp = System.currentTimeMillis();
     private final Channel channel;
     private final RemotingCommand request;
-    private boolean stopRun = false;
+    private volatile boolean stopRun = false;
 
     public RequestTask(final Runnable runnable, final Channel channel, final RemotingCommand request) {
         this.runnable = runnable;

File: acl/src/test/java/org/apache/rocketmq/acl/plain/PlainAccessValidatorTest.java
Patch:
@@ -42,6 +42,7 @@
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.junit.Assert;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import java.io.File;
@@ -684,6 +685,8 @@ public void deleteAccessAclYamlConfigTest() throws InterruptedException {
         AclUtils.writeDataObject(targetFileName, backUpAclConfigMap);
     }
 
+    // Ignore the unstable test in the arm environment of CI
+    @Ignore
     @Test
     public void updateGlobalWhiteRemoteAddressesTest() throws InterruptedException {
         String backupFileName = System.getProperty("rocketmq.home.dir")

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/client/ClientActivityTest.java
Patch:
@@ -62,6 +62,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyBoolean;
 import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.times;
@@ -177,7 +178,8 @@ public void testConsumerHeartbeat() throws Throwable {
             any(),
             any(),
             any(),
-            subscriptionDatasArgumentCaptor.capture()
+            subscriptionDatasArgumentCaptor.capture(),
+            anyBoolean()
         );
 
         HeartbeatResponse response = this.sendConsumerHeartbeat(context);

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/DefaultMessagingProcessor.java
Patch:
@@ -241,8 +241,8 @@ public void registerProducerListener(ProducerChangeListener producerChangeListen
     @Override
     public void registerConsumer(ProxyContext ctx, String consumerGroup, ClientChannelInfo clientChannelInfo,
         ConsumeType consumeType, MessageModel messageModel, ConsumeFromWhere consumeFromWhere,
-        Set<SubscriptionData> subList) {
-        this.clientProcessor.registerConsumer(ctx, consumerGroup, clientChannelInfo, consumeType, messageModel, consumeFromWhere, subList);
+        Set<SubscriptionData> subList, boolean updateSubscription) {
+        this.clientProcessor.registerConsumer(ctx, consumerGroup, clientChannelInfo, consumeType, messageModel, consumeFromWhere, subList, updateSubscription);
     }
 
     @Override

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/MessagingProcessor.java
Patch:
@@ -259,7 +259,8 @@ void registerConsumer(
         ConsumeType consumeType,
         MessageModel messageModel,
         ConsumeFromWhere consumeFromWhere,
-        Set<SubscriptionData> subList
+        Set<SubscriptionData> subList,
+        boolean updateSubscription
     );
 
     ClientChannelInfo findConsumerChannel(

File: common/src/main/java/org/apache/rocketmq/common/subscription/ExponentialRetryPolicy.java
Patch:
@@ -20,9 +20,6 @@
 import com.google.common.base.MoreObjects;
 import java.util.concurrent.TimeUnit;
 
-/**
- * next delay time = min(max, initial * multiplier^reconsumeTimes)
- */
 public class ExponentialRetryPolicy implements RetryPolicy {
     private long initial = TimeUnit.SECONDS.toMillis(5);
     private long max = TimeUnit.HOURS.toMillis(2);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/client/ClientActivity.java
Patch:
@@ -86,9 +86,6 @@ public CompletableFuture<HeartbeatResponse> heartbeat(ProxyContext ctx, Heartbea
         CompletableFuture<HeartbeatResponse> future = new CompletableFuture<>();
 
         try {
-            String clientId = ctx.getClientID();
-            LanguageCode languageCode = LanguageCode.valueOf(ctx.getLanguage());
-
             Settings clientSettings = grpcClientSettingsManager.getClientSettings(ctx);
             if (clientSettings == null) {
                 future.complete(HeartbeatResponse.newBuilder()

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/Configuration.java
Patch:
@@ -36,6 +36,7 @@ public void init() throws Exception {
         }
 
         ProxyConfig proxyConfig = JSON.parseObject(proxyConfigData, ProxyConfig.class);
+        proxyConfig.initData();
         setProxyConfig(proxyConfig);
     }
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/producer/SendMessageActivityTest.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.Map;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.TimeUnit;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.client.producer.SendStatus;
@@ -203,7 +204,7 @@ public void testBuildErrorMessage() {
 
     @Test
     public void testBuildMessage() {
-        long deliveryTime = System.currentTimeMillis();
+        long deliveryTime = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(5);
         String msgId = MessageClientIDSetter.createUniqID();
 
         org.apache.rocketmq.common.message.Message messageExt = this.sendMessageActivity.buildMessage(null,
@@ -226,7 +227,7 @@ public void testBuildMessage() {
             Resource.newBuilder().setName(TOPIC).build()).get(0);
 
         assertEquals(MessageClientIDSetter.getUniqID(messageExt), msgId);
-        assertEquals(String.valueOf(deliveryTime), messageExt.getProperty(MessageConst.PROPERTY_TIMER_DELIVER_MS));
+        assertEquals(String.valueOf(2), messageExt.getProperty(MessageConst.PROPERTY_DELAY_TIME_LEVEL));
     }
 
     @Test

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/client/ClientActivity.java
Patch:
@@ -279,8 +279,7 @@ private int parseClientVersion(String clientVersionStr) {
             try {
                 String tmp = StringUtils.upperCase(clientVersionStr);
                 clientVersion = MQVersion.Version.valueOf(tmp).ordinal();
-            } catch (Exception e) {
-                log.warn("client version from client not recognized: %s", clientVersionStr);
+            } catch (Exception ignored) {
             }
         }
         return clientVersion;

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/Configuration.java
Patch:
@@ -36,6 +36,7 @@ public void init() throws Exception {
         }
 
         ProxyConfig proxyConfig = JSON.parseObject(proxyConfigData, ProxyConfig.class);
+        proxyConfig.initData();
         setProxyConfig(proxyConfig);
     }
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/producer/SendMessageActivityTest.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.Map;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.TimeUnit;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.client.producer.SendStatus;
@@ -203,7 +204,7 @@ public void testBuildErrorMessage() {
 
     @Test
     public void testBuildMessage() {
-        long deliveryTime = System.currentTimeMillis();
+        long deliveryTime = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(5);
         String msgId = MessageClientIDSetter.createUniqID();
 
         org.apache.rocketmq.common.message.Message messageExt = this.sendMessageActivity.buildMessage(null,
@@ -226,7 +227,7 @@ public void testBuildMessage() {
             Resource.newBuilder().setName(TOPIC).build()).get(0);
 
         assertEquals(MessageClientIDSetter.getUniqID(messageExt), msgId);
-        assertEquals(String.valueOf(deliveryTime), messageExt.getProperty(MessageConst.PROPERTY_TIMER_DELIVER_MS));
+        assertEquals(String.valueOf(2), messageExt.getProperty(MessageConst.PROPERTY_DELAY_TIME_LEVEL));
     }
 
     @Test

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessor.java
Patch:
@@ -243,6 +243,9 @@ protected void clearGroup(String key) {
         ProxyConfig proxyConfig = ConfigurationManager.getProxyConfig();
         ProxyContext context = createContext("ClearGroup");
         ReceiptHandleGroup handleGroup = receiptHandleGroupMap.remove(key);
+        if (handleGroup == null) {
+            return;
+        }
         handleGroup.scan((msgID, handle, messageReceiptHandle) -> {
             ReceiptHandle receiptHandle = ReceiptHandle.decode(messageReceiptHandle.getReceiptHandle());
             messagingProcessor.changeInvisibleTime(

File: store/src/main/java/org/apache/rocketmq/store/ConsumeQueue.java
Patch:
@@ -480,7 +480,7 @@ private boolean checkMultiDispatchQueue(DispatchRequest dispatchRequest) {
             return false;
         }
         Map<String, String> prop = dispatchRequest.getPropertiesMap();
-        if (prop == null && prop.isEmpty()) {
+        if (prop == null || prop.isEmpty()) {
             return false;
         }
         String multiDispatchQueue = prop.get(MessageConst.PROPERTY_INNER_MULTI_DISPATCH);

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/AbstractMessingActivityTest.java
Patch:
@@ -63,8 +63,8 @@ public void testValidateConsumer() {
         assertThrows(GrpcProxyException.class, () -> messingActivity.validateConsumerGroup(Resource.newBuilder().build()));
         assertThrows(GrpcProxyException.class, () -> messingActivity.validateConsumerGroup(Resource.newBuilder().setName(MixAll.CID_SYS_RMQ_TRANS).build()));
         assertThrows(GrpcProxyException.class, () -> messingActivity.validateConsumerGroup(Resource.newBuilder().setName("@").build()));
-        assertThrows(GrpcProxyException.class, () -> messingActivity.validateConsumerGroup(Resource.newBuilder().setName(createString(65)).build()));
-        messingActivity.validateConsumerGroup(Resource.newBuilder().setName(createString(64)).build());
+        assertThrows(GrpcProxyException.class, () -> messingActivity.validateConsumerGroup(Resource.newBuilder().setName(createString(256)).build()));
+        messingActivity.validateConsumerGroup(Resource.newBuilder().setName(createString(255)).build());
     }
 
     private static String createString(int len) {

File: client/src/main/java/org/apache/rocketmq/client/consumer/store/RemoteBrokerOffsetStore.java
Patch:
@@ -213,6 +213,7 @@ public void updateConsumeOffsetToBroker(MessageQueue mq, long offset, boolean is
             requestHeader.setConsumerGroup(this.groupName);
             requestHeader.setQueueId(mq.getQueueId());
             requestHeader.setCommitOffset(offset);
+            requestHeader.setBname(mq.getBrokerName());
 
             if (isOneway) {
                 this.mQClientFactory.getMQClientAPIImpl().updateConsumerOffsetOneway(
@@ -239,6 +240,7 @@ private long fetchConsumeOffsetFromBroker(MessageQueue mq) throws RemotingExcept
             requestHeader.setTopic(mq.getTopic());
             requestHeader.setConsumerGroup(this.groupName);
             requestHeader.setQueueId(mq.getQueueId());
+            requestHeader.setBname(mq.getBrokerName());
 
             return this.mQClientFactory.getMQClientAPIImpl().queryConsumerOffset(
                 findBrokerResult.getBrokerAddr(), requestHeader, 1000 * 5);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/PullAPIWrapper.java
Patch:
@@ -227,13 +227,13 @@ public PullResult pullKernelImpl(
             requestHeader.setSubVersion(subVersion);
             requestHeader.setMaxMsgBytes(maxSizeInBytes);
             requestHeader.setExpressionType(expressionType);
+            requestHeader.setBname(mq.getBrokerName());
 
             String brokerAddr = findBrokerResult.getBrokerAddr();
             if (PullSysFlag.hasClassFilterFlag(sysFlagInner)) {
                 brokerAddr = computePullFromWhichFilterServer(mq.getTopic(), brokerAddr);
             }
 
-
             PullResult pullResult = this.mQClientFactory.getMQClientAPIImpl().pullMessage(
                 brokerAddr,
                 requestHeader,

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExt.java
Patch:
@@ -734,6 +734,7 @@ public void createStaticTopic(String addr, String defaultTopic, TopicConfig topi
         this.defaultMQAdminExtImpl.createStaticTopic(addr, defaultTopic, topicConfig, mappingDetail, force);
     }
 
+    @Deprecated
     @Override
     public long searchOffset(final String brokerAddr, final String topicName,
         final int queueId, final long timestamp, final long timeoutMillis)

File: tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java
Patch:
@@ -371,6 +371,7 @@ void setMessageRequestMode(final String brokerAddr, final String topic, final St
         throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException,
         RemotingConnectException, MQClientException;
 
+    @Deprecated
     long searchOffset(final String brokerAddr, final String topicName,
         final int queueId, final long timestamp, final long timeoutMillis)
         throws RemotingException, MQBrokerException, InterruptedException;

File: broker/src/main/java/org/apache/rocketmq/broker/slave/SlaveSynchronize.java
Patch:
@@ -47,8 +47,8 @@ public String getMasterAddr() {
 
     public void setMasterAddr(String masterAddr) {
         if (!StringUtils.equals(this.masterAddr, masterAddr)) {
-            this.masterAddr = masterAddr;
             LOGGER.info("Update master address from {} to {}", this.masterAddr, masterAddr);
+            this.masterAddr = masterAddr;
         }
     }
 

File: broker/src/main/java/org/apache/rocketmq/broker/slave/SlaveSynchronize.java
Patch:
@@ -47,8 +47,8 @@ public String getMasterAddr() {
 
     public void setMasterAddr(String masterAddr) {
         if (!StringUtils.equals(this.masterAddr, masterAddr)) {
-            this.masterAddr = masterAddr;
             LOGGER.info("Update master address from {} to {}", this.masterAddr, masterAddr);
+            this.masterAddr = masterAddr;
         }
     }
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/cluster/ClusterListSubCommand.java
Patch:
@@ -180,7 +180,7 @@ private void printClusterMoreStats(final Set<String> clusterNames,
     private void printClusterBaseInfo(final Set<String> clusterNames,
         final DefaultMQAdminExt defaultMQAdminExt,
         final ClusterInfo clusterInfo) {
-        System.out.printf("%-16s  %-22s  %-4s  %-22s %-16s %19s %19s %10s %5s %6s %-10%n",
+        System.out.printf("%-16s  %-22s  %-4s  %-22s %-16s %19s %19s %10s %5s %6s %10s%n",
             "#Cluster Name",
             "#Broker Name",
             "#BID",

File: tools/src/main/java/org/apache/rocketmq/tools/command/queue/QueryConsumeQueueCommand.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.PosixParser;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.protocol.body.ConsumeQueueData;
 import org.apache.rocketmq.common.protocol.body.QueryConsumeQueueResponseBody;
 import org.apache.rocketmq.common.protocol.route.TopicRouteData;
@@ -104,7 +105,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
                 consumerGroup = commandLine.getOptionValue("g").trim();
             }
 
-            if (broker == null || broker == "") {
+            if (StringUtils.isEmpty(broker)) {
                 TopicRouteData topicRouteData = defaultMQAdminExt.examineTopicRouteInfo(topic);
 
                 if (topicRouteData == null || topicRouteData.getBrokerDatas() == null

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ChangeInvisibleDurationActivity.java
Patch:
@@ -49,7 +49,8 @@ public CompletableFuture<ChangeInvisibleDurationResponse> changeInvisibleDuratio
 
         try {
             validateTopicAndConsumerGroup(request.getTopic(), request.getGroup());
-            
+            validateInvisibleTime(Durations.toMillis(request.getInvisibleDuration()));
+
             ReceiptHandle receiptHandle = ReceiptHandle.decode(request.getReceiptHandle());
 
             String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java
Patch:
@@ -84,6 +84,9 @@ public void receiveMessage(ProxyContext ctx, ReceiveMessageRequest request,
             ProxyConfig proxyConfig = ConfigurationManager.getProxyConfig();
             if (proxyConfig.isEnableProxyAutoRenew() && request.getAutoRenew()) {
                 actualInvisibleTime = proxyConfig.getRenewSliceTimeMillis();
+            } else {
+                validateInvisibleTime(actualInvisibleTime,
+                    ConfigurationManager.getProxyConfig().getMinInvisibleTimeMillsForRecv());
             }
 
             FilterExpression filterExpression = request.getFilterExpression();

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/AbstractMessingActivityTest.java
Patch:
@@ -63,8 +63,8 @@ public void testValidateConsumer() {
         assertThrows(GrpcProxyException.class, () -> messingActivity.validateConsumerGroup(Resource.newBuilder().build()));
         assertThrows(GrpcProxyException.class, () -> messingActivity.validateConsumerGroup(Resource.newBuilder().setName(MixAll.CID_SYS_RMQ_TRANS).build()));
         assertThrows(GrpcProxyException.class, () -> messingActivity.validateConsumerGroup(Resource.newBuilder().setName("@").build()));
-        assertThrows(GrpcProxyException.class, () -> messingActivity.validateConsumerGroup(Resource.newBuilder().setName(createString(256)).build()));
-        messingActivity.validateConsumerGroup(Resource.newBuilder().setName(createString(255)).build());
+        assertThrows(GrpcProxyException.class, () -> messingActivity.validateConsumerGroup(Resource.newBuilder().setName(createString(65)).build()));
+        messingActivity.validateConsumerGroup(Resource.newBuilder().setName(createString(64)).build());
     }
 
     private static String createString(int len) {

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManagerTest.java
Patch:
@@ -63,7 +63,7 @@ public void testGetSubscriptionData() {
         ProxyContext context = ProxyContext.create().withVal(ContextVariable.CLIENT_ID, CLIENT_ID);
 
         Settings settings = this.grpcClientSettingsManager.getClientSettings(context);
-        assertEquals(settings.getBackoffPolicy(), GrpcClientSettingsManager.DEFAULT_CONSUMER_SETTINGS.getBackoffPolicy());
+        assertEquals(settings.getBackoffPolicy(), this.grpcClientSettingsManager.createDefaultConsumerSettingsBuilder().build().getBackoffPolicy());
 
         subscriptionGroupConfig.setRetryMaxTimes(3);
         subscriptionGroupConfig.getGroupRetryPolicy().setType(GroupRetryPolicyType.CUSTOMIZED);

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseIT.java
Patch:
@@ -147,6 +147,7 @@ public void setUp() throws Exception {
         // Set LongPollingReserveTimeInMillis to 500ms to reserve more time for IT
         ConfigurationManager.getProxyConfig().setLongPollingReserveTimeInMillis(500);
         ConfigurationManager.getProxyConfig().setRocketMQClusterName(brokerController1.getBrokerConfig().getBrokerClusterName());
+        ConfigurationManager.getProxyConfig().setMinInvisibleTimeMillsForRecv(3);
 
         blockingStub = createBlockingStub(createChannel(ConfigurationManager.getProxyConfig().getGrpcServerPort()));
         stub = createStub(createChannel(ConfigurationManager.getProxyConfig().getGrpcServerPort()));
@@ -607,6 +608,7 @@ public ReceiveMessageRequest buildReceiveMessageRequest(String topic, String gro
                 .setId(-1)
                 .build())
             .setBatchSize(1)
+            .setAutoRenew(false)
             .setInvisibleDuration(Duration.newBuilder()
                 .setSeconds(3)
                 .build())

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/TransactionDataManager.java
Patch:
@@ -51,6 +51,9 @@ public void addTransactionData(String producerGroup, String transactionId, Trans
                 dataSet = new ConcurrentSkipListSet<>();
             }
             dataSet.add(transactionData);
+            if (dataSet.size() > ConfigurationManager.getProxyConfig().getTransactionDataMaxNum()) {
+                dataSet.pollFirst();
+            }
             return dataSet;
         });
     }

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseIT.java
Patch:
@@ -311,7 +311,6 @@ public void testSimpleConsumerSendAndRecvBigMessage() throws Exception {
         String topic = initTopicOnSampleTopicBroker(broker1Name);
         String group = MQRandomUtils.getRandomConsumerGroup();
 
-        int maxDeliveryAttempts = 16;
         int bodySize = 4 * 1024;
 
         // init consumer offset

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java
Patch:
@@ -118,7 +118,7 @@ public class ProxyConfig {
     private int transactionHeartbeatBatchNum = 100;
     private long transactionDataExpireScanPeriodMillis = Duration.ofSeconds(10).toMillis();
     private long transactionDataMaxWaitClearMillis = Duration.ofSeconds(30).toMillis();
-    private long defaultTransactionCheckImmunityTimeInSecond = 60;
+    private long defaultTransactionCheckImmunityTimeInSecond = 30;
 
     private long longPollingReserveTimeInMillis = 100;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ProducerProcessor.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.rocketmq.common.protocol.header.ConsumerSendMsgBackRequestHeader;
 import org.apache.rocketmq.common.protocol.header.SendMessageRequestHeader;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
+import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.common.ProxyContext;
@@ -137,8 +138,8 @@ protected SendMessageRequestHeader buildSendMessageRequestHeader(List<Message> m
 
         requestHeader.setProducerGroup(producerGroup);
         requestHeader.setTopic(message.getTopic());
-        requestHeader.setDefaultTopic("");
-        requestHeader.setDefaultTopicQueueNums(0);
+        requestHeader.setDefaultTopic(TopicValidator.AUTO_CREATE_TOPIC_KEY_TOPIC);
+        requestHeader.setDefaultTopicQueueNums(4);
         requestHeader.setQueueId(queueId);
         requestHeader.setSysFlag(sysFlag);
         requestHeader.setBornTimestamp(System.currentTimeMillis());

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManagerTest.java
Patch:
@@ -70,7 +70,7 @@ public void testGetSubscriptionData() {
         subscriptionGroupConfig.getGroupRetryPolicy().setCustomizedRetryPolicy(new CustomizedRetryPolicy(new long[] {1000}));
         settings = this.grpcClientSettingsManager.getClientSettings(context);
         assertEquals(RetryPolicy.newBuilder()
-            .setMaxAttempts(3)
+            .setMaxAttempts(4)
             .setCustomizedBackoff(CustomizedBackoff.newBuilder()
                 .addNext(Durations.fromSeconds(1))
                 .build())
@@ -81,7 +81,7 @@ public void testGetSubscriptionData() {
         subscriptionGroupConfig.getGroupRetryPolicy().setExponentialRetryPolicy(new ExponentialRetryPolicy(1000, 2000, 3));
         settings = this.grpcClientSettingsManager.getClientSettings(context);
         assertEquals(RetryPolicy.newBuilder()
-            .setMaxAttempts(10)
+            .setMaxAttempts(11)
             .setExponentialBackoff(ExponentialBackoff.newBuilder()
                 .setMax(Durations.fromSeconds(2))
                 .setInitial(Durations.fromSeconds(1))

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseIT.java
Patch:
@@ -391,7 +391,7 @@ public void testSimpleConsumerToDLQ() throws Exception {
         int maxDeliveryAttempts = 2;
 
         SubscriptionGroupConfig groupConfig = brokerController1.getSubscriptionGroupManager().findSubscriptionGroupConfig(group);
-        groupConfig.setRetryMaxTimes(maxDeliveryAttempts);
+        groupConfig.setRetryMaxTimes(maxDeliveryAttempts - 1);
         brokerController1.getSubscriptionGroupManager().updateSubscriptionGroupConfig(groupConfig);
         brokerController2.getSubscriptionGroupManager().updateSubscriptionGroupConfig(groupConfig);
         brokerController3.getSubscriptionGroupManager().updateSubscriptionGroupConfig(groupConfig);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManager.java
Patch:
@@ -98,7 +98,7 @@ protected static Settings mergeSubscriptionData(Settings settings, SubscriptionG
 
         resultSettingsBuilder.getSubscriptionBuilder().setFifo(config.isConsumeMessageOrderly());
 
-        resultSettingsBuilder.getBackoffPolicyBuilder().setMaxAttempts(config.getRetryMaxTimes());
+        resultSettingsBuilder.getBackoffPolicyBuilder().setMaxAttempts(config.getRetryMaxTimes() + 1);
 
         GroupRetryPolicy groupRetryPolicy = config.getGroupRetryPolicy();
         if (groupRetryPolicy.getType().equals(GroupRetryPolicyType.EXPONENTIAL)) {

File: common/src/main/java/org/apache/rocketmq/common/message/MessageConst.java
Patch:
@@ -127,5 +127,6 @@ public class MessageConst {
         STRING_HASH_SET.add(PROPERTY_CLUSTER);
         STRING_HASH_SET.add(PROPERTY_MESSAGE_TYPE);
         STRING_HASH_SET.add(PROPERTY_INNER_MULTI_QUEUE_OFFSET);
+        STRING_HASH_SET.add(PROPERTY_BORN_HOST);
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java
Patch:
@@ -22,7 +22,6 @@
 import apache.rocketmq.v2.ReceiveMessageResponse;
 import apache.rocketmq.v2.Settings;
 import apache.rocketmq.v2.Subscription;
-import com.google.common.base.Preconditions;
 import com.google.protobuf.util.Durations;
 import io.grpc.stub.StreamObserver;
 import java.time.Duration;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java
Patch:
@@ -84,8 +84,6 @@ public void receiveMessage(ProxyContext ctx, ReceiveMessageRequest request,
             long actualInvisibleTime = Durations.toMillis(request.getInvisibleDuration());
             ProxyConfig proxyConfig = ConfigurationManager.getProxyConfig();
             if (proxyConfig.isEnableProxyAutoRenew() && request.getAutoRenew()) {
-                Preconditions.checkNotNull(this.messagingProcessor.findConsumerChannel(ctx, group, ctx.getClientID()),
-                    "cannot find channel in consumerManager");
                 actualInvisibleTime = proxyConfig.getRenewSliceTimeMillis();
             }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/AbstractMessingActivity.java
Patch:
@@ -61,7 +61,7 @@ protected Pattern getPattern(String regex) {
     }
 
     protected void validateTopic(Resource topic) {
-        String topicName = GrpcConverter.wrapResourceWithNamespace(topic);
+        String topicName = GrpcConverter.getInstance().wrapResourceWithNamespace(topic);
         if (StringUtils.isBlank(topicName)) {
             throw new GrpcProxyException(Code.ILLEGAL_TOPIC, "topic name cannot be empty");
         }
@@ -82,7 +82,7 @@ protected void validateTopic(Resource topic) {
     }
 
     protected void validateConsumerGroup(Resource consumerGroup) {
-        String consumerGroupName = GrpcConverter.wrapResourceWithNamespace(consumerGroup);
+        String consumerGroupName = GrpcConverter.getInstance().wrapResourceWithNamespace(consumerGroup);
         if (StringUtils.isBlank(consumerGroupName)) {
             throw new GrpcProxyException(Code.ILLEGAL_CONSUMER_GROUP, "consumer group cannot be empty");
         }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplication.java
Patch:
@@ -155,12 +155,12 @@ protected <V, T> void addExecutor(ExecutorService executor, ProxyContext context
     protected <V, T> void writeResponse(ProxyContext context, V request, T response, StreamObserver<T> responseObserver,
         Throwable t, Function<Status, T> errorResponseCreator) {
         if (t != null) {
-            ResponseWriter.write(
+            ResponseWriter.getInstance().write(
                 responseObserver,
                 errorResponseCreator.apply(convertExceptionToStatus(t))
             );
         } else {
-            ResponseWriter.write(responseObserver, response);
+            ResponseWriter.getInstance().write(responseObserver, response);
         }
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/channel/GrpcClientChannel.java
Patch:
@@ -133,8 +133,8 @@ protected CompletableFuture<Void> processCheckTransaction(CheckTransactionStateR
             this.getTelemetryCommandStreamObserver().onNext(TelemetryCommand.newBuilder()
                 .setRecoverOrphanedTransactionCommand(RecoverOrphanedTransactionCommand.newBuilder()
                     .setTransactionId(transactionData.getTransactionId())
-                    .setOrphanedTransactionalMessage(GrpcConverter.buildMessage(messageExt))
-                    .setMessageQueue(GrpcConverter.buildMessageQueue(messageExt, transactionData.getBrokerName()))
+                    .setOrphanedTransactionalMessage(GrpcConverter.getInstance().buildMessage(messageExt))
+                    .setMessageQueue(GrpcConverter.getInstance().buildMessageQueue(messageExt, transactionData.getBrokerName()))
                     .build())
                 .build());
             responseFuture.complete(null);
@@ -168,7 +168,7 @@ protected CompletableFuture<Void> processConsumeMessageDirectly(RemotingCommand
         this.getTelemetryCommandStreamObserver().onNext(TelemetryCommand.newBuilder()
             .setVerifyMessageCommand(VerifyMessageCommand.newBuilder()
                 .setNonce(this.grpcChannelManager.addResponseFuture(responseFuture))
-                .setMessage(GrpcConverter.buildMessage(messageExt))
+                .setMessage(GrpcConverter.getInstance().buildMessage(messageExt))
                 .build())
             .build());
         return CompletableFuture.completedFuture(null);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManager.java
Patch:
@@ -79,7 +79,7 @@ public Settings getClientSettings(ProxyContext ctx) {
         }
         if (settings.hasSubscription()) {
             settings = mergeSubscriptionData(ctx, settings,
-                GrpcConverter.wrapResourceWithNamespace(settings.getSubscription().getGroup()));
+                GrpcConverter.getInstance().wrapResourceWithNamespace(settings.getSubscription().getGroup()));
         }
         return settings;
     }
@@ -154,6 +154,6 @@ public Settings removeAndGetClientSettings(ProxyContext ctx) {
             return null;
         }
         return mergeSubscriptionData(ctx, settings,
-            GrpcConverter.wrapResourceWithNamespace(settings.getSubscription().getGroup()));
+            GrpcConverter.getInstance().wrapResourceWithNamespace(settings.getSubscription().getGroup()));
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/AckMessageActivity.java
Patch:
@@ -97,7 +97,7 @@ protected CompletableFuture<AckMessageResultEntry> processAckMessage(ProxyContex
         try {
             String handleString = ackMessageEntry.getReceiptHandle();
 
-            String group = GrpcConverter.wrapResourceWithNamespace(request.getGroup());
+            String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());
             MessageReceiptHandle messageReceiptHandle = receiptHandleProcessor.removeReceiptHandle(ctx.getClientID(), group, ackMessageEntry.getMessageId(), ackMessageEntry.getReceiptHandle());
             if (messageReceiptHandle != null) {
                 handleString = messageReceiptHandle.getReceiptHandle();
@@ -107,7 +107,7 @@ protected CompletableFuture<AckMessageResultEntry> processAckMessage(ProxyContex
                 ReceiptHandle.decode(handleString),
                 ackMessageEntry.getMessageId(),
                 group,
-                GrpcConverter.wrapResourceWithNamespace(request.getTopic()));
+                GrpcConverter.getInstance().wrapResourceWithNamespace(request.getTopic()));
             ackResultFuture.thenAccept(result -> {
                 future.complete(convertToAckMessageResultEntry(ctx, ackMessageEntry, result));
             }).exceptionally(t -> {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ChangeInvisibleDurationActivity.java
Patch:
@@ -52,13 +52,13 @@ public CompletableFuture<ChangeInvisibleDurationResponse> changeInvisibleDuratio
             
             ReceiptHandle receiptHandle = ReceiptHandle.decode(request.getReceiptHandle());
 
-            String group = GrpcConverter.wrapResourceWithNamespace(request.getGroup());
+            String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());
             return this.messagingProcessor.changeInvisibleTime(
                 ctx,
                 receiptHandle,
                 request.getMessageId(),
                 group,
-                GrpcConverter.wrapResourceWithNamespace(request.getTopic()),
+                GrpcConverter.getInstance().wrapResourceWithNamespace(request.getTopic()),
                 Durations.toMillis(request.getInvisibleDuration())
             ).thenApply(ackResult -> {
                 if (AckStatus.OK.equals(ackResult.getStatus())) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java
Patch:
@@ -78,8 +78,8 @@ public void receiveMessage(ProxyContext ctx, ReceiveMessageRequest request,
             }
 
             validateTopicAndConsumerGroup(request.getMessageQueue().getTopic(), request.getGroup());
-            String topic = GrpcConverter.wrapResourceWithNamespace(request.getMessageQueue().getTopic());
-            String group = GrpcConverter.wrapResourceWithNamespace(request.getGroup());
+            String topic = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getMessageQueue().getTopic());
+            String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());
 
             long actualInvisibleTime = Durations.toMillis(request.getInvisibleDuration());
             ProxyConfig proxyConfig = ConfigurationManager.getProxyConfig();
@@ -93,7 +93,7 @@ public void receiveMessage(ProxyContext ctx, ReceiveMessageRequest request,
             SubscriptionData subscriptionData;
             try {
                 subscriptionData = FilterAPI.build(topic, filterExpression.getExpression(),
-                    GrpcConverter.buildExpressionType(filterExpression.getType()));
+                    GrpcConverter.getInstance().buildExpressionType(filterExpression.getType()));
             } catch (Exception e) {
                 writer.writeAndComplete(ctx, Code.ILLEGAL_FILTER_EXPRESSION, e.getMessage());
                 return;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/producer/ForwardMessageToDLQActivity.java
Patch:
@@ -47,8 +47,8 @@ public CompletableFuture<ForwardMessageToDeadLetterQueueResponse> forwardMessage
                 ctx,
                 receiptHandle,
                 request.getMessageId(),
-                GrpcConverter.wrapResourceWithNamespace(request.getGroup()),
-                GrpcConverter.wrapResourceWithNamespace(request.getTopic())
+                GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup()),
+                GrpcConverter.getInstance().wrapResourceWithNamespace(request.getTopic())
             ).thenApply(result -> convertToForwardMessageToDeadLetterQueueResponse(ctx, result));
         } catch (Throwable t) {
             future.completeExceptionally(t);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/producer/SendMessageActivity.java
Patch:
@@ -78,7 +78,7 @@ public CompletableFuture<SendMessageResponse> sendMessage(ProxyContext ctx, Send
             future = this.messagingProcessor.sendMessage(
                 ctx,
                 new SendMessageQueueSelector(request),
-                GrpcConverter.wrapResourceWithNamespace(topic),
+                GrpcConverter.getInstance().wrapResourceWithNamespace(topic),
                 buildSysFlag(message),
                 buildMessage(ctx, request.getMessagesList(), topic)
             ).thenApply(result -> convertToSendMessageResponse(ctx, request, result));
@@ -90,7 +90,7 @@ public CompletableFuture<SendMessageResponse> sendMessage(ProxyContext ctx, Send
 
     protected List<Message> buildMessage(ProxyContext context, List<apache.rocketmq.v2.Message> protoMessageList,
         Resource topic) {
-        String topicName = GrpcConverter.wrapResourceWithNamespace(topic);
+        String topicName = GrpcConverter.getInstance().wrapResourceWithNamespace(topic);
         List<Message> messageExtList = new ArrayList<>();
         for (apache.rocketmq.v2.Message protoMessage : protoMessageList) {
             if (!protoMessage.getTopic().equals(topic)) {
@@ -103,7 +103,7 @@ protected List<Message> buildMessage(ProxyContext context, List<apache.rocketmq.
     }
 
     protected Message buildMessage(ProxyContext context, apache.rocketmq.v2.Message protoMessage, String producerGroup) {
-        String topicName = GrpcConverter.wrapResourceWithNamespace(protoMessage.getTopic());
+        String topicName = GrpcConverter.getInstance().wrapResourceWithNamespace(protoMessage.getTopic());
 
         validateMessageBodySize(protoMessage.getBody());
         Message messageExt = new Message();

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivity.java
Patch:
@@ -64,7 +64,7 @@ public CompletableFuture<QueryRouteResponse> queryRoute(ProxyContext ctx, QueryR
             ProxyTopicRouteData proxyTopicRouteData = this.messagingProcessor.getTopicRouteDataForProxy(
                 ctx,
                 addressList,
-                GrpcConverter.wrapResourceWithNamespace(request.getTopic()));
+                GrpcConverter.getInstance().wrapResourceWithNamespace(request.getTopic()));
 
             List<MessageQueue> messageQueueList = new ArrayList<>();
             Map<String, Map<Long, Broker>> brokerMap = buildBrokerMap(proxyTopicRouteData.getBrokerDatas());
@@ -102,7 +102,7 @@ public CompletableFuture<QueryAssignmentResponse> queryAssignment(ProxyContext c
             ProxyTopicRouteData proxyTopicRouteData = this.messagingProcessor.getTopicRouteDataForProxy(
                 ctx,
                 addressList,
-                GrpcConverter.wrapResourceWithNamespace(request.getTopic()));
+                GrpcConverter.getInstance().wrapResourceWithNamespace(request.getTopic()));
 
             List<Assignment> assignments = new ArrayList<>();
             Map<String, Map<Long, Broker>> brokerMap = buildBrokerMap(proxyTopicRouteData.getBrokerDatas());

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/transaction/EndTransactionActivity.java
Patch:
@@ -64,7 +64,7 @@ public CompletableFuture<EndTransactionResponse> endTransaction(ProxyContext ctx
                 ctx,
                 request.getTransactionId(),
                 request.getMessageId(),
-                GrpcConverter.wrapResourceWithNamespace(request.getTopic()),
+                GrpcConverter.getInstance().wrapResourceWithNamespace(request.getTopic()),
                 transactionStatus,
                 request.getSource().equals(TransactionSource.SOURCE_SERVER_CHECK))
                 .thenApply(r -> EndTransactionResponse.newBuilder()

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcConverterTest.java
Patch:
@@ -33,7 +33,7 @@ public void testBuildMessageQueue() {
         messageExt.setQueueId(queueId);
         messageExt.setTopic(topic);
 
-        MessageQueue messageQueue = GrpcConverter.buildMessageQueue(messageExt, brokerName);
+        MessageQueue messageQueue = GrpcConverter.getInstance().buildMessageQueue(messageExt, brokerName);
         assertThat(messageQueue.getTopic().getName()).isEqualTo(topic);
         assertThat(messageQueue.getBroker().getName()).isEqualTo(brokerName);
         assertThat(messageQueue.getId()).isEqualTo(queueId);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplication.java
Patch:
@@ -140,11 +140,11 @@ public static GrpcMessagingApplication create(MessagingProcessor messagingProces
     }
 
     protected Status flowLimitStatus() {
-        return ResponseBuilder.buildStatus(Code.TOO_MANY_REQUESTS, "flow limit");
+        return ResponseBuilder.getInstance().buildStatus(Code.TOO_MANY_REQUESTS, "flow limit");
     }
 
     protected Status convertExceptionToStatus(Throwable t) {
-        return ResponseBuilder.buildStatus(t);
+        return ResponseBuilder.getInstance().buildStatus(t);
     }
 
     protected <V, T> void addExecutor(ExecutorService executor, ProxyContext context, V request, Runnable runnable,

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ChangeInvisibleDurationActivity.java
Patch:
@@ -76,12 +76,12 @@ protected ChangeInvisibleDurationResponse convertToChangeInvisibleDurationRespon
         ChangeInvisibleDurationRequest request, AckResult ackResult) {
         if (AckStatus.OK.equals(ackResult.getStatus())) {
             return ChangeInvisibleDurationResponse.newBuilder()
-                .setStatus(ResponseBuilder.buildStatus(Code.OK, Code.OK.name()))
+                .setStatus(ResponseBuilder.getInstance().buildStatus(Code.OK, Code.OK.name()))
                 .setReceiptHandle(ackResult.getExtraInfo())
                 .build();
         }
         return ChangeInvisibleDurationResponse.newBuilder()
-            .setStatus(ResponseBuilder.buildStatus(Code.INTERNAL_SERVER_ERROR, "changeInvisibleDuration failed: status is abnormal"))
+            .setStatus(ResponseBuilder.getInstance().buildStatus(Code.INTERNAL_SERVER_ERROR, "changeInvisibleDuration failed: status is abnormal"))
             .build();
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/producer/ForwardMessageToDLQActivity.java
Patch:
@@ -59,7 +59,7 @@ public CompletableFuture<ForwardMessageToDeadLetterQueueResponse> forwardMessage
     protected ForwardMessageToDeadLetterQueueResponse convertToForwardMessageToDeadLetterQueueResponse(ProxyContext ctx,
         RemotingCommand result) {
         return ForwardMessageToDeadLetterQueueResponse.newBuilder()
-            .setStatus(ResponseBuilder.buildStatus(result.getCode(), result.getRemark()))
+            .setStatus(ResponseBuilder.getInstance().buildStatus(result.getCode(), result.getRemark()))
             .build();
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivity.java
Patch:
@@ -81,7 +81,7 @@ public CompletableFuture<QueryRouteResponse> queryRoute(ProxyContext ctx, QueryR
             }
 
             QueryRouteResponse response = QueryRouteResponse.newBuilder()
-                .setStatus(ResponseBuilder.buildStatus(Code.OK, Code.OK.name()))
+                .setStatus(ResponseBuilder.getInstance().buildStatus(Code.OK, Code.OK.name()))
                 .addAllMessageQueues(messageQueueList)
                 .build();
             future.complete(response);
@@ -129,12 +129,12 @@ public CompletableFuture<QueryAssignmentResponse> queryAssignment(ProxyContext c
             QueryAssignmentResponse response;
             if (assignments.isEmpty()) {
                 response = QueryAssignmentResponse.newBuilder()
-                    .setStatus(ResponseBuilder.buildStatus(Code.FORBIDDEN, "no readable queue"))
+                    .setStatus(ResponseBuilder.getInstance().buildStatus(Code.FORBIDDEN, "no readable queue"))
                     .build();
             } else {
                 response = QueryAssignmentResponse.newBuilder()
                     .addAllAssignments(assignments)
-                    .setStatus(ResponseBuilder.buildStatus(Code.OK, Code.OK.name()))
+                    .setStatus(ResponseBuilder.getInstance().buildStatus(Code.OK, Code.OK.name()))
                     .build();
             }
             future.complete(response);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/transaction/EndTransactionActivity.java
Patch:
@@ -68,7 +68,7 @@ public CompletableFuture<EndTransactionResponse> endTransaction(ProxyContext ctx
                 transactionStatus,
                 request.getSource().equals(TransactionSource.SOURCE_SERVER_CHECK))
                 .thenApply(r -> EndTransactionResponse.newBuilder()
-                    .setStatus(ResponseBuilder.buildStatus(Code.OK, Code.OK.name()))
+                    .setStatus(ResponseBuilder.getInstance().buildStatus(Code.OK, Code.OK.name()))
                     .build());
         } catch (Throwable t) {
             future.completeExceptionally(t);

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplicationTest.java
Patch:
@@ -89,7 +89,7 @@ public void testQueryRoute() {
         Mockito.when(grpcMessingActivity.queryRoute(Mockito.any(ProxyContext.class), Mockito.eq(request)))
             .thenReturn(future);
         QueryRouteResponse response = QueryRouteResponse.newBuilder()
-            .setStatus(ResponseBuilder.buildStatus(Code.OK, Code.OK.name()))
+            .setStatus(ResponseBuilder.getInstance().buildStatus(Code.OK, Code.OK.name()))
             .addMessageQueues(MessageQueue.getDefaultInstance())
             .build();
         grpcMessagingApplication.queryRoute(request, queryRouteResponseStreamObserver);

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/client/ClientActivityTest.java
Patch:
@@ -278,7 +278,7 @@ public void onCompleted() {
                 .setThreadStackTrace(jstack)
                 .setNonce(nonce)
                 .build())
-            .setStatus(ResponseBuilder.buildStatus(Code.OK, Code.OK.name()))
+            .setStatus(ResponseBuilder.getInstance().buildStatus(Code.OK, Code.OK.name()))
             .build());
         verify(runningInfoFutureMock, times(1)).complete(runningInfoArgumentCaptor.capture());
         ProxyRelayResult<ConsumerRunningInfo> result = runningInfoArgumentCaptor.getValue();
@@ -309,7 +309,7 @@ public void onCompleted() {
             .setVerifyMessageResult(VerifyMessageResult.newBuilder()
                 .setNonce(nonce)
                 .build())
-            .setStatus(ResponseBuilder.buildStatus(Code.OK, Code.OK.name()))
+            .setStatus(ResponseBuilder.getInstance().buildStatus(Code.OK, Code.OK.name()))
             .build());
         verify(resultFutureMock, times(1)).complete(resultArgumentCaptor.capture());
         ProxyRelayResult<ConsumeMessageDirectlyResult> result = resultArgumentCaptor.getValue();

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivityTest.java
Patch:
@@ -124,7 +124,7 @@ public void testQueryRouteTopicExist() throws Throwable {
                     .build()
             ).get();
         } catch (Throwable t) {
-            assertEquals(Code.TOPIC_NOT_FOUND, ResponseBuilder.buildStatus(t).getCode());
+            assertEquals(Code.TOPIC_NOT_FOUND, ResponseBuilder.getInstance().buildStatus(t).getCode());
             return;
         }
         fail();

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ContextVariable.java
Patch:
@@ -22,6 +22,7 @@ public class ContextVariable {
     public static final String LOCAL_ADDRESS = "local-address";
     public static final String CLIENT_ID = "client-id";
     public static final String LANGUAGE = "language";
+    public static final String CLIENT_VERSION = "client-version";
     public static final String REMAINING_MS = "remaining-ms";
     public static final String ACTION = "action";
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplication.java
Patch:
@@ -172,6 +172,7 @@ protected ProxyContext createContext() {
             .setRemoteAddress(getDefaultStringMetadataInfo(headers, InterceptorConstants.REMOTE_ADDRESS))
             .setClientID(getDefaultStringMetadataInfo(headers, InterceptorConstants.CLIENT_ID))
             .setLanguage(getDefaultStringMetadataInfo(headers, InterceptorConstants.LANGUAGE))
+            .setClientVersion(getDefaultStringMetadataInfo(headers, InterceptorConstants.CLIENT_VERSION))
             .setAction(getDefaultStringMetadataInfo(headers, InterceptorConstants.RPC_NAME));
         if (ctx.getDeadline() != null) {
             context.setRemainingMs(ctx.getDeadline().timeRemaining(TimeUnit.MILLISECONDS));

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageResponseStreamWriter.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.rocketmq.client.consumer.PopStatus;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
+import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
@@ -111,14 +112,14 @@ protected Message convertToMessage(MessageExt messageExt) {
     protected void processThrowableWhenWriteMessage(Throwable throwable,
         ProxyContext ctx, ReceiveMessageRequest request, MessageExt messageExt) {
 
-        ReceiptHandle handle = ReceiptHandle.create(messageExt);
+        String handle = messageExt.getProperty(MessageConst.PROPERTY_POP_CK);
         if (handle == null) {
             return;
         }
 
         this.messagingProcessor.changeInvisibleTime(
             ctx,
-            handle,
+            ReceiptHandle.decode(handle),
             messageExt.getMsgId(),
             GrpcConverter.wrapResourceWithNamespace(request.getGroup()),
             GrpcConverter.wrapResourceWithNamespace(request.getMessageQueue().getTopic()),

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ConsumerProcessorTest.java
Patch:
@@ -135,7 +135,7 @@ public void testPopMessage() throws Throwable {
 
     @Test
     public void testAckMessage() throws Throwable {
-        ReceiptHandle handle = ReceiptHandle.create(createMessageExt(MixAll.RETRY_GROUP_TOPIC_PREFIX + TOPIC, "", 0, 3000));
+        ReceiptHandle handle = create(createMessageExt(MixAll.RETRY_GROUP_TOPIC_PREFIX + TOPIC, "", 0, 3000));
         assertNotNull(handle);
 
         ArgumentCaptor<AckMessageRequestHeader> requestHeaderArgumentCaptor = ArgumentCaptor.forClass(AckMessageRequestHeader.class);
@@ -155,7 +155,7 @@ public void testAckMessage() throws Throwable {
 
     @Test
     public void testChangeInvisibleTime() throws Throwable {
-        ReceiptHandle handle = ReceiptHandle.create(createMessageExt(MixAll.RETRY_GROUP_TOPIC_PREFIX + TOPIC, "", 0, 3000));
+        ReceiptHandle handle = create(createMessageExt(MixAll.RETRY_GROUP_TOPIC_PREFIX + TOPIC, "", 0, 3000));
         assertNotNull(handle);
 
         ArgumentCaptor<ChangeInvisibleTimeRequestHeader> requestHeaderArgumentCaptor = ArgumentCaptor.forClass(ChangeInvisibleTimeRequestHeader.class);

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ProducerProcessorTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.rocketmq.common.KeyBuilder;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.attribute.TopicMessageType;
-import org.apache.rocketmq.common.consumer.ReceiptHandle;
 import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.common.message.MessageAccessor;
 import org.apache.rocketmq.common.message.MessageClientIDSetter;
@@ -187,7 +186,7 @@ public void testForwardMessageToDeadLetterQueue() throws Throwable {
         MessageExt messageExt = createMessageExt(KeyBuilder.buildPopRetryTopic(TOPIC, CONSUMER_GROUP), "", 16, 3000);
         RemotingCommand remotingCommand = this.producerProcessor.forwardMessageToDeadLetterQueue(
             createContext(),
-            ReceiptHandle.create(messageExt),
+            create(messageExt),
             messageExt.getMsgId(),
             CONSUMER_GROUP,
             TOPIC,

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/client/ClientActivity.java
Patch:
@@ -274,6 +274,7 @@ protected TelemetryCommand processClientSettings(ProxyContext ctx, TelemetryComm
             }
         }
         if (settings.hasSubscription()) {
+            validateConsumerGroup(settings.getSubscription().getGroup());
             String groupName = GrpcConverter.wrapResourceWithNamespace(settings.getSubscription().getGroup());
             GrpcClientChannel consumerChannel = this.grpcChannelManager.createChannel(ctx, groupName, clientId);
             consumerChannel.setClientObserver(responseObserver);

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ProxyExceptionCode.java
Patch:
@@ -20,7 +20,7 @@ public enum ProxyExceptionCode {
     INVALID_BROKER_NAME,
     TRANSACTION_DATA_NOT_FOUND,
     FORBIDDEN,
-    MESSAGE_PROPERTY_DOES_NOT_MATCH_MESSAGE_TYPE,
+    MESSAGE_PROPERTY_CONFLICT_WITH_TYPE,
     INVALID_RECEIPT_HANDLE,
     INTERNAL_SERVER_ERROR,
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcProxyException.java
Patch:
@@ -34,7 +34,7 @@ public class GrpcProxyException extends RuntimeException {
         CODE_MAPPING.put(ProxyExceptionCode.INVALID_RECEIPT_HANDLE, Code.INVALID_RECEIPT_HANDLE);
         CODE_MAPPING.put(ProxyExceptionCode.FORBIDDEN, Code.FORBIDDEN);
         CODE_MAPPING.put(ProxyExceptionCode.INTERNAL_SERVER_ERROR, Code.INTERNAL_SERVER_ERROR);
-        CODE_MAPPING.put(ProxyExceptionCode.MESSAGE_PROPERTY_DOES_NOT_MATCH_MESSAGE_TYPE, Code.MESSAGE_PROPERTY_DOES_NOT_MATCH_MESSAGE_TYPE);
+        CODE_MAPPING.put(ProxyExceptionCode.MESSAGE_PROPERTY_CONFLICT_WITH_TYPE, Code.MESSAGE_PROPERTY_CONFLICT_WITH_TYPE);
     }
 
     public GrpcProxyException(Code code, String message) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivity.java
Patch:
@@ -96,7 +96,7 @@ public CompletableFuture<QueryAssignmentResponse> queryAssignment(ProxyContext c
         CompletableFuture<QueryAssignmentResponse> future = new CompletableFuture<>();
 
         try {
-            validateTopic(request.getTopic());
+            validateTopicAndConsumerGroup(request.getTopic(), request.getGroup());
             List<org.apache.rocketmq.proxy.common.Address> addressList = this.convertToAddressList(request.getEndpoints());
 
             ProxyTopicRouteData proxyTopicRouteData = this.messagingProcessor.getTopicRouteDataForProxy(

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/validator/DefaultTopicMessageTypeValidator.java
Patch:
@@ -25,7 +25,7 @@ public class DefaultTopicMessageTypeValidator implements TopicMessageTypeValidat
 
     public void validate(TopicMessageType topicMessageType, TopicMessageType messageType) {
         if (messageType.equals(TopicMessageType.UNSPECIFIED) || !messageType.equals(topicMessageType)) {
-            throw new ProxyException(ProxyExceptionCode.MESSAGE_PROPERTY_DOES_NOT_MATCH_MESSAGE_TYPE, messageType.name() + " " + topicMessageType.name());
+            throw new ProxyException(ProxyExceptionCode.MESSAGE_PROPERTY_CONFLICT_WITH_TYPE, messageType.name() + " " + topicMessageType.name());
         }
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/DefaultMessagingProcessor.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.rocketmq.client.consumer.AckResult;
 import org.apache.rocketmq.client.consumer.PopResult;
 import org.apache.rocketmq.client.consumer.PullResult;
-import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
@@ -52,7 +51,6 @@
 import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
 import org.apache.rocketmq.proxy.service.route.ProxyTopicRouteData;
 import org.apache.rocketmq.remoting.RPCHook;
-import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public class DefaultMessagingProcessor extends AbstractStartAndShutdown implements MessagingProcessor {

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/MessagingProcessor.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.rocketmq.client.consumer.AckResult;
 import org.apache.rocketmq.client.consumer.PopResult;
 import org.apache.rocketmq.client.consumer.PullResult;
-import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
@@ -44,7 +43,6 @@
 import org.apache.rocketmq.proxy.service.metadata.MetadataService;
 import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
 import org.apache.rocketmq.proxy.service.route.ProxyTopicRouteData;
-import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public interface MessagingProcessor extends StartAndShutdown {

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/message/ClusterMessageService.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.rocketmq.client.consumer.AckResult;
 import org.apache.rocketmq.client.consumer.PopResult;
 import org.apache.rocketmq.client.consumer.PullResult;
-import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
 import org.apache.rocketmq.common.message.Message;
@@ -47,7 +46,6 @@
 import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
 import org.apache.rocketmq.proxy.service.route.TopicRouteService;
-import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public class ClusterMessageService implements MessageService {

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/message/LocalMessageService.java
Patch:
@@ -32,7 +32,6 @@
 import org.apache.rocketmq.client.consumer.PopResult;
 import org.apache.rocketmq.client.consumer.PopStatus;
 import org.apache.rocketmq.client.consumer.PullResult;
-import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.client.producer.SendStatus;
 import org.apache.rocketmq.common.constant.LoggerName;
@@ -71,7 +70,6 @@
 import org.apache.rocketmq.proxy.service.channel.SimpleChannel;
 import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
 import org.apache.rocketmq.remoting.RPCHook;
-import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/message/MessageService.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.rocketmq.client.consumer.AckResult;
 import org.apache.rocketmq.client.consumer.PopResult;
 import org.apache.rocketmq.client.consumer.PullResult;
-import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
 import org.apache.rocketmq.common.message.Message;
@@ -42,7 +41,6 @@
 import org.apache.rocketmq.common.protocol.header.UpdateConsumerOffsetRequestHeader;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
-import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public interface MessageService {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcProxyException.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.rocketmq.proxy.grpc.v2.common;
 
 import apache.rocketmq.v2.Code;
-import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
 
@@ -27,7 +27,7 @@ public class GrpcProxyException extends RuntimeException {
     private ProxyException proxyException;
     private Code code;
 
-    public static final Map<ProxyExceptionCode, Code> CODE_MAPPING = new HashMap<>();
+    public static final Map<ProxyExceptionCode, Code> CODE_MAPPING = new ConcurrentHashMap<>();
 
     static {
         CODE_MAPPING.put(ProxyExceptionCode.INVALID_BROKER_NAME, Code.BAD_REQUEST);

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ProxyExceptionCode.java
Patch:
@@ -18,6 +18,7 @@
 
 public enum ProxyExceptionCode {
     INVALID_BROKER_NAME,
+    TRANSACTION_DATA_NOT_FOUND,
     FORBIDDEN,
     MESSAGE_PROPERTY_DOES_NOT_MATCH_MESSAGE_TYPE,
     INVALID_RECEIPT_HANDLE,

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcProxyException.java
Patch:
@@ -27,7 +27,7 @@ public class GrpcProxyException extends RuntimeException {
     private ProxyException proxyException;
     private Code code;
 
-    private static final Map<ProxyExceptionCode, Code> CODE_MAPPING = new HashMap<>();
+    public static final Map<ProxyExceptionCode, Code> CODE_MAPPING = new HashMap<>();
 
     static {
         CODE_MAPPING.put(ProxyExceptionCode.INVALID_BROKER_NAME, Code.BAD_REQUEST);

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/DefaultMessagingProcessor.java
Patch:
@@ -140,10 +140,10 @@ public CompletableFuture<RemotingCommand> forwardMessageToDeadLetterQueue(ProxyC
     }
 
     @Override
-    public void endTransaction(ProxyContext ctx, String transactionId, String messageId, String producerGroup,
+    public CompletableFuture<Void> endTransaction(ProxyContext ctx, String transactionId, String messageId, String producerGroup,
         TransactionStatus transactionStatus, boolean fromTransactionCheck,
-        long timeoutMillis) throws MQBrokerException, RemotingException, InterruptedException {
-        this.transactionProcessor.endTransaction(ctx, transactionId, messageId, producerGroup, transactionStatus, fromTransactionCheck, timeoutMillis);
+        long timeoutMillis) {
+        return this.transactionProcessor.endTransaction(ctx, transactionId, messageId, producerGroup, transactionStatus, fromTransactionCheck, timeoutMillis);
     }
 
     @Override

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/message/MessageService.java
Patch:
@@ -63,12 +63,12 @@ CompletableFuture<RemotingCommand> sendMessageBack(
         long timeoutMillis
     );
 
-    void endTransactionOneway(
+    CompletableFuture<Void> endTransactionOneway(
         ProxyContext ctx,
         String brokerName,
         EndTransactionRequestHeader requestHeader,
         long timeoutMillis
-    ) throws MQBrokerException, RemotingException, InterruptedException;
+    );
 
     CompletableFuture<PopResult> popMessage(
         ProxyContext ctx,

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplicationTest.java
Patch:
@@ -120,6 +120,6 @@ public void testQueryRouteWithBadClientID() {
             Mockito.verify(queryRouteResponseStreamObserver, Mockito.times(1)).onNext(responseArgumentCaptor.capture());
         });
 
-        assertEquals(Code.BAD_REQUEST_CLIENT_ID, responseArgumentCaptor.getValue().getStatus().getCode());
+        assertEquals(Code.CLIENT_ID_REQUIRED, responseArgumentCaptor.getValue().getStatus().getCode());
     }
 }
\ No newline at end of file

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/TransactionProcessorTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.proxy.processor;
 
+import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.common.protocol.header.EndTransactionRequestHeader;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.proxy.service.transaction.EndTransactionRequestData;
@@ -52,7 +53,7 @@ public void testEndTransaction() throws Throwable {
     }
 
     protected void testEndTransaction(int sysFlag, TransactionStatus transactionStatus) throws Throwable {
-        doNothing().when(this.messageService).endTransactionOneway(any(), any(), any(), anyLong());
+        when(this.messageService.endTransactionOneway(any(), any(), any(), anyLong())).thenReturn(CompletableFuture.completedFuture(null));
         ArgumentCaptor<Integer> commitOrRollbackCaptor = ArgumentCaptor.forClass(Integer.class);
         when(transactionService.genEndTransactionRequestHeader(anyString(), commitOrRollbackCaptor.capture(), anyBoolean(), anyString(), anyString()))
             .thenReturn(new EndTransactionRequestData("brokerName", new EndTransactionRequestHeader()));

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplication.java
Patch:
@@ -181,7 +181,7 @@ protected ProxyContext createContext() {
 
     protected void validateContext(ProxyContext context) {
         if (StringUtils.isBlank(context.getClientID())) {
-            throw new GrpcProxyException(Code.BAD_REQUEST_CLIENT_ID, "client id cannot be empty");
+            throw new GrpcProxyException(Code.CLIENT_ID_REQUIRED, "client id cannot be empty");
         }
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/client/ClientActivity.java
Patch:
@@ -295,7 +295,7 @@ protected void reportThreadStackTrace(ProxyContext ctx, Status status, ThreadSta
                     ConsumerRunningInfo runningInfo = new ConsumerRunningInfo();
                     runningInfo.setJstack(threadStack);
                     responseFuture.complete(new ProxyRelayResult<>(ResponseCode.SUCCESS, "", runningInfo));
-                } else if (status.getCode().equals(Code.VERIFY_MESSAGE_FORBIDDEN)) {
+                } else if (status.getCode().equals(Code.VERIFY_FIFO_MESSAGE_UNSUPPORTED)) {
                     responseFuture.complete(new ProxyRelayResult<>(ResponseCode.NO_PERMISSION, "forbidden to verify message", null));
                 } else {
                     responseFuture.complete(new ProxyRelayResult<>(ResponseCode.SYSTEM_ERROR, "verify message failed", null));

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/AbstractTransactionService.java
Patch:
@@ -80,15 +80,15 @@ public void onSendCheckTransactionStateFailed(ProxyContext context, String produ
     }
 
     protected long parseCheckImmunityTime(Message message) {
-        long checkImmunityTime = ConfigurationManager.getProxyConfig().getDefaultTransactionCheckImmunityTimeInMills();
+        long checkImmunityTime = ConfigurationManager.getProxyConfig().getDefaultTransactionCheckImmunityTimeInSecond();
         String checkImmunityTimeStr = message.getProperty(MessageConst.PROPERTY_CHECK_IMMUNITY_TIME_IN_SECONDS);
         if (StringUtils.isNotBlank(checkImmunityTimeStr)) {
             try {
-                checkImmunityTime = Duration.ofSeconds(Long.parseLong(checkImmunityTimeStr)).toMillis();
+                checkImmunityTime = Long.parseLong(checkImmunityTimeStr);
             } catch (Exception ignored) {
             }
         }
-        return checkImmunityTime;
+        return Duration.ofSeconds(checkImmunityTime).toMillis();
     }
 
     protected abstract String getBrokerNameByAddr(String brokerAddr);

File: common/src/main/java/org/apache/rocketmq/common/message/MessageConst.java
Patch:
@@ -68,6 +68,7 @@ public class MessageConst {
     public static final String PROPERTY_TRACE_CONTEXT = "TRACE_CONTEXT";
     public static final String PROPERTY_TIMER_DELAY_SEC = "TIMER_DELAY_SEC";
     public static final String PROPERTY_TIMER_DELIVER_MS = "TIMER_DELIVER_MS";
+    public static final String PROPERTY_BORN_HOST = "__BORNHOST";
 
     /**
      * property which name starts with "__RMQ.TRANSIENT." is called transient one that will not stored in broker disks.

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/utils/ExceptionUtils.java
Patch:
@@ -31,6 +31,9 @@ public static Throwable getRealException(Throwable throwable) {
     }
 
     public static String getErrorDetailMessage(Throwable t) {
+        if (t == null) {
+            return null;
+        }
         StringBuilder sb = new StringBuilder();
         sb.append(t.getMessage()).append(". ").append(t.getClass().getSimpleName());
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcProxyException.java
Patch:
@@ -30,11 +30,9 @@ public class GrpcProxyException extends RuntimeException {
     private static final Map<ProxyExceptionCode, Code> CODE_MAPPING = new HashMap<>();
 
     static {
-        CODE_MAPPING.put(ProxyExceptionCode.INVALID_BROKER_NAME, Code.INVALID_RECEIPT_HANDLE);
+        CODE_MAPPING.put(ProxyExceptionCode.INVALID_BROKER_NAME, Code.BAD_REQUEST);
         CODE_MAPPING.put(ProxyExceptionCode.INVALID_RECEIPT_HANDLE, Code.INVALID_RECEIPT_HANDLE);
-        CODE_MAPPING.put(ProxyExceptionCode.RECEIPT_HANDLE_EXPIRED, Code.RECEIPT_HANDLE_EXPIRED);
         CODE_MAPPING.put(ProxyExceptionCode.FORBIDDEN, Code.FORBIDDEN);
-        CODE_MAPPING.put(ProxyExceptionCode.ILLEGAL_MESSAGE, Code.ILLEGAL_MESSAGE);
         CODE_MAPPING.put(ProxyExceptionCode.INTERNAL_SERVER_ERROR, Code.INTERNAL_SERVER_ERROR);
         CODE_MAPPING.put(ProxyExceptionCode.MESSAGE_PROPERTY_DOES_NOT_MATCH_MESSAGE_TYPE, Code.MESSAGE_PROPERTY_DOES_NOT_MATCH_MESSAGE_TYPE);
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ChangeInvisibleDurationActivity.java
Patch:
@@ -48,6 +48,8 @@ public CompletableFuture<ChangeInvisibleDurationResponse> changeInvisibleDuratio
         CompletableFuture<ChangeInvisibleDurationResponse> future = new CompletableFuture<>();
 
         try {
+            validateTopicAndConsumerGroup(request.getTopic(), request.getGroup());
+            
             ReceiptHandle receiptHandle = ReceiptHandle.decode(request.getReceiptHandle());
 
             String group = GrpcConverter.wrapResourceWithNamespace(request.getGroup());

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java
Patch:
@@ -86,6 +86,8 @@ public void receiveMessage(ProxyContext ctx, ReceiveMessageRequest request,
                 actualInvisibleTime = Math.min(actualInvisibleTime, proxyConfig.getRenewSliceTimeMillis());
             }
 
+            validateTopicAndConsumerGroup(request.getMessageQueue().getTopic(), request.getGroup());
+
             String topic = GrpcConverter.wrapResourceWithNamespace(request.getMessageQueue().getTopic());
             String group = GrpcConverter.wrapResourceWithNamespace(request.getGroup());
             FilterExpression filterExpression = request.getFilterExpression();

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/producer/ForwardMessageToDLQActivity.java
Patch:
@@ -40,6 +40,7 @@ public CompletableFuture<ForwardMessageToDeadLetterQueueResponse> forwardMessage
         ForwardMessageToDeadLetterQueueRequest request) {
         CompletableFuture<ForwardMessageToDeadLetterQueueResponse> future = new CompletableFuture<>();
         try {
+            validateTopicAndConsumerGroup(request.getTopic(), request.getGroup());
             ReceiptHandle receiptHandle = ReceiptHandle.decode(request.getReceiptHandle());
 
             return this.messagingProcessor.forwardMessageToDeadLetterQueue(

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/AbstractProcessor.java
Patch:
@@ -36,9 +36,9 @@ public AbstractProcessor(MessagingProcessor messagingProcessor,
         this.serviceManager = serviceManager;
     }
 
-    protected void checkReceiptHandle(ReceiptHandle handle) {
+    protected void validateReceiptHandle(ReceiptHandle handle) {
         if (handle.isExpired()) {
-            throw new ProxyException(ProxyExceptionCode.RECEIPT_HANDLE_EXPIRED, "receipt handle is expired");
+            throw new ProxyException(ProxyExceptionCode.INVALID_RECEIPT_HANDLE, "receipt handle is expired");
         }
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ConsumerProcessor.java
Patch:
@@ -170,7 +170,7 @@ public CompletableFuture<AckResult> ackMessage(
     ) {
         CompletableFuture<AckResult> future = new CompletableFuture<>();
         try {
-            this.checkReceiptHandle(handle);
+            this.validateReceiptHandle(handle);
 
             AckMessageRequestHeader ackMessageRequestHeader = new AckMessageRequestHeader();
             ackMessageRequestHeader.setConsumerGroup(consumerGroup);
@@ -195,7 +195,7 @@ public CompletableFuture<AckResult> changeInvisibleTime(ProxyContext ctx, Receip
         String messageId, String groupName, String topicName, long invisibleTime, long timeoutMillis) {
         CompletableFuture<AckResult> future = new CompletableFuture<>();
         try {
-            this.checkReceiptHandle(handle);
+            this.validateReceiptHandle(handle);
 
             ChangeInvisibleTimeRequestHeader changeInvisibleTimeRequestHeader = new ChangeInvisibleTimeRequestHeader();
             changeInvisibleTimeRequestHeader.setConsumerGroup(groupName);

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/message/LocalMessageService.java
Patch:
@@ -143,7 +143,7 @@ public CompletableFuture<List<SendResult>> sendMessage(ProxyContext ctx, Address
                     break;
                 }
                 default: {
-                    throw new ProxyException(ProxyExceptionCode.ILLEGAL_MESSAGE, r.getRemark());
+                    throw new ProxyException(ProxyExceptionCode.INTERNAL_SERVER_ERROR, r.getRemark());
                 }
             }
             sendResult.setSendStatus(sendStatus);

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/message/LocalRemotingCommand.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.proxy.service.message;
 
+import java.util.HashMap;
 import org.apache.rocketmq.remoting.CommandCustomHeader;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
@@ -26,6 +27,7 @@ public static LocalRemotingCommand createRequestCommand(int code, CommandCustomH
         LocalRemotingCommand cmd = new LocalRemotingCommand();
         cmd.setCode(code);
         cmd.writeCustomHeader(customHeader);
+        cmd.setExtFields(new HashMap<>());
         setCmdVersion(cmd);
         return cmd;
     }

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/message/LocalMessageServiceTest.java
Patch:
@@ -227,7 +227,7 @@ public void testSendMessageError() throws Exception {
         CompletableFuture<List<SendResult>> future = localMessageService.sendMessage(proxyContext, null, messagesList, sendMessageRequestHeader, 1000L);
         ExecutionException exception = catchThrowableOfType(future::get, ExecutionException.class);
         assertThat(exception.getCause()).isInstanceOf(ProxyException.class);
-        assertThat(((ProxyException) exception.getCause()).getCode()).isEqualTo(ProxyExceptionCode.ILLEGAL_MESSAGE);
+        assertThat(((ProxyException) exception.getCause()).getCode()).isEqualTo(ProxyExceptionCode.INTERNAL_SERVER_ERROR);
     }
 
     @Test

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseIT.java
Patch:
@@ -378,7 +378,7 @@ public void testSimpleConsumerSendAndRecv() throws Exception {
         for (AckMessageResultEntry entry : ackMessageResponse.getEntriesList()) {
             if (entry.getStatus().getCode().equals(Code.OK)) {
                 okNum++;
-            } else if (entry.getStatus().getCode().equals(Code.RECEIPT_HANDLE_EXPIRED)) {
+            } else if (entry.getStatus().getCode().equals(Code.INVALID_RECEIPT_HANDLE)) {
                 expireNum++;
             }
         }

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/LocalGrpcIT.java
Patch:
@@ -38,7 +38,7 @@ public class LocalGrpcIT extends GrpcBaseIT {
     @Before
     public void setUp() throws Exception {
         super.setUp();
-        messagingProcessor = DefaultMessagingProcessor.createForClusterMode();
+        messagingProcessor = DefaultMessagingProcessor.createForLocalMode(brokerController1);
         messagingProcessor.start();
         grpcMessagingApplication = GrpcMessagingApplication.create(messagingProcessor);
         grpcMessagingApplication.start();

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ProducerProcessor.java
Patch:
@@ -97,7 +97,7 @@ public CompletableFuture<List<SendResult>> sendMessage(ProxyContext ctx, QueueSe
                         if (SendStatus.SEND_OK.equals(sendResult.getSendStatus()) &&
                             tranType == MessageSysFlag.TRANSACTION_PREPARED_TYPE &&
                             StringUtils.isNotBlank(sendResult.getTransactionId())) {
-                            fillTransactionData(messageQueue, sendResult, messageList);
+                            fillTransactionData(producerGroup, messageQueue, sendResult, messageList);
                         }
                     }
                     return sendResultList;
@@ -108,7 +108,7 @@ public CompletableFuture<List<SendResult>> sendMessage(ProxyContext ctx, QueueSe
         return FutureUtils.addExecutor(future, this.executor);
     }
 
-    protected void fillTransactionData(AddressableMessageQueue messageQueue, SendResult sendResult, List<Message> messageList) {
+    protected void fillTransactionData(String producerGroup, AddressableMessageQueue messageQueue, SendResult sendResult, List<Message> messageList) {
         try {
             MessageId id;
             if (sendResult.getOffsetMsgId() != null) {
@@ -118,6 +118,7 @@ protected void fillTransactionData(AddressableMessageQueue messageQueue, SendRes
             }
             this.serviceManager.getTransactionService().addTransactionDataByBrokerName(
                 messageQueue.getBrokerName(),
+                producerGroup,
                 sendResult.getQueueOffset(),
                 id.getOffset(),
                 sendResult.getTransactionId(),

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/TransactionService.java
Patch:
@@ -30,14 +30,14 @@ public interface TransactionService {
 
     void unSubscribeAllTransactionTopic(String group);
 
-    TransactionData addTransactionDataByBrokerAddr(String brokerAddr, long tranStateTableOffset, long commitLogOffset, String transactionId,
+    TransactionData addTransactionDataByBrokerAddr(String brokerAddr, String producerGroup, long tranStateTableOffset, long commitLogOffset, String transactionId,
         Message message);
 
-    TransactionData addTransactionDataByBrokerName(String brokerName, long tranStateTableOffset, long commitLogOffset, String transactionId,
+    TransactionData addTransactionDataByBrokerName(String brokerName, String producerGroup, long tranStateTableOffset, long commitLogOffset, String transactionId,
         Message message);
 
     EndTransactionRequestData genEndTransactionRequestHeader(String producerGroup, Integer commitOrRollback,
         boolean fromTransactionCheck, String msgId, String transactionId);
 
-    void onSendCheckTransactionStateFailed(ProxyContext context, TransactionData transactionData);
+    void onSendCheckTransactionStateFailed(ProxyContext context, String producerGroup, TransactionData transactionData);
 }

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ProducerProcessorTest.java
Patch:
@@ -98,6 +98,7 @@ public void testSendMessage() throws Throwable {
         ArgumentCaptor<Long> commitLogOffsetCaptor = ArgumentCaptor.forClass(Long.class);
         when(transactionService.addTransactionDataByBrokerName(
             brokerNameCaptor.capture(),
+            anyString(),
             tranStateTableOffsetCaptor.capture(),
             commitLogOffsetCaptor.capture(),
             anyString(), any())).thenReturn(mock(TransactionData.class));
@@ -151,6 +152,7 @@ public void testSendRetryMessage() throws Throwable {
         ArgumentCaptor<Long> commitLogOffsetCaptor = ArgumentCaptor.forClass(Long.class);
         when(transactionService.addTransactionDataByBrokerName(
             brokerNameCaptor.capture(),
+            anyString(),
             tranStateTableOffsetCaptor.capture(),
             commitLogOffsetCaptor.capture(),
             anyString(), any())).thenReturn(mock(TransactionData.class));

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/AbstractTransactionalMessageCheckListener.java
Patch:
@@ -56,7 +56,6 @@ public void sendCheckMessage(MessageExt msgExt) throws Exception {
         checkTransactionStateRequestHeader.setMsgId(msgExt.getUserProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX));
         checkTransactionStateRequestHeader.setTransactionId(checkTransactionStateRequestHeader.getMsgId());
         checkTransactionStateRequestHeader.setTranStateTableOffset(msgExt.getQueueOffset());
-        checkTransactionStateRequestHeader.setBrokerName(brokerController.getBrokerConfig().getBrokerName());
         msgExt.setTopic(msgExt.getUserProperty(MessageConst.PROPERTY_REAL_TOPIC));
         msgExt.setQueueId(Integer.parseInt(msgExt.getUserProperty(MessageConst.PROPERTY_REAL_QUEUE_ID)));
         msgExt.setStoreSize(0);

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/utils/ProxyUtils.java
Patch:
@@ -19,4 +19,6 @@
 public class ProxyUtils {
 
     public static final int MAX_MSG_NUMS_FOR_POP_REQUEST = 32;
+
+    public static final String BROKER_ADDR = "brokerAddr";
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/transaction/EndTransactionActivity.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
 import org.apache.rocketmq.proxy.processor.TransactionStatus;
-import org.apache.rocketmq.proxy.service.transaction.TransactionId;
 
 public class EndTransactionActivity extends AbstractMessingActivity {
 
@@ -42,7 +41,6 @@ public EndTransactionActivity(MessagingProcessor messagingProcessor,
     public CompletableFuture<EndTransactionResponse> endTransaction(ProxyContext ctx, EndTransactionRequest request) {
         CompletableFuture<EndTransactionResponse> future = new CompletableFuture<>();
         try {
-            TransactionId transactionId = TransactionId.decode(request.getTransactionId());
             TransactionStatus transactionStatus = TransactionStatus.UNKNOWN;
             TransactionResolution transactionResolution = request.getResolution();
             switch (transactionResolution) {
@@ -57,7 +55,7 @@ public CompletableFuture<EndTransactionResponse> endTransaction(ProxyContext ctx
             }
             this.messagingProcessor.endTransaction(
                 ctx,
-                transactionId,
+                request.getTransactionId(),
                 request.getMessageId(),
                 GrpcConverter.wrapResourceWithNamespace(request.getTopic()),
                 transactionStatus,

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/DefaultMessagingProcessor.java
Patch:
@@ -51,7 +51,6 @@
 import org.apache.rocketmq.proxy.service.metadata.MetadataService;
 import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
 import org.apache.rocketmq.proxy.service.route.ProxyTopicRouteData;
-import org.apache.rocketmq.proxy.service.transaction.TransactionId;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
@@ -141,8 +140,8 @@ public CompletableFuture<RemotingCommand> forwardMessageToDeadLetterQueue(ProxyC
     }
 
     @Override
-    public void endTransaction(ProxyContext ctx, TransactionId transactionId, String messageId,
-        String producerGroup, TransactionStatus transactionStatus, boolean fromTransactionCheck,
+    public void endTransaction(ProxyContext ctx, String transactionId, String messageId, String producerGroup,
+        TransactionStatus transactionStatus, boolean fromTransactionCheck,
         long timeoutMillis) throws MQBrokerException, RemotingException, InterruptedException {
         this.transactionProcessor.endTransaction(ctx, transactionId, messageId, producerGroup, transactionStatus, fromTransactionCheck, timeoutMillis);
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/MessagingProcessor.java
Patch:
@@ -44,7 +44,6 @@
 import org.apache.rocketmq.proxy.service.metadata.MetadataService;
 import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
 import org.apache.rocketmq.proxy.service.route.ProxyTopicRouteData;
-import org.apache.rocketmq.proxy.service.transaction.TransactionId;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
@@ -103,7 +102,7 @@ CompletableFuture<RemotingCommand> forwardMessageToDeadLetterQueue(
 
     default void endTransaction(
         ProxyContext ctx,
-        TransactionId transactionId,
+        String transactionId,
         String messageId,
         String producerGroup,
         TransactionStatus transactionStatus,
@@ -114,7 +113,7 @@ default void endTransaction(
 
     void endTransaction(
         ProxyContext ctx,
-        TransactionId transactionId,
+        String transactionId,
         String messageId,
         String producerGroup,
         TransactionStatus transactionStatus,

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/LocalServiceManager.java
Patch:
@@ -67,8 +67,8 @@ public LocalServiceManager(BrokerController brokerController, RPCHook rpcHook) {
             scheduledExecutorService
         );
         this.topicRouteService = new LocalTopicRouteService(brokerController, mqClientAPIFactory);
-        this.transactionService = new LocalTransactionService();
-        this.proxyRelayService = new LocalProxyRelayService(brokerController);
+        this.transactionService = new LocalTransactionService(brokerController.getBrokerConfig());
+        this.proxyRelayService = new LocalProxyRelayService(brokerController, this.transactionService);
         this.metadataService = new LocalMetadataService(brokerController);
         this.init();
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/message/MessageService.java
Patch:
@@ -42,7 +42,6 @@
 import org.apache.rocketmq.common.protocol.header.UpdateConsumerOffsetRequestHeader;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
-import org.apache.rocketmq.proxy.service.transaction.TransactionId;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
@@ -66,7 +65,7 @@ CompletableFuture<RemotingCommand> sendMessageBack(
 
     void endTransactionOneway(
         ProxyContext ctx,
-        TransactionId transactionId,
+        String brokerName,
         EndTransactionRequestHeader requestHeader,
         long timeoutMillis
     ) throws MQBrokerException, RemotingException, InterruptedException;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/mqclient/ProxyClientRemotingProcessor.java
Patch:
@@ -25,6 +25,8 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.protocol.RequestCode;
 import org.apache.rocketmq.common.protocol.header.CheckTransactionStateRequestHeader;
+import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
+import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
@@ -56,6 +58,7 @@ public RemotingCommand checkTransactionState(ChannelHandlerContext ctx,
                 CheckTransactionStateRequestHeader requestHeader =
                     request.decodeCommandCustomHeader(CheckTransactionStateRequestHeader.class);
                 request.writeCustomHeader(requestHeader);
+                request.addExtField(ProxyUtils.BROKER_ADDR, RemotingUtil.socketAddress2String(ctx.channel().remoteAddress()));
                 this.producerManager.getAvailableChannel(group).writeAndFlush(request);
             }
         }

File: test/src/test/java/org/apache/rocketmq/test/statictopic/StaticTopicIT.java
Patch:
@@ -346,8 +346,8 @@ public void testDoubleReadCheckConsumerOffset() throws Exception {
         RMQNormalConsumer consumer = getConsumer(nsAddr, group, topic, "*", new RMQNormalListener());
         long start = System.currentTimeMillis();
 
-        int queueNum = 10;
-        int msgEachQueue = 100;
+        int queueNum = 5;
+        int msgEachQueue = 10;
         //create static topic
         {
             Set<String> targetBrokers = ImmutableSet.of(broker1Name);

File: proxy/src/test/java/org/apache/rocketmq/proxy/config/MetricCollectorModeTest.java
Patch:
@@ -27,7 +27,6 @@ public void testGetEnumByOrdinal() {
         Assert.assertEquals(MetricCollectorMode.OFF, MetricCollectorMode.getEnumByOrdinal(0));
         Assert.assertEquals(MetricCollectorMode.ON, MetricCollectorMode.getEnumByOrdinal(1));
         Assert.assertEquals(MetricCollectorMode.PROXY, MetricCollectorMode.getEnumByOrdinal(2));
-        Assert.assertEquals(MetricCollectorMode.OFF, MetricCollectorMode.getEnumByOrdinal(2));
     }
 
 }
\ No newline at end of file

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivity.java
Patch:
@@ -39,6 +39,7 @@
 import org.apache.rocketmq.common.constant.PermName;
 import org.apache.rocketmq.common.protocol.route.QueueData;
 import org.apache.rocketmq.proxy.common.ProxyContext;
+import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.grpc.v2.AbstractMessingActivity;
 import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
@@ -164,11 +165,12 @@ protected Permission convertToPermission(int perm) {
     }
 
     protected List<org.apache.rocketmq.proxy.common.Address> convertToAddressList(Endpoints endpoints) {
+        int port = ConfigurationManager.getProxyConfig().getGrpcServerPort();
         List<org.apache.rocketmq.proxy.common.Address> addressList = new ArrayList<>();
         for (Address address : endpoints.getAddressesList()) {
             addressList.add(new org.apache.rocketmq.proxy.common.Address(
                 org.apache.rocketmq.proxy.common.Address.AddressScheme.valueOf(endpoints.getScheme().name()),
-                HostAndPort.fromParts(address.getHost(), address.getPort()))
+                HostAndPort.fromParts(address.getHost(), port))
             );
         }
         return addressList;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivityTest.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.rocketmq.common.constant.PermName;
 import org.apache.rocketmq.common.protocol.ResponseCode;
 import org.apache.rocketmq.common.protocol.route.QueueData;
+import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.grpc.v2.BaseActivityTest;
 import org.apache.rocketmq.proxy.service.route.ProxyTopicRouteData;
 import org.junit.Before;
@@ -82,6 +83,7 @@ public void before() throws Throwable {
 
     @Test
     public void testQueryRoute() throws Throwable {
+        ConfigurationManager.getProxyConfig().setGrpcServerPort(8080);
         ArgumentCaptor<List<org.apache.rocketmq.proxy.common.Address>> addressListCaptor = ArgumentCaptor.forClass(List.class);
         when(this.messagingProcessor.getTopicRouteDataForProxy(any(), addressListCaptor.capture(), anyString()))
             .thenReturn(createProxyTopicRouteData(2, 2, 6));
@@ -94,7 +96,6 @@ public void testQueryRoute() throws Throwable {
                 .build()
         ).get();
 
-        assertEquals(addressArrayList, addressListCaptor.getValue());
         assertEquals(Code.OK, response.getStatus().getCode());
         assertEquals(4, response.getMessageQueuesCount());
         for (MessageQueue messageQueue : response.getMessageQueuesList()) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ContextVariable.java
Patch:
@@ -23,4 +23,5 @@ public class ContextVariable {
     public static final String CLIENT_ID = "client-id";
     public static final String LANGUAGE = "language";
     public static final String REMAINING_MS = "remaining-ms";
+    public static final String ACTION = "action";
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/relay/ProxyChannel.java
Patch:
@@ -75,7 +75,7 @@ public ChannelFuture writeAndFlush(Object msg) {
 
         try {
             if (msg instanceof RemotingCommand) {
-                ProxyContext context = ProxyContext.create()
+                ProxyContext context = ProxyContext.createForInner(this.getClass())
                     .setRemoteAddress(remoteAddress)
                     .setLocalAddress(localAddress);
                 RemotingCommand command = (RemotingCommand) msg;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/AckMessageActivity.java
Patch:
@@ -107,7 +107,7 @@ protected CompletableFuture<AckMessageResultEntry> processAckMessage(ProxyContex
                 GrpcConverter.wrapResourceWithNamespace(request.getTopic()));
             ackResultFuture.thenAccept(result -> {
                 if (AckStatus.OK.equals(result.getStatus())) {
-                    receiptHandleProcessor.removeReceiptHandle(ctx.getClientID(), group, ackMessageEntry.getReceiptHandle());
+                    receiptHandleProcessor.removeReceiptHandle(ctx.getClientID(), group, ackMessageEntry.getMessageId(), ackMessageEntry.getReceiptHandle());
                 }
                 future.complete(convertToAckMessageResultEntry(ctx, ackMessageEntry, result));
             }).exceptionally(throwable -> {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ChangeInvisibleDurationActivity.java
Patch:
@@ -60,7 +60,7 @@ public CompletableFuture<ChangeInvisibleDurationResponse> changeInvisibleDuratio
                 Durations.toMillis(request.getInvisibleDuration())
             ).thenApply(ackResult -> {
                 if (AckStatus.OK.equals(ackResult.getStatus())) {
-                    receiptHandleProcessor.removeReceiptHandle(ctx.getClientID(), group, receiptHandle.getReceiptHandle());
+                    receiptHandleProcessor.removeReceiptHandle(ctx.getClientID(), group, request.getMessageId(), receiptHandle.getReceiptHandle());
                 }
                 return convertToChangeInvisibleDurationResponse(ctx, request, ackResult);
             });

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java
Patch:
@@ -121,7 +121,7 @@ public void receiveMessage(ProxyContext ctx, ReceiveMessageRequest request,
                             MessageReceiptHandle messageReceiptHandle =
                                 new MessageReceiptHandle(group, topic, messageExt.getQueueId(), receiptHandle, messageExt.getMsgId(),
                                     messageExt.getQueueOffset(), messageExt.getReconsumeTimes(), requestInvisibleTime);
-                            receiptHandleProcessor.addReceiptHandle(ctx.getClientID(), group, receiptHandle, messageReceiptHandle);
+                            receiptHandleProcessor.addReceiptHandle(ctx.getClientID(), group, messageExt.getMsgId(), receiptHandle, messageReceiptHandle);
                         }
                     }
                 }

File: acl/src/test/java/org/apache/rocketmq/acl/common/AclClientRPCHookTest.java
Patch:
@@ -50,7 +50,6 @@ public void testParseRequestContent() {
         requestHeader.setCommitOffset(0L);
         requestHeader.setSuspendTimeoutMillis(15000L);
         requestHeader.setSubVersion(0L);
-        requestHeader.setBrokerName("brokerName");
         RemotingCommand testPullRemotingCommand = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, requestHeader);
         SortedMap<String, String> oldContent = oldVersionParseRequestContent(testPullRemotingCommand, "ak", null);
         byte[] oldBytes = AclUtils.combineRequestContent(testPullRemotingCommand, oldContent);
@@ -72,7 +71,6 @@ public void testParseRequestContentWithStreamRequestType() {
         requestHeader.setCommitOffset(0L);
         requestHeader.setSuspendTimeoutMillis(15000L);
         requestHeader.setSubVersion(0L);
-        requestHeader.setBrokerName("brokerName");
         RemotingCommand testPullRemotingCommand = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, requestHeader);
         testPullRemotingCommand.addExtField(MixAll.REQ_T, String.valueOf(RequestType.STREAM.getCode()));
         testPullRemotingCommand.addExtField(ACCESS_KEY, "ak");

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultLitePullConsumer.java
Patch:
@@ -219,6 +219,7 @@ public DefaultLitePullConsumer(final String consumerGroup, RPCHook rpcHook) {
     public DefaultLitePullConsumer(final String namespace, final String consumerGroup, RPCHook rpcHook) {
         this.namespace = namespace;
         this.consumerGroup = consumerGroup;
+        this.enableStreamRequestType = true;
         defaultLitePullConsumerImpl = new DefaultLitePullConsumerImpl(this, rpcHook);
     }
 

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPullConsumer.java
Patch:
@@ -118,6 +118,7 @@ public DefaultMQPullConsumer(final String namespace, final String consumerGroup)
     public DefaultMQPullConsumer(final String namespace, final String consumerGroup, RPCHook rpcHook) {
         this.namespace = namespace;
         this.consumerGroup = consumerGroup;
+        this.enableStreamRequestType = true;
         defaultMQPullConsumerImpl = new DefaultMQPullConsumerImpl(this, rpcHook);
     }
 

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -89,6 +89,7 @@ public class MixAll {
     public static final String REPLY_MESSAGE_FLAG = "reply";
     public static final String LMQ_PREFIX = "%LMQ%";
     public static final String MULTI_DISPATCH_QUEUE_SPLITTER = ",";
+    public static final String REQ_T = "ReqT";
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
     public static final String LOGICAL_QUEUE_MOCK_BROKER_PREFIX = "__syslo__";
     public static final String METADATA_SCOPE_GLOBAL = "__global__";

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ContextVariable.java
Patch:
@@ -18,8 +18,9 @@
 package org.apache.rocketmq.proxy.common;
 
 public class ContextVariable {
-    public final static String REMOTE_ADDRESS = "remote-address";
-    public final static String LOCAL_ADDRESS = "local-address";
+    public static final String REMOTE_ADDRESS = "remote-address";
+    public static final String LOCAL_ADDRESS = "local-address";
     public static final String CLIENT_ID = "client-id";
     public static final String LANGUAGE = "language";
+    public static final String REMAINING_MS = "remaining-ms";
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/channel/GrpcChannelManager.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.rocketmq.proxy.grpc.v2.channel;
 
-import io.grpc.Context;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
@@ -30,6 +29,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.protocol.ResponseCode;
+import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
@@ -58,7 +58,7 @@ protected void init() {
         );
     }
 
-    public GrpcClientChannel createChannel(Context ctx, String group, String clientId) {
+    public GrpcClientChannel createChannel(ProxyContext ctx, String group, String clientId) {
         this.groupClientIdChannelMap.compute(group, (groupKey, clientIdMap) -> {
             if (clientIdMap == null) {
                 clientIdMap = new ConcurrentHashMap<>();

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManager.java
Patch:
@@ -35,7 +35,6 @@
 import org.apache.rocketmq.common.subscription.GroupRetryPolicy;
 import org.apache.rocketmq.common.subscription.GroupRetryPolicyType;
 import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
-import org.apache.rocketmq.proxy.common.ContextVariable;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
@@ -73,7 +72,7 @@ public GrpcClientSettingsManager(MessagingProcessor messagingProcessor) {
     }
 
     public Settings getClientSettings(ProxyContext ctx) {
-        String clientId = ctx.getVal(ContextVariable.CLIENT_ID);
+        String clientId = ctx.getClientID();
         Settings settings = CLIENT_SETTINGS_MAP.get(clientId);
         if (settings == null) {
             return null;
@@ -149,7 +148,7 @@ public void removeClientSettings(String clientId) {
     }
 
     public Settings removeAndGetClientSettings(ProxyContext ctx) {
-        String clientId = ctx.getVal(ContextVariable.CLIENT_ID);
+        String clientId = ctx.getClientID();
         Settings settings = CLIENT_SETTINGS_MAP.remove(clientId);
         if (settings == null) {
             return null;

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/QueueSelector.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.rocketmq.proxy.processor;
 
 import org.apache.rocketmq.proxy.common.ProxyContext;
-import org.apache.rocketmq.proxy.service.route.MessageQueueView;
 import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
+import org.apache.rocketmq.proxy.service.route.MessageQueueView;
 
 public interface QueueSelector {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/relay/LocalProxyRelayService.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo;
 import org.apache.rocketmq.common.protocol.header.ConsumeMessageDirectlyResultRequestHeader;
 import org.apache.rocketmq.common.protocol.header.GetConsumerRunningInfoRequestHeader;
-import org.apache.rocketmq.proxy.common.ContextVariable;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.service.channel.SimpleChannel;
 import org.apache.rocketmq.remoting.RemotingServer;
@@ -54,7 +53,7 @@ public CompletableFuture<ProxyRelayResult<ConsumerRunningInfo>> processGetConsum
                     ConsumerRunningInfo consumerRunningInfo = proxyOutResult.getResult();
                     remotingCommand.setBody(consumerRunningInfo.encode());
                 }
-                SimpleChannel simpleChannel = new SimpleChannel(context.getVal(ContextVariable.REMOTE_ADDRESS), context.getVal(ContextVariable.LOCAL_ADDRESS));
+                SimpleChannel simpleChannel = new SimpleChannel(context.getRemoteAddress(), context.getLocalAddress());
                 nettyRemotingAbstract.processResponseCommand(simpleChannel.getChannelHandlerContext(), remotingCommand);
             }
         });
@@ -78,7 +77,7 @@ public CompletableFuture<ProxyRelayResult<ConsumeMessageDirectlyResult>> process
                     ConsumeMessageDirectlyResult consumeMessageDirectlyResult = proxyOutResult.getResult();
                     remotingCommand.setBody(consumeMessageDirectlyResult.encode());
                 }
-                SimpleChannel simpleChannel = new SimpleChannel(context.getVal(ContextVariable.REMOTE_ADDRESS), context.getVal(ContextVariable.LOCAL_ADDRESS));
+                SimpleChannel simpleChannel = new SimpleChannel(context.getRemoteAddress(), context.getLocalAddress());
                 nettyRemotingAbstract.processResponseCommand(simpleChannel.getChannelHandlerContext(), remotingCommand);
             }
         });

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivityTest.java
Patch:
@@ -40,8 +40,8 @@
 import org.apache.rocketmq.common.protocol.route.TopicRouteData;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.BaseActivityTest;
-import org.apache.rocketmq.proxy.service.route.MessageQueueView;
 import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
+import org.apache.rocketmq.proxy.service.route.MessageQueueView;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/producer/SendMessageActivityTest.java
Patch:
@@ -44,8 +44,8 @@
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.BaseActivityTest;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcProxyException;
-import org.apache.rocketmq.proxy.service.route.MessageQueueView;
 import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
+import org.apache.rocketmq.proxy.service.route.MessageQueueView;
 import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.assertj.core.util.Lists;
 import org.junit.Before;

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ConsumerProcessorTest.java
Patch:
@@ -38,8 +38,8 @@
 import org.apache.rocketmq.common.protocol.header.ChangeInvisibleTimeRequestHeader;
 import org.apache.rocketmq.common.protocol.header.PopMessageRequestHeader;
 import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
-import org.apache.rocketmq.proxy.service.route.MessageQueueView;
 import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
+import org.apache.rocketmq.proxy.service.route.MessageQueueView;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.junit.Before;
 import org.junit.Test;

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessorTest.java
Patch:
@@ -104,11 +104,11 @@ public void testRenewReceiptHandle() {
             .thenReturn(CompletableFuture.completedFuture(ackResult));
         receiptHandleProcessor.scheduleRenewTask();
         Mockito.verify(messagingProcessor, Mockito.timeout(1000).times(1))
-            .changeInvisibleTime(Mockito.any(ProxyContext.class), Mockito.argThat((r) -> r.getInvisibleTime() == invisibleTime), Mockito.eq(messageId),
+            .changeInvisibleTime(Mockito.any(ProxyContext.class), Mockito.argThat(r -> r.getInvisibleTime() == invisibleTime), Mockito.eq(messageId),
                 Mockito.eq(group), Mockito.eq(topic), Mockito.eq(ConfigurationManager.getProxyConfig().getRenewSliceTimeMillis()));
         receiptHandleProcessor.scheduleRenewTask();
         Mockito.verify(messagingProcessor, Mockito.timeout(1000).times(1))
-            .changeInvisibleTime(Mockito.any(ProxyContext.class), Mockito.argThat((r) -> r.getInvisibleTime() == newInvisibleTime), Mockito.eq(messageId),
+            .changeInvisibleTime(Mockito.any(ProxyContext.class), Mockito.argThat(r -> r.getInvisibleTime() == newInvisibleTime), Mockito.eq(messageId),
                 Mockito.eq(group), Mockito.eq(topic), Mockito.eq(ConfigurationManager.getProxyConfig().getRenewSliceTimeMillis()));
     }
 
@@ -138,7 +138,6 @@ public void testRenewReceiptHandleWhenTimeout() {
                 Mockito.eq(group), Mockito.eq(topic), Mockito.eq(groupConfig.getGroupRetryPolicy().getRetryPolicy().nextDelayDuration(reconsumeTimes)));
     }
 
-
     @Test
     public void testRenewReceiptHandleWhenNotArrivingTime() {
         String newReceiptHandle = ReceiptHandle.builder()

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/transaction/ClusterTransactionServiceTest.java
Patch:
@@ -39,7 +39,6 @@
 import static org.junit.Assert.assertTrue;
 import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.ArgumentMatchers.anyString;
-import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.when;
 
 public class ClusterTransactionServiceTest extends BaseServiceTest {

File: broker/src/main/java/org/apache/rocketmq/broker/client/DefaultConsumerIdsChangeListener.java
Patch:
@@ -90,6 +90,7 @@ public void handle(ConsumerGroupEvent event, String group, Object... args) {
                 Collection<SubscriptionData> subscriptionDataList = (Collection<SubscriptionData>) args[0];
                 this.brokerController.getConsumerFilterManager().register(group, subscriptionDataList);
                 break;
+            case CLIENT_REGISTER:
             case CLIENT_UNREGISTER:
                 break;
             default:

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ContextVariable.java
Patch:
@@ -22,5 +22,4 @@ public class ContextVariable {
     public final static String LOCAL_ADDRESS = "local-address";
     public static final String CLIENT_ID = "client-id";
     public static final String LANGUAGE = "language";
-    public final static String CHANNEL_KEY = "channel-key";
 }

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/transaction/ClusterTransactionServiceTest.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
+import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.broker.client.ProducerManager;
 import org.apache.rocketmq.common.protocol.heartbeat.HeartbeatData;
 import org.apache.rocketmq.common.protocol.heartbeat.ProducerData;
@@ -111,11 +112,11 @@ public void testScanProducerHeartBeat() throws Exception {
 
         ArgumentCaptor<String> brokerAddrArgumentCaptor = ArgumentCaptor.forClass(String.class);
         ArgumentCaptor<HeartbeatData> heartbeatDataArgumentCaptor = ArgumentCaptor.forClass(HeartbeatData.class);
-        doNothing().when(mqClientAPIExt).sendHeartbeatOneway(
+        when(mqClientAPIExt.sendHeartbeatOneway(
             brokerAddrArgumentCaptor.capture(),
             heartbeatDataArgumentCaptor.capture(),
             anyLong()
-        );
+        )).thenReturn(CompletableFuture.completedFuture(null));
 
         this.clusterTransactionService.scanProducerHeartBeat();
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessor.java
Patch:
@@ -144,7 +144,7 @@ protected void renewMessage(String key, MessageReceiptHandle messageReceiptHandl
         } else {
             CompletableFuture<AckResult> future = messagingProcessor.changeInvisibleTime(ProxyContext.create(),
                 handle, messageReceiptHandle.getMessageId(), messageReceiptHandle.getGroup(),
-                messageReceiptHandle.getTopic(), retryPolicy.nextDelayDuration(messageReceiptHandle.getReconsumeTimes(), TimeUnit.MILLISECONDS));
+                messageReceiptHandle.getTopic(), retryPolicy.nextDelayDuration(messageReceiptHandle.getReconsumeTimes()));
             future.thenAccept(ackResult -> {
                 if (AckStatus.OK.equals(ackResult.getStatus())) {
                     removeReceiptHandle(key, messageReceiptHandle.getOriginalReceiptHandle());

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessorTest.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.rocketmq.proxy.processor;
 
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.broker.client.ConsumerIdsChangeListener;
 import org.apache.rocketmq.client.consumer.AckResult;
 import org.apache.rocketmq.client.consumer.AckStatus;
@@ -136,7 +135,7 @@ public void testRenewReceiptHandleWhenTimeout() {
         receiptHandleProcessor.scheduleRenewTask();
         Mockito.verify(messagingProcessor, Mockito.timeout(1000).times(1))
             .changeInvisibleTime(Mockito.any(ProxyContext.class), Mockito.any(ReceiptHandle.class), Mockito.eq(messageId),
-                Mockito.eq(group), Mockito.eq(topic), Mockito.eq(groupConfig.getGroupRetryPolicy().getRetryPolicy().nextDelayDuration(reconsumeTimes, TimeUnit.MILLISECONDS)));
+                Mockito.eq(group), Mockito.eq(topic), Mockito.eq(groupConfig.getGroupRetryPolicy().getRetryPolicy().nextDelayDuration(reconsumeTimes)));
     }
 
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ProducerProcessor.java
Patch:
@@ -42,7 +42,7 @@
 import org.apache.rocketmq.proxy.processor.validator.DefaultTopicMessageTypeValidator;
 import org.apache.rocketmq.proxy.processor.validator.TopicMessageTypeValidator;
 import org.apache.rocketmq.proxy.service.ServiceManager;
-import org.apache.rocketmq.proxy.service.route.SelectableMessageQueue;
+import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
 import org.apache.rocketmq.proxy.service.transaction.TransactionId;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
@@ -74,7 +74,7 @@ public CompletableFuture<List<SendResult>> sendMessage(ProxyContext ctx, QueueSe
                     }
                 }
             }
-            SelectableMessageQueue messageQueue = queueSelector.select(ctx,
+            AddressableMessageQueue messageQueue = queueSelector.select(ctx,
                 this.serviceManager.getTopicRouteService().getCurrentMessageQueueView(topic));
             if (messageQueue == null) {
                 throw new ProxyException(ProxyExceptionCode.FORBIDDEN, "no writable queue");

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/QueueSelector.java
Patch:
@@ -18,9 +18,9 @@
 
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.service.route.MessageQueueView;
-import org.apache.rocketmq.proxy.service.route.SelectableMessageQueue;
+import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
 
 public interface QueueSelector {
 
-    SelectableMessageQueue select(ProxyContext ctx, MessageQueueView messageQueueView);
+    AddressableMessageQueue select(ProxyContext ctx, MessageQueueView messageQueueView);
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/TopicRouteService.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
+import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.protocol.ResponseCode;
 import org.apache.rocketmq.common.protocol.route.TopicRouteData;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
@@ -87,6 +88,8 @@ public abstract ProxyTopicRouteData getTopicRouteForProxy(List<Address> requestH
 
     public abstract String getBrokerAddr(String brokerName) throws Exception;
 
+    public abstract AddressableMessageQueue buildAddressableMessageQueue(MessageQueue messageQueue) throws Exception;
+
     protected static MessageQueueView getCacheMessageQueueWrapper(LoadingCache<String, MessageQueueView> topicCache,
         String key) throws Exception {
         MessageQueueView res = topicCache.get(key);

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ConsumerProcessorTest.java
Patch:
@@ -39,7 +39,7 @@
 import org.apache.rocketmq.common.protocol.header.PopMessageRequestHeader;
 import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
 import org.apache.rocketmq.proxy.service.route.MessageQueueView;
-import org.apache.rocketmq.proxy.service.route.SelectableMessageQueue;
+import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.junit.Before;
 import org.junit.Test;
@@ -72,7 +72,7 @@ public void before() throws Throwable {
     public void testPopMessage() throws Throwable {
         final String tag = "tag";
         final long invisibleTime = Duration.ofSeconds(15).toMillis();
-        ArgumentCaptor<SelectableMessageQueue> messageQueueArgumentCaptor = ArgumentCaptor.forClass(SelectableMessageQueue.class);
+        ArgumentCaptor<AddressableMessageQueue> messageQueueArgumentCaptor = ArgumentCaptor.forClass(AddressableMessageQueue.class);
         ArgumentCaptor<PopMessageRequestHeader> requestHeaderArgumentCaptor = ArgumentCaptor.forClass(PopMessageRequestHeader.class);
 
         List<MessageExt> messageExtList = new ArrayList<>();
@@ -94,7 +94,7 @@ public void testPopMessage() throws Throwable {
         when(this.messagingProcessor.forwardMessageToDeadLetterQueue(any(), any(), toDLQMessageIdArgumentCaptor.capture(), anyString(), anyString(), anyLong()))
             .thenReturn(CompletableFuture.completedFuture(mock(RemotingCommand.class)));
 
-        SelectableMessageQueue messageQueue = mock(SelectableMessageQueue.class);
+        AddressableMessageQueue messageQueue = mock(AddressableMessageQueue.class);
         PopResult popResult = this.consumerProcessor.popMessage(
             createContext(),
             (ctx, messageQueueView) -> messageQueue,

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ProducerProcessorTest.java
Patch:
@@ -35,7 +35,7 @@
 import org.apache.rocketmq.common.protocol.header.ConsumerSendMsgBackRequestHeader;
 import org.apache.rocketmq.common.protocol.header.SendMessageRequestHeader;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
-import org.apache.rocketmq.proxy.service.route.SelectableMessageQueue;
+import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
 import org.apache.rocketmq.proxy.service.transaction.TransactionId;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.assertj.core.util.Lists;
@@ -83,7 +83,7 @@ public void testSendMessage() throws Throwable {
         List<Message> messageList = new ArrayList<>();
         Message messageExt = createMessageExt(TOPIC, "tag", 0, 0);
         messageList.add(messageExt);
-        SelectableMessageQueue messageQueue = mock(SelectableMessageQueue.class);
+        AddressableMessageQueue messageQueue = mock(AddressableMessageQueue.class);
         when(messageQueue.getBrokerName()).thenReturn("mockBroker");
 
         List<SendResult> sendResultList = this.producerProcessor.sendMessage(
@@ -124,7 +124,7 @@ public void testSendRetryMessage() throws Throwable {
         MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_RECONSUME_TIME, "1");
         MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_MAX_RECONSUME_TIMES, "16");
         messageExtList.add(messageExt);
-        SelectableMessageQueue messageQueue = mock(SelectableMessageQueue.class);
+        AddressableMessageQueue messageQueue = mock(AddressableMessageQueue.class);
         when(messageQueue.getBrokerName()).thenReturn("mockBroker");
 
         List<SendResult> sendResultList = this.producerProcessor.sendMessage(

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/message/LocalMessageServiceTest.java
Patch:
@@ -66,7 +66,7 @@
 import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
 import org.apache.rocketmq.proxy.service.channel.ChannelManager;
 import org.apache.rocketmq.proxy.service.channel.SimpleChannelHandlerContext;
-import org.apache.rocketmq.proxy.service.route.SelectableMessageQueue;
+import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.junit.Before;
@@ -318,7 +318,7 @@ public void testPopMessageWriteAndFlush() throws Exception {
             return null;
         });
         MessageQueue messageQueue = new MessageQueue(topic, brokerName, queueId);
-        CompletableFuture<PopResult> future = localMessageService.popMessage(proxyContext, new SelectableMessageQueue(messageQueue, ""), requestHeader, 1000L);
+        CompletableFuture<PopResult> future = localMessageService.popMessage(proxyContext, new AddressableMessageQueue(messageQueue, ""), requestHeader, 1000L);
         PopResult popResult = future.get();
         assertThat(popResult.getPopTime()).isEqualTo(popTime);
         assertThat(popResult.getInvisibleTime()).isEqualTo(invisibleTime);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/DefaultGrpcMessingActivity.java
Patch:
@@ -71,7 +71,7 @@ public class DefaultGrpcMessingActivity extends AbstractStartAndShutdown impleme
 
     protected DefaultGrpcMessingActivity(MessagingProcessor messagingProcessor) {
         GrpcClientSettingsManager grpcClientSettingsManager = new GrpcClientSettingsManager(messagingProcessor);
-        GrpcChannelManager grpcChannelManager = new GrpcChannelManager(messagingProcessor.getProxyOutService());
+        GrpcChannelManager grpcChannelManager = new GrpcChannelManager(messagingProcessor.getProxyRelayService());
         ReceiptHandleProcessor receiptHandleProcessor = new ReceiptHandleProcessor(messagingProcessor);
 
         this.receiveMessageActivity = new ReceiveMessageActivity(messagingProcessor, receiptHandleProcessor, grpcClientSettingsManager, grpcChannelManager);

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/DefaultMessagingProcessor.java
Patch:
@@ -229,7 +229,7 @@ public void addTransactionSubscription(ProxyContext ctx, String producerGroup, S
     }
 
     @Override
-    public ProxyRelayService getProxyOutService() {
+    public ProxyRelayService getProxyRelayService() {
         return this.serviceManager.getProxyRelayService();
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/MessagingProcessor.java
Patch:
@@ -231,7 +231,7 @@ void addTransactionSubscription(
         String topic
     );
 
-    ProxyRelayService getProxyOutService();
+    ProxyRelayService getProxyRelayService();
 
     MetadataService getMetadataService();
 }

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/BaseActivityTest.java
Patch:
@@ -65,8 +65,8 @@ public void before() throws Throwable {
         metadata.put(InterceptorConstants.LANGUAGE, "JAVA");
         metadata.put(InterceptorConstants.REMOTE_ADDRESS, REMOTE_ADDR);
         metadata.put(InterceptorConstants.LOCAL_ADDRESS, LOCAL_ADDR);
-        when(messagingProcessor.getProxyOutService()).thenReturn(proxyRelayService);
-        grpcChannelManager = new GrpcChannelManager(messagingProcessor.getProxyOutService());
+        when(messagingProcessor.getProxyRelayService()).thenReturn(proxyRelayService);
+        grpcChannelManager = new GrpcChannelManager(messagingProcessor.getProxyRelayService());
     }
 
     protected Context createContext() {

File: proxy/src/main/java/org/apache/rocketmq/proxy/ProxyStartup.java
Patch:
@@ -66,7 +66,7 @@ public static void main(String[] args) {
             MessagingProcessor messagingProcessor = createMessagingProcessor();
 
             // create grpcServer
-            GrpcServer grpcServer = GrpcServerBuilder.newBuilder(executor)
+            GrpcServer grpcServer = GrpcServerBuilder.newBuilder(executor, ConfigurationManager.getProxyConfig().getGrpcServerPort())
                 .addService(createServiceProcessor(messagingProcessor))
                 .configInterceptor()
                 .build();

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ReceiptHandleGroup.java
Patch:
@@ -28,11 +28,11 @@ public void put(String key, MessageReceiptHandle value) {
         receiptHandleMap.put(key, value);
     }
 
-    public void remove(String key) {
-        receiptHandleMap.remove(key);
+    public MessageReceiptHandle remove(String key) {
+        return receiptHandleMap.remove(key);
     }
 
-    public Map<String, MessageReceiptHandle> all() {
+    public Map<String, MessageReceiptHandle> immutableMapView() {
         return ImmutableMap.copyOf(receiptHandleMap);
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessor.java
Patch:
@@ -107,7 +107,7 @@ protected void scheduleRenewTask() {
         for (Map.Entry<String, ReceiptHandleGroup> entry : receiptHandleGroupMap.entrySet()) {
             String key = entry.getKey();
             ReceiptHandleGroup group = entry.getValue();
-            group.all().forEach((k, v) -> {
+            group.immutableMapView().forEach((k, v) -> {
                 ReceiptHandle handle = ReceiptHandle.decode(v.getReceiptHandle());
                 long now = System.currentTimeMillis();
                 if (handle.getNextVisibleTime() - now > proxyConfig.getRenewAheadTimeMillis()) {
@@ -178,7 +178,7 @@ public void clearGroup(String key) {
         }
         ProxyConfig proxyConfig = ConfigurationManager.getProxyConfig();
         receiptHandleGroupMap.computeIfPresent(key, (k, v) -> {
-                Map<String, MessageReceiptHandle> all = v.all();
+                Map<String, MessageReceiptHandle> all = v.immutableMapView();
                 all.forEach((key0, value0) -> {
                     ReceiptHandle receiptHandle = ReceiptHandle.decode(value0.getReceiptHandle());
                     messagingProcessor.changeInvisibleTime(

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java
Patch:
@@ -32,7 +32,6 @@
 import org.apache.rocketmq.common.filter.FilterAPI;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.proxy.common.ContextVariable;
 import org.apache.rocketmq.proxy.common.MessageReceiptHandle;
@@ -121,9 +120,8 @@ public void receiveMessage(Context ctx, ReceiveMessageRequest request,
                     for (MessageExt messageExt : messageExtList) {
                         String receiptHandle = messageExt.getProperty(MessageConst.PROPERTY_POP_CK);
                         if (receiptHandle != null) {
-                            MessageQueue messageQueue = new MessageQueue(topic, messageExt.getBrokerName(), messageExt.getQueueId());
                             MessageReceiptHandle messageReceiptHandle =
-                                new MessageReceiptHandle(group, messageQueue, receiptHandle, messageExt.getMsgId(),
+                                new MessageReceiptHandle(group, topic, messageExt.getQueueId(), receiptHandle, messageExt.getMsgId(),
                                     messageExt.getQueueOffset(), messageExt.getReconsumeTimes(), requestInvisibleTime);
                             String channelId = proxyContext.getVal(ContextVariable.CHANNEL_KEY);
                             receiptHandleProcessor.addReceiptHandle(channelId, receiptHandle, messageReceiptHandle);

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/MessagingProcessor.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.broker.client.ClientChannelInfo;
+import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
 import org.apache.rocketmq.broker.client.ConsumerIdsChangeListener;
 import org.apache.rocketmq.broker.client.ProducerChangeListener;
 import org.apache.rocketmq.client.consumer.AckResult;
@@ -222,6 +223,8 @@ void registerConsumerListener(
         ConsumerIdsChangeListener consumerIdsChangeListener
     );
 
+    ConsumerGroupInfo getConsumerGroupInfo(String consumerGroup);
+
     void addTransactionSubscription(
         ProxyContext ctx,
         String producerGroup,

File: example/src/main/java/org/apache/rocketmq/example/namespace/PullConsumerWithNamespace.java
Patch:
@@ -79,7 +79,7 @@ private static void dealWithPullResult(PullResult pullResult) {
             return;
         }
         pullResult.getMsgFoundList().stream().forEach(
-            (msg) -> System.out.printf("Topic is:%s, msgId is:%s%n" , msg.getTopic(), msg.getMsgId()));
+            msg -> System.out.printf("Topic is:%s, msgId is:%s%n" , msg.getTopic(), msg.getMsgId()));
     }
 
     private static void putMessageQueueOffset(MessageQueue mq, long offset) {

File: example/src/main/java/org/apache/rocketmq/example/namespace/PushConsumerWithNamespace.java
Patch:
@@ -26,7 +26,7 @@ public static void main(String[] args) throws Exception {
         defaultMQPushConsumer.setNamesrvAddr("127.0.0.1:9876");
         defaultMQPushConsumer.subscribe("topicTest", "*");
         defaultMQPushConsumer.registerMessageListener((MessageListenerConcurrently)(msgs, context) -> {
-            msgs.stream().forEach((msg) -> {
+            msgs.stream().forEach(msg -> {
                 System.out.printf("Msg topic is:%s, MsgId is:%s, reconsumeTimes is:%s%n", msg.getTopic() , msg.getMsgId(), msg.getReconsumeTimes());
             });
             return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ContextVariable.java
Patch:
@@ -22,4 +22,5 @@ public class ContextVariable {
     public final static String LOCAL_ADDRESS = "local-address";
     public static final String CLIENT_ID = "client-id";
     public static final String LANGUAGE = "language";
+    public final static String CHANNEL_KEY = "channel-key";
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/producer/ForwardMessageToDLQActivity.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.AbstractMessingActivity;
+import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
@@ -32,8 +33,8 @@
 public class ForwardMessageToDLQActivity extends AbstractMessingActivity {
 
     public ForwardMessageToDLQActivity(MessagingProcessor messagingProcessor,
-        GrpcClientSettingsManager grpcClientSettingsManager) {
-        super(messagingProcessor, grpcClientSettingsManager);
+        GrpcClientSettingsManager grpcClientSettingsManager, GrpcChannelManager grpcChannelManager) {
+        super(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);
     }
 
     public CompletableFuture<ForwardMessageToDeadLetterQueueResponse> forwardMessageToDeadLetterQueue(Context ctx,

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/producer/SendMessageActivity.java
Patch:
@@ -44,6 +44,7 @@
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.AbstractMessingActivity;
+import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcProxyException;
@@ -56,8 +57,8 @@
 public class SendMessageActivity extends AbstractMessingActivity {
 
     public SendMessageActivity(MessagingProcessor messagingProcessor,
-        GrpcClientSettingsManager grpcClientSettingsManager) {
-        super(messagingProcessor, grpcClientSettingsManager);
+        GrpcClientSettingsManager grpcClientSettingsManager, GrpcChannelManager grpcChannelManager) {
+        super(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);
     }
 
     public CompletableFuture<SendMessageResponse> sendMessage(Context ctx, SendMessageRequest request) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivity.java
Patch:
@@ -41,6 +41,7 @@
 import org.apache.rocketmq.common.protocol.route.QueueData;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.AbstractMessingActivity;
+import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
@@ -51,8 +52,8 @@
 public class RouteActivity extends AbstractMessingActivity {
 
     public RouteActivity(MessagingProcessor messagingProcessor,
-        GrpcClientSettingsManager grpcClientSettingsManager) {
-        super(messagingProcessor, grpcClientSettingsManager);
+        GrpcClientSettingsManager grpcClientSettingsManager, GrpcChannelManager grpcChannelManager) {
+        super(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);
     }
 
     public CompletableFuture<QueryRouteResponse> queryRoute(Context ctx, QueryRouteRequest request) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/transaction/EndTransactionActivity.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.AbstractMessingActivity;
+import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
@@ -35,8 +36,8 @@
 public class EndTransactionActivity extends AbstractMessingActivity {
 
     public EndTransactionActivity(MessagingProcessor messagingProcessor,
-        GrpcClientSettingsManager grpcClientSettingsManager) {
-        super(messagingProcessor, grpcClientSettingsManager);
+        GrpcClientSettingsManager grpcClientSettingsManager, GrpcChannelManager grpcChannelManager) {
+        super(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);
     }
 
     public CompletableFuture<EndTransactionResponse> endTransaction(Context ctx, EndTransactionRequest request) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/AbstractProcessor.java
Patch:
@@ -20,11 +20,12 @@
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
 import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.common.message.MessageConst;
+import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
 import org.apache.rocketmq.proxy.service.ServiceManager;
 
-public abstract class AbstractProcessor {
+public abstract class AbstractProcessor extends AbstractStartAndShutdown {
 
     protected MessagingProcessor messagingProcessor;
     protected ServiceManager serviceManager;

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ConsumerProcessor.java
Patch:
@@ -46,8 +46,8 @@ public class ConsumerProcessor extends AbstractProcessor {
 
     private final ExecutorService executor;
 
-    public ConsumerProcessor(MessagingProcessor messagingProcessor,
-        ServiceManager serviceManager, ExecutorService executor) {
+    public ConsumerProcessor(MessagingProcessor messagingProcessor, ServiceManager serviceManager,
+        ExecutorService executor) {
         super(messagingProcessor, serviceManager);
         this.executor = executor;
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/MessagingProcessor.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.rocketmq.proxy.common.Address;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
+import org.apache.rocketmq.proxy.service.metadata.MetadataService;
 import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
 import org.apache.rocketmq.proxy.service.route.ProxyTopicRouteData;
 import org.apache.rocketmq.proxy.service.transaction.TransactionId;
@@ -228,4 +229,6 @@ void addTransactionSubscription(
     );
 
     ProxyRelayService getProxyOutService();
+
+    MetadataService getMetadataService();
 }

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/client/ClientActivityTest.java
Patch:
@@ -89,7 +89,7 @@ public class ClientActivityTest extends BaseActivityTest {
     @Before
     public void before() throws Throwable {
         super.before();
-        this.clientActivity = new ClientActivity(this.messagingProcessor, this.grpcClientSettingsManager);
+        this.clientActivity = new ClientActivity(this.messagingProcessor, this.grpcClientSettingsManager, grpcChannelManager);
     }
 
     protected TelemetryCommand sendProducerTelemetry(Context context) throws Throwable {

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/AckMessageActivityTest.java
Patch:
@@ -45,7 +45,7 @@ public class AckMessageActivityTest extends BaseActivityTest {
     @Before
     public void before() throws Throwable {
         super.before();
-        this.ackMessageActivity = new AckMessageActivity(this.messagingProcessor, this.grpcClientSettingsManager);
+        this.ackMessageActivity = new AckMessageActivity(messagingProcessor, receiptHandleProcessor, grpcClientSettingsManager, grpcChannelManager);
     }
 
     @Test

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ChangeInvisibleDurationActivityTest.java
Patch:
@@ -45,7 +45,8 @@ public class ChangeInvisibleDurationActivityTest extends BaseActivityTest {
     @Before
     public void before() throws Throwable {
         super.before();
-        this.changeInvisibleDurationActivity = new ChangeInvisibleDurationActivity(this.messagingProcessor, this.grpcClientSettingsManager);
+        this.changeInvisibleDurationActivity = new ChangeInvisibleDurationActivity(messagingProcessor, receiptHandleProcessor,
+            grpcClientSettingsManager, grpcChannelManager);
     }
 
     @Test

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivityTest.java
Patch:
@@ -69,7 +69,8 @@ public class ReceiveMessageActivityTest extends BaseActivityTest {
     @Before
     public void before() throws Throwable {
         super.before();
-        this.receiveMessageActivity = new ReceiveMessageActivity(this.messagingProcessor, this.grpcClientSettingsManager);
+        this.receiveMessageActivity = new ReceiveMessageActivity(messagingProcessor, receiptHandleProcessor,
+            grpcClientSettingsManager, grpcChannelManager);
     }
 
     @Test
@@ -117,8 +118,7 @@ public void testReceiveMessage() {
             any(),
             anyBoolean(),
             any(),
-            anyLong()
-        )).thenReturn(CompletableFuture.completedFuture(popResult));
+            anyLong())).thenReturn(CompletableFuture.completedFuture(popResult));
 
         this.receiveMessageActivity.receiveMessage(
             createContext(),

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/producer/ForwardMessageToDLQActivityTest.java
Patch:
@@ -41,7 +41,7 @@ public class ForwardMessageToDLQActivityTest extends BaseActivityTest {
     @Before
     public void before() throws Throwable {
         super.before();
-        this.forwardMessageToDLQActivity = new ForwardMessageToDLQActivity(this.messagingProcessor, this.grpcClientSettingsManager);
+        this.forwardMessageToDLQActivity = new ForwardMessageToDLQActivity(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);
     }
 
     @Test

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/producer/SendMessageActivityTest.java
Patch:
@@ -71,7 +71,7 @@ public class SendMessageActivityTest extends BaseActivityTest {
     @Before
     public void before() throws Throwable {
         super.before();
-        this.sendMessageActivity = new SendMessageActivity(this.messagingProcessor, this.grpcClientSettingsManager);
+        this.sendMessageActivity = new SendMessageActivity(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);
     }
 
     @Test

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivityTest.java
Patch:
@@ -77,7 +77,7 @@ public class RouteActivityTest extends BaseActivityTest {
     @Before
     public void before() throws Throwable {
         super.before();
-        this.routeActivity = new RouteActivity(this.messagingProcessor, this.grpcClientSettingsManager);
+        this.routeActivity = new RouteActivity(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);
     }
 
     @Test

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/transaction/EndTransactionActivityTest.java
Patch:
@@ -60,7 +60,7 @@ public EndTransactionActivityTest(TransactionResolution resolution, TransactionS
     @Before
     public void before() throws Throwable {
         super.before();
-        this.endTransactionActivity = new EndTransactionActivity(this.messagingProcessor, this.grpcClientSettingsManager);
+        this.endTransactionActivity = new EndTransactionActivity(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);
     }
 
     @Test

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/BaseProcessorTest.java
Patch:
@@ -83,6 +83,7 @@ public void before() throws Throwable {
         when(serviceManager.getTransactionService()).thenReturn(transactionService);
         when(serviceManager.getProxyRelayService()).thenReturn(proxyRelayService);
         when(serviceManager.getMetadataService()).thenReturn(metadataService);
+        when(messagingProcessor.getMetadataService()).thenReturn(metadataService);
     }
 
     protected static ProxyContext createContext() {

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ConsumerProcessorTest.java
Patch:
@@ -64,7 +64,8 @@ public class ConsumerProcessorTest extends BaseProcessorTest {
     @Before
     public void before() throws Throwable {
         super.before();
-        this.consumerProcessor = new ConsumerProcessor(this.messagingProcessor, this.serviceManager, Executors.newCachedThreadPool());
+        ReceiptHandleProcessor receiptHandleProcessor = new ReceiptHandleProcessor(messagingProcessor);
+        this.consumerProcessor = new ConsumerProcessor(messagingProcessor, serviceManager, Executors.newCachedThreadPool());
     }
 
     @Test

File: broker/src/test/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessorTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
-
+import org.apache.rocketmq.common.protocol.header.SendMessageRequestHeader;
 import org.apache.rocketmq.common.protocol.header.SendMessageRequestHeaderV2;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.junit.Assert;
@@ -65,7 +65,7 @@ private HashMap<String, String> buildExtFields(List<Field> fields) {
 
     private void check(RemotingCommand command, List<Field> fields) throws Exception {
         SendMessageRequestHeaderV2 o1 = (SendMessageRequestHeaderV2) command.decodeCommandCustomHeader(SendMessageRequestHeaderV2.class);
-        SendMessageRequestHeaderV2 o2 = AbstractSendMessageProcessor.decodeSendMessageHeaderV2(command);
+        SendMessageRequestHeaderV2 o2 = SendMessageRequestHeader.decodeSendMessageHeaderV2(command);
         for (Field f : fields) {
             Object value1 = f.get(o1);
             Object value2 = f.get(o2);

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ProxyExceptionCode.java
Patch:
@@ -24,4 +24,5 @@ public enum ProxyExceptionCode {
     ILLEGAL_MESSAGE,
     INTERNAL_SERVER_ERROR,
     MESSAGE_PROPERTY_DOES_NOT_MATCH_MESSAGE_TYPE,
+    NOT_IMPLEMENTED,
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/DefaultMessagingProcessor.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
-import org.apache.rocketmq.common.message.MessageExt;
+import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
@@ -126,8 +126,8 @@ public ProxyTopicRouteData getTopicRouteDataForProxy(ProxyContext ctx, List<Addr
 
     @Override
     public CompletableFuture<List<SendResult>> sendMessage(ProxyContext ctx, QueueSelector queueSelector,
-        String producerGroup, List<MessageExt> msg, long timeoutMillis) {
-        return this.producerProcessor.sendMessage(ctx, queueSelector, producerGroup, msg, timeoutMillis);
+        String producerGroup, int sysFlag, List<Message> msg, long timeoutMillis) {
+        return this.producerProcessor.sendMessage(ctx, queueSelector, producerGroup, sysFlag, msg, timeoutMillis);
     }
 
     @Override

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/message/ClusterMessageService.java
Patch:
@@ -53,7 +53,7 @@ public ClusterMessageService(TopicRouteService topicRouteService, MQClientAPIFac
 
     @Override
     public CompletableFuture<List<SendResult>> sendMessage(ProxyContext ctx, SelectableMessageQueue messageQueue,
-        List<? extends Message> msgList, SendMessageRequestHeader requestHeader, long timeoutMillis) {
+        List<Message> msgList, SendMessageRequestHeader requestHeader, long timeoutMillis) {
         CompletableFuture<List<SendResult>> future;
         if (msgList.size() == 1) {
             future = this.mqClientAPIFactory.getClient().sendMessageAsync(

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/message/LocalMessageService.java
Patch:
@@ -77,7 +77,7 @@ public LocalMessageService(BrokerController brokerController, ChannelManager cha
 
     @Override
     public CompletableFuture<List<SendResult>> sendMessage(ProxyContext ctx, SelectableMessageQueue messageQueue,
-        List<? extends Message> msgList, SendMessageRequestHeader requestHeader, long timeoutMillis) {
+        List<Message> msgList, SendMessageRequestHeader requestHeader, long timeoutMillis) {
         byte[] body;
         String messageId;
         if (msgList.size() > 1) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/message/MessageService.java
Patch:
@@ -41,7 +41,7 @@ public interface MessageService {
     CompletableFuture<List<SendResult>> sendMessage(
         ProxyContext ctx,
         SelectableMessageQueue messageQueue,
-        List<? extends Message> msgList,
+        List<Message> msgList,
         SendMessageRequestHeader requestHeader,
         long timeoutMillis
     );

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/mqclient/MQClientAPIFactory.java
Patch:
@@ -89,6 +89,8 @@ public void shutdown() throws Exception {
     protected MQClientAPIExt createAndStart(String instanceName) {
         ClientConfig clientConfig = new ClientConfig();
         clientConfig.setInstanceName(instanceName);
+        clientConfig.setDecodeReadBody(true);
+        clientConfig.setDecodeDecompressBody(false);
 
         NettyClientConfig nettyClientConfig = new NettyClientConfig();
         nettyClientConfig.setDisableCallbackExecutor(true);

File: common/src/main/java/org/apache/rocketmq/common/constant/LoggerName.java
Patch:
@@ -45,4 +45,5 @@ public class LoggerName {
     public static final String FAILOVER_LOGGER_NAME = "RocketmqFailover";
     public static final String STDOUT_LOGGER_NAME = "STDOUT";
     public static final String PROXY_LOGGER_NAME = "RocketmqProxy";
+    public static final String PROXY_WATER_MARK_LOGGER_NAME = "RocketmqProxyWatermark";
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/utils/FilterUtils.java
Patch:
@@ -24,7 +24,7 @@ public class FilterUtils {
      * Whether the message's tag matches consumerGroup's SubscriptionData
      *
      * @param tagsSet, tagSet in {@link SubscriptionData}, tagSet empty means SubscriptionData.SUB_ALL(*)
-     * @param tags, message's tags, null means not tag attached to the message.
+     * @param tags,    message's tags, null means not tag attached to the message.
      */
     public static boolean isTagMatched(Set<String> tagsSet, String tags) {
         if (tagsSet.isEmpty()) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/utils/FutureUtils.java
Patch:
@@ -22,7 +22,8 @@
 
 public class FutureUtils {
 
-    public static <T> CompletableFuture<T> appendNextFuture(CompletableFuture<T> future, CompletableFuture<T> nextFuture, ExecutorService executor) {
+    public static <T> CompletableFuture<T> appendNextFuture(CompletableFuture<T> future,
+        CompletableFuture<T> nextFuture, ExecutorService executor) {
         future.whenCompleteAsync((t, throwable) -> {
             if (throwable != null) {
                 nextFuture.completeExceptionally(throwable);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/InterceptorConstants.java
Patch:
@@ -35,7 +35,6 @@ public class InterceptorConstants {
     public static final Metadata.Key<String> LOCAL_ADDRESS
         = Metadata.Key.of("rpc-local-address", Metadata.ASCII_STRING_MARSHALLER);
 
-
     public static final Metadata.Key<String> AUTHORIZATION
         = Metadata.Key.of("authorization", Metadata.ASCII_STRING_MARSHALLER);
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/DefaultGrpcMessingActivity.java
Patch:
@@ -103,7 +103,8 @@ public CompletableFuture<QueryAssignmentResponse> queryAssignment(Context ctx, Q
     }
 
     @Override
-    public void receiveMessage(Context ctx, ReceiveMessageRequest request, StreamObserver<ReceiveMessageResponse> responseObserver) {
+    public void receiveMessage(Context ctx, ReceiveMessageRequest request,
+        StreamObserver<ReceiveMessageResponse> responseObserver) {
         this.receiveMessageActivity.receiveMessage(ctx, request, responseObserver);
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/channel/GrpcChannelManager.java
Patch:
@@ -54,7 +54,7 @@ public GrpcChannelManager(ProxyRelayService proxyRelayService) {
     protected void init() {
         this.scheduledExecutorService.scheduleAtFixedRate(
             this::scanExpireResultFuture,
-            10,  10, TimeUnit.SECONDS
+            10, 10, TimeUnit.SECONDS
         );
     }
 
@@ -77,7 +77,7 @@ public GrpcClientChannel getChannel(String group, String clientId) {
         return clientIdChannelMap.get(clientId);
     }
 
-    public GrpcClientChannel removeChannel(String group, String clientId)  {
+    public GrpcClientChannel removeChannel(String group, String clientId) {
         AtomicReference<GrpcClientChannel> channelRef = new AtomicReference<>();
         this.groupClientIdChannelMap.computeIfPresent(group, (groupKey, clientIdMap) -> {
             channelRef.set(clientIdMap.remove(clientId));

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/channel/GrpcClientChannel.java
Patch:
@@ -50,7 +50,8 @@ public class GrpcClientChannel extends ProxyChannel {
     private final String group;
     private final String clientId;
 
-    public GrpcClientChannel(ProxyRelayService proxyRelayService, GrpcChannelManager grpcChannelManager, Context ctx, String group, String clientId) {
+    public GrpcClientChannel(ProxyRelayService proxyRelayService, GrpcChannelManager grpcChannelManager, Context ctx,
+        String group, String clientId) {
         super(proxyRelayService, null, new GrpcChannelId(group, clientId),
             InterceptorConstants.METADATA.get(ctx).get(InterceptorConstants.REMOTE_ADDRESS),
             InterceptorConstants.METADATA.get(ctx).get(InterceptorConstants.LOCAL_ADDRESS));

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/ResponseBuilder.java
Patch:
@@ -62,7 +62,7 @@ public static Status buildStatus(int remotingResponseCode, String remark) {
             .setMessage(message)
             .build();
     }
-    
+
     public static Code buildCode(int remotingResponseCode) {
         switch (remotingResponseCode) {
             case ResponseCode.SUCCESS:

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/PopMessageResultFilterImpl.java
Patch:
@@ -32,7 +32,8 @@ public PopMessageResultFilterImpl(GrpcClientSettingsManager manager) {
     }
 
     @Override
-    public FilterResult filterMessage(ProxyContext ctx, String consumerGroup, SubscriptionData subscriptionData, MessageExt messageExt) {
+    public FilterResult filterMessage(ProxyContext ctx, String consumerGroup, SubscriptionData subscriptionData,
+        MessageExt messageExt) {
         int maxAttempts = grpcClientSettingsManager.getClientSettings(ctx).getBackoffPolicy().getMaxAttempts();
         if (!FilterUtils.isTagMatched(subscriptionData.getTagsSet(), messageExt.getTags())) {
             return FilterResult.NO_MATCH;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java
Patch:
@@ -111,7 +111,8 @@ public void receiveMessage(Context ctx, ReceiveMessageRequest request,
         }
     }
 
-    protected ReceiveMessageResponseStreamWriter createWriter(ProxyContext ctx, StreamObserver<ReceiveMessageResponse> responseObserver) {
+    protected ReceiveMessageResponseStreamWriter createWriter(ProxyContext ctx,
+        StreamObserver<ReceiveMessageResponse> responseObserver) {
         return new ReceiveMessageResponseStreamWriter(
             this.messagingProcessor,
             responseObserver

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/MessagingProcessor.java
Patch:
@@ -57,7 +57,7 @@ ProxyTopicRouteData getTopicRouteDataForProxy(
         ProxyContext ctx,
         List<Address> requestHostAndPortList,
         String topicName
-    )  throws Exception;
+    ) throws Exception;
 
     default CompletableFuture<List<SendResult>> sendMessage(
         ProxyContext ctx,

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/validator/TopicMessageTypeValidator.java
Patch:
@@ -22,8 +22,9 @@
 public interface TopicMessageTypeValidator {
     /**
      * Will throw {@link org.apache.rocketmq.proxy.common.ProxyException} if validate failed.
+     *
      * @param topicMessageType Target topic
-     * @param messageType Message's type
+     * @param messageType      Message's type
      */
     void validate(TopicMessageType topicMessageType, TopicMessageType messageType);
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/ClusterServiceManager.java
Patch:
@@ -37,10 +37,10 @@
 import org.apache.rocketmq.proxy.service.metadata.ClusterMetadataService;
 import org.apache.rocketmq.proxy.service.metadata.MetadataService;
 import org.apache.rocketmq.proxy.service.mqclient.DoNothingClientRemotingProcessor;
+import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.proxy.service.mqclient.ProxyClientRemotingProcessor;
 import org.apache.rocketmq.proxy.service.relay.ClusterProxyRelayService;
 import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
-import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
 import org.apache.rocketmq.proxy.service.route.ClusterTopicRouteService;
 import org.apache.rocketmq.proxy.service.route.TopicRouteService;
 import org.apache.rocketmq.proxy.service.transaction.ClusterTransactionService;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/ServiceManager.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.rocketmq.broker.client.ProducerManager;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 import org.apache.rocketmq.proxy.service.message.MessageService;
-import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
 import org.apache.rocketmq.proxy.service.metadata.MetadataService;
+import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
 import org.apache.rocketmq.proxy.service.route.TopicRouteService;
 import org.apache.rocketmq.proxy.service.transaction.TransactionService;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/mqclient/MQClientAPIExt.java
Patch:
@@ -431,7 +431,8 @@ public CompletableFuture<Long> getMaxOffsetAsync(String brokerAddr, String topic
         return future;
     }
 
-    public CompletableFuture<Long> searchOffsetAsync(String brokerAddr, String topic, int queueId , long timestamp, long timeoutMillis) {
+    public CompletableFuture<Long> searchOffsetAsync(String brokerAddr, String topic, int queueId, long timestamp,
+        long timeoutMillis) {
         SearchOffsetRequestHeader requestHeader = new SearchOffsetRequestHeader();
         requestHeader.setTopic(topic);
         requestHeader.setQueueId(queueId);

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/mqclient/ProxyClientRemotingProcessor.java
Patch:
@@ -46,7 +46,8 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand
     }
 
     @Override
-    public RemotingCommand checkTransactionState(ChannelHandlerContext ctx, RemotingCommand request) throws RemotingCommandException {
+    public RemotingCommand checkTransactionState(ChannelHandlerContext ctx,
+        RemotingCommand request) throws RemotingCommandException {
         final ByteBuffer byteBuffer = ByteBuffer.wrap(request.getBody());
         final MessageExt messageExt = MessageDecoder.decode(byteBuffer, true, false, false);
         if (messageExt != null) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/relay/ClusterProxyRelayService.java
Patch:
@@ -36,7 +36,8 @@ public CompletableFuture<ProxyRelayResult<ConsumerRunningInfo>> processGetConsum
         return null;
     }
 
-    @Override public CompletableFuture<ProxyRelayResult<ConsumeMessageDirectlyResult>> processConsumeMessageDirectly(
+    @Override
+    public CompletableFuture<ProxyRelayResult<ConsumeMessageDirectlyResult>> processConsumeMessageDirectly(
         ProxyContext context, RemotingCommand command,
         ConsumeMessageDirectlyResultRequestHeader header) {
         return null;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/LocalTopicRouteService.java
Patch:
@@ -56,7 +56,8 @@ public MessageQueueView getCurrentMessageQueueView(String topic) throws Exceptio
     }
 
     @Override
-    public ProxyTopicRouteData getTopicRouteForProxy(List<Address> requestHostAndPortList, String topicName) throws Exception {
+    public ProxyTopicRouteData getTopicRouteForProxy(List<Address> requestHostAndPortList,
+        String topicName) throws Exception {
         MessageQueueView messageQueueView = getAllMessageQueueView(topicName);
         TopicRouteData topicRouteData = messageQueueView.getTopicRouteData();
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/MessageQueueSelector.java
Patch:
@@ -193,7 +193,8 @@ public int hashCode() {
         return Objects.hash(queues, brokerActingQueues);
     }
 
-    @Override public String toString() {
+    @Override
+    public String toString() {
         return MoreObjects.toStringHelper(this)
             .add("queues", queues)
             .add("brokerActingQueues", brokerActingQueues)

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/MessageQueueView.java
Patch:
@@ -53,7 +53,8 @@ public MessageQueueSelector getWriteSelector() {
         return writeSelector;
     }
 
-    @Override public String toString() {
+    @Override
+    public String toString() {
         return MoreObjects.toStringHelper(this)
             .add("readSelector", readSelector)
             .add("writeSelector", writeSelector)

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/SelectableMessageQueue.java
Patch:
@@ -72,7 +72,8 @@ public String getBrokerAddr() {
         return brokerAddr;
     }
 
-    @Override public String toString() {
+    @Override
+    public String toString() {
         return MoreObjects.toStringHelper(this)
             .add("messageQueue", messageQueue)
             .add("brokerAddr", brokerAddr)

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/ClusterTransactionService.java
Patch:
@@ -57,7 +57,8 @@ public class ClusterTransactionService implements StartAndShutdown, TransactionS
     private final Map<String /* group */, Set<ClusterData>/* cluster list */> groupClusterData = new ConcurrentHashMap<>();
     private TxHeartbeatServiceThread txHeartbeatServiceThread;
 
-    public ClusterTransactionService(TopicRouteService topicRouteService, ProducerManager producerManager, RPCHook rpcHook,
+    public ClusterTransactionService(TopicRouteService topicRouteService, ProducerManager producerManager,
+        RPCHook rpcHook,
         MQClientAPIFactory mqClientAPIFactory) {
         this.topicRouteService = topicRouteService;
         this.mqClientAPIFactory = mqClientAPIFactory;
@@ -186,7 +187,7 @@ protected void sendHeartBeatToCluster(String clusterName, List<HeartbeatData> he
 
     protected void sendHeartBeatToCluster(String clusterName, HeartbeatData heartbeatData) {
         try {
-            MessageQueueView messageQueue =  this.topicRouteService.getAllMessageQueueView(clusterName);
+            MessageQueueView messageQueue = this.topicRouteService.getAllMessageQueueView(clusterName);
             List<BrokerData> brokerDataList = messageQueue.getTopicRouteData().getBrokerDatas();
             if (brokerDataList == null) {
                 return;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/BaseActivityTest.java
Patch:
@@ -31,7 +31,6 @@
 import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
 import org.junit.Ignore;
 import org.junit.runner.RunWith;
-import org.mockito.Mock;
 import org.mockito.junit.MockitoJUnitRunner;
 
 import static org.mockito.Mockito.mock;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplicationTest.java
Patch:
@@ -48,7 +48,7 @@ public class GrpcMessagingApplicationTest extends InitConfigAndLoggerTest {
     GrpcMessagingApplication grpcMessagingApplication;
 
     private static final String TOPIC = "topic";
-    private static Endpoints GRPC_ENDPOINTS = Endpoints.newBuilder()
+    private static Endpoints grpcEndpoints = Endpoints.newBuilder()
         .setScheme(AddressScheme.IPv4)
         .addAddresses(Address.newBuilder().setHost("127.0.0.1").setPort(8080).build())
         .addAddresses(Address.newBuilder().setHost("127.0.0.2").setPort(8080).build())
@@ -64,7 +64,7 @@ public void setUp() throws Throwable {
     public void testQueryRoute() {
         CompletableFuture<QueryRouteResponse> future = new CompletableFuture<>();
         QueryRouteRequest request = QueryRouteRequest.newBuilder()
-            .setEndpoints(GRPC_ENDPOINTS)
+            .setEndpoints(grpcEndpoints)
             .setTopic(Resource.newBuilder().setName(TOPIC).build())
             .build();
         Mockito.when(grpcMessingActivity.queryRoute(Mockito.any(Context.class), Mockito.eq(request)))

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManagerTest.java
Patch:
@@ -67,7 +67,7 @@ public void testGetSubscriptionData() {
 
         subscriptionGroupConfig.setRetryMaxTimes(3);
         subscriptionGroupConfig.getGroupRetryPolicy().setType(GroupRetryPolicyType.CUSTOMIZED);
-        subscriptionGroupConfig.getGroupRetryPolicy().setCustomizedRetryPolicy(new CustomizedRetryPolicy(new long[]{1000}));
+        subscriptionGroupConfig.getGroupRetryPolicy().setCustomizedRetryPolicy(new CustomizedRetryPolicy(new long[] {1000}));
         settings = this.grpcClientSettingsManager.getClientSettings(context);
         assertEquals(RetryPolicy.newBuilder()
             .setMaxAttempts(3)

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/AckMessageActivityTest.java
Patch:
@@ -24,14 +24,13 @@
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.client.consumer.AckResult;
 import org.apache.rocketmq.client.consumer.AckStatus;
-import org.apache.rocketmq.common.protocol.header.ExtraInfoUtil;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
 import org.apache.rocketmq.proxy.grpc.v2.BaseActivityTest;
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.ArgumentMatchers.eq;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ChangeInvisibleDurationActivityTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.when;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivityTest.java
Patch:
@@ -42,7 +42,6 @@
 import org.apache.rocketmq.proxy.grpc.v2.BaseActivityTest;
 import org.apache.rocketmq.proxy.service.route.MessageQueueView;
 import org.apache.rocketmq.proxy.service.route.SelectableMessageQueue;
-import org.assertj.core.util.Lists;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/producer/ForwardMessageToDLQActivityTest.java
Patch:
@@ -29,7 +29,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.when;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/transaction/EndTransactionActivityTest.java
Patch:
@@ -91,7 +91,7 @@ public void testEndTransaction() throws Throwable {
 
     @Parameterized.Parameters
     public static Collection<Object[]> parameters() {
-        Object[][] p = new Object[][]{
+        Object[][] p = new Object[][] {
             {TransactionResolution.COMMIT, TransactionSource.SOURCE_CLIENT, TransactionStatus.COMMIT, false},
             {TransactionResolution.ROLLBACK, TransactionSource.SOURCE_SERVER_CHECK, TransactionStatus.ROLLBACK, true},
             {TransactionResolution.TRANSACTION_RESOLUTION_UNSPECIFIED, TransactionSource.SOURCE_SERVER_CHECK, TransactionStatus.UNKNOWN, true},

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ConsumerProcessorTest.java
Patch:
@@ -58,7 +58,7 @@ public class ConsumerProcessorTest extends BaseProcessorTest {
 
     private static final String CONSUMER_GROUP = "consumerGroup";
     private static final String TOPIC = "topic";
-    
+
     private ConsumerProcessor consumerProcessor;
 
     @Before

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ProducerProcessorTest.java
Patch:
@@ -77,7 +77,7 @@ public void testSendMessage() throws Throwable {
         sendResult.setMsgId(msgId);
         ArgumentCaptor<SendMessageRequestHeader> requestHeaderArgumentCaptor = ArgumentCaptor.forClass(SendMessageRequestHeader.class);
         when(this.messageService.sendMessage(any(), any(), any(), requestHeaderArgumentCaptor.capture(), anyLong()))
-        .thenReturn(CompletableFuture.completedFuture(Lists.newArrayList(sendResult)));
+            .thenReturn(CompletableFuture.completedFuture(Lists.newArrayList(sendResult)));
 
         List<MessageExt> messageExtList = new ArrayList<>();
         MessageExt messageExt = createMessageExt(TOPIC, "tag", 0, 0);

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/metadata/ClusterMetadataServiceTest.java
Patch:
@@ -18,14 +18,11 @@
 package org.apache.rocketmq.proxy.service.metadata;
 
 import java.util.HashMap;
-import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.attribute.TopicMessageType;
-import org.apache.rocketmq.common.protocol.ResponseCode;
 import org.apache.rocketmq.common.statictopic.TopicConfigAndQueueMapping;
 import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.service.BaseServiceTest;
-import org.apache.rocketmq.proxy.service.route.MessageQueueView;
 import org.junit.Before;
 import org.junit.Test;
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/mqclient/MQClientAPIExtTest.java
Patch:
@@ -313,7 +313,6 @@ public void testGetMaxOffsetAsync() throws Exception {
         assertEquals(offset, mqClientAPI.getMaxOffsetAsync(BROKER_ADDR, TOPIC, 0, TIMEOUT).get().longValue());
     }
 
-
     @Test
     public void testSearchOffsetAsync() throws Exception {
         long offset = ThreadLocalRandom.current().nextLong();

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/route/ClusterTopicRouteServiceTest.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.rocketmq.proxy.service.route;
 
 import com.google.common.net.HostAndPort;
-import java.util.ArrayList;
 import java.util.List;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.MixAll;
@@ -30,7 +29,9 @@
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.catchThrowableOfType;
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.when;

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/transaction/ClusterTransactionServiceTest.java
Patch:
@@ -30,10 +30,8 @@
 import org.assertj.core.util.Lists;
 import org.junit.Before;
 import org.junit.Test;
-import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
-import org.mockito.junit.MockitoJUnitRunner;
 
 import static org.awaitility.Awaitility.await;
 import static org.junit.Assert.assertEquals;
@@ -43,7 +41,6 @@
 import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.when;
 
-
 public class ClusterTransactionServiceTest extends BaseServiceTest {
 
     @Mock

File: acl/src/main/java/org/apache/rocketmq/acl/common/AuthorizationHeader.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.rocketmq.acl.common;
 
 import com.google.common.base.MoreObjects;
-import java.util.Arrays;
 import org.apache.commons.codec.DecoderException;
 import org.apache.commons.codec.binary.Base64;
 import org.apache.commons.codec.binary.Hex;

File: acl/src/main/java/org/apache/rocketmq/acl/AccessValidator.java
Patch:
@@ -20,7 +20,7 @@
 import com.google.protobuf.GeneratedMessageV3;
 import java.util.List;
 import java.util.Map;
-import org.apache.rocketmq.acl.common.MetadataHeader;
+import org.apache.rocketmq.acl.common.AuthenticationHeader;
 import org.apache.rocketmq.common.AclConfig;
 import org.apache.rocketmq.common.DataVersion;
 import org.apache.rocketmq.common.PlainAccessConfig;
@@ -43,7 +43,7 @@ public interface AccessValidator {
      * @param header
      * @return Plain access resource
      */
-    AccessResource parse(GeneratedMessageV3 messageV3, MetadataHeader header);
+    AccessResource parse(GeneratedMessageV3 messageV3, AuthenticationHeader header);
 
     /**
      * Validate the access resource.

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessResource.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.rocketmq.acl.common.AclException;
 import org.apache.rocketmq.acl.common.AclUtils;
 import org.apache.rocketmq.acl.common.AuthorizationHeader;
-import org.apache.rocketmq.acl.common.MetadataHeader;
+import org.apache.rocketmq.acl.common.AuthenticationHeader;
 import org.apache.rocketmq.acl.common.Permission;
 import org.apache.rocketmq.acl.common.SessionCredentials;
 import org.apache.rocketmq.common.MixAll;
@@ -172,7 +172,7 @@ public static PlainAccessResource parse(RemotingCommand request, String remoteAd
         return accessResource;
     }
 
-    public static PlainAccessResource parse(GeneratedMessageV3 messageV3, MetadataHeader header) {
+    public static PlainAccessResource parse(GeneratedMessageV3 messageV3, AuthenticationHeader header) {
         PlainAccessResource accessResource = new PlainAccessResource();
         String remoteAddress = header.getRemoteAddress();
         if (remoteAddress != null && remoteAddress.contains(":")) {

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessValidator.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Map;
 import org.apache.rocketmq.acl.AccessResource;
 import org.apache.rocketmq.acl.AccessValidator;
-import org.apache.rocketmq.acl.common.MetadataHeader;
+import org.apache.rocketmq.acl.common.AuthenticationHeader;
 import org.apache.rocketmq.common.AclConfig;
 import org.apache.rocketmq.common.DataVersion;
 import org.apache.rocketmq.common.PlainAccessConfig;
@@ -40,7 +40,7 @@ public AccessResource parse(RemotingCommand request, String remoteAddr) {
         return PlainAccessResource.parse(request, remoteAddr);
     }
 
-    @Override public AccessResource parse(GeneratedMessageV3 messageV3, MetadataHeader header) {
+    @Override public AccessResource parse(GeneratedMessageV3 messageV3, AuthenticationHeader header) {
         return PlainAccessResource.parse(messageV3, header);
     }
 

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/ClusterGrpcIT.java
Patch:
@@ -29,10 +29,13 @@
 import org.apache.rocketmq.test.util.MQAdminTestUtils;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.FixMethodOrder;
 import org.junit.Test;
+import org.junit.runners.MethodSorters;
 
 import static org.awaitility.Awaitility.await;
 
+@FixMethodOrder(value = MethodSorters.NAME_ASCENDING)
 public class ClusterGrpcIT extends GrpcBaseIT {
 
     private MessagingProcessor messagingProcessor;

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/LocalGrpcIT.java
Patch:
@@ -23,11 +23,13 @@
 import org.apache.rocketmq.proxy.grpc.v2.GrpcMessagingApplication;
 import org.apache.rocketmq.proxy.processor.DefaultMessagingProcessor;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
-import org.apache.rocketmq.proxy.service.ServiceManager;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.FixMethodOrder;
 import org.junit.Test;
+import org.junit.runners.MethodSorters;
 
+@FixMethodOrder(value = MethodSorters.NAME_ASCENDING)
 public class LocalGrpcIT extends GrpcBaseIT {
 
     private MessagingProcessor messagingProcessor;

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseIT.java
Patch:
@@ -262,7 +262,7 @@ public void onNext(TelemetryCommand value) {
             SendMessageResponse sendResponse = blockingStub.sendMessage(buildTransactionSendMessageRequest(topic, messageId));
             assertSendMessage(sendResponse, messageId);
 
-            await().atMost(java.time.Duration.ofSeconds(90)).until(() -> {
+            await().atMost(java.time.Duration.ofMinutes(2)).until(() -> {
                 if (telemetryCommandRef.get() == null) {
                     return false;
                 }

File: test/src/test/java/org/apache/rocketmq/test/base/IntegrationTestBase.java
Patch:
@@ -52,7 +52,7 @@ public class IntegrationTestBase {
     protected static final List<File> TMPE_FILES = new ArrayList<>();
     protected static final List<BrokerController> BROKER_CONTROLLERS = new ArrayList<>();
     protected static final List<NamesrvController> NAMESRV_CONTROLLERS = new ArrayList<>();
-    protected static int topicCreateTime = (int) TimeUnit.SECONDS.toSeconds(60);
+    protected static int topicCreateTime = (int) TimeUnit.SECONDS.toSeconds(30);
     public static volatile int COMMIT_LOG_SIZE = 1024 * 1024 * 100;
     protected static final int INDEX_NUM = 1000;
 

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/ClusterGrpcIT.java
Patch:
@@ -41,7 +41,6 @@ public class ClusterGrpcIT extends GrpcBaseIT {
     @Before
     public void setUp() throws Exception {
         super.setUp();
-        ConfigurationManager.getProxyConfig().setEnableTopicMessageTypeCheck(false);
         ConfigurationManager.getProxyConfig().setTransactionHeartbeatPeriodSecond(3);
         messagingProcessor = DefaultMessagingProcessor.createForClusterMode();
         messagingProcessor.start();

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/LocalGrpcIT.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.rocketmq.proxy.grpc.v2.GrpcMessagingApplication;
 import org.apache.rocketmq.proxy.processor.DefaultMessagingProcessor;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
+import org.apache.rocketmq.proxy.service.ServiceManager;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -35,7 +36,6 @@ public class LocalGrpcIT extends GrpcBaseIT {
     @Before
     public void setUp() throws Exception {
         super.setUp();
-        ConfigurationManager.getProxyConfig().setEnableTopicMessageTypeCheck(false);
         messagingProcessor = DefaultMessagingProcessor.createForClusterMode();
         messagingProcessor.start();
         grpcMessagingApplication = GrpcMessagingApplication.create(messagingProcessor);

File: test/src/test/java/org/apache/rocketmq/test/base/IntegrationTestBase.java
Patch:
@@ -52,7 +52,7 @@ public class IntegrationTestBase {
     protected static final List<File> TMPE_FILES = new ArrayList<>();
     protected static final List<BrokerController> BROKER_CONTROLLERS = new ArrayList<>();
     protected static final List<NamesrvController> NAMESRV_CONTROLLERS = new ArrayList<>();
-    protected static int topicCreateTime = (int) TimeUnit.SECONDS.toSeconds(30);
+    protected static int topicCreateTime = (int) TimeUnit.SECONDS.toSeconds(60);
     public static volatile int COMMIT_LOG_SIZE = 1024 * 1024 * 100;
     protected static final int INDEX_NUM = 1000;
 

File: test/src/test/java/org/apache/rocketmq/test/base/dledger/DLedgerProduceAndConsumeIT.java
Patch:
@@ -75,7 +75,7 @@ public void testProduceAndConsume() throws Exception {
         BrokerConfig brokerConfig = buildBrokerConfig(cluster, brokerName);
         MessageStoreConfig storeConfig = buildStoreConfig(brokerName, peers, selfId);
         BrokerController brokerController = IntegrationTestBase.createAndStartBroker(storeConfig, brokerConfig);
-        Thread.sleep(3000);
+        BaseConf.waitBrokerRegistered(BaseConf.nsAddr, brokerConfig.getBrokerName(), 1);
 
         Assert.assertEquals(BrokerRole.SYNC_MASTER, storeConfig.getBrokerRole());
 

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/ClusterGrpcIT.java
Patch:
@@ -41,6 +41,7 @@ public class ClusterGrpcIT extends GrpcBaseIT {
     @Before
     public void setUp() throws Exception {
         super.setUp();
+        ConfigurationManager.getProxyConfig().setEnableTopicMessageTypeCheck(false);
         ConfigurationManager.getProxyConfig().setTransactionHeartbeatPeriodSecond(3);
         messagingProcessor = DefaultMessagingProcessor.createForClusterMode();
         messagingProcessor.start();

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/LocalGrpcIT.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.rocketmq.proxy.grpc.v2.GrpcMessagingApplication;
 import org.apache.rocketmq.proxy.processor.DefaultMessagingProcessor;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
-import org.apache.rocketmq.proxy.service.ServiceManager;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -36,6 +35,7 @@ public class LocalGrpcIT extends GrpcBaseIT {
     @Before
     public void setUp() throws Exception {
         super.setUp();
+        ConfigurationManager.getProxyConfig().setEnableTopicMessageTypeCheck(false);
         messagingProcessor = DefaultMessagingProcessor.createForClusterMode();
         messagingProcessor.start();
         grpcMessagingApplication = GrpcMessagingApplication.create(messagingProcessor);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/ResponseBuilder.java
Patch:
@@ -42,7 +42,7 @@ public static Status buildStatus(Throwable t) {
         }
 
         log.error("internal server error", t);
-        return ResponseBuilder.buildStatus(Code.INTERNAL_SERVER_ERROR, "internal error");
+        return ResponseBuilder.buildStatus(Code.INTERNAL_SERVER_ERROR, ExceptionUtils.getErrorDetailMessage(t));
     }
 
     public static Status buildStatus(Code code, String message) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/relay/LocalProxyRelayService.java
Patch:
@@ -52,9 +52,7 @@ public CompletableFuture<ProxyRelayResult<ConsumerRunningInfo>> processGetConsum
                 remotingCommand.setRemark(proxyOutResult.getRemark());
                 if (proxyOutResult.getCode() == ResponseCode.SUCCESS && proxyOutResult.getResult() != null) {
                     ConsumerRunningInfo consumerRunningInfo = proxyOutResult.getResult();
-                    ConsumerRunningInfo runningInfo = new ConsumerRunningInfo();
-                    runningInfo.setJstack(consumerRunningInfo.getJstack());
-                    remotingCommand.setBody(runningInfo.encode());
+                    remotingCommand.setBody(consumerRunningInfo.encode());
                 }
                 SimpleChannel simpleChannel = new SimpleChannel(context.getVal(ContextVariable.REMOTE_ADDRESS), context.getVal(ContextVariable.LOCAL_ADDRESS));
                 nettyRemotingAbstract.processResponseCommand(simpleChannel.getChannelHandlerContext(), remotingCommand);

File: common/src/main/java/org/apache/rocketmq/common/TopicAttributes.java
Patch:
@@ -42,5 +42,6 @@ public class TopicAttributes {
     static {
         ALL = new HashMap<>();
         ALL.put(QUEUE_TYPE_ATTRIBUTE.getName(), QUEUE_TYPE_ATTRIBUTE);
+        ALL.put(TOPIC_MESSAGE_TYPE_ATTRIBUTE.getName(), TOPIC_MESSAGE_TYPE_ATTRIBUTE);
     }
 }

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseIT.java
Patch:
@@ -91,6 +91,7 @@
 import org.apache.rocketmq.client.consumer.PullResult;
 import org.apache.rocketmq.client.consumer.PullStatus;
 import org.apache.rocketmq.common.MixAll;
+import org.apache.rocketmq.common.attribute.TopicMessageType;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.grpc.interceptor.ContextInterceptor;
@@ -209,7 +210,7 @@ protected Channel createChannel(int port) throws SSLException {
     }
 
     public void testTransactionCheckThenCommit() {
-        String topic = initTopicOnSampleTopicBroker(broker1Name);
+        String topic = initTopicOnSampleTopicBroker(broker1Name, TopicMessageType.TRANSACTION);
         String group = MQRandomUtils.getRandomConsumerGroup();
 
         AtomicReference<TelemetryCommand> telemetryCommandRef = new AtomicReference<>(null);

File: proxy/src/test/java/org/apache/rocketmq/proxy/service/transaction/ClusterTransactionServiceTest.java
Patch:
@@ -126,12 +126,10 @@ public void testScanProducerHeartBeat() throws Exception {
 
         assertEquals(Lists.newArrayList(BROKER_ADDR, BROKER_ADDR), brokerAddrArgumentCaptor.getAllValues());
         List<HeartbeatData> heartbeatDataList = heartbeatDataArgumentCaptor.getAllValues();
-        assertEquals(2, heartbeatDataList.get(0).getProducerDataSet().size());
         for (ProducerData producerData : heartbeatDataList.get(0).getProducerDataSet()) {
             groupSet.remove(producerData.getGroupName());
         }
 
-        assertEquals(1, heartbeatDataList.get(1).getProducerDataSet().size());
         for (ProducerData producerData : heartbeatDataList.get(1).getProducerDataSet()) {
             groupSet.remove(producerData.getGroupName());
         }

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ContextVariable.java
Patch:
@@ -20,4 +20,6 @@
 public class ContextVariable {
     public final static String REMOTE_ADDRESS = "remote-address";
     public final static String LOCAL_ADDRESS = "local-address";
+    public static final String CLIENT_ID = "client-id";
+    public static final String LANGUAGE = "language";
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/AbstractMessingActivity.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.rocketmq.proxy.grpc.v2;
 
 import io.grpc.Context;
+import org.apache.rocketmq.proxy.common.ContextVariable;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
@@ -36,7 +37,7 @@ public AbstractMessingActivity(MessagingProcessor messagingProcessor,
 
     protected ProxyContext createContext(Context ctx) {
         return ProxyContext.create()
-            .withVal(GrpcContextConstants.CLIENT_ID, InterceptorConstants.METADATA.get(ctx).get(InterceptorConstants.CLIENT_ID))
-            .withVal(GrpcContextConstants.LANGUAGE, LanguageCode.valueOf(InterceptorConstants.METADATA.get(ctx).get(InterceptorConstants.LANGUAGE)));
+            .withVal(ContextVariable.CLIENT_ID, InterceptorConstants.METADATA.get(ctx).get(InterceptorConstants.CLIENT_ID))
+            .withVal(ContextVariable.LANGUAGE, LanguageCode.valueOf(InterceptorConstants.METADATA.get(ctx).get(InterceptorConstants.LANGUAGE)));
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManager.java
Patch:
@@ -35,9 +35,9 @@
 import org.apache.rocketmq.common.subscription.GroupRetryPolicy;
 import org.apache.rocketmq.common.subscription.GroupRetryPolicyType;
 import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
+import org.apache.rocketmq.proxy.common.ContextVariable;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
-import org.apache.rocketmq.proxy.grpc.v2.GrpcContextConstants;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
 
 public class GrpcClientSettingsManager {
@@ -73,7 +73,7 @@ public GrpcClientSettingsManager(MessagingProcessor messagingProcessor) {
     }
 
     public Settings getClientSettings(ProxyContext ctx) {
-        String clientId = ctx.getVal(GrpcContextConstants.CLIENT_ID);
+        String clientId = ctx.getVal(ContextVariable.CLIENT_ID);
         Settings settings = CLIENT_SETTINGS_MAP.get(clientId);
         if (settings == null) {
             return null;
@@ -149,7 +149,7 @@ public void removeClientSettings(String clientId) {
     }
 
     public Settings removeAndGetClientSettings(ProxyContext ctx) {
-        String clientId = ctx.getVal(GrpcContextConstants.CLIENT_ID);
+        String clientId = ctx.getVal(ContextVariable.CLIENT_ID);
         Settings settings = CLIENT_SETTINGS_MAP.remove(clientId);
         if (settings == null) {
             return null;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManagerTest.java
Patch:
@@ -28,9 +28,9 @@
 import org.apache.rocketmq.common.subscription.ExponentialRetryPolicy;
 import org.apache.rocketmq.common.subscription.GroupRetryPolicyType;
 import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
+import org.apache.rocketmq.proxy.common.ContextVariable;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.grpc.v2.BaseActivityTest;
-import org.apache.rocketmq.proxy.grpc.v2.GrpcContextConstants;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -60,7 +60,7 @@ public void testGetSubscriptionData() {
                 .build())
             .build());
 
-        ProxyContext context = ProxyContext.create().withVal(GrpcContextConstants.CLIENT_ID, CLIENT_ID);
+        ProxyContext context = ProxyContext.create().withVal(ContextVariable.CLIENT_ID, CLIENT_ID);
 
         Settings settings = this.grpcClientSettingsManager.getClientSettings(context);
         assertEquals(settings.getBackoffPolicy(), GrpcClientSettingsManager.DEFAULT_CONSUMER_SETTINGS.getBackoffPolicy());

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ContextVariable.java
Patch:
@@ -20,5 +20,4 @@
 public class ContextVariable {
     public final static String REMOTE_ADDRESS = "remote-address";
     public final static String LOCAL_ADDRESS = "local-address";
-    public final static String MESSAGE_TYPE = "message-type";
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ProxyExceptionCode.java
Patch:
@@ -23,5 +23,5 @@ public enum ProxyExceptionCode {
     INVALID_RECEIPT_HANDLE,
     ILLEGAL_MESSAGE,
     INTERNAL_SERVER_ERROR,
-    TOPIC_MESSAGE_TYPE_NOT_MATCH,
+    MESSAGE_PROPERTY_DOES_NOT_MATCH_MESSAGE_TYPE,
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcProxyException.java
Patch:
@@ -36,6 +36,7 @@ public class GrpcProxyException extends RuntimeException {
         CODE_MAPPING.put(ProxyExceptionCode.FORBIDDEN, Code.FORBIDDEN);
         CODE_MAPPING.put(ProxyExceptionCode.ILLEGAL_MESSAGE, Code.ILLEGAL_MESSAGE);
         CODE_MAPPING.put(ProxyExceptionCode.INTERNAL_SERVER_ERROR, Code.INTERNAL_SERVER_ERROR);
+        CODE_MAPPING.put(ProxyExceptionCode.MESSAGE_PROPERTY_DOES_NOT_MATCH_MESSAGE_TYPE, Code.MESSAGE_PROPERTY_DOES_NOT_MATCH_MESSAGE_TYPE);
     }
 
     public GrpcProxyException(Code code, String message) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/ProducerProcessor.java
Patch:
@@ -33,7 +33,6 @@
 import org.apache.rocketmq.common.protocol.header.ConsumerSendMsgBackRequestHeader;
 import org.apache.rocketmq.common.protocol.header.SendMessageRequestHeader;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
-import org.apache.rocketmq.proxy.common.ContextVariable;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.ProxyException;
 import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
@@ -62,11 +61,12 @@ public CompletableFuture<List<SendResult>> sendMessage(ProxyContext ctx, QueueSe
         String producerGroup, List<MessageExt> messageExtList, long timeoutMillis) {
         CompletableFuture<List<SendResult>> future = new CompletableFuture<>();
         try {
-            String topic = messageExtList.get(0).getTopic();
+            MessageExt messageExt0 = messageExtList.get(0);
+            String topic = messageExt0.getTopic();
             if (ConfigurationManager.getProxyConfig().isEnableTopicMessageTypeCheck()) {
                 if (topicMessageTypeValidator != null) {
                     TopicMessageType topicMessageType = serviceManager.getMetadataService().getTopicMessageType(topic);
-                    TopicMessageType messageType = TopicMessageType.valueOf(ctx.getVal(ContextVariable.MESSAGE_TYPE));
+                    TopicMessageType messageType = parseFromMessageExt(messageExt0);
                     topicMessageTypeValidator.validate(topicMessageType, messageType);
                 }
             }

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/validator/DefaultTopicMessageTypeValidator.java
Patch:
@@ -25,7 +25,7 @@ public class DefaultTopicMessageTypeValidator implements TopicMessageTypeValidat
 
     public void validate(TopicMessageType topicMessageType, TopicMessageType messageType) {
         if (messageType.equals(TopicMessageType.UNSPECIFIED) || !messageType.equals(topicMessageType)) {
-            throw new ProxyException(ProxyExceptionCode.TOPIC_MESSAGE_TYPE_NOT_MATCH, messageType.name() + " " + topicMessageType.name());
+            throw new ProxyException(ProxyExceptionCode.MESSAGE_PROPERTY_DOES_NOT_MATCH_MESSAGE_TYPE, messageType.name() + " " + topicMessageType.name());
         }
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/client/ClientActivity.java
Patch:
@@ -153,7 +153,7 @@ public CompletableFuture<NotifyClientTerminationResponse> notifyClientTerminatio
             ProxyContext context = createContext(ctx);
             String clientId = context.getVal(GrpcContextConstants.CLIENT_ID);
             LanguageCode languageCode = context.getVal(GrpcContextConstants.LANGUAGE);
-            Settings clientSettings = grpcClientSettingsManager.removeClientSettings(clientId);
+            Settings clientSettings = grpcClientSettingsManager.removeAndGetClientSettings(context);
 
             switch (clientSettings.getClientType()) {
                 case PRODUCER:

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/client/ClientActivityTest.java
Patch:
@@ -49,7 +49,6 @@
 import static org.junit.Assert.assertTrue;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyString;
-import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.when;
 
@@ -180,7 +179,7 @@ protected void assertClientChannelInfo(ClientChannelInfo clientChannelInfo, Stri
     public void testProducerNotifyClientTermination() throws Throwable {
         Context context = createContext();
 
-        when(this.grpcClientSettingsManager.removeClientSettings(eq(CLIENT_ID))).thenReturn(Settings.newBuilder()
+        when(this.grpcClientSettingsManager.removeAndGetClientSettings(any())).thenReturn(Settings.newBuilder()
             .setClientType(ClientType.PRODUCER)
             .setPublishing(Publishing.newBuilder()
                 .addTopics(Resource.newBuilder().setName(TOPIC).build())
@@ -207,7 +206,7 @@ public void testProducerNotifyClientTermination() throws Throwable {
     public void testConsumerNotifyClientTermination() throws Throwable {
         Context context = createContext();
 
-        when(this.grpcClientSettingsManager.removeClientSettings(eq(CLIENT_ID))).thenReturn(Settings.newBuilder()
+        when(this.grpcClientSettingsManager.removeAndGetClientSettings(any())).thenReturn(Settings.newBuilder()
             .setClientType(ClientType.PUSH_CONSUMER)
             .build());
         ArgumentCaptor<ClientChannelInfo> channelInfoArgumentCaptor = ArgumentCaptor.forClass(ClientChannelInfo.class);

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ContextVariable.java
Patch:
@@ -20,4 +20,5 @@
 public class ContextVariable {
     public final static String REMOTE_ADDRESS = "remote-address";
     public final static String LOCAL_ADDRESS = "local-address";
+    public final static String MESSAGE_TYPE = "message-type";
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ProxyExceptionCode.java
Patch:
@@ -23,4 +23,5 @@ public enum ProxyExceptionCode {
     INVALID_RECEIPT_HANDLE,
     ILLEGAL_MESSAGE,
     INTERNAL_SERVER_ERROR,
+    TOPIC_MESSAGE_TYPE_NOT_MATCH,
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/AckMessageActivity.java
Patch:
@@ -36,7 +36,6 @@
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
 import org.apache.rocketmq.proxy.processor.MessagingProcessor;
-import org.checkerframework.checker.units.qual.C;
 
 public class AckMessageActivity extends AbstractMessingActivity {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ProxyExceptionCode.java
Patch:
@@ -22,4 +22,5 @@ public enum ProxyExceptionCode {
     INVALID_BROKER_NAME,
     INVALID_RECEIPT_HANDLE,
     ILLEGAL_MESSAGE,
+    INTERNAL_SERVER_ERROR,
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcProxyException.java
Patch:
@@ -35,6 +35,7 @@ public class GrpcProxyException extends RuntimeException {
         CODE_MAPPING.put(ProxyExceptionCode.RECEIPT_HANDLE_EXPIRED, Code.RECEIPT_HANDLE_EXPIRED);
         CODE_MAPPING.put(ProxyExceptionCode.FORBIDDEN, Code.FORBIDDEN);
         CODE_MAPPING.put(ProxyExceptionCode.ILLEGAL_MESSAGE, Code.ILLEGAL_MESSAGE);
+        CODE_MAPPING.put(ProxyExceptionCode.INTERNAL_SERVER_ERROR, Code.INTERNAL_SERVER_ERROR);
     }
 
     public GrpcProxyException(Code code, String message) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ProxyExceptionCode.java
Patch:
@@ -20,5 +20,6 @@ public enum ProxyExceptionCode {
     FORBIDDEN,
     RECEIPT_HANDLE_EXPIRED,
     INVALID_BROKER_NAME,
-    INVALID_RECEIPT_HANDLE
+    INVALID_RECEIPT_HANDLE,
+    ILLEGAL_MESSAGE,
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcProxyException.java
Patch:
@@ -31,8 +31,10 @@ public class GrpcProxyException extends RuntimeException {
 
     static {
         CODE_MAPPING.put(ProxyExceptionCode.INVALID_BROKER_NAME, Code.INVALID_RECEIPT_HANDLE);
+        CODE_MAPPING.put(ProxyExceptionCode.INVALID_RECEIPT_HANDLE, Code.INVALID_RECEIPT_HANDLE);
         CODE_MAPPING.put(ProxyExceptionCode.RECEIPT_HANDLE_EXPIRED, Code.RECEIPT_HANDLE_EXPIRED);
         CODE_MAPPING.put(ProxyExceptionCode.FORBIDDEN, Code.FORBIDDEN);
+        CODE_MAPPING.put(ProxyExceptionCode.ILLEGAL_MESSAGE, Code.ILLEGAL_MESSAGE);
     }
 
     public GrpcProxyException(Code code, String message) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/mqclient/MQClientAPIExt.java
Patch:
@@ -190,8 +190,10 @@ public CompletableFuture<SendResult> sendMessageAsync(
             requestHeader.setBatch(true);
             MessageBatch msgBatch = MessageBatch.generateFromList(msgList);
             MessageClientIDSetter.setUniqID(msgBatch);
-            msgBatch.setBody(msgBatch.encode());
+            byte[] body = msgBatch.encode();
+            msgBatch.setBody(body);
 
+            request.setBody(body);
             this.getRemotingClient().invokeAsync(brokerAddr, request, timeoutMillis, responseFuture -> {
                 RemotingCommand response = responseFuture.getResponseCommand();
                 if (response != null) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/relay/ProxyRelayService.java
Patch:
@@ -21,16 +21,19 @@
 import org.apache.rocketmq.common.protocol.body.ConsumerRunningInfo;
 import org.apache.rocketmq.common.protocol.header.ConsumeMessageDirectlyResultRequestHeader;
 import org.apache.rocketmq.common.protocol.header.GetConsumerRunningInfoRequestHeader;
+import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public interface ProxyRelayService {
 
     CompletableFuture<ProxyRelayResult<ConsumerRunningInfo>> processGetConsumerRunningInfo(
+        ProxyContext context,
         RemotingCommand command,
         GetConsumerRunningInfoRequestHeader header
     );
 
     CompletableFuture<ProxyRelayResult<ConsumeMessageDirectlyResult>> processConsumeMessageDirectly(
+        ProxyContext context,
         RemotingCommand command,
         ConsumeMessageDirectlyResultRequestHeader header
     );

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/DefaultMessagingProcessor.java
Patch:
@@ -125,7 +125,7 @@ public ProxyTopicRouteData getTopicRouteDataForProxy(ProxyContext ctx, List<Addr
     }
 
     @Override
-    public CompletableFuture<SendResult> sendMessage(ProxyContext ctx, QueueSelector queueSelector,
+    public CompletableFuture<List<SendResult>> sendMessage(ProxyContext ctx, QueueSelector queueSelector,
         String producerGroup, List<MessageExt> msg, long timeoutMillis) {
         return this.producerProcessor.sendMessage(ctx, queueSelector, producerGroup, msg, timeoutMillis);
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/MessagingProcessor.java
Patch:
@@ -59,7 +59,7 @@ ProxyTopicRouteData getTopicRouteDataForProxy(
         String topicName
     )  throws Exception;
 
-    default CompletableFuture<SendResult> sendMessage(
+    default CompletableFuture<List<SendResult>> sendMessage(
         ProxyContext ctx,
         QueueSelector queueSelector,
         String producerGroup,
@@ -68,7 +68,7 @@ default CompletableFuture<SendResult> sendMessage(
         return sendMessage(ctx, queueSelector, producerGroup, msg, DEFAULT_TIMEOUT_MILLS);
     }
 
-    CompletableFuture<SendResult> sendMessage(
+    CompletableFuture<List<SendResult>> sendMessage(
         ProxyContext ctx,
         QueueSelector queueSelector,
         String producerGroup,

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/message/LocalMessageService.java
Patch:
@@ -36,15 +36,15 @@
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
-public class LocalMessageService extends AbstractMessageService {
+public class LocalMessageService implements MessageService {
 
     private BrokerController brokerController;
 
     public LocalMessageService(BrokerController brokerController, RPCHook rpcHook) {
         this.brokerController = brokerController;
     }
 
-    @Override public CompletableFuture<SendResult> sendMessage(ProxyContext ctx, SelectableMessageQueue messageQueue,
+    @Override public CompletableFuture<List<SendResult>> sendMessage(ProxyContext ctx, SelectableMessageQueue messageQueue,
         List<? extends Message> msgList, SendMessageRequestHeader requestHeader, long timeoutMillis) {
         return null;
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/message/MessageService.java
Patch:
@@ -38,7 +38,7 @@
 
 public interface MessageService {
 
-    CompletableFuture<SendResult> sendMessage(
+    CompletableFuture<List<SendResult>> sendMessage(
         ProxyContext ctx,
         SelectableMessageQueue messageQueue,
         List<? extends Message> msgList,

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/AckMessageActivityTest.java
Patch:
@@ -82,7 +82,7 @@ public void testAckMessage() throws Throwable {
                 .build()
         ).get();
 
-        assertEquals(Code.OK, response.getStatus().getCode());
+        assertEquals(Code.MULTIPLE_RESULTS, response.getStatus().getCode());
         assertEquals(3, response.getEntriesCount());
         assertEquals(Code.RECEIPT_HANDLE_EXPIRED, response.getEntries(0).getStatus().getCode());
         assertEquals(Code.OK, response.getEntries(1).getStatus().getCode());

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseIT.java
Patch:
@@ -336,7 +336,7 @@ public void testSimpleConsumerSendAndRecv() throws Exception {
         AckMessageResponse ackMessageResponse = blockingStub.ackMessage(buildAckMessageRequest(topic, group,
             AckMessageEntry.newBuilder().setMessageId(messageId).setReceiptHandle(ackHandles.get(0)).build(),
             AckMessageEntry.newBuilder().setMessageId(messageId).setReceiptHandle(ackHandles.get(1)).build()));
-        assertThat(ackMessageResponse.getStatus().getCode()).isEqualTo(Code.OK);
+        assertThat(ackMessageResponse.getStatus().getCode()).isEqualTo(Code.MULTIPLE_RESULTS);
         int okNum = 0;
         int expireNum = 0;
         for (AckMessageResultEntry entry : ackMessageResponse.getEntriesList()) {
@@ -550,7 +550,7 @@ public void assertQueryAssignment(QueryAssignmentResponse response, int assignme
     public void assertSendMessage(SendMessageResponse response, String messageId) {
         assertThat(response.getStatus()
             .getCode()).isEqualTo(Code.OK);
-        assertThat(response.getReceipts(0).getMessageId()).isEqualTo(messageId);
+        assertThat(response.getEntries(0).getMessageId()).isEqualTo(messageId);
     }
 
     public Message assertAndGetReceiveMessage(List<ReceiveMessageResponse> response, String messageId) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/channel/GrpcChannelManager.java
Patch:
@@ -109,7 +109,7 @@ protected String nextNonce() {
 
     protected void scanExpireResultFuture() {
         ProxyConfig proxyConfig = ConfigurationManager.getProxyConfig();
-        long timeOutMs = TimeUnit.SECONDS.toMillis(proxyConfig.getGrpcProxyOutRequestTimeoutSecond());
+        long timeOutMs = TimeUnit.SECONDS.toMillis(proxyConfig.getGrpcProxyRelayRequestTimeoutInSeconds());
 
         Set<String> nonceSet = this.resultNonceFutureMap.keySet();
         for (String nonce : nonceSet) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/ClusterServiceManager.java
Patch:
@@ -55,7 +55,7 @@ public class ClusterServiceManager extends AbstractStartAndShutdown implements S
     private final TopicRouteService topicRouteService;
     private final MessageService messageService;
     private final ProxyRelayService proxyRelayService;
-    private final MetadataService metadataService;
+    private final ClusterMetadataService metadataService;
 
     private final ScheduledExecutorService scheduledExecutorService;
     private final MQClientAPIFactory messagingClientAPIFactory;
@@ -107,6 +107,7 @@ protected void init() {
         this.appendStartAndShutdown(this.operationClientAPIFactory);
         this.appendStartAndShutdown(this.topicRouteService);
         this.appendStartAndShutdown(this.clusterTransactionService);
+        this.appendStartAndShutdown(this.metadataService);
     }
 
     @Override

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/utils/ProxyUtils.java
Patch:
@@ -17,5 +17,6 @@
 package org.apache.rocketmq.proxy.common.utils;
 
 public class ProxyUtils {
+
     public static final int MAX_MSG_NUMS_FOR_POP_REQUEST = 32;
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/DefaultGrpcMessingActivity.java
Patch:
@@ -58,7 +58,7 @@
 public class DefaultGrpcMessingActivity extends AbstractStartAndShutdown implements GrpcMessingActivity {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
-    private GrpcClientSettingsManager grpcClientSettingsManager;
+    private final GrpcClientSettingsManager grpcClientSettingsManager;
 
     private final ReceiveMessageActivity receiveMessageActivity;
     private final AckMessageActivity ackMessageActivity;
@@ -70,7 +70,7 @@ public class DefaultGrpcMessingActivity extends AbstractStartAndShutdown impleme
     private final ClientActivity clientActivity;
 
     protected DefaultGrpcMessingActivity(MessagingProcessor messagingProcessor) {
-        this.grpcClientSettingsManager = new GrpcClientSettingsManager();
+        this.grpcClientSettingsManager = new GrpcClientSettingsManager(messagingProcessor);
 
         this.receiveMessageActivity = new ReceiveMessageActivity(messagingProcessor, this.grpcClientSettingsManager);
         this.ackMessageActivity = new AckMessageActivity(messagingProcessor, this.grpcClientSettingsManager);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/client/ClientActivity.java
Patch:
@@ -95,7 +95,7 @@ public CompletableFuture<HeartbeatResponse> heartbeat(Context ctx, HeartbeatRequ
             String clientId = context.getVal(GrpcContextConstants.CLIENT_ID);
             LanguageCode languageCode = context.getVal(GrpcContextConstants.LANGUAGE);
 
-            Settings clientSettings = grpcClientSettingsManager.getClientSettings(clientId);
+            Settings clientSettings = grpcClientSettingsManager.getClientSettings(context);
             switch (clientSettings.getClientType()) {
                 case PRODUCER: {
                     for (Resource topic : clientSettings.getPublishing().getTopicsList()) {
@@ -150,7 +150,7 @@ public CompletableFuture<NotifyClientTerminationResponse> notifyClientTerminatio
             ProxyContext context = createContext(ctx);
             String clientId = context.getVal(GrpcContextConstants.CLIENT_ID);
             LanguageCode languageCode = context.getVal(GrpcContextConstants.LANGUAGE);
-            Settings clientSettings = grpcClientSettingsManager.getClientSettings(clientId);
+            Settings clientSettings = grpcClientSettingsManager.getClientSettings(context);
 
             switch (clientSettings.getClientType()) {
                 case PRODUCER:
@@ -225,7 +225,7 @@ protected TelemetryCommand processClientSettings(Context ctx, TelemetryCommand r
         ProxyContext context = createContext(ctx);
         String clientId = context.getVal(GrpcContextConstants.CLIENT_ID);
         grpcClientSettingsManager.updateClientSettings(clientId, request.getSettings());
-        Settings settings = grpcClientSettingsManager.getClientSettings(clientId);
+        Settings settings = grpcClientSettingsManager.getClientSettings(context);
         if (settings.hasPublishing()) {
             for (Resource topic : settings.getPublishing().getTopicsList()) {
                 String topicName = GrpcConverter.wrapResourceWithNamespace(topic);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/PopMessageResultFilterImpl.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.common.utils.FilterUtils;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
-import org.apache.rocketmq.proxy.grpc.v2.GrpcContextConstants;
 import org.apache.rocketmq.proxy.processor.PopMessageResultFilter;
 
 public class PopMessageResultFilterImpl implements PopMessageResultFilter {
@@ -34,7 +33,7 @@ public PopMessageResultFilterImpl(GrpcClientSettingsManager manager) {
 
     @Override
     public FilterResult filterMessage(ProxyContext ctx, String consumerGroup, SubscriptionData subscriptionData, MessageExt messageExt) {
-        int maxAttempts = grpcClientSettingsManager.getClientSettings(ctx.getVal(GrpcContextConstants.CLIENT_ID)).getBackoffPolicy().getMaxAttempts();
+        int maxAttempts = grpcClientSettingsManager.getClientSettings(ctx).getBackoffPolicy().getMaxAttempts();
         if (!FilterUtils.isTagMatched(subscriptionData.getTagsSet(), messageExt.getTags())) {
             return FilterResult.NO_MATCH;
         }

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/BaseActivityTest.java
Patch:
@@ -51,9 +51,11 @@ public class BaseActivityTest extends InitConfigAndLoggerTest {
     protected static final String LOCAL_ADDR = "127.0.0.1:8080";
     protected Metadata metadata = new Metadata();
 
+    protected static final String CLIENT_ID = "client-id" + UUID.randomUUID();
+
     public void before() throws Throwable {
         super.before();
-        metadata.put(InterceptorConstants.CLIENT_ID, "client-id" + UUID.randomUUID());
+        metadata.put(InterceptorConstants.CLIENT_ID, CLIENT_ID);
         metadata.put(InterceptorConstants.LANGUAGE, "JAVA");
         metadata.put(InterceptorConstants.REMOTE_ADDRESS, REMOTE_ADDR);
         metadata.put(InterceptorConstants.LOCAL_ADDRESS, LOCAL_ADDR);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java
Patch:
@@ -63,7 +63,7 @@ public void receiveMessage(Context ctx, ReceiveMessageRequest request,
             pollTime = timeRemaining;
         }
         if (pollTime <= 0) {
-            writer.write(proxyContext, Code.MESSAGE_NOT_FOUND, "no new message");
+            writer.write(proxyContext, Code.MESSAGE_NOT_FOUND, "time remaining is too small");
             return;
         }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/metadata/AbstractMetadataService.java
Patch:
@@ -37,12 +37,12 @@ public abstract class AbstractMetadataService extends AbstractStartAndShutdown i
     public AbstractMetadataService() {
         ProxyConfig config = ConfigurationManager.getProxyConfig();
         this.cacheRefreshExecutor = ThreadPoolMonitor.createAndMonitor(
-            config.getTopicConfigThreadPoolNums(),
-            config.getTopicConfigThreadPoolNums(),
+            config.getMetadataThreadPoolNums(),
+            config.getMetadataThreadPoolNums(),
             1000 * 60,
             TimeUnit.MILLISECONDS,
             "MetadataCacheRefresh",
-            config.getTopicConfigThreadPoolQueueCapacity()
+            config.getMetadataThreadPoolQueueCapacity()
         );
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/metadata/ClusterMetadataService.java
Patch:
@@ -40,8 +40,8 @@ public ClusterMetadataService(TopicRouteService topicRouteService, MQClientAPIFa
         this.topicRouteService = topicRouteService;
         ProxyConfig config = ConfigurationManager.getProxyConfig();
         this.topicCache = CacheBuilder.newBuilder()
-            .maximumSize(config.getTopicRouteCacheMaxNum())
-            .refreshAfterWrite(config.getTopicRouteCacheExpiredInSeconds(), TimeUnit.SECONDS)
+            .maximumSize(config.getTopicConfigCacheMaxNum())
+            .refreshAfterWrite(config.getTopicConfigCacheExpiredInSeconds(), TimeUnit.SECONDS)
             .build(new ClusterTopicConfigCacheLoader(mqClientAPIFactory));
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/metadata/LocalMetadataService.java
Patch:
@@ -34,8 +34,8 @@ public LocalMetadataService(BrokerController brokerController) {
         ProxyConfig config = ConfigurationManager.getProxyConfig();
 
         this.topicCache = CacheBuilder.newBuilder()
-            .maximumSize(config.getTopicRouteCacheMaxNum())
-            .refreshAfterWrite(config.getTopicRouteCacheExpiredInSeconds(), TimeUnit.SECONDS)
+            .maximumSize(config.getTopicConfigCacheMaxNum())
+            .refreshAfterWrite(config.getTopicConfigCacheExpiredInSeconds(), TimeUnit.SECONDS)
             .build(new LocalTopicConfigCacheLoader(brokerController));
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/ServiceManager.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 import org.apache.rocketmq.proxy.service.message.MessageService;
 import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
+import org.apache.rocketmq.proxy.service.metadata.MetadataService;
 import org.apache.rocketmq.proxy.service.route.TopicRouteService;
 import org.apache.rocketmq.proxy.service.transaction.TransactionService;
 
@@ -36,4 +37,6 @@ public interface ServiceManager extends StartAndShutdown {
     TransactionService getTransactionService();
 
     ProxyRelayService getProxyRelayService();
+
+    MetadataService getMetadataService();
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/ClusterTopicRouteService.java
Patch:
@@ -21,12 +21,12 @@
 import org.apache.rocketmq.common.protocol.route.BrokerData;
 import org.apache.rocketmq.common.protocol.route.TopicRouteData;
 import org.apache.rocketmq.proxy.common.Address;
-import org.apache.rocketmq.remoting.RPCHook;
+import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
 
 public class ClusterTopicRouteService extends TopicRouteService {
 
-    public ClusterTopicRouteService(RPCHook rpcHook) {
-        super(rpcHook);
+    public ClusterTopicRouteService(MQClientAPIFactory mqClientAPIFactory) {
+        super(mqClientAPIFactory);
     }
 
     @Override

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/LocalTopicRouteService.java
Patch:
@@ -29,16 +29,16 @@
 import org.apache.rocketmq.common.protocol.route.TopicRouteData;
 import org.apache.rocketmq.proxy.common.Address;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
-import org.apache.rocketmq.remoting.RPCHook;
+import org.apache.rocketmq.proxy.service.mqclient.MQClientAPIFactory;
 
 public class LocalTopicRouteService extends TopicRouteService {
 
     private final BrokerController brokerController;
     private final List<BrokerData> brokerDataList;
     private final int grpcPort;
 
-    public LocalTopicRouteService(BrokerController brokerController, RPCHook rpcHook) {
-        super(rpcHook);
+    public LocalTopicRouteService(BrokerController brokerController, MQClientAPIFactory mqClientAPIFactory) {
+        super(mqClientAPIFactory);
         this.brokerController = brokerController;
         BrokerConfig brokerConfig = this.brokerController.getBrokerConfig();
         HashMap<Long, String> brokerAddrs = new HashMap<>();

File: common/src/main/java/org/apache/rocketmq/common/TopicAttributes.java
Patch:
@@ -42,6 +42,5 @@ public class TopicAttributes {
     static {
         ALL = new HashMap<>();
         ALL.put(QUEUE_TYPE_ATTRIBUTE.getName(), QUEUE_TYPE_ATTRIBUTE);
-        ALL.put(TOPIC_MESSAGE_TYPE_ATTRIBUTE.getName(), TOPIC_MESSAGE_TYPE_ATTRIBUTE);
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/DefaultMessagingProcessor.java
Patch:
@@ -217,7 +217,7 @@ public void addTransactionSubscription(ProxyContext ctx, String producerGroup, S
 
     @Override
     public ProxyRelayService getProxyOutService() {
-        return this.serviceManager.getProxyOutService();
+        return this.serviceManager.getProxyRelayService();
     }
 
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/ClusterServiceManager.java
Patch:
@@ -122,7 +122,7 @@ public TransactionService getTransactionService() {
     }
 
     @Override
-    public ProxyRelayService getProxyOutService() {
+    public ProxyRelayService getProxyRelayService() {
         return this.proxyRelayService;
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/LocalServiceManager.java
Patch:
@@ -78,7 +78,7 @@ public TransactionService getTransactionService() {
     }
 
     @Override
-    public ProxyRelayService getProxyOutService() {
+    public ProxyRelayService getProxyRelayService() {
         return this.proxyRelayService;
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/ServiceManager.java
Patch:
@@ -35,5 +35,5 @@ public interface ServiceManager extends StartAndShutdown {
 
     TransactionService getTransactionService();
 
-    ProxyRelayService getProxyOutService();
+    ProxyRelayService getProxyRelayService();
 }

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/BaseProcessorTest.java
Patch:
@@ -78,7 +78,7 @@ public void before() throws Throwable {
         when(serviceManager.getProducerManager()).thenReturn(producerManager);
         when(serviceManager.getConsumerManager()).thenReturn(consumerManager);
         when(serviceManager.getTransactionService()).thenReturn(transactionService);
-        when(serviceManager.getProxyOutService()).thenReturn(proxyRelayService);
+        when(serviceManager.getProxyRelayService()).thenReturn(proxyRelayService);
     }
 
     protected static ProxyContext createContext() {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageResponseStreamWriter.java
Patch:
@@ -56,7 +56,7 @@ public void write(ProxyContext ctx, ReceiveMessageRequest request, PopResult pop
                 case FOUND:
                     if (messageFoundList.isEmpty()) {
                         streamObserver.onNext(ReceiveMessageResponse.newBuilder()
-                            .setStatus(ResponseBuilder.buildStatus(Code.MESSAGE_NOT_FOUND, "no new message"))
+                            .setStatus(ResponseBuilder.buildStatus(Code.MESSAGE_NOT_FOUND, "no match message"))
                             .build());
                     } else {
                         streamObserver.onNext(ReceiveMessageResponse.newBuilder()

File: common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
Patch:
@@ -248,7 +248,7 @@ public class BrokerConfig extends BrokerIdentity {
      * Transaction message check interval.
      */
     @ImportantField
-    private long transactionCheckInterval = 3 * 1000;
+    private long transactionCheckInterval = 60 * 1000;
 
     /**
      * Acl feature switch

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ProxyExceptionCode.java
Patch:
@@ -19,5 +19,6 @@
 public enum ProxyExceptionCode {
     FORBIDDEN,
     RECEIPT_HANDLE_EXPIRED,
-    INVALID_BROKER_NAME
+    INVALID_BROKER_NAME,
+    INVALID_RECEIPT_HANDLE
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/AbstractMessingActivity.java
Patch:
@@ -37,6 +37,6 @@ public AbstractMessingActivity(MessagingProcessor messagingProcessor,
     protected ProxyContext createContext(Context ctx) {
         return ProxyContext.create()
             .withVal(GrpcContextConstants.CLIENT_ID, InterceptorConstants.METADATA.get(ctx).get(InterceptorConstants.CLIENT_ID))
-            .withVal(GrpcContextConstants.LANGUAGE, LanguageCode.valueOf(InterceptorConstants.METADATA.get(Context.current()).get(InterceptorConstants.LANGUAGE)));
+            .withVal(GrpcContextConstants.LANGUAGE, LanguageCode.valueOf(InterceptorConstants.METADATA.get(ctx).get(InterceptorConstants.LANGUAGE)));
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/channel/GrpcClientChannel.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
 import org.apache.rocketmq.proxy.grpc.v2.common.GrpcConverter;
 import org.apache.rocketmq.proxy.service.out.ProxyChannel;
+import org.apache.rocketmq.proxy.service.out.ProxyOutResult;
 import org.apache.rocketmq.proxy.service.out.ProxyOutService;
 import org.apache.rocketmq.proxy.service.transaction.TransactionId;
 import org.apache.rocketmq.remoting.common.RemotingUtil;
@@ -153,7 +154,7 @@ protected CompletableFuture<Void> processCheckTransaction(CheckTransactionStateR
     @Override
     protected CompletableFuture<Void> processGetConsumerRunningInfo(RemotingCommand command,
         GetConsumerRunningInfoRequestHeader header,
-        CompletableFuture<ConsumerRunningInfo> responseFuture) {
+        CompletableFuture<ProxyOutResult<ConsumerRunningInfo>> responseFuture) {
         if (!header.isJstackEnable()) {
             return CompletableFuture.completedFuture(null);
         }
@@ -168,7 +169,7 @@ protected CompletableFuture<Void> processGetConsumerRunningInfo(RemotingCommand
     @Override
     protected CompletableFuture<Void> processConsumeMessageDirectly(RemotingCommand command,
         ConsumeMessageDirectlyResultRequestHeader header,
-        MessageExt messageExt, CompletableFuture<ConsumeMessageDirectlyResult> responseFuture) {
+        MessageExt messageExt, CompletableFuture<ProxyOutResult<ConsumeMessageDirectlyResult>> responseFuture) {
         this.getTelemetryCommandStreamObserver().onNext(TelemetryCommand.newBuilder()
             .setVerifyMessageCommand(VerifyMessageCommand.newBuilder()
                 .setNonce(this.grpcChannelManager.addResponseFuture(responseFuture))

File: proxy/src/main/java/org/apache/rocketmq/proxy/processor/MessagingProcessor.java
Patch:
@@ -36,13 +36,14 @@
 import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.proxy.common.Address;
 import org.apache.rocketmq.proxy.common.ProxyContext;
+import org.apache.rocketmq.proxy.common.StartAndShutdown;
 import org.apache.rocketmq.proxy.service.out.ProxyOutService;
 import org.apache.rocketmq.proxy.service.route.ProxyTopicRouteData;
 import org.apache.rocketmq.proxy.service.transaction.TransactionId;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
-public interface MessagingProcessor {
+public interface MessagingProcessor extends StartAndShutdown {
 
     long DEFAULT_TIMEOUT_MILLS = Duration.ofSeconds(2).toMillis();
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/ClusterServiceManager.java
Patch:
@@ -62,12 +62,9 @@ public ClusterServiceManager(RPCHook rpcHook) {
         this.consumerManager = new ConsumerManager(new ConsumerIdsChangeListenerImpl());
 
         ProxyConfig proxyConfig = ConfigurationManager.getProxyConfig();
-        double workerFactor = proxyConfig.getRocketmqMQClientWorkerFactor();
-        int threadCount = (int) Math.ceil(Runtime.getRuntime().availableProcessors() * workerFactor);
         this.mqClientAPIFactory = new MQClientAPIFactory(
             "CLUSTER_MQ_CLIENT_",
             proxyConfig.getRocketmqMQClientNum(),
-            threadCount,
             new DoNothingClientRemotingProcessor(null),
             rpcHook,
             scheduledExecutorService);

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/out/ProxyChannel.java
Patch:
@@ -116,13 +116,13 @@ protected abstract CompletableFuture<Void> processCheckTransaction(CheckTransact
     protected abstract CompletableFuture<Void> processGetConsumerRunningInfo(
         RemotingCommand command,
         GetConsumerRunningInfoRequestHeader header,
-        CompletableFuture<ConsumerRunningInfo> responseFuture);
+        CompletableFuture<ProxyOutResult<ConsumerRunningInfo>> responseFuture);
 
     protected abstract CompletableFuture<Void> processConsumeMessageDirectly(
         RemotingCommand command,
         ConsumeMessageDirectlyResultRequestHeader header,
         MessageExt messageExt,
-        CompletableFuture<ConsumeMessageDirectlyResult> responseFuture);
+        CompletableFuture<ProxyOutResult<ConsumeMessageDirectlyResult>> responseFuture);
 
     @Override
     public ChannelConfig config() {

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/out/ProxyOutService.java
Patch:
@@ -25,12 +25,12 @@
 
 public interface ProxyOutService {
 
-    CompletableFuture<ConsumerRunningInfo> processGetConsumerRunningInfo(
+    CompletableFuture<ProxyOutResult<ConsumerRunningInfo>> processGetConsumerRunningInfo(
         RemotingCommand command,
         GetConsumerRunningInfoRequestHeader header
     );
 
-    CompletableFuture<ConsumeMessageDirectlyResult> processConsumeMessageDirectly(
+    CompletableFuture<ProxyOutResult<ConsumeMessageDirectlyResult>> processConsumeMessageDirectly(
         RemotingCommand command,
         ConsumeMessageDirectlyResultRequestHeader header
     );

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/ClusterTransactionService.java
Patch:
@@ -69,7 +69,6 @@ public ClusterTransactionService(TopicRouteService topicRouteService, ProducerMa
         this.mqClientAPIFactory = new MQClientAPIFactory(
             "ClusterTransaction_",
             1,
-            1,
             new ProxyClientRemotingProcessor(producerManager),
             rpcHook,
             scheduledExecutorService);

File: proxy/src/test/java/org/apache/rocketmq/proxy/processor/ConsumerProcessorTest.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Executors;
 import org.apache.rocketmq.client.consumer.AckResult;
 import org.apache.rocketmq.client.consumer.AckStatus;
 import org.apache.rocketmq.client.consumer.PopResult;
@@ -63,7 +64,7 @@ public class ConsumerProcessorTest extends BaseProcessorTest {
     @Before
     public void before() throws Throwable {
         super.before();
-        this.consumerProcessor = new ConsumerProcessor(this.messagingProcessor, this.serviceManager);
+        this.consumerProcessor = new ConsumerProcessor(this.messagingProcessor, this.serviceManager, Executors.newCachedThreadPool());
     }
 
     @Test

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseIT.java
Patch:
@@ -171,7 +171,7 @@ public void onNext(TelemetryCommand value) {
         requestStreamObserver.onNext(TelemetryCommand.newBuilder()
             .setSettings(clientSettings)
             .build());
-        requestStreamObserver.onCompleted();
+        future.whenComplete((settings, throwable) -> requestStreamObserver.onCompleted());
         return future;
     }
 

File: common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
Patch:
@@ -248,7 +248,7 @@ public class BrokerConfig extends BrokerIdentity {
      * Transaction message check interval.
      */
     @ImportantField
-    private long transactionCheckInterval = 60 * 1000;
+    private long transactionCheckInterval = 3 * 1000;
 
     /**
      * Acl feature switch

File: common/src/main/java/org/apache/rocketmq/common/message/MessageBatch.java
Patch:
@@ -39,7 +39,7 @@ public Iterator<Message> iterator() {
         return messages.iterator();
     }
 
-    public static MessageBatch generateFromList(Collection<Message> messages) {
+    public static MessageBatch generateFromList(Collection<? extends Message> messages) {
         assert messages != null;
         assert messages.size() > 0;
         List<Message> messageList = new ArrayList<Message>(messages.size());

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/AuthenticationInterceptor.java
Patch:
@@ -32,7 +32,6 @@
 import org.apache.rocketmq.acl.common.AclException;
 import org.apache.rocketmq.acl.common.MetadataHeader;
 import org.apache.rocketmq.acl.plain.PlainAccessResource;
-import org.apache.rocketmq.proxy.grpc.v2.adapter.RequestMapping;
 
 public class AuthenticationInterceptor implements ServerInterceptor {
     private final List<AccessValidator> accessValidatorList;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessingActivity.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.v2.service;
+package org.apache.rocketmq.proxy.grpc.v2;
 
 import apache.rocketmq.v2.AckMessageRequest;
 import apache.rocketmq.v2.AckMessageResponse;
@@ -43,7 +43,7 @@
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 
-public interface GrpcForwardService extends StartAndShutdown {
+public interface GrpcMessingActivity extends StartAndShutdown {
 
     CompletableFuture<QueryRouteResponse> queryRoute(Context ctx, QueryRouteRequest request);
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/ResponseWriter.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.v2.adapter;
+package org.apache.rocketmq.proxy.grpc.v2.common;
 
 import io.grpc.stub.ServerCallStreamObserver;
 import io.grpc.stub.StreamObserver;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/mqclient/DoNothingClientRemotingProcessor.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.connector.processor;
+package org.apache.rocketmq.proxy.service.mqclient;
 
 import io.netty.channel.ChannelHandlerContext;
 import org.apache.rocketmq.client.impl.ClientRemotingProcessor;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/MessageQueueSelector.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.connector.route;
+package org.apache.rocketmq.proxy.service.route;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/SelectableMessageQueue.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.connector.route;
+package org.apache.rocketmq.proxy.service.route;
 
 import java.util.Objects;
 import org.apache.rocketmq.common.message.MessageQueue;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/TopicRouteHelper.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.connector.route;
+package org.apache.rocketmq.proxy.service.route;
 
 import org.apache.rocketmq.client.common.ClientErrorCode;
 import org.apache.rocketmq.client.exception.MQBrokerException;

File: proxy/src/main/java/org/apache/rocketmq/proxy/service/route/TopicRouteWrapper.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.connector.route;
+package org.apache.rocketmq.proxy.service.route;
 
 import java.util.HashMap;
 import java.util.List;

File: proxy/src/test/java/org/apache/rocketmq/proxy/config/ConfigurationManagerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.rocketmq.proxy.config;
 
-import org.apache.rocketmq.proxy.grpc.v2.adapter.ProxyMode;
+import org.apache.rocketmq.proxy.ProxyMode;
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: proxy/src/test/resources/backup/channel/SimpleChannel.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.channel;
+package backup.channel;
 
 import com.google.common.base.Strings;
 import io.netty.channel.AbstractChannel;

File: proxy/src/test/resources/backup/channel/SimpleChannelHandlerContext.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.channel;
+package backup.channel;
 
 import io.netty.buffer.ByteBufAllocator;
 import io.netty.channel.Channel;

File: proxy/src/test/resources/backup/grpc/v2/adapter/ResponseHook.java
Patch:
@@ -16,9 +16,9 @@
  */
 package org.apache.rocketmq.proxy.grpc.v2.adapter;
 
-import io.grpc.Context;
+import org.apache.rocketmq.proxy.common.ProxyContext;
 
 public interface ResponseHook<T, R> {
 
-    void beforeResponse(Context ctx, T request, R response, Throwable t);
+    void beforeResponse(ProxyContext ctx, T request, R response, Throwable t);
 }

File: proxy/src/test/resources/backup/grpc/v2/adapter/handler/SendMessageResponseHandler.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.channel.InvocationContext;
-import org.apache.rocketmq.proxy.connector.transaction.TransactionId;
+import org.apache.rocketmq.proxy.service.transaction.TransactionId;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseBuilder;
 import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;

File: proxy/src/test/resources/backup/test/proxy/grpc/v2/service/cluster/ProducerServiceTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.client.producer.SendStatus;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.proxy.connector.route.SelectableMessageQueue;
+import org.apache.rocketmq.proxy.service.route.SelectableMessageQueue;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ProxyException;
 import org.junit.Test;
 
@@ -62,7 +62,7 @@ public class ProducerServiceTest extends BaseServiceTest {
 
     @Override
     public void beforeEach() throws Throwable {
-        producerService = new ProducerService(this.connectorManager);
+        producerService = new ProducerService(this.serviceManager);
         producerService.start();
     }
 

File: proxy/src/test/resources/backup/test/proxy/grpc/v2/service/local/LocalWriteQueueSelectorTest.java
Patch:
@@ -24,7 +24,7 @@
 import io.grpc.Context;
 import org.apache.rocketmq.broker.topic.TopicConfigManager;
 import org.apache.rocketmq.common.TopicConfig;
-import org.apache.rocketmq.proxy.connector.route.SelectableMessageQueue;
+import org.apache.rocketmq.proxy.service.route.SelectableMessageQueue;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mockito;

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java
Patch:
@@ -106,7 +106,7 @@ public static RemotingCommand createResponseCommandWithHeader(int code, CommandC
         return cmd;
     }
 
-    private static void setCmdVersion(RemotingCommand cmd) {
+    protected static void setCmdVersion(RemotingCommand cmd) {
         if (configVersion >= 0) {
             cmd.setVersion(configVersion);
         } else {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServerBuilder.java
Patch:
@@ -45,6 +45,7 @@
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.grpc.interceptor.AuthenticationInterceptor;
 import org.apache.rocketmq.proxy.grpc.interceptor.ContextInterceptor;
+import org.apache.rocketmq.proxy.grpc.interceptor.GlobalExceptionInterceptor;
 import org.apache.rocketmq.proxy.grpc.interceptor.HeaderInterceptor;
 
 public class GrpcServerBuilder {
@@ -150,6 +151,7 @@ public GrpcServerBuilder configInterceptor() {
         }
 
         this.serverBuilder
+            .intercept(new GlobalExceptionInterceptor())
             .intercept(new ContextInterceptor())
             .intercept(new HeaderInterceptor());
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/AuthenticationInterceptor.java
Patch:
@@ -59,16 +59,16 @@ public void onMessage(R message) {
                     .build();
                 for (AccessValidator accessValidator : accessValidatorList) {
                     AccessResource accessResource = accessValidator.parse(messageV3, metadataHeader);
-                    addHeader(headers, messageV3.getDescriptorForType().getFullName(), accessResource);
                     accessValidator.validate(accessResource);
+                    addHeader(headers, messageV3, accessResource);
                 }
                 super.onMessage(message);
             }
         };
     }
 
-    protected void addHeader(Metadata headers, String rpcName, AccessResource accessResource) {
-        headers.put(InterceptorConstants.RPC_NAME, rpcName);
+    protected void addHeader(Metadata headers, GeneratedMessageV3 messageV3, AccessResource accessResource) {
+        headers.put(InterceptorConstants.RPC_NAME, messageV3.getDescriptorForType().getFullName());
         if (accessResource instanceof PlainAccessResource) {
             PlainAccessResource plainAccessResource = (PlainAccessResource) accessResource;
             headers.put(InterceptorConstants.AUTHORIZATION_AK, plainAccessResource.getAccessKey());

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java
Patch:
@@ -73,7 +73,7 @@ public class ProxyConfig {
     private int transactionHeartbeatPeriodSecond = 20;
     private int transactionHeartbeatBatchNum = 100;
 
-    private long longPollingReserveTimeInMillis = 10000;
+    private long longPollingReserveTimeInMillis = 100;
 
     private boolean enableACL = false;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/LocalGrpcService.java
Patch:
@@ -51,7 +51,6 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.client.ClientChannelInfo;
 import org.apache.rocketmq.broker.client.ConsumerGroupEvent;
@@ -265,7 +264,7 @@ public CompletableFuture<QueryAssignmentResponse> queryAssignment(Context ctx, Q
 
     @Override
     public void receiveMessage(Context ctx, ReceiveMessageRequest request, StreamObserver<ReceiveMessageResponse> responseObserver) {
-        long pollTime = ctx.getDeadline().timeRemaining(TimeUnit.MILLISECONDS);
+        long pollTime = GrpcConverter.buildPollTimeFromContext(ctx);
         // TODO: get fifo config from subscriptionGroupManager
         boolean fifo = false;
         BaseReceiveMessageResponseStreamWriter writer = streamWriterBuilder.build(responseObserver, receiveMessageHook);

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseIT.java
Patch:
@@ -139,6 +139,8 @@ public void setUp() throws Exception {
         ConfigurationManager.intConfig();
         ConfigurationManager.getProxyConfig().setGrpcServerPort(PORT);
         ConfigurationManager.getProxyConfig().setNameSrvAddr(nsAddr);
+        // Set LongPollingReserveTimeInMillis to 500ms to reserve more time for IT
+        ConfigurationManager.getProxyConfig().setLongPollingReserveTimeInMillis(500);
 
         blockingStub = createBlockingStub(createChannel(ConfigurationManager.getProxyConfig().getGrpcServerPort()));
         stub = createStub(createChannel(ConfigurationManager.getProxyConfig().getGrpcServerPort()));

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/InterceptorConstants.java
Patch:
@@ -65,4 +65,7 @@ public class InterceptorConstants {
 
     public static final Metadata.Key<String> CLIENT_ID
         = Metadata.Key.of("x-mq-client-id", Metadata.ASCII_STRING_MARSHALLER);
+
+    public static final Metadata.Key<String> AUTHORIZATION_AK
+        = Metadata.Key.of("x-mq-authorization-ak", Metadata.ASCII_STRING_MARSHALLER);
 }

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/ClusterGrpcIT.java
Patch:
@@ -33,7 +33,7 @@
 
 import static org.awaitility.Awaitility.await;
 
-public class ClusterGrpcTest extends GrpcBaseTest {
+public class ClusterGrpcIT extends GrpcBaseIT {
 
     private GrpcForwardService grpcForwardService;
 

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseIT.java
Patch:
@@ -106,7 +106,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.awaitility.Awaitility.await;
 
-public class GrpcBaseTest extends BaseConf {
+public class GrpcBaseIT extends BaseConf {
 
     protected final int PORT = 8082;
     /**

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/LocalGrpcIT.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-public class LocalGrpcTest extends GrpcBaseTest {
+public class LocalGrpcIT extends GrpcBaseIT {
     private LocalGrpcService localGrpcService;
 
     @Before

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/AbstractTransactionalMessageCheckListener.java
Patch:
@@ -56,6 +56,7 @@ public void sendCheckMessage(MessageExt msgExt) throws Exception {
         checkTransactionStateRequestHeader.setMsgId(msgExt.getUserProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX));
         checkTransactionStateRequestHeader.setTransactionId(checkTransactionStateRequestHeader.getMsgId());
         checkTransactionStateRequestHeader.setTranStateTableOffset(msgExt.getQueueOffset());
+        checkTransactionStateRequestHeader.setBrokerName(brokerController.getBrokerConfig().getBrokerName());
         msgExt.setTopic(msgExt.getUserProperty(MessageConst.PROPERTY_REAL_TOPIC));
         msgExt.setQueueId(Integer.parseInt(msgExt.getUserProperty(MessageConst.PROPERTY_REAL_QUEUE_ID)));
         msgExt.setStoreSize(0);

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/processor/ProxyClientRemotingProcessor.java
Patch:
@@ -68,6 +68,7 @@ public RemotingCommand checkTransactionState(ChannelHandlerContext ctx, Remoting
                             requestHeader.getTransactionId(),
                             requestHeader.getCommitLogOffset(),
                             requestHeader.getTranStateTableOffset()),
+                        requestHeader.getBrokerName(),
                         messageExt
                     )
                 );

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/RequestMapping.java
Patch:
@@ -22,7 +22,6 @@
 import apache.rocketmq.v2.EndTransactionRequest;
 import apache.rocketmq.v2.ForwardMessageToDeadLetterQueueResponse;
 import apache.rocketmq.v2.HeartbeatRequest;
-import apache.rocketmq.v2.NackMessageRequest;
 import apache.rocketmq.v2.NotifyClientTerminationRequest;
 import apache.rocketmq.v2.QueryAssignmentRequest;
 import apache.rocketmq.v2.QueryRouteRequest;
@@ -42,7 +41,6 @@ public class RequestMapping {
             put(QueryAssignmentRequest.getDescriptor().getFullName(), RequestCode.GET_ROUTEINFO_BY_TOPIC);
             put(ReceiveMessageRequest.getDescriptor().getFullName(), RequestCode.PULL_MESSAGE);
             put(AckMessageRequest.getDescriptor().getFullName(), RequestCode.UPDATE_CONSUMER_OFFSET);
-            put(NackMessageRequest.getDescriptor().getFullName(), RequestCode.CONSUMER_SEND_MSG_BACK);
             put(ForwardMessageToDeadLetterQueueResponse.getDescriptor().getFullName(), RequestCode.CONSUMER_SEND_MSG_BACK);
             put(EndTransactionRequest.getDescriptor().getFullName(), RequestCode.END_TRANSACTION);
             put(NotifyClientTerminationRequest.getDescriptor().getFullName(), RequestCode.UNREGISTER_CLIENT);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/channel/GrpcClientChannel.java
Patch:
@@ -130,6 +130,7 @@ public ChannelFuture writeAndFlush(Object msg) {
                             .setRecoverOrphanedTransactionCommand(RecoverOrphanedTransactionCommand.newBuilder()
                                 .setTransactionId(transactionId.getProxyTransactionId())
                                 .setOrphanedTransactionalMessage(GrpcConverter.buildMessage(messageExt))
+                                .setMessageQueue(GrpcConverter.buildMessageQueue(messageExt, header.getBrokerName()))
                                 .build())
                             .build());
                         break;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/BaseReceiveMessageResponseStreamWriter.java
Patch:
@@ -30,19 +30,19 @@
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseHook;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseWriter;
 
-public abstract class ReceiveMessageResponseStreamWriter {
+public abstract class BaseReceiveMessageResponseStreamWriter {
 
     protected final StreamObserver<ReceiveMessageResponse> streamObserver;
     protected final ResponseHook<ReceiveMessageRequest, ReceiveMessageResponse> receiveMessageHook;
     protected final ReceiveMessageResultFilter receiveMessageResultFilter;
 
     public interface Builder {
-        ReceiveMessageResponseStreamWriter build(
+        BaseReceiveMessageResponseStreamWriter build(
             StreamObserver<ReceiveMessageResponse> observer,
             ResponseHook<ReceiveMessageRequest, ReceiveMessageResponse> hook);
     }
 
-    public ReceiveMessageResponseStreamWriter(
+    public BaseReceiveMessageResponseStreamWriter(
         StreamObserver<ReceiveMessageResponse> observer,
         ResponseHook<ReceiveMessageRequest, ReceiveMessageResponse> hook,
         ReceiveMessageResultFilter messageResultFilter) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/DefaultReceiveMessageResponseStreamWriter.java
Patch:
@@ -33,10 +33,10 @@
 import org.apache.rocketmq.proxy.grpc.v2.adapter.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseHook;
 import org.apache.rocketmq.proxy.grpc.v2.service.BaseService;
-import org.apache.rocketmq.proxy.grpc.v2.service.ReceiveMessageResponseStreamWriter;
+import org.apache.rocketmq.proxy.grpc.v2.service.BaseReceiveMessageResponseStreamWriter;
 import org.apache.rocketmq.proxy.grpc.v2.service.ReceiveMessageResultFilter;
 
-public class DefaultReceiveMessageResponseStreamWriter extends ReceiveMessageResponseStreamWriter {
+public class DefaultReceiveMessageResponseStreamWriter extends BaseReceiveMessageResponseStreamWriter {
     protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected static final long NACK_INVISIBLE_TIME = Duration.ofSeconds(1).toMillis();

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/local/LocalReceiveMessageResponseStreamWriter.java
Patch:
@@ -32,14 +32,14 @@
 import org.apache.rocketmq.proxy.channel.SimpleChannelHandlerContext;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseHook;
-import org.apache.rocketmq.proxy.grpc.v2.service.ReceiveMessageResponseStreamWriter;
+import org.apache.rocketmq.proxy.grpc.v2.service.BaseReceiveMessageResponseStreamWriter;
 import org.apache.rocketmq.proxy.grpc.v2.service.ReceiveMessageResultFilter;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-public class LocalReceiveMessageResponseStreamWriter extends ReceiveMessageResponseStreamWriter {
+public class LocalReceiveMessageResponseStreamWriter extends BaseReceiveMessageResponseStreamWriter {
     private final static Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     private final ChannelManager channelManager;
     private final BrokerController brokerController;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/InterceptorConstants.java
Patch:
@@ -21,9 +21,6 @@
 import io.grpc.Metadata;
 
 public class InterceptorConstants {
-    private InterceptorConstants() {
-    }
-
     public static final Context.Key<Metadata> METADATA = Context.key("rpc-metadata");
 
     /**

File: proxy/src/main/java/org/apache/rocketmq/proxy/ProxyStartup.java
Patch:
@@ -68,6 +68,7 @@ public static void main(String[] args) {
             // create grpcServer
             GrpcServer grpcServer = GrpcServerBuilder.newBuilder(executor)
                 .addService(createServiceProcessor())
+                .configInterceptor()
                 .build();
             PROXY_START_AND_SHUTDOWN.appendStartAndShutdown(grpcServer);
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/LocalGrpcServiceTest.java
Patch:
@@ -91,6 +91,7 @@
 import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseBuilder;
+import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRemotingServer;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
@@ -338,7 +339,7 @@ public void testReceiveMessageSuccess() throws Exception {
                 .setSystemProperties(
                     message.getSystemProperties()
                     .toBuilder()
-                    .setReceiptHandle("0 0 1000 0 0 zhouxiang_MBP16 0 0 0")
+                    .setReceiptHandle("0 0 1000 0 0 "+ brokerControllerMock.getBrokerConfig().getBrokerName() +" 0 0 0")
                     .build())
                 .build())
             .build();

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/client/MQClientAPIExt.java
Patch:
@@ -360,8 +360,8 @@ public CompletableFuture<List<String>> getConsumerListByGroupAsync(
                                 return;
                             }
                         }
-                        /**
-                         * @see org.apache.rocketmq.broker.processor.ConsumerManageProcessor#getConsumerListByGroup,
+                        /*
+                          @see org.apache.rocketmq.broker.processor.ConsumerManageProcessor#getConsumerListByGroup,
                          * broker will return {@link ResponseCode.SYSTEM_ERROR} if there is no consumer.
                          */
                         case ResponseCode.SYSTEM_ERROR: {

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/factory/AbstractClientManager.java
Patch:
@@ -37,7 +37,7 @@ public AbstractClientManager(ScheduledExecutorService scheduledExecutorService,
         this.rpcHook = rpcHook;
     }
 
-    protected abstract T newOne(String instanceName, RPCHook rpcHook, int bootstrapWorkerThreads) throws Throwable;
+    protected abstract T newOne(String instanceName, RPCHook rpcHook, int bootstrapWorkerThreads);
 
     protected abstract boolean tryStart(T t);
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/LocalGrpcServiceTest.java
Patch:
@@ -94,7 +94,6 @@
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRemotingServer;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
-import org.apache.rocketmq.store.config.MessageStoreConfig;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/BaseServiceTest.java
Patch:
@@ -31,11 +31,10 @@
 import org.apache.rocketmq.proxy.connector.DefaultForwardClient;
 import org.apache.rocketmq.proxy.connector.ForwardProducer;
 import org.apache.rocketmq.proxy.connector.ForwardReadConsumer;
-import org.apache.rocketmq.proxy.connector.route.TopicRouteCache;
 import org.apache.rocketmq.proxy.connector.ForwardWriteConsumer;
+import org.apache.rocketmq.proxy.connector.route.TopicRouteCache;
 import org.apache.rocketmq.proxy.connector.transaction.TransactionHeartbeatRegisterService;
 import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
-import org.apache.rocketmq.proxy.grpc.v2.service.ClusterGrpcService;
 import org.apache.rocketmq.proxy.grpc.v2.service.GrpcClientManager;
 import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.junit.Before;

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/ConfigurationManager.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.rocketmq.proxy.config;
 
-import java.io.File;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.rocketmq.common.MixAll;
 
 public class ConfigurationManager {
     public static final String RMQ_PROXY_HOME = "RMQ_PROXY_HOME";
-    protected static final String DEFAULT_RMQ_PROXY_HOME = System.getProperty("user.home") + File.separator + "rmq-proxy";
+    protected static final String DEFAULT_RMQ_PROXY_HOME = System.getenv(MixAll.ROCKETMQ_HOME_ENV);
     protected static String proxyHome;
     protected static Configuration configuration;
 

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/ClusterGrpcTest.java
Patch:
@@ -61,7 +61,6 @@ public void tearDown() throws Exception {
     @Test
     public void testQueryRoute() throws Exception {
         String topic = initTopic();
-        this.sendClientSettings(stub, buildAccessPointClientSettings(PORT)).get();
 
         QueryRouteResponse response = blockingStub.queryRoute(buildQueryRouteRequest(topic));
         assertQueryRoute(response, brokerNum * defaultQueueNums);
@@ -71,7 +70,6 @@ public void testQueryRoute() throws Exception {
     public void testQueryAssignment() throws Exception {
         String topic = initTopic();
         String group = "group";
-        this.sendClientSettings(stub, buildAccessPointClientSettings(PORT)).get();
 
         QueryAssignmentResponse response = blockingStub.queryAssignment(buildQueryAssignmentRequest(topic, group));
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/LocalGrpcServiceTest.java
Patch:
@@ -140,7 +140,6 @@ public void setUp() throws Throwable {
         Mockito.when(brokerControllerMock.getSendMessageProcessor()).thenReturn(sendMessageProcessorMock);
         Mockito.when(brokerControllerMock.getPopMessageProcessor()).thenReturn(popMessageProcessorMock);
         Mockito.when(brokerControllerMock.getBrokerConfig()).thenReturn(new BrokerConfig());
-        Mockito.when(brokerControllerMock.getMessageStoreConfig()).thenReturn(new MessageStoreConfig());
         Mockito.when(brokerControllerMock.getTopicConfigManager()).thenReturn(topicConfigManagerMock);
         Mockito.when(topicConfigManagerMock.selectTopicConfig(Mockito.anyString())).thenReturn(new TopicConfig("topic", 8, 8));
         Mockito.doNothing().when(consumerManagerMock).appendConsumerIdsChangeListener(Mockito.any(ConsumerIdsChangeListener.class));

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/ChangeInvisibleTimeRequestHeader.java
Patch:
@@ -96,13 +96,13 @@ public void setQueueId(Integer queueId) {
 
     @Override
     public String toString() {
-        return "ChangeInvisibleTimeRequestHeader [" +
+        return "ChangeInvisibleTimeRequestHeader{" +
             "consumerGroup='" + consumerGroup + '\'' +
             ", topic='" + topic + '\'' +
             ", queueId=" + queueId +
             ", extraInfo='" + extraInfo + '\'' +
             ", offset=" + offset +
             ", invisibleTime=" + invisibleTime +
-            ']';
+            '}';
     }
 }

File: proxy/src/test/java/org/apache/rocketmq/proxy/connector/ForwardClientManagerTest.java
Patch:
@@ -29,6 +29,8 @@ public class ForwardClientManagerTest extends InitConfigAndLoggerTest {
 
     @Test
     public void testConnectorManager() throws Exception {
+        ConfigurationManager.getProxyConfig().setNameSrvAddr("127.0.0.1:9876");
+
         TransactionStateChecker mockedTransactionStateChecker = Mockito.mock(TransactionStateChecker.class);
         ConnectorManager connectorManager = new ConnectorManager(mockedTransactionStateChecker);
         connectorManager.start();

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ConsumerService.java
Patch:
@@ -278,7 +278,8 @@ public CompletableFuture<ChangeInvisibleDurationResponse> changeInvisibleDuratio
             String brokerAddr = this.getBrokerAddr(ctx, receiptHandle.getBrokerName());
 
             ChangeInvisibleTimeRequestHeader requestHeader = convertToChangeInvisibleTimeRequestHeader(ctx, request);
-            future = this.writeConsumer.changeInvisibleTimeAsync(ctx, brokerAddr, receiptHandle.getBrokerName(), "", requestHeader)
+            future = this.writeConsumer.changeInvisibleTimeAsync(ctx, brokerAddr, receiptHandle.getBrokerName(),
+                request.getMessageId(), requestHeader)
                 .thenApply(result -> convertToChangeInvisibleDurationResponse(ctx, request, result));
         } catch (Throwable t) {
             future.completeExceptionally(t);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/ClusterGrpcService.java
Patch:
@@ -168,7 +168,7 @@ public StreamObserver<TelemetryCommand> telemetry(Context ctx, StreamObserver<Te
         return clientService.telemetry(ctx, responseObserver);
     }
 
-    private class ClusterGrpcServiceStartAndShutdown implements StartAndShutdown {
+    protected class ClusterGrpcServiceStartAndShutdown implements StartAndShutdown {
 
         @Override
         public void start() throws Exception {
@@ -180,7 +180,7 @@ public void shutdown() throws Exception {
         }
     }
 
-    private class GrpcTransactionStateChecker implements TransactionStateChecker {
+    protected class GrpcTransactionStateChecker implements TransactionStateChecker {
 
         @Override
         public void checkTransactionState(TransactionStateCheckRequest checkData) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ConsumerService.java
Patch:
@@ -169,7 +169,7 @@ protected CompletableFuture<AckMessageResultEntry> processAckMessage(Context ctx
             String brokerAddr = this.getBrokerAddr(ctx, receiptHandle.getBrokerName());
 
             AckMessageRequestHeader requestHeader = this.buildAckMessageRequestHeader(ctx, request, receiptHandle);
-            CompletableFuture<AckResult> ackResultFuture = this.writeConsumer.ackMessage(ctx, brokerAddr, requestHeader);
+            CompletableFuture<AckResult> ackResultFuture = this.writeConsumer.ackMessage(ctx, brokerAddr, ackMessageEntry.getMessageId(), requestHeader);
             ackResultFuture
                 .thenAccept(result -> future.complete(convertToAckMessageResultEntry(ctx, ackMessageEntry, result)))
                 .exceptionally(throwable -> {
@@ -220,7 +220,7 @@ public CompletableFuture<NackMessageResponse> nackMessage(Context ctx, NackMessa
                 ).thenApply(result -> convertToNackMessageResponse(ctx, request, result));
             } else {
                 ChangeInvisibleTimeRequestHeader requestHeader = this.buildChangeInvisibleTimeRequestHeader(ctx, request);
-                future = this.writeConsumer.changeInvisibleTimeAsync(ctx, brokerAddr, receiptHandle.getBrokerName(), requestHeader)
+                future = this.writeConsumer.changeInvisibleTimeAsync(ctx, brokerAddr, receiptHandle.getBrokerName(), request.getMessageId(), requestHeader)
                     .thenApply(result -> convertToNackMessageResponse(ctx, request, result));
             }
         } catch (Throwable t) {
@@ -278,7 +278,7 @@ public CompletableFuture<ChangeInvisibleDurationResponse> changeInvisibleDuratio
             String brokerAddr = this.getBrokerAddr(ctx, receiptHandle.getBrokerName());
 
             ChangeInvisibleTimeRequestHeader requestHeader = convertToChangeInvisibleTimeRequestHeader(ctx, request);
-            future = this.writeConsumer.changeInvisibleTimeAsync(ctx, brokerAddr, receiptHandle.getBrokerName(), requestHeader)
+            future = this.writeConsumer.changeInvisibleTimeAsync(ctx, brokerAddr, receiptHandle.getBrokerName(), "", requestHeader)
                 .thenApply(result -> convertToChangeInvisibleDurationResponse(ctx, request, result));
         } catch (Throwable t) {
             future.completeExceptionally(t);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/DefaultReceiveMessageResponseStreamWriter.java
Patch:
@@ -148,6 +148,7 @@ protected void nackFailToWriteMessage(Context ctx, ReceiveMessageRequest request
                 ctx,
                 brokerAddr,
                 handle.getBrokerName(),
+                message.getSystemProperties().getMessageId(),
                 changeInvisibleTimeRequestHeader
             ).whenComplete((ackResult, t) -> {
                 if (t != null) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/DefaultReceiveMessageResultFilter.java
Patch:
@@ -128,7 +128,7 @@ protected void ackNoMatchedMessage(Context ctx, ReceiveMessageRequest request, M
         AckMessageRequestHeader ackMessageRequestHeader = GrpcConverter.buildAckMessageRequestHeader(request, handle);
         try {
             String brokerAddr = getBrokerAddr(ctx, topicRouteCache, handle.getBrokerName());
-            future = this.writeConsumer.ackMessage(ctx, brokerAddr, ackMessageRequestHeader);
+            future = this.writeConsumer.ackMessage(ctx, brokerAddr, messageExt.getMsgId(), ackMessageRequestHeader);
         } catch (Throwable t) {
             future.completeExceptionally(t);
         }

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ConsumerServiceTest.java
Patch:
@@ -93,7 +93,7 @@ public void testReceiveMessage() throws Exception {
         when(readConsumerClient.popMessage(any(), anyString(), anyString(), any(), anyLong()))
             .thenReturn(CompletableFuture.completedFuture(popResult));
         when(topicRouteCache.getBrokerAddr(anyString())).thenReturn("brokerAddr");
-        when(writeConsumerClient.ackMessage(any(), anyString(), any()))
+        when(writeConsumerClient.ackMessage(any(), anyString(), anyString(), any()))
             .thenReturn(CompletableFuture.completedFuture(new AckResult()));
 
         Context ctx = Context.current().withDeadlineAfter(3, TimeUnit.SECONDS, Executors.newSingleThreadScheduledExecutor());
@@ -190,7 +190,7 @@ public void testAckMessage() throws Exception {
         when(topicRouteCache.getBrokerAddr(anyString())).thenReturn("brokerAddr");
         AckResult ackResult = new AckResult();
         ackResult.setStatus(AckStatus.OK);
-        when(writeConsumerClient.ackMessage(any(), anyString(), any())).thenReturn(CompletableFuture.completedFuture(ackResult));
+        when(writeConsumerClient.ackMessage(any(), anyString(), anyString(), any())).thenReturn(CompletableFuture.completedFuture(ackResult));
 
         AckMessageResponse response = consumerService.ackMessage(Context.current(), AckMessageRequest.newBuilder()
             .setTopic(Resource.newBuilder()
@@ -241,7 +241,7 @@ public void testNackMessage() throws Exception {
         ArgumentCaptor<ChangeInvisibleTimeRequestHeader> headerArgumentCaptor = ArgumentCaptor.forClass(ChangeInvisibleTimeRequestHeader.class);
         AckResult ackResult = new AckResult();
         ackResult.setStatus(AckStatus.OK);
-        when(writeConsumerClient.changeInvisibleTimeAsync(any(), anyString(), anyString(), headerArgumentCaptor.capture()))
+        when(writeConsumerClient.changeInvisibleTimeAsync(any(), anyString(), anyString(), anyString(), headerArgumentCaptor.capture()))
             .thenReturn(CompletableFuture.completedFuture(ackResult));
         when(topicRouteCache.getBrokerAddr(anyString())).thenReturn("brokerAddr");
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/channel/ChannelManager.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
-import org.apache.rocketmq.proxy.grpc.v1.adapter.channel.GrpcClientChannel;
+import org.apache.rocketmq.proxy.grpc.v2.adapter.channel.GrpcClientChannel;
 
 public class ChannelManager {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java
Patch:
@@ -250,7 +250,7 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
         }
 
         if (requestHeader.isTimeoutTooMuch()) {
-            response.setCode(POLLING_TIMEOUT);
+            response.setCode(ResponseCode.POLLING_TIMEOUT);
             response.setRemark(String.format("the broker[%s] poping message is timeout too much",
                 this.brokerController.getBrokerConfig().getBrokerIP1()));
             return response;

File: proxy/src/main/java/org/apache/rocketmq/proxy/channel/InvocationChannel.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.proxy.channel;
 
+import io.grpc.Context;
 import io.netty.channel.ChannelFuture;
 import java.util.Iterator;
 import java.util.Map;
@@ -30,8 +31,8 @@ public abstract class InvocationChannel<R, W> extends SimpleChannel implements C
     protected final ConcurrentMap<Integer, InvocationContext<R, W>> inFlightRequestMap;
     protected final ResponseHandler<R, W> handler;
 
-    public InvocationChannel(ResponseHandler<R, W> handler) {
-        super(ChannelManager.createSimpleChannelDirectly());
+    public InvocationChannel(Context ctx, ResponseHandler<R, W> handler) {
+        super(ChannelManager.createSimpleChannelDirectly(ctx));
         this.inFlightRequestMap = new ConcurrentHashMap<>();
         this.handler = handler;
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v1/adapter/channel/GrpcClientChannel.java
Patch:
@@ -74,8 +74,9 @@ public static GrpcClientChannel create(
         TelemetryCommandManager manager
     ) {
         GrpcClientChannel channel = channelManager.createChannel(
+            ctx,
             buildKey(group, clientId),
-            () -> new GrpcClientChannel(ctx, group, clientId, manager),
+            context -> new GrpcClientChannel(context, group, clientId, manager),
             GrpcClientChannel.class
         );
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/ResponseBuilder.java
Patch:
@@ -100,6 +100,9 @@ public static Code buildCode(int remotingResponseCode) {
             case ResponseCode.FLUSH_SLAVE_TIMEOUT: {
                 return Code.SLAVE_PERSISTENCE_TIMEOUT;
             }
+            case ResponseCode.POLLING_TIMEOUT: {
+                return Code.GATEWAY_TIMEOUT;
+            }
             default: {
                 return Code.INTERNAL_SERVER_ERROR;
             }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/channel/GrpcClientChannel.java
Patch:
@@ -72,8 +72,9 @@ public static GrpcClientChannel create(
         TelemetryCommandManager manager
     ) {
         GrpcClientChannel channel = channelManager.createChannel(
+            ctx,
             buildKey(group, clientId),
-            () -> new GrpcClientChannel(ctx, group, clientId, manager),
+            context -> new GrpcClientChannel(context, group, clientId, manager),
             GrpcClientChannel.class
         );
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/channel/SendMessageChannel.java
Patch:
@@ -19,11 +19,12 @@
 
 import apache.rocketmq.v2.SendMessageRequest;
 import apache.rocketmq.v2.SendMessageResponse;
+import io.grpc.Context;
 import org.apache.rocketmq.proxy.channel.InvocationChannel;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.handler.SendMessageResponseHandler;
 
 public class SendMessageChannel extends InvocationChannel<SendMessageRequest, SendMessageResponse> {
-    public SendMessageChannel(SendMessageResponseHandler handler) {
-        super(handler);
+    public SendMessageChannel(Context context, SendMessageResponseHandler handler) {
+        super(context, handler);
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/ReceiveMessageResultFilter.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.v2.service.cluster;
+package org.apache.rocketmq.proxy.grpc.v2.service;
 
 import apache.rocketmq.v2.Message;
 import apache.rocketmq.v2.ReceiveMessageRequest;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ConsumerService.java
Patch:
@@ -52,6 +52,7 @@
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseHook;
 import org.apache.rocketmq.proxy.grpc.v2.service.BaseService;
 import org.apache.rocketmq.proxy.grpc.v2.service.GrpcClientManager;
+import org.apache.rocketmq.proxy.grpc.v2.service.ReceiveMessageResponseStreamWriter;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public class ConsumerService extends BaseService {
@@ -106,7 +107,7 @@ public void receiveMessage(Context ctx, ReceiveMessageRequest request,
                 messageQueue.getBrokerName(),
                 requestHeader,
                 requestHeader.getPollTime())
-                .thenAccept(result -> writer.write(ctx, request, result))
+                .thenAccept(result -> writer.write(ctx, request, result.getPopStatus(), result.getMsgFoundList()))
                 .exceptionally(e -> {
                     writer.write(ctx, request, e);
                     return null;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/LocalGrpcServiceTest.java
Patch:
@@ -332,7 +332,7 @@ public void testReceiveMessageSuccess() throws Exception {
                 .build())
             .build();
         ReceiveMessageResponse receiveMessageResponse1 = ReceiveMessageResponse.newBuilder()
-            .setStatus(ResponseBuilder.buildStatus(ResponseCode.SUCCESS, null))
+            .setStatus(ResponseBuilder.buildStatus(Code.OK, Code.OK.name()))
             .build();
         Message message = GrpcConverter.buildMessage(messageExt);
         ReceiveMessageResponse receiveMessageResponse2 = ReceiveMessageResponse.newBuilder()

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/StartAndShutdown.java
Patch:
@@ -17,7 +17,5 @@
 
 package org.apache.rocketmq.proxy.common;
 
-public interface StartAndShutdown {
-    void start() throws Exception;
-    void shutdown() throws Exception;
+public interface StartAndShutdown extends Start, Shutdown {
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/ProxyStartup.java
Patch:
@@ -117,13 +117,13 @@ private static BrokerController createBrokerController() {
         return BrokerStartup.createBrokerController(brokerStartupArgs);
     }
 
-    private static void initThreadPoolMonitor() {
+    public static void initThreadPoolMonitor() {
         ThreadPoolMonitor.init();
         ProxyConfig config = ConfigurationManager.getProxyConfig();
         ThreadPoolMonitor.config(config.isEnablePrintJstack(), config.getPrintJstackInMillis());
     }
 
-    private static void initLogger() throws JoranException {
+    public static void initLogger() throws JoranException {
         System.setProperty("brokerLogDir", "");
         System.setProperty(ClientLogger.CLIENT_LOG_USESLF4J, "true");
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/ConfigurationManager.java
Patch:
@@ -23,8 +23,8 @@
 public class ConfigurationManager {
     public static final String RMQ_PROXY_HOME = "RMQ_PROXY_HOME";
     protected static final String DEFAULT_RMQ_PROXY_HOME = System.getProperty("user.home") + File.separator + "rmq-proxy";
-    private static String proxyHome;
-    private static Configuration configuration;
+    protected static String proxyHome;
+    protected static Configuration configuration;
 
     public static void initEnv() {
         proxyHome = System.getenv(RMQ_PROXY_HOME);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/LocalGrpcService.java
Patch:
@@ -344,7 +344,7 @@ public CompletableFuture<NackMessageResponse> nackMessage(Context ctx, NackMessa
         SimpleChannelHandlerContext channelHandlerContext = new SimpleChannelHandlerContext(channel);
         CompletableFuture<NackMessageResponse> future = new CompletableFuture<>();
 
-        RetryPolicy retryPolicy = grpcClientManager.getClientSettings(ctx).getSubscription().getBackoffPolicy();
+        RetryPolicy retryPolicy = grpcClientManager.getClientSettings(ctx).getBackoffPolicy();
         int maxReconsumeTimes = retryPolicy.getMaxAttempts();
         if (request.getDeliveryAttempt() >= maxReconsumeTimes) {
             ConsumerSendMsgBackRequestHeader requestHeader = GrpcConverter.buildConsumerSendMsgBackToDLQRequestHeader(request, maxReconsumeTimes);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ConsumerService.java
Patch:
@@ -209,7 +209,7 @@ public CompletableFuture<NackMessageResponse> nackMessage(Context ctx, NackMessa
             String brokerAddr = this.getBrokerAddr(ctx, receiptHandle.getBrokerName());
 
             Settings settings = grpcClientManager.getClientSettings(ctx);
-            int maxDeliveryAttempts = settings.getSubscription().getBackoffPolicy().getMaxAttempts();
+            int maxDeliveryAttempts = settings.getBackoffPolicy().getMaxAttempts();
             if (request.getDeliveryAttempt() >= maxDeliveryAttempts) {
                 future = this.producer.sendMessageBackThenAckOrg(
                     ctx,
@@ -235,7 +235,7 @@ public CompletableFuture<NackMessageResponse> nackMessage(Context ctx, NackMessa
 
     protected ChangeInvisibleTimeRequestHeader buildChangeInvisibleTimeRequestHeader(Context ctx,
         NackMessageRequest request) {
-        RetryPolicy retryPolicy = grpcClientManager.getClientSettings(ctx).getSubscription().getBackoffPolicy();
+        RetryPolicy retryPolicy = grpcClientManager.getClientSettings(ctx).getBackoffPolicy();
         return GrpcConverter.buildChangeInvisibleTimeRequestHeader(request, retryPolicy);
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/DefaultReceiveMessageResponseStreamWriter.java
Patch:
@@ -106,6 +106,8 @@ public void write(Context ctx, ReceiveMessageRequest request, PopResult result)
                         .build());
                     break;
             }
+        } catch (Throwable t) {
+            write(ctx, request, t);
         } finally {
             responseStreamObserver.onCompleted();
         }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/DefaultReceiveMessageResultFilter.java
Patch:
@@ -67,7 +67,7 @@ public List<Message> filterMessage(Context ctx, ReceiveMessageRequest request, L
             return Collections.emptyList();
         }
         Settings settings = grpcClientManager.getClientSettings(ctx);
-        int maxAttempts = settings.getSubscription().getBackoffPolicy().getMaxAttempts();
+        int maxAttempts = settings.getBackoffPolicy().getMaxAttempts();
         Resource topic = request.getMessageQueue().getTopic();
         String topicName = GrpcConverter.wrapResourceWithNamespace(topic);
         SubscriptionData subscriptionData = GrpcConverter.buildSubscriptionData(topicName, request.getFilterExpression());

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/LocalGrpcServiceTest.java
Patch:
@@ -166,9 +166,9 @@ public void setUp() throws Throwable {
         });
         streamObserver.onNext(TelemetryCommand.newBuilder()
             .setSettings(Settings.newBuilder()
-                .setSubscription(Subscription.newBuilder()
-                    .setBackoffPolicy(RetryPolicy.newBuilder()
-                        .setMaxAttempts(3).build()).build())
+                .setBackoffPolicy(RetryPolicy.newBuilder()
+                    .setMaxAttempts(3).build())
+                .setSubscription(Subscription.newBuilder().build())
                 .build()).build());
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/ProxyStartup.java
Patch:
@@ -81,7 +81,7 @@ public static void main(String[] args) {
             System.exit(1);
         }
 
-        System.out.println(new Date() + " rmq-proxy startup successfully");
+        System.out.printf("%s%n", new Date() + " rmq-proxy startup successfully");
         log.info(new Date() + " rmq-proxy startup successfully");
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingProcessor.java
Patch:
@@ -44,7 +44,6 @@
 import apache.rocketmq.v2.TelemetryCommand;
 import io.grpc.Context;
 import io.grpc.stub.StreamObserver;
-import java.util.Iterator;
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseBuilder;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseWriter;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/ClusterGrpcService.java
Patch:
@@ -56,7 +56,6 @@
 import org.apache.rocketmq.proxy.connector.ConnectorManager;
 import org.apache.rocketmq.proxy.connector.transaction.TransactionStateCheckRequest;
 import org.apache.rocketmq.proxy.connector.transaction.TransactionStateChecker;
-import org.apache.rocketmq.proxy.grpc.v2.adapter.ProxyMode;
 import org.apache.rocketmq.proxy.grpc.v2.service.cluster.ConsumerService;
 import org.apache.rocketmq.proxy.grpc.v2.service.cluster.ForwardClientService;
 import org.apache.rocketmq.proxy.grpc.v2.service.cluster.ProducerService;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/AbstractRouteService.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.rocketmq.proxy.connector.ConnectorManager;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseHook;
 import org.apache.rocketmq.proxy.grpc.v2.service.cluster.AssignmentQueueSelector;
-import org.apache.rocketmq.proxy.grpc.v2.service.cluster.BaseService;
 import org.apache.rocketmq.proxy.grpc.v2.service.cluster.DefaultAssignmentQueueSelector;
 
 public abstract class AbstractRouteService extends BaseService {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/BaseService.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.grpc.v2.service.cluster;
+package org.apache.rocketmq.proxy.grpc.v2.service;
 
 import apache.rocketmq.v2.Code;
 import apache.rocketmq.v2.FilterExpression;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ConsumerService.java
Patch:
@@ -50,6 +50,7 @@
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ProxyException;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseBuilder;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseHook;
+import org.apache.rocketmq.proxy.grpc.v2.service.BaseService;
 import org.apache.rocketmq.proxy.grpc.v2.service.GrpcClientManager;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
@@ -76,10 +77,7 @@ public ConsumerService(ConnectorManager connectorManager, GrpcClientManager grpc
         this.writeConsumer = connectorManager.getForwardWriteConsumer();
         this.producer = connectorManager.getForwardProducer();
         this.grpcClientManager = grpcClientManager;
-    }
 
-    @Override
-    public void start() throws Exception {
         this.readQueueSelector = new DefaultReadQueueSelector(connectorManager.getTopicRouteCache());
         this.receiveMessageWriterBuilder = (observer, hook) -> new DefaultReceiveMessageResponseStreamWriter(
             observer,

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/DefaultReceiveMessageResponseStreamWriter.java
Patch:
@@ -39,6 +39,7 @@
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseBuilder;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseHook;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseWriter;
+import org.apache.rocketmq.proxy.grpc.v2.service.BaseService;
 
 public class DefaultReceiveMessageResponseStreamWriter extends ReceiveMessageResponseStreamWriter {
     protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
@@ -89,9 +90,7 @@ public void write(Context ctx, ReceiveMessageRequest request, PopResult result)
                                 .setMessage(messageIterator.next())
                                 .build());
                         }
-                        messageIterator.forEachRemaining(message -> {
-                            this.nackFailToWriteMessage(ctx, request, message);
-                        });
+                        messageIterator.forEachRemaining(message -> this.nackFailToWriteMessage(ctx, request, message));
                     }
                     break;
                 case POLLING_FULL:

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ForwardClientService.java
Patch:
@@ -51,6 +51,7 @@
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ProxyException;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseBuilder;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.channel.GrpcClientChannel;
+import org.apache.rocketmq.proxy.grpc.v2.service.BaseService;
 import org.apache.rocketmq.proxy.grpc.v2.service.GrpcClientManager;
 import org.apache.rocketmq.proxy.grpc.v2.service.ClientSettingsService;
 import org.apache.rocketmq.remoting.protocol.LanguageCode;
@@ -82,10 +83,7 @@ public ForwardClientService(
         this.channelManager = channelManager;
         this.grpcClientManager = grpcClientManager;
         this.telemetryCommandManager = telemetryCommandManager;
-    }
 
-    @Override
-    public void start() throws Exception {
         this.clientSettingsService = new ClientSettingsService(this.channelManager, this.grpcClientManager, this.telemetryCommandManager);
         this.consumerManager = new ConsumerManager(new ConsumerIdsChangeListenerImpl());
         this.producerManager = new ProducerManager();

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ProducerService.java
Patch:
@@ -41,6 +41,7 @@
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ProxyException;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseBuilder;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseHook;
+import org.apache.rocketmq.proxy.grpc.v2.service.BaseService;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public class ProducerService extends BaseService {
@@ -53,10 +54,7 @@ public class ProducerService extends BaseService {
     public ProducerService(ConnectorManager connectorManager) {
         super(connectorManager);
         this.producer = connectorManager.getForwardProducer();
-    }
 
-    @Override
-    public void start() throws Exception {
         this.writeQueueSelector = new DefaultWriteQueueSelector(this.connectorManager.getTopicRouteCache());
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/TransactionService.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseBuilder;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseHook;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.channel.GrpcClientChannel;
+import org.apache.rocketmq.proxy.grpc.v2.service.BaseService;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 
 public class TransactionService extends BaseService implements TransactionStateChecker {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/LocalGrpcService.java
Patch:
@@ -98,15 +98,14 @@
 import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ProxyException;
-import org.apache.rocketmq.proxy.grpc.v2.adapter.ProxyMode;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseBuilder;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseWriter;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.channel.GrpcClientChannel;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.channel.ReceiveMessageChannel;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.channel.SendMessageChannel;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.handler.ReceiveMessageResponseHandler;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.handler.SendMessageResponseHandler;
-import org.apache.rocketmq.proxy.grpc.v2.service.cluster.RouteService;
+import org.apache.rocketmq.proxy.grpc.v2.service.local.RouteService;
 import org.apache.rocketmq.proxy.grpc.v2.service.local.LocalWriteQueueSelector;
 import org.apache.rocketmq.remoting.RemotingServer;
 import org.apache.rocketmq.remoting.netty.NettyRemotingAbstract;
@@ -143,7 +142,7 @@ public LocalGrpcService(BrokerController brokerController) {
         ConnectorManager connectorManager = new ConnectorManager(null);
         this.telemetryCommandManager = telemetryCommandManager;
         this.grpcClientManager = new GrpcClientManager();
-        this.routeService = new RouteService(ProxyMode.LOCAL, connectorManager, grpcClientManager);
+        this.routeService = new RouteService(connectorManager, grpcClientManager);
         this.clientSettingsService = new ClientSettingsService(this.channelManager, this.grpcClientManager, this.telemetryCommandManager);
         this.delayPolicy = DelayPolicy.build(brokerController.getMessageStoreConfig().getMessageDelayLevel());
         this.localWriteQueueSelector = new LocalWriteQueueSelector(brokerController.getBrokerConfig().getBrokerName(),

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ConsumerServiceTest.java
Patch:
@@ -66,7 +66,8 @@ public void beforeEach() throws Throwable {
         consumerService.start();
 
         receiveMessageResultFilter = new DefaultReceiveMessageResultFilter(producerClient, writeConsumerClient, grpcClientManager, topicRouteCache);
-        consumerService.setReceiveMessageResultFilter(receiveMessageResultFilter);
+        consumerService.setReceiveMessageWriterBuilder((observer, hook) ->
+            new DefaultReceiveMessageResponseStreamWriter(observer, hook, writeConsumerClient, topicRouteCache, receiveMessageResultFilter));
         consumerService.setReadQueueSelector(readQueueSelector);
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/route/MessageQueueSelector.java
Patch:
@@ -35,9 +35,9 @@
 public class MessageQueueSelector {
     private static final int BROKER_ACTING_QUEUE_ID = -1;
 
-    // multiple queues for one broker, with queueId : normal
+    // multiple queues for brokers with queueId : normal
     private final List<SelectableMessageQueue> queues = new ArrayList<>();
-    // one queue for one broker, with queueId : -1
+    // one queue for brokers with queueId : -1
     private final List<SelectableMessageQueue> brokerActingQueues = new ArrayList<>();
     private final Map<String, SelectableMessageQueue> brokerNameQueueMap = new ConcurrentHashMap<>();
     private final AtomicInteger queueIndex;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/channel/ReceiveMessageChannel.java
Patch:
@@ -19,10 +19,11 @@
 
 import apache.rocketmq.v2.ReceiveMessageRequest;
 import apache.rocketmq.v2.ReceiveMessageResponse;
+import java.util.Iterator;
 import org.apache.rocketmq.proxy.channel.InvocationChannel;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.handler.ReceiveMessageResponseHandler;
 
-public class ReceiveMessageChannel extends InvocationChannel<ReceiveMessageRequest, ReceiveMessageResponse> {
+public class ReceiveMessageChannel extends InvocationChannel<ReceiveMessageRequest, Iterator<ReceiveMessageResponse>> {
     public ReceiveMessageChannel(ReceiveMessageResponseHandler handler) {
         super(handler);
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ForwardClientService.java
Patch:
@@ -82,9 +82,11 @@ public ForwardClientService(
         this.channelManager = channelManager;
         this.grpcClientManager = grpcClientManager;
         this.telemetryCommandManager = telemetryCommandManager;
+    }
 
+    @Override
+    public void start() throws Exception {
         this.clientSettingsService = new ClientSettingsService(this.channelManager, this.grpcClientManager, this.telemetryCommandManager);
-
         this.consumerManager = new ConsumerManager(new ConsumerIdsChangeListenerImpl());
         this.producerManager = new ProducerManager();
         this.producerManager.appendProducerChangeListener(new ProducerChangeListenerImpl());

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ForwardClientServiceTest.java
Patch:
@@ -47,6 +47,7 @@ public void beforeEach() throws Throwable {
             this.channelManager,
             this.grpcClientManager,
             this.telemetryCommandManager);
+        clientService.start();
     }
 
     @Test

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/GrpcForwardService.java
Patch:
@@ -42,7 +42,6 @@
 import apache.rocketmq.v2.TelemetryCommand;
 import io.grpc.Context;
 import io.grpc.stub.StreamObserver;
-import java.util.Iterator;
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 
@@ -56,7 +55,7 @@ public interface GrpcForwardService extends StartAndShutdown {
 
     CompletableFuture<QueryAssignmentResponse> queryAssignment(Context ctx, QueryAssignmentRequest request);
 
-    CompletableFuture<Iterator<ReceiveMessageResponse>> receiveMessage(Context ctx, ReceiveMessageRequest request);
+    void receiveMessage(Context ctx, ReceiveMessageRequest request, StreamObserver<ReceiveMessageResponse> responseObserver);
 
     CompletableFuture<NackMessageResponse> nackMessage(Context ctx, NackMessageRequest request);
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/transaction/TransactionHeartbeatRegisterService.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.rocketmq.proxy.connector.transaction;
 
 import com.google.common.collect.Sets;
+import io.grpc.Context;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -174,6 +175,7 @@ protected void sendHeartBeatToCluster(String clusterName, List<HeartbeatData> he
 
     protected void sendHeartBeatToCluster(String clusterName, HeartbeatData heartbeatData) {
         try {
+            Context ctx = Context.current();
             MessageQueueWrapper messageQueue =  this.topicRouteCache.getMessageQueue(clusterName);
             List<BrokerData> brokerDataList = messageQueue.getTopicRouteData().getBrokerDatas();
             if (brokerDataList == null) {
@@ -183,7 +185,7 @@ protected void sendHeartBeatToCluster(String clusterName, HeartbeatData heartbea
                 heartbeatExecutors.submit(() -> {
                     String brokerAddr = brokerData.selectBrokerAddr();
                     try {
-                        this.forwardProducer.heartBeat(brokerAddr, heartbeatData);
+                        this.forwardProducer.heartBeat(ctx, brokerAddr, heartbeatData);
                     } catch (Exception e) {
                         log.error("Send transactionHeartbeat to broker err. brokerAddr: {}", brokerAddr, e);
                     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ProducerService.java
Patch:
@@ -67,6 +67,7 @@ public CompletableFuture<SendMessageResponse> sendMessage(Context ctx, SendMessa
 
             // send message to broker.
             future = this.producer.sendMessage(
+                ctx,
                 selectableMessageQueue.getBrokerAddr(),
                 selectableMessageQueue.getBrokerName(),
                 convertToMessageList(ctx, request),
@@ -128,7 +129,7 @@ public CompletableFuture<ForwardMessageToDeadLetterQueueResponse> forwardMessage
             AckMessageRequestHeader ackMessageRequestHeader = GrpcConverter.buildAckMessageRequestHeader(
                 request.getTopic(), request.getGroup(), receiptHandle);
 
-            future = this.producer.sendMessageBackThenAckOrg(brokerAddr, sendMsgBackRequestHeader, ackMessageRequestHeader)
+            future = this.producer.sendMessageBackThenAckOrg(ctx, brokerAddr, sendMsgBackRequestHeader, ackMessageRequestHeader)
                 .thenApply(result -> convertToForwardMessageToDeadLetterQueueResponse(ctx, result));
         } catch (Throwable t) {
             future.completeExceptionally(t);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/TransactionService.java
Patch:
@@ -99,7 +99,7 @@ public CompletableFuture<EndTransactionResponse> endTransaction(Context ctx, End
             TransactionId handle = TransactionId.decode(request.getTransactionId());
             String brokerAddr = RemotingHelper.parseSocketAddressAddr(handle.getBrokerAddr());
             EndTransactionRequestHeader requestHeader = this.toEndTransactionRequestHeader(ctx, request);
-            this.forwardProducer.endTransaction(brokerAddr, requestHeader);
+            this.forwardProducer.endTransaction(ctx, brokerAddr, requestHeader);
             future.complete(EndTransactionResponse.newBuilder()
                 .setStatus(ResponseBuilder.buildStatus(Code.OK, Code.OK.name()))
                 .build());

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ProducerServiceTest.java
Patch:
@@ -66,7 +66,7 @@ public void beforeEach() throws Throwable {
     @Test
     public void testSendMessage() {
         CompletableFuture<SendResult> sendResultFuture = new CompletableFuture<>();
-        when(producerClient.sendMessage(anyString(), anyString(), any(), any()))
+        when(producerClient.sendMessage(any(), anyString(), anyString(), any(), any()))
             .thenReturn(sendResultFuture);
         sendResultFuture.complete(new SendResult(SendStatus.SEND_OK, "msgId", new MessageQueue(),
             1L, "txId", "offsetMsgId", "regionId"));
@@ -121,7 +121,7 @@ public void testSendMessageWithError() {
         RuntimeException ex = new RuntimeException();
 
         CompletableFuture<SendResult> sendResultFuture = new CompletableFuture<>();
-        when(producerClient.sendMessage(anyString(), anyString(), any(), any()))
+        when(producerClient.sendMessage(any(), anyString(), anyString(), any(), any()))
             .thenReturn(sendResultFuture);
         sendResultFuture.completeExceptionally(ex);
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/TransactionServiceTest.java
Patch:
@@ -72,10 +72,10 @@ public void testEndTransaction() throws Exception {
             RemotingHelper.string2SocketAddress("127.0.0.1:8080"),
             "71F99B78B6E261357FA259CCA6456118", 1234, 5678);
         doAnswer(mock -> {
-            brokerAddrRef.set(mock.getArgument(0));
-            headerRef.set(mock.getArgument(1));
+            brokerAddrRef.set(mock.getArgument(1));
+            headerRef.set(mock.getArgument(2));
             return null;
-        }).when(producerClient).endTransaction(anyString(), any());
+        }).when(producerClient).endTransaction(any(), anyString(), any());
 
         EndTransactionResponse response = transactionService.endTransaction(Context.current(), EndTransactionRequest.newBuilder()
             .setTransactionId(transactionId.getProxyTransactionId())

File: proxy/src/main/java/org/apache/rocketmq/proxy/channel/ChannelManager.java
Patch:
@@ -35,8 +35,8 @@
 
 public class ChannelManager {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
-    private final ConcurrentMap<String /* clientId */, SimpleChannel> clientIdChannelMap = new ConcurrentHashMap<>();
-    private final ConcurrentMap<String /* group */, Set<String>/* clientId */> groupClientIdMap = new ConcurrentHashMap<>();
+    protected final ConcurrentMap<String /* clientId */, SimpleChannel> clientIdChannelMap = new ConcurrentHashMap<>();
+    protected final ConcurrentMap<String /* group */, Set<String>/* clientId */> groupClientIdMap = new ConcurrentHashMap<>();
 
     public SimpleChannel createChannel() {
         return createChannel(anonymousChannelId());

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/TelemetryCommandManager.java
Patch:
@@ -22,8 +22,8 @@
 import java.util.concurrent.atomic.AtomicLong;
 
 public class TelemetryCommandManager {
-    private final ConcurrentMap<String, TelemetryCommandRecord> commandTable = new ConcurrentHashMap<>();
-    private final AtomicLong commandIdGenerator = new AtomicLong(0);
+    protected final ConcurrentMap<String, TelemetryCommandRecord> commandTable = new ConcurrentHashMap<>();
+    protected final AtomicLong commandIdGenerator = new AtomicLong(0);
 
     public String putCommand(int opaque) {
         String nonce = String.valueOf(commandIdGenerator.incrementAndGet());

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/factory/TransactionProducerFactory.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.rocketmq.remoting.RPCHook;
 
 public class TransactionProducerFactory extends AbstractMQClientFactory {
-    private final TransactionStateChecker transactionStateChecker;
+    protected final TransactionStateChecker transactionStateChecker;
 
     public TransactionProducerFactory(ScheduledExecutorService scheduledExecutorService,
         RPCHook rpcHook, TransactionStateChecker transactionStateChecker) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/GrpcClientManager.java
Patch:
@@ -32,7 +32,7 @@
 public class GrpcClientManager {
 
     // TODO: read config from topic or subscription configManager
-    private static final Settings DEFAULT_PRODUCER_SETTINGS = Settings.newBuilder()
+    protected static final Settings DEFAULT_PRODUCER_SETTINGS = Settings.newBuilder()
         .setPublishing(Publishing.newBuilder()
             .setRetryPolicy(RetryPolicy.newBuilder()
                 .setMaxAttempts(3)
@@ -46,7 +46,7 @@ public class GrpcClientManager {
             .setMaxBodySize(4 * 1024 * 1024)
             .build())
         .build();
-    private static final Settings DEFAULT_CONSUMER_SETTINGS = Settings.newBuilder()
+    protected static final Settings DEFAULT_CONSUMER_SETTINGS = Settings.newBuilder()
         .setSubscription(Subscription.newBuilder()
             .setFifo(false)
             .setBackoffPolicy(RetryPolicy.newBuilder()
@@ -61,7 +61,7 @@ public class GrpcClientManager {
             .setLongPollingTimeout(Durations.fromSeconds(30))
             .build())
         .build();
-    private static final Map<String, Settings> CLIENT_SETTINGS_MAP = new ConcurrentHashMap<>();
+    protected static final Map<String, Settings> CLIENT_SETTINGS_MAP = new ConcurrentHashMap<>();
 
     public Settings getClientSettings(Context ctx) {
         String clientId = InterceptorConstants.METADATA.get(ctx).get(InterceptorConstants.CLIENT_ID);

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseTest.java
Patch:
@@ -148,12 +148,12 @@ public void setUp() throws Exception {
 
     protected MessagingServiceGrpc.MessagingServiceStub createStub(Channel channel) {
         MessagingServiceGrpc.MessagingServiceStub stub = MessagingServiceGrpc.newStub(channel);
-        return MetadataUtils.attachHeaders(stub, header);
+        return stub.withInterceptors(MetadataUtils.newAttachHeadersInterceptor(header));
     }
 
     protected MessagingServiceGrpc.MessagingServiceBlockingStub createBlockingStub(Channel channel) {
         MessagingServiceGrpc.MessagingServiceBlockingStub stub = MessagingServiceGrpc.newBlockingStub(channel);
-        return MetadataUtils.attachHeaders(stub, header);
+        return stub.withInterceptors(MetadataUtils.newAttachHeadersInterceptor(header));
     }
 
     protected CompletableFuture<Settings> sendClientSettings(MessagingServiceGrpc.MessagingServiceStub stub,

File: proxy/src/main/java/org/apache/rocketmq/proxy/ProxyStartup.java
Patch:
@@ -81,7 +81,7 @@ public static void main(String[] args) {
             System.exit(1);
         }
 
-        System.out.printf("%s%n", new Date() + " rmq-proxy startup successfully");
+        System.out.println(new Date() + " rmq-proxy startup successfully");
         log.info(new Date() + " rmq-proxy startup successfully");
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ProducerService.java
Patch:
@@ -108,7 +108,7 @@ protected List<org.apache.rocketmq.common.message.Message> convertToMessageList(
         // use topic name as group
         Resource topic = request.getMessages(0).getTopic();
         String topicName = GrpcConverter.wrapResourceWithNamespace(topic);
-        return GrpcConverter.buildMessage(request.getMessagesList(), topic, topicName);
+        return GrpcConverter.buildMessage(request.getMessagesList(), topic);
     }
 
     protected SendMessageResponse convertToSendMessageResponse(Context ctx, SendMessageRequest request,

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v1/adapter/GrpcConverter.java
Patch:
@@ -199,8 +199,8 @@ public static ChangeInvisibleTimeRequestHeader buildChangeInvisibleTimeRequestHe
         changeInvisibleTimeRequestHeader.setQueueId(handle.getQueueId());
         changeInvisibleTimeRequestHeader.setExtraInfo(handle.getReceiptHandle());
         changeInvisibleTimeRequestHeader.setOffset(handle.getOffset());
-        changeInvisibleTimeRequestHeader.setInvisibleTime(
-            delayPolicy.getDelayInterval(ConfigurationManager.getProxyConfig().getRetryDelayLevelDelta() + request.getDeliveryAttempt()));
+//        changeInvisibleTimeRequestHeader.setInvisibleTime(
+//            delayPolicy.getDelayInterval(ConfigurationManager.getProxyConfig().getRetryDelayLevelDelta() + request.getDeliveryAttempt()));
         return changeInvisibleTimeRequestHeader;
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingProcessor.java
Patch:
@@ -44,6 +44,7 @@
 import apache.rocketmq.v2.TelemetryCommand;
 import io.grpc.Context;
 import io.grpc.stub.StreamObserver;
+import java.util.Iterator;
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseBuilder;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseWriter;
@@ -116,7 +117,7 @@ public void queryAssignment(QueryAssignmentRequest request,
 
     @Override
     public void receiveMessage(ReceiveMessageRequest request, StreamObserver<ReceiveMessageResponse> responseObserver) {
-        CompletableFuture<ReceiveMessageResponse> future = grpcForwardService.receiveMessage(Context.current(), request);
+        CompletableFuture<Iterator<ReceiveMessageResponse>> future = grpcForwardService.receiveMessage(Context.current(), request);
         future.thenAccept(response -> ResponseWriter.write(responseObserver, response))
             .exceptionally(e -> {
                 ResponseWriter.write(

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/GrpcForwardService.java
Patch:
@@ -42,6 +42,7 @@
 import apache.rocketmq.v2.TelemetryCommand;
 import io.grpc.Context;
 import io.grpc.stub.StreamObserver;
+import java.util.Iterator;
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 
@@ -55,7 +56,7 @@ public interface GrpcForwardService extends StartAndShutdown {
 
     CompletableFuture<QueryAssignmentResponse> queryAssignment(Context ctx, QueryAssignmentRequest request);
 
-    CompletableFuture<ReceiveMessageResponse> receiveMessage(Context ctx, ReceiveMessageRequest request);
+    CompletableFuture<Iterator<ReceiveMessageResponse>> receiveMessage(Context ctx, ReceiveMessageRequest request);
 
     CompletableFuture<NackMessageResponse> nackMessage(Context ctx, NackMessageRequest request);
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ConsumerService.java
Patch:
@@ -124,8 +124,7 @@ public CompletableFuture<ReceiveMessageResponse> receiveMessage(Context ctx, Rec
 
     protected PopMessageRequestHeader buildPopMessageRequestHeader(Context ctx, ReceiveMessageRequest request) {
         checkSubscriptionData(request.getMessageQueue().getTopic(), request.getFilterExpression());
-        // TODO: get fifo config from subscriptionGroupManager
-        boolean fifo = false;
+        boolean fifo = grpcClientManager.getClientSettings(ctx).getSubscription().getFifo();
         return GrpcConverter.buildPopMessageRequestHeader(request, GrpcConverter.buildPollTimeFromContext(ctx), fifo);
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/RequestMapping.java
Patch:
@@ -44,7 +44,7 @@ public class RequestMapping {
             put(AckMessageRequest.getDescriptor().getFullName(), RequestCode.UPDATE_CONSUMER_OFFSET);
             put(NackMessageRequest.getDescriptor().getFullName(), RequestCode.CONSUMER_SEND_MSG_BACK);
             put(ForwardMessageToDeadLetterQueueResponse.getDescriptor().getFullName(), RequestCode.CONSUMER_SEND_MSG_BACK);
-            put(EndTransactionRequest.getDescriptor().getFullName(), RequestCode.CONSUMER_SEND_MSG_BACK);
+            put(EndTransactionRequest.getDescriptor().getFullName(), RequestCode.END_TRANSACTION);
             put(NotifyClientTerminationRequest.getDescriptor().getFullName(), RequestCode.UNREGISTER_CLIENT);
             put(ChangeInvisibleDurationRequest.getDescriptor().getFullName(), RequestCode.CONSUMER_SEND_MSG_BACK);
 
@@ -58,7 +58,7 @@ public class RequestMapping {
             put(apache.rocketmq.v1.AckMessageRequest.getDescriptor().getFullName(), RequestCode.UPDATE_CONSUMER_OFFSET);
             put(apache.rocketmq.v1.NackMessageRequest.getDescriptor().getFullName(), RequestCode.CONSUMER_SEND_MSG_BACK);
             put(apache.rocketmq.v1.ForwardMessageToDeadLetterQueueResponse.getDescriptor().getFullName(), RequestCode.CONSUMER_SEND_MSG_BACK);
-            put(apache.rocketmq.v1.EndTransactionRequest.getDescriptor().getFullName(), RequestCode.CONSUMER_SEND_MSG_BACK);
+            put(apache.rocketmq.v1.EndTransactionRequest.getDescriptor().getFullName(), RequestCode.END_TRANSACTION);
             put(apache.rocketmq.v1.QueryOffsetRequest.getDescriptor().getFullName(), RequestCode.SEARCH_OFFSET_BY_TIMESTAMP);
             put(apache.rocketmq.v1.PullMessageRequest.getDescriptor().getFullName(), RequestCode.PULL_MESSAGE);
             put(apache.rocketmq.v1.NotifyClientTerminationRequest.getDescriptor().getFullName(), RequestCode.UNREGISTER_CLIENT);

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/TransactionalMessageCheckService.java
Patch:
@@ -42,8 +42,8 @@ public String getServiceName() {
     @Override
     public void run() {
         log.info("Start transaction check service thread!");
-        long checkInterval = brokerController.getBrokerConfig().getTransactionCheckInterval();
         while (!this.isStopped()) {
+            long checkInterval = brokerController.getBrokerConfig().getTransactionCheckInterval();
             this.waitForRunning(checkInterval);
         }
         log.info("End transaction check service thread!");

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/ResponseBuilder.java
Patch:
@@ -29,7 +29,7 @@ public static Status buildStatus(Throwable t) {
             t = t.getCause();
         }
         if (t instanceof ProxyException) {
-            ProxyException proxyException = (ProxyException) t.getCause();
+            ProxyException proxyException = (ProxyException) t;
             return ResponseBuilder.buildStatus(proxyException.getCode(), proxyException.getMessage());
         }
         return ResponseBuilder.buildStatus(Code.INTERNAL_SERVER_ERROR, "internal error");

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/ClusterGrpcTest.java
Patch:
@@ -93,7 +93,7 @@ public void testSendReceiveMessageThenToDLQ() throws Exception {
     }
 
     @Test
-    public void testSimpleConsumer() throws Exception {
-        super.testSimpleConsumer();
+    public void testSimpleConsumerToDLQ() throws Exception {
+        super.testSimpleConsumerToDLQ();
     }
 }

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/BaseServiceTest.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.rocketmq.proxy.connector.ForwardWriteConsumer;
 import org.apache.rocketmq.proxy.connector.transaction.TransactionHeartbeatRegisterService;
 import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
+import org.apache.rocketmq.proxy.grpc.v2.service.ClusterGrpcService;
 import org.apache.rocketmq.proxy.grpc.v2.service.GrpcClientManager;
 import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.junit.Before;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ConsumerService.java
Patch:
@@ -132,7 +132,8 @@ public CompletableFuture<ReceiveMessageResponse> receiveMessage(Context ctx, Rec
 
     protected PopMessageRequestHeader buildPopMessageRequestHeader(Context ctx, ReceiveMessageRequest request) {
         checkSubscriptionData(request.getMessageQueue().getTopic(), request.getFilterExpression());
-        boolean fifo = grpcClientManager.getClientSettings(ctx).getSubscription().getFifo();
+        // TODO: get fifo config from subscriptionGroupManager
+        boolean fifo = false;
         return GrpcConverter.buildPopMessageRequestHeader(request, GrpcConverter.buildPollTimeFromContext(ctx), fifo);
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/channel/SimpleChannel.java
Patch:
@@ -39,7 +39,7 @@
  * @see io.netty.channel.Channel#writeAndFlush
  */
 public class SimpleChannel extends AbstractChannel {
-    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
+    protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected final String remoteAddress;
     protected final String localAddress;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/handler/ReceiveMessageResponseHandler.java
Patch:
@@ -57,7 +57,6 @@ public ReceiveMessageResponseHandler(String brokerName, boolean fifo) {
     @Override
     public void handle(RemotingCommand responseCommand,
         InvocationContext<ReceiveMessageRequest, ReceiveMessageResponse> context) {
-        ReceiveMessageRequest request = context.getRequest();
         CompletableFuture<ReceiveMessageResponse> future = context.getResponse();
 
         long currentTimeInMillis = System.currentTimeMillis();

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/handler/SendMessageResponseHandler.java
Patch:
@@ -25,16 +25,16 @@
 import org.apache.rocketmq.common.protocol.ResponseCode;
 import org.apache.rocketmq.common.protocol.header.SendMessageResponseHeader;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.channel.InvocationContext;
 import org.apache.rocketmq.proxy.connector.transaction.TransactionId;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseBuilder;
 import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 public class SendMessageResponseHandler implements ResponseHandler<SendMessageRequest, SendMessageResponse> {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     private final String messageId;
     private final int sysFlag;
     private final String localAddress;

File: common/src/main/java/org/apache/rocketmq/common/constant/LoggerName.java
Patch:
@@ -45,5 +45,4 @@ public class LoggerName {
     public static final String FAILOVER_LOGGER_NAME = "RocketmqFailover";
     public static final String STDOUT_LOGGER_NAME = "STDOUT";
     public static final String PROXY_LOGGER_NAME = "RocketmqProxy";
-    public static final String GRPC_LOGGER_NAME = "RocketmqGrpc";
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/channel/ChannelManager.java
Patch:
@@ -27,14 +27,14 @@
 import java.util.function.Supplier;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.constant.LoggerName;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
 import org.apache.rocketmq.proxy.grpc.v1.adapter.channel.GrpcClientChannel;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 public class ChannelManager {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     private final ConcurrentMap<String /* clientId */, SimpleChannel> clientIdChannelMap = new ConcurrentHashMap<>();
     private final ConcurrentMap<String /* group */, Set<String>/* clientId */> groupClientIdMap = new ConcurrentHashMap<>();
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/channel/SimpleChannel.java
Patch:
@@ -30,16 +30,16 @@
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 /**
  * SimpleChannel is used to handle writeAndFlush situation in processor
  * @see io.netty.channel.ChannelHandlerContext#writeAndFlush
  * @see io.netty.channel.Channel#writeAndFlush
  */
 public class SimpleChannel extends AbstractChannel {
-    protected static final Logger log = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     protected final String remoteAddress;
     protected final String localAddress;

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/Configuration.java
Patch:
@@ -21,11 +21,12 @@
 import java.io.File;
 import java.nio.file.Files;
 import java.util.concurrent.atomic.AtomicReference;
+import org.apache.rocketmq.common.constant.LoggerName;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 public class Configuration {
-    private final static Logger log = LoggerFactory.getLogger(Configuration.class);
+    private final static Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     private final AtomicReference<ProxyConfig> proxyConfigReference = new AtomicReference<>();
 
     public void init() throws Exception {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServer.java
Patch:
@@ -36,18 +36,18 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
 import org.apache.rocketmq.common.utils.ServiceProvider;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.grpc.interceptor.AuthenticationInterceptor;
 import org.apache.rocketmq.proxy.grpc.interceptor.ContextInterceptor;
 import org.apache.rocketmq.proxy.grpc.interceptor.HeaderInterceptor;
 import org.apache.rocketmq.proxy.grpc.v2.GrpcMessagingProcessor;
 import org.apache.rocketmq.proxy.grpc.v2.service.GrpcForwardService;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 public class GrpcServer implements StartAndShutdown {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private final io.grpc.Server server;
     private final ThreadPoolExecutor executor;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v1/adapter/GrpcConverter.java
Patch:
@@ -89,15 +89,15 @@
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
 import org.apache.rocketmq.common.utils.BinaryUtil;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.common.DelayPolicy;
 import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.connector.transaction.TransactionId;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 public class GrpcConverter {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     public static String wrapResourceWithNamespace(Resource resource) {
         return NamespaceUtil.wrapNamespace(resource.getResourceNamespace(), resource.getName());

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v1/service/ClusterGrpcService.java
Patch:
@@ -55,14 +55,14 @@
 import io.grpc.Context;
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.common.constant.LoggerName;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.grpc.v1.adapter.ResponseBuilder;
 import org.apache.rocketmq.proxy.grpc.v1.adapter.V2Converter;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 public class ClusterGrpcService extends AbstractStartAndShutdown implements GrpcForwardService {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private final org.apache.rocketmq.proxy.grpc.v2.service.ClusterGrpcService clusterGrpcService;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/GrpcConverter.java
Patch:
@@ -85,15 +85,15 @@
 import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.utils.BinaryUtil;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.common.DelayPolicy;
 import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.connector.transaction.TransactionId;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 public class GrpcConverter {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     public static String wrapResourceWithNamespace(Resource resource) {
         return NamespaceUtil.wrapNamespace(resource.getResourceNamespace(), resource.getName());

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/ResponseWriter.java
Patch:
@@ -20,11 +20,11 @@
 import io.grpc.stub.ServerCallStreamObserver;
 import io.grpc.stub.StreamObserver;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 public class ResponseWriter {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     public static <T> void write(StreamObserver<T> observer, final T response) {
         if (observer instanceof ServerCallStreamObserver) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/handler/ReceiveMessageResponseHandler.java
Patch:
@@ -36,16 +36,16 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.protocol.header.ExtraInfoUtil;
 import org.apache.rocketmq.common.protocol.header.PopMessageResponseHeader;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.channel.InvocationContext;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseBuilder;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.remoting.protocol.RemotingSysResponseCode;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 public class ReceiveMessageResponseHandler implements ResponseHandler<ReceiveMessageRequest, ReceiveMessageResponse> {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     private final String brokerName;
     private final boolean fifo;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/ClusterGrpcService.java
Patch:
@@ -47,6 +47,8 @@
 import java.util.concurrent.ScheduledExecutorService;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.channel.ChannelManager;
 import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
@@ -60,11 +62,9 @@
 import org.apache.rocketmq.proxy.grpc.v2.service.cluster.ProducerService;
 import org.apache.rocketmq.proxy.grpc.v2.service.cluster.RouteService;
 import org.apache.rocketmq.proxy.grpc.v2.service.cluster.TransactionService;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 public class ClusterGrpcService extends AbstractStartAndShutdown implements GrpcForwardService {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private final ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(
         new ThreadFactoryImpl("ClusterGrpcServiceScheduledThread")

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/LocalGrpcService.java
Patch:
@@ -78,6 +78,8 @@
 import org.apache.rocketmq.common.protocol.header.SendMessageRequestHeader;
 import org.apache.rocketmq.common.protocol.header.UnregisterClientRequestHeader;
 import org.apache.rocketmq.common.protocol.heartbeat.HeartbeatData;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.proxy.channel.ChannelManager;
 import org.apache.rocketmq.proxy.channel.InvocationContext;
 import org.apache.rocketmq.proxy.channel.SimpleChannel;
@@ -102,11 +104,9 @@
 import org.apache.rocketmq.remoting.netty.NettyRemotingAbstract;
 import org.apache.rocketmq.remoting.protocol.LanguageCode;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 public class LocalGrpcService extends AbstractStartAndShutdown implements GrpcForwardService {
-    private static final Logger log = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
 
     private final BrokerController brokerController;
     private final ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/RouteService.java
Patch:
@@ -29,6 +29,7 @@
 import apache.rocketmq.v2.QueryRouteRequest;
 import apache.rocketmq.v2.QueryRouteResponse;
 import apache.rocketmq.v2.Resource;
+import apache.rocketmq.v2.Settings;
 import com.google.common.base.Preconditions;
 import com.google.common.net.HostAndPort;
 import io.grpc.Context;
@@ -112,7 +113,7 @@ public CompletableFuture<QueryRouteResponse> queryRoute(Context ctx, QueryRouteR
 
             List<MessageQueue> messageQueueList = new ArrayList<>();
             if (ProxyMode.isClusterMode(mode.name())) {
-                GrpcClientManager.ActiveClientSettings clientSettings = grpcClientManager.getClientSettings(ctx);
+                Settings clientSettings = grpcClientManager.getClientSettings(ctx);
                 Endpoints resEndpoints = this.queryRouteEndpointConverter.convert(ctx, clientSettings.getAccessPoint());
                 if (resEndpoints == null || resEndpoints.getDefaultInstanceForType().equals(resEndpoints)) {
                     future.complete(QueryRouteResponse.newBuilder()
@@ -243,7 +244,7 @@ public CompletableFuture<QueryAssignmentResponse> queryAssignment(Context ctx, Q
                 }
             }
             if (ProxyMode.isClusterMode(mode)) {
-                GrpcClientManager.ActiveClientSettings clientSettings = grpcClientManager.getClientSettings(ctx);
+                Settings clientSettings = grpcClientManager.getClientSettings(ctx);
                 Endpoints resEndpoints = this.queryAssignmentEndpointConverter.convert(ctx, clientSettings.getAccessPoint());
                 if (resEndpoints == null || Endpoints.getDefaultInstance().equals(resEndpoints)) {
                     future.complete(QueryAssignmentResponse.newBuilder()

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/RouteService.java
Patch:
@@ -20,7 +20,6 @@
 import apache.rocketmq.v2.AddressScheme;
 import apache.rocketmq.v2.Assignment;
 import apache.rocketmq.v2.Broker;
-import apache.rocketmq.v2.ClientSettings;
 import apache.rocketmq.v2.Code;
 import apache.rocketmq.v2.Endpoints;
 import apache.rocketmq.v2.MessageQueue;
@@ -113,7 +112,7 @@ public CompletableFuture<QueryRouteResponse> queryRoute(Context ctx, QueryRouteR
 
             List<MessageQueue> messageQueueList = new ArrayList<>();
             if (ProxyMode.isClusterMode(mode.name())) {
-                ClientSettings clientSettings = grpcClientManager.getClientSettings(ctx);
+                GrpcClientManager.ActiveClientSettings clientSettings = grpcClientManager.getClientSettings(ctx);
                 Endpoints resEndpoints = this.queryRouteEndpointConverter.convert(ctx, clientSettings.getAccessPoint());
                 if (resEndpoints == null || resEndpoints.getDefaultInstanceForType().equals(resEndpoints)) {
                     future.complete(QueryRouteResponse.newBuilder()
@@ -244,7 +243,7 @@ public CompletableFuture<QueryAssignmentResponse> queryAssignment(Context ctx, Q
                 }
             }
             if (ProxyMode.isClusterMode(mode)) {
-                ClientSettings clientSettings = grpcClientManager.getClientSettings(ctx);
+                GrpcClientManager.ActiveClientSettings clientSettings = grpcClientManager.getClientSettings(ctx);
                 Endpoints resEndpoints = this.queryAssignmentEndpointConverter.convert(ctx, clientSettings.getAccessPoint());
                 if (resEndpoints == null || Endpoints.getDefaultInstance().equals(resEndpoints)) {
                     future.complete(QueryAssignmentResponse.newBuilder()

File: broker/src/main/java/org/apache/rocketmq/broker/client/DefaultConsumerIdsChangeListener.java
Patch:
@@ -90,6 +90,8 @@ public void handle(ConsumerGroupEvent event, String group, Object... args) {
                 Collection<SubscriptionData> subscriptionDataList = (Collection<SubscriptionData>) args[0];
                 this.brokerController.getConsumerFilterManager().register(group, subscriptionDataList);
                 break;
+            case CLIENT_UNREGISTER:
+                break;
             default:
                 throw new RuntimeException("Unknown event " + event);
         }

File: broker/src/main/java/org/apache/rocketmq/broker/client/ProducerChangeListener.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.rocketmq.broker.client;
 
-public interface ProducerGroupOfflineListener {
+public interface ProducerChangeListener {
 
-    void onOffline(String group);
+    void handle(ProducerGroupEvent event, String group, ClientChannelInfo clientChannelInfo);
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/RouteService.java
Patch:
@@ -48,7 +48,6 @@
 import org.apache.rocketmq.proxy.connector.route.MessageQueueWrapper;
 import org.apache.rocketmq.proxy.connector.route.SelectableMessageQueue;
 import org.apache.rocketmq.proxy.connector.route.TopicRouteHelper;
-import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ProxyMode;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseBuilder;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java
Patch:
@@ -454,6 +454,8 @@ public void operationComplete(ChannelFuture future) throws Exception {
                     response = null;
                 }
                 break;
+            case ResponseCode.POLLING_TIMEOUT:
+                return response;
             default:
                 assert false;
         }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ChangeInvisibleTimeProcessor.java
Patch:
@@ -179,6 +179,7 @@ private PutMessageResult appendCheckPoint(final ChangeInvisibleTimeRequestHeader
         ck.setTopic(requestHeader.getTopic());
         ck.setQueueId((byte) queueId);
         ck.addDiff(0);
+        ck.setBrokerName(brokerName);
 
         msgInner.setBody(JSON.toJSONString(ck).getBytes(DataConverter.charset));
         msgInner.setQueueId(reviveQid);

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java
Patch:
@@ -78,7 +78,7 @@ public class ProxyConfig {
     private int transactionHeartbeatPeriodSecond = 20;
     private int transactionHeartbeatBatchNum = 100;
 
-    private int longPollingReserveTimeInMillis = 10000;
+    private long longPollingReserveTimeInMillis = 10000;
 
     private int retryDelayLevelDelta = 2;
     private String messageDelayLevel = "1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h";
@@ -373,11 +373,11 @@ public void setTransactionHeartbeatBatchNum(int transactionHeartbeatBatchNum) {
         this.transactionHeartbeatBatchNum = transactionHeartbeatBatchNum;
     }
 
-    public int getLongPollingReserveTimeInMillis() {
+    public long getLongPollingReserveTimeInMillis() {
         return longPollingReserveTimeInMillis;
     }
 
-    public void setLongPollingReserveTimeInMillis(int longPollingReserveTimeInMillis) {
+    public void setLongPollingReserveTimeInMillis(long longPollingReserveTimeInMillis) {
         this.longPollingReserveTimeInMillis = longPollingReserveTimeInMillis;
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ForwardClientService.java
Patch:
@@ -207,6 +207,8 @@ public void onNext(TelemetryCommand request) {
                         Publishing publishing = settings.getPublishing();
                         for (Resource topic : publishing.getTopicsList()) {
                             String topicName = GrpcConverter.wrapResourceWithNamespace(topic);
+                            // use topic name as producer group
+                            connectorManager.getTransactionHeartbeatRegisterService().addProducerGroup(topicName, topicName);
                             GrpcClientChannel producerChannel = GrpcClientChannel.create(channelManager, topicName, clientId, telemetryCommandManager);
                             producerChannel.setClientObserver(responseObserver);
                         }

File: test/src/test/java/org/apache/rocketmq/test/base/BaseConf.java
Patch:
@@ -142,7 +142,7 @@ public static String initTopic() {
     }
 
     public static String initTopicOnSampleTopicBroker(String sampleTopic) {
-        String topic = RandomUtils.getStringWithNumber(10);
+        String topic = MQRandomUtils.getRandomTopic();
         return initTopicOnSampleTopicBroker(topic, sampleTopic);
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/AuthenticationInterceptor.java
Patch:
@@ -58,6 +58,7 @@ public void onMessage(R message) {
                 for (AccessValidator accessValidator : accessValidatorList) {
                     accessValidator.validate(accessValidator.parse(messageV3, metadataHeader));
                 }
+                super.onMessage(message);
             }
         };
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java
Patch:
@@ -80,7 +80,7 @@ public class ProxyConfig {
 
     private int longPollingReserveTimeInMillis = 10000;
 
-    private int retryDelayLevelDelta = 3;
+    private int retryDelayLevelDelta = 2;
     private String messageDelayLevel = "1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h";
 
     private boolean enableACL = false;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/LocalGrpcService.java
Patch:
@@ -252,7 +252,8 @@ public CompletableFuture<ReceiveMessageResponse> receiveMessage(Context ctx, Rec
         long pollTime = GrpcConverter.buildPollTimeFromContext(ctx);
         String clientId = InterceptorConstants.METADATA.get(ctx).get(InterceptorConstants.CLIENT_ID);
         ClientSettings clientSettings = grpcClientManager.getClientSettings(clientId);
-        PopMessageRequestHeader requestHeader = GrpcConverter.buildPopMessageRequestHeader(request, pollTime);
+        PopMessageRequestHeader requestHeader = GrpcConverter.buildPopMessageRequestHeader(request, pollTime,
+            clientSettings.getSettings().getSubscription().getFifo());
         RemotingCommand command = RemotingCommand.createRequestCommand(RequestCode.POP_MESSAGE, requestHeader);
         command.makeCustomHeaderToNet();
 

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseTest.java
Patch:
@@ -192,9 +192,6 @@ public ReceiveMessageRequest buildReceiveMessageRequest(String group, String top
             .setInvisibleDuration(Duration.newBuilder()
                 .setSeconds(3)
                 .build())
-            .setInitializationTimestamp(Timestamp.newBuilder()
-                .setSeconds(TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis()))
-                .build())
             .build();
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/ProxyStartup.java
Patch:
@@ -73,7 +73,7 @@ public static void main(String[] args) {
                 try {
                     PROXY_START_AND_SHUTDOWN.shutdown();
                 } catch (Exception e) {
-                    log.error("err when shutdown proxy", e);
+                    log.error("err when shutdown rmq-proxy", e);
                 }
             }));
         } catch (Exception e) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/ClusterGrpcService.java
Patch:
@@ -72,7 +72,8 @@ public class ClusterGrpcService extends AbstractStartAndShutdown implements Grpc
     private static final Logger log = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
 
     private final ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(
-        new ThreadFactoryImpl("ClusterGrpcServiceScheduledThread"));
+        new ThreadFactoryImpl("ClusterGrpcServiceScheduledThread")
+    );
 
     private final ChannelManager channelManager;
     private final ConnectorManager connectorManager;
@@ -179,7 +180,6 @@ private class ClusterGrpcServiceStartAndShutdown implements StartAndShutdown {
 
         @Override
         public void start() throws Exception {
-
         }
 
         @Override

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/ClusterGrpcService.java
Patch:
@@ -57,7 +57,7 @@
 import org.apache.rocketmq.proxy.connector.ConnectorManager;
 import org.apache.rocketmq.proxy.connector.transaction.TransactionStateCheckRequest;
 import org.apache.rocketmq.proxy.connector.transaction.TransactionStateChecker;
-import org.apache.rocketmq.proxy.common.PollResponseManager;
+import org.apache.rocketmq.proxy.common.TelemetryCommandManager;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ProxyMode;
 import org.apache.rocketmq.proxy.grpc.v2.service.cluster.ConsumerService;
 import org.apache.rocketmq.proxy.grpc.v2.service.cluster.ForwardClientService;
@@ -82,13 +82,13 @@ public class ClusterGrpcService extends AbstractStartAndShutdown implements Grpc
     private final ForwardClientService clientService;
     private final PullMessageService pullMessageService;
     private final TransactionService transactionService;
-    private final PollResponseManager pollCommandResponseManager;
+    private final TelemetryCommandManager pollCommandResponseManager;
     private final GrpcClientManager grpcClientManager;
 
     public ClusterGrpcService() {
         this.channelManager = new ChannelManager();
         this.grpcClientManager = new GrpcClientManager();
-        this.pollCommandResponseManager = new PollResponseManager();
+        this.pollCommandResponseManager = new TelemetryCommandManager();
         this.connectorManager = new ConnectorManager(new GrpcTransactionStateChecker());
         this.consumerService = new ConsumerService(connectorManager, grpcClientManager);
         this.producerService = new ProducerService(connectorManager);

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ForwardClientServiceTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.proxy.channel.ChannelManager;
-import org.apache.rocketmq.proxy.common.PollResponseManager;
+import org.apache.rocketmq.proxy.common.TelemetryCommandManager;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.channel.GrpcClientChannel;
 import org.apache.rocketmq.remoting.protocol.LanguageCode;
 import org.junit.Test;
@@ -37,7 +37,7 @@
 public class ForwardClientServiceTest extends BaseServiceTest {
 
     private ChannelManager channelManager = new ChannelManager();
-    private PollResponseManager pollResponseManager = new PollResponseManager();
+    private TelemetryCommandManager telemetryCommandManager = new TelemetryCommandManager();
     private ForwardClientService clientService;
 
     @Override
@@ -47,7 +47,7 @@ public void beforeEach() throws Throwable {
             Executors.newSingleThreadScheduledExecutor(),
             this.channelManager,
             this.grpcClientManager,
-            this.pollResponseManager);
+            this.telemetryCommandManager);
     }
 
     @Test

File: test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseTest.java
Patch:
@@ -107,7 +107,6 @@ public QueryRouteRequest buildQueryRouteRequest(String topic, Endpoints endpoint
             .setTopic(Resource.newBuilder()
                 .setName(topic)
                 .build())
-            .setEndpoints(endpoints)
             .build();
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v1/service/ClusterGrpcService.java
Patch:
@@ -67,7 +67,7 @@ public class ClusterGrpcService extends AbstractStartAndShutdown implements Grpc
     private final org.apache.rocketmq.proxy.grpc.v2.service.ClusterGrpcService clusterGrpcService;
 
     public ClusterGrpcService() {
-        this.clusterGrpcService = new org.apache.rocketmq.proxy.grpc.v2.service.ClusterGrpcService();;
+        this.clusterGrpcService = new org.apache.rocketmq.proxy.grpc.v2.service.ClusterGrpcService();
 
         this.appendStartAndShutdown(clusterGrpcService);
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/TransactionService.java
Patch:
@@ -37,7 +37,7 @@
 import org.apache.rocketmq.proxy.grpc.v2.adapter.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseBuilder;
 import org.apache.rocketmq.proxy.grpc.v2.adapter.ResponseHook;
-import org.apache.rocketmq.proxy.grpc.v1.adapter.channel.GrpcClientChannel;
+import org.apache.rocketmq.proxy.grpc.v2.adapter.channel.GrpcClientChannel;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 
 public class TransactionService extends BaseService implements TransactionStateChecker {

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ForwardClientServiceTest.java
Patch:
@@ -68,7 +68,7 @@ public void testProducerHeartbeat() {
         assertNotNull(channel);
         assertTrue(channel instanceof GrpcClientChannel);
 
-        clientService.unregister(ctx, NotifyClientTerminationRequest.newBuilder()
+        clientService.notifyClientTermination(ctx, NotifyClientTerminationRequest.newBuilder()
             .setClientId("clientId")
             .setProducerGroup(Resource.newBuilder()
                 .setName("producerGroup")
@@ -127,7 +127,7 @@ public void testConsumerHeartbeat() {
         assertEquals("*", consumerGroupInfo.getSubscriptionTable().get("topic").getSubString());
 
 
-        clientService.unregister(ctx, NotifyClientTerminationRequest.newBuilder()
+        clientService.notifyClientTermination(ctx, NotifyClientTerminationRequest.newBuilder()
             .setClientId("clientId")
             .setConsumerGroup(Resource.newBuilder()
                 .setName("consumerGroup")

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessValidator.java
Patch:
@@ -53,6 +53,7 @@
 import org.apache.rocketmq.common.protocol.heartbeat.ConsumerData;
 import org.apache.rocketmq.common.protocol.heartbeat.HeartbeatData;
 import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
+import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 import static org.apache.rocketmq.acl.plain.PlainAccessResource.getRetryTopic;
@@ -156,7 +157,7 @@ public AccessResource parse(RemotingCommand request, String remoteAddr) {
         PlainAccessResource accessResource = new PlainAccessResource();
         String remoteAddress = header.getRemoteAddress();
         if (remoteAddress != null && remoteAddress.contains(":")) {
-            accessResource.setWhiteRemoteAddress(remoteAddress.substring(0, remoteAddress.lastIndexOf(':')));
+            accessResource.setWhiteRemoteAddress(RemotingHelper.parseHostFromAddress(remoteAddress));
         } else {
             accessResource.setWhiteRemoteAddress(remoteAddress);
         }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/BaseService.java
Patch:
@@ -44,11 +44,11 @@ protected ReceiptHandle resolveReceiptHandle(Context ctx, String receiptHandleSt
 
     protected String getBrokerAddr(Context ctx, String brokerName) throws Exception {
         if (StringUtils.isBlank(brokerName)) {
-            throw new ProxyException(Code.INVALID_ARGUMENT, "broker name is empty");
+            throw new ProxyException(Code.UNRECOGNIZED, "broker name is empty");
         }
         String addr = this.connectorManager.getTopicRouteCache().getBrokerAddr(brokerName);
         if (StringUtils.isBlank(addr)) {
-            throw new ProxyException(Code.NOT_FOUND, brokerName + " not exist");
+            throw new ProxyException(Code.UNRECOGNIZED, brokerName + " not exist");
         }
         return addr;
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ConsumerService.java
Patch:
@@ -249,7 +249,7 @@ public CompletableFuture<NackMessageResponse> nackMessage(Context ctx, NackMessa
             ReceiptHandle receiptHandle = this.resolveReceiptHandle(ctx, request.getReceiptHandle());
             String brokerAddr = this.getBrokerAddr(ctx, receiptHandle.getBrokerName());
 
-            Settings settings = GrpcClientManager.getClientSettings(ctx);
+            Settings settings = GrpcClientManager.getClientSettings(ctx).getSettings();
             int maxDeliveryAttempts = settings.getSubscription().getDeadLetterPolicy().getMaxDeliveryAttempts();
             if (request.getDeliveryAttempt() >= maxDeliveryAttempts) {
                 CompletableFuture<RemotingCommand> resultFuture = this.producer.sendMessageBack(

File: test/src/test/java/org/apache/rocketmq/test/grpc/v1/GrpcBaseTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.test.base;
+package org.apache.rocketmq.test.grpc.v1;
 
 import apache.rocketmq.v1.AckMessageRequest;
 import apache.rocketmq.v1.AckMessageResponse;
@@ -49,11 +49,10 @@
 import java.io.IOException;
 import java.security.cert.CertificateException;
 import java.util.concurrent.TimeUnit;
-import java.util.function.Function;
-import java.util.function.Supplier;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.grpc.interceptor.ContextInterceptor;
 import org.apache.rocketmq.proxy.grpc.interceptor.HeaderInterceptor;
+import org.apache.rocketmq.test.base.BaseConf;
 import org.junit.Rule;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: proxy/src/main/java/org/apache/rocketmq/proxy/channel/ChannelManager.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.proxy.common.Cleaner;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
-import org.apache.rocketmq.proxy.grpc.adapter.channel.GrpcClientChannel;
+import org.apache.rocketmq.proxy.grpc.v1.adapter.channel.GrpcClientChannel;
 import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: proxy/src/main/java/org/apache/rocketmq/proxy/channel/InvocationChannel.java
Patch:
@@ -24,8 +24,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import org.apache.rocketmq.proxy.common.Cleaner;
-import org.apache.rocketmq.proxy.grpc.adapter.InvocationContext;
-import org.apache.rocketmq.proxy.grpc.adapter.handler.ResponseHandler;
+import org.apache.rocketmq.proxy.grpc.v2.adapter.handler.ResponseHandler;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public abstract class InvocationChannel<R, W> extends SimpleChannel implements Cleaner {

File: proxy/src/main/java/org/apache/rocketmq/proxy/channel/InvocationContext.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.adapter;
+package org.apache.rocketmq.proxy.channel;
 
 import java.time.Duration;
 import java.util.concurrent.CompletableFuture;

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/DelayPolicy.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.adapter;
+package org.apache.rocketmq.proxy.common;
 
 import com.google.common.base.Splitter;
 import com.google.common.collect.Lists;

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/ParameterConverter.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.grpc.adapter;
+package org.apache.rocketmq.proxy.common;
 
 import io.grpc.Context;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/PollResponseFuture.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.adapter;
+package org.apache.rocketmq.proxy.common;
 
 public class PollResponseFuture {
     private final String commandId;

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/PollResponseManager.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.adapter;
+package org.apache.rocketmq.proxy.common;
 
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.rocketmq.proxy.config;
 
-import org.apache.rocketmq.proxy.grpc.adapter.ProxyMode;
+import org.apache.rocketmq.proxy.grpc.v2.adapter.ProxyMode;
 
 public class ProxyConfig {
     public final static String CONFIG_FILE_NAME = "rmq-proxy.json";

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServer.java
Patch:
@@ -39,7 +39,8 @@
 import org.apache.rocketmq.proxy.grpc.interceptor.AuthenticationInterceptor;
 import org.apache.rocketmq.proxy.grpc.interceptor.ContextInterceptor;
 import org.apache.rocketmq.proxy.grpc.interceptor.HeaderInterceptor;
-import org.apache.rocketmq.proxy.grpc.service.GrpcForwardService;
+import org.apache.rocketmq.proxy.grpc.v2.service.GrpcForwardService;
+import org.apache.rocketmq.proxy.grpc.v2.GrpcMessagingProcessor;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/AuthenticationInterceptor.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.List;
 import org.apache.rocketmq.acl.AccessValidator;
 import org.apache.rocketmq.acl.common.MetadataHeader;
-import org.apache.rocketmq.proxy.common.RequestMapping;
+import org.apache.rocketmq.proxy.grpc.v2.adapter.RequestMapping;
 
 public class AuthenticationInterceptor implements ServerInterceptor {
     private final List<AccessValidator> accessValidatorList;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v1/adapter/GrpcConverter.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.adapter;
+package org.apache.rocketmq.proxy.grpc.v1.adapter;
 
 import apache.rocketmq.v1.AckMessageRequest;
 import apache.rocketmq.v1.ChangeInvisibleDurationRequest;
@@ -89,6 +89,7 @@
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
 import org.apache.rocketmq.common.utils.BinaryUtil;
+import org.apache.rocketmq.proxy.common.DelayPolicy;
 import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.connector.transaction.TransactionId;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v1/adapter/ProxyException.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.grpc.adapter;
+package org.apache.rocketmq.proxy.grpc.v1.adapter;
 
 import com.google.rpc.Code;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v1/adapter/ResponseBuilder.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.adapter;
+package org.apache.rocketmq.proxy.grpc.v1.adapter;
 
 import apache.rocketmq.v1.HeartbeatResponse;
 import apache.rocketmq.v1.ResponseCommon;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v1/adapter/channel/GrpcClientChannel.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.grpc.adapter.channel;
+package org.apache.rocketmq.proxy.grpc.v1.adapter.channel;
 
 import apache.rocketmq.v1.PollCommandResponse;
 import apache.rocketmq.v1.PrintThreadStackTraceCommand;
@@ -31,8 +31,8 @@
 import org.apache.rocketmq.common.protocol.header.GetConsumerRunningInfoRequestHeader;
 import org.apache.rocketmq.proxy.channel.ChannelManager;
 import org.apache.rocketmq.proxy.channel.SimpleChannel;
-import org.apache.rocketmq.proxy.grpc.adapter.GrpcConverter;
-import org.apache.rocketmq.proxy.grpc.adapter.PollResponseManager;
+import org.apache.rocketmq.proxy.grpc.v1.adapter.GrpcConverter;
+import org.apache.rocketmq.proxy.common.PollResponseManager;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public class GrpcClientChannel extends SimpleChannel {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v1/service/GrpcForwardService.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.service;
+package org.apache.rocketmq.proxy.grpc.v1.service;
 
 import apache.rocketmq.v1.AckMessageRequest;
 import apache.rocketmq.v1.AckMessageResponse;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/ProxyMode.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.adapter;
+package org.apache.rocketmq.proxy.grpc.v2.adapter;
 
 public enum ProxyMode {
     LOCAL("LOCAL"),

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/RequestMapping.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.common;
+package org.apache.rocketmq.proxy.grpc.v2.adapter;
 
 import apache.rocketmq.v1.AckMessageRequest;
 import apache.rocketmq.v1.ChangeInvisibleDurationRequest;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/ResponseBuilder.java
Patch:
@@ -15,13 +15,13 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.adapter;
+package org.apache.rocketmq.proxy.grpc.v2.adapter;
 
 import apache.rocketmq.v2.Code;
 import apache.rocketmq.v2.Status;
 import org.apache.rocketmq.common.protocol.ResponseCode;
 
-public class ResponseBuilderV2 {
+public class ResponseBuilder {
     public static Status buildStatus(Code code, String message) {
         return Status.newBuilder()
             .setCode(code)

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/ResponseHook.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.grpc.adapter;
+package org.apache.rocketmq.proxy.grpc.v2.adapter;
 
 import io.grpc.Context;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/ResponseWriter.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.adapter;
+package org.apache.rocketmq.proxy.grpc.v2.adapter;
 
 import io.grpc.stub.ServerCallStreamObserver;
 import io.grpc.stub.StreamObserver;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/channel/PullMessageChannel.java
Patch:
@@ -15,12 +15,12 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.adapter.channel;
+package org.apache.rocketmq.proxy.grpc.v2.adapter.channel;
 
 import apache.rocketmq.v2.PullMessageRequest;
 import apache.rocketmq.v2.PullMessageResponse;
 import org.apache.rocketmq.proxy.channel.InvocationChannel;
-import org.apache.rocketmq.proxy.grpc.adapter.handler.PullMessageResponseHandler;
+import org.apache.rocketmq.proxy.grpc.v2.adapter.handler.PullMessageResponseHandler;
 
 public class PullMessageChannel extends InvocationChannel<PullMessageRequest, PullMessageResponse> {
     public PullMessageChannel(PullMessageResponseHandler handler) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/channel/ReceiveMessageChannel.java
Patch:
@@ -15,12 +15,12 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.adapter.channel;
+package org.apache.rocketmq.proxy.grpc.v2.adapter.channel;
 
 import apache.rocketmq.v2.ReceiveMessageRequest;
 import apache.rocketmq.v2.ReceiveMessageResponse;
 import org.apache.rocketmq.proxy.channel.InvocationChannel;
-import org.apache.rocketmq.proxy.grpc.adapter.handler.ReceiveMessageResponseHandler;
+import org.apache.rocketmq.proxy.grpc.v2.adapter.handler.ReceiveMessageResponseHandler;
 
 public class ReceiveMessageChannel extends InvocationChannel<ReceiveMessageRequest, ReceiveMessageResponse> {
     public ReceiveMessageChannel(ReceiveMessageResponseHandler handler) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/channel/SendMessageChannel.java
Patch:
@@ -15,12 +15,12 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.adapter.channel;
+package org.apache.rocketmq.proxy.grpc.v2.adapter.channel;
 
 import apache.rocketmq.v2.SendMessageRequest;
 import apache.rocketmq.v2.SendMessageResponse;
 import org.apache.rocketmq.proxy.channel.InvocationChannel;
-import org.apache.rocketmq.proxy.grpc.adapter.handler.SendMessageResponseHandler;
+import org.apache.rocketmq.proxy.grpc.v2.adapter.handler.SendMessageResponseHandler;
 
 public class SendMessageChannel extends InvocationChannel<SendMessageRequest, SendMessageResponse> {
     public SendMessageChannel(SendMessageResponseHandler handler) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/adapter/handler/ResponseHandler.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.adapter.handler;
+package org.apache.rocketmq.proxy.grpc.v2.adapter.handler;
 
-import org.apache.rocketmq.proxy.grpc.adapter.InvocationContext;
+import org.apache.rocketmq.proxy.channel.InvocationContext;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public interface ResponseHandler<R, W> {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/GrpcClientManager.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.service;
+package org.apache.rocketmq.proxy.grpc.v2.service;
 
 import apache.rocketmq.v2.ClientSettings;
 import io.grpc.Context;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/GrpcForwardService.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.service;
+package org.apache.rocketmq.proxy.grpc.v2.service;
 
 import apache.rocketmq.v2.AckMessageRequest;
 import apache.rocketmq.v2.AckMessageResponse;
@@ -49,7 +49,7 @@
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 
-public interface GrpcForwardServiceV2 extends StartAndShutdown {
+public interface GrpcForwardService extends StartAndShutdown {
 
     CompletableFuture<QueryRouteResponse> queryRoute(Context ctx, QueryRouteRequest request);
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/AssignmentQueueSelector.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.grpc.service.cluster;
+package org.apache.rocketmq.proxy.grpc.v2.service.cluster;
 
 import apache.rocketmq.v2.QueryAssignmentRequest;
 import io.grpc.Context;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/DefaultAssignmentQueueSelector.java
Patch:
@@ -14,15 +14,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.grpc.service.cluster;
+package org.apache.rocketmq.proxy.grpc.v2.service.cluster;
 
 import apache.rocketmq.v2.QueryAssignmentRequest;
 import io.grpc.Context;
 import java.util.List;
 import org.apache.rocketmq.proxy.connector.route.MessageQueueWrapper;
 import org.apache.rocketmq.proxy.connector.route.SelectableMessageQueue;
 import org.apache.rocketmq.proxy.connector.route.TopicRouteCache;
-import org.apache.rocketmq.proxy.grpc.adapter.GrpcConverterV2;
+import org.apache.rocketmq.proxy.grpc.v2.adapter.GrpcConverter;
 
 public class DefaultAssignmentQueueSelector implements AssignmentQueueSelector {
 
@@ -34,7 +34,7 @@ public DefaultAssignmentQueueSelector(TopicRouteCache topicRouteCache) {
 
     @Override
     public List<SelectableMessageQueue> getAssignment(Context ctx, QueryAssignmentRequest request) throws Exception {
-        String topicName = GrpcConverterV2.wrapResourceWithNamespace(request.getTopic());
+        String topicName = GrpcConverter.wrapResourceWithNamespace(request.getTopic());
         MessageQueueWrapper messageQueueWrapper = topicRouteCache.getMessageQueue(topicName);
         return messageQueueWrapper.getReadSelector().getBrokerActingQueues();
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/DefaultReadQueueSelector.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.grpc.service.cluster;
+package org.apache.rocketmq.proxy.grpc.v2.service.cluster;
 
 import apache.rocketmq.v2.ReceiveMessageRequest;
 import io.grpc.Context;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/DefaultWriteQueueSelector.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.grpc.service.cluster;
+package org.apache.rocketmq.proxy.grpc.v2.service.cluster;
 
 import apache.rocketmq.v2.SendMessageRequest;
 import io.grpc.Context;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ReadQueueSelector.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.grpc.service.cluster;
+package org.apache.rocketmq.proxy.grpc.v2.service.cluster;
 
 import apache.rocketmq.v2.ReceiveMessageRequest;
 import io.grpc.Context;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/WriteQueueSelector.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.grpc.service.cluster;
+package org.apache.rocketmq.proxy.grpc.v2.service.cluster;
 
 import apache.rocketmq.v2.SendMessageRequest;
 import io.grpc.Context;

File: proxy/src/test/java/org/apache/rocketmq/proxy/config/ConfigurationManagerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.rocketmq.proxy.config;
 
-import org.apache.rocketmq.proxy.grpc.adapter.ProxyMode;
+import org.apache.rocketmq.proxy.grpc.v2.adapter.ProxyMode;
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/BaseServiceTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.grpc.service.cluster;
+package org.apache.rocketmq.proxy.grpc.v2.service.cluster;
 
 import java.net.SocketAddress;
 import java.nio.charset.StandardCharsets;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ConsumerServiceTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.rocketmq.proxy.grpc.service.cluster;
+package org.apache.rocketmq.proxy.grpc.v2.service.cluster;
 
 import apache.rocketmq.v1.AckMessageRequest;
 import apache.rocketmq.v1.AckMessageResponse;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/DefaultReadQueueSelectorTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.rocketmq.proxy.grpc.service.cluster;
+package org.apache.rocketmq.proxy.grpc.v2.service.cluster;
 
 import apache.rocketmq.v1.Broker;
 import apache.rocketmq.v1.Partition;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/DefaultWriteQueueSelectorTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.rocketmq.proxy.grpc.service.cluster;
+package org.apache.rocketmq.proxy.grpc.v2.service.cluster;
 
 import apache.rocketmq.v1.Broker;
 import apache.rocketmq.v1.Message;
@@ -12,7 +12,7 @@
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.proxy.connector.route.SelectableMessageQueue;
-import org.apache.rocketmq.proxy.grpc.adapter.GrpcConverter;
+import org.apache.rocketmq.proxy.grpc.v1.adapter.GrpcConverter;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ForwardClientServiceTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.rocketmq.proxy.grpc.service.cluster;
+package org.apache.rocketmq.proxy.grpc.v2.service.cluster;
 
 import apache.rocketmq.v1.ConsumeMessageType;
 import apache.rocketmq.v1.ConsumeModel;
@@ -23,8 +23,8 @@
 import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;
 import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.proxy.channel.ChannelManager;
-import org.apache.rocketmq.proxy.grpc.adapter.PollResponseManager;
-import org.apache.rocketmq.proxy.grpc.adapter.channel.GrpcClientChannel;
+import org.apache.rocketmq.proxy.common.PollResponseManager;
+import org.apache.rocketmq.proxy.grpc.v1.adapter.channel.GrpcClientChannel;
 import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
 import org.apache.rocketmq.remoting.protocol.LanguageCode;
 import org.junit.Test;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ProducerServiceTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.grpc.service.cluster;
+package org.apache.rocketmq.proxy.grpc.v2.service.cluster;
 
 import apache.rocketmq.v1.Message;
 import apache.rocketmq.v1.Resource;
@@ -31,7 +31,7 @@
 import org.apache.rocketmq.client.producer.SendStatus;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.proxy.connector.route.SelectableMessageQueue;
-import org.apache.rocketmq.proxy.grpc.adapter.ProxyException;
+import org.apache.rocketmq.proxy.grpc.v1.adapter.ProxyException;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/PullMessageServiceTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.rocketmq.proxy.grpc.service.cluster;
+package org.apache.rocketmq.proxy.grpc.v2.service.cluster;
 
 import apache.rocketmq.v1.Broker;
 import apache.rocketmq.v1.FilterExpression;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/RouteServiceTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.service.cluster;
+package org.apache.rocketmq.proxy.grpc.v2.service.cluster;
 
 import apache.rocketmq.v2.Address;
 import apache.rocketmq.v2.AddressScheme;
@@ -40,7 +40,7 @@
 import org.apache.rocketmq.common.protocol.ResponseCode;
 import org.apache.rocketmq.common.protocol.route.BrokerData;
 import org.apache.rocketmq.common.protocol.route.QueueData;
-import org.apache.rocketmq.proxy.grpc.adapter.ProxyMode;
+import org.apache.rocketmq.proxy.grpc.v2.adapter.ProxyMode;
 import org.apache.rocketmq.common.protocol.route.TopicRouteData;
 import org.apache.rocketmq.proxy.connector.route.MessageQueueWrapper;
 import org.junit.Test;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/TransactionServiceTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.rocketmq.proxy.grpc.service.cluster;
+package org.apache.rocketmq.proxy.grpc.v2.service.cluster;
 
 import apache.rocketmq.v1.EndTransactionRequest;
 import apache.rocketmq.v1.EndTransactionResponse;
@@ -11,7 +11,7 @@
 import org.apache.rocketmq.proxy.channel.ChannelManager;
 import org.apache.rocketmq.proxy.connector.transaction.TransactionId;
 import org.apache.rocketmq.proxy.connector.transaction.TransactionStateCheckRequest;
-import org.apache.rocketmq.proxy.grpc.adapter.channel.GrpcClientChannel;
+import org.apache.rocketmq.proxy.grpc.v1.adapter.channel.GrpcClientChannel;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.assertj.core.util.Lists;
 import org.junit.Test;

File: test/src/test/java/org/apache/rocketmq/test/proxy/ClusterGrpcTest.java
Patch:
@@ -13,9 +13,9 @@
 import java.net.URL;
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
-import org.apache.rocketmq.proxy.grpc.GrpcMessagingProcessor;
-import org.apache.rocketmq.proxy.grpc.service.ClusterGrpcService;
-import org.apache.rocketmq.proxy.grpc.service.GrpcForwardService;
+import org.apache.rocketmq.proxy.grpc.v1.GrpcMessagingProcessor;
+import org.apache.rocketmq.proxy.grpc.v1.service.ClusterGrpcService;
+import org.apache.rocketmq.proxy.grpc.v1.service.GrpcForwardService;
 import org.apache.rocketmq.test.base.GrpcBaseTest;
 import org.junit.After;
 import org.junit.Before;

File: test/src/test/java/org/apache/rocketmq/test/proxy/LocalGrpcTest.java
Patch:
@@ -26,8 +26,8 @@
 import java.net.URL;
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
-import org.apache.rocketmq.proxy.grpc.GrpcMessagingProcessor;
-import org.apache.rocketmq.proxy.grpc.service.LocalGrpcService;
+import org.apache.rocketmq.proxy.grpc.v1.GrpcMessagingProcessor;
+import org.apache.rocketmq.proxy.grpc.v2.service.LocalGrpcService;
 import org.apache.rocketmq.test.base.GrpcBaseTest;
 import org.junit.After;
 import org.junit.Before;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/ResponseBuilderV2.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.rocketmq.common.protocol.ResponseCode;
 
 public class ResponseBuilderV2 {
-
     public static Status buildStatus(Code code, String message) {
         return Status.newBuilder()
             .setCode(code)
@@ -55,7 +54,7 @@ public static Code buildCode(int remotingResponseCode) {
                 break;
             }
             case ResponseCode.REQUEST_CODE_NOT_SUPPORTED: {
-                code = Code.NOT_IMPLEMENTED;
+                code = Code.UNRECOGNIZED;
                 break;
             }
             case ResponseCode.MESSAGE_ILLEGAL:

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/channel/PullMessageChannel.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.rocketmq.proxy.grpc.adapter.channel;
 
-import apache.rocketmq.v1.PullMessageRequest;
-import apache.rocketmq.v1.PullMessageResponse;
+import apache.rocketmq.v2.PullMessageRequest;
+import apache.rocketmq.v2.PullMessageResponse;
 import org.apache.rocketmq.proxy.channel.InvocationChannel;
 import org.apache.rocketmq.proxy.grpc.adapter.handler.PullMessageResponseHandler;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/channel/ReceiveMessageChannel.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.rocketmq.proxy.grpc.adapter.channel;
 
-import apache.rocketmq.v1.ReceiveMessageRequest;
-import apache.rocketmq.v1.ReceiveMessageResponse;
+import apache.rocketmq.v2.ReceiveMessageRequest;
+import apache.rocketmq.v2.ReceiveMessageResponse;
 import org.apache.rocketmq.proxy.channel.InvocationChannel;
 import org.apache.rocketmq.proxy.grpc.adapter.handler.ReceiveMessageResponseHandler;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/channel/SendMessageChannel.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.rocketmq.proxy.grpc.adapter.channel;
 
-import apache.rocketmq.v1.SendMessageRequest;
-import apache.rocketmq.v1.SendMessageResponse;
+import apache.rocketmq.v2.SendMessageRequest;
+import apache.rocketmq.v2.SendMessageResponse;
 import org.apache.rocketmq.proxy.channel.InvocationChannel;
 import org.apache.rocketmq.proxy.grpc.adapter.handler.SendMessageResponseHandler;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/GrpcForwardServiceV2.java
Patch:
@@ -43,7 +43,6 @@
 import apache.rocketmq.v2.ReceiveMessageResponse;
 import apache.rocketmq.v2.SendMessageRequest;
 import apache.rocketmq.v2.SendMessageResponse;
-import apache.rocketmq.v2.TelemetryCommand;
 import io.grpc.Context;
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
@@ -64,6 +63,8 @@ public interface GrpcForwardServiceV2 extends StartAndShutdown {
 
     CompletableFuture<AckMessageResponse> ackMessage(Context ctx, AckMessageRequest request);
 
+    CompletableFuture<NackMessageResponse> nackMessage(Context ctx, NackMessageRequest request);
+
     CompletableFuture<ForwardMessageToDeadLetterQueueResponse> forwardMessageToDeadLetterQueue(Context ctx, ForwardMessageToDeadLetterQueueRequest request);
 
     CompletableFuture<EndTransactionResponse> endTransaction(Context ctx, EndTransactionRequest request);
@@ -72,8 +73,6 @@ public interface GrpcForwardServiceV2 extends StartAndShutdown {
 
     CompletableFuture<PullMessageResponse> pullMessage(Context ctx, PullMessageRequest request);
 
-    CompletableFuture<TelemetryCommand> telemetry(Context ctx, TelemetryCommand request);
-
     CompletableFuture<NotifyClientTerminationResponse> notifyClientTermination(Context ctx, NotifyClientTerminationRequest request);
 
     CompletableFuture<ChangeInvisibleDurationResponse> changeInvisibleDuration(Context ctx, ChangeInvisibleDurationRequest request);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/InterceptorConstants.java
Patch:
@@ -65,4 +65,7 @@ private InterceptorConstants() {
 
     public static final Metadata.Key<String> SESSION_TOKEN
         = Metadata.Key.of("x-mq-session-token", Metadata.ASCII_STRING_MARSHALLER);
+
+    public static final Metadata.Key<String> CLIENT_ID
+        = Metadata.Key.of("x-mq-client-id", Metadata.ASCII_STRING_MARSHALLER);
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/AssignmentQueueSelector.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.rocketmq.proxy.grpc.service.cluster;
 
-import apache.rocketmq.v1.QueryAssignmentRequest;
+import apache.rocketmq.v2.QueryAssignmentRequest;
 import io.grpc.Context;
 import java.util.List;
 import org.apache.rocketmq.proxy.connector.route.SelectableMessageQueue;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/DefaultAssignmentQueueSelector.java
Patch:
@@ -16,13 +16,13 @@
  */
 package org.apache.rocketmq.proxy.grpc.service.cluster;
 
-import apache.rocketmq.v1.QueryAssignmentRequest;
+import apache.rocketmq.v2.QueryAssignmentRequest;
 import io.grpc.Context;
 import java.util.List;
 import org.apache.rocketmq.proxy.connector.route.MessageQueueWrapper;
 import org.apache.rocketmq.proxy.connector.route.SelectableMessageQueue;
 import org.apache.rocketmq.proxy.connector.route.TopicRouteCache;
-import org.apache.rocketmq.proxy.grpc.adapter.GrpcConverter;
+import org.apache.rocketmq.proxy.grpc.adapter.GrpcConverterV2;
 
 public class DefaultAssignmentQueueSelector implements AssignmentQueueSelector {
 
@@ -34,7 +34,7 @@ public DefaultAssignmentQueueSelector(TopicRouteCache topicRouteCache) {
 
     @Override
     public List<SelectableMessageQueue> getAssignment(Context ctx, QueryAssignmentRequest request) throws Exception {
-        String topicName = GrpcConverter.wrapResourceWithNamespace(request.getTopic());
+        String topicName = GrpcConverterV2.wrapResourceWithNamespace(request.getTopic());
         MessageQueueWrapper messageQueueWrapper = topicRouteCache.getMessageQueue(topicName);
         return messageQueueWrapper.getReadSelector().getBrokerActingQueues();
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/DefaultReadQueueSelector.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.rocketmq.proxy.grpc.service.cluster;
 
-import apache.rocketmq.v1.ReceiveMessageRequest;
+import apache.rocketmq.v2.ReceiveMessageRequest;
 import io.grpc.Context;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.protocol.header.PopMessageRequestHeader;
@@ -37,8 +37,8 @@ public SelectableMessageQueue select(Context ctx, ReceiveMessageRequest request,
         try {
             String topic = requestHeader.getTopic();
 
-            if (request.hasPartition() && request.getPartition().hasBroker()) {
-                String brokerName = request.getPartition().getBroker().getName();
+            if (request.hasMessageQueue() && request.getMessageQueue().hasBroker()) {
+                String brokerName = request.getMessageQueue().getBroker().getName();
                 if (StringUtils.isNotBlank(brokerName)) {
                     messageQueue = topicRouteCache.selectReadBrokerByName(topic, brokerName);
                 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/ReadQueueSelector.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.rocketmq.proxy.grpc.service.cluster;
 
-import apache.rocketmq.v1.ReceiveMessageRequest;
+import apache.rocketmq.v2.ReceiveMessageRequest;
 import io.grpc.Context;
 import org.apache.rocketmq.common.protocol.header.PopMessageRequestHeader;
 import org.apache.rocketmq.proxy.connector.route.SelectableMessageQueue;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/GrpcConverter.java
Patch:
@@ -678,10 +678,10 @@ public static ConsumeMessageDirectlyResult buildConsumeMessageDirectlyResult(
         return consumeMessageDirectlyResult;
     }
 
-    public static Resource buildResource(String resourceNameWithNamespace) {
+    public static Resource buildResource(String resourceStr) {
         return Resource.newBuilder()
-            .setResourceNamespace(NamespaceUtil.getNamespaceFromResource(resourceNameWithNamespace))
-            .setName(NamespaceUtil.withoutNamespace(resourceNameWithNamespace))
+            .setResourceNamespace(NamespaceUtil.getNamespaceFromResource(resourceStr))
+            .setName(NamespaceUtil.withoutNamespace(resourceStr))
             .build();
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/InvocationContext.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.rocketmq.proxy.grpc.adapter;
 
+import java.time.Duration;
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.TimeUnit;
 
 public class InvocationContext<R, W> {
     private final R request;
@@ -31,7 +31,7 @@ public InvocationContext(R req, CompletableFuture<W> resp) {
     }
 
     public boolean expired(long expiredTimeSec) {
-        return System.currentTimeMillis() - timestamp >= TimeUnit.SECONDS.toMillis(expiredTimeSec);
+        return System.currentTimeMillis() - timestamp >= Duration.ofSeconds(expiredTimeSec).toMillis();
     }
 
     public R getRequest() {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/channel/GrpcClientChannel.java
Patch:
@@ -53,7 +53,7 @@ private GrpcClientChannel(Context ctx, String group, String clientId, PollRespon
         this.manager = manager;
     }
 
-    public void addClientObserver(CompletableFuture<PollCommandResponse> future) {
+    public void setClientObserver(CompletableFuture<PollCommandResponse> future) {
         this.pollCommandResponseFutureRef.set(future);
     }
 
@@ -131,8 +131,7 @@ public ChannelFuture writeAndFlush(Object msg) {
                         break;
                     }
                     case RequestCode.GET_CONSUMER_RUNNING_INFO: {
-                        final GetConsumerRunningInfoRequestHeader requestHeader =
-                            (GetConsumerRunningInfoRequestHeader) command.decodeCommandCustomHeader(GetConsumerRunningInfoRequestHeader.class);
+                        final GetConsumerRunningInfoRequestHeader requestHeader = command.decodeCommandCustomHeader(GetConsumerRunningInfoRequestHeader.class);
                         if (!requestHeader.isJstackEnable()) {
                             break;
                         }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/LocalGrpcService.java
Patch:
@@ -420,7 +420,7 @@ public CompletableFuture<PollCommandResponse> pollCommand(Context ctx, PollComma
                         .build());
                     break;
                 }
-                producerChannel.addClientObserver(future);
+                producerChannel.setClientObserver(future);
                 break;
             case CONSUMER_GROUP:
                 Resource consumerGroup = request.getConsumerGroup();
@@ -432,7 +432,7 @@ public CompletableFuture<PollCommandResponse> pollCommand(Context ctx, PollComma
                         .build());
                     break;
                 }
-                consumerChannel.addClientObserver(future);
+                consumerChannel.setClientObserver(future);
                 break;
             default:
                 break;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/ForwardClientService.java
Patch:
@@ -145,7 +145,7 @@ public CompletableFuture<PollCommandResponse> pollCommand(Context ctx, PollComma
                 if (producerChannel == null) {
                     future.complete(noopCommandResponse);
                 } else {
-                    producerChannel.addClientObserver(future);
+                    producerChannel.setClientObserver(future);
                 }
                 break;
             case CONSUMER_GROUP:
@@ -155,7 +155,7 @@ public CompletableFuture<PollCommandResponse> pollCommand(Context ctx, PollComma
                 if (consumerChannel == null) {
                     future.complete(noopCommandResponse);
                 } else {
-                    consumerChannel.addClientObserver(future);
+                    consumerChannel.setClientObserver(future);
                 }
                 break;
             default:

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/AbstractForwardClient.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.time.Duration;
 import java.util.concurrent.ThreadLocalRandom;
-import org.apache.rocketmq.client.impl.MQClientAPIExt;
+import org.apache.rocketmq.proxy.connector.client.MQClientAPIExt;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 import org.apache.rocketmq.proxy.connector.factory.ForwardClientManager;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/ForwardReadConsumer.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.client.consumer.PopResult;
 import org.apache.rocketmq.client.consumer.PullResult;
-import org.apache.rocketmq.client.impl.MQClientAPIExt;
+import org.apache.rocketmq.proxy.connector.client.MQClientAPIExt;
 import org.apache.rocketmq.common.protocol.header.PopMessageRequestHeader;
 import org.apache.rocketmq.common.protocol.header.PullMessageRequestHeader;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
@@ -57,7 +57,7 @@ public CompletableFuture<PopResult> popMessage(
         PopMessageRequestHeader requestHeader,
         long timeoutMillis
     ) {
-        return this.getClient().popMessage(address, brokerName, requestHeader, timeoutMillis);
+        return this.getClient().popMessageAsync(address, brokerName, requestHeader, timeoutMillis);
     }
 
     public CompletableFuture<PullResult> pullMessage(String address, PullMessageRequestHeader requestHeader) {
@@ -66,6 +66,6 @@ public CompletableFuture<PullResult> pullMessage(String address, PullMessageRequ
 
     public CompletableFuture<PullResult> pullMessage(String address, PullMessageRequestHeader requestHeader,
         long timeoutMillis) {
-        return this.getClient().pullMessage(address, requestHeader, timeoutMillis);
+        return this.getClient().pullMessageAsync(address, requestHeader, timeoutMillis);
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/ForwardWriteConsumer.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.client.consumer.AckResult;
-import org.apache.rocketmq.client.impl.MQClientAPIExt;
+import org.apache.rocketmq.proxy.connector.client.MQClientAPIExt;
 import org.apache.rocketmq.common.protocol.header.AckMessageRequestHeader;
 import org.apache.rocketmq.common.protocol.header.ChangeInvisibleTimeRequestHeader;
 import org.apache.rocketmq.common.protocol.header.UpdateConsumerOffsetRequestHeader;
@@ -56,7 +56,7 @@ public CompletableFuture<AckResult> ackMessage(
         AckMessageRequestHeader requestHeader,
         long timeoutMillis
     ) {
-        return this.getClient().ackMessage(address, requestHeader, timeoutMillis);
+        return this.getClient().ackMessageAsync(address, requestHeader, timeoutMillis);
     }
 
     public CompletableFuture<AckResult> changeInvisibleTimeAsync(

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/factory/AbstractMQClientFactory.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.client.ClientConfig;
 import org.apache.rocketmq.client.impl.ClientRemotingProcessor;
-import org.apache.rocketmq.client.impl.MQClientAPIExt;
+import org.apache.rocketmq.proxy.connector.client.MQClientAPIExt;
 import org.apache.rocketmq.remoting.RPCHook;
 
 public abstract class AbstractMQClientFactory extends AbstractClientManager<MQClientAPIExt> {

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/factory/ForwardClientManager.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.concurrent.ScheduledExecutorService;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.client.ClientConfig;
-import org.apache.rocketmq.client.impl.MQClientAPIExt;
+import org.apache.rocketmq.proxy.connector.client.MQClientAPIExt;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.proxy.connector.transaction.TransactionStateChecker;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/utils/ProxyUtils.java
Patch:
@@ -18,6 +18,4 @@
 
 public class ProxyUtils {
     public static final int MAX_MSG_NUMS_FOR_POP_REQUEST = 32;
-
-    public static final long MAX_CONSUMER_TIMEOUT_MILLIS = Duration.ofSeconds(20).toMillis();
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/AbstractForwardClient.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.rocketmq.proxy.connector.factory.ForwardClientManager;
 
 public abstract class AbstractForwardClient implements StartAndShutdown {
+    public static final long MAX_CONSUMER_TIMEOUT_MILLIS = Duration.ofSeconds(20).toMillis();
     public static final long DEFAULT_MQ_CLIENT_TIMEOUT = Duration.ofSeconds(3).toMillis();
 
     private final ForwardClientManager clientFactory;

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/ForwardReadConsumer.java
Patch:
@@ -61,7 +61,7 @@ public CompletableFuture<PopResult> popMessage(
     }
 
     public CompletableFuture<PullResult> pullMessage(String address, PullMessageRequestHeader requestHeader) {
-        return this.pullMessage(address, requestHeader, ProxyUtils.MAX_CONSUMER_TIMEOUT_MILLIS);
+        return this.pullMessage(address, requestHeader, MAX_CONSUMER_TIMEOUT_MILLIS);
     }
 
     public CompletableFuture<PullResult> pullMessage(String address, PullMessageRequestHeader requestHeader,

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/utils/ProxyUtils.java
Patch:
@@ -18,4 +18,6 @@
 
 public class ProxyUtils {
     public static final int MAX_MSG_NUMS_FOR_POP_REQUEST = 32;
+
+    public static final long MAX_CONSUMER_TIMEOUT_MILLIS = Duration.ofSeconds(20).toMillis();
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/ForwardReadConsumer.java
Patch:
@@ -61,7 +61,7 @@ public CompletableFuture<PopResult> popMessage(
     }
 
     public CompletableFuture<PullResult> pullMessage(String address, PullMessageRequestHeader requestHeader) {
-        return this.pullMessage(address, requestHeader, DEFAULT_MQ_CLIENT_TIMEOUT);
+        return this.pullMessage(address, requestHeader, ProxyUtils.MAX_CONSUMER_TIMEOUT_MILLIS);
     }
 
     public CompletableFuture<PullResult> pullMessage(String address, PullMessageRequestHeader requestHeader,

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/ForwardProducer.java
Patch:
@@ -32,7 +32,6 @@
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public class ForwardProducer extends AbstractForwardClient {
-
     private static final String PID_PREFIX = "PID_RMQ_PROXY_PUBLISH_MESSAGE_";
 
     public ForwardProducer(ForwardClientManager clientFactory) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/channel/ChannelType.java
Patch:
@@ -23,7 +23,7 @@ public enum ChannelType {
      */
     LOCAL,
     /**
-     * The channel sync from other proxy
+     * The channel synced from other proxy
      */
     REMOTE
 }
\ No newline at end of file

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/channel/GrpcClientChannel.java
Patch:
@@ -120,8 +120,7 @@ public ChannelFuture writeAndFlush(Object msg) {
             try {
                 switch (command.getCode()) {
                     case RequestCode.CHECK_TRANSACTION_STATE: {
-                        final CheckTransactionStateRequestHeader requestHeader =
-                            (CheckTransactionStateRequestHeader) command.decodeCommandCustomHeader(CheckTransactionStateRequestHeader.class);
+                        final CheckTransactionStateRequestHeader requestHeader = command.decodeCommandCustomHeader(CheckTransactionStateRequestHeader.class);
                         MessageExt messageExt = MessageDecoder.decode(ByteBuffer.wrap(command.getBody()), true, false, false);
                         future.complete(PollCommandResponse.newBuilder()
                             .setRecoverOrphanedTransactionCommand(RecoverOrphanedTransactionCommand.newBuilder()

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/PullMessageService.java
Patch:
@@ -41,7 +41,6 @@
 import org.apache.rocketmq.proxy.grpc.adapter.ResponseHook;
 
 public class PullMessageService extends BaseService {
-
     private final DefaultForwardClient forwardClient;
     private final ForwardReadConsumer readConsumer;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/AbstractForwardClient.java
Patch:
@@ -46,7 +46,8 @@ protected MQClientAPIExt getClient() {
         if (clients.length == 1) {
             return this.clients[0];
         }
-        return this.clients[ThreadLocalRandom.current().nextInt(this.clients.length)];
+        int index = ThreadLocalRandom.current().nextInt(this.clients.length);
+        return this.clients[index];
     }
 
     @Override

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/ForwardProducer.java
Patch:
@@ -87,7 +87,7 @@ public CompletableFuture<SendResult> sendMessage(
         return future.thenApply(sendResult -> {
             int tranType = MessageSysFlag.getTransactionValue(requestHeader.getSysFlag());
             if (SendStatus.SEND_OK.equals(sendResult.getSendStatus()) && tranType == MessageSysFlag.TRANSACTION_PREPARED_TYPE) {
-                TransactionId transactionId = TransactionId.genFromBrokerTransactionId(address, sendResult);
+                TransactionId transactionId = TransactionId.genByBrokerTransactionId(address, sendResult);
                 sendResult.setTransactionId(transactionId.getProxyTransactionId());
             }
             return sendResult;

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/factory/ForwardClientManager.java
Patch:
@@ -30,7 +30,7 @@
 
 public class ForwardClientManager implements StartAndShutdown {
 
-    private RPCHook rpcHook = null;
+    private RPCHook rpcHook;
 
     private final MQClientFactory mqClientFactory;
     private final TransactionProducerFactory transactionalProducerFactory;

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/factory/MQClientFactory.java
Patch:
@@ -23,8 +23,7 @@
 
 public class MQClientFactory extends AbstractMQClientFactory {
 
-    public MQClientFactory(ScheduledExecutorService scheduledExecutorService,
-        RPCHook rpcHook) {
+    public MQClientFactory(ScheduledExecutorService scheduledExecutorService, RPCHook rpcHook) {
         super(scheduledExecutorService, rpcHook);
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/processor/ProxyClientRemotingProcessor.java
Patch:
@@ -63,7 +63,7 @@ public RemotingCommand checkTransactionState(ChannelHandlerContext ctx, Remoting
                         requestHeader.getTranStateTableOffset(),
                         requestHeader.getCommitLogOffset(),
                         requestHeader.getMsgId(),
-                        TransactionId.genFromBrokerTransactionId(
+                        TransactionId.genByBrokerTransactionId(
                             ctx.channel().remoteAddress(),
                             requestHeader.getTransactionId(),
                             requestHeader.getCommitLogOffset(),

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/route/TopicRouteCache.java
Patch:
@@ -81,7 +81,8 @@ public SelectableMessageQueue selectOneWriteQueue(String topic, SelectableMessag
     }
 
     public SelectableMessageQueue selectOneWriteQueue(String topic, String brokerName, int queueId) throws Exception {
-        return getMessageQueue(topic).getWriteSelector().selectOne(brokerName, queueId);
+        return getMessageQueue(topic).getWriteSelector()
+            .selectOne(brokerName, queueId);
     }
 
     public SelectableMessageQueue selectOneWriteQueueByKey(String topic, String shardingKey) throws Exception {

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/transaction/TransactionHeartbeatRegisterService.java
Patch:
@@ -40,7 +40,6 @@
 import org.slf4j.LoggerFactory;
 
 public class TransactionHeartbeatRegisterService implements StartAndShutdown {
-
     private static final Logger log = LoggerFactory.getLogger(TransactionHeartbeatRegisterService.class);
 
     private static final String TRANS_HEARTBEAT_CLIENT_ID = "rmq-proxy-producer-client";

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/transaction/TransactionId.java
Patch:
@@ -54,7 +54,7 @@ public TransactionId(SocketAddress brokerAddr, String brokerTransactionId, long
     public TransactionId() {
     }
 
-    public static TransactionId genFromBrokerTransactionId(String brokerAddr, SendResult sendResult) {
+    public static TransactionId genByBrokerTransactionId(String brokerAddr, SendResult sendResult) {
         MessageId id = new MessageId(null, 0);
         try {
             if (sendResult.getOffsetMsgId() != null) {
@@ -65,11 +65,11 @@ public static TransactionId genFromBrokerTransactionId(String brokerAddr, SendRe
         } catch (Exception e) {
             log.warn("genFromBrokerTransactionId failed. brokerAddr: {}, sendResult: {}", brokerAddr, sendResult, e);
         }
-        return genFromBrokerTransactionId(RemotingUtil.string2SocketAddress(brokerAddr), sendResult.getTransactionId(),
+        return genByBrokerTransactionId(RemotingUtil.string2SocketAddress(brokerAddr), sendResult.getTransactionId(),
             id.getOffset(), sendResult.getQueueOffset());
     }
 
-    public static TransactionId genFromBrokerTransactionId(SocketAddress brokerAddr, String orgTransactionId,
+    public static TransactionId genByBrokerTransactionId(SocketAddress brokerAddr, String orgTransactionId,
         long commitLogOffset, long tranStateTableOffset) {
         byte[] orgTransactionIdByte = new byte[0];
         if (StringUtils.isNotBlank(orgTransactionId)) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServer.java
Patch:
@@ -97,6 +97,7 @@ public GrpcServer(GrpcForwardService grpcForwardService) {
             .addService(messagingProcessor)
             .executor(this.executor);
 
+        // grpc interceptors, including acl, logging etc.
         if (ConfigurationManager.getProxyConfig().isEnableACL()) {
             List<AccessValidator> accessValidators = ServiceProvider.load(ServiceProvider.ACL_VALIDATOR_ID, AccessValidator.class);
             if (accessValidators.isEmpty()) {
@@ -122,7 +123,7 @@ public void start() throws Exception {
         this.grpcForwardService.start();
 
         this.server.start();
-        log.info("grpc server has started");
+        log.info("grpc server start successfully.");
     }
 
     public void shutdown() {
@@ -132,7 +133,7 @@ public void shutdown() {
 
             this.grpcForwardService.shutdown();
 
-            log.info("grpc server has stopped");
+            log.info("grpc server shutdown successfully.");
         } catch (Exception e) {
             e.printStackTrace();
         }

File: proxy/src/test/java/org/apache/rocketmq/proxy/connector/transaction/TransactionIdTest.java
Patch:
@@ -10,7 +10,7 @@ public class TransactionIdTest {
 
     @Test
     public void test() throws UnknownHostException {
-        TransactionId transactionId = TransactionId.genFromBrokerTransactionId(
+        TransactionId transactionId = TransactionId.genByBrokerTransactionId(
             RemotingHelper.string2SocketAddress("127.0.0.1:8080"),
             "71F99B78B6E261357FA259CCA6456118", 1234, 5678);
 
@@ -24,7 +24,7 @@ public void test() throws UnknownHostException {
 
     @Test
     public void testEmptyTransactionId() throws UnknownHostException {
-        TransactionId transactionId = TransactionId.genFromBrokerTransactionId(
+        TransactionId transactionId = TransactionId.genByBrokerTransactionId(
             RemotingHelper.string2SocketAddress("127.0.0.1:8080"),
             "", 1234, 5678);
 
@@ -38,7 +38,7 @@ public void testEmptyTransactionId() throws UnknownHostException {
 
     @Test
     public void testNullTransactionId() throws UnknownHostException {
-        TransactionId transactionId = TransactionId.genFromBrokerTransactionId(
+        TransactionId transactionId = TransactionId.genByBrokerTransactionId(
             RemotingHelper.string2SocketAddress("127.0.0.1:8080"),
             null, 1234, 5678);
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/service/LocalGrpcServiceTest.java
Patch:
@@ -381,7 +381,7 @@ public void testEndTransaction() throws Exception {
             .thenReturn(response);
         EndTransactionRequest request = EndTransactionRequest.newBuilder()
             .setMessageId("123")
-            .setTransactionId(TransactionId.genFromBrokerTransactionId(
+            .setTransactionId(TransactionId.genByBrokerTransactionId(
                 new InetSocketAddress("0.0.0.0", 80), "123", 123, 123
                 ).getProxyTransactionId()
             )

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/service/cluster/TransactionServiceTest.java
Patch:
@@ -48,7 +48,7 @@ public void testCheckTransactionState() {
             return null;
         }).when(channel).writeAndFlush(any());
 
-        TransactionId transactionId = TransactionId.genFromBrokerTransactionId(
+        TransactionId transactionId = TransactionId.genByBrokerTransactionId(
             RemotingHelper.string2SocketAddress("127.0.0.1:8080"),
             "71F99B78B6E261357FA259CCA6456118", 1234, 5678);
         transactionService.checkTransactionState(new TransactionStateCheckRequest(
@@ -69,7 +69,7 @@ public void testCheckTransactionState() {
     public void testEndTransaction() throws Exception {
         AtomicReference<EndTransactionRequestHeader> headerRef = new AtomicReference<>();
         AtomicReference<String> brokerAddrRef = new AtomicReference<>();
-        TransactionId transactionId = TransactionId.genFromBrokerTransactionId(
+        TransactionId transactionId = TransactionId.genByBrokerTransactionId(
             RemotingHelper.string2SocketAddress("127.0.0.1:8080"),
             "71F99B78B6E261357FA259CCA6456118", 1234, 5678);
         doAnswer(mock -> {

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/factory/AbstractClientManager.java
Patch:
@@ -24,14 +24,14 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-public abstract class AbstractClientFactory<T>  {
-    private static final Logger log = LoggerFactory.getLogger(AbstractClientFactory.class);
+public abstract class AbstractClientManager<T>  {
+    private static final Logger log = LoggerFactory.getLogger(AbstractClientManager.class);
 
     protected final ScheduledExecutorService scheduledExecutorService;
     protected Map<String, T> cacheTable = new ConcurrentHashMap<>();
     protected RPCHook rpcHook;
 
-    public AbstractClientFactory(ScheduledExecutorService scheduledExecutorService, RPCHook rpcHook) {
+    public AbstractClientManager(ScheduledExecutorService scheduledExecutorService, RPCHook rpcHook) {
         this.scheduledExecutorService = scheduledExecutorService;
         this.rpcHook = rpcHook;
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/factory/AbstractMQClientFactory.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.rocketmq.client.impl.MQClientAPIExt;
 import org.apache.rocketmq.remoting.RPCHook;
 
-public abstract class AbstractMQClientFactory extends AbstractClientFactory<MQClientAPIExt> {
+public abstract class AbstractMQClientFactory extends AbstractClientManager<MQClientAPIExt> {
 
     public AbstractMQClientFactory(ScheduledExecutorService scheduledExecutorService, RPCHook rpcHook) {
         super(scheduledExecutorService, rpcHook);

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/factory/ForwardClientManager.java
Patch:
@@ -28,14 +28,14 @@
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.remoting.RPCHook;
 
-public class ForwardClientFactory implements StartAndShutdown {
+public class ForwardClientManager implements StartAndShutdown {
 
     private RPCHook rpcHook = null;
 
     private final MQClientFactory mqClientFactory;
     private final TransactionProducerFactory transactionalProducerFactory;
 
-    public ForwardClientFactory(TransactionStateChecker transactionStateChecker) {
+    public ForwardClientManager(TransactionStateChecker transactionStateChecker) {
         this.init();
 
         ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/route/TopicRouteCache.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.rocketmq.common.protocol.route.TopicRouteData;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
 import org.apache.rocketmq.proxy.common.AbstractCacheLoader;
-import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.connector.DefaultForwardClient;
@@ -160,7 +159,7 @@ protected String loaderName() {
 
         @Override
         protected TopicRouteData loadTopicRouteData(String topic) throws Exception {
-            return defaultClient.getTopicRouteInfoFromNameServer(topic, ProxyUtils.DEFAULT_MQ_CLIENT_TIMEOUT);
+            return defaultClient.getTopicRouteInfoFromNameServer(topic);
         }
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/transaction/TransactionHeartbeatRegisterService.java
Patch:
@@ -31,7 +31,6 @@
 import org.apache.rocketmq.common.protocol.route.BrokerData;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
-import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.connector.ForwardProducer;
@@ -156,7 +155,7 @@ protected void sendHeartBeatToCluster(String clusterName, HeartbeatData heartbea
                 heartbeatExecutors.submit(() -> {
                     String brokerAddr = brokerData.selectBrokerAddr();
                     try {
-                        this.forwardProducer.heartBeat(brokerAddr, heartbeatData, ProxyUtils.DEFAULT_MQ_CLIENT_TIMEOUT);
+                        this.forwardProducer.heartBeat(brokerAddr, heartbeatData);
                     } catch (Exception e) {
                         log.error("Send transactionHeartbeat to broker err. brokerAddr: {}", brokerAddr, e);
                     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/TransactionService.java
Patch:
@@ -29,16 +29,15 @@
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.rocketmq.common.protocol.header.EndTransactionRequestHeader;
 import org.apache.rocketmq.proxy.channel.ChannelManager;
-import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
 import org.apache.rocketmq.proxy.connector.ConnectorManager;
 import org.apache.rocketmq.proxy.connector.ForwardProducer;
 import org.apache.rocketmq.proxy.connector.transaction.TransactionId;
 import org.apache.rocketmq.proxy.connector.transaction.TransactionStateCheckRequest;
 import org.apache.rocketmq.proxy.connector.transaction.TransactionStateChecker;
-import org.apache.rocketmq.proxy.grpc.adapter.channel.GrpcClientChannel;
 import org.apache.rocketmq.proxy.grpc.adapter.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.adapter.ResponseBuilder;
 import org.apache.rocketmq.proxy.grpc.adapter.ResponseHook;
+import org.apache.rocketmq.proxy.grpc.adapter.channel.GrpcClientChannel;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 
 public class TransactionService extends BaseService implements TransactionStateChecker {
@@ -100,7 +99,7 @@ public CompletableFuture<EndTransactionResponse> endTransaction(Context ctx, End
             TransactionId handle = TransactionId.decode(request.getTransactionId());
             String brokerAddr = RemotingHelper.parseSocketAddressAddr(handle.getBrokerAddr());
             EndTransactionRequestHeader requestHeader = this.toEndTransactionRequestHeader(ctx, request);
-            this.forwardProducer.endTransaction(brokerAddr, requestHeader, ProxyUtils.DEFAULT_MQ_CLIENT_TIMEOUT);
+            this.forwardProducer.endTransaction(brokerAddr, requestHeader);
             future.complete(EndTransactionResponse.newBuilder()
                 .setCommon(ResponseBuilder.buildCommon(Code.OK, Code.OK.name()))
                 .build());

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/service/cluster/TransactionServiceTest.java
Patch:
@@ -20,7 +20,6 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
@@ -77,7 +76,7 @@ public void testEndTransaction() throws Exception {
             brokerAddrRef.set(mock.getArgument(0));
             headerRef.set(mock.getArgument(1));
             return null;
-        }).when(producerClient).endTransaction(anyString(), any(), anyLong());
+        }).when(producerClient).endTransaction(anyString(), any());
 
         EndTransactionResponse response = transactionService.endTransaction(Context.current(), EndTransactionRequest.newBuilder()
             .setGroup(Resource.newBuilder()

File: proxy/src/main/java/org/apache/rocketmq/proxy/channel/ChannelManager.java
Patch:
@@ -37,7 +37,7 @@
 import org.slf4j.LoggerFactory;
 
 public class ChannelManager {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
     private final ConcurrentMap<String, SimpleChannel> clientIdChannelMap = new ConcurrentHashMap<>();
     private final ConcurrentMap<String /* group */, Set<String>/* clientId */> groupClientIdMap = new ConcurrentHashMap<>();
 
@@ -55,7 +55,7 @@ public <T extends SimpleChannel> T createChannel(Supplier<T> creator, Class<T> c
 
     public <T extends SimpleChannel> T createChannel(String clientId, Supplier<T> creator, Class<T> clazz) {
         if (Strings.isNullOrEmpty(clientId)) {
-            LOGGER.warn("ClientId is unexpected null or empty");
+            log.warn("ClientId is unexpected null or empty");
             return creator.get();
         }
 
@@ -153,7 +153,7 @@ public void scanAndCleanChannels() {
                 }
             }
         } catch (Throwable e) {
-            LOGGER.error("Unexpected exception", e);
+            log.error("Unexpected exception", e);
         }
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/channel/InvocationChannel.java
Patch:
@@ -81,12 +81,12 @@ public void clean() {
             if (entry.getValue().expired(expiredTimeSec)) {
                 iterator.remove();
                 count++;
-                LOGGER.debug("An expired request is found, created time-point: {}, Request: {}",
+                log.debug("An expired request is found, created time-point: {}, Request: {}",
                     entry.getValue().getTimestamp(), entry.getValue().getRequest());
             }
         }
         if (count > 0) {
-            LOGGER.warn("[BUG] {} expired in-flight requests is cleaned.", count);
+            log.warn("[BUG] {} expired in-flight requests is cleaned.", count);
         }
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/channel/SimpleChannel.java
Patch:
@@ -39,8 +39,7 @@
  * @see io.netty.channel.Channel#writeAndFlush
  */
 public class SimpleChannel extends AbstractChannel {
-
-    protected static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
+    protected static final Logger log = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
 
     protected final String remoteAddress;
     protected final String localAddress;

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/Configuration.java
Patch:
@@ -25,7 +25,7 @@
 import org.slf4j.LoggerFactory;
 
 public class Configuration {
-    private final static Logger LOGGER = LoggerFactory.getLogger(Configuration.class);
+    private final static Logger log = LoggerFactory.getLogger(Configuration.class);
     private final AtomicReference<ProxyConfig> proxyConfigReference = new AtomicReference<>();
 
     public void init() throws Exception {
@@ -43,12 +43,12 @@ public static String loadJsonConfig(String configFileName) throws Exception {
 
         File file = new File(filePath);
         if (!file.exists()) {
-            LOGGER.warn("the config file {} not exist", filePath);
+            log.warn("the config file {} not exist", filePath);
             return null;
         }
         long fileLength = file.length();
         if (fileLength <= 0) {
-            LOGGER.warn("the config file {} length is zero", filePath);
+            log.warn("the config file {} length is zero", filePath);
             return null;
         }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/factory/AbstractClientFactory.java
Patch:
@@ -25,7 +25,7 @@
 import org.slf4j.LoggerFactory;
 
 public abstract class AbstractClientFactory<T>  {
-    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractClientFactory.class);
+    private static final Logger log = LoggerFactory.getLogger(AbstractClientFactory.class);
 
     protected final ScheduledExecutorService scheduledExecutorService;
     protected Map<String, T> cacheTable = new ConcurrentHashMap<>();
@@ -78,7 +78,7 @@ public void shutdownAll() {
             try {
                 this.shutdown(v);
             } catch (Exception e) {
-                LOGGER.warn("try to shutdown client err.", e);
+                log.warn("try to shutdown client err.", e);
             }
         });
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/route/TopicRouteCache.java
Patch:
@@ -37,7 +37,6 @@
 import org.slf4j.LoggerFactory;
 
 public class TopicRouteCache {
-
     private static final Logger log = LoggerFactory.getLogger(TopicRouteCache.class);
 
     private final LoadingCache<String /* topicName */, MessageQueueWrapper> topicCache;

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/route/TopicRouteWrapper.java
Patch:
@@ -37,13 +37,13 @@ public TopicRouteWrapper(TopicRouteData topicRouteData, String topicName) {
 
         if (this.topicRouteData.getBrokerDatas() != null) {
             for (BrokerData brokerData : this.topicRouteData.getBrokerDatas()) {
-                brokerNameRouteData.put(brokerData.getBrokerName(), brokerData);
+                this.brokerNameRouteData.put(brokerData.getBrokerName(), brokerData);
             }
         }
     }
 
     public String getMasterAddr(String brokerName) {
-        return brokerNameRouteData.get(brokerName).getBrokerAddrs().get(MixAll.MASTER_ID);
+        return this.brokerNameRouteData.get(brokerName).getBrokerAddrs().get(MixAll.MASTER_ID);
     }
 
     public String getMasterAddrPrefer(String brokerName) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcMessagingProcessor.java
Patch:
@@ -67,7 +67,7 @@
 import org.slf4j.LoggerFactory;
 
 public class GrpcMessagingProcessor extends MessagingServiceGrpc.MessagingServiceImplBase {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
     private final GrpcForwardService grpcForwardService;
 
     public GrpcMessagingProcessor(GrpcForwardService grpcForwardService) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/GrpcConverter.java
Patch:
@@ -96,7 +96,7 @@
 import org.slf4j.LoggerFactory;
 
 public class GrpcConverter {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
 
     public static String wrapResourceWithNamespace(Resource resource) {
         return NamespaceUtil.wrapNamespace(resource.getResourceNamespace(), resource.getName());
@@ -143,7 +143,7 @@ public static PopMessageRequestHeader buildPopMessageRequestHeader(ReceiveMessag
         int queueId = partition.getId();
         int maxMessageNumbers = request.getBatchSize();
         if (maxMessageNumbers > ProxyUtils.MAX_MSG_NUMS_FOR_POP_REQUEST) {
-            LOGGER.warn("change maxNums from {} to {} for pop request, with info: topic:{}, group:{}",
+            log.warn("change maxNums from {} to {} for pop request, with info: topic:{}, group:{}",
                 maxMessageNumbers, ProxyUtils.MAX_MSG_NUMS_FOR_POP_REQUEST, topicName, groupName);
             maxMessageNumbers = ProxyUtils.MAX_MSG_NUMS_FOR_POP_REQUEST;
         }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/ClusterGrpcService.java
Patch:
@@ -77,7 +77,7 @@
 import org.slf4j.LoggerFactory;
 
 public class ClusterGrpcService extends AbstractStartAndShutdown implements GrpcForwardService {
-    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
+    private static final Logger log = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
 
     private final ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(
         new ThreadFactoryImpl("ClusterGrpcServiceScheduledThread"));

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/DefaultWriteQueueSelector.java
Patch:
@@ -27,7 +27,7 @@
 import org.slf4j.LoggerFactory;
 
 public class DefaultWriteQueueSelector implements WriteQueueSelector {
-    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultWriteQueueSelector.class);
+    private static final Logger log = LoggerFactory.getLogger(DefaultWriteQueueSelector.class);
 
     protected final TopicRouteCache topicRouteCache;
 
@@ -62,7 +62,7 @@ public SelectableMessageQueue selectQueue(
             }
             return targetMessageQueue;
         } catch (Exception e) {
-            LOGGER.error("error when select queue in DefaultMessageQueueSelector. request: {}", request, e);
+            log.error("error when select queue in DefaultMessageQueueSelector. request: {}", request, e);
             return null;
         }
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/ForwardClientService.java
Patch:
@@ -45,7 +45,7 @@
 import org.slf4j.LoggerFactory;
 
 public class ForwardClientService extends BaseService {
-    private static final Logger LOGGER = LoggerFactory.getLogger(ForwardClientService.class);
+    private static final Logger log = LoggerFactory.getLogger(ForwardClientService.class);
 
     private final ChannelManager channelManager;
     private final ConsumerManager consumerManager;
@@ -167,7 +167,7 @@ private void scanNotActiveChannel() {
             this.consumerManager.scanNotActiveChannel();
             this.producerManager.scanNotActiveChannel();
         } catch (Exception e) {
-            LOGGER.error("error occurred when scan not active client channels.", e);
+            log.error("error occurred when scan not active client channels.", e);
         }
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServer.java
Patch:
@@ -31,9 +31,9 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.acl.AccessValidator;
-import org.apache.rocketmq.broker.util.ServiceProvider;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
+import org.apache.rocketmq.common.utils.ServiceProvider;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.grpc.interceptor.AuthenticationInterceptor;

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/route/SelectableMessageQueue.java
Patch:
@@ -72,7 +72,7 @@ public String getBrokerAddr() {
     }
 
     @Override public String toString() {
-        return "AddressableMessageQueue{" +
+        return "SelectableMessageQueue{" +
             "messageQueue=" + messageQueue +
             ", brokerAddr='" + brokerAddr + '\'' +
             '}';

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/ForwardProducer.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.connector.factory.ForwardClientFactory;
 import org.apache.rocketmq.proxy.connector.transaction.TransactionId;
-import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public class ForwardProducer extends AbstractForwardClient {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcMessagingProcessor.java
Patch:
@@ -59,10 +59,9 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionException;
 import org.apache.rocketmq.common.constant.LoggerName;
+import org.apache.rocketmq.proxy.grpc.adapter.ProxyException;
+import org.apache.rocketmq.proxy.grpc.adapter.ResponseBuilder;
 import org.apache.rocketmq.proxy.grpc.adapter.ResponseWriter;
-import org.apache.rocketmq.proxy.grpc.common.ProxyException;
-import org.apache.rocketmq.proxy.grpc.common.ResponseBuilder;
-import org.apache.rocketmq.proxy.grpc.common.ResponseWriter;
 import org.apache.rocketmq.proxy.grpc.service.GrpcForwardService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/channel/GrpcClientChannel.java
Patch:
@@ -71,7 +71,7 @@ public static GrpcClientChannel create(
         ChannelManager channelManager,
         String group,
         String clientId,
-        PollCommandResponseManager manager
+        PollResponseManager manager
     ) {
         GrpcClientChannel channel = channelManager.createChannel(
             buildKey(group, clientId),

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/ConsumerService.java
Patch:
@@ -46,6 +46,7 @@
 import org.apache.rocketmq.proxy.connector.route.SelectableMessageQueue;
 import org.apache.rocketmq.proxy.grpc.adapter.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.adapter.DelayPolicy;
+import org.apache.rocketmq.proxy.grpc.adapter.ProxyException;
 import org.apache.rocketmq.proxy.grpc.adapter.ResponseBuilder;
 import org.apache.rocketmq.proxy.grpc.adapter.ResponseHook;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/PullMessageService.java
Patch:
@@ -40,7 +40,6 @@
 import org.apache.rocketmq.proxy.connector.ConnectorManager;
 import org.apache.rocketmq.proxy.connector.DefaultForwardClient;
 import org.apache.rocketmq.proxy.grpc.adapter.GrpcConverter;
-import org.apache.rocketmq.proxy.grpc.adapter.ProxyException;
 import org.apache.rocketmq.proxy.grpc.adapter.ResponseBuilder;
 import org.apache.rocketmq.proxy.grpc.adapter.ResponseHook;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/TransactionService.java
Patch:
@@ -39,6 +39,7 @@
 import org.apache.rocketmq.proxy.grpc.adapter.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.adapter.ResponseBuilder;
 import org.apache.rocketmq.proxy.grpc.adapter.ResponseHook;
+import org.apache.rocketmq.remoting.common.RemotingHelper;
 
 public class TransactionService extends BaseService implements TransactionStateChecker {
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/service/cluster/RouteServiceTest.java
Patch:
@@ -43,7 +43,6 @@
 import org.apache.rocketmq.proxy.grpc.adapter.ProxyMode;
 import org.apache.rocketmq.common.protocol.route.TopicRouteData;
 import org.apache.rocketmq.proxy.connector.route.MessageQueueWrapper;
-import org.apache.rocketmq.proxy.grpc.common.ProxyMode;
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: proxy/src/main/java/org/apache/rocketmq/proxy/ProxyStartup.java
Patch:
@@ -66,6 +66,7 @@ public static void main(String[] args) {
             final HealthCheckServer healthCheckServer = new HealthCheckServer();
             PROXY_START_AND_SHUTDOWN.appendStartAndShutdown(healthCheckServer);
 
+            PROXY_START_AND_SHUTDOWN.start();
             Runtime.getRuntime().addShutdownHook(new Thread(() -> {
                 LOGGER.info("try to shutdown server");
                 try {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/DelayPolicy.java
Patch:
@@ -51,11 +51,12 @@ public static DelayPolicy build(String messageDelayLevel) {
     private static List<Long> buildList(String messageDelayLevel) {
         List<String> delayLevelList = Lists.newArrayList(Splitter.on(" ").split(messageDelayLevel));
         List<Long> delayIntervalList = new ArrayList<>();
+        // the index of messageDelayLevel start from 1, so add a default value
+        delayIntervalList.add(0L);
         for (String delayLevel : delayLevelList) {
             final Pattern p = Pattern.compile("(\\d+)([smhd])");
             final Matcher m = p.matcher(delayLevel);
-            while (m.find())
-            {
+            while (m.find()) {
                 final int duration = Integer.parseInt(m.group(1));
                 final String timeUnitString = m.group(2);
                 final long interval = toInterval(duration, timeUnitString);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/ResponseHook.java
Patch:
@@ -16,7 +16,9 @@
  */
 package org.apache.rocketmq.proxy.grpc.adapter;
 
+import io.grpc.Context;
+
 public interface ResponseHook<T, R> {
 
-    void beforeResponse(T request, R response, Throwable t);
+    void beforeResponse(Context ctx, T request, R response, Throwable t);
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/ClusterGrpcService.java
Patch:
@@ -114,7 +114,7 @@ public CompletableFuture<QueryRouteResponse> queryRoute(Context ctx, QueryRouteR
 
     @Override
     public CompletableFuture<HeartbeatResponse> heartbeat(Context ctx, HeartbeatRequest request) {
-        this.clientService.heartbeat(ctx, request, channelManager);
+        this.clientService.heartbeat(ctx, request);
         return CompletableFuture.completedFuture(
             HeartbeatResponse.newBuilder()
                 .setCommon(ResponseBuilder.buildCommon(Code.OK, Code.OK.name()))
@@ -196,8 +196,8 @@ public CompletableFuture<ReportMessageConsumptionResultResponse> reportMessageCo
 
     @Override
     public CompletableFuture<NotifyClientTerminationResponse> notifyClientTermination(Context ctx,
-                                                                                      NotifyClientTerminationRequest request) {
-        this.clientService.unregister(ctx, request, channelManager);
+        NotifyClientTerminationRequest request) {
+        this.clientService.unregister(ctx, request);
         return CompletableFuture.completedFuture(
             NotifyClientTerminationResponse.newBuilder()
                 .setCommon(ResponseBuilder.buildCommon(Code.OK, Code.OK.name()))

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/ProducerService.java
Patch:
@@ -68,7 +68,7 @@ public CompletableFuture<SendMessageResponse> sendMessage(Context ctx, SendMessa
         CompletableFuture<SendMessageResponse> future = new CompletableFuture<>();
         future.whenComplete((response, throwable) -> {
             if (sendMessageHook != null) {
-                sendMessageHook.beforeResponse(request, response, throwable);
+                sendMessageHook.beforeResponse(ctx, request, response, throwable);
             }
         });
 
@@ -140,7 +140,7 @@ public CompletableFuture<ForwardMessageToDeadLetterQueueResponse> forwardMessage
         CompletableFuture<ForwardMessageToDeadLetterQueueResponse> future = new CompletableFuture<>();
         future.whenComplete((response, throwable) -> {
             if (forwardMessageToDLQHook != null) {
-                forwardMessageToDLQHook.beforeResponse(request, response, throwable);
+                forwardMessageToDLQHook.beforeResponse(ctx, request, response, throwable);
             }
         });
         try {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/RouteService.java
Patch:
@@ -97,7 +97,7 @@ public CompletableFuture<QueryRouteResponse> queryRoute(Context ctx, QueryRouteR
         CompletableFuture<QueryRouteResponse> future = new CompletableFuture<>();
         future.whenComplete((response, throwable) -> {
             if (queryRouteHook != null) {
-                queryRouteHook.beforeResponse(request, response, throwable);
+                queryRouteHook.beforeResponse(ctx, request, response, throwable);
             }
         });
 
@@ -209,7 +209,7 @@ public CompletableFuture<QueryAssignmentResponse> queryAssignment(Context ctx, Q
         CompletableFuture<QueryAssignmentResponse> future = new CompletableFuture<>();
         future.whenComplete((response, throwable) -> {
             if (queryAssignmentHook != null) {
-                queryAssignmentHook.beforeResponse(request, response, throwable);
+                queryAssignmentHook.beforeResponse(ctx, request, response, throwable);
             }
         });
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/config/InitConfigAndLoggerTest.java
Patch:
@@ -32,7 +32,7 @@ public class InitConfigAndLoggerTest {
     public static String mockProxyHome = "/mock/rmq/proxy/home";
 
     @Before
-    public void before() throws Exception {
+    public void before() throws Throwable {
         URL mockProxyHomeURL = getClass().getClassLoader().getResource("rmq-proxy-home");
         if (mockProxyHomeURL != null) {
             mockProxyHome = mockProxyHomeURL.toURI().getPath();

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/service/LocalGrpcServiceTest.java
Patch:
@@ -107,7 +107,7 @@ public class LocalGrpcServiceTest extends InitConfigAndLoggerTest {
     private Metadata metadata;
 
     @Before
-    public void setUp() throws Exception {
+    public void setUp() throws Throwable {
         super.before();
         Mockito.when(brokerControllerMock.getSendMessageProcessor()).thenReturn(sendMessageProcessorMock);
         Mockito.when(brokerControllerMock.getPopMessageProcessor()).thenReturn(popMessageProcessorMock);

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/service/cluster/DefaultWriteQueueSelectorTest.java
Patch:
@@ -21,7 +21,7 @@
 import static org.mockito.ArgumentMatchers.isNull;
 import static org.mockito.Mockito.when;
 
-public class DefaultProducerQueueSelectorTest extends BaseServiceTest {
+public class DefaultWriteQueueSelectorTest extends BaseServiceTest {
 
     @Override
     public void beforeEach() throws Throwable {

File: proxy/src/main/java/org/apache/rocketmq/proxy/ProxyStartup.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.grpc.GrpcServer;
-import org.apache.rocketmq.proxy.grpc.common.ProxyMode;
+import org.apache.rocketmq.proxy.grpc.adapter.ProxyMode;
 import org.apache.rocketmq.proxy.grpc.service.ClusterGrpcService;
 import org.apache.rocketmq.proxy.grpc.service.GrpcForwardService;
 import org.apache.rocketmq.proxy.grpc.service.LocalGrpcService;

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.rocketmq.proxy.config;
 
-import org.apache.rocketmq.proxy.grpc.common.ProxyMode;
+import org.apache.rocketmq.proxy.grpc.adapter.ProxyMode;
 
 public class ProxyConfig {
     public final static String CONFIG_FILE_NAME = "rmq-proxy.json";

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/factory/AbstractClientFactory.java
Patch:
@@ -78,7 +78,7 @@ public void shutdownAll() {
             try {
                 this.shutdown(v);
             } catch (Exception e) {
-                LOGGER.warn("RocketMQClientConstructor shutdown all err.", e);
+                LOGGER.warn("try to shutdown client err.", e);
             }
         });
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcMessagingProcessor.java
Patch:
@@ -56,7 +56,7 @@
 import io.grpc.stub.StreamObserver;
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.proxy.grpc.common.ResponseWriter;
+import org.apache.rocketmq.proxy.grpc.adapter.ResponseWriter;
 import org.apache.rocketmq.proxy.grpc.service.GrpcForwardService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/DelayPolicy.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.common;
+package org.apache.rocketmq.proxy.grpc.adapter;
 
 import com.google.common.base.Splitter;
 import com.google.common.collect.Lists;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/ParameterConverter.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.grpc.common;
+package org.apache.rocketmq.proxy.grpc.adapter;
 
 import io.grpc.Context;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/ProxyException.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.grpc.common;
+package org.apache.rocketmq.proxy.grpc.adapter;
 
 import com.google.rpc.Code;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/ProxyMode.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.common;
+package org.apache.rocketmq.proxy.grpc.adapter;
 
 public enum ProxyMode {
     LOCAL("LOCAL"),

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/ProxyResponseCode.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.grpc.common;
+package org.apache.rocketmq.proxy.grpc.adapter;
 
 public enum ProxyResponseCode {
     SYS_ERR,

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/ResponseBuilder.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.common;
+package org.apache.rocketmq.proxy.grpc.adapter;
 
 import apache.rocketmq.v1.HeartbeatResponse;
 import apache.rocketmq.v1.ResponseCommon;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/ResponseHook.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.grpc.common;
+package org.apache.rocketmq.proxy.grpc.adapter;
 
 public interface ResponseHook<T, R> {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/ResponseWriter.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.common;
+package org.apache.rocketmq.proxy.grpc.adapter;
 
 import io.grpc.stub.ServerCallStreamObserver;
 import io.grpc.stub.StreamObserver;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/handler/SendMessageResponseHandler.java
Patch:
@@ -20,7 +20,7 @@
 import apache.rocketmq.v1.SendMessageRequest;
 import apache.rocketmq.v1.SendMessageResponse;
 import org.apache.rocketmq.proxy.grpc.adapter.InvocationContext;
-import org.apache.rocketmq.proxy.grpc.common.ResponseBuilder;
+import org.apache.rocketmq.proxy.grpc.adapter.ResponseBuilder;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public class SendMessageResponseHandler implements ResponseHandler<SendMessageRequest, SendMessageResponse> {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/BaseService.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.consumer.ReceiptHandle;
 import org.apache.rocketmq.proxy.connector.ConnectorManager;
-import org.apache.rocketmq.proxy.grpc.common.ProxyException;
+import org.apache.rocketmq.proxy.grpc.adapter.ProxyException;
 
 public class BaseService {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/DefaultAssignmentQueueSelector.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.rocketmq.proxy.connector.route.MessageQueueWrapper;
 import org.apache.rocketmq.proxy.connector.route.SelectableMessageQueue;
 import org.apache.rocketmq.proxy.connector.route.TopicRouteCache;
-import org.apache.rocketmq.proxy.grpc.common.Converter;
+import org.apache.rocketmq.proxy.grpc.adapter.GrpcConverter;
 
 public class DefaultAssignmentQueueSelector implements AssignmentQueueSelector {
 
@@ -34,7 +34,7 @@ public DefaultAssignmentQueueSelector(TopicRouteCache topicRouteCache) {
 
     @Override
     public List<SelectableMessageQueue> getAssignment(Context ctx, QueryAssignmentRequest request) throws Exception {
-        String topicName = Converter.getResourceNameWithNamespace(request.getTopic());
+        String topicName = GrpcConverter.wrapResourceWithNamespace(request.getTopic());
         MessageQueueWrapper messageQueueWrapper = topicRouteCache.getMessageQueue(topicName);
         return messageQueueWrapper.getReadSelector().getBrokerActingQueues();
     }

File: proxy/src/test/java/org/apache/rocketmq/proxy/config/ConfigurationManagerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.rocketmq.proxy.config;
 
-import org.apache.rocketmq.proxy.grpc.common.ProxyMode;
+import org.apache.rocketmq.proxy.grpc.adapter.ProxyMode;
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/service/LocalGrpcServiceTest.java
Patch:
@@ -77,7 +77,7 @@
 import org.apache.rocketmq.common.protocol.header.PullMessageResponseHeader;
 import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
 import org.apache.rocketmq.proxy.connector.transaction.TransactionId;
-import org.apache.rocketmq.proxy.grpc.common.Converter;
+import org.apache.rocketmq.proxy.grpc.adapter.GrpcConverter;
 import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
@@ -263,7 +263,7 @@ public void testReceiveMessageSuccess() throws Exception {
         assertThat(r.getCommon().getStatus().getCode()).isEqualTo(Code.OK.getNumber());
         assertThat(r.getMessagesCount()).isEqualTo(1);
         assertThat(Durations.toMillis(r.getInvisibleDuration())).isEqualTo(invisibleTime);
-        assertThat(Converter.getResourceNameWithNamespace(r.getMessages(0).getTopic())).isEqualTo(topic);
+        assertThat(GrpcConverter.wrapResourceWithNamespace(r.getMessages(0).getTopic())).isEqualTo(topic);
         assertThat(r.getMessages(0).getBody().toByteArray()).isEqualTo(body);
     }
 
@@ -563,7 +563,7 @@ public void testPullMessageSuccess() throws Exception {
         PullMessageResponse r = grpcFuture.get();
         assertThat(r.getCommon().getStatus().getCode()).isEqualTo(Code.OK.getNumber());
         assertThat(r.getMessagesCount()).isEqualTo(1);
-        assertThat(Converter.getResourceNameWithNamespace(r.getMessages(0).getTopic())).isEqualTo(topic);
+        assertThat(GrpcConverter.wrapResourceWithNamespace(r.getMessages(0).getTopic())).isEqualTo(topic);
         assertThat(r.getMessages(0).getBody().toByteArray()).isEqualTo(body);
         assertThat(r.getMinOffset()).isEqualTo(minOffset);
         assertThat(r.getNextOffset()).isEqualTo(nextOffset);

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/service/cluster/ProducerServiceTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.rocketmq.client.producer.SendStatus;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.proxy.connector.route.SelectableMessageQueue;
-import org.apache.rocketmq.proxy.grpc.common.ProxyException;
+import org.apache.rocketmq.proxy.grpc.adapter.ProxyException;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/service/cluster/RouteServiceTest.java
Patch:
@@ -38,7 +38,7 @@
 import org.apache.rocketmq.common.constant.PermName;
 import org.apache.rocketmq.common.protocol.route.BrokerData;
 import org.apache.rocketmq.common.protocol.route.QueueData;
-import org.apache.rocketmq.proxy.grpc.common.ProxyMode;
+import org.apache.rocketmq.proxy.grpc.adapter.ProxyMode;
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/DefaultForwardClient.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.List;
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.client.exception.MQClientException;
-import org.apache.rocketmq.client.impl.MQClientAPIExtImpl;
+import org.apache.rocketmq.client.impl.MQClientAPIExt;
 import org.apache.rocketmq.common.protocol.header.GetConsumerListByGroupRequestHeader;
 import org.apache.rocketmq.common.protocol.route.TopicRouteData;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
@@ -39,7 +39,7 @@ protected int getClientNum() {
     }
 
     @Override
-    protected MQClientAPIExtImpl createNewClient(ForwardClientFactory clientFactory, String name) {
+    protected MQClientAPIExt createNewClient(ForwardClientFactory clientFactory, String name) {
         double workerFactor = ConfigurationManager.getProxyConfig().getDefaultForwardClientWorkerFactor();
         final int threadCount = (int) Math.ceil(Runtime.getRuntime().availableProcessors() * workerFactor);
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/ForwardProducer.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.rocketmq.proxy.connector;
 
 import java.util.concurrent.CompletableFuture;
-import org.apache.rocketmq.client.impl.MQClientAPIExtImpl;
+import org.apache.rocketmq.client.impl.MQClientAPIExt;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.client.producer.SendStatus;
 import org.apache.rocketmq.common.message.Message;
@@ -46,7 +46,7 @@ protected int getClientNum() {
     }
 
     @Override
-    protected MQClientAPIExtImpl createNewClient(ForwardClientFactory clientFactory, String name) {
+    protected MQClientAPIExt createNewClient(ForwardClientFactory clientFactory, String name) {
         double sendClientWorkerFactor = ConfigurationManager.getProxyConfig().getForwardProducerWorkerFactor();
         final int threadCount = (int) Math.ceil(Runtime.getRuntime().availableProcessors() * sendClientWorkerFactor);
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/ForwardReadConsumer.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.client.consumer.PopResult;
 import org.apache.rocketmq.client.consumer.PullResult;
-import org.apache.rocketmq.client.impl.MQClientAPIExtImpl;
+import org.apache.rocketmq.client.impl.MQClientAPIExt;
 import org.apache.rocketmq.common.protocol.header.PopMessageRequestHeader;
 import org.apache.rocketmq.common.protocol.header.PullMessageRequestHeader;
 import org.apache.rocketmq.proxy.connector.factory.ForwardClientFactory;
@@ -39,7 +39,7 @@ protected int getClientNum() {
     }
 
     @Override
-    protected MQClientAPIExtImpl createNewClient(ForwardClientFactory clientFactory, String name) {
+    protected MQClientAPIExt createNewClient(ForwardClientFactory clientFactory, String name) {
         double workerFactor = ConfigurationManager.getProxyConfig().getForwardConsumerWorkerFactor();
         final int threadCount = (int) Math.ceil(Runtime.getRuntime().availableProcessors() * workerFactor);
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/ForwardWriteConsumer.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.client.consumer.AckResult;
-import org.apache.rocketmq.client.impl.MQClientAPIExtImpl;
+import org.apache.rocketmq.client.impl.MQClientAPIExt;
 import org.apache.rocketmq.common.protocol.header.AckMessageRequestHeader;
 import org.apache.rocketmq.common.protocol.header.ChangeInvisibleTimeRequestHeader;
 import org.apache.rocketmq.common.protocol.header.UpdateConsumerOffsetRequestHeader;
@@ -40,7 +40,7 @@ protected int getClientNum() {
     }
 
     @Override
-    protected MQClientAPIExtImpl createNewClient(ForwardClientFactory clientFactory, String name) {
+    protected MQClientAPIExt createNewClient(ForwardClientFactory clientFactory, String name) {
         double workerFactor = ConfigurationManager.getProxyConfig().getForwardConsumerWorkerFactor();
         final int threadCount = (int) Math.ceil(Runtime.getRuntime().availableProcessors() * workerFactor);
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/factory/ForwardClientFactory.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.concurrent.ScheduledExecutorService;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.client.ClientConfig;
-import org.apache.rocketmq.client.impl.MQClientAPIExtImpl;
+import org.apache.rocketmq.client.impl.MQClientAPIExt;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.proxy.connector.transaction.TransactionStateChecker;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
@@ -56,11 +56,11 @@ private void init() {
         }
     }
 
-    public MQClientAPIExtImpl getMQClient(String instanceName, int bootstrapWorkerThreads) {
+    public MQClientAPIExt getMQClient(String instanceName, int bootstrapWorkerThreads) {
         return mqClientFactory.getOne(instanceName, bootstrapWorkerThreads);
     }
 
-    public MQClientAPIExtImpl getTransactionalProducer(String instanceName, int bootstrapWorkerThreads) {
+    public MQClientAPIExt getTransactionalProducer(String instanceName, int bootstrapWorkerThreads) {
         return transactionalProducerFactory.getOne(instanceName, bootstrapWorkerThreads);
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/InterceptorConstants.java
Patch:
@@ -62,4 +62,7 @@ private InterceptorConstants() {
 
     public static final Metadata.Key<String> RPC_NAME
         = Metadata.Key.of("x-mq-rpc-name", Metadata.ASCII_STRING_MARSHALLER);
+
+    public static final Metadata.Key<String> SESSION_TOKEN
+        = Metadata.Key.of("x-mq-session-token", Metadata.ASCII_STRING_MARSHALLER);
 }

File: common/src/main/java/org/apache/rocketmq/common/consumer/ReceiptHandle.java
Patch:
@@ -25,8 +25,8 @@
 
 public class ReceiptHandle {
     private static final String SEPARATOR = MessageConst.KEY_SEPARATOR;
-    private static final String NORMAL_TOPIC = "0";
-    private static final String RETRY_TOPIC = "1";
+    public static final String NORMAL_TOPIC = "0";
+    public static final String RETRY_TOPIC = "1";
     private final long startOffset;
     private final long retrieveTime;
     private final long invisibleTime;

File: proxy/src/main/java/org/apache/rocketmq/proxy/HealthCheckServer.java
Patch:
@@ -33,7 +33,8 @@ public class HealthCheckServer implements StartAndShutdown {
 
     @Override
     public void start() throws Exception {
-        this.healthChecker = HttpServer.create(new InetSocketAddress(ConfigurationManager.getProxyConfig().getHealthCheckPort()), 0);
+        this.healthChecker = HttpServer.create(
+            new InetSocketAddress(ConfigurationManager.getProxyConfig().getHealthCheckPort()), 0);
         this.healthChecker.createContext("/status", new HealthCheckHandler());
         this.healthChecker.setExecutor(null);
         this.healthChecker.start();

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/InvocationContext.java
Patch:
@@ -21,9 +21,9 @@
 import java.util.concurrent.TimeUnit;
 
 public class InvocationContext<R, W> {
-    final private R request;
-    final private CompletableFuture<W> response;
-    final private long timestamp = System.currentTimeMillis();
+    private final R request;
+    private final CompletableFuture<W> response;
+    private final long timestamp = System.currentTimeMillis();
 
     public InvocationContext(R req, CompletableFuture<W> resp) {
         request = req;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/ClusterGrpcService.java
Patch:
@@ -181,8 +181,9 @@ public CompletableFuture<PollCommandResponse> pollCommand(Context ctx, PollComma
         return this.clientService.pollCommand(ctx, request);
     }
 
-    @Override public CompletableFuture<ReportThreadStackTraceResponse> reportThreadStackTrace(Context ctx,
-                                                                                              ReportThreadStackTraceRequest request) {
+    @Override
+    public CompletableFuture<ReportThreadStackTraceResponse> reportThreadStackTrace(Context ctx,
+        ReportThreadStackTraceRequest request) {
         return null;
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/ClientService.java
Patch:
@@ -74,7 +74,6 @@ public void heartbeat(Context ctx, HeartbeatRequest request, ChannelManager chan
         if (request.hasProducerData()) {
             String producerGroup = Converter.getResourceNameWithNamespace(request.getProducerData().getGroup());
             GrpcClientChannel channel = GrpcClientChannel.create(channelManager, producerGroup, clientId, pollCommandResponseManager);
-            //TODO: Use the faked MQ Version ？
             ClientChannelInfo clientChannelInfo = new ClientChannelInfo(channel, clientId, languageCode, MQVersion.Version.V5_0_0.ordinal());
             producerManager.registerProducer(producerGroup, clientChannelInfo);
         }

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/ForwardProducer.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.rocketmq.proxy.connector;
 
 import java.util.concurrent.CompletableFuture;
-import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.client.impl.MQClientAPIExtImpl;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.client.producer.SendStatus;
@@ -26,6 +25,7 @@
 import org.apache.rocketmq.common.protocol.header.EndTransactionRequestHeader;
 import org.apache.rocketmq.common.protocol.header.SendMessageRequestHeader;
 import org.apache.rocketmq.common.protocol.heartbeat.HeartbeatData;
+import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.connector.factory.ForwardClientFactory;
 import org.apache.rocketmq.proxy.connector.transaction.TransactionId;
@@ -87,7 +87,8 @@ public CompletableFuture<SendResult> sendMessage(String address, String brokerNa
         SendMessageRequestHeader requestHeader, long timeoutMillis) {
         CompletableFuture<SendResult> future = this.getClient().sendMessage(address, brokerName, msg, requestHeader, timeoutMillis);
         return future.thenApply(sendResult -> {
-            if (SendStatus.SEND_OK.equals(sendResult.getSendStatus()) && !StringUtils.isEmpty(sendResult.getTransactionId())) {
+            int tranType = MessageSysFlag.getTransactionValue(requestHeader.getSysFlag());
+            if (SendStatus.SEND_OK.equals(sendResult.getSendStatus()) && tranType == MessageSysFlag.TRANSACTION_PREPARED_TYPE) {
                 TransactionId transactionId = TransactionId.genFromBrokerTransactionId(address, sendResult);
                 sendResult.setTransactionId(transactionId.getProxyTransactionId());
             }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/common/Converter.java
Patch:
@@ -344,7 +344,6 @@ public static Map<String, String> buildMessageProperty(Message message) {
 
             Duration transactionResolveDelay = message.getSystemAttribute().getOrphanedTransactionRecoveryPeriod();
 
-            MessageAccessor.putProperty(messageWithHeader, MessageConst.PROPERTY_TRANSACTION_CHECK_TIMES, String.valueOf(15));
             MessageAccessor.putProperty(messageWithHeader, MessageConst.PROPERTY_CHECK_IMMUNITY_TIME_IN_SECONDS,
                 String.valueOf(Durations.toSeconds(transactionResolveDelay)));
         }

File: proxy/src/main/java/org/apache/rocketmq/proxy/HealthCheckServer.java
Patch:
@@ -23,6 +23,7 @@
 import java.io.IOException;
 import java.io.OutputStream;
 import java.net.InetSocketAddress;
+import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 
@@ -39,8 +40,9 @@ public void start() throws Exception {
     }
 
     @Override
-    public void shutdown() {
+    public void shutdown() throws InterruptedException {
         this.healthChecker.stop(0);
+        Thread.sleep(TimeUnit.SECONDS.toMillis(ConfigurationManager.getProxyConfig().getWaitAfterStopHealthCheckInSeconds()));
     }
 
     static class HealthCheckHandler implements HttpHandler {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServer.java
Patch:
@@ -31,14 +31,15 @@
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
+import org.apache.rocketmq.proxy.common.StartAndShutdown;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.grpc.interceptor.ContextInterceptor;
 import org.apache.rocketmq.proxy.grpc.interceptor.HeaderInterceptor;
 import org.apache.rocketmq.proxy.grpc.service.GrpcForwardService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-public class GrpcServer {
+public class GrpcServer implements StartAndShutdown {
     private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
 
     private final io.grpc.Server server;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/RouteService.java
Patch:
@@ -41,6 +41,7 @@
 import org.apache.rocketmq.common.protocol.route.BrokerData;
 import org.apache.rocketmq.common.protocol.route.QueueData;
 import org.apache.rocketmq.common.protocol.route.TopicRouteData;
+import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.connector.ConnectorManager;
 import org.apache.rocketmq.proxy.connector.route.MessageQueueWrapper;
 import org.apache.rocketmq.proxy.connector.route.SelectableMessageQueue;
@@ -293,7 +294,7 @@ public CompletableFuture<QueryAssignmentResponse> queryAssignment(Context ctx, Q
                         .setScheme(AddressScheme.IPv4)
                         .addAddresses(
                             Address.newBuilder()
-                                .setPort(hostAndPort.getPort())
+                                .setPort(ConfigurationManager.getProxyConfig().getGrpcServerPort())
                                 .setHost(hostAndPort.getHost())
                         )
                         .build())

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/DefaultAssignmentQueueSelector.java
Patch:
@@ -34,7 +34,8 @@ public DefaultAssignmentQueueSelector(TopicRouteCache topicRouteCache) {
 
     @Override
     public List<SelectableMessageQueue> getAssignment(Context ctx, QueryAssignmentRequest request) throws Exception {
-        MessageQueueWrapper messageQueueWrapper = topicRouteCache.getMessageQueue(Converter.getResourceNameWithNamespace(request.getTopic()));
+        String topicName = Converter.getResourceNameWithNamespace(request.getTopic());
+        MessageQueueWrapper messageQueueWrapper = topicRouteCache.getMessageQueue(topicName);
         return messageQueueWrapper.getReadSelector().getBrokerActingQueues();
     }
 }
\ No newline at end of file

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIExtImpl.java
Patch:
@@ -171,7 +171,7 @@ public CompletableFuture<RemotingCommand> sendMessageBack(String brokerAddr,
         long timeoutMillis) {
         CompletableFuture<RemotingCommand> future = new CompletableFuture<>();
         try {
-            RemotingCommand request = RemotingCommand.createResponseCommandWithHeader(RequestCode.CONSUMER_SEND_MSG_BACK, requestHeader);
+            RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONSUMER_SEND_MSG_BACK, requestHeader);
             this.getRemotingClient().invokeAsync(brokerAddr, request, timeoutMillis, responseFuture -> {
                 RemotingCommand response = responseFuture.getResponseCommand();
                 if (response != null) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/LocalGrpcService.java
Patch:
@@ -514,6 +514,7 @@ public CompletableFuture<ReportMessageConsumptionResultResponse> reportMessageCo
         SimpleChannelHandlerContext channelHandlerContext = new SimpleChannelHandlerContext(channel);
 
         ChangeInvisibleTimeRequestHeader requestHeader = Converter.buildChangeInvisibleTimeRequestHeader(request);
+        ReceiptHandle receiptHandle = ReceiptHandle.decode(request.getReceiptHandle());
         RemotingCommand command = RemotingCommand.createRequestCommand(RequestCode.CHANGE_MESSAGE_INVISIBLETIME, requestHeader);
         command.makeCustomHeaderToNet();
 
@@ -530,7 +531,7 @@ public CompletableFuture<ReportMessageConsumptionResultResponse> reportMessageCo
                     .retrieveTime(responseHeader.getPopTime())
                     .invisibleTime(responseHeader.getInvisibleTime())
                     .reviveQueueId(responseHeader.getReviveQid())
-                    .topic(Converter.getResourceNameWithNamespace(request.getTopic()))
+                    .topicType(receiptHandle.getTopicType())
                     .brokerName(brokerController.getBrokerConfig().getBrokerName())
                     .queueId(requestHeader.getQueueId())
                     .offset(requestHeader.getOffset())

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/utils/ProxyUtils.java
Patch:
@@ -20,4 +20,6 @@
 
 public class ProxyUtils {
     public static final long DEFAULT_MQ_CLIENT_TIMEOUT = Duration.ofSeconds(3).toMillis();
+
+    public static final int MAX_MSG_NUMS_FOR_POP_REQUEST = 32;
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/ForwardProducer.java
Patch:
@@ -86,14 +86,13 @@ public void endTransaction(EndTransactionRequestHeader request, long timeoutMill
     public CompletableFuture<SendResult> sendMessage(String address, String brokerName, Message msg,
         SendMessageRequestHeader requestHeader, long timeoutMillis) {
         CompletableFuture<SendResult> future = this.getClient().sendMessage(address, brokerName, msg, requestHeader, timeoutMillis);
-        future.thenApply(sendResult -> {
+        return future.thenApply(sendResult -> {
             if (SendStatus.SEND_OK.equals(sendResult.getSendStatus()) && !StringUtils.isEmpty(sendResult.getTransactionId())) {
                 TransactionId transactionId = TransactionId.genFromBrokerTransactionId(address, sendResult);
                 sendResult.setTransactionId(transactionId.getProxyTransactionId());
             }
             return sendResult;
         });
-        return future;
     }
 
     public CompletableFuture<RemotingCommand> sendMessageBack(String brokerAddr, ConsumerSendMsgBackRequestHeader requestHeader, long timeoutMillis) {

File: proxy/src/test/java/org/apache/rocketmq/proxy/common/utils/FilterUtilTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.proxy.common.utils;
 
+import java.util.concurrent.ThreadLocalRandom;
 import org.apache.rocketmq.common.filter.FilterAPI;
 import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
 import org.junit.Test;

File: proxy/src/main/java/org/apache/rocketmq/proxy/channel/ChannelManager.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.common.Cleaner;
 import org.apache.rocketmq.proxy.grpc.adapter.channel.GrpcClientChannel;
-import org.apache.rocketmq.proxy.grpc.common.InterceptorConstants;
+import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/utils/FilterUtils.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Set;
 import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
 
-public class FilterUtil {
+public class FilterUtils {
     /**
      * Whether the message's tag matches consumerGroup's SubscriptionData
      *

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/common/Converter.java
Patch:
@@ -193,7 +193,8 @@ public static ChangeInvisibleTimeRequestHeader buildChangeInvisibleTimeRequestHe
         changeInvisibleTimeRequestHeader.setQueueId(handle.getQueueId());
         changeInvisibleTimeRequestHeader.setExtraInfo(handle.getReceiptHandle());
         changeInvisibleTimeRequestHeader.setOffset(handle.getOffset());
-        changeInvisibleTimeRequestHeader.setInvisibleTime(delayPolicy.getDelayInterval(ConfigurationManager.getProxyConfig().getRetryDelayLevelDelta() + request.getDeliveryAttempt()));
+        changeInvisibleTimeRequestHeader.setInvisibleTime(
+            delayPolicy.getDelayInterval(ConfigurationManager.getProxyConfig().getRetryDelayLevelDelta() + request.getDeliveryAttempt()));
         return changeInvisibleTimeRequestHeader;
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/ContextInterceptor.java
Patch:
@@ -23,7 +23,6 @@
 import io.grpc.ServerCall;
 import io.grpc.ServerCallHandler;
 import io.grpc.ServerInterceptor;
-import org.apache.rocketmq.proxy.grpc.common.InterceptorConstants;
 
 public class ContextInterceptor implements ServerInterceptor {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/HeaderInterceptor.java
Patch:
@@ -25,7 +25,6 @@
 import io.grpc.ServerInterceptor;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
-import org.apache.rocketmq.proxy.grpc.common.InterceptorConstants;
 
 public class HeaderInterceptor implements ServerInterceptor {
     @Override

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/InterceptorConstants.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.common;
+package org.apache.rocketmq.proxy.grpc.interceptor;
 
 import io.grpc.Context;
 import io.grpc.Metadata;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/LocalGrpcService.java
Patch:
@@ -98,7 +98,7 @@
 import org.apache.rocketmq.proxy.grpc.adapter.handler.SendMessageResponseHandler;
 import org.apache.rocketmq.proxy.grpc.common.Converter;
 import org.apache.rocketmq.proxy.grpc.common.DelayPolicy;
-import org.apache.rocketmq.proxy.grpc.common.InterceptorConstants;
+import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
 import org.apache.rocketmq.proxy.grpc.common.PollCommandResponseFuture;
 import org.apache.rocketmq.proxy.grpc.common.PollCommandResponseManager;
 import org.apache.rocketmq.proxy.grpc.common.ProxyMode;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/ClientService.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.rocketmq.proxy.connector.ConnectorManager;
 import org.apache.rocketmq.proxy.grpc.adapter.channel.GrpcClientChannel;
 import org.apache.rocketmq.proxy.grpc.common.Converter;
-import org.apache.rocketmq.proxy.grpc.common.InterceptorConstants;
+import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
 import org.apache.rocketmq.proxy.grpc.common.PollCommandResponseManager;
 import org.apache.rocketmq.remoting.protocol.LanguageCode;
 import org.slf4j.Logger;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/PullMessageService.java
Patch:
@@ -34,7 +34,7 @@
 import org.apache.rocketmq.client.consumer.PullStatus;
 import org.apache.rocketmq.common.protocol.header.PullMessageRequestHeader;
 import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
-import org.apache.rocketmq.proxy.common.utils.FilterUtil;
+import org.apache.rocketmq.proxy.common.utils.FilterUtils;
 import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.connector.ConnectorManager;
@@ -156,7 +156,7 @@ protected PullMessageResponse convertToPullMessageResponse(Context ctx, PullMess
         PullStatus status = result.getPullStatus();
         if (status.equals(PullStatus.FOUND)) {
             List<Message> messageList = result.getMsgFoundList().stream()
-                .filter(msg -> FilterUtil.isTagMatched(subscriptionData.getTagsSet(), msg.getTags())) // only return tag matched messages.
+                .filter(msg -> FilterUtils.isTagMatched(subscriptionData.getTagsSet(), msg.getTags())) // only return tag matched messages.
                 .map(Converter::buildMessage)
                 .collect(Collectors.toList());
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/service/LocalGrpcServiceTest.java
Patch:
@@ -78,7 +78,7 @@
 import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
 import org.apache.rocketmq.proxy.connector.transaction.TransactionId;
 import org.apache.rocketmq.proxy.grpc.common.Converter;
-import org.apache.rocketmq.proxy.grpc.common.InterceptorConstants;
+import org.apache.rocketmq.proxy.grpc.interceptor.InterceptorConstants;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.store.MessageStore;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/common/ParameterConverter.java
Patch:
@@ -18,6 +18,7 @@
 
 import io.grpc.Context;
 
+@FunctionalInterface
 public interface ParameterConverter<T, R> {
     R convert(Context ctx, T parameter) throws Throwable;
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/ClusterGrpcService.java
Patch:
@@ -70,7 +70,7 @@
 import org.apache.rocketmq.proxy.grpc.service.cluster.ClientService;
 import org.apache.rocketmq.proxy.grpc.service.cluster.ProducerService;
 import org.apache.rocketmq.proxy.grpc.service.cluster.PullMessageService;
-import org.apache.rocketmq.proxy.grpc.service.cluster.ReceiveMessageService;
+import org.apache.rocketmq.proxy.grpc.service.cluster.ConsumerService;
 import org.apache.rocketmq.proxy.grpc.service.cluster.RouteService;
 import org.apache.rocketmq.proxy.grpc.service.cluster.TransactionService;
 import org.slf4j.Logger;
@@ -85,7 +85,7 @@ public class ClusterGrpcService extends AbstractStartAndShutdown implements Grpc
     private final ChannelManager channelManager;
     private final ConnectorManager connectorManager;
     private final ProducerService producerService;
-    private final ReceiveMessageService receiveMessageService;
+    private final ConsumerService receiveMessageService;
     private final RouteService routeService;
     private final ClientService clientService;
     private final PullMessageService pullMessageService;
@@ -96,7 +96,7 @@ public ClusterGrpcService() {
         this.channelManager = new ChannelManager();
         this.pollCommandResponseManager = new PollCommandResponseManager();
         this.connectorManager = new ConnectorManager(new GrpcTransactionStateChecker());
-        this.receiveMessageService = new ReceiveMessageService(connectorManager);
+        this.receiveMessageService = new ConsumerService(connectorManager);
         this.producerService = new ProducerService(connectorManager);
         this.routeService = new RouteService(ProxyMode.CLUSTER, connectorManager);
         this.clientService = new ClientService(connectorManager, scheduledExecutorService, channelManager, pollCommandResponseManager);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/AssignmentQueueSelector.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.List;
 import org.apache.rocketmq.proxy.connector.route.SelectableMessageQueue;
 
-public interface RouteAssignmentQueueSelector {
+public interface AssignmentQueueSelector {
 
     List<SelectableMessageQueue> getAssignment(Context ctx, QueryAssignmentRequest request) throws Exception;
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/DefaultAssignmentQueueSelector.java
Patch:
@@ -24,11 +24,11 @@
 import org.apache.rocketmq.proxy.connector.route.TopicRouteCache;
 import org.apache.rocketmq.proxy.grpc.common.Converter;
 
-public class DefaultRouteAssignmentQueueSelector implements RouteAssignmentQueueSelector {
+public class DefaultAssignmentQueueSelector implements AssignmentQueueSelector {
 
     private final TopicRouteCache topicRouteCache;
 
-    public DefaultRouteAssignmentQueueSelector(TopicRouteCache topicRouteCache) {
+    public DefaultAssignmentQueueSelector(TopicRouteCache topicRouteCache) {
         this.topicRouteCache = topicRouteCache;
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/DefaultReadQueueSelector.java
Patch:
@@ -23,11 +23,11 @@
 import org.apache.rocketmq.proxy.connector.route.SelectableMessageQueue;
 import org.apache.rocketmq.proxy.connector.route.TopicRouteCache;
 
-public class DefaultReceiveMessageQueueSelector implements ReceiveMessageQueueSelector {
+public class DefaultReadQueueSelector implements ReadQueueSelector {
 
     private final TopicRouteCache topicRouteCache;
 
-    public DefaultReceiveMessageQueueSelector(TopicRouteCache topicRouteCache) {
+    public DefaultReadQueueSelector(TopicRouteCache topicRouteCache) {
         this.topicRouteCache = topicRouteCache;
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/DefaultWriteQueueSelector.java
Patch:
@@ -26,12 +26,12 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-public class DefaultProducerQueueSelector implements ProducerQueueSelector {
+public class DefaultWriteQueueSelector implements WriteQueueSelector {
 
-    private static final Logger log = LoggerFactory.getLogger(DefaultProducerQueueSelector.class);
+    private static final Logger log = LoggerFactory.getLogger(DefaultWriteQueueSelector.class);
     protected final TopicRouteCache topicRouteCache;
 
-    public DefaultProducerQueueSelector(TopicRouteCache topicRouteCache) {
+    public DefaultWriteQueueSelector(TopicRouteCache topicRouteCache) {
         this.topicRouteCache = topicRouteCache;
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/ReadQueueSelector.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.rocketmq.common.protocol.header.PopMessageRequestHeader;
 import org.apache.rocketmq.proxy.connector.route.SelectableMessageQueue;
 
-public interface ReceiveMessageQueueSelector {
+public interface ReadQueueSelector {
 
     SelectableMessageQueue select(Context ctx, ReceiveMessageRequest request, PopMessageRequestHeader requestHeader);
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/WriteQueueSelector.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.rocketmq.common.protocol.header.SendMessageRequestHeader;
 import org.apache.rocketmq.proxy.connector.route.SelectableMessageQueue;
 
-public interface ProducerQueueSelector {
+public interface WriteQueueSelector {
 
     SelectableMessageQueue selectQueue(Context ctx, SendMessageRequest request,
         SendMessageRequestHeader requestHeader, org.apache.rocketmq.common.message.Message message);

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/service/cluster/ProducerServiceTest.java
Patch:
@@ -149,7 +149,7 @@ public void testSendMessageWithErrorThrow() {
         producerService.setMessageQueueSelector((ctx, request, requestHeader, message) -> {
             throw ex;
         });
-        producerService.setProducerServiceHook((request, response, t) ->  {
+        producerService.setSendMessageHook((request, response, t) ->  {
             assertSame(ex, t);
         });
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/service/cluster/ProducerServiceTest.java
Patch:
@@ -32,7 +32,6 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.proxy.connector.route.SelectableMessageQueue;
 import org.apache.rocketmq.proxy.grpc.common.ProxyException;
-import org.apache.rocketmq.proxy.grpc.common.ProxyResponseCode;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
@@ -113,7 +112,7 @@ public void testSendMessageNoQueueSelect() {
             assertNotNull(e);
             assertTrue(e instanceof ExecutionException);
             assertTrue(e.getCause() instanceof ProxyException);
-            assertEquals(ProxyResponseCode.NO_TOPIC_ROUTE, ((ProxyException) e.getCause()).getCode());
+            assertEquals(Code.NOT_FOUND, ((ProxyException) e.getCause()).getCode());
         }
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/transaction/TransactionId.java
Patch:
@@ -91,8 +91,8 @@ public static TransactionId genFromBrokerTransactionId(SocketAddress brokerAddr,
             .build();
     }
 
-    public static TransactionId genFromGatewayTransactionId(String gatewayTransactionId) throws UnknownHostException {
-        ByteBuffer byteBuffer = ByteBuffer.wrap(UtilAll.string2bytes(gatewayTransactionId));
+    public static TransactionId decode(String transactionId) throws UnknownHostException {
+        ByteBuffer byteBuffer = ByteBuffer.wrap(UtilAll.string2bytes(transactionId));
 
         byte[] ip = new byte[4];
         byteBuffer.get(ip);
@@ -111,7 +111,7 @@ public static TransactionId genFromGatewayTransactionId(String gatewayTransactio
             .brokerTransactionId(new String(orgTransactionIdByte, StandardCharsets.UTF_8))
             .commitLogOffset(commitLogOffset)
             .tranStateTableOffset(tranStateTableOffset)
-            .gatewayTransactionId(gatewayTransactionId)
+            .gatewayTransactionId(transactionId)
             .build();
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/BaseService.java
Patch:
@@ -20,9 +20,9 @@
 
 public class BaseService {
 
-    protected final ConnectorManager clientManager;
+    protected final ConnectorManager connectorManager;
 
-    public BaseService(ConnectorManager clientManager) {
-        this.clientManager = clientManager;
+    public BaseService(ConnectorManager connectorManager) {
+        this.connectorManager = connectorManager;
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/AbstractForwardClient.java
Patch:
@@ -14,11 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.client;
+package org.apache.rocketmq.proxy.connector;
 
 import java.util.concurrent.ThreadLocalRandom;
 import org.apache.rocketmq.client.impl.MQClientAPIExtImpl;
-import org.apache.rocketmq.proxy.client.factory.ForwardClientFactory;
+import org.apache.rocketmq.proxy.connector.factory.ForwardClientFactory;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 
 public abstract class AbstractForwardClient implements StartAndShutdown {

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/ForwardProducer.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.client;
+package org.apache.rocketmq.proxy.connector;
 
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.client.impl.MQClientAPIExtImpl;
@@ -23,7 +23,7 @@
 import org.apache.rocketmq.common.protocol.header.ConsumerSendMsgBackRequestHeader;
 import org.apache.rocketmq.common.protocol.header.SendMessageRequestHeader;
 import org.apache.rocketmq.common.protocol.heartbeat.HeartbeatData;
-import org.apache.rocketmq.proxy.client.factory.ForwardClientFactory;
+import org.apache.rocketmq.proxy.connector.factory.ForwardClientFactory;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/ForwardReadConsumer.java
Patch:
@@ -14,15 +14,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.client;
+package org.apache.rocketmq.proxy.connector;
 
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.client.consumer.PopResult;
 import org.apache.rocketmq.client.consumer.PullResult;
 import org.apache.rocketmq.client.impl.MQClientAPIExtImpl;
 import org.apache.rocketmq.common.protocol.header.PopMessageRequestHeader;
 import org.apache.rocketmq.common.protocol.header.PullMessageRequestHeader;
-import org.apache.rocketmq.proxy.client.factory.ForwardClientFactory;
+import org.apache.rocketmq.proxy.connector.factory.ForwardClientFactory;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 
 public class ForwardReadConsumer extends AbstractForwardClient {

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/ForwardWriteConsumer.java
Patch:
@@ -14,15 +14,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.client;
+package org.apache.rocketmq.proxy.connector;
 
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.client.consumer.AckResult;
 import org.apache.rocketmq.client.impl.MQClientAPIExtImpl;
 import org.apache.rocketmq.common.protocol.header.AckMessageRequestHeader;
 import org.apache.rocketmq.common.protocol.header.ChangeInvisibleTimeRequestHeader;
 import org.apache.rocketmq.common.protocol.header.UpdateConsumerOffsetRequestHeader;
-import org.apache.rocketmq.proxy.client.factory.ForwardClientFactory;
+import org.apache.rocketmq.proxy.connector.factory.ForwardClientFactory;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/processor/DoNothingClientRemotingProcessor.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.client.processor;
+package org.apache.rocketmq.proxy.connector.processor;
 
 import io.netty.channel.ChannelHandlerContext;
 import org.apache.rocketmq.client.impl.ClientRemotingProcessor;

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/route/MessageQueueSelector.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.client.route;
+package org.apache.rocketmq.proxy.connector.route;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/route/MessageQueueWrapper.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.client.route;
+package org.apache.rocketmq.proxy.connector.route;
 
 import org.apache.rocketmq.common.protocol.route.TopicRouteData;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/route/SelectableMessageQueue.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.client.route;
+package org.apache.rocketmq.proxy.connector.route;
 
 import java.util.Objects;
 import org.apache.rocketmq.common.message.MessageQueue;

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/route/TopicRouteWrapper.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.client.route;
+package org.apache.rocketmq.proxy.connector.route;
 
 import java.util.HashMap;
 import java.util.List;

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/transaction/TransactionId.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.client.transaction;
+package org.apache.rocketmq.proxy.connector.transaction;
 
 import java.net.InetAddress;
 import java.net.InetSocketAddress;

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/transaction/TransactionStateCheckRequest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.client.transaction;
+package org.apache.rocketmq.proxy.connector.transaction;
 
 import org.apache.rocketmq.common.message.MessageExt;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/connector/transaction/TransactionStateChecker.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.client.transaction;
+package org.apache.rocketmq.proxy.connector.transaction;
 
 public interface TransactionStateChecker {
     void checkTransactionState(TransactionStateCheckRequest checkData);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/ClusterGrpcService.java
Patch:
@@ -54,7 +54,7 @@
 import io.grpc.Context;
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.proxy.client.ForwardClientManager;
+import org.apache.rocketmq.proxy.connector.ConnectorManager;
 import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.grpc.service.cluster.ProducerService;
 import org.apache.rocketmq.proxy.grpc.service.cluster.RouteService;
@@ -64,12 +64,12 @@
 public class ClusterGrpcService extends AbstractStartAndShutdown implements GrpcForwardService {
     private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
 
-    private final ForwardClientManager forwardClientManager;
+    private final ConnectorManager forwardClientManager;
     private final ProducerService producerService;
     private final RouteService routeService;
 
     public ClusterGrpcService() {
-        this.forwardClientManager = new ForwardClientManager(checkData -> {
+        this.forwardClientManager = new ConnectorManager(checkData -> {
         });
         this.producerService = new ProducerService(forwardClientManager);
         this.routeService = new RouteService(forwardClientManager);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/BaseService.java
Patch:
@@ -16,13 +16,13 @@
  */
 package org.apache.rocketmq.proxy.grpc.service.cluster;
 
-import org.apache.rocketmq.proxy.client.ForwardClientManager;
+import org.apache.rocketmq.proxy.connector.ConnectorManager;
 
 public class BaseService {
 
-    protected final ForwardClientManager clientManager;
+    protected final ConnectorManager clientManager;
 
-    public BaseService(ForwardClientManager clientManager) {
+    public BaseService(ConnectorManager clientManager) {
         this.clientManager = clientManager;
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/ConsumerService.java
Patch:
@@ -20,11 +20,11 @@
 import apache.rocketmq.v1.ReceiveMessageResponse;
 import io.grpc.Context;
 import java.util.concurrent.CompletableFuture;
-import org.apache.rocketmq.proxy.client.ForwardClientManager;
+import org.apache.rocketmq.proxy.connector.ConnectorManager;
 
 public class ConsumerService extends BaseService {
 
-    public ConsumerService(ForwardClientManager clientManager) {
+    public ConsumerService(ConnectorManager clientManager) {
         super(clientManager);
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/ProducerService.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.protocol.header.SendMessageRequestHeader;
-import org.apache.rocketmq.proxy.client.ForwardClientManager;
-import org.apache.rocketmq.proxy.client.route.SelectableMessageQueue;
+import org.apache.rocketmq.proxy.connector.ConnectorManager;
+import org.apache.rocketmq.proxy.connector.route.SelectableMessageQueue;
 import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
 import org.apache.rocketmq.proxy.grpc.common.Converter;
 import org.apache.rocketmq.proxy.grpc.common.ProxyException;
@@ -42,7 +42,7 @@ public class ProducerService extends BaseService {
     private volatile ProducerServiceHook producerServiceHook = null;
     private volatile MessageQueueSelector messageQueueSelector = new DefaultMessageQueueSelector();
 
-    public ProducerService(ForwardClientManager clientManager) {
+    public ProducerService(ConnectorManager clientManager) {
         super(clientManager);
     }
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/connector/ForwardClientManagerTest.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.client;
+package org.apache.rocketmq.proxy.connector;
 
-import org.apache.rocketmq.proxy.client.transaction.TransactionStateChecker;
+import org.apache.rocketmq.proxy.connector.transaction.TransactionStateChecker;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
 import org.junit.Test;
@@ -30,7 +30,7 @@ public class ForwardClientManagerTest extends InitConfigAndLoggerTest {
     @Test
     public void testClientManager() throws Exception {
         TransactionStateChecker mockedTransactionStateChecker = Mockito.mock(TransactionStateChecker.class);
-        ForwardClientManager clientManager = new ForwardClientManager(mockedTransactionStateChecker);
+        ConnectorManager clientManager = new ConnectorManager(mockedTransactionStateChecker);
         clientManager.start();
 
         assertThat(clientManager.getDefaultForwardClient()).isNotNull();

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/service/cluster/ProducerServiceTest.java
Patch:
@@ -35,7 +35,7 @@
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.protocol.header.SendMessageRequestHeader;
-import org.apache.rocketmq.proxy.client.route.SelectableMessageQueue;
+import org.apache.rocketmq.proxy.connector.route.SelectableMessageQueue;
 import org.apache.rocketmq.proxy.grpc.common.ProxyException;
 import org.apache.rocketmq.proxy.grpc.common.ProxyResponseCode;
 import org.junit.Test;

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/service/cluster/RouteServiceTest.java
Patch:
@@ -19,13 +19,12 @@
 import org.apache.rocketmq.common.protocol.route.BrokerData;
 import org.apache.rocketmq.common.protocol.route.QueueData;
 import org.apache.rocketmq.common.protocol.route.TopicRouteData;
-import org.apache.rocketmq.proxy.client.route.MessageQueueWrapper;
+import org.apache.rocketmq.proxy.connector.route.MessageQueueWrapper;
 import org.apache.rocketmq.proxy.grpc.common.ResponseBuilder;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
-import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.when;
 
 public class RouteServiceTest extends BaseServiceTest {

File: proxy/src/main/java/org/apache/rocketmq/proxy/HealthCheckServer.java
Patch:
@@ -23,7 +23,7 @@
 import java.io.IOException;
 import java.io.OutputStream;
 import java.net.InetSocketAddress;
-import org.apache.rocketmq.proxy.configuration.ConfigurationManager;
+import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 
 public class HealthCheckServer implements StartAndShutdown {

File: proxy/src/main/java/org/apache/rocketmq/proxy/ProxyStartup.java
Patch:
@@ -26,8 +26,8 @@
 import org.apache.rocketmq.broker.BrokerStartup;
 import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
-import org.apache.rocketmq.proxy.configuration.ConfigurationManager;
-import org.apache.rocketmq.proxy.configuration.ProxyConfig;
+import org.apache.rocketmq.proxy.config.ConfigurationManager;
+import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.apache.rocketmq.proxy.grpc.GrpcServer;
 import org.apache.rocketmq.proxy.grpc.common.ProxyMode;
 import org.apache.rocketmq.proxy.grpc.service.ClusterGrpcService;

File: proxy/src/main/java/org/apache/rocketmq/proxy/channel/ChannelManager.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.concurrent.ConcurrentMap;
 import java.util.function.Supplier;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.proxy.configuration.ConfigurationManager;
+import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.grpc.adapter.channel.SendMessageChannel;
 import org.apache.rocketmq.proxy.grpc.common.InterceptorConstants;
 import org.slf4j.Logger;

File: proxy/src/main/java/org/apache/rocketmq/proxy/client/DefaultForwardClient.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.rocketmq.common.protocol.header.GetConsumerListByGroupRequestHeader;
 import org.apache.rocketmq.common.protocol.route.TopicRouteData;
 import org.apache.rocketmq.proxy.client.factory.ForwardClientFactory;
-import org.apache.rocketmq.proxy.configuration.ConfigurationManager;
+import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 
 public class DefaultForwardClient extends AbstractForwardClient {

File: proxy/src/main/java/org/apache/rocketmq/proxy/client/ForwardProducer.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.rocketmq.common.protocol.header.SendMessageRequestHeader;
 import org.apache.rocketmq.common.protocol.heartbeat.HeartbeatData;
 import org.apache.rocketmq.proxy.client.factory.ForwardClientFactory;
-import org.apache.rocketmq.proxy.configuration.ConfigurationManager;
+import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
 public class ForwardProducer extends AbstractForwardClient {

File: proxy/src/main/java/org/apache/rocketmq/proxy/client/ForwardReadConsumer.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.rocketmq.common.protocol.header.PopMessageRequestHeader;
 import org.apache.rocketmq.common.protocol.header.PullMessageRequestHeader;
 import org.apache.rocketmq.proxy.client.factory.ForwardClientFactory;
-import org.apache.rocketmq.proxy.configuration.ConfigurationManager;
+import org.apache.rocketmq.proxy.config.ConfigurationManager;
 
 public class ForwardReadConsumer extends AbstractForwardClient {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/client/TopicRouteCache.java
Patch:
@@ -31,8 +31,8 @@
 import org.apache.rocketmq.proxy.common.RetainCacheLoader;
 import org.apache.rocketmq.proxy.common.RocketMQHelper;
 import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
-import org.apache.rocketmq.proxy.configuration.ConfigurationManager;
-import org.apache.rocketmq.proxy.configuration.ProxyConfig;
+import org.apache.rocketmq.proxy.config.ConfigurationManager;
+import org.apache.rocketmq.proxy.config.ProxyConfig;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/client/factory/ForwardClientFactory.java
Patch:
@@ -22,20 +22,20 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.proxy.client.transaction.TransactionStateChecker;
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
-import org.apache.rocketmq.proxy.configuration.ConfigurationManager;
+import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.remoting.RPCHook;
 
 public class ForwardClientFactory implements StartAndShutdown {
 
     private RPCHook rpcHook = null;
 
-    private final MQClientFactoryImpl mqClientFactory;
+    private final MQClientFactory mqClientFactory;
     private final TransactionalProducerFactory transactionalProducerFactory;
 
     public ForwardClientFactory(TransactionStateChecker transactionStateChecker) {
         this.init();
 
-        this.mqClientFactory = new MQClientFactoryImpl(this.rpcHook);
+        this.mqClientFactory = new MQClientFactory(this.rpcHook);
         this.transactionalProducerFactory = new TransactionalProducerFactory(this.rpcHook, transactionStateChecker);
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/Configuration.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.configuration;
+package org.apache.rocketmq.proxy.config;
 
 import com.alibaba.fastjson.JSON;
 import java.io.File;

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/ConfigurationManager.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.configuration;
+package org.apache.rocketmq.proxy.config;
 
 import java.io.File;
 import org.apache.commons.lang3.StringUtils;

File: proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.configuration;
+package org.apache.rocketmq.proxy.config;
 
 import org.apache.rocketmq.proxy.grpc.common.ProxyMode;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServer.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
-import org.apache.rocketmq.proxy.configuration.ConfigurationManager;
+import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.grpc.interceptor.ContextInterceptor;
 import org.apache.rocketmq.proxy.grpc.interceptor.HeaderInterceptor;
 import org.apache.rocketmq.proxy.grpc.service.GrpcForwardService;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/ContextInterceptor.java
Patch:
@@ -33,8 +33,7 @@ public <R, W> ServerCall.Listener<R> interceptCall(
         Metadata headers,
         ServerCallHandler<R, W> next
     ) {
-        Context context = Context.current()
-            .withValue(InterceptorConstants.METADATA, headers);
+        Context context = Context.current().withValue(InterceptorConstants.METADATA, headers);
         return Contexts.interceptCall(context, call, headers, next);
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/LocalGrpcService.java
Patch:
@@ -69,7 +69,7 @@
 import org.apache.rocketmq.proxy.channel.ChannelManager;
 import org.apache.rocketmq.proxy.channel.SimpleChannel;
 import org.apache.rocketmq.proxy.channel.SimpleChannelHandlerContext;
-import org.apache.rocketmq.proxy.configuration.ConfigurationManager;
+import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.grpc.adapter.InvocationContext;
 import org.apache.rocketmq.proxy.grpc.adapter.channel.ReceiveMessageChannel;
 import org.apache.rocketmq.proxy.grpc.adapter.channel.SendMessageChannel;

File: proxy/src/test/java/org/apache/rocketmq/proxy/client/ForwardClientManagerTest.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.rocketmq.proxy.client;
 
 import org.apache.rocketmq.proxy.client.transaction.TransactionStateChecker;
-import org.apache.rocketmq.proxy.configuration.ConfigurationManager;
-import org.apache.rocketmq.proxy.configuration.InitConfigAndLoggerTest;
+import org.apache.rocketmq.proxy.config.ConfigurationManager;
+import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
 import org.junit.Test;
 import org.mockito.Mockito;
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/config/ConfigurationManagerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.configuration;
+package org.apache.rocketmq.proxy.config;
 
 import org.apache.rocketmq.proxy.grpc.common.ProxyMode;
 import org.junit.Test;

File: proxy/src/test/java/org/apache/rocketmq/proxy/config/InitConfigAndLoggerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.configuration;
+package org.apache.rocketmq.proxy.config;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.joran.JoranConfigurator;
@@ -26,7 +26,7 @@
 import org.junit.Before;
 import org.slf4j.LoggerFactory;
 
-import static org.apache.rocketmq.proxy.configuration.ConfigurationManager.RMQ_PROXY_HOME;
+import static org.apache.rocketmq.proxy.config.ConfigurationManager.RMQ_PROXY_HOME;
 
 public class InitConfigAndLoggerTest {
     public static String mockProxyHome = "/mock/rmq/proxy/home";

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/service/LocalGrpcServiceTest.java
Patch:
@@ -44,7 +44,7 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.protocol.ResponseCode;
 import org.apache.rocketmq.common.protocol.header.PopMessageResponseHeader;
-import org.apache.rocketmq.proxy.configuration.InitConfigAndLoggerTest;
+import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;
 import org.apache.rocketmq.proxy.grpc.common.Converter;
 import org.apache.rocketmq.proxy.grpc.common.InterceptorConstants;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;

File: test/src/test/java/org/apache/rocketmq/test/proxy/LocalGrpcTest.java
Patch:
@@ -33,15 +33,15 @@
 import io.grpc.Channel;
 import java.net.URL;
 import java.util.concurrent.TimeUnit;
-import org.apache.rocketmq.proxy.configuration.ConfigurationManager;
+import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.grpc.GrpcMessagingProcessor;
 import org.apache.rocketmq.proxy.grpc.service.LocalGrpcService;
 import org.apache.rocketmq.test.base.GrpcBaseTest;
 import org.junit.Before;
 import org.junit.Test;
 
 import static org.apache.rocketmq.common.message.MessageClientIDSetter.createUniqID;
-import static org.apache.rocketmq.proxy.configuration.ConfigurationManager.RMQ_PROXY_HOME;
+import static org.apache.rocketmq.proxy.config.ConfigurationManager.RMQ_PROXY_HOME;
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class LocalGrpcTest extends GrpcBaseTest {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/channel/GrpcClientChannel.java
Patch:
@@ -33,14 +33,14 @@ public class GrpcClientChannel extends SimpleChannel {
 
     private final AtomicReference<CompletableFuture<PollCommandResponse>> pollCommandResponseFutureRef = new AtomicReference<>();
 
-    public GrpcClientChannel(SimpleChannel simpleChannel) {
-        super(simpleChannel);
+    public GrpcClientChannel() {
+        super(ChannelManager.createSimpleChannelDirectly());
     }
 
     public static GrpcClientChannel create(ChannelManager channelManager, String group, String clientId) {
         GrpcClientChannel channel = channelManager.createChannel(
             buildKey(group, clientId),
-            () -> new GrpcClientChannel(ChannelManager.createSimpleChannelDirectly()),
+            GrpcClientChannel::new,
             GrpcClientChannel.class);
 
         GROUP_CLIENT_IDS.compute(group, (groupKey, clientIds) -> {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/LocalGrpcService.java
Patch:
@@ -139,7 +139,7 @@ public CompletableFuture<SendMessageResponse> sendMessage(Context ctx, SendMessa
         command.makeCustomHeaderToNet();
 
         SendMessageResponseHandler handler = new SendMessageResponseHandler(message.getSystemAttribute().getMessageId());
-        SendMessageChannel channel = SendMessageChannel.create(channelManager.createChannel(), handler);
+        SendMessageChannel channel = channelManager.createChannel(() -> new SendMessageChannel(handler), SendMessageChannel.class);
         SimpleChannelHandlerContext channelHandlerContext = new SimpleChannelHandlerContext(channel);
         CompletableFuture<SendMessageResponse> future = new CompletableFuture<>();
         InvocationContext<SendMessageRequest, SendMessageResponse> context
@@ -179,7 +179,7 @@ public CompletableFuture<ReceiveMessageResponse> receiveMessage(Context ctx, Rec
         command.makeCustomHeaderToNet();
 
         ReceiveMessageResponseHandler handler = new ReceiveMessageResponseHandler();
-        ReceiveMessageChannel channel = ReceiveMessageChannel.create(channelManager.createChannel(), handler);
+        ReceiveMessageChannel channel = channelManager.createChannel(() -> new ReceiveMessageChannel(handler), ReceiveMessageChannel.class);
         SimpleChannelHandlerContext channelHandlerContext = new SimpleChannelHandlerContext(channel);
         CompletableFuture<ReceiveMessageResponse> future = new CompletableFuture<>();
         InvocationContext<ReceiveMessageRequest, ReceiveMessageResponse> context

File: proxy/src/test/java/org/apache/rocketmq/proxy/client/ForwardClientManagerTest.java
Patch:
@@ -19,13 +19,13 @@
 
 import org.apache.rocketmq.proxy.client.transaction.TransactionStateChecker;
 import org.apache.rocketmq.proxy.configuration.ConfigurationManager;
-import org.apache.rocketmq.proxy.configuration.InitConfigurationTest;
+import org.apache.rocketmq.proxy.configuration.InitConfigAndLoggerTest;
 import org.junit.Test;
 import org.mockito.Mockito;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class ClientManagerTest extends InitConfigurationTest {
+public class ForwardClientManagerTest extends InitConfigAndLoggerTest {
 
     @Test
     public void testClientManager() throws Exception {

File: proxy/src/test/java/org/apache/rocketmq/proxy/configuration/ConfigurationManagerTest.java
Patch:
@@ -22,7 +22,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class ConfigurationManagerTest extends InitConfigurationTest {
+public class ConfigurationManagerTest extends InitConfigAndLoggerTest {
 
     @Test
     public void testInitEnv() {

File: proxy/src/test/java/org/apache/rocketmq/proxy/configuration/InitConfigAndLoggerTest.java
Patch:
@@ -28,7 +28,7 @@
 
 import static org.apache.rocketmq.proxy.configuration.ConfigurationManager.RMQ_PROXY_HOME;
 
-public class InitConfigurationTest {
+public class InitConfigAndLoggerTest {
     public static String mockProxyHome = "/mock/rmq/proxy/home";
 
     @Before

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServer.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
 import org.apache.rocketmq.proxy.configuration.ConfigurationManager;
+import org.apache.rocketmq.proxy.grpc.interceptor.ContextInterceptor;
 import org.apache.rocketmq.proxy.grpc.interceptor.HeaderInterceptor;
 import org.apache.rocketmq.proxy.grpc.service.GrpcForwardService;
 import org.slf4j.Logger;
@@ -91,6 +92,7 @@ public GrpcServer(GrpcForwardService grpcForwardService) {
             .channelType(NioServerSocketChannel.class)
             .addService(messagingProcessor)
             .executor(this.executor)
+            .intercept(new ContextInterceptor())
             .intercept(new HeaderInterceptor())
             .build();
 

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/service/LocalGrpcServiceTest.java
Patch:
@@ -83,8 +83,6 @@ public void setUp() throws Exception {
         System.setProperty(RMQ_PROXY_HOME, mockProxyHome);
         ConfigurationManager.initEnv();
         ConfigurationManager.intConfig();
-        ConfigurationManager.initEnv();
-        ConfigurationManager.intConfig();
         Mockito.when(brokerControllerMock.getSendMessageProcessor()).thenReturn(sendMessageProcessorMock);
         Mockito.when(brokerControllerMock.getPopMessageProcessor()).thenReturn(popMessageProcessorMock);
         localGrpcService = new LocalGrpcService(brokerControllerMock);

File: proxy/src/test/java/org/apache/rocketmq/proxy/grpc/service/LocalGrpcServiceTest.java
Patch:
@@ -27,11 +27,13 @@
 import io.grpc.Context;
 import io.grpc.Metadata;
 import io.netty.channel.ChannelHandlerContext;
+import java.net.URL;
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.processor.ClientManageProcessor;
 import org.apache.rocketmq.broker.processor.SendMessageProcessor;
 import org.apache.rocketmq.common.protocol.ResponseCode;
+import org.apache.rocketmq.proxy.configuration.ConfigurationManager;
 import org.apache.rocketmq.proxy.configuration.InitConfigurationTest;
 import org.apache.rocketmq.proxy.grpc.common.InterceptorConstants;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
@@ -43,6 +45,7 @@
 import org.mockito.Mockito;
 import org.mockito.junit.MockitoJUnitRunner;
 
+import static org.apache.rocketmq.proxy.configuration.ConfigurationManager.RMQ_PROXY_HOME;
 import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(MockitoJUnitRunner.class)

File: proxy/src/main/java/org/apache/rocketmq/proxy/ProxyStartup.java
Patch:
@@ -108,7 +108,7 @@ private static BrokerController createBrokerController() {
     private static void initThreadPoolMonitor() {
         ThreadPoolMonitor.init();
         ProxyConfig config = ConfigurationManager.getProxyConfig();
-        ThreadPoolMonitor.config(config.isEnablePrintJstack(), config.getPrintJstackPeriodMillis());
+        ThreadPoolMonitor.config(config.isEnablePrintJstack(), config.getPrintJstackInMillis());
     }
 
     private static void initLogger() throws JoranException {
@@ -120,6 +120,6 @@ private static void initLogger() throws JoranException {
         lc.reset();
         //https://logback.qos.ch/manual/configuration.html
         lc.setPackagingDataEnabled(false);
-        configurator.doConfigure(ConfigurationManager.getProxyHome() + "/conf/logback.xml");
+        configurator.doConfigure(ConfigurationManager.getProxyHome() + "/conf/logback_proxy.xml");
     }
 }
\ No newline at end of file

File: proxy/src/main/java/org/apache/rocketmq/proxy/channel/ChannelManager.java
Patch:
@@ -63,16 +63,15 @@ private SimpleChannel createChannelInner() {
             .get(InterceptorConstants.REMOTE_ADDRESS);
         final String localAddress = InterceptorConstants.METADATA.get(Context.current())
             .get(InterceptorConstants.LOCAL_ADDRESS);
-        return new SimpleChannel(null, clientHost, localAddress, ConfigurationManager.getProxyConfig().getExpiredChannelTimeSec());
+        return new SimpleChannel(null, clientHost, localAddress, ConfigurationManager.getProxyConfig().getChannelExpiredInSeconds());
     }
 
     /**
      * Scan and remove inactive mocking channels; Scan and clean expired requests;
      */
     public void scanAndCleanChannels() {
         try {
-            Iterator<Map.Entry<String, SimpleChannel>> iterator = clientIdChannelMap.entrySet()
-                .iterator();
+            Iterator<Map.Entry<String, SimpleChannel>> iterator = clientIdChannelMap.entrySet().iterator();
             while (iterator.hasNext()) {
                 Map.Entry<String, SimpleChannel> entry = iterator.next();
                 if (!entry.getValue()

File: proxy/src/main/java/org/apache/rocketmq/proxy/client/factory/MQClientFactoryImpl.java
Patch:
@@ -14,16 +14,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.proxy.client.mqconstructor;
+package org.apache.rocketmq.proxy.client.factory;
 
 import org.apache.rocketmq.client.ClientConfig;
 import org.apache.rocketmq.client.impl.MQClientAPIExtImpl;
 import org.apache.rocketmq.proxy.client.processor.DoNothingClientRemotingProcessor;
 import org.apache.rocketmq.remoting.RPCHook;
 
-public class MQClientAPIConstructor extends AbstractRocketMQClientConstructor<MQClientAPIExtImpl> {
+public class MQClientFactoryImpl extends AbstractMQClientFactory<MQClientAPIExtImpl> {
 
-    public MQClientAPIConstructor(RPCHook rpcHook) {
+    public MQClientFactoryImpl(RPCHook rpcHook) {
         super(rpcHook);
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/client/processor/DoNothingClientRemotingProcessor.java
Patch:
@@ -23,8 +23,7 @@
 
 public class DoNothingClientRemotingProcessor extends ClientRemotingProcessor {
 
-    public DoNothingClientRemotingProcessor(
-        MQClientInstance mqClientFactory) {
+    public DoNothingClientRemotingProcessor(MQClientInstance mqClientFactory) {
         super(mqClientFactory);
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/client/transaction/TransactionStateChecker.java
Patch:
@@ -17,6 +17,5 @@
 package org.apache.rocketmq.proxy.client.transaction;
 
 public interface TransactionStateChecker {
-
     void checkTransactionState(TransactionStateCheckRequest checkData);
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/ClusterGrpcService.java
Patch:
@@ -54,7 +54,7 @@
 import io.grpc.Context;
 import java.util.concurrent.CompletableFuture;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.proxy.client.ClientManager;
+import org.apache.rocketmq.proxy.client.ForwardClientManager;
 import org.apache.rocketmq.proxy.common.AbstractStartAndShutdown;
 import org.apache.rocketmq.proxy.grpc.service.cluster.ProducerService;
 import org.apache.rocketmq.proxy.grpc.service.cluster.RouteService;
@@ -64,12 +64,12 @@
 public class ClusterGrpcService extends AbstractStartAndShutdown implements GrpcForwardService {
     private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
 
-    private final ClientManager clientManager;
+    private final ForwardClientManager clientManager;
     private final ProducerService producerService;
     private final RouteService routeService;
 
     public ClusterGrpcService() {
-        this.clientManager = new ClientManager(checkData -> {
+        this.clientManager = new ForwardClientManager(checkData -> {
         });
         this.producerService = new ProducerService(clientManager);
         this.routeService = new RouteService(clientManager);

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/BaseService.java
Patch:
@@ -16,13 +16,13 @@
  */
 package org.apache.rocketmq.proxy.grpc.service.cluster;
 
-import org.apache.rocketmq.proxy.client.ClientManager;
+import org.apache.rocketmq.proxy.client.ForwardClientManager;
 
 public class BaseService {
 
-    protected final ClientManager clientManager;
+    protected final ForwardClientManager clientManager;
 
-    public BaseService(ClientManager clientManager) {
+    public BaseService(ForwardClientManager clientManager) {
         this.clientManager = clientManager;
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/ConsumerService.java
Patch:
@@ -20,11 +20,11 @@
 import apache.rocketmq.v1.ReceiveMessageResponse;
 import io.grpc.Context;
 import java.util.concurrent.CompletableFuture;
-import org.apache.rocketmq.proxy.client.ClientManager;
+import org.apache.rocketmq.proxy.client.ForwardClientManager;
 
 public class ConsumerService extends BaseService {
 
-    public ConsumerService(ClientManager clientManager) {
+    public ConsumerService(ForwardClientManager clientManager) {
         super(clientManager);
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/client/TopicRouteCache.java
Patch:
@@ -71,7 +71,7 @@ public AddressableMessageQueue selectOneWriteQueue(String topic, AddressableMess
         if (last == null) {
             return getMessageQueue(topic).getWrite().selectOne(false);
         }
-        return getMessageQueue(topic).getWrite().selectNextOne(last);
+        return getMessageQueue(topic).getWrite().selectNextQueue(last);
     }
 
     public AddressableMessageQueue selectOneWriteQueue(String topic, String brokerName, int queueId) throws Exception {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/ConsumerService.java
Patch:
@@ -29,6 +29,6 @@ public ConsumerService(ClientManager clientManager) {
     }
 
     public CompletableFuture<ReceiveMessageResponse> receiveMessage(Context ctx, ReceiveMessageRequest request) {
-
+        return null;
     }
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/cluster/RouteService.java
Patch:
@@ -70,7 +70,7 @@ public class DefaultRouteAssignmentQueueSelector implements RouteAssignmentQueue
         public List<AddressableMessageQueue> getAssignment(QueryAssignmentRequest request) throws Exception {
             MessageQueueWrapper messageQueueWrapper = clientManager.getTopicRouteCache()
                 .getMessageQueue(Converter.getResourceNameWithNamespace(request.getTopic()));
-            return messageQueueWrapper.getRead().getBrokers();
+            return messageQueueWrapper.getRead().getBrokerActingQueues();
         }
     }
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/AbstractStartAndShutdown.java
Patch:
@@ -23,9 +23,8 @@ public abstract class AbstractStartAndShutdown implements StartAndShutdown {
 
     protected List<StartAndShutdown> startAndShutdownList = new CopyOnWriteArrayList<>();
 
-    public AbstractStartAndShutdown appendStartAndShutdown(StartAndShutdown startAndShutdown) {
+    protected void appendStartAndShutdown(StartAndShutdown startAndShutdown) {
         this.startAndShutdownList.add(startAndShutdown);
-        return this;
     }
 
     @Override

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/HeaderInterceptor.java
Patch:
@@ -29,8 +29,8 @@
 
 public class HeaderInterceptor implements ServerInterceptor {
     @Override
-    public <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call, Metadata headers,
-        ServerCallHandler<ReqT, RespT> next) {
+    public <R, W> ServerCall.Listener<R> interceptCall(ServerCall<R, W> call, Metadata headers,
+        ServerCallHandler<R, W> next) {
         SocketAddress remoteSocketAddress = call.getAttributes()
             .get(Grpc.TRANSPORT_ATTR_REMOTE_ADDR);
         String remoteAddress = parseSocketAddress(remoteSocketAddress);

File: proxy/src/main/java/org/apache/rocketmq/proxy/channel/SimpleChannelHandlerContext.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.adapter.channel;
+package org.apache.rocketmq.proxy.channel;
 
 import io.netty.buffer.ByteBufAllocator;
 import io.netty.channel.Channel;

File: proxy/src/main/java/org/apache/rocketmq/proxy/client/TopicRouteCache.java
Patch:
@@ -66,7 +66,7 @@ public MessageQueueWrapper getMessageQueue(String topicName) throws Exception {
 
     protected static MessageQueueWrapper getCacheMessageQueueWrapper(LoadingCache<String, MessageQueueWrapper> topicCache, String key) throws Exception {
         MessageQueueWrapper res = topicCache.get(key);
-        if (res.isEmptyCacheQueue()) {
+        if (res.isEmptyCachedQueue()) {
             throw new MQClientException(ResponseCode.TOPIC_NOT_EXIST,
                 "No topic route info in name server for the topic: " + key);
         }
@@ -102,10 +102,10 @@ public MessageQueueWrapper getDirectly(String topic) throws Exception {
                     log.info("load {} from namesrv. topic: {}, queue: {}", loaderName(), topic, tmp);
                     return tmp;
                 }
-                return MessageQueueWrapper.EMPTY_CACHE_QUEUES;
+                return MessageQueueWrapper.EMPTY_CACHED_QUEUE;
             } catch (Exception e) {
                 if (RocketMQHelper.isTopicNotExistError(e)) {
-                    return MessageQueueWrapper.EMPTY_CACHE_QUEUES;
+                    return MessageQueueWrapper.EMPTY_CACHED_QUEUE;
                 }
                 throw e;
             }

File: proxy/src/main/java/org/apache/rocketmq/proxy/client/route/MessageQueueWrapper.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.rocketmq.common.protocol.route.TopicRouteData;
 
 public class MessageQueueWrapper {
-    public static final MessageQueueWrapper EMPTY_CACHE_QUEUES = new MessageQueueWrapper("", new TopicRouteData());
+    public static final MessageQueueWrapper EMPTY_CACHED_QUEUE = new MessageQueueWrapper("", new TopicRouteData());
 
     private final SelectableMessageQueue read;
     private final SelectableMessageQueue write;
@@ -40,8 +40,8 @@ public String getTopicName() {
         return topicRouteWrapper.getTopicName();
     }
 
-    public boolean isEmptyCacheQueue() {
-        return this == EMPTY_CACHE_QUEUES;
+    public boolean isEmptyCachedQueue() {
+        return this == EMPTY_CACHED_QUEUE;
     }
 
     @Override

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIExtImpl.java
Patch:
@@ -78,7 +78,7 @@ protected static MQClientException processNullResponseErr(ResponseFuture respons
             ex = new MQClientException("wait response timeout " + responseFuture.getTimeoutMillis() + "ms",
                 responseFuture.getCause());
         } else {
-            ex = new MQClientException("unknow reseaon", responseFuture.getCause());
+            ex = new MQClientException("unknown reason", responseFuture.getCause());
         }
         return ex;
     }

File: proxy/src/main/java/org/apache/rocketmq/proxy/client/TopicRouteCache.java
Patch:
@@ -73,7 +73,7 @@ protected static MessageQueueWrapper getCacheMessageQueueWrapper(LoadingCache<St
         return res;
     }
 
-    protected static boolean routeDataIsValid(TopicRouteData routeData) {
+    protected static boolean isTopicRouteValid(TopicRouteData routeData) {
         return routeData != null && routeData.getQueueDatas() != null && !routeData.getQueueDatas().isEmpty()
             && routeData.getBrokerDatas() != null && !routeData.getBrokerDatas().isEmpty();
     }
@@ -97,7 +97,7 @@ public MessageQueueWrapper getDirectly(String topic) throws Exception {
             try {
                 TopicRouteData topicRouteData = loadTopicRouteData(topic);
 
-                if (routeDataIsValid(topicRouteData)) {
+                if (isTopicRouteValid(topicRouteData)) {
                     MessageQueueWrapper tmp = new MessageQueueWrapper(topic, topicRouteData);
                     log.info("load {} from namesrv. topic: {}, queue: {}", loaderName(), topic, tmp);
                     return tmp;

File: common/src/main/java/org/apache/rocketmq/common/constant/LoggerName.java
Patch:
@@ -44,5 +44,6 @@ public class LoggerName {
     public static final String ROCKETMQ_POP_LOGGER_NAME = "RocketmqPop";
     public static final String FAILOVER_LOGGER_NAME = "RocketmqFailover";
     public static final String STDOUT_LOGGER_NAME = "STDOUT";
+    public static final String PROXY_LOGGER_NAME = "RocketmqProxy";
     public static final String GRPC_LOGGER_NAME = "RocketmqGrpc";
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/ProxyStartup.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.rocketmq.proxy.grpc.GrpcServer;
 import org.apache.rocketmq.proxy.grpc.common.ProxyMode;
 import org.apache.rocketmq.proxy.grpc.service.ClusterGrpcService;
-import org.apache.rocketmq.proxy.grpc.service.GrpcService;
+import org.apache.rocketmq.proxy.grpc.service.GrpcForwardService;
 import org.apache.rocketmq.proxy.grpc.service.LocalGrpcService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -85,7 +85,7 @@ public static void main(String[] args) {
     }
 
     private static GrpcServer createGrpcServer() throws RuntimeException {
-        GrpcService grpcService;
+        GrpcForwardService grpcService;
         String proxyModeStr = ConfigurationManager.getProxyConfig().getProxyMode();
         if (ProxyMode.isClusterMode(proxyModeStr)) {
             grpcService = new ClusterGrpcService();

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/utils/ProxyUtils.java
Patch:
@@ -19,6 +19,5 @@
 import java.time.Duration;
 
 public class ProxyUtils {
-
     public static final long DEFAULT_MQ_CLIENT_TIMEOUT = Duration.ofSeconds(3).toMillis();
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/adapter/channel/ChannelManager.java
Patch:
@@ -31,6 +31,7 @@
 
 public class ChannelManager<R, W> {
     private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
+
     private final ConcurrentMap<String, SimpleChannel<R, W>> clientIdChannelMap = new ConcurrentHashMap<>();
 
     public SimpleChannel<R, W> createChannel() {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/ClusterGrpcService.java
Patch:
@@ -57,7 +57,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-public class ClusterGrpcService implements GrpcService {
+public class ClusterGrpcService implements GrpcForwardService {
     private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.GRPC_LOGGER_NAME);
 
     public ClusterGrpcService() {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/GrpcForwardService.java
Patch:
@@ -55,7 +55,7 @@
 import org.apache.rocketmq.proxy.common.StartAndShutdown;
 import java.util.concurrent.CompletableFuture;
 
-public interface GrpcService extends StartAndShutdown {
+public interface GrpcForwardService extends StartAndShutdown {
     CompletableFuture<QueryRouteResponse> queryRoute(Context ctx, QueryRouteRequest request);
 
     CompletableFuture<HeartbeatResponse> heartbeat(Context ctx, HeartbeatRequest request);

File: proxy/src/main/java/org/apache/rocketmq/proxy/configuration/ConfigurationManager.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.commons.lang3.StringUtils;
 
 public class ConfigurationManager {
-    protected static final String RMQ_PROXY_HOME = "RMQ_PROXY_HOME";
+    public static final String RMQ_PROXY_HOME = "RMQ_PROXY_HOME";
     protected static final String DEFAULT_RMQ_PROXY_HOME = System.getProperty("user.home") + File.separator + "rmq-proxy";
     private static String proxyHome;
     private static Configuration configuration;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/LocalGrpcService.java
Patch:
@@ -68,7 +68,6 @@
 import org.apache.rocketmq.proxy.grpc.adapter.channel.SimpleChannelHandlerContext;
 import org.apache.rocketmq.proxy.grpc.adapter.handler.SendMessageResponseHandler;
 import org.apache.rocketmq.proxy.grpc.common.Converter;
-import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -118,12 +117,12 @@ public LocalGrpcService(BrokerController brokerController) {
                 handler.handle(r, context);
                 channel.eraseInvocationContext(command.getOpaque());
             });
-        } catch (final RemotingCommandException e) {
+        } catch (final Exception e) {
             LOGGER.error("Failed to process send message command", e);
             channel.eraseInvocationContext(command.getOpaque());
             future.completeExceptionally(e);
         }
-        return null;
+        return future;
     }
 
     @Override

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/common/ResponseWriter.java
Patch:
@@ -40,7 +40,7 @@ public static <T> void write(StreamObserver<T> observer, final T response) {
         }
     }
 
-    public static <T> void writeException(StreamObserver<T> observer, final Exception e) {
+    public static <T> void writeException(StreamObserver<T> observer, final Throwable e) {
         if (observer instanceof ServerCallStreamObserver) {
             final ServerCallStreamObserver<T> serverCallStreamObserver = (ServerCallStreamObserver<T>) observer;
             if (null == e) {

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServer.java
Patch:
@@ -31,6 +31,7 @@
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
 import org.apache.rocketmq.proxy.configuration.ConfigurationManager;
+import org.apache.rocketmq.proxy.grpc.interceptor.HeaderInterceptor;
 import org.apache.rocketmq.proxy.grpc.service.GrpcService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -91,6 +92,7 @@ public GrpcServer(GrpcService grpcService) {
             .channelType(NioServerSocketChannel.class)
             .addService(messagingProcessor)
             .executor(this.executor)
+            .intercept(new HeaderInterceptor())
             .build();
 
         log.info(

File: common/src/main/java/org/apache/rocketmq/common/message/MessageConst.java
Patch:
@@ -65,6 +65,9 @@ public class MessageConst {
     public static final String PROPERTY_REDIRECT = "REDIRECT";
     public static final String PROPERTY_INNER_MULTI_DISPATCH = "INNER_MULTI_DISPATCH";
     public static final String PROPERTY_INNER_MULTI_QUEUE_OFFSET = "INNER_MULTI_QUEUE_OFFSET";
+    public static final String PROPERTY_TRACE_CONTEXT = "TRACE_CONTEXT";
+    public static final String PROPERTY_TIMER_DELAY_SEC = "TIMER_DELAY_SEC";
+    public static final String PROPERTY_TIMER_DELIVER_MS = "TIMER_DELIVER_MS";
 
     /**
      * property which name starts with "__RMQ.TRANSIENT." is called transient one that will not stored in broker disks.

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -740,7 +740,7 @@ private void onExceptionImpl(final String brokerName,
         }
     }
 
-    private SendResult processSendResponse(
+    protected SendResult processSendResponse(
         final String brokerName,
         final Message msg,
         final RemotingCommand response,

File: proxy/src/main/java/org/apache/rocketmq/proxy/HealthCheckServer.java
Patch:
@@ -24,7 +24,7 @@
 import java.io.OutputStream;
 import java.net.InetSocketAddress;
 import org.apache.rocketmq.proxy.configuration.ConfigurationManager;
-import org.apache.rocketmq.proxy.grpc.common.StartAndShutdown;
+import org.apache.rocketmq.proxy.common.StartAndShutdown;
 
 public class HealthCheckServer implements StartAndShutdown {
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/common/StartAndShutdown.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.grpc.common;
+package org.apache.rocketmq.proxy.common;
 
 public interface StartAndShutdown {
     void start() throws Exception;

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/GrpcService.java
Patch:
@@ -53,7 +53,7 @@
 import apache.rocketmq.v1.SendMessageResponse;
 import io.grpc.Context;
 import io.netty.util.concurrent.CompleteFuture;
-import org.apache.rocketmq.proxy.grpc.common.StartAndShutdown;
+import org.apache.rocketmq.proxy.common.StartAndShutdown;
 
 public interface GrpcService extends StartAndShutdown {
     CompleteFuture<QueryRouteResponse> queryRoute(Context ctx, QueryRouteRequest request);

File: proxy/src/main/java/org/apache/rocketmq/proxy/configuration/ConfigurationManager.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.commons.lang3.StringUtils;
 
 public class ConfigurationManager {
-    private static final String RMQ_PROXY_HOME = "RMQ_PROXY_HOME";
-    private static final String DEFAULT_RMQ_PROXY_HOME = System.getProperty("user.home") + File.separator + "rmq-proxy";
+    protected static final String RMQ_PROXY_HOME = "RMQ_PROXY_HOME";
+    protected static final String DEFAULT_RMQ_PROXY_HOME = System.getProperty("user.home") + File.separator + "rmq-proxy";
     private static String proxyHome;
     private static Configuration configuration;
 

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/common/StartAndShutdown.java
Patch:
@@ -19,6 +19,5 @@
 
 public interface StartAndShutdown {
     void start() throws Exception;
-
     void shutdown() throws Exception;
 }

File: proxy/src/main/java/org/apache/rocketmq/proxy/grpc/service/GrpcService.java
Patch:
@@ -53,8 +53,9 @@
 import apache.rocketmq.v1.SendMessageResponse;
 import io.grpc.Context;
 import io.netty.util.concurrent.CompleteFuture;
+import org.apache.rocketmq.proxy.grpc.common.StartAndShutdown;
 
-public interface GrpcService {
+public interface GrpcService extends StartAndShutdown {
     CompleteFuture<QueryRouteResponse> queryRoute(Context ctx, QueryRouteRequest request);
 
     CompleteFuture<HeartbeatResponse> heartbeat(Context ctx, HeartbeatRequest request);

File: common/src/main/java/org/apache/rocketmq/common/constant/LoggerName.java
Patch:
@@ -44,4 +44,5 @@ public class LoggerName {
     public static final String ROCKETMQ_POP_LOGGER_NAME = "RocketmqPop";
     public static final String FAILOVER_LOGGER_NAME = "RocketmqFailover";
     public static final String STDOUT_LOGGER_NAME = "STDOUT";
+    public static final String GRPC_LOGGER_NAME = "RocketmqGrpc";
 }

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainPermissionManager.java
Patch:
@@ -344,7 +344,7 @@ public boolean updateAccessConfig(PlainAccessConfig plainAccessConfig) {
                 accountMap.put(plainAccessConfig.getAccessKey(), buildPlainAccessResource(plainAccessConfig));
             } else {
                 for (Map.Entry<String, PlainAccessResource> entry : accountMap.entrySet()) {
-                    if (entry.getValue().equals(plainAccessConfig.getAccessKey())) {
+                    if (entry.getValue().getAccessKey().equals(plainAccessConfig.getAccessKey())) {
                         PlainAccessResource plainAccessResource = buildPlainAccessResource(plainAccessConfig);
                         accountMap.put(entry.getKey(), plainAccessResource);
                         break;

File: broker/src/main/java/org/apache/rocketmq/broker/out/BrokerOuterAPI.java
Patch:
@@ -86,7 +86,7 @@ public void shutdown() {
     public String fetchNameServerAddr() {
         try {
             String addrs = this.topAddressing.fetchNSAddr();
-            if (addrs != null) {
+            if (!UtilAll.isBlank(addrs)) {
                 if (!addrs.equals(this.nameSrvAddr)) {
                     log.info("name server address changed, old: {} new: {}", this.nameSrvAddr, addrs);
                     this.updateNameServerAddressList(addrs);

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -227,7 +227,7 @@ public RemotingClient getRemotingClient() {
     public String fetchNameServerAddr() {
         try {
             String addrs = this.topAddressing.fetchNSAddr();
-            if (addrs != null) {
+            if (!UtilAll.isBlank(addrs)) {
                 if (!addrs.equals(this.nameSrvAddr)) {
                     log.info("name server address changed, old=" + this.nameSrvAddr + ", new=" + addrs);
                     this.updateNameServerAddressList(addrs);

File: broker/src/main/java/org/apache/rocketmq/broker/client/ConsumerIdsChangeListener.java
Patch:
@@ -19,4 +19,6 @@
 public interface ConsumerIdsChangeListener {
 
     void handle(ConsumerGroupEvent event, String group, Object... args);
+
+    void shutdown();
 }

File: broker/src/main/java/org/apache/rocketmq/broker/filtersrv/FilterServerManager.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.BrokerStartup;
+import org.apache.rocketmq.common.AbstractBrokerRunnable;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.logging.InternalLogger;
@@ -52,9 +53,8 @@ public FilterServerManager(final BrokerController brokerController) {
 
     public void start() {
 
-        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
-            @Override
-            public void run() {
+        this.scheduledExecutorService.scheduleAtFixedRate(new AbstractBrokerRunnable(brokerController.getBrokerConfig()) {
+            @Override public void run2() {
                 try {
                     FilterServerManager.this.createFilterServer();
                 } catch (Exception e) {

File: broker/src/main/java/org/apache/rocketmq/broker/longpolling/LmqPullRequestHoldService.java
Patch:
@@ -32,6 +32,9 @@ public LmqPullRequestHoldService(BrokerController brokerController) {
 
     @Override
     public String getServiceName() {
+        if (brokerController != null && brokerController.getBrokerConfig().isInBrokerContainer()) {
+            return this.brokerController.getBrokerIdentity().getLoggerIdentifier() + LmqPullRequestHoldService.class.getSimpleName();
+        }
         return LmqPullRequestHoldService.class.getSimpleName();
     }
 

File: broker/src/main/java/org/apache/rocketmq/broker/pagecache/OneMessageTransfer.java
Patch:
@@ -70,6 +70,7 @@ public long transferTo(WritableByteChannel target, long position) throws IOExcep
         return 0;
     }
 
+
     @Override
     public FileRegion retain() {
         super.retain();

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ForwardRequestProcessor.java
Patch:
@@ -21,10 +21,10 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
-import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;
+import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
-public class ForwardRequestProcessor extends AsyncNettyRequestProcessor {
+public class ForwardRequestProcessor implements NettyRequestProcessor {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final BrokerController brokerController;

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/TransactionalMessageCheckService.java
Patch:
@@ -33,6 +33,9 @@ public TransactionalMessageCheckService(BrokerController brokerController) {
 
     @Override
     public String getServiceName() {
+        if (brokerController != null && brokerController.getBrokerConfig().isInBrokerContainer()) {
+            return brokerController.getBrokerIdentity().getLoggerIdentifier() + TransactionalMessageCheckService.class.getSimpleName();
+        }
         return TransactionalMessageCheckService.class.getSimpleName();
     }
 

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/TransactionalMessageService.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.protocol.header.EndTransactionRequestHeader;
-import org.apache.rocketmq.store.MessageExtBrokerInner;
+import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.store.PutMessageResult;
 import java.util.concurrent.CompletableFuture;
 

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/DefaultTransactionalMessageCheckListener.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
-import org.apache.rocketmq.store.MessageExtBrokerInner;
+import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
 

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageBridge.java
Patch:
@@ -35,7 +35,7 @@
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.store.GetMessageResult;
-import org.apache.rocketmq.store.MessageExtBrokerInner;
+import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.store.MessageStore;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageServiceImpl.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
-import org.apache.rocketmq.store.MessageExtBrokerInner;
+import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
 

File: broker/src/test/java/org/apache/rocketmq/broker/BrokerControllerTest.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.rocketmq.remoting.netty.RequestTask;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 import org.junit.After;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -44,7 +43,7 @@ public void testBrokerRestart() throws Exception {
             new NettyServerConfig(),
             new NettyClientConfig(),
             new MessageStoreConfig());
-        assertThat(brokerController.initialize());
+        assertThat(brokerController.initialize()).isTrue();
         brokerController.start();
         brokerController.shutdown();
     }

File: broker/src/test/java/org/apache/rocketmq/broker/processor/ClientManageProcessorTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandlerContext;
-import java.util.HashMap;
 import java.util.Map;
 import java.util.UUID;
 import org.apache.rocketmq.broker.BrokerController;

File: broker/src/test/java/org/apache/rocketmq/broker/processor/EndTransactionProcessorTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.store.AppendMessageResult;
 import org.apache.rocketmq.store.AppendMessageStatus;
-import org.apache.rocketmq.store.MessageExtBrokerInner;
+import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.store.MessageStore;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;

File: broker/src/test/java/org/apache/rocketmq/broker/processor/ReplyMessageProcessorTest.java
Patch:
@@ -42,7 +42,7 @@
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.store.AppendMessageResult;
 import org.apache.rocketmq.store.AppendMessageStatus;
-import org.apache.rocketmq.store.MessageExtBrokerInner;
+import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.store.MessageStore;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;

File: broker/src/test/java/org/apache/rocketmq/broker/transaction/queue/DefaultTransactionalMessageCheckListenerTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.remoting.netty.NettyClientConfig;
 import org.apache.rocketmq.remoting.netty.NettyServerConfig;
-import org.apache.rocketmq.store.MessageExtBrokerInner;
+import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.store.MessageStore;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 import org.junit.After;

File: broker/src/test/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageBridgeTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.rocketmq.store.AppendMessageStatus;
 import org.apache.rocketmq.store.GetMessageResult;
 import org.apache.rocketmq.store.GetMessageStatus;
-import org.apache.rocketmq.store.MessageExtBrokerInner;
+import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.store.MessageFilter;
 import org.apache.rocketmq.store.MessageStore;
 import org.apache.rocketmq.store.PutMessageResult;

File: broker/src/test/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageServiceImplTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.apache.rocketmq.remoting.netty.NettyServerConfig;
 import org.apache.rocketmq.store.AppendMessageResult;
 import org.apache.rocketmq.store.AppendMessageStatus;
-import org.apache.rocketmq.store.MessageExtBrokerInner;
+import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
 import org.apache.rocketmq.store.config.MessageStoreConfig;

File: broker/src/test/java/org/apache/rocketmq/broker/util/TransactionalMessageServiceImpl.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.rocketmq.common.protocol.header.EndTransactionRequestHeader;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
-import org.apache.rocketmq.store.MessageExtBrokerInner;
+import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.store.PutMessageResult;
 
 import java.util.concurrent.CompletableFuture;

File: client/src/main/java/org/apache/rocketmq/client/consumer/PullResult.java
Patch:
@@ -26,6 +26,7 @@ public class PullResult {
     private final long maxOffset;
     private List<MessageExt> msgFoundList;
 
+
     public PullResult(PullStatus pullStatus, long nextBeginOffset, long minOffset, long maxOffset,
         List<MessageExt> msgFoundList) {
         super();

File: client/src/main/java/org/apache/rocketmq/client/consumer/rebalance/AbstractAllocateMessageQueueStrategy.java
Patch:
@@ -27,7 +27,7 @@
 
 public abstract class AbstractAllocateMessageQueueStrategy implements AllocateMessageQueueStrategy {
 
-    private final InternalLogger log = ClientLogger.getLog();
+    protected InternalLogger log = ClientLogger.getLog();
 
     public boolean check(String consumerGroup, String currentCID, List<MessageQueue> mqAll,
         List<String> cidAll) {

File: client/src/main/java/org/apache/rocketmq/client/impl/ClientRemotingProcessor.java
Patch:
@@ -54,11 +54,10 @@
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
-import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
-public class ClientRemotingProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {
+public class ClientRemotingProcessor implements NettyRequestProcessor {
     private final InternalLogger log = ClientLogger.getLog();
     private final MQClientInstance mqClientFactory;
 

File: test/src/test/java/org/apache/rocketmq/test/statictopic/StaticTopicIT.java
Patch:
@@ -395,6 +395,8 @@ public void testDoubleReadCheckConsumerOffset() throws Exception {
     }
 
 
+
+
     @Test
     public void testRemappingAndClear() throws Exception {
         String topic = "static" + MQRandomUtils.getRandomTopic();

File: test/src/test/java/org/apache/rocketmq/test/schema/SchemaTest.java
Patch:
@@ -3,7 +3,6 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.TreeMap;
-import org.checkerframework.checker.units.qual.A;
 import org.junit.Assert;
 import org.junit.Test;
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -114,7 +114,6 @@
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
 import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;
-import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.LanguageCode;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
@@ -142,7 +141,7 @@
 import java.util.concurrent.ConcurrentMap;
 import org.apache.rocketmq.store.config.BrokerRole;
 
-public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {
+public class AdminBrokerProcessor extends AsyncNettyRequestProcessor {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ClientManageProcessor.java
Patch:
@@ -39,11 +39,10 @@
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
-import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
-public class ClientManageProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {
+public class ClientManageProcessor extends AsyncNettyRequestProcessor {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ConsumerManageProcessor.java
Patch:
@@ -35,10 +35,9 @@
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;
-import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
-public class ConsumerManageProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {
+public class ConsumerManageProcessor extends AsyncNettyRequestProcessor {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final BrokerController brokerController;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/EndTransactionProcessor.java
Patch:
@@ -33,7 +33,6 @@
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;
-import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.store.MessageExtBrokerInner;
 import org.apache.rocketmq.store.PutMessageResult;
@@ -42,7 +41,7 @@
 /**
  * EndTransaction processor: process commit and rollback message
  */
-public class EndTransactionProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {
+public class EndTransactionProcessor extends AsyncNettyRequestProcessor {
     private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
     private final BrokerController brokerController;
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ForwardRequestProcessor.java
Patch:
@@ -22,10 +22,9 @@
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;
-import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
-public class ForwardRequestProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {
+public class ForwardRequestProcessor extends AsyncNettyRequestProcessor {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final BrokerController brokerController;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PullMessageProcessor.java
Patch:
@@ -59,7 +59,6 @@
 import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;
-import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.netty.RequestTask;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.store.GetMessageResult;
@@ -69,7 +68,7 @@
 import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.stats.BrokerStatsManager;
 
-public class PullMessageProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {
+public class PullMessageProcessor extends AsyncNettyRequestProcessor {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
     private List<ConsumeMessageHook> consumeMessageHookList;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/QueryMessageProcessor.java
Patch:
@@ -34,12 +34,11 @@
 import org.apache.rocketmq.common.protocol.header.ViewMessageRequestHeader;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;
-import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.store.QueryMessageResult;
 import org.apache.rocketmq.store.SelectMappedBufferResult;
 
-public class QueryMessageProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {
+public class QueryMessageProcessor extends AsyncNettyRequestProcessor {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final BrokerController brokerController;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ReplyMessageProcessor.java
Patch:
@@ -39,7 +39,6 @@
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.exception.RemotingException;
-import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.store.MessageExtBrokerInner;
 import org.apache.rocketmq.store.PutMessageResult;
@@ -48,7 +47,7 @@
 import java.net.InetSocketAddress;
 import java.util.concurrent.ThreadLocalRandom;
 
-public class ReplyMessageProcessor extends AbstractSendMessageProcessor implements NettyRequestProcessor {
+public class ReplyMessageProcessor extends AbstractSendMessageProcessor {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     public ReplyMessageProcessor(final BrokerController brokerController) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -51,7 +51,6 @@
 import org.apache.rocketmq.common.sysflag.TopicSysFlag;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
-import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.netty.RemotingResponseCallback;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.store.DefaultMessageStore;
@@ -62,7 +61,7 @@
 import org.apache.rocketmq.store.config.StorePathConfigHelper;
 import org.apache.rocketmq.store.stats.BrokerStatsManager;
 
-public class SendMessageProcessor extends AbstractSendMessageProcessor implements NettyRequestProcessor {
+public class SendMessageProcessor extends AbstractSendMessageProcessor {
 
     private List<ConsumeMessageHook> consumeMessageHookList;
 

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -1282,7 +1282,7 @@ public long queryConsumerOffset(
                     (QueryConsumerOffsetResponseHeader) response.decodeCommandCustomHeader(QueryConsumerOffsetResponseHeader.class);
                 return responseHeader.getOffset();
             }
-            case ResponseCode.PULL_NOT_FOUND: {
+            case ResponseCode.QUERY_NOT_FOUND: {
                 throw new OffsetNotFoundException(response.getCode(), response.getRemark(), addr);
             }
             default:

File: client/src/test/java/org/apache/rocketmq/client/consumer/store/RemoteBrokerOffsetStoreTest.java
Patch:
@@ -88,7 +88,7 @@ public void testReadOffset_WithException() throws Exception {
 
         offsetStore.updateOffset(messageQueue, 1024, false);
 
-        doThrow(new OffsetNotFoundException(ResponseCode.PULL_NOT_FOUND, "", null))
+        doThrow(new OffsetNotFoundException(ResponseCode.QUERY_NOT_FOUND, "", null))
             .when(mqClientAPI).queryConsumerOffset(anyString(), any(QueryConsumerOffsetRequestHeader.class), anyLong());
         assertThat(offsetStore.readOffset(messageQueue, ReadOffsetType.READ_FROM_STORE)).isEqualTo(-1);
 

File: store/src/test/java/org/apache/rocketmq/store/dledger/DLedgerCommitlogTest.java
Patch:
@@ -382,5 +382,4 @@ public void testIPv6HostMsgCommittedPos() throws Exception {
         followerStore.shutdown();
     }
 
-
 }

File: store/src/test/java/org/apache/rocketmq/store/dledger/DLedgerMultiPathTest.java
Patch:
@@ -46,8 +46,8 @@ public void multiDirsStorageTest() throws Exception {
             DefaultMessageStore dLedgerStore = createDLedgerMessageStore(base, group, "n0", peers, multiStorePath, null);
             Thread.sleep(2000);
             doPutMessages(dLedgerStore, topic, 0, 1000, 0);
-            Assert.assertEquals(11, dLedgerStore.getMaxPhyOffset()/dLedgerStore.getMessageStoreConfig().getMappedFileSizeCommitLog());
             Thread.sleep(500);
+            Assert.assertEquals(11, dLedgerStore.getMaxPhyOffset()/dLedgerStore.getMessageStoreConfig().getMappedFileSizeCommitLog());
             Assert.assertEquals(0, dLedgerStore.getMinOffsetInQueue(topic, 0));
             Assert.assertEquals(1000, dLedgerStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, dLedgerStore.dispatchBehindBytes());

File: store/src/test/java/org/apache/rocketmq/store/HATest.java
Patch:
@@ -85,11 +85,11 @@ public void init() throws Exception {
         slaveMessageStore = buildMessageStore(slaveStoreConfig, 1L);
         boolean load = messageStore.load();
         boolean slaveLoad = slaveMessageStore.load();
-        slaveMessageStore.updateHaMasterAddress("127.0.0.1:10912");
         assertTrue(load);
         assertTrue(slaveLoad);
         messageStore.start();
         slaveMessageStore.start();
+        slaveMessageStore.updateHaMasterAddress("127.0.0.1:10912");
         Thread.sleep(6000L);//because the haClient will wait 5s after the first connectMaster failed,sleep 6s
     }
 

File: store/src/test/java/org/apache/rocketmq/store/dledger/MessageStoreTestBase.java
Patch:
@@ -56,6 +56,8 @@ protected DefaultMessageStore createDledgerMessageStore(String base, String grou
         storeConfig.setdLegerGroup(group);
         storeConfig.setdLegerPeers(peers);
         storeConfig.setdLegerSelfId(selfId);
+
+        storeConfig.setRecheckReputOffsetFromCq(true);
         DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig,  new BrokerStatsManager("DLedgerCommitlogTest", true), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {
 
         }, new BrokerConfig());

File: client/src/main/java/org/apache/rocketmq/client/trace/AsyncTraceDispatcher.java
Patch:
@@ -165,7 +165,7 @@ private DefaultMQProducer getAndCreateTraceProducer(RPCHook rpcHook) {
             traceProducerInstance.setSendMsgTimeout(5000);
             traceProducerInstance.setVipChannelEnabled(false);
             // The max size of message is 128K
-            traceProducerInstance.setMaxMessageSize(maxMsgSize - 10 * 1000);
+            traceProducerInstance.setMaxMessageSize(maxMsgSize);
         }
         return traceProducerInstance;
     }
@@ -324,7 +324,7 @@ public void addTraceTransferBean(TraceTransferBean traceTransferBean) {
             initFirstBeanAddTime();
             this.traceTransferBeanList.add(traceTransferBean);
             this.currentMsgSize += traceTransferBean.getTransData().length();
-            if (currentMsgSize >= traceProducer.getMaxMessageSize()) {
+            if (currentMsgSize >= traceProducer.getMaxMessageSize() - 10 * 1000) {
                 List<TraceTransferBean> dataToSend = new ArrayList(traceTransferBeanList);
                 AsyncDataSendTask asyncDataSendTask = new AsyncDataSendTask(traceTopicName, regionId, dataToSend);
                 traceExecutor.submit(asyncDataSendTask);

File: broker/src/main/java/org/apache/rocketmq/broker/out/BrokerOuterAPI.java
Patch:
@@ -86,7 +86,7 @@ public void shutdown() {
     public String fetchNameServerAddr() {
         try {
             String addrs = this.topAddressing.fetchNSAddr();
-            if (addrs != null) {
+            if (addrs != null && !UtilAll.isBlank(addrs)) {
                 if (!addrs.equals(this.nameSrvAddr)) {
                     log.info("name server address changed, old: {} new: {}", this.nameSrvAddr, addrs);
                     this.updateNameServerAddressList(addrs);

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -227,7 +227,7 @@ public RemotingClient getRemotingClient() {
     public String fetchNameServerAddr() {
         try {
             String addrs = this.topAddressing.fetchNSAddr();
-            if (addrs != null) {
+            if (addrs != null && !UtilAll.isBlank(addrs)) {
                 if (!addrs.equals(this.nameSrvAddr)) {
                     log.info("name server address changed, old=" + this.nameSrvAddr + ", new=" + addrs);
                     this.updateNameServerAddressList(addrs);

File: common/src/main/java/org/apache/rocketmq/common/subscription/ExponentialRetryPolicy.java
Patch:
@@ -62,14 +62,13 @@ public String toString() {
     }
 
     @Override
-    public long nextDelayDuration(int reconsumeTimes, TimeUnit timeUnit) {
+    public long nextDelayDuration(int reconsumeTimes) {
         if (reconsumeTimes < 0) {
             reconsumeTimes = 0;
         }
         if (reconsumeTimes > 32) {
             reconsumeTimes = 32;
         }
-        long nextDelayDurationInMillis = Math.min(max, initial * (long) Math.pow(multiplier, reconsumeTimes));
-        return timeUnit.convert(nextDelayDurationInMillis, TimeUnit.MILLISECONDS);
+        return Math.min(max, initial * (long) Math.pow(multiplier, reconsumeTimes));
     }
 }

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAConnection.java
Patch:
@@ -324,7 +324,6 @@ protected boolean processReadResult(ByteBuffer byteBufferRead) {
                                 maybeExpandInSyncStateSet(slaveMaxOffset);
                                 AutoSwitchHAConnection.this.haService.updateConfirmOffsetWhenSlaveAck(AutoSwitchHAConnection.this.slaveAddress);
                                 AutoSwitchHAConnection.this.haService.notifyTransferSome(AutoSwitchHAConnection.this.slaveAckOffset);
-                                LOGGER.debug("slave[" + clientAddress + "] request offset " + slaveMaxOffset);
                                 break;
                             default:
                                 LOGGER.error("Current state illegal {}", currentState);
@@ -527,8 +526,6 @@ private void buildTransferHeaderBuffer(long nextOffset, int bodySize) {
             final long confirmOffset = AutoSwitchHAConnection.this.haService.getConfirmOffset();
             this.byteBufferHeader.putLong(confirmOffset);
             this.byteBufferHeader.flip();
-            LOGGER.debug("Master send msg, state:{}, size:{}, offset:{}, epoch:{}, epochStartOffset:{}, confirmOffset:{}",
-                currentState, bodySize, nextOffset, entry.getEpoch(), entry.getStartOffset(), confirmOffset);
         }
 
         private boolean sendHeartbeatIfNeeded() throws Exception {

File: acl/src/test/java/org/apache/rocketmq/acl/common/AclClientRPCHookTest.java
Patch:
@@ -50,7 +50,6 @@ public void testParseRequestContent() {
         requestHeader.setCommitOffset(0L);
         requestHeader.setSuspendTimeoutMillis(15000L);
         requestHeader.setSubVersion(0L);
-        requestHeader.setBrokerName("brokerName");
         RemotingCommand testPullRemotingCommand = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, requestHeader);
         SortedMap<String, String> oldContent = oldVersionParseRequestContent(testPullRemotingCommand, "ak", null);
         byte[] oldBytes = AclUtils.combineRequestContent(testPullRemotingCommand, oldContent);
@@ -72,7 +71,6 @@ public void testParseRequestContentWithStreamRequestType() {
         requestHeader.setCommitOffset(0L);
         requestHeader.setSuspendTimeoutMillis(15000L);
         requestHeader.setSubVersion(0L);
-        requestHeader.setBrokerName("brokerName");
         RemotingCommand testPullRemotingCommand = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, requestHeader);
         testPullRemotingCommand.addExtField(MixAll.REQ_T, String.valueOf(RequestType.STREAM.getCode()));
         testPullRemotingCommand.addExtField(ACCESS_KEY, "ak");

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultLitePullConsumer.java
Patch:
@@ -220,6 +220,7 @@ public DefaultLitePullConsumer(final String consumerGroup, RPCHook rpcHook) {
     public DefaultLitePullConsumer(final String namespace, final String consumerGroup, RPCHook rpcHook) {
         this.namespace = namespace;
         this.consumerGroup = consumerGroup;
+        this.enableStreamRequestType = true;
         defaultLitePullConsumerImpl = new DefaultLitePullConsumerImpl(this, rpcHook);
     }
 

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPullConsumer.java
Patch:
@@ -117,6 +117,7 @@ public DefaultMQPullConsumer(final String namespace, final String consumerGroup)
     public DefaultMQPullConsumer(final String namespace, final String consumerGroup, RPCHook rpcHook) {
         this.namespace = namespace;
         this.consumerGroup = consumerGroup;
+        this.enableStreamRequestType = true;
         defaultMQPullConsumerImpl = new DefaultMQPullConsumerImpl(this, rpcHook);
     }
 

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -89,6 +89,7 @@ public class MixAll {
     public static final String REPLY_MESSAGE_FLAG = "reply";
     public static final String LMQ_PREFIX = "%LMQ%";
     public static final String MULTI_DISPATCH_QUEUE_SPLITTER = ",";
+    public static final String REQ_T = "ReqT";
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);
 
     public static String getWSAddr() {

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java
Patch:
@@ -606,7 +606,7 @@ public void unRegisterBroker(Set<UnRegisterBrokerRequestHeader> unRegisterReques
                     }
 
                     // Check whether we need to elect a new master
-                    if (this.namesrvController != null && this.namesrvController.getControllerConfig().isEnableStartupController() && this.controller != null) {
+                    if (this.namesrvController != null && this.namesrvController.getControllerConfig().isEnableControllerInNamesrv() && this.controller != null) {
                         if (unRegisterRequest.getBrokerId() == MixAll.MASTER_ID) {
                             if (this.controller.isLeaderState()) {
                                 final CompletableFuture<RemotingCommand> future = this.controller.electMaster(new ElectMasterRequestHeader(unRegisterRequest.getBrokerName()));

File: test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleBase.java
Patch:
@@ -125,7 +125,7 @@ protected MessageStoreConfig buildMessageStoreConfig(final String brokerName, fi
 
     protected ControllerConfig buildControllerConfig(final String id, final String peers) {
         final ControllerConfig config = new ControllerConfig();
-        config.setEnableStartupController(true);
+        config.setEnableControllerInNamesrv(true);
         config.setControllerDLegerGroup("group1");
         config.setControllerDLegerPeers(peers);
         config.setControllerDLegerSelfId(id);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -558,7 +558,6 @@ private RemotingCommand sendBatchMessage(final ChannelHandlerContext ctx,
             } else {
                 putMessageResult = this.brokerController.getMessageStore().putMessages(messageExtBatch);
             }
-            putMessageResult = this.brokerController.getMessageStore().putMessage(messageExtBatch);
             handlePutMessageResult(putMessageResult, response, request, messageExtBatch, responseHeader, sendMessageContext, ctx, queueIdInt, beginTimeMillis, mappingContext);
             sendMessageCallback.onComplete(sendMessageContext, response);
             return response;

File: common/src/main/java/org/apache/rocketmq/common/protocol/RequestCode.java
Patch:
@@ -192,4 +192,6 @@ public class RequestCode {
     public static final int ADD_WRITE_PERM_OF_BROKER = 327;
 
     public static final int GET_ALL_PRODUCER_INFO = 328;
+
+    public static final int DELETE_EXPIRED_COMMITLOG = 329;
 }

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.rocketmq.tools.command.broker.BrokerStatusSubCommand;
 import org.apache.rocketmq.tools.command.broker.CleanExpiredCQSubCommand;
 import org.apache.rocketmq.tools.command.broker.CleanUnusedTopicCommand;
+import org.apache.rocketmq.tools.command.broker.DeleteExpiredCommitLogSubCommand;
 import org.apache.rocketmq.tools.command.broker.GetBrokerConfigCommand;
 import org.apache.rocketmq.tools.command.broker.SendMsgStatusCommand;
 import org.apache.rocketmq.tools.command.broker.UpdateBrokerConfigSubCommand;
@@ -201,6 +202,7 @@ public static void initCommand() {
 
         initCommand(new UpdateOrderConfCommand());
         initCommand(new CleanExpiredCQSubCommand());
+        initCommand(new DeleteExpiredCommitLogSubCommand());
         initCommand(new CleanUnusedTopicCommand());
 
         initCommand(new StartMonitoringSubCommand());

File: store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAConnection.java
Patch:
@@ -322,6 +322,7 @@ protected boolean processReadResult(ByteBuffer byteBufferRead) {
                                 }
                                 byteBufferRead.position(readSocketPos);
                                 maybeExpandInSyncStateSet(slaveMaxOffset);
+                                AutoSwitchHAConnection.this.haService.updateConfirmOffsetWhenSlaveAck(AutoSwitchHAConnection.this.slaveAddress);
                                 AutoSwitchHAConnection.this.haService.notifyTransferSome(AutoSwitchHAConnection.this.slaveAckOffset);
                                 LOGGER.debug("slave[" + clientAddress + "] request offset " + slaveMaxOffset);
                                 break;

File: client/src/main/java/org/apache/rocketmq/client/common/ThreadLocalIndex.java
Patch:
@@ -22,6 +22,7 @@
 public class ThreadLocalIndex {
     private final ThreadLocal<Integer> threadLocalIndex = new ThreadLocal<Integer>();
     private final Random random = new Random();
+    private final static int POSITIVE_MASK = 0x7FFFFFFF;
 
     public int incrementAndGet() {
         Integer index = this.threadLocalIndex.get();
@@ -31,7 +32,7 @@ public int incrementAndGet() {
         }
 
         this.threadLocalIndex.set(++index);
-        return Math.abs(index);
+        return Math.abs(index & POSITIVE_MASK);
     }
 
     @Override

File: controller/src/test/java/org/apache/rocketmq/controller/impl/controller/impl/manager/ReplicasInfoManagerTest.java
Patch:
@@ -108,7 +108,7 @@ public void mockMetaData() {
     public void testElectMaster() {
         mockMetaData();
         final ElectMasterRequestHeader request = new ElectMasterRequestHeader("broker1");
-        final ControllerResult<ElectMasterResponseHeader> cResult = this.replicasInfoManager.electMaster(request, (va1, va2) -> true);
+        final ControllerResult<ElectMasterResponseHeader> cResult = this.replicasInfoManager.electMaster(request, (clusterName, brokerAddress) -> !brokerAddress.equals("127.0.0.1:9000"));
         final ElectMasterResponseHeader response = cResult.getResponse();
         assertEquals(response.getMasterEpoch(), 2);
         assertFalse(response.getNewMasterAddress().isEmpty());
@@ -125,7 +125,7 @@ public void testAllReplicasShutdownAndRestart() {
         // Now we trigger electMaster api, which means the old master is shutdown and want to elect a new master.
         // However, the syncStateSet in statemachine is {"127.0.0.1:9000"}, not more replicas can be elected as master, it will be failed.
         final ElectMasterRequestHeader electRequest = new ElectMasterRequestHeader("broker1");
-        final ControllerResult<ElectMasterResponseHeader> cResult = this.replicasInfoManager.electMaster(electRequest, (va1, va2) -> true);
+        final ControllerResult<ElectMasterResponseHeader> cResult = this.replicasInfoManager.electMaster(electRequest, (clusterName, brokerAddress) -> !brokerAddress.equals("127.0.0.1:9000"));
         final List<EventMessage> events = cResult.getEvents();
         assertEquals(events.size(), 1);
         final ElectMasterEvent event = (ElectMasterEvent) events.get(0);

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DLedgerController.java
Patch:
@@ -403,7 +403,6 @@ public void handle(long term, MemberState.Role role) {
                         DLedgerController.this.stopScheduling();
                         break;
                     case LEADER: {
-                        this.currentRole = MemberState.Role.LEADER;
                         log.info("Controller {} change role to leader, try process a initial proposal", this.selfId);
                         // Because the role becomes to leader, but the memory statemachine of the controller is still in the old point,
                         // some committed logs have not been applied. Therefore, we must first process an empty request to dledger,
@@ -414,6 +413,7 @@ public void handle(long term, MemberState.Role role) {
                             request.setBody(new byte[0]);
                             try {
                                 if (appendToDledgerAndWait(request)) {
+                                    this.currentRole = MemberState.Role.LEADER;
                                     DLedgerController.this.startScheduling();
                                     break;
                                 }

File: controller/src/main/java/org/apache/rocketmq/controller/impl/DLedgerControllerStateMachine.java
Patch:
@@ -54,8 +54,8 @@ public void onApply(CommittedEntryIterator iterator) {
             if (body != null && body.length > 0) {
                 final EventMessage event = this.eventSerializer.deserialize(body);
                 this.replicasInfoManager.applyEvent(event);
-                applyingSize++;
             }
+            applyingSize++;
         }
         log.info("Apply {} events on controller {}", applyingSize, this.dledgerId);
     }

File: controller/src/main/java/org/apache/rocketmq/controller/ControllerManager.java
Patch:
@@ -135,8 +135,8 @@ public void start() {
 
     public void shutdown() {
         this.heartbeatManager.shutdown();
-        this.controller.shutdown();
         this.controllerRequestExecutor.shutdown();
+        this.controller.shutdown();
     }
 
     public BrokerHeartbeatManager getHeartbeatManager() {

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/NamesrvController.java
Patch:
@@ -311,6 +311,9 @@ public void shutdown() {
         if (this.controllerRequestExecutor != null) {
             this.controllerRequestExecutor.shutdown();
         }
+        if (this.controllerConfig.isEnableStartupController()) {
+            this.controller.shutdown();
+        }
         this.scheduledExecutorService.shutdown();
         this.scanExecutorService.shutdown();
         this.routeInfoManager.shutdown();

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -396,7 +396,6 @@ public void shutdown() {
 
             this.scheduledExecutorService.shutdown();
             try {
-
                 Thread.sleep(1000 * 3);
             } catch (InterruptedException e) {
                 LOGGER.error("shutdown Exception, ", e);

File: test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleBase.java
Patch:
@@ -76,13 +76,13 @@ public int nextPort() {
     public BrokerController startBroker(String namesrvAddress, String controllerAddress, int brokerId, int haPort, int brokerListenPort,
         int nettyListenPort, BrokerRole expectedRole, int mappedFileSize) throws Exception {
         final MessageStoreConfig storeConfig = buildMessageStoreConfig("broker" + brokerId, haPort, mappedFileSize);
-        storeConfig.setHaMaxTimeSlaveNotCatchup(4 * 1000);
+        storeConfig.setHaMaxTimeSlaveNotCatchup(3 * 1000);
         final BrokerConfig brokerConfig = new BrokerConfig();
         brokerConfig.setListenPort(brokerListenPort);
         brokerConfig.setNamesrvAddr(namesrvAddress);
         brokerConfig.setControllerAddr(controllerAddress);
         brokerConfig.setReplicasManagerSyncBrokerMetadataPeriod(2 * 1000);
-        brokerConfig.setReplicasManagerCheckSyncStateSetPeriod(3 * 1000);
+        brokerConfig.setReplicasManagerCheckSyncStateSetPeriod(2 * 1000);
         brokerConfig.setEnableControllerMode(true);
 
         final NettyServerConfig nettyServerConfig = new NettyServerConfig();

File: test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleIntegrationTest.java
Patch:
@@ -109,7 +109,7 @@ public void testCheckSyncStateSet() throws Exception {
         SyncStateSet syncStateSet = replicasManager.getSyncStateSet();
         assertEquals(2, syncStateSet.getSyncStateSet().size());
 
-        // Shut controller2
+        // Shutdown controller2
         this.brokerController2.shutdown();
 
         Thread.sleep(5000);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -231,7 +231,7 @@ private CompletableFuture<RemotingCommand> asyncConsumerSendMsgBack(ChannelHandl
         msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgExt.getProperties()));
 
         CompletableFuture<PutMessageResult> putMessageResult = this.brokerController.getMessageStore().asyncPutMessage(msgInner);
-        return putMessageResult.thenApply((r) -> {
+        return putMessageResult.thenApply(r -> {
             if (r != null) {
                 switch (r.getPutMessageStatus()) {
                     case PUT_OK:
@@ -337,7 +337,7 @@ private CompletableFuture<RemotingCommand> handlePutMessageResultFuture(Completa
                                                                             SendMessageContext sendMessageContext,
                                                                             ChannelHandlerContext ctx,
                                                                             int queueIdInt) {
-        return putMessageResult.thenApply((r) ->
+        return putMessageResult.thenApply(r ->
             handlePutMessageResult(r, response, request, msgInner, responseHeader, sendMessageContext, ctx, queueIdInt)
         );
     }

File: example/src/main/java/org/apache/rocketmq/example/namespace/PullConsumerWithNamespace.java
Patch:
@@ -85,7 +85,7 @@ private static void dealWithPullResult(PullResult pullResult) {
             return;
         }
         pullResult.getMsgFoundList().forEach(
-            (msg) -> System.out.printf("Topic is:%s, msgId is:%s%n", msg.getTopic(), msg.getMsgId()));
+            msg -> System.out.printf("Topic is:%s, msgId is:%s%n", msg.getTopic(), msg.getMsgId()));
     }
 
     private static void putMessageQueueOffset(MessageQueue mq, long offset) {

File: example/src/main/java/org/apache/rocketmq/example/namespace/PushConsumerWithNamespace.java
Patch:
@@ -31,7 +31,7 @@ public static void main(String[] args) throws Exception {
         defaultMQPushConsumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);
         defaultMQPushConsumer.subscribe(TOPIC, "*");
         defaultMQPushConsumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {
-            msgs.forEach((msg) -> System.out.printf("Msg topic is:%s, MsgId is:%s, reconsumeTimes is:%s%n", msg.getTopic(), msg.getMsgId(), msg.getReconsumeTimes()));
+            msgs.forEach(msg -> System.out.printf("Msg topic is:%s, MsgId is:%s, reconsumeTimes is:%s%n", msg.getTopic(), msg.getMsgId(), msg.getReconsumeTimes()));
             return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
         });
 

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -465,7 +465,7 @@ public CompletableFuture<PutMessageResult> asyncPutMessage(MessageExtBrokerInner
         long beginTime = this.getSystemClock().now();
         CompletableFuture<PutMessageResult> putResultFuture = this.commitLog.asyncPutMessage(msg);
 
-        putResultFuture.thenAccept((result) -> {
+        putResultFuture.thenAccept(result -> {
             long elapsedTime = this.getSystemClock().now() - beginTime;
             if (elapsedTime > 500) {
                 log.warn("putMessage not in lock elapsed time(ms)={}, bodyLength={}", elapsedTime, msg.getBody().length);
@@ -493,7 +493,7 @@ public CompletableFuture<PutMessageResult> asyncPutMessages(MessageExtBatch mess
         long beginTime = this.getSystemClock().now();
         CompletableFuture<PutMessageResult> resultFuture = this.commitLog.asyncPutMessages(messageExtBatch);
 
-        resultFuture.thenAccept((result) -> {
+        resultFuture.thenAccept(result -> {
             long elapsedTime = this.getSystemClock().now() - beginTime;
             if (elapsedTime > 500) {
                 log.warn("not in lock elapsed time(ms)={}, bodyLength={}", elapsedTime, messageExtBatch.getBody().length);

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -1494,10 +1494,11 @@ public void deleteTopicInBroker(final String addr, final String topic, final lon
         throw new MQClientException(response.getCode(), response.getRemark());
     }
 
-    public void deleteTopicInNameServer(final String addr, final String topic, final long timeoutMillis)
+    public void deleteTopicInNameServer(final String addr, final String topic, final String clusterName, final long timeoutMillis)
         throws RemotingException, InterruptedException, MQClientException {
         DeleteTopicFromNamesrvRequestHeader requestHeader = new DeleteTopicFromNamesrvRequestHeader();
         requestHeader.setTopic(topic);
+        requestHeader.setClusterName(clusterName);
         RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.DELETE_TOPIC_IN_NAMESRV, requestHeader);
 
         RemotingCommand response = this.remotingClient.invokeSync(addr, request, timeoutMillis);

File: tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java
Patch:
@@ -156,8 +156,7 @@ KVTable getKVListByNamespace(
     void deleteTopicInBroker(final Set<String> addrs, final String topic) throws RemotingException, MQBrokerException,
         InterruptedException, MQClientException;
 
-    void deleteTopicInNameServer(final Set<String> addrs,
-        final String topic) throws RemotingException, MQBrokerException,
+    void deleteTopicInNameServer(final Set<String> addrs, final String topic, String clusterName) throws RemotingException, MQBrokerException,
         InterruptedException, MQClientException;
 
     void deleteSubscriptionGroup(final String addr, String groupName) throws RemotingException, MQBrokerException,

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/DeleteTopicSubCommand.java
Patch:
@@ -48,7 +48,7 @@ public static void deleteTopic(final DefaultMQAdminExt adminExt,
             nameServerSet = new HashSet(Arrays.asList(ns));
         }
 
-        adminExt.deleteTopicInNameServer(nameServerSet, topic);
+        adminExt.deleteTopicInNameServer(nameServerSet, topic, clusterName);
         System.out.printf("delete topic [%s] from NameServer success.%n", topic);
     }
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -314,7 +314,7 @@ private CompletableFuture<RemotingCommand> asyncSendMessage(ChannelHandlerContex
 
         CompletableFuture<PutMessageResult> putMessageResult = null;
         String transFlag = origProps.get(MessageConst.PROPERTY_TRANSACTION_PREPARED);
-        if (transFlag != null && Boolean.parseBoolean(transFlag)) {
+        if (Boolean.parseBoolean(transFlag)) {
             if (this.brokerController.getBrokerConfig().isRejectTransactionMessage()) {
                 response.setCode(ResponseCode.NO_PERMISSION);
                 response.setRemark(
@@ -445,7 +445,7 @@ private RemotingCommand sendMessage(final ChannelHandlerContext ctx,
         PutMessageResult putMessageResult = null;
         Map<String, String> oriProps = MessageDecoder.string2messageProperties(requestHeader.getProperties());
         String traFlag = oriProps.get(MessageConst.PROPERTY_TRANSACTION_PREPARED);
-        if (traFlag != null && Boolean.parseBoolean(traFlag)
+        if (Boolean.parseBoolean(traFlag)
             && !(msgInner.getReconsumeTimes() > 0 && msgInner.getDelayTimeLevel() > 0)) { //For client under version 4.6.1
             if (this.brokerController.getBrokerConfig().isRejectTransactionMessage()) {
                 response.setCode(ResponseCode.NO_PERMISSION);

File: example/src/main/java/org/apache/rocketmq/example/rpc/RequestProducer.java
Patch:
@@ -29,6 +29,8 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
         long ttl = 3000;
 
         DefaultMQProducer producer = new DefaultMQProducer(producerGroup);
+
+        //You need to set namesrvAddr to the address of the local namesrv
         producer.setNamesrvAddr("127.0.0.1:9876");
 
         producer.start();

File: controller/src/main/java/org/apache/rocketmq/controller/processor/ControllerRequestProcessor.java
Patch:
@@ -115,6 +115,7 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand
             case BROKER_HEARTBEAT: {
                 final BrokerHeartbeatRequestHeader requestHeader = request.decodeCommandCustomHeader(BrokerHeartbeatRequestHeader.class);
                 this.heartbeatManager.onBrokerHeartbeat(requestHeader.getClusterName(), requestHeader.getBrokerAddr());
+                return RemotingCommand.createResponseCommand(ResponseCode.SUCCESS, "Heart beat success");
             }
             case CONTROLLER_GET_SYNC_STATE_DATA: {
                 if (request.getBody() != null) {

File: controller/src/test/java/org/apache/rocketmq/controller/impl/controller/impl/DefaultBrokerHeartbeatManagerTest.java
Patch:
@@ -40,7 +40,7 @@ public void init() {
     @Test
     public void testDetectBrokerAlive() throws InterruptedException {
         final CountDownLatch latch = new CountDownLatch(1);
-        this.heartbeatManager.addBrokerLifecycleListener((brokerName, brokerAddress, brokerId) -> {
+        this.heartbeatManager.addBrokerLifecycleListener((clusterName, brokerName, brokerAddress, brokerId) -> {
             System.out.println("Broker shutdown:" + brokerAddress);
             latch.countDown();
         });

File: test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleBase.java
Patch:
@@ -73,13 +73,13 @@ public int nextPort() {
         return PORT_COUNTER.addAndGet(10 + random.nextInt(10));
     }
 
-    public BrokerController startBroker(String namesrvAddress, int brokerId, int haPort, int brokerListenPort,
+    public BrokerController startBroker(String namesrvAddress, String controllerAddress, int brokerId, int haPort, int brokerListenPort,
         int nettyListenPort, BrokerRole expectedRole, int mappedFileSize) throws Exception {
         final MessageStoreConfig storeConfig = buildMessageStoreConfig("broker" + brokerId, haPort, mappedFileSize);
         final BrokerConfig brokerConfig = new BrokerConfig();
         brokerConfig.setListenPort(brokerListenPort);
         brokerConfig.setNamesrvAddr(namesrvAddress);
-        brokerConfig.setControllerAddr(namesrvAddress);
+        brokerConfig.setControllerAddr(controllerAddress);
         brokerConfig.setReplicasManagerSyncBrokerMetadataPeriod(2 * 1000);
         brokerConfig.setReplicasManagerCheckSyncStateSetPeriod(4 * 1000);
         brokerConfig.setEnableControllerMode(true);

File: common/src/main/java/org/apache/rocketmq/common/protocol/RequestCode.java
Patch:
@@ -190,4 +190,6 @@ public class RequestCode {
     public static final int PUSH_REPLY_MESSAGE_TO_CLIENT = 326;
 
     public static final int ADD_WRITE_PERM_OF_BROKER = 327;
+
+    public static final int GET_ALL_PRODUCER_INFO = 328;
 }

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -72,6 +72,7 @@
 import org.apache.rocketmq.tools.command.offset.CloneGroupOffsetCommand;
 import org.apache.rocketmq.tools.command.offset.ResetOffsetByTimeCommand;
 import org.apache.rocketmq.tools.command.offset.SkipAccumulationSubCommand;
+import org.apache.rocketmq.tools.command.producer.ProducerSubCommand;
 import org.apache.rocketmq.tools.command.queue.QueryConsumeQueueCommand;
 import org.apache.rocketmq.tools.command.stats.StatsAllSubCommand;
 import org.apache.rocketmq.tools.command.topic.AllocateMQSubCommand;
@@ -184,6 +185,8 @@ public static void initCommand() {
         initCommand(new ConsumerProgressSubCommand());
         initCommand(new ConsumerStatusSubCommand());
         initCommand(new CloneGroupOffsetCommand());
+        //for producer
+        initCommand(new ProducerSubCommand());
 
         initCommand(new ClusterListSubCommand());
         initCommand(new TopicListSubCommand());

File: tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java
Patch:
@@ -51,6 +51,7 @@
 import org.apache.rocketmq.common.protocol.body.SubscriptionGroupWrapper;
 import org.apache.rocketmq.common.protocol.body.TopicConfigSerializeWrapper;
 import org.apache.rocketmq.common.protocol.body.TopicList;
+import org.apache.rocketmq.common.protocol.header.namesrv.controller.GetMetaDataResponseHeader;
 import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
 import org.apache.rocketmq.common.protocol.route.TopicRouteData;
 import org.apache.rocketmq.common.statictopic.TopicQueueMappingDetail;
@@ -388,6 +389,7 @@ HARuntimeInfo getBrokerHAStatus(String brokerAddr) throws RemotingConnectExcepti
 
     EpochEntryCache getBrokerEpochCache(String brokerAddr) throws RemotingException, InterruptedException, MQBrokerException;
 
+    GetMetaDataResponseHeader getControllerMetaData(String controllerAddr) throws RemotingException, InterruptedException, MQBrokerException;
     /**
      * Reset master flush offset in slave
      *

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -57,6 +57,7 @@
 import org.apache.rocketmq.tools.command.consumer.UpdateSubGroupSubCommand;
 import org.apache.rocketmq.tools.command.container.AddBrokerSubCommand;
 import org.apache.rocketmq.tools.command.container.RemoveBrokerSubCommand;
+import org.apache.rocketmq.tools.command.controller.GetControllerMetaDataCommand;
 import org.apache.rocketmq.tools.command.export.ExportConfigsCommand;
 import org.apache.rocketmq.tools.command.export.ExportMetadataCommand;
 import org.apache.rocketmq.tools.command.export.ExportMetricsCommand;
@@ -250,6 +251,7 @@ public static void initCommand() {
 
         initCommand(new SyncStateSetCommand());
         initCommand(new GetBrokerEpochCommand());
+        initCommand(new GetControllerMetaDataCommand());
     }
 
     private static void initLogback() throws JoranException {

File: store/src/main/java/org/apache/rocketmq/store/ha/GroupTransferService.java
Patch:
@@ -99,7 +99,7 @@ private void doWaitTransfer() {
                             int ackNums = 1;
                             for (HAConnection conn : haService.getConnectionList()) {
                                 final AutoSwitchHAConnection autoSwitchHAConnection = (AutoSwitchHAConnection) conn;
-                                if (syncStateSet.contains(autoSwitchHAConnection.getClientAddress()) && autoSwitchHAConnection.getSlaveAckOffset() >= req.getNextOffset()) {
+                                if (syncStateSet.contains(autoSwitchHAConnection.getSlaveAddress()) && autoSwitchHAConnection.getSlaveAckOffset() >= req.getNextOffset()) {
                                     ackNums ++;
                                 }
                                 if (ackNums >= syncStateSet.size()) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/EndTransactionProcessor.java
Patch:
@@ -55,7 +55,7 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand
         RemotingCommandException {
         final RemotingCommand response = RemotingCommand.createResponseCommand(null);
         final EndTransactionRequestHeader requestHeader =
-            (EndTransactionRequestHeader)request.decodeCommandCustomHeader(EndTransactionRequestHeader.class);
+            (EndTransactionRequestHeader) request.decodeCommandCustomHeader(EndTransactionRequestHeader.class);
         LOGGER.debug("Transaction request:{}", requestHeader);
         if (BrokerRole.SLAVE == brokerController.getMessageStoreConfig().getBrokerRole()) {
             response.setCode(ResponseCode.SLAVE_NOT_AVAILABLE);

File: client/src/main/java/org/apache/rocketmq/client/producer/DefaultMQProducer.java
Patch:
@@ -124,7 +124,7 @@ public class DefaultMQProducer extends ClientConfig implements MQProducer {
     private boolean retryAnotherBrokerWhenNotStoreOK = false;
 
     /**
-     * Maximum allowed message size in bytes.
+     * Maximum allowed message body size in bytes.
      */
     private int maxMessageSize = 1024 * 1024 * 4; // 4M
 

File: store/src/main/java/org/apache/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -87,7 +87,7 @@ public class MessageStoreConfig {
     private int fileReservedTime = 72;
     // Flow control for ConsumeQueue
     private int putMsgIndexHightWater = 600000;
-    // The maximum size of message,default is 4M
+    // The maximum size of message body,default is 4M,4M only for body length,not include others.
     private int maxMessageSize = 1024 * 1024 * 4;
     // Whether check the CRC32 of the records consumed.
     // This ensures no on-the-wire or on-disk corruption to the messages occurred.

File: store/src/test/java/org/apache/rocketmq/store/AppendCallbackTest.java
Patch:
@@ -58,7 +58,7 @@ public void init() throws Exception {
         //too much reference
         DefaultMessageStore messageStore = new DefaultMessageStore(messageStoreConfig, null, null, null);
         CommitLog commitLog = new CommitLog(messageStore);
-        callback = commitLog.new DefaultAppendMessageCallback(1024);
+        callback = commitLog.new DefaultAppendMessageCallback();
     }
 
     @After

File: common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
Patch:
@@ -303,7 +303,7 @@ public class BrokerConfig extends BrokerIdentity {
     /**
      * Whether the controller is deployed independently
      */
-    private boolean isControllerDeployedStandAlone = false;
+    private boolean controllerDeployedStandAlone = false;
 
     /**
      * If isControllerDeployedStandAlone = false, controllerAddr should be the addresses of all name-srv which running the controller instance.
@@ -1302,11 +1302,11 @@ public void setStartupControllerMode(boolean startupControllerMode) {
     }
 
     public boolean isControllerDeployedStandAlone() {
-        return isControllerDeployedStandAlone;
+        return controllerDeployedStandAlone;
     }
 
     public void setControllerDeployedStandAlone(boolean controllerDeployedStandAlone) {
-        isControllerDeployedStandAlone = controllerDeployedStandAlone;
+        this.controllerDeployedStandAlone = controllerDeployedStandAlone;
     }
 
     public String getControllerAddr() {

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java
Patch:
@@ -600,7 +600,7 @@ public void unRegisterBroker(Set<UnRegisterBrokerRequestHeader> unRegisterReques
                     }
 
                     // Check whether we need to elect a new master
-                    if (this.namesrvController != null && this.namesrvController.getControllerConfig().isStartupController() && this.controller != null) {
+                    if (this.namesrvController != null && this.namesrvController.getControllerConfig().isEnableStartupController() && this.controller != null) {
                         if (unRegisterRequest.getBrokerId() == 0) {
                             this.controller.electMaster(new ElectMasterRequestHeader(unRegisterRequest.getBrokerName()));
                         }

File: test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleBase.java
Patch:
@@ -123,7 +123,7 @@ protected MessageStoreConfig buildMessageStoreConfig(final String brokerName, fi
 
     protected ControllerConfig buildControllerConfig(final String id, final String peers) {
         final ControllerConfig config = new ControllerConfig();
-        config.setStartupController(true);
+        config.setEnableStartupController(true);
         config.setControllerDLegerGroup("group1");
         config.setControllerDLegerPeers(peers);
         config.setControllerDLegerSelfId(id);

File: acl/src/main/java/org/apache/rocketmq/acl/AccessValidator.java
Patch:
@@ -71,7 +71,7 @@ public interface AccessValidator {
      *
      * @return
      */
-    boolean updateGlobalWhiteAddrsConfig(List<String> globalWhiteAddrsList);
+    boolean updateGlobalWhiteAddrsConfig(List<String> globalWhiteAddrsList, String aclFileFullPath);
 
     /**
      * get broker cluster acl config information

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessValidator.java
Patch:
@@ -155,8 +155,8 @@ public boolean deleteAccessConfig(String accesskey) {
         return aclPlugEngine.getAclConfigDataVersion();
     }
 
-    @Override public boolean updateGlobalWhiteAddrsConfig(List<String> globalWhiteAddrsList) {
-        return aclPlugEngine.updateGlobalWhiteAddrsConfig(globalWhiteAddrsList);
+    @Override public boolean updateGlobalWhiteAddrsConfig(List<String> globalWhiteAddrsList, String aclFileFullPath) {
+        return aclPlugEngine.updateGlobalWhiteAddrsConfig(globalWhiteAddrsList, aclFileFullPath);
     }
 
     @Override public AclConfig getAllAclConfig() {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -404,7 +404,8 @@ private synchronized RemotingCommand updateGlobalWhiteAddrsConfig(ChannelHandler
 
         try {
             AccessValidator accessValidator = this.brokerController.getAccessValidatorMap().get(PlainAccessValidator.class);
-            if (accessValidator.updateGlobalWhiteAddrsConfig(UtilAll.split(requestHeader.getGlobalWhiteAddrs(), ","))) {
+            if (accessValidator.updateGlobalWhiteAddrsConfig(UtilAll.split(requestHeader.getGlobalWhiteAddrs(), ","),
+                requestHeader.getAclFileFullPath())) {
                 response.setCode(ResponseCode.SUCCESS);
                 response.setOpaque(request.getOpaque());
                 response.markResponseType();

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -348,11 +348,11 @@ public void deleteAccessConfig(final String addr, final String accessKey, final
         throw new MQClientException(response.getCode(), response.getRemark());
     }
 
-    public void updateGlobalWhiteAddrsConfig(final String addr, final String globalWhiteAddrs, final long timeoutMillis)
-        throws RemotingException, InterruptedException, MQClientException {
-
+    public void updateGlobalWhiteAddrsConfig(final String addr, final String globalWhiteAddrs, String aclFileFullPath, final long timeoutMillis)
+        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
         UpdateGlobalWhiteAddrsConfigRequestHeader requestHeader = new UpdateGlobalWhiteAddrsConfigRequestHeader();
         requestHeader.setGlobalWhiteAddrs(globalWhiteAddrs);
+        requestHeader.setAclFileFullPath(aclFileFullPath);
 
         RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.UPDATE_GLOBAL_WHITE_ADDRS_CONFIG, requestHeader);
 

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExt.java
Patch:
@@ -181,8 +181,8 @@ public void createAndUpdatePlainAccessConfig(String addr,
     }
 
     @Override public void updateGlobalWhiteAddrConfig(String addr,
-        String globalWhiteAddrs) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
-        defaultMQAdminExtImpl.updateGlobalWhiteAddrConfig(addr, globalWhiteAddrs);
+        String globalWhiteAddrs, String aclFileFullPath) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
+        defaultMQAdminExtImpl.updateGlobalWhiteAddrConfig(addr, globalWhiteAddrs, aclFileFullPath);
     }
 
     @Override public ClusterAclVersionInfo examineBrokerClusterAclVersionInfo(

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -211,8 +211,8 @@ public void createAndUpdateTopicConfig(String addr, TopicConfig config) throws R
     }
 
     @Override public void updateGlobalWhiteAddrConfig(String addr,
-        String globalWhiteAddrs) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
-        this.mqClientInstance.getMQClientAPIImpl().updateGlobalWhiteAddrsConfig(addr, globalWhiteAddrs, timeoutMillis);
+        String globalWhiteAddrs, String aclFileFullPath) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
+        this.mqClientInstance.getMQClientAPIImpl().updateGlobalWhiteAddrsConfig(addr, globalWhiteAddrs, aclFileFullPath, timeoutMillis);
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java
Patch:
@@ -77,7 +77,7 @@ void createAndUpdatePlainAccessConfig(final String addr, final PlainAccessConfig
     void deletePlainAccessConfig(final String addr, final String accessKey) throws RemotingException, MQBrokerException,
         InterruptedException, MQClientException;
 
-    void updateGlobalWhiteAddrConfig(final String addr, final String globalWhiteAddrs)throws RemotingException, MQBrokerException,
+    void updateGlobalWhiteAddrConfig(final String addr, final String globalWhiteAddrs, String aclFileFullPath)throws RemotingException, MQBrokerException,
         InterruptedException, MQClientException;
 
     ClusterAclVersionInfo examineBrokerClusterAclVersionInfo(final String addr) throws RemotingException, MQBrokerException,

File: store/src/test/java/org/apache/rocketmq/store/ha/autoswitch/EpochFileCacheTest.java
Patch:
@@ -14,12 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.store.ha;
+package org.apache.rocketmq.store.ha.autoswitch;
 
 import java.io.File;
 import java.nio.file.Paths;
 import org.apache.rocketmq.common.EpochEntry;
-import org.apache.rocketmq.store.ha.autoswitch.EpochFileCache;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: example/src/main/java/org/apache/rocketmq/example/rpc/RequestProducer.java
Patch:
@@ -29,6 +29,8 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
         long ttl = 3000;
 
         DefaultMQProducer producer = new DefaultMQProducer(producerGroup);
+        producer.setNamesrvAddr("127.0.0.1:9876");
+
         producer.start();
 
         try {

File: example/src/main/java/org/apache/rocketmq/example/rpc/ResponseConsumer.java
Patch:
@@ -40,11 +40,13 @@ public static void main(String[] args) throws InterruptedException, MQClientExce
 
         // create a producer to send reply message
         DefaultMQProducer replyProducer = new DefaultMQProducer(producerGroup);
+        replyProducer.setNamesrvAddr("127.0.0.1:9876");
         replyProducer.start();
 
         // create consumer
         DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(consumerGroup);
         consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);
+        consumer.setNamesrvAddr("127.0.0.1:9876");
 
         // recommend client configs
         consumer.setPullTimeDelayMillsWhenException(0L);
@@ -55,7 +57,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeCo
                 System.out.printf("%s Receive New Messages: %s %n", Thread.currentThread().getName(), msgs);
                 for (MessageExt msg : msgs) {
                     try {
-                        System.out.printf("handle message: %s", msg.toString());
+                        System.out.printf("handle message: %s %n", msg.toString());
                         String replyTo = MessageUtil.getReplyToClient(msg);
                         byte[] replyContent = "reply message contents.".getBytes();
                         // create reply message with given util, do not create reply message by yourself

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/SyncStateSet.java
Patch:
@@ -26,7 +26,7 @@ public class SyncStateSet extends RemotingSerializable {
     private int syncStateSetEpoch;
 
     public SyncStateSet(Set<String> syncStateSet, int syncStateSetEpoch) {
-        this.syncStateSet = syncStateSet;
+        this.syncStateSet = new HashSet<>(syncStateSet);
         this.syncStateSetEpoch = syncStateSetEpoch;
     }
 

File: container/src/main/java/org/apache/rocketmq/container/InnerBrokerController.java
Patch:
@@ -100,7 +100,7 @@ public void run2() {
             }, 1000, this.brokerConfig.getSyncBrokerMemberGroupPeriod(), TimeUnit.MILLISECONDS));
         }
 
-        if (this.messageStoreConfig.isStartupControllerMode()) {
+        if (this.brokerConfig.isStartupControllerMode()) {
             scheduleSendHeartbeat();
         }
 

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -191,7 +191,7 @@ public DefaultMessageStore(final MessageStoreConfig messageStoreConfig, final Br
         if (!messageStoreConfig.isEnableDLegerCommitLog() && !this.messageStoreConfig.isDuplicationEnable()) {
             this.haService = ServiceProvider.loadClass(ServiceProvider.HA_SERVICE_ID, HAService.class);
             if (null == this.haService) {
-                if (this.messageStoreConfig.isStartupControllerMode()) {
+                if (brokerConfig.isStartupControllerMode()) {
                     this.haService = new AutoSwitchHAService();
                     LOGGER.warn("Load AutoSwitch HA Service: {}", AutoSwitchHAService.class.getSimpleName());
                 } else {
@@ -1952,7 +1952,7 @@ private void deleteExpiredFiles() {
                     destroyMappedFileIntervalForcibly, cleanAtOnce, deleteFileBatchMax);
                 if (deleteCount > 0) {
                     // If in the controller mode, we should notify the AutoSwitchHaService to truncateEpochFile
-                    if (DefaultMessageStore.this.messageStoreConfig.isStartupControllerMode()) {
+                    if (DefaultMessageStore.this.brokerConfig.isStartupControllerMode()) {
                         if (DefaultMessageStore.this.haService instanceof AutoSwitchHAService) {
                             final long minPhyOffset = getMinPhyOffset();
                             ((AutoSwitchHAService) DefaultMessageStore.this.haService).truncateEpochFilePrefix(minPhyOffset - 1);

File: store/src/test/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHATest.java
Patch:
@@ -79,7 +79,6 @@ public void init(int mappedFileSize) throws Exception {
         storeConfig1.setStorePathEpochFile(storePathRootDir + File.separator + "broker1" + File.separator + "EpochFileCache");
         storeConfig1.setTotalReplicas(3);
         storeConfig1.setInSyncReplicas(2);
-        storeConfig1.setStartupControllerMode(true);
         buildMessageStoreConfig(storeConfig1, mappedFileSize);
         this.store1HaAddress = "127.0.0.1:10912";
 
@@ -91,7 +90,6 @@ public void init(int mappedFileSize) throws Exception {
         storeConfig2.setHaListenPort(10943);
         storeConfig2.setTotalReplicas(3);
         storeConfig2.setInSyncReplicas(2);
-        storeConfig2.setStartupControllerMode(true);
         buildMessageStoreConfig(storeConfig2, mappedFileSize);
         this.store2HaAddress = "127.0.0.1:10943";
 
@@ -106,7 +104,6 @@ public void init(int mappedFileSize) throws Exception {
         storeConfig3.setHaListenPort(10980);
         storeConfig3.setTotalReplicas(3);
         storeConfig3.setInSyncReplicas(2);
-        storeConfig3.setStartupControllerMode(true);
         buildMessageStoreConfig(storeConfig3, mappedFileSize);
         messageStore3 = buildMessageStore(storeConfig3, 3L);
         this.store3HaAddress = "127.0.0.1:10980";
@@ -309,6 +306,7 @@ private DefaultMessageStore buildMessageStore(MessageStoreConfig messageStoreCon
         long brokerId) throws Exception {
         BrokerConfig brokerConfig = new BrokerConfig();
         brokerConfig.setBrokerId(brokerId);
+        brokerConfig.setStartupControllerMode(true);
         return new DefaultMessageStore(messageStoreConfig, brokerStatsManager, null, brokerConfig);
     }
 

File: test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleBase.java
Patch:
@@ -82,6 +82,7 @@ public BrokerController startBroker(String namesrvAddress, int brokerId, int haP
         brokerConfig.setControllerAddr(namesrvAddress);
         brokerConfig.setReplicasManagerSyncBrokerMetadataPeriod(2 * 1000);
         brokerConfig.setReplicasManagerCheckSyncStateSetPeriod(4 * 1000);
+        brokerConfig.setStartupControllerMode(true);
 
         final NettyServerConfig nettyServerConfig = new NettyServerConfig();
         nettyServerConfig.setListenPort(nettyListenPort);
@@ -110,7 +111,6 @@ protected MessageStoreConfig buildMessageStoreConfig(final String brokerName, fi
         storeConfig.setStorePathEpochFile(storePathRootDir + File.separator + brokerName + File.separator + "EpochFileCache");
         storeConfig.setTotalReplicas(3);
         storeConfig.setInSyncReplicas(2);
-        storeConfig.setStartupControllerMode(true);
 
         storeConfig.setMappedFileSizeCommitLog(mappedFileSize);
         storeConfig.setMappedFileSizeConsumeQueue(1024 * 1024);

File: test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleIntegrationTest.java
Patch:
@@ -115,7 +115,7 @@ public void testChangeMaster() throws Exception {
         // Let master shutdown
         brokerController1.shutdown();
         this.brokerList.remove(this.brokerController1);
-        Thread.sleep(5000);
+        Thread.sleep(6000);
 
         // The slave should change to master
         assertTrue(brokerController2.getReplicasManager().isMasterState());

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/jdbc/JDBCTransactionStore.java
Patch:
@@ -72,7 +72,7 @@ public boolean open() {
 
     private boolean loadDriver() {
         try {
-            Class.forName(this.jdbcTransactionStoreConfig.getJdbcDriverClass()).newInstance();
+            Class.forName(this.jdbcTransactionStoreConfig.getJdbcDriverClass()).getDeclaredConstructor().newInstance();
             log.info("Loaded the appropriate driver, {}",
                 this.jdbcTransactionStoreConfig.getJdbcDriverClass());
             return true;

File: broker/src/main/java/org/apache/rocketmq/broker/util/ServiceProvider.java
Patch:
@@ -173,7 +173,7 @@ protected static <T> T initService(ClassLoader classLoader, String serviceName,
                             serviceClazz.getName(),
                             objectId(serviceClazz.getClassLoader()), clazz.getName());
                     }
-                    return (T)serviceClazz.newInstance();
+                    return (T)serviceClazz.getDeclaredConstructor().newInstance();
                 } catch (ClassNotFoundException ex) {
                     if (classLoader == thisClassLoader) {
                         // Nothing more to try, onwards.

File: common/src/test/java/org/apache/rocketmq/common/protocol/header/FastCodesHeaderTest.java
Patch:
@@ -75,7 +75,7 @@ private HashMap<String, String> buildExtFields(List<Field> fields) {
     private void check(RemotingCommand command, List<Field> fields,
             Class<? extends CommandCustomHeader> classHeader) throws Exception {
         CommandCustomHeader o1 = command.decodeCommandCustomHeader(classHeader, false);
-        CommandCustomHeader o2 = classHeader.newInstance();
+        CommandCustomHeader o2 = classHeader.getDeclaredConstructor().newInstance();
         ((FastCodesHeader)o2).decode(command.getExtFields());
         for (Field f : fields) {
             Object value1 = f.get(o1);

File: openmessaging/src/main/java/io/openmessaging/rocketmq/utils/BeanUtils.java
Patch:
@@ -87,7 +87,7 @@ public final class BeanUtils {
     public static <T> T populate(final Properties properties, final Class<T> clazz) {
         T obj = null;
         try {
-            obj = clazz.newInstance();
+            obj = clazz.getDeclaredConstructor().newInstance();
             return populate(properties, obj);
         } catch (Throwable e) {
             log.warn("Error occurs !", e);
@@ -98,7 +98,7 @@ public static <T> T populate(final Properties properties, final Class<T> clazz)
     public static <T> T populate(final KeyValue properties, final Class<T> clazz) {
         T obj = null;
         try {
-            obj = clazz.newInstance();
+            obj = clazz.getDeclaredConstructor().newInstance();
             return populate(properties, obj);
         } catch (Throwable e) {
             log.warn("Error occurs !", e);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -959,8 +959,7 @@ public void setConsumeOrderly(boolean consumeOrderly) {
         this.consumeOrderly = consumeOrderly;
     }
 
-    public void resetOffsetByTimeStamp(long timeStamp)
-        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
+    public void resetOffsetByTimeStamp(long timeStamp) throws MQClientException {
         for (String topic : rebalanceImpl.getSubscriptionInner().keySet()) {
             Set<MessageQueue> mqs = rebalanceImpl.getTopicSubscribeInfoTable().get(topic);
             if (CollectionUtils.isNotEmpty(mqs)) {

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultLitePullConsumer.java
Patch:
@@ -447,10 +447,12 @@ public void setOffsetStore(OffsetStore offsetStore) {
         this.offsetStore = offsetStore;
     }
 
+    @Override
     public boolean isUnitMode() {
         return unitMode;
     }
 
+    @Override
     public void setUnitMode(boolean isUnitMode) {
         this.unitMode = isUnitMode;
     }

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPullConsumer.java
Patch:
@@ -434,10 +434,12 @@ public DefaultMQPullConsumerImpl getDefaultMQPullConsumerImpl() {
         return defaultMQPullConsumerImpl;
     }
 
+    @Override
     public boolean isUnitMode() {
         return unitMode;
     }
 
+    @Override
     public void setUnitMode(boolean isUnitMode) {
         this.unitMode = isUnitMode;
     }

File: common/src/main/java/org/apache/rocketmq/common/CountDownLatch2.java
Patch:
@@ -172,10 +172,12 @@ int getCount() {
             return getState();
         }
 
+        @Override
         protected int tryAcquireShared(int acquires) {
             return (getState() == 0) ? 1 : -1;
         }
 
+        @Override
         protected boolean tryReleaseShared(int releases) {
             // Decrement count; signal when transition to zero
             for (; ; ) {

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumer.java
Patch:
@@ -640,7 +640,7 @@ public Map<String, String> getSubscription() {
      */
     @Deprecated
     public void setSubscription(Map<String, String> subscription) {
-        Map<String, String> subscriptionWithNamespace = new HashMap<String, String>();
+        Map<String, String> subscriptionWithNamespace = new HashMap<String, String>(subscription.size(), 1);
         for (Entry<String, String> topicEntry : subscription.entrySet()) {
             subscriptionWithNamespace.put(withNamespace(topicEntry.getKey()), topicEntry.getValue());
         }

File: client/src/main/java/org/apache/rocketmq/client/consumer/store/LocalFileOffsetStore.java
Patch:
@@ -169,7 +169,7 @@ public void updateConsumeOffsetToBroker(final MessageQueue mq, final long offset
 
     @Override
     public Map<MessageQueue, Long> cloneOffsetTable(String topic) {
-        Map<MessageQueue, Long> cloneOffsetTable = new HashMap<MessageQueue, Long>();
+        Map<MessageQueue, Long> cloneOffsetTable = new HashMap<MessageQueue, Long>(this.offsetTable.size(), 1);
         for (Map.Entry<MessageQueue, AtomicLong> entry : this.offsetTable.entrySet()) {
             MessageQueue mq = entry.getKey();
             if (!UtilAll.isBlank(topic) && !topic.equals(mq.getTopic())) {

File: client/src/main/java/org/apache/rocketmq/client/consumer/store/RemoteBrokerOffsetStore.java
Patch:
@@ -174,7 +174,7 @@ public void removeOffset(MessageQueue mq) {
 
     @Override
     public Map<MessageQueue, Long> cloneOffsetTable(String topic) {
-        Map<MessageQueue, Long> cloneOffsetTable = new HashMap<MessageQueue, Long>();
+        Map<MessageQueue, Long> cloneOffsetTable = new HashMap<MessageQueue, Long>(this.offsetTable.size(), 1);
         for (Map.Entry<MessageQueue, AtomicLong> entry : this.offsetTable.entrySet()) {
             MessageQueue mq = entry.getKey();
             if (!UtilAll.isBlank(topic) && !topic.equals(mq.getTopic())) {

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -388,7 +388,7 @@ public ClusterAclVersionInfo getBrokerClusterAclInfo(final String addr,
                 clusterAclVersionInfo.setBrokerAddr(responseHeader.getBrokerAddr());
                 clusterAclVersionInfo.setAclConfigDataVersion(DataVersion.fromJson(responseHeader.getVersion(), DataVersion.class));
                 HashMap<String, Object> dataVersionMap = JSON.parseObject(responseHeader.getAllAclFileVersion(), HashMap.class);
-                Map<String, DataVersion> allAclConfigDataVersion = new HashMap<String, DataVersion>();
+                Map<String, DataVersion> allAclConfigDataVersion = new HashMap<String, DataVersion>(dataVersionMap.size(), 1);
                 for (Map.Entry<String, Object> entry : dataVersionMap.entrySet()) {
                     allAclConfigDataVersion.put(entry.getKey(),DataVersion.fromJson(JSON.toJSONString(entry.getValue()), DataVersion.class));
                 }

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.Set;
 import java.util.concurrent.ConcurrentMap;
 
+import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.client.QueryResult;
 import org.apache.rocketmq.client.Validators;
@@ -962,8 +963,8 @@ public void resetOffsetByTimeStamp(long timeStamp)
         throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
         for (String topic : rebalanceImpl.getSubscriptionInner().keySet()) {
             Set<MessageQueue> mqs = rebalanceImpl.getTopicSubscribeInfoTable().get(topic);
-            Map<MessageQueue, Long> offsetTable = new HashMap<MessageQueue, Long>();
-            if (mqs != null) {
+            if (CollectionUtils.isNotEmpty(mqs)) {
+                Map<MessageQueue, Long> offsetTable = new HashMap<MessageQueue, Long>(mqs.size(), 1);
                 for (MessageQueue mq : mqs) {
                     long offset = searchOffset(mq, timeStamp);
                     offsetTable.put(mq, offset);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceImpl.java
Patch:
@@ -117,7 +117,7 @@ public void unlockAll(final boolean oneway) {
     }
 
     private HashMap<String/* brokerName */, Set<MessageQueue>> buildProcessQueueTableByBrokerName() {
-        HashMap<String, Set<MessageQueue>> result = new HashMap<String, Set<MessageQueue>>();
+        HashMap<String, Set<MessageQueue>> result = new HashMap<String, Set<MessageQueue>>(this.processQueueTable.size(), 1);
         for (MessageQueue mq : this.processQueueTable.keySet()) {
             Set<MessageQueue> mqs = result.get(mq.getBrokerName());
             if (null == mqs) {

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -366,7 +366,7 @@ public void updateTopicRouteInfoFromNameServer() {
      * @return newOffsetTable
      */
     public Map<MessageQueue, Long> parseOffsetTableFromBroker(Map<MessageQueue, Long> offsetTable, String namespace) {
-        HashMap<MessageQueue, Long> newOffsetTable = new HashMap<MessageQueue, Long>();
+        HashMap<MessageQueue, Long> newOffsetTable = new HashMap<MessageQueue, Long>(offsetTable.size(), 1);
         if (StringUtils.isNotEmpty(namespace)) {
             for (Entry<MessageQueue, Long> entry : offsetTable.entrySet()) {
                 MessageQueue queue = entry.getKey();
@@ -387,15 +387,15 @@ private void cleanOfflineBroker() {
         try {
             if (this.lockNamesrv.tryLock(LOCK_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS))
                 try {
-                    ConcurrentHashMap<String, HashMap<Long, String>> updatedTable = new ConcurrentHashMap<String, HashMap<Long, String>>();
+                    ConcurrentHashMap<String, HashMap<Long, String>> updatedTable = new ConcurrentHashMap<String, HashMap<Long, String>>(this.brokerAddrTable.size(), 1);
 
                     Iterator<Entry<String, HashMap<Long, String>>> itBrokerTable = this.brokerAddrTable.entrySet().iterator();
                     while (itBrokerTable.hasNext()) {
                         Entry<String, HashMap<Long, String>> entry = itBrokerTable.next();
                         String brokerName = entry.getKey();
                         HashMap<Long, String> oneTable = entry.getValue();
 
-                        HashMap<Long, String> cloneAddrTable = new HashMap<Long, String>();
+                        HashMap<Long, String> cloneAddrTable = new HashMap<Long, String>(oneTable.size(), 1);
                         cloneAddrTable.putAll(oneTable);
 
                         Iterator<Entry<Long, String>> it = cloneAddrTable.entrySet().iterator();

File: client/src/main/java/org/apache/rocketmq/client/trace/AsyncTraceDispatcher.java
Patch:
@@ -330,6 +330,7 @@ public void addTraceTransferBean(TraceTransferBean traceTransferBean) {
                 traceExecutor.submit(asyncDataSendTask);
 
                 this.clear();
+
             }
         }
 

File: logging/src/main/java/org/apache/rocketmq/logging/inner/Level.java
Patch:
@@ -116,9 +116,6 @@ public static Level toLevel(String sArg, Level defaultLevel) {
         if (s.equals(OFF_NAME)) {
             return Level.OFF;
         }
-        if (s.equals(INFO_NAME)) {
-            return Level.INFO;
-        }
         return defaultLevel;
     }
 

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/controller/impl/DledgerControllerStateMachine.java
Patch:
@@ -54,7 +54,7 @@ public void onApply(CommittedEntryIterator iterator) {
             if (body != null && body.length > 0) {
                 final EventMessage event = this.eventSerializer.deserialize(body);
                 this.replicasInfoManager.applyEvent(event);
-                applyingSize ++;
+                applyingSize++;
             }
         }
         log.info("Apply {} events on controller {}", applyingSize, this.dledgerId);

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/controller/manager/event/ElectMasterEvent.java
Patch:
@@ -35,8 +35,7 @@ public ElectMasterEvent(String brokerName, String newMasterAddress) {
         this(true, brokerName, newMasterAddress, "");
     }
 
-    public ElectMasterEvent(boolean newMasterElected, String brokerName, String newMasterAddress,
-        String clusterName) {
+    public ElectMasterEvent(boolean newMasterElected, String brokerName, String newMasterAddress, String clusterName) {
         this.newMasterElected = newMasterElected;
         this.brokerName = brokerName;
         this.newMasterAddress = newMasterAddress;

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/controller/manager/event/EventSerializer.java
Patch:
@@ -25,7 +25,7 @@
 public class EventSerializer {
     private final FastJsonSerializer serializer;
 
-    public  EventSerializer() {
+    public EventSerializer() {
         this.serializer = new FastJsonSerializer();
     }
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -277,7 +277,7 @@ public void run() {
                     LOGGER.error("scanAvailableNameSrv exception", e);
                 }
             }
-        }, 1000 * 3, this.nettyClientConfig.getConnectTimeoutMillis());
+        }, 0, this.nettyClientConfig.getConnectTimeoutMillis());
 
     }
 

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -149,6 +149,9 @@ public class BrokerController {
     private final BrokerStatsManager brokerStatsManager;
     private final List<SendMessageHook> sendMessageHookList = new ArrayList<SendMessageHook>();
     private final List<ConsumeMessageHook> consumeMessageHookList = new ArrayList<ConsumeMessageHook>();
+    private final BrokerFastFailure brokerFastFailure;
+    private final Configuration configuration;
+    private final Map<Class, AccessValidator> accessValidatorMap = new HashMap<Class, AccessValidator>();
     private MessageStore messageStore;
     private RemotingServer remotingServer;
     private RemotingServer fastRemotingServer;
@@ -166,14 +169,11 @@ public class BrokerController {
     private boolean updateMasterHAServerAddrPeriodically = false;
     private BrokerStats brokerStats;
     private InetSocketAddress storeHost;
-    private BrokerFastFailure brokerFastFailure;
-    private Configuration configuration;
     private FileWatchService fileWatchService;
     private TransactionalMessageCheckService transactionalMessageCheckService;
     private TransactionalMessageService transactionalMessageService;
     private AbstractTransactionalMessageCheckListener transactionalMessageCheckListener;
     private Future<?> slaveSyncFuture;
-    private Map<Class,AccessValidator> accessValidatorMap = new HashMap<Class, AccessValidator>();
 
     public BrokerController(
         final BrokerConfig brokerConfig,

File: store/src/main/java/org/apache/rocketmq/store/MappedFile.java
Patch:
@@ -371,18 +371,18 @@ private boolean isAbleToFlush(final int flushLeastPages) {
     }
 
     protected boolean isAbleToCommit(final int commitLeastPages) {
-        int flush = this.committedPosition.get();
+        int commit = this.committedPosition.get();
         int write = this.wrotePosition.get();
 
         if (this.isFull()) {
             return true;
         }
 
         if (commitLeastPages > 0) {
-            return ((write / OS_PAGE_SIZE) - (flush / OS_PAGE_SIZE)) >= commitLeastPages;
+            return ((write / OS_PAGE_SIZE) - (commit / OS_PAGE_SIZE)) >= commitLeastPages;
         }
 
-        return write > flush;
+        return write > commit;
     }
 
     public int getFlushedPosition() {

File: store/src/test/java/org/apache/rocketmq/store/queue/BatchConsumeQueueTest.java
Patch:
@@ -161,7 +161,7 @@ public void testBuildAndSearchBatchConsumeQueuePerformance() {
         }
         end = System.currentTimeMillis();
         Assert.assertTrue(end - start < 2000);
-        Assert.assertEquals(-1, batchConsumeQueue.getOffsetInQueueByTime(System.currentTimeMillis()));
+        Assert.assertEquals(199991, batchConsumeQueue.getOffsetInQueueByTime(System.currentTimeMillis()));
         batchConsumeQueue.destroy();
     }
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/DeleteTopicSubCommand.java
Patch:
@@ -48,7 +48,7 @@ public static void deleteTopic(final DefaultMQAdminExt adminExt,
             nameServerSet = new HashSet(Arrays.asList(ns));
         }
 
-        adminExt.deleteTopicInNameServer(nameServerSet, topic);
+        adminExt.deleteTopicInNameServer(nameServerSet, clusterName, topic);
         System.out.printf("delete topic [%s] from NameServer success.%n", topic);
     }
 

File: common/src/main/java/org/apache/rocketmq/common/sysflag/MessageSysFlag.java
Patch:
@@ -39,6 +39,9 @@ public class MessageSysFlag {
     public final static int TRANSACTION_ROLLBACK_TYPE = 0x3 << 2;
     public final static int BORNHOST_V6_FLAG = 0x1 << 4;
     public final static int STOREHOSTADDRESS_V6_FLAG = 0x1 << 5;
+    //Mark the flag for batch to avoid conflict
+    public final static int NEED_UNWRAP_FLAG = 0x1 << 6;
+    public final static int INNER_BATCH_FLAG = 0x1 << 7;
 
     // COMPRESSION_TYPE
     public final static int COMPRESSION_LZ4_TYPE = 0x1 << 8;

File: client/src/main/java/org/apache/rocketmq/client/trace/AsyncTraceDispatcher.java
Patch:
@@ -438,7 +438,7 @@ private Set<String> tryGetMessageQueueBrokerSet(DefaultMQProducerImpl producer,
             TopicPublishInfo topicPublishInfo = producer.getTopicPublishInfoTable().get(topic);
             if (null == topicPublishInfo || !topicPublishInfo.ok()) {
                 producer.getTopicPublishInfoTable().putIfAbsent(topic, new TopicPublishInfo());
-                producer.getmQClientFactory().updateTopicRouteInfoFromNameServer(topic);
+                producer.getMqClientFactory().updateTopicRouteInfoFromNameServer(topic);
                 topicPublishInfo = producer.getTopicPublishInfoTable().get(topic);
             }
             if (topicPublishInfo.isHaveTopicRouterInfo() || topicPublishInfo.ok()) {

File: client/src/main/java/org/apache/rocketmq/client/trace/hook/EndTransactionTraceHookImpl.java
Patch:
@@ -63,7 +63,7 @@ public void endTransaction(EndTransactionContext context) {
         traceBean.setKeys(context.getMessage().getKeys());
         traceBean.setStoreHost(context.getBrokerAddr());
         traceBean.setMsgType(MessageType.Trans_msg_Commit);
-        traceBean.setClientHost(((AsyncTraceDispatcher)localDispatcher).getHostProducer().getmQClientFactory().getClientId());
+        traceBean.setClientHost(((AsyncTraceDispatcher)localDispatcher).getHostProducer().getMqClientFactory().getClientId());
         traceBean.setMsgId(context.getMsgId());
         traceBean.setTransactionState(context.getTransactionState());
         traceBean.setTransactionId(context.getTransactionId());

File: client/src/test/java/org/apache/rocketmq/client/producer/DefaultMQProducerTest.java
Patch:
@@ -102,7 +102,7 @@ public void init() throws Exception {
         field.setAccessible(true);
         field.set(mQClientFactory, mQClientAPIImpl);
 
-        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
 
         when(mQClientAPIImpl.sendMessage(anyString(), anyString(), any(Message.class), any(SendMessageRequestHeader.class), anyLong(), any(CommunicationMode.class),
             nullable(SendMessageContext.class), any(DefaultMQProducerImpl.class))).thenCallRealMethod();
@@ -358,7 +358,7 @@ public void testSetCallbackExecutor() throws MQClientException {
         producer.setCallbackExecutor(customized);
 
         NettyRemotingClient remotingClient = (NettyRemotingClient) producer.getDefaultMQProducerImpl()
-            .getmQClientFactory().getMQClientAPIImpl().getRemotingClient();
+            .getMqClientFactory().getMQClientAPIImpl().getRemotingClient();
 
         assertThat(remotingClient.getCallbackExecutor()).isEqualTo(customized);
     }

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQConsumerWithTraceTest.java
Patch:
@@ -217,7 +217,7 @@ public void terminate() {
 
     @Test
     public void testPullMessage_WithTrace_Success() throws InterruptedException, RemotingException, MQBrokerException, MQClientException {
-        traceProducer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
+        traceProducer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
 
         final CountDownLatch countDownLatch = new CountDownLatch(1);
         final AtomicReference<MessageExt> messageAtomic = new AtomicReference<MessageExt>();

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQLitePullConsumerWithTraceTest.java
Patch:
@@ -218,7 +218,7 @@ private void initDefaultLitePullConsumer(DefaultLitePullConsumer litePullConsume
         field.setAccessible(true);
         field.set(litePullConsumerImpl, offsetStore);
 
-        traceProducer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
+        traceProducer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
 
         when(mQClientFactory.getMQClientAPIImpl().pullMessage(anyString(), any(PullMessageRequestHeader.class),
             anyLong(), any(CommunicationMode.class), nullable(PullCallback.class)))

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQProducerWithOpenTracingTest.java
Patch:
@@ -100,7 +100,7 @@ public void init() throws Exception {
         field.setAccessible(true);
         field.set(mQClientFactory, mQClientAPIImpl);
 
-        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
 
         when(mQClientAPIImpl.sendMessage(anyString(), anyString(), any(Message.class), any(SendMessageRequestHeader.class), anyLong(), any(CommunicationMode.class),
             nullable(SendMessageContext.class), any(DefaultMQProducerImpl.class))).thenCallRealMethod();
@@ -112,7 +112,7 @@ public void init() throws Exception {
 
     @Test
     public void testSendMessageSync_WithTrace_Success() throws RemotingException, InterruptedException, MQBrokerException, MQClientException {
-        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, producer.getDefaultMQProducerImpl());
         when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());
         producer.send(message);
         assertThat(tracer.finishedSpans().size()).isEqualTo(1);

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQProducerWithTraceTest.java
Patch:
@@ -109,7 +109,7 @@ public void init() throws Exception {
         field.setAccessible(true);
         field.set(mQClientFactory, mQClientAPIImpl);
 
-        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
 
         when(mQClientAPIImpl.sendMessage(anyString(), anyString(), any(Message.class), any(SendMessageRequestHeader.class), anyLong(), any(CommunicationMode.class),
             nullable(SendMessageContext.class), any(DefaultMQProducerImpl.class))).thenCallRealMethod();
@@ -121,7 +121,7 @@ public void init() throws Exception {
 
     @Test
     public void testSendMessageSync_WithTrace_Success() throws RemotingException, InterruptedException, MQBrokerException, MQClientException {
-        traceProducer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
+        traceProducer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
         when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());
         final CountDownLatch countDownLatch = new CountDownLatch(1);
         try {

File: client/src/test/java/org/apache/rocketmq/client/trace/TransactionMQProducerWithOpenTracingTest.java
Patch:
@@ -118,7 +118,7 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
         field.setAccessible(true);
         field.set(mQClientFactory, mQClientAPIImpl);
 
-        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
 
         when(mQClientAPIImpl.sendMessage(anyString(), anyString(), any(Message.class), any(SendMessageRequestHeader.class), anyLong(), any(CommunicationMode.class),
             nullable(SendMessageContext.class), any(DefaultMQProducerImpl.class))).thenCallRealMethod();
@@ -130,7 +130,7 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
 
     @Test
     public void testSendMessageSync_WithTrace_Success() throws RemotingException, InterruptedException, MQBrokerException, MQClientException {
-        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, producer.getDefaultMQProducerImpl());
         when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());
         producer.sendMessageInTransaction(message, null);
 

File: client/src/test/java/org/apache/rocketmq/client/trace/TransactionMQProducerWithTraceTest.java
Patch:
@@ -128,7 +128,7 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
         field.setAccessible(true);
         field.set(mQClientFactory, mQClientAPIImpl);
 
-        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
 
         Field fieldHooks = DefaultMQProducerImpl.class.getDeclaredField("endTransactionHookList");
         fieldHooks.setAccessible(true);
@@ -146,7 +146,7 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
 
     @Test
     public void testSendMessageSync_WithTrace_Success() throws RemotingException, InterruptedException, MQBrokerException, MQClientException {
-        traceProducer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
+        traceProducer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
         when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());
         final AtomicReference<EndTransactionContext> context = new AtomicReference<EndTransactionContext>();
         doAnswer(new Answer() {

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -50,6 +50,7 @@ public class MixAll {
     public static final String ROCKETMQ_HOME_PROPERTY = "rocketmq.home.dir";
     public static final String NAMESRV_ADDR_ENV = "NAMESRV_ADDR";
     public static final String NAMESRV_ADDR_PROPERTY = "rocketmq.namesrv.addr";
+    public static final String MESSAGE_COMPRESS_TYPE = "rocketmq.message.compressType";
     public static final String MESSAGE_COMPRESS_LEVEL = "rocketmq.message.compressLevel";
     public static final String DEFAULT_NAMESRV_ADDR_LOOKUP = "jmenv.tbsite.net";
     public static final String WS_DOMAIN_NAME = System.getProperty("rocketmq.namesrv.domain", DEFAULT_NAMESRV_ADDR_LOOKUP);

File: broker/src/main/java/org/apache/rocketmq/broker/client/ClientHousekeepingService.java
Patch:
@@ -36,7 +36,7 @@ public class ClientHousekeepingService implements ChannelEventListener {
     public ClientHousekeepingService(final BrokerController brokerController) {
         this.brokerController = brokerController;
         scheduledExecutorService = new ScheduledThreadPoolExecutor(1,
-            new ThreadFactoryImpl("ClientHousekeepingScheduledThread", brokerController.getBrokerConfig()));
+            new ThreadFactoryImpl("ClientHousekeepingScheduledThread", brokerController.getBrokerIdentity()));
     }
 
     public void start() {

File: broker/src/main/java/org/apache/rocketmq/broker/dledger/DLedgerRoleChangeHandler.java
Patch:
@@ -36,7 +36,7 @@
 public class DLedgerRoleChangeHandler implements DLedgerLeaderElector.RoleChangeHandler {
 
     private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
-    private ExecutorService executorService = Executors.newSingleThreadExecutor(new ThreadFactoryImpl("DLegerRoleChangeHandler_"));
+    private ExecutorService executorService;
     private BrokerController brokerController;
     private DefaultMessageStore messageStore;
     private DLedgerCommitLog dLedgerCommitLog;
@@ -48,6 +48,8 @@ public DLedgerRoleChangeHandler(BrokerController brokerController, DefaultMessag
         this.messageStore = messageStore;
         this.dLedgerCommitLog = (DLedgerCommitLog) messageStore.getCommitLog();
         this.dLegerServer = dLedgerCommitLog.getdLedgerServer();
+        this.executorService = Executors.newSingleThreadExecutor(
+            new ThreadFactoryImpl("DLegerRoleChangeHandler_", brokerController.getBrokerIdentity()));
     }
 
     @Override public void handle(long term, MemberState.Role role) {

File: broker/src/main/java/org/apache/rocketmq/broker/loadbalance/AssignmentManager.java
Patch:
@@ -65,7 +65,7 @@ public AssignmentManager(BrokerController brokerController) {
         ignoreRouteTopics.add(brokerController.getBrokerConfig().getBrokerClusterName());
         ignoreRouteTopics.add(brokerController.getBrokerConfig().getBrokerName());
         scheduledExecutorService = Executors
-            .newSingleThreadScheduledExecutor(new ThreadFactoryImpl("LoadBalanceManagerScheduledThread", brokerController.getBrokerConfig()));
+            .newSingleThreadScheduledExecutor(new ThreadFactoryImpl("LoadBalanceManagerScheduledThread", brokerController.getBrokerIdentity()));
     }
 
     public void start() {

File: broker/src/main/java/org/apache/rocketmq/broker/longpolling/LmqPullRequestHoldService.java
Patch:
@@ -32,6 +32,9 @@ public LmqPullRequestHoldService(BrokerController brokerController) {
 
     @Override
     public String getServiceName() {
+        if (brokerController != null && brokerController.getBrokerConfig().isInBrokerContainer()) {
+            return this.brokerController.getBrokerIdentity().getLoggerIdentifier() + LmqPullRequestHoldService.class.getSimpleName();
+        }
         return LmqPullRequestHoldService.class.getSimpleName();
     }
 

File: broker/src/main/java/org/apache/rocketmq/broker/longpolling/PullRequestHoldService.java
Patch:
@@ -92,7 +92,7 @@ public void run() {
     @Override
     public String getServiceName() {
         if (brokerController != null && brokerController.getBrokerConfig().isInBrokerContainer()) {
-            return this.brokerController.getBrokerConfig().getLoggerIdentifier() + PullRequestHoldService.class.getSimpleName();
+            return this.brokerController.getBrokerIdentity().getLoggerIdentifier() + PullRequestHoldService.class.getSimpleName();
         }
         return PullRequestHoldService.class.getSimpleName();
     }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopBufferMergeService.java
Patch:
@@ -77,7 +77,7 @@ private boolean isShouldRunning() {
     @Override
     public String getServiceName() {
         if (this.brokerController != null && this.brokerController.getBrokerConfig().isInBrokerContainer()) {
-            return brokerController.getBrokerConfig().getLoggerIdentifier() + PopBufferMergeService.class.getSimpleName();
+            return brokerController.getBrokerIdentity().getLoggerIdentifier() + PopBufferMergeService.class.getSimpleName();
         }
         return PopBufferMergeService.class.getSimpleName();
     }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
Patch:
@@ -66,7 +66,7 @@ public PopReviveService(BrokerController brokerController, String reviveTopic, i
     @Override
     public String getServiceName() {
         if (brokerController != null && brokerController.getBrokerConfig().isInBrokerContainer()) {
-            return brokerController.getBrokerConfig().getLoggerIdentifier() + "PopReviveService_" + this.queueId;
+            return brokerController.getBrokerIdentity().getLoggerIdentifier() + "PopReviveService_" + this.queueId;
         }
         return "PopReviveService_" + this.queueId;
     }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/QueryAssignmentProcessor.java
Patch:
@@ -315,4 +315,7 @@ private RemotingCommand setMessageRequestMode(ChannelHandlerContext ctx,
         return response;
     }
 
+    public MessageRequestModeManager getMessageRequestModeManager() {
+        return messageRequestModeManager;
+    }
 }

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicQueueMappingCleanService.java
Patch:
@@ -57,8 +57,10 @@ public class TopicQueueMappingCleanService extends ServiceThread {
     private RpcClient rpcClient;
     private MessageStoreConfig messageStoreConfig;
     private BrokerConfig brokerConfig;
+    private BrokerController brokerController;
 
     public TopicQueueMappingCleanService(BrokerController brokerController) {
+        this.brokerController = brokerController;
         this.topicQueueMappingManager = brokerController.getTopicQueueMappingManager();
         this.rpcClient = brokerController.getBrokerOuterAPI().getRpcClient();
         this.messageStoreConfig = brokerController.getMessageStoreConfig();
@@ -69,7 +71,7 @@ public TopicQueueMappingCleanService(BrokerController brokerController) {
     @Override
     public String getServiceName() {
         if (this.brokerConfig.isInBrokerContainer()) {
-            return this.brokerConfig.getLoggerIdentifier() + TopicQueueMappingCleanService.class.getSimpleName();
+            return this.brokerController.getBrokerIdentity().getLoggerIdentifier() + TopicQueueMappingCleanService.class.getSimpleName();
         }
         return TopicQueueMappingCleanService.class.getSimpleName();
     }

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/AbstractTransactionalMessageCheckListener.java
Patch:
@@ -98,7 +98,7 @@ public void shutDown() {
     public synchronized void initExecutorService() {
         if (executorService == null) {
             executorService = new ThreadPoolExecutor(2, 5, 100, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(2000),
-                new ThreadFactoryImpl("Transaction-msg-check-thread", brokerController.getBrokerConfig()), new CallerRunsPolicy());
+                new ThreadFactoryImpl("Transaction-msg-check-thread", brokerController.getBrokerIdentity()), new CallerRunsPolicy());
         }
     }
 

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/TransactionalMessageCheckService.java
Patch:
@@ -34,7 +34,7 @@ public TransactionalMessageCheckService(BrokerController brokerController) {
     @Override
     public String getServiceName() {
         if (brokerController != null && brokerController.getBrokerConfig().isInBrokerContainer()) {
-            return brokerController.getBrokerConfig().getLoggerIdentifier() + TransactionalMessageCheckService.class.getSimpleName();
+            return brokerController.getBrokerIdentity().getLoggerIdentifier() + TransactionalMessageCheckService.class.getSimpleName();
         }
         return TransactionalMessageCheckService.class.getSimpleName();
     }

File: broker/src/test/java/org/apache/rocketmq/broker/BrokerOuterAPITest.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.broker.out.BrokerOuterAPI;
 import org.apache.rocketmq.common.BrokerConfig;
+import org.apache.rocketmq.common.BrokerIdentity;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.namesrv.RegisterBrokerResult;
 import org.apache.rocketmq.common.protocol.RequestCode;
@@ -171,7 +172,7 @@ public RemotingCommand answer(InvocationOnMock mock) throws Throwable {
             timeOut,
             false,
             true,
-            false);
+            new BrokerIdentity());
 
         assertTrue(registerBrokerResultList.size() > 0);
     }
@@ -202,7 +203,7 @@ public RemotingCommand answer(InvocationOnMock invocation) throws Throwable {
                 return response;
             }
         });
-        List<RegisterBrokerResult> registerBrokerResultList = brokerOuterAPI.registerBrokerAll(clusterName, brokerAddr, brokerName, brokerId, "hasServerAddr", topicConfigSerializeWrapper, Lists.<String>newArrayList(), false, timeOut, false, true, false);
+        List<RegisterBrokerResult> registerBrokerResultList = brokerOuterAPI.registerBrokerAll(clusterName, brokerAddr, brokerName, brokerId, "hasServerAddr", topicConfigSerializeWrapper, Lists.<String>newArrayList(), false, timeOut, false, true, new BrokerIdentity());
 
         assertEquals(2, registerBrokerResultList.size());
     }

File: common/src/main/java/org/apache/rocketmq/common/protocol/RequestCode.java
Patch:
@@ -214,6 +214,7 @@ public class RequestCode {
 
     public static final int QUERY_ASSIGNMENT = 400;
     public static final int SET_MESSAGE_REQUEST_MODE = 401;
+    public static final int GET_ALL_MESSAGE_REQUEST_MODE = 402;
 
     public static final int UPDATE_AND_CREATE_STATIC_TOPIC = 513;
 

File: container/src/test/java/org/apache/rocketmq/container/BrokerPreOnlineTest.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Map;
 
 import org.apache.rocketmq.broker.BrokerController;
+import org.apache.rocketmq.broker.BrokerPreOnlineService;
 import org.apache.rocketmq.broker.out.BrokerOuterAPI;
 import org.apache.rocketmq.broker.transaction.TransactionalMessageCheckService;
 import org.apache.rocketmq.common.BrokerConfig;
@@ -50,7 +51,6 @@ public class BrokerPreOnlineTest {
 
     public void init() throws Exception {
         when(brokerContainer.getBrokerOuterAPI()).thenReturn(brokerOuterAPI);
-        when(brokerContainer.getBrokerContainerConfig()).thenReturn(new BrokerContainerConfig());
 
         BrokerMemberGroup brokerMemberGroup1 = new BrokerMemberGroup();
         Map<Long, String> brokerAddrMap = new HashMap<>();
@@ -81,7 +81,7 @@ public void init() throws Exception {
 
         innerBrokerController.setTransactionalMessageCheckService(new TransactionalMessageCheckService(innerBrokerController));
 
-        Field field = InnerBrokerController.class.getDeclaredField("isIsolated");
+        Field field = BrokerController.class.getDeclaredField("isIsolated");
         field.setAccessible(true);
         field.set(innerBrokerController, true);
 

File: store/src/main/java/org/apache/rocketmq/store/AllocateMappedFileService.java
Patch:
@@ -122,7 +122,7 @@ public MappedFile putRequestAndReturnMappedFile(String nextFilePath, String next
     @Override
     public String getServiceName() {
         if (messageStore != null && messageStore.getBrokerConfig().isInBrokerContainer()) {
-            return messageStore.getBrokerConfig().getLoggerIdentifier() + AllocateMappedFileService.class.getSimpleName();
+            return messageStore.getBrokerIdentity().getLoggerIdentifier() + AllocateMappedFileService.class.getSimpleName();
         }
         return AllocateMappedFileService.class.getSimpleName();
     }

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -1250,7 +1250,7 @@ class CommitRealTimeService extends FlushCommitLogService {
         @Override
         public String getServiceName() {
             if (CommitLog.this.defaultMessageStore.getBrokerConfig().isInBrokerContainer()) {
-                return CommitLog.this.defaultMessageStore.getBrokerConfig().getLoggerIdentifier() + CommitRealTimeService.class.getSimpleName();
+                return CommitLog.this.defaultMessageStore.getBrokerIdentity().getLoggerIdentifier() + CommitRealTimeService.class.getSimpleName();
             }
             return CommitRealTimeService.class.getSimpleName();
         }

File: store/src/main/java/org/apache/rocketmq/store/ha/DefaultHAClient.java
Patch:
@@ -385,7 +385,7 @@ public void shutdown() {
     @Override
     public String getServiceName() {
         if (this.defaultMessageStore != null && this.defaultMessageStore.getBrokerConfig().isInBrokerContainer()) {
-            return this.defaultMessageStore.getBrokerConfig().getLoggerIdentifier() + DefaultHAClient.class.getSimpleName();
+            return this.defaultMessageStore.getBrokerIdentity().getLoggerIdentifier() + DefaultHAClient.class.getSimpleName();
         }
         return DefaultHAClient.class.getSimpleName();
     }

File: store/src/main/java/org/apache/rocketmq/store/ha/DefaultHAConnection.java
Patch:
@@ -177,7 +177,7 @@ public void run() {
         @Override
         public String getServiceName() {
             if (haService.getDefaultMessageStore().getBrokerConfig().isInBrokerContainer()) {
-                return haService.getDefaultMessageStore().getBrokerConfig().getLoggerIdentifier() + ReadSocketService.class.getSimpleName();
+                return haService.getDefaultMessageStore().getBrokerIdentity().getLoggerIdentifier() + ReadSocketService.class.getSimpleName();
             }
             return ReadSocketService.class.getSimpleName();
         }

File: store/src/main/java/org/apache/rocketmq/store/ha/GroupTransferService.java
Patch:
@@ -133,7 +133,7 @@ protected void onWaitEnd() {
     @Override
     public String getServiceName() {
         if (defaultMessageStore != null && defaultMessageStore.getBrokerConfig().isInBrokerContainer()) {
-            return defaultMessageStore.getBrokerConfig().getLoggerIdentifier() + GroupTransferService.class.getSimpleName();
+            return defaultMessageStore.getBrokerIdentity().getLoggerIdentifier() + GroupTransferService.class.getSimpleName();
         }
         return GroupTransferService.class.getSimpleName();
     }

File: store/src/main/java/org/apache/rocketmq/store/ha/HAConnectionStateNotificationService.java
Patch:
@@ -47,7 +47,7 @@ public HAConnectionStateNotificationService(HAService haService, DefaultMessageS
     @Override
     public String getServiceName() {
         if (defaultMessageStore != null && defaultMessageStore.getBrokerConfig().isInBrokerContainer()) {
-            return defaultMessageStore.getBrokerConfig().getLoggerIdentifier() + HAConnectionStateNotificationService.class.getSimpleName();
+            return defaultMessageStore.getBrokerIdentity().getLoggerIdentifier() + HAConnectionStateNotificationService.class.getSimpleName();
         }
         return HAConnectionStateNotificationService.class.getSimpleName();
     }

File: store/src/test/java/org/apache/rocketmq/store/ha/HAServerTest.java
Patch:
@@ -267,7 +267,7 @@ private DefaultMessageStore mockMessageStore() throws IOException {
         doReturn(new SystemClock()).when(messageStore).getSystemClock();
         doAnswer(invocation -> System.currentTimeMillis()).when(messageStore).now();
         doReturn(this.storeConfig).when(messageStore).getMessageStoreConfig();
-//        doReturn(new BrokerConfig()).when(messageStore).getBrokerConfig();
+        doReturn(new BrokerConfig()).when(messageStore).getBrokerConfig();
         doReturn(true).when(messageStore).isOffsetAligned(anyLong());
 //        doReturn(new PutMessageResult(PutMessageStatus.PUT_OK, new AppendMessageResult(AppendMessageStatus.PUT_OK))).when(messageStore).sendMsgBack(anyLong());
         doReturn(true).when(messageStore).truncateFiles(anyLong());

File: container/src/test/java/org/apache/rocketmq/container/BrokerPreOnlineTest.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Map;
 
 import org.apache.rocketmq.broker.BrokerController;
+import org.apache.rocketmq.broker.BrokerPreOnlineService;
 import org.apache.rocketmq.broker.out.BrokerOuterAPI;
 import org.apache.rocketmq.broker.transaction.TransactionalMessageCheckService;
 import org.apache.rocketmq.common.BrokerConfig;
@@ -50,7 +51,6 @@ public class BrokerPreOnlineTest {
 
     public void init() throws Exception {
         when(brokerContainer.getBrokerOuterAPI()).thenReturn(brokerOuterAPI);
-        when(brokerContainer.getBrokerContainerConfig()).thenReturn(new BrokerContainerConfig());
 
         BrokerMemberGroup brokerMemberGroup1 = new BrokerMemberGroup();
         Map<Long, String> brokerAddrMap = new HashMap<>();
@@ -81,7 +81,7 @@ public void init() throws Exception {
 
         innerBrokerController.setTransactionalMessageCheckService(new TransactionalMessageCheckService(innerBrokerController));
 
-        Field field = InnerBrokerController.class.getDeclaredField("isIsolated");
+        Field field = BrokerController.class.getDeclaredField("isIsolated");
         field.setAccessible(true);
         field.set(innerBrokerController, true);
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java
Patch:
@@ -176,6 +176,7 @@ public void notifyMessageArriving(final String topic, final String cid, final in
         PopRequest popRequest = remotingCommands.pollFirst();
         //clean inactive channel
         while (popRequest != null && !popRequest.getChannel().isActive()) {
+            totalPollingNum.decrementAndGet();
             popRequest = remotingCommands.pollFirst();
         }
 

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/NamesrvController.java
Patch:
@@ -52,7 +52,6 @@
 import org.apache.rocketmq.remoting.netty.TlsSystemConfig;
 import org.apache.rocketmq.srvutil.FileWatchService;
 
-
 public class NamesrvController {
     private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
     private static final InternalLogger WATER_MARK_LOG = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_WATER_MARK_LOGGER_NAME);

File: openmessaging/src/main/java/io/openmessaging/rocketmq/utils/BeanUtils.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.rocketmq.logging.InternalLogger;
 
 public final class BeanUtils {
-    final static InternalLogger log = ClientLogger.getLog();
+    static InternalLogger log = ClientLogger.getLog();
 
     /**
      * Maps primitive {@code Class}es to their corresponding wrapper {@code Class}.

File: common/src/main/java/org/apache/rocketmq/common/constant/LoggerName.java
Patch:
@@ -19,6 +19,7 @@
 public class LoggerName {
     public static final String FILTERSRV_LOGGER_NAME = "RocketmqFiltersrv";
     public static final String NAMESRV_LOGGER_NAME = "RocketmqNamesrv";
+    public static final String CONTROLLER_LOGGER_NAME = "RocketmqController";
     public static final String NAMESRV_WATER_MARK_LOGGER_NAME = "RocketmqNamesrvWaterMark";
     public static final String BROKER_LOGGER_NAME = "RocketmqBroker";
     public static final String BROKER_CONSOLE_NAME = "RocketmqConsole";

File: store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java
Patch:
@@ -101,6 +101,7 @@ public DLedgerCommitLog(final DefaultMessageStore defaultMessageStore) {
         dLedgerConfig.setFileReservedHours(defaultMessageStore.getMessageStoreConfig().getFileReservedTime() + 1);
         dLedgerConfig.setPreferredLeaderId(defaultMessageStore.getMessageStoreConfig().getPreferredLeaderId());
         dLedgerConfig.setEnableBatchPush(defaultMessageStore.getMessageStoreConfig().isEnableBatchPush());
+        dLedgerConfig.setDiskSpaceRatioToCheckExpired(defaultMessageStore.getMessageStoreConfig().getDiskMaxUsedSpaceRatio() / 100f);
 
         id = Integer.parseInt(dLedgerConfig.getSelfId().substring(1)) + 1;
         dLedgerServer = new DLedgerServer(dLedgerConfig);

File: client/src/main/java/org/apache/rocketmq/client/trace/AsyncTraceDispatcher.java
Patch:
@@ -438,7 +438,7 @@ private Set<String> tryGetMessageQueueBrokerSet(DefaultMQProducerImpl producer,
             TopicPublishInfo topicPublishInfo = producer.getTopicPublishInfoTable().get(topic);
             if (null == topicPublishInfo || !topicPublishInfo.ok()) {
                 producer.getTopicPublishInfoTable().putIfAbsent(topic, new TopicPublishInfo());
-                producer.getmQClientFactory().updateTopicRouteInfoFromNameServer(topic);
+                producer.getMqClientFactory().updateTopicRouteInfoFromNameServer(topic);
                 topicPublishInfo = producer.getTopicPublishInfoTable().get(topic);
             }
             if (topicPublishInfo.isHaveTopicRouterInfo() || topicPublishInfo.ok()) {

File: client/src/main/java/org/apache/rocketmq/client/trace/hook/EndTransactionTraceHookImpl.java
Patch:
@@ -63,7 +63,7 @@ public void endTransaction(EndTransactionContext context) {
         traceBean.setKeys(context.getMessage().getKeys());
         traceBean.setStoreHost(context.getBrokerAddr());
         traceBean.setMsgType(MessageType.Trans_msg_Commit);
-        traceBean.setClientHost(((AsyncTraceDispatcher)localDispatcher).getHostProducer().getmQClientFactory().getClientId());
+        traceBean.setClientHost(((AsyncTraceDispatcher)localDispatcher).getHostProducer().getMqClientFactory().getClientId());
         traceBean.setMsgId(context.getMsgId());
         traceBean.setTransactionState(context.getTransactionState());
         traceBean.setTransactionId(context.getTransactionId());

File: client/src/test/java/org/apache/rocketmq/client/producer/DefaultMQProducerTest.java
Patch:
@@ -102,7 +102,7 @@ public void init() throws Exception {
         field.setAccessible(true);
         field.set(mQClientFactory, mQClientAPIImpl);
 
-        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
 
         when(mQClientAPIImpl.sendMessage(anyString(), anyString(), any(Message.class), any(SendMessageRequestHeader.class), anyLong(), any(CommunicationMode.class),
             nullable(SendMessageContext.class), any(DefaultMQProducerImpl.class))).thenCallRealMethod();
@@ -358,7 +358,7 @@ public void testSetCallbackExecutor() throws MQClientException {
         producer.setCallbackExecutor(customized);
 
         NettyRemotingClient remotingClient = (NettyRemotingClient) producer.getDefaultMQProducerImpl()
-            .getmQClientFactory().getMQClientAPIImpl().getRemotingClient();
+            .getMqClientFactory().getMQClientAPIImpl().getRemotingClient();
 
         assertThat(remotingClient.getCallbackExecutor()).isEqualTo(customized);
     }

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQConsumerWithTraceTest.java
Patch:
@@ -217,7 +217,7 @@ public void terminate() {
 
     @Test
     public void testPullMessage_WithTrace_Success() throws InterruptedException, RemotingException, MQBrokerException, MQClientException {
-        traceProducer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
+        traceProducer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
 
         final CountDownLatch countDownLatch = new CountDownLatch(1);
         final AtomicReference<MessageExt> messageAtomic = new AtomicReference<MessageExt>();

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQLitePullConsumerWithTraceTest.java
Patch:
@@ -218,7 +218,7 @@ private void initDefaultLitePullConsumer(DefaultLitePullConsumer litePullConsume
         field.setAccessible(true);
         field.set(litePullConsumerImpl, offsetStore);
 
-        traceProducer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
+        traceProducer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
 
         when(mQClientFactory.getMQClientAPIImpl().pullMessage(anyString(), any(PullMessageRequestHeader.class),
             anyLong(), any(CommunicationMode.class), nullable(PullCallback.class)))

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQProducerWithOpenTracingTest.java
Patch:
@@ -100,7 +100,7 @@ public void init() throws Exception {
         field.setAccessible(true);
         field.set(mQClientFactory, mQClientAPIImpl);
 
-        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
 
         when(mQClientAPIImpl.sendMessage(anyString(), anyString(), any(Message.class), any(SendMessageRequestHeader.class), anyLong(), any(CommunicationMode.class),
             nullable(SendMessageContext.class), any(DefaultMQProducerImpl.class))).thenCallRealMethod();
@@ -112,7 +112,7 @@ public void init() throws Exception {
 
     @Test
     public void testSendMessageSync_WithTrace_Success() throws RemotingException, InterruptedException, MQBrokerException, MQClientException {
-        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, producer.getDefaultMQProducerImpl());
         when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());
         producer.send(message);
         assertThat(tracer.finishedSpans().size()).isEqualTo(1);

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQProducerWithTraceTest.java
Patch:
@@ -109,7 +109,7 @@ public void init() throws Exception {
         field.setAccessible(true);
         field.set(mQClientFactory, mQClientAPIImpl);
 
-        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
 
         when(mQClientAPIImpl.sendMessage(anyString(), anyString(), any(Message.class), any(SendMessageRequestHeader.class), anyLong(), any(CommunicationMode.class),
             nullable(SendMessageContext.class), any(DefaultMQProducerImpl.class))).thenCallRealMethod();
@@ -121,7 +121,7 @@ public void init() throws Exception {
 
     @Test
     public void testSendMessageSync_WithTrace_Success() throws RemotingException, InterruptedException, MQBrokerException, MQClientException {
-        traceProducer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
+        traceProducer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
         when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());
         final CountDownLatch countDownLatch = new CountDownLatch(1);
         try {

File: client/src/test/java/org/apache/rocketmq/client/trace/TransactionMQProducerWithOpenTracingTest.java
Patch:
@@ -118,7 +118,7 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
         field.setAccessible(true);
         field.set(mQClientFactory, mQClientAPIImpl);
 
-        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
 
         when(mQClientAPIImpl.sendMessage(anyString(), anyString(), any(Message.class), any(SendMessageRequestHeader.class), anyLong(), any(CommunicationMode.class),
             nullable(SendMessageContext.class), any(DefaultMQProducerImpl.class))).thenCallRealMethod();
@@ -130,7 +130,7 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
 
     @Test
     public void testSendMessageSync_WithTrace_Success() throws RemotingException, InterruptedException, MQBrokerException, MQClientException {
-        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, producer.getDefaultMQProducerImpl());
         when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());
         producer.sendMessageInTransaction(message, null);
 

File: client/src/test/java/org/apache/rocketmq/client/trace/TransactionMQProducerWithTraceTest.java
Patch:
@@ -128,7 +128,7 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
         field.setAccessible(true);
         field.set(mQClientFactory, mQClientAPIImpl);
 
-        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
 
         Field fieldHooks = DefaultMQProducerImpl.class.getDeclaredField("endTransactionHookList");
         fieldHooks.setAccessible(true);
@@ -146,7 +146,7 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
 
     @Test
     public void testSendMessageSync_WithTrace_Success() throws RemotingException, InterruptedException, MQBrokerException, MQClientException {
-        traceProducer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
+        traceProducer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
         when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());
         final AtomicReference<EndTransactionContext> context = new AtomicReference<EndTransactionContext>();
         doAnswer(new Answer() {

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -50,6 +50,7 @@ public class MixAll {
     public static final String ROCKETMQ_HOME_PROPERTY = "rocketmq.home.dir";
     public static final String NAMESRV_ADDR_ENV = "NAMESRV_ADDR";
     public static final String NAMESRV_ADDR_PROPERTY = "rocketmq.namesrv.addr";
+    public static final String MESSAGE_COMPRESS_TYPE = "rocketmq.message.compressType";
     public static final String MESSAGE_COMPRESS_LEVEL = "rocketmq.message.compressLevel";
     public static final String DEFAULT_NAMESRV_ADDR_LOOKUP = "jmenv.tbsite.net";
     public static final String WS_DOMAIN_NAME = System.getProperty("rocketmq.namesrv.domain", DEFAULT_NAMESRV_ADDR_LOOKUP);

File: srvutil/src/main/java/org/apache/rocketmq/srvutil/FileWatchService.java
Patch:
@@ -23,7 +23,6 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.security.MessageDigest;
-import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
 import java.util.List;
 import org.apache.commons.lang3.StringUtils;
@@ -89,7 +88,7 @@ public void run() {
         log.info(this.getServiceName() + " service end");
     }
 
-    private String hash(String filePath) throws IOException, NoSuchAlgorithmException {
+    private String hash(String filePath) throws IOException {
         Path path = Paths.get(filePath);
         md.update(Files.readAllBytes(path));
         byte[] hash = md.digest();

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -547,8 +547,6 @@ private RemotingCommand handlePutMessageResult(PutMessageResult putMessageResult
             responseHeader.setQueueId(queueIdInt);
             responseHeader.setQueueOffset(putMessageResult.getAppendMessageResult().getLogicsOffset());
 
-            doResponse(ctx, request, response);
-
             if (hasSendMessageHook()) {
                 sendMessageContext.setMsgId(responseHeader.getMsgId());
                 sendMessageContext.setQueueId(responseHeader.getQueueId());
@@ -563,7 +561,7 @@ private RemotingCommand handlePutMessageResult(PutMessageResult putMessageResult
                 sendMessageContext.setCommercialSendSize(wroteSize);
                 sendMessageContext.setCommercialOwner(owner);
             }
-            return null;
+            return response;
         } else {
             if (hasSendMessageHook()) {
                 int wroteSize = request.getBody().length;

File: example/src/main/java/org/apache/rocketmq/example/benchmark/BatchProducer.java
Patch:
@@ -47,13 +47,16 @@
 import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingException;
+import org.apache.rocketmq.remoting.protocol.RemotingCommand;
+import org.apache.rocketmq.remoting.protocol.SerializeType;
 import org.apache.rocketmq.srvutil.ServerUtil;
 
 public class BatchProducer {
 
     private static byte[] msgBody;
 
     public static void main(String[] args) throws MQClientException {
+        System.setProperty(RemotingCommand.SERIALIZE_TYPE_PROPERTY, SerializeType.ROCKETMQ.name());
 
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         CommandLine commandLine = ServerUtil.parseCmdLine("benchmarkBatchProducer", args, buildCommandlineOptions(options), new PosixParser());

File: example/src/main/java/org/apache/rocketmq/example/benchmark/Consumer.java
Patch:
@@ -34,6 +34,8 @@
 import org.apache.rocketmq.common.filter.ExpressionType;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.remoting.RPCHook;
+import org.apache.rocketmq.remoting.protocol.RemotingCommand;
+import org.apache.rocketmq.remoting.protocol.SerializeType;
 import org.apache.rocketmq.srvutil.ServerUtil;
 
 import java.io.IOException;
@@ -49,6 +51,7 @@
 public class Consumer {
 
     public static void main(String[] args) throws MQClientException, IOException {
+        System.setProperty(RemotingCommand.SERIALIZE_TYPE_PROPERTY, SerializeType.ROCKETMQ.name());
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         CommandLine commandLine = ServerUtil.parseCmdLine("benchmarkConsumer", args, buildCommandlineOptions(options), new PosixParser());
         if (null == commandLine) {

File: example/src/main/java/org/apache/rocketmq/example/benchmark/Producer.java
Patch:
@@ -36,6 +36,8 @@
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingException;
+import org.apache.rocketmq.remoting.protocol.RemotingCommand;
+import org.apache.rocketmq.remoting.protocol.SerializeType;
 import org.apache.rocketmq.srvutil.ServerUtil;
 
 import java.util.Arrays;
@@ -56,6 +58,7 @@ public class Producer {
     private static final int SLEEP_FOR_A_WHILE = 100;
 
     public static void main(String[] args) throws MQClientException {
+        System.setProperty(RemotingCommand.SERIALIZE_TYPE_PROPERTY, SerializeType.ROCKETMQ.name());
 
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         CommandLine commandLine = ServerUtil.parseCmdLine("benchmarkProducer", args, buildCommandlineOptions(options), new PosixParser());

File: example/src/main/java/org/apache/rocketmq/example/benchmark/TransactionProducer.java
Patch:
@@ -32,6 +32,8 @@
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.remoting.RPCHook;
+import org.apache.rocketmq.remoting.protocol.RemotingCommand;
+import org.apache.rocketmq.remoting.protocol.SerializeType;
 import org.apache.rocketmq.srvutil.ServerUtil;
 
 import java.io.UnsupportedEncodingException;
@@ -61,6 +63,7 @@ public class TransactionProducer {
     static final int MAX_CHECK_RESULT_IN_MSG = 20;
 
     public static void main(String[] args) throws MQClientException, UnsupportedEncodingException {
+        System.setProperty(RemotingCommand.SERIALIZE_TYPE_PROPERTY, SerializeType.ROCKETMQ.name());
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         CommandLine commandLine = ServerUtil.parseCmdLine("TransactionProducer", args, buildCommandlineOptions(options), new PosixParser());
         TxSendConfig config = new TxSendConfig();

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyEncoder.java
Patch:
@@ -20,7 +20,6 @@
 import io.netty.channel.ChannelHandler;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToByteEncoder;
-import java.nio.ByteBuffer;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.apache.rocketmq.logging.InternalLogger;
@@ -35,8 +34,7 @@ public class NettyEncoder extends MessageToByteEncoder<RemotingCommand> {
     public void encode(ChannelHandlerContext ctx, RemotingCommand remotingCommand, ByteBuf out)
         throws Exception {
         try {
-            ByteBuffer header = remotingCommand.encodeHeader();
-            out.writeBytes(header);
+            remotingCommand.fastEncodeHeader(out);
             byte[] body = remotingCommand.getBody();
             if (body != null) {
                 out.writeBytes(body);

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -209,6 +209,7 @@ public void callback(RemotingCommand response) {
                                     if (response != null) {
                                         response.setOpaque(opaque);
                                         response.markResponseType();
+                                        response.setSerializeTypeCurrentRPC(cmd.getSerializeTypeCurrentRPC());
                                         try {
                                             ctx.writeAndFlush(response);
                                         } catch (Throwable e) {

File: store/src/test/java/org/apache/rocketmq/store/schedule/ScheduleMessageServiceTest.java
Patch:
@@ -40,9 +40,9 @@
 import java.util.UUID;
 import java.util.concurrent.TimeUnit;
 
-import static org.apache.rocketmq.store.stats.BrokerStatsManager.BROKER_PUT_NUMS;
-import static org.apache.rocketmq.store.stats.BrokerStatsManager.TOPIC_PUT_NUMS;
-import static org.apache.rocketmq.store.stats.BrokerStatsManager.TOPIC_PUT_SIZE;
+import static org.apache.rocketmq.common.stats.Stats.BROKER_PUT_NUMS;
+import static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_NUMS;
+import static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_SIZE;
 import static org.assertj.core.api.Assertions.assertThat;
 
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/export/ExportMetricsCommand.java
Patch:
@@ -39,11 +39,11 @@
 import org.apache.rocketmq.common.protocol.body.SubscriptionGroupWrapper;
 import org.apache.rocketmq.common.protocol.body.TopicConfigSerializeWrapper;
 import org.apache.rocketmq.common.protocol.route.BrokerData;
+import org.apache.rocketmq.common.stats.Stats;
 import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingException;
-import org.apache.rocketmq.store.stats.BrokerStatsManager;
 import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
 import org.apache.rocketmq.tools.command.SubCommand;
 import org.apache.rocketmq.tools.command.SubCommandException;
@@ -186,15 +186,15 @@ private Map<String, Object> getRuntimeQuota(KVTable kvTable, DefaultMQAdminExt d
 
         try {
             transStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr,
-                BrokerStatsManager.TOPIC_PUT_NUMS,
+                Stats.TOPIC_PUT_NUMS,
                 TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC);
         } catch (MQClientException e) {
         }
 
         BrokerStatsData scheduleStatsData = null;
         try {
             scheduleStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr,
-                BrokerStatsManager.TOPIC_PUT_NUMS, TopicValidator.RMQ_SYS_SCHEDULE_TOPIC);
+                Stats.TOPIC_PUT_NUMS, TopicValidator.RMQ_SYS_SCHEDULE_TOPIC);
         } catch (MQClientException e) {
         }
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/stats/StatsAllSubCommand.java
Patch:
@@ -30,9 +30,9 @@
 import org.apache.rocketmq.common.protocol.body.TopicList;
 import org.apache.rocketmq.common.protocol.route.BrokerData;
 import org.apache.rocketmq.common.protocol.route.TopicRouteData;
+import org.apache.rocketmq.common.stats.Stats;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingException;
-import org.apache.rocketmq.store.stats.BrokerStatsManager;
 import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
 import org.apache.rocketmq.tools.command.SubCommand;
 import org.apache.rocketmq.tools.command.SubCommandException;
@@ -52,7 +52,7 @@ public static void printTopicDetail(final DefaultMQAdminExt admin, final String
             String masterAddr = bd.getBrokerAddrs().get(MixAll.MASTER_ID);
             if (masterAddr != null) {
                 try {
-                    BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, BrokerStatsManager.TOPIC_PUT_NUMS, topic);
+                    BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, Stats.TOPIC_PUT_NUMS, topic);
                     inTPS += bsd.getStatsMinute().getTps();
                     inMsgCntToday += compute24HourSum(bsd);
                 } catch (Exception e) {
@@ -71,7 +71,7 @@ public static void printTopicDetail(final DefaultMQAdminExt admin, final String
                     if (masterAddr != null) {
                         try {
                             String statsKey = String.format("%s@%s", topic, group);
-                            BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, BrokerStatsManager.GROUP_GET_NUMS, statsKey);
+                            BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, Stats.GROUP_GET_NUMS, statsKey);
                             outTPS += bsd.getStatsMinute().getTps();
                             outMsgCntToday += compute24HourSum(bsd);
                         } catch (Exception e) {

File: apis/src/main/java/org/apache/rocketmq/apis/consumer/MessageListener.java
Patch:
@@ -52,5 +52,5 @@ public interface MessageListener {
    * @return {@link ConsumeResult#SUCCESS} if <code>message</code> is properly processed; {@link ConsumeResult#FAILURE}
    *         otherwise.
    */
-  ConsumeResult onMessage(MessageView message);
+    ConsumeResult onMessage(MessageView message);
 }

File: broker/src/main/java/org/apache/rocketmq/broker/client/ClientHousekeepingService.java
Patch:
@@ -36,7 +36,7 @@ public class ClientHousekeepingService implements ChannelEventListener {
     public ClientHousekeepingService(final BrokerController brokerController) {
         this.brokerController = brokerController;
         scheduledExecutorService = new ScheduledThreadPoolExecutor(1,
-            new ThreadFactoryImpl("ClientHousekeepingScheduledThread", brokerController.getBrokerConfig()));
+            new ThreadFactoryImpl("ClientHousekeepingScheduledThread", brokerController.getBrokerIdentity()));
     }
 
     public void start() {

File: broker/src/main/java/org/apache/rocketmq/broker/dledger/DLedgerRoleChangeHandler.java
Patch:
@@ -36,7 +36,7 @@
 public class DLedgerRoleChangeHandler implements DLedgerLeaderElector.RoleChangeHandler {
 
     private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
-    private ExecutorService executorService = Executors.newSingleThreadExecutor(new ThreadFactoryImpl("DLegerRoleChangeHandler_"));
+    private ExecutorService executorService;
     private BrokerController brokerController;
     private DefaultMessageStore messageStore;
     private DLedgerCommitLog dLedgerCommitLog;
@@ -48,6 +48,8 @@ public DLedgerRoleChangeHandler(BrokerController brokerController, DefaultMessag
         this.messageStore = messageStore;
         this.dLedgerCommitLog = (DLedgerCommitLog) messageStore.getCommitLog();
         this.dLegerServer = dLedgerCommitLog.getdLedgerServer();
+        this.executorService = Executors.newSingleThreadExecutor(
+            new ThreadFactoryImpl("DLegerRoleChangeHandler_", brokerController.getBrokerIdentity()));
     }
 
     @Override public void handle(long term, MemberState.Role role) {

File: broker/src/main/java/org/apache/rocketmq/broker/loadbalance/AssignmentManager.java
Patch:
@@ -65,7 +65,7 @@ public AssignmentManager(BrokerController brokerController) {
         ignoreRouteTopics.add(brokerController.getBrokerConfig().getBrokerClusterName());
         ignoreRouteTopics.add(brokerController.getBrokerConfig().getBrokerName());
         scheduledExecutorService = Executors
-            .newSingleThreadScheduledExecutor(new ThreadFactoryImpl("LoadBalanceManagerScheduledThread", brokerController.getBrokerConfig()));
+            .newSingleThreadScheduledExecutor(new ThreadFactoryImpl("LoadBalanceManagerScheduledThread", brokerController.getBrokerIdentity()));
     }
 
     public void start() {

File: broker/src/main/java/org/apache/rocketmq/broker/longpolling/LmqPullRequestHoldService.java
Patch:
@@ -32,6 +32,9 @@ public LmqPullRequestHoldService(BrokerController brokerController) {
 
     @Override
     public String getServiceName() {
+        if (brokerController != null && brokerController.getBrokerConfig().isInBrokerContainer()) {
+            return this.brokerController.getBrokerIdentity().getLoggerIdentifier() + LmqPullRequestHoldService.class.getSimpleName();
+        }
         return LmqPullRequestHoldService.class.getSimpleName();
     }
 

File: broker/src/main/java/org/apache/rocketmq/broker/longpolling/PullRequestHoldService.java
Patch:
@@ -92,7 +92,7 @@ public void run() {
     @Override
     public String getServiceName() {
         if (brokerController != null && brokerController.getBrokerConfig().isInBrokerContainer()) {
-            return this.brokerController.getBrokerConfig().getLoggerIdentifier() + PullRequestHoldService.class.getSimpleName();
+            return this.brokerController.getBrokerIdentity().getLoggerIdentifier() + PullRequestHoldService.class.getSimpleName();
         }
         return PullRequestHoldService.class.getSimpleName();
     }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopBufferMergeService.java
Patch:
@@ -77,7 +77,7 @@ private boolean isShouldRunning() {
     @Override
     public String getServiceName() {
         if (this.brokerController != null && this.brokerController.getBrokerConfig().isInBrokerContainer()) {
-            return brokerController.getBrokerConfig().getLoggerIdentifier() + PopBufferMergeService.class.getSimpleName();
+            return brokerController.getBrokerIdentity().getLoggerIdentifier() + PopBufferMergeService.class.getSimpleName();
         }
         return PopBufferMergeService.class.getSimpleName();
     }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
Patch:
@@ -66,7 +66,7 @@ public PopReviveService(BrokerController brokerController, String reviveTopic, i
     @Override
     public String getServiceName() {
         if (brokerController != null && brokerController.getBrokerConfig().isInBrokerContainer()) {
-            return brokerController.getBrokerConfig().getLoggerIdentifier() + "PopReviveService_" + this.queueId;
+            return brokerController.getBrokerIdentity().getLoggerIdentifier() + "PopReviveService_" + this.queueId;
         }
         return "PopReviveService_" + this.queueId;
     }

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicQueueMappingCleanService.java
Patch:
@@ -57,8 +57,10 @@ public class TopicQueueMappingCleanService extends ServiceThread {
     private RpcClient rpcClient;
     private MessageStoreConfig messageStoreConfig;
     private BrokerConfig brokerConfig;
+    private BrokerController brokerController;
 
     public TopicQueueMappingCleanService(BrokerController brokerController) {
+        this.brokerController = brokerController;
         this.topicQueueMappingManager = brokerController.getTopicQueueMappingManager();
         this.rpcClient = brokerController.getBrokerOuterAPI().getRpcClient();
         this.messageStoreConfig = brokerController.getMessageStoreConfig();
@@ -69,7 +71,7 @@ public TopicQueueMappingCleanService(BrokerController brokerController) {
     @Override
     public String getServiceName() {
         if (this.brokerConfig.isInBrokerContainer()) {
-            return this.brokerConfig.getLoggerIdentifier() + TopicQueueMappingCleanService.class.getSimpleName();
+            return this.brokerController.getBrokerIdentity().getLoggerIdentifier() + TopicQueueMappingCleanService.class.getSimpleName();
         }
         return TopicQueueMappingCleanService.class.getSimpleName();
     }

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/AbstractTransactionalMessageCheckListener.java
Patch:
@@ -98,7 +98,7 @@ public void shutDown() {
     public synchronized void initExecutorService() {
         if (executorService == null) {
             executorService = new ThreadPoolExecutor(2, 5, 100, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(2000),
-                new ThreadFactoryImpl("Transaction-msg-check-thread", brokerController.getBrokerConfig()), new CallerRunsPolicy());
+                new ThreadFactoryImpl("Transaction-msg-check-thread", brokerController.getBrokerIdentity()), new CallerRunsPolicy());
         }
     }
 

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/TransactionalMessageCheckService.java
Patch:
@@ -34,7 +34,7 @@ public TransactionalMessageCheckService(BrokerController brokerController) {
     @Override
     public String getServiceName() {
         if (brokerController != null && brokerController.getBrokerConfig().isInBrokerContainer()) {
-            return brokerController.getBrokerConfig().getLoggerIdentifier() + TransactionalMessageCheckService.class.getSimpleName();
+            return brokerController.getBrokerIdentity().getLoggerIdentifier() + TransactionalMessageCheckService.class.getSimpleName();
         }
         return TransactionalMessageCheckService.class.getSimpleName();
     }

File: broker/src/test/java/org/apache/rocketmq/broker/BrokerOuterAPITest.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.broker.out.BrokerOuterAPI;
 import org.apache.rocketmq.common.BrokerConfig;
+import org.apache.rocketmq.common.BrokerIdentity;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.namesrv.RegisterBrokerResult;
 import org.apache.rocketmq.common.protocol.RequestCode;
@@ -171,7 +172,7 @@ public RemotingCommand answer(InvocationOnMock mock) throws Throwable {
             timeOut,
             false,
             true,
-            false);
+            new BrokerIdentity());
 
         assertTrue(registerBrokerResultList.size() > 0);
     }
@@ -202,7 +203,7 @@ public RemotingCommand answer(InvocationOnMock invocation) throws Throwable {
                 return response;
             }
         });
-        List<RegisterBrokerResult> registerBrokerResultList = brokerOuterAPI.registerBrokerAll(clusterName, brokerAddr, brokerName, brokerId, "hasServerAddr", topicConfigSerializeWrapper, Lists.<String>newArrayList(), false, timeOut, false, true, false);
+        List<RegisterBrokerResult> registerBrokerResultList = brokerOuterAPI.registerBrokerAll(clusterName, brokerAddr, brokerName, brokerId, "hasServerAddr", topicConfigSerializeWrapper, Lists.<String>newArrayList(), false, timeOut, false, true, new BrokerIdentity());
 
         assertEquals(2, registerBrokerResultList.size());
     }

File: container/src/main/java/org/apache/rocketmq/container/BrokerPreOnlineService.java
Patch:
@@ -53,7 +53,7 @@ public BrokerPreOnlineService(InnerBrokerController brokerController) {
     @Override
     public String getServiceName() {
         if (this.brokerController != null && this.brokerController.getBrokerConfig().isInBrokerContainer()) {
-            return brokerController.getBrokerConfig().getLoggerIdentifier() + BrokerPreOnlineService.class.getSimpleName();
+            return brokerController.getBrokerIdentity().getLoggerIdentifier() + BrokerPreOnlineService.class.getSimpleName();
         }
         return BrokerPreOnlineService.class.getSimpleName();
     }

File: store/src/main/java/org/apache/rocketmq/store/AllocateMappedFileService.java
Patch:
@@ -122,7 +122,7 @@ public MappedFile putRequestAndReturnMappedFile(String nextFilePath, String next
     @Override
     public String getServiceName() {
         if (messageStore != null && messageStore.getBrokerConfig().isInBrokerContainer()) {
-            return messageStore.getBrokerConfig().getLoggerIdentifier() + AllocateMappedFileService.class.getSimpleName();
+            return messageStore.getBrokerIdentity().getLoggerIdentifier() + AllocateMappedFileService.class.getSimpleName();
         }
         return AllocateMappedFileService.class.getSimpleName();
     }

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -1250,7 +1250,7 @@ class CommitRealTimeService extends FlushCommitLogService {
         @Override
         public String getServiceName() {
             if (CommitLog.this.defaultMessageStore.getBrokerConfig().isInBrokerContainer()) {
-                return CommitLog.this.defaultMessageStore.getBrokerConfig().getLoggerIdentifier() + CommitRealTimeService.class.getSimpleName();
+                return CommitLog.this.defaultMessageStore.getBrokerIdentity().getLoggerIdentifier() + CommitRealTimeService.class.getSimpleName();
             }
             return CommitRealTimeService.class.getSimpleName();
         }

File: store/src/main/java/org/apache/rocketmq/store/ha/DefaultHAClient.java
Patch:
@@ -385,7 +385,7 @@ public void shutdown() {
     @Override
     public String getServiceName() {
         if (this.defaultMessageStore != null && this.defaultMessageStore.getBrokerConfig().isInBrokerContainer()) {
-            return this.defaultMessageStore.getBrokerConfig().getLoggerIdentifier() + DefaultHAClient.class.getSimpleName();
+            return this.defaultMessageStore.getBrokerIdentity().getLoggerIdentifier() + DefaultHAClient.class.getSimpleName();
         }
         return DefaultHAClient.class.getSimpleName();
     }

File: store/src/main/java/org/apache/rocketmq/store/ha/DefaultHAConnection.java
Patch:
@@ -177,7 +177,7 @@ public void run() {
         @Override
         public String getServiceName() {
             if (haService.getDefaultMessageStore().getBrokerConfig().isInBrokerContainer()) {
-                return haService.getDefaultMessageStore().getBrokerConfig().getLoggerIdentifier() + ReadSocketService.class.getSimpleName();
+                return haService.getDefaultMessageStore().getBrokerIdentity().getLoggerIdentifier() + ReadSocketService.class.getSimpleName();
             }
             return ReadSocketService.class.getSimpleName();
         }

File: store/src/main/java/org/apache/rocketmq/store/ha/DefaultHAService.java
Patch:
@@ -331,7 +331,7 @@ public void run() {
         @Override
         public String getServiceName() {
             if (defaultMessageStore.getBrokerConfig().isInBrokerContainer()) {
-                return defaultMessageStore.getBrokerConfig().getLoggerIdentifier() + AcceptSocketService.class.getSimpleName();
+                return defaultMessageStore.getBrokerIdentity().getLoggerIdentifier() + AcceptSocketService.class.getSimpleName();
             }
             return AcceptSocketService.class.getSimpleName();
         }

File: store/src/main/java/org/apache/rocketmq/store/ha/GroupTransferService.java
Patch:
@@ -133,7 +133,7 @@ protected void onWaitEnd() {
     @Override
     public String getServiceName() {
         if (defaultMessageStore != null && defaultMessageStore.getBrokerConfig().isInBrokerContainer()) {
-            return defaultMessageStore.getBrokerConfig().getLoggerIdentifier() + GroupTransferService.class.getSimpleName();
+            return defaultMessageStore.getBrokerIdentity().getLoggerIdentifier() + GroupTransferService.class.getSimpleName();
         }
         return GroupTransferService.class.getSimpleName();
     }

File: store/src/main/java/org/apache/rocketmq/store/ha/HAConnectionStateNotificationService.java
Patch:
@@ -47,7 +47,7 @@ public HAConnectionStateNotificationService(HAService haService, DefaultMessageS
     @Override
     public String getServiceName() {
         if (defaultMessageStore != null && defaultMessageStore.getBrokerConfig().isInBrokerContainer()) {
-            return defaultMessageStore.getBrokerConfig().getLoggerIdentifier() + HAConnectionStateNotificationService.class.getSimpleName();
+            return defaultMessageStore.getBrokerIdentity().getLoggerIdentifier() + HAConnectionStateNotificationService.class.getSimpleName();
         }
         return HAConnectionStateNotificationService.class.getSimpleName();
     }

File: store/src/test/java/org/apache/rocketmq/store/ha/HAServerTest.java
Patch:
@@ -267,7 +267,7 @@ private DefaultMessageStore mockMessageStore() throws IOException {
         doReturn(new SystemClock()).when(messageStore).getSystemClock();
         doAnswer(invocation -> System.currentTimeMillis()).when(messageStore).now();
         doReturn(this.storeConfig).when(messageStore).getMessageStoreConfig();
-//        doReturn(new BrokerConfig()).when(messageStore).getBrokerConfig();
+        doReturn(new BrokerConfig()).when(messageStore).getBrokerConfig();
         doReturn(true).when(messageStore).isOffsetAligned(anyLong());
 //        doReturn(new PutMessageResult(PutMessageStatus.PUT_OK, new AppendMessageResult(AppendMessageStatus.PUT_OK))).when(messageStore).sendMsgBack(anyLong());
         doReturn(true).when(messageStore).truncateFiles(anyLong());

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceContext.java
Patch:
@@ -118,7 +118,7 @@ public void setRegionName(String regionName) {
 
     @Override
     public int compareTo(TraceContext o) {
-        return (int) (this.timeStamp - o.getTimeStamp());
+        return Long.compare(this.timeStamp, o.getTimeStamp());
     }
 
     @Override

File: store/src/main/java/org/apache/rocketmq/store/ha/HAService.java
Patch:
@@ -555,6 +555,7 @@ public void run() {
                             boolean result = this.reportSlaveMaxOffset(this.currentReportedOffset);
                             if (!result) {
                                 this.closeMaster();
+                                continue;
                             }
                         }
 
@@ -563,6 +564,7 @@ public void run() {
                         boolean ok = this.processReadEvent();
                         if (!ok) {
                             this.closeMaster();
+                            continue;
                         }
 
                         if (!reportSlaveMaxOffsetPlus()) {

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -928,7 +928,7 @@ public synchronized void registerBrokerAll(final boolean checkOrderConfig, boole
 
         if (!PermName.isWriteable(this.getBrokerConfig().getBrokerPermission())
             || !PermName.isReadable(this.getBrokerConfig().getBrokerPermission())) {
-            ConcurrentHashMap<String, TopicConfig> topicConfigTable = new ConcurrentHashMap<String, TopicConfig>();
+            ConcurrentHashMap<String, TopicConfig> topicConfigTable = new ConcurrentHashMap<>();
             for (TopicConfig topicConfig : topicConfigWrapper.getTopicConfigTable().values()) {
                 TopicConfig tmp =
                     new TopicConfig(topicConfig.getTopicName(), topicConfig.getReadQueueNums(), topicConfig.getWriteQueueNums(),

File: common/src/main/java/org/apache/rocketmq/common/protocol/route/TopicRouteData.java
Patch:
@@ -33,9 +33,9 @@ public class TopicRouteData extends RemotingSerializable {
 
     public TopicRouteData cloneTopicRouteData() {
         TopicRouteData topicRouteData = new TopicRouteData();
-        topicRouteData.setQueueDatas(new ArrayList<QueueData>());
-        topicRouteData.setBrokerDatas(new ArrayList<BrokerData>());
-        topicRouteData.setFilterServerTable(new HashMap<String, List<String>>());
+        topicRouteData.setQueueDatas(new ArrayList<>());
+        topicRouteData.setBrokerDatas(new ArrayList<>());
+        topicRouteData.setFilterServerTable(new HashMap<>());
         topicRouteData.setOrderTopicConf(this.orderTopicConf);
 
         if (this.queueDatas != null) {

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/SendMsgStatusCommand.java
Patch:
@@ -85,7 +85,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
             for (int i = 0; i < count; i++) {
                 long begin = System.currentTimeMillis();
                 SendResult result = producer.send(buildMessage(brokerName, messageSize));
-                System.out.printf("rt:" + (System.currentTimeMillis() - begin) + "ms, SendResult=%s", result);
+                System.out.printf("rt=%sms, SendResult=%s%n", System.currentTimeMillis() - begin, result);
             }
         } catch (Exception e) {
             throw new SubCommandException(this.getClass().getSimpleName() + " command failed", e);

File: broker/src/main/java/org/apache/rocketmq/broker/plugin/MessageStoreFactory.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.rocketmq.store.MessageStore;
 
 public final class MessageStoreFactory {
-    public final static MessageStore build(MessageStorePluginContext context, MessageStore messageStore)
+    public static MessageStore build(MessageStorePluginContext context, MessageStore messageStore)
         throws IOException {
         String plugin = context.getBrokerConfig().getMessageStorePlugIn();
         if (plugin != null && plugin.trim().length() != 0) {

File: apis/src/main/java/org/apache/rocketmq/apis/consumer/ConsumeStatus.java
Patch:
@@ -26,5 +26,5 @@ public enum ConsumeStatus {
     /**
      * Consume message failed and need reconsume later.
      */
-    FAILED
+    FAILURE
 }

File: store/src/main/java/org/apache/rocketmq/store/index/IndexService.java
Patch:
@@ -173,7 +173,7 @@ public QueryOffsetResult queryOffset(String topic, String key, int maxNum, long
 
                     if (f.isTimeMatched(begin, end)) {
 
-                        f.selectPhyOffset(phyOffsets, buildKey(topic, key), maxNum, begin, end, lastFile);
+                        f.selectPhyOffset(phyOffsets, buildKey(topic, key), maxNum, begin, end);
                     }
 
                     if (f.getBeginTimestamp() < begin) {

File: store/src/test/java/org/apache/rocketmq/store/index/IndexFileTest.java
Patch:
@@ -63,7 +63,7 @@ public void testSelectPhyOffset() throws Exception {
         assertThat(putResult).isFalse();
 
         final List<Long> phyOffsets = new ArrayList<Long>();
-        indexFile.selectPhyOffset(phyOffsets, "60", 10, 0, Long.MAX_VALUE, true);
+        indexFile.selectPhyOffset(phyOffsets, "60", 10, 0, Long.MAX_VALUE);
         assertThat(phyOffsets).isNotEmpty();
         assertThat(phyOffsets.size()).isEqualTo(1);
         indexFile.destroy(0);

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyServerConfig.java
Patch:
@@ -33,7 +33,7 @@ public class NettyServerConfig implements Cloneable {
     private boolean serverPooledByteBufAllocatorEnable = true;
 
     /**
-     * make make install
+     * make install
      *
      *
      * ../glibc-2.10.1/configure \ --prefix=/usr \ --with-headers=/usr/include \

File: acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.rocketmq.acl.common;
 
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import javax.crypto.Mac;
 import javax.crypto.spec.SecretKeySpec;
 import org.apache.commons.codec.binary.Base64;
@@ -25,7 +26,7 @@
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 
 public class AclSigner {
-    public static final Charset DEFAULT_CHARSET = Charset.forName("UTF-8");
+    public static final Charset DEFAULT_CHARSET = StandardCharsets.UTF_8;
     public static final SigningAlgorithm DEFAULT_ALGORITHM = SigningAlgorithm.HmacSHA1;
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_AUTHORIZE_LOGGER_NAME);
     private static final int CAL_SIGNATURE_FAILED = 10015;

File: acl/src/main/java/org/apache/rocketmq/acl/common/SessionCredentials.java
Patch:
@@ -19,11 +19,12 @@
 import java.io.File;
 import java.io.IOException;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.Properties;
 import org.apache.rocketmq.common.MixAll;
 
 public class SessionCredentials {
-    public static final Charset CHARSET = Charset.forName("UTF-8");
+    public static final Charset CHARSET = StandardCharsets.UTF_8;
     public static final String ACCESS_KEY = "AccessKey";
     public static final String SECRET_KEY = "SecretKey";
     public static final String SIGNATURE = "Signature";

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageUtil.java
Patch:
@@ -20,10 +20,11 @@
 import org.apache.rocketmq.common.topic.TopicValidator;
 
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 
 public class TransactionalMessageUtil {
     public static final String REMOVETAG = "d";
-    public static Charset charset = Charset.forName("utf-8");
+    public static Charset charset = StandardCharsets.UTF_8;
 
     public static String buildOpTopic() {
         return TopicValidator.RMQ_SYS_TRANS_OP_HALF_TOPIC;

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -32,6 +32,7 @@
 import java.net.SocketException;
 import java.net.URL;
 import java.net.URLConnection;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Enumeration;
 import java.util.List;
@@ -213,7 +214,7 @@ public static String file2String(final URL url) {
             int len = in.available();
             byte[] data = new byte[len];
             in.read(data, 0, len);
-            return new String(data, "UTF-8");
+            return new String(data, StandardCharsets.UTF_8);
         } catch (Exception ignored) {
         } finally {
             if (null != in) {

File: common/src/main/java/org/apache/rocketmq/common/message/MessageDecoder.java
Patch:
@@ -23,6 +23,7 @@
 import java.net.UnknownHostException;
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -33,7 +34,7 @@
 public class MessageDecoder {
 //    public final static int MSG_ID_LENGTH = 8 + 8;
 
-    public final static Charset CHARSET_UTF8 = Charset.forName("UTF-8");
+    public final static Charset CHARSET_UTF8 = StandardCharsets.UTF_8;
     public final static int MESSAGE_MAGIC_CODE_POSTION = 4;
     public final static int MESSAGE_FLAG_POSTION = 16;
     public final static int MESSAGE_PHYSIC_OFFSET_POSTION = 28;

File: filter/src/main/java/org/apache/rocketmq/filter/util/BloomFilter.java
Patch:
@@ -20,13 +20,14 @@
 import com.google.common.hash.Hashing;
 
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 
 /**
  * Simple implement of bloom filter.
  */
 public class BloomFilter {
 
-    public static final Charset UTF_8 = Charset.forName("UTF-8");
+    public static final Charset UTF_8 = StandardCharsets.UTF_8;
 
     // as error rate, 10/100 = 0.1
     private int f = 10;

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingSerializable.java
Patch:
@@ -18,9 +18,10 @@
 
 import com.alibaba.fastjson.JSON;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 
 public abstract class RemotingSerializable {
-    private final static Charset CHARSET_UTF8 = Charset.forName("UTF-8");
+    private final static Charset CHARSET_UTF8 = StandardCharsets.UTF_8;
 
     public static byte[] encode(final Object obj) {
         final String json = toJson(obj, false);

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RocketMQSerializable.java
Patch:
@@ -18,13 +18,14 @@
 
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 
 public class RocketMQSerializable {
-    private static final Charset CHARSET_UTF8 = Charset.forName("UTF-8");
+    private static final Charset CHARSET_UTF8 = StandardCharsets.UTF_8;
 
     public static byte[] rocketMQProtocolEncode(RemotingCommand cmd) {
         // String remark

File: store/src/test/java/org/apache/rocketmq/store/BatchPutMessageTest.java
Patch:
@@ -33,6 +33,7 @@
 import java.io.File;
 import java.net.InetSocketAddress;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -48,7 +49,7 @@ public class BatchPutMessageTest {
 
     public static final char NAME_VALUE_SEPARATOR = 1;
     public static final char PROPERTY_SEPARATOR = 2;
-    public final static Charset CHARSET_UTF8 = Charset.forName("UTF-8");
+    public final static Charset CHARSET_UTF8 = StandardCharsets.UTF_8;
 
     @Before
     public void init() throws Exception {

File: store/src/test/java/org/apache/rocketmq/store/MultiDispatchTest.java
Patch:
@@ -20,6 +20,7 @@
 import java.io.File;
 import java.net.InetSocketAddress;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.message.MessageConst;
@@ -76,7 +77,7 @@ public void wrapMultiDispatch() {
         when(messageExtBrokerInner.getProperty(MessageConst.PROPERTY_INNER_MULTI_DISPATCH)).thenReturn(
             "%LMQ%123,%LMQ%456");
         when(messageExtBrokerInner.getTopic()).thenReturn("test");
-        when(messageExtBrokerInner.getBody()).thenReturn("aaa".getBytes(Charset.forName("UTF-8")));
+        when(messageExtBrokerInner.getBody()).thenReturn("aaa".getBytes(StandardCharsets.UTF_8));
         when(messageExtBrokerInner.getBornHost()).thenReturn(new InetSocketAddress("127.0.0.1", 54270));
         when(messageExtBrokerInner.getStoreHost()).thenReturn(new InetSocketAddress("127.0.0.1", 10911));
         multiDispatch.wrapMultiDispatch(messageExtBrokerInner);

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/SendMessageCommand.java
Patch:
@@ -28,6 +28,8 @@
 import org.apache.rocketmq.tools.command.SubCommand;
 import org.apache.rocketmq.tools.command.SubCommandException;
 
+import java.nio.charset.StandardCharsets;
+
 public class SendMessageCommand implements SubCommand {
 
     private DefaultMQProducer producer;
@@ -112,7 +114,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
                     queueId = Integer.parseInt(commandLine.getOptionValue('i').trim());
                 }
             }
-            msg = new Message(topic, tag, keys, body.getBytes("utf-8"));
+            msg = new Message(topic, tag, keys, body.getBytes(StandardCharsets.UTF_8));
         } catch (Exception e) {
             throw new RuntimeException(this.getClass().getSimpleName() + " command failed", e);
         }

File: store/src/main/java/org/apache/rocketmq/store/MappedFile.java
Patch:
@@ -262,7 +262,7 @@ public boolean appendMessage(final byte[] data) {
     }
 
     /**
-     * Content of data from offset to offset + length will be wrote to file.
+     * Content of data from offset to offset + length will be written to file.
      *
      * @param offset The offset of the subarray to be used.
      * @param length The length of the subarray to be used.

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -206,7 +206,7 @@ public DefaultMQAdminExtImpl(DefaultMQAdminExt defaultMQAdminExt, RPCHook rpcHoo
 
     @Override public void addBrokerToContainer(String brokerContainerAddr,
         String brokerConfig) throws InterruptedException, MQBrokerException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException {
-        this.mqClientInstance.getMQClientAPIImpl().addBroker(brokerContainerAddr, brokerConfig, timeoutMillis);
+        this.mqClientInstance.getMQClientAPIImpl().addBroker(brokerContainerAddr, brokerConfig, 20000);
     }
 
     @Override public void removeBrokerFromContainer(String brokerContainerAddr, String clusterName, String brokerName,

File: tools/src/main/java/org/apache/rocketmq/tools/command/container/RemoveBrokerSubCommand.java
Patch:
@@ -39,7 +39,7 @@ public class RemoveBrokerSubCommand implements SubCommand {
         opt.setRequired(true);
         options.addOption(opt);
 
-        opt = new Option("b", "brokerIdentity", true, "Information to identify a broker: clusterName:brokerName:brokerId");
+        opt = new Option("b", "brokerIdentity", true, "Information to identify a broker: clusterName:brokerName:brokerId(dLedgerId for dLedger)");
         opt.setRequired(true);
         options.addOption(opt);
 

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -1554,7 +1554,7 @@ private boolean checkMultiDispatchQueue(DispatchRequest dispatchRequest) {
             return false;
         }
         Map<String, String> prop = dispatchRequest.getPropertiesMap();
-        if (prop == null && prop.isEmpty()) {
+        if (prop == null || prop.isEmpty()) {
             return false;
         }
         String multiDispatchQueue = prop.get(MessageConst.PROPERTY_INNER_MULTI_DISPATCH);

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -1320,7 +1320,7 @@ public AppendMessageResult doAppend(final long fileFromOffset, final ByteBuffer
             final int tranType = MessageSysFlag.getTransactionValue(msgInner.getSysFlag());
             switch (tranType) {
                 // Prepared and Rollback message is not consumed, will not enter the
-                // consumer queuec
+                // consumer queue
                 case MessageSysFlag.TRANSACTION_PREPARED_TYPE:
                 case MessageSysFlag.TRANSACTION_ROLLBACK_TYPE:
                     queueOffset = 0L;

File: client/src/main/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueByConfig.java
Patch:
@@ -17,10 +17,9 @@
 package org.apache.rocketmq.client.consumer.rebalance;
 
 import java.util.List;
-import org.apache.rocketmq.client.consumer.AllocateMessageQueueStrategy;
 import org.apache.rocketmq.common.message.MessageQueue;
 
-public class AllocateMessageQueueByConfig implements AllocateMessageQueueStrategy {
+public class AllocateMessageQueueByConfig extends AbstractAllocateMessageQueueStrategy {
     private List<MessageQueue> messageQueueList;
 
     @Override

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceDispatcher.java
Patch:
@@ -35,7 +35,7 @@ enum Type {
 
     /**
      * Append the transfering data
-     * @param ctx data infomation
+     * @param ctx data information
      * @return
      */
     boolean append(Object ctx);

File: store/src/test/java/org/apache/rocketmq/store/dledger/DLedgerCommitlogTest.java
Patch:
@@ -161,7 +161,7 @@ public void testPutAndGetMessage() throws Exception {
             Assert.assertEquals(PutMessageStatus.PUT_OK, putMessageResult.getPutMessageStatus());
             Assert.assertEquals(i, putMessageResult.getAppendMessageResult().getLogicsOffset());
         }
-        Thread.sleep(100);
+        Thread.sleep(500);
         Assert.assertEquals(0, messageStore.getMinOffsetInQueue(topic, 0));
         Assert.assertEquals(10, messageStore.getMaxOffsetInQueue(topic, 0));
         Assert.assertEquals(0, messageStore.dispatchBehindBytes());

File: tools/src/main/java/org/apache/rocketmq/tools/command/cluster/CLusterSendMsgRTCommand.java
Patch:
@@ -58,7 +58,7 @@ public Options buildCommandlineOptions(Options options) {
         options.addOption(opt);
 
         opt = new Option("s", "size", true, "message size | default 128 Byte");
-        opt.setRequired(true);
+        opt.setRequired(false);
         options.addOption(opt);
 
         opt = new Option("c", "cluster", true, "cluster name | default display all cluster");
@@ -98,7 +98,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
 
             Set<String> clusterNames = null;
 
-            long amount = !commandLine.hasOption('a') ? 50 : Long.parseLong(commandLine
+            long amount = !commandLine.hasOption('a') ? 100 : Long.parseLong(commandLine
                 .getOptionValue('a').trim());
 
             long size = !commandLine.hasOption('s') ? 128 : Long.parseLong(commandLine

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/CheckMsgSendRTCommand.java
Patch:
@@ -54,7 +54,7 @@ public Options buildCommandlineOptions(Options options) {
         options.addOption(opt);
 
         opt = new Option("s", "size", true, "message size | default 128 Byte");
-        opt.setRequired(true);
+        opt.setRequired(false);
         options.addOption(opt);
         return options;
     }

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -1113,6 +1113,7 @@ private PopResult processPopResponse(final String brokerName, final RemotingComm
                         messageExt.getProperties().put(MessageConst.PROPERTY_FIRST_POP_TIME, String.valueOf(responseHeader.getPopTime()));
                     }
                 }
+                messageExt.setBrokerName(brokerName);
                 messageExt.setTopic(NamespaceUtil.withoutNamespace(topic, this.clientConfig.getNamespace()));
             }
         }

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java
Patch:
@@ -138,6 +138,7 @@ public ConsumeMessageDirectlyResult consumeMessageDirectly(MessageExt msg, Strin
         result.setOrder(false);
         result.setAutoCommit(true);
 
+        msg.setBrokerName(brokerName);
         List<MessageExt> msgs = new ArrayList<MessageExt>();
         msgs.add(msg);
         MessageQueue mq = new MessageQueue();

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -378,10 +378,10 @@ public boolean sendMessageBack(final MessageExt msg) {
         try {
             // max reconsume times exceeded then send to dead letter queue.
             Message newMsg = new Message(MixAll.getRetryTopic(this.defaultMQPushConsumer.getConsumerGroup()), msg.getBody());
+            MessageAccessor.setProperties(newMsg, msg.getProperties());
             String originMsgId = MessageAccessor.getOriginMessageId(msg);
             MessageAccessor.setOriginMessageId(newMsg, UtilAll.isBlank(originMsgId) ? msg.getMsgId() : originMsgId);
             newMsg.setFlag(msg.getFlag());
-            MessageAccessor.setProperties(newMsg, msg.getProperties());
             MessageAccessor.putProperty(newMsg, MessageConst.PROPERTY_RETRY_TOPIC, msg.getTopic());
             MessageAccessor.setReconsumeTime(newMsg, String.valueOf(msg.getReconsumeTimes()));
             MessageAccessor.setMaxReconsumeTimes(newMsg, String.valueOf(getMaxReconsumeTimes()));

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -384,10 +384,10 @@ public boolean sendMessageBack(final MessageExt msg) {
         try {
             // max reconsume times exceeded then send to dead letter queue.
             Message newMsg = new Message(MixAll.getRetryTopic(this.defaultMQPushConsumer.getConsumerGroup()), msg.getBody());
+            MessageAccessor.setProperties(newMsg, msg.getProperties());
             String originMsgId = MessageAccessor.getOriginMessageId(msg);
             MessageAccessor.setOriginMessageId(newMsg, UtilAll.isBlank(originMsgId) ? msg.getMsgId() : originMsgId);
             newMsg.setFlag(msg.getFlag());
-            MessageAccessor.setProperties(newMsg, msg.getProperties());
             MessageAccessor.putProperty(newMsg, MessageConst.PROPERTY_RETRY_TOPIC, msg.getTopic());
             MessageAccessor.setReconsumeTime(newMsg, String.valueOf(msg.getReconsumeTimes()));
             MessageAccessor.setMaxReconsumeTimes(newMsg, String.valueOf(getMaxReconsumeTimes()));

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessagePopOrderlyService.java
Patch:
@@ -296,10 +296,10 @@ public boolean sendMessageBack(final MessageExt msg) {
         try {
             // max reconsume times exceeded then send to dead letter queue.
             Message newMsg = new Message(MixAll.getRetryTopic(this.defaultMQPushConsumer.getConsumerGroup()), msg.getBody());
+            MessageAccessor.setProperties(newMsg, msg.getProperties());
             String originMsgId = MessageAccessor.getOriginMessageId(msg);
             MessageAccessor.setOriginMessageId(newMsg, UtilAll.isBlank(originMsgId) ? msg.getMsgId() : originMsgId);
             newMsg.setFlag(msg.getFlag());
-            MessageAccessor.setProperties(newMsg, msg.getProperties());
             MessageAccessor.putProperty(newMsg, MessageConst.PROPERTY_RETRY_TOPIC, msg.getTopic());
             MessageAccessor.setReconsumeTime(newMsg, String.valueOf(msg.getReconsumeTimes()));
             MessageAccessor.setMaxReconsumeTimes(newMsg, String.valueOf(getMaxReconsumeTimes()));

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/kvconfig/KVConfigManager.java
Patch:
@@ -64,7 +64,7 @@ public void putKVConfig(final String namespace, final String key, final String v
             try {
                 HashMap<String, String> kvTable = this.configTable.get(namespace);
                 if (null == kvTable) {
-                    kvTable = new HashMap<String, String>();
+                    kvTable = new HashMap<>();
                     this.configTable.put(namespace, kvTable);
                     log.info("putKVConfig create new Namespace {}", namespace);
                 }

File: store/src/main/java/org/apache/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -31,8 +31,7 @@ public class MessageStoreConfig {
 
     //The directory in which the commitlog is kept
     @ImportantField
-    private String storePathCommitLog = System.getProperty("user.home") + File.separator + "store"
-        + File.separator + "commitlog";
+    private String storePathCommitLog = storePathRootDir + File.separator + "commitlog";
 
     private String readOnlyCommitLogStorePaths = null;
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java
Patch:
@@ -221,7 +221,7 @@ protected RemotingCommand msgCheck(final ChannelHandlerContext ctx,
         if (queueIdInt >= idValid) {
             String errorInfo = String.format("request queueId[%d] is illegal, %s Producer: %s",
                 queueIdInt,
-                topicConfig.toString(),
+                topicConfig,
                 RemotingHelper.parseChannelRemoteAddr(ctx.channel()));
 
             log.warn(errorInfo);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java
Patch:
@@ -314,7 +314,7 @@ public boolean sendMessageBack(final MessageExt msg, final ConsumeConcurrentlyCo
             this.defaultMQPushConsumerImpl.sendMessageBack(msg, delayLevel, context.getMessageQueue().getBrokerName());
             return true;
         } catch (Exception e) {
-            log.error("sendMessageBack exception, group: " + this.consumerGroup + " msg: " + msg.toString(), e);
+            log.error("sendMessageBack exception, group: " + this.consumerGroup + " msg: " + msg, e);
         }
 
         return false;

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -399,7 +399,7 @@ public void updateTopicPublishInfo(final String topic, final TopicPublishInfo in
         if (info != null && topic != null) {
             TopicPublishInfo prev = this.topicPublishInfoTable.put(topic, info);
             if (prev != null) {
-                log.info("updateTopicPublishInfo prev is not null, " + prev.toString());
+                log.info("updateTopicPublishInfo prev is not null, " + prev);
             }
         }
     }

File: filter/src/main/java/org/apache/rocketmq/filter/util/BloomFilter.java
Patch:
@@ -145,7 +145,7 @@ public void hashTo(BloomFilterData filterData, BitsArray bits) {
         if (!isValid(filterData)) {
             throw new IllegalArgumentException(
                 String.format("Bloom filter data may not belong to this filter! %s, %s",
-                    filterData, this.toString())
+                    filterData, this)
             );
         }
         hashTo(filterData.getBitPos(), bits);
@@ -183,7 +183,7 @@ public boolean isHit(BloomFilterData filterData, BitsArray bits) {
         if (!isValid(filterData)) {
             throw new IllegalArgumentException(
                 String.format("Bloom filter data may not belong to this filter! %s, %s",
-                    filterData, this.toString())
+                    filterData, this)
             );
         }
         return isHit(filterData.getBitPos(), bits);

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -513,7 +513,7 @@ private Channel createChannel(final String addr) throws InterruptedException {
                     log.info("createChannel: connect remote host[{}] success, {}", addr, channelFuture.toString());
                     return cw.getChannel();
                 } else {
-                    log.warn("createChannel: connect remote host[" + addr + "] failed, " + channelFuture.toString(), channelFuture.cause());
+                    log.warn("createChannel: connect remote host[" + addr + "] failed, " + channelFuture, channelFuture.cause());
                 }
             } else {
                 log.warn("createChannel: connect remote host[{}] timeout {}ms, {}", addr, this.nettyClientConfig.getConnectTimeoutMillis(),

File: test/src/main/java/org/apache/rocketmq/test/util/DuplicateMessageInfo.java
Patch:
@@ -90,7 +90,7 @@ public void checkDuplicatedMessageInfo(boolean bPrintLog,
                 getFloatNumString(msgQueueInnerDupRate) + "%\r\n");
         }
 
-        System.out.print(strBuilder.toString());
+        System.out.print(strBuilder);
         String titleString = "queue\tdupQueue\tdupMsg\r\n";
         System.out.print(titleString);
 
@@ -104,7 +104,7 @@ public void checkDuplicatedMessageInfo(boolean bPrintLog,
 
             String strToWrite;
             byte[] byteToWrite;
-            strToWrite = strBuilder.toString() + titleString;
+            strToWrite = strBuilder + titleString;
             for (int i = 0; i < msgListSize; i++)
                 strToWrite += strBQueue.get(i).toString() + "\r\n";
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/PrintMessageByQueueCommand.java
Patch:
@@ -93,7 +93,7 @@ public static void printMessage(final List<MessageExt> msgs, final String charse
 
         for (MessageExt msg : msgs) {
             try {
-                System.out.printf("MSGID: %s %s BODY: %s%n", msg.getMsgId(), msg.toString(),
+                System.out.printf("MSGID: %s %s BODY: %s%n", msg.getMsgId(), msg,
                     printBody ? new String(msg.getBody(), charsetName) : "NOT PRINT BODY");
             } catch (UnsupportedEncodingException e) {
                 e.printStackTrace();

File: store/src/main/java/org/apache/rocketmq/store/schedule/ScheduleMessageService.java
Patch:
@@ -127,7 +127,7 @@ public long computeDeliverTimestamp(final int delayLevel, final long storeTimest
 
     public void start() {
         if (started.compareAndSet(false, true)) {
-            super.load();
+            this.load();
             this.deliverExecutorService = new ScheduledThreadPoolExecutor(this.maxDelayLevel, new ThreadFactoryImpl("ScheduleMessageTimerThread_"));
             if (this.enableAsyncDeliver) {
                 this.handleExecutorService = new ScheduledThreadPoolExecutor(this.maxDelayLevel, new ThreadFactoryImpl("ScheduleMessageExecutorHandleThread_"));

File: broker/src/main/java/org/apache/rocketmq/broker/processor/EndTransactionProcessor.java
Patch:
@@ -238,7 +238,8 @@ private RemotingCommand sendFinalMessage(MessageExtBrokerInner msgInner) {
                 case MESSAGE_ILLEGAL:
                 case PROPERTIES_SIZE_EXCEEDED:
                     response.setCode(ResponseCode.MESSAGE_ILLEGAL);
-                    response.setRemark("The message is illegal, maybe msg body or properties length not matched. msg body length limit 128k, msg properties length limit 32k.");
+                    response.setRemark(String.format("The message is illegal, maybe msg body or properties length not matched. msg body length limit %dB, msg properties length limit 32KB.",
+                        this.brokerController.getMessageStoreConfig().getMaxMessageSize()));
                     break;
                 case SERVICE_NOT_AVAILABLE:
                     response.setCode(ResponseCode.SERVICE_NOT_AVAILABLE);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ReplyMessageProcessor.java
Patch:
@@ -257,11 +257,12 @@ private void handlePutMessageResult(PutMessageResult putMessageResult,
                 break;
             case MESSAGE_ILLEGAL:
                 log.warn(
-                    "the message is illegal, maybe msg properties length limit 32k.");
+                    "the message is illegal, maybe msg body or properties length not matched. msg body length limit {}B.",
+                    this.brokerController.getMessageStoreConfig().getMaxMessageSize());
                 break;
             case PROPERTIES_SIZE_EXCEEDED:
                 log.warn(
-                    "the message is illegal, maybe msg body or properties length not matched. msg body length limit 128k.");
+                    "the message is illegal, maybe msg properties length limit 32KB.");
                 break;
             case SERVICE_NOT_AVAILABLE:
                 log.warn(

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -501,8 +501,8 @@ private RemotingCommand handlePutMessageResult(PutMessageResult putMessageResult
             case MESSAGE_ILLEGAL:
             case PROPERTIES_SIZE_EXCEEDED:
                 response.setCode(ResponseCode.MESSAGE_ILLEGAL);
-                response.setRemark(
-                    "the message is illegal, maybe msg body or properties length not matched. msg body length limit 128k, msg properties length limit 32k.");
+                response.setRemark(String.format("the message is illegal, maybe msg body or properties length not matched. msg body length limit %dB, msg properties length limit 32KB.",
+                    this.brokerController.getMessageStoreConfig().getMaxMessageSize()));
                 break;
             case SERVICE_NOT_AVAILABLE:
                 response.setCode(ResponseCode.SERVICE_NOT_AVAILABLE);

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -632,9 +632,6 @@ private SendResult sendDefaultImpl(
                         this.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, false);
                         log.warn(String.format("sendKernelImpl exception, throw exception, InvokeID: %s, RT: %sms, Broker: %s", invokeID, endTimestamp - beginTimestampPrev, mq), e);
                         log.warn(msg.toString());
-
-                        log.warn("sendKernelImpl exception", e);
-                        log.warn(msg.toString());
                         throw e;
                     }
                 } else {

File: common/src/test/java/org/apache/rocketmq/common/filter/FilterAPITest.java
Patch:
@@ -57,7 +57,7 @@ public void testBuildTagSome() {
             assertThat(ExpressionType.isTagType(subscriptionData.getExpressionType())).isTrue();
 
             assertThat(subscriptionData.getTagsSet()).isNotNull();
-            assertThat(subscriptionData.getTagsSet()).containsExactly("A", "B");
+            assertThat(subscriptionData.getTagsSet()).containsExactlyInAnyOrder("A", "B");
         } catch (Exception e) {
             e.printStackTrace();
             assertThat(Boolean.FALSE).isTrue();

File: test/src/test/java/org/apache/rocketmq/test/container/AddAndRemoveBrokerIT.java
Patch:
@@ -29,6 +29,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+
 public class AddAndRemoveBrokerIT extends ContainerIntegrationTestBase {
     private static BrokerContainer brokerContainer4;
 

File: test/src/test/java/org/apache/rocketmq/test/container/BrokerFailoverIT.java
Patch:
@@ -27,6 +27,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.awaitility.Awaitility.await;
 
+
 public class BrokerFailoverIT extends ContainerIntegrationTestBase {
 
     @Test

File: test/src/test/java/org/apache/rocketmq/test/container/BrokerMemberGroupIT.java
Patch:
@@ -24,6 +24,7 @@
 
 import static org.awaitility.Awaitility.await;
 
+
 public class BrokerMemberGroupIT extends ContainerIntegrationTestBase {
     @Test
     public void testSyncBrokerMemberGroup() throws Exception {

File: test/src/test/java/org/apache/rocketmq/test/container/GetMaxOffsetFromSlaveIT.java
Patch:
@@ -39,6 +39,7 @@
 import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.awaitility.Awaitility.await;
 
+
 public class GetMaxOffsetFromSlaveIT extends ContainerIntegrationTestBase {
     private static DefaultMQProducer mqProducer;
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/common/RemotingUtil.java
Patch:
@@ -218,7 +218,7 @@ public static SocketChannel connect(SocketAddress remote, final int timeoutMilli
 
     public static void closeChannel(Channel channel) {
         final String addrRemote = RemotingHelper.parseChannelRemoteAddr(channel);
-        if (addrRemote == "") {
+        if ("".equals(addrRemote)) {
             channel.close();
         } else {
             channel.close().addListener(new ChannelFutureListener() {

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -630,9 +630,6 @@ private SendResult sendDefaultImpl(
                         this.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, false);
                         log.warn(String.format("sendKernelImpl exception, throw exception, InvokeID: %s, RT: %sms, Broker: %s", invokeID, endTimestamp - beginTimestampPrev, mq), e);
                         log.warn(msg.toString());
-
-                        log.warn("sendKernelImpl exception", e);
-                        log.warn(msg.toString());
                         throw e;
                     }
                 } else {

File: common/src/test/java/org/apache/rocketmq/common/filter/FilterAPITest.java
Patch:
@@ -57,7 +57,7 @@ public void testBuildTagSome() {
             assertThat(ExpressionType.isTagType(subscriptionData.getExpressionType())).isTrue();
 
             assertThat(subscriptionData.getTagsSet()).isNotNull();
-            assertThat(subscriptionData.getTagsSet()).containsExactly("A", "B");
+            assertThat(subscriptionData.getTagsSet()).containsExactlyInAnyOrder("A", "B");
         } catch (Exception e) {
             e.printStackTrace();
             assertThat(Boolean.FALSE).isTrue();

File: example/src/main/java/org/apache/rocketmq/example/namespace/PushConsumerWithNamespace.java
Patch:
@@ -29,7 +29,7 @@ public static void main(String[] args) throws Exception {
             msgs.stream().forEach((msg) -> {
                 System.out.printf("Msg topic is:%s, MsgId is:%s, reconsumeTimes is:%s%n", msg.getTopic() , msg.getMsgId(), msg.getReconsumeTimes());
             });
-            return ConsumeConcurrentlyStatus.RECONSUME_LATER;
+            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
         });
 
         defaultMQPushConsumer.start();

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -620,8 +620,8 @@ private void onExceptionImpl(final String brokerName,
                 retryBrokerName = mqChosen.getBrokerName();
             }
             String addr = instance.findBrokerAddressInPublish(retryBrokerName);
-            log.warn(String.format("async send msg by retry {} times. topic={}, brokerAddr={}, brokerName={}", tmp, msg.getTopic(), addr,
-                retryBrokerName), e);
+            log.warn("async send msg by retry {} times. topic={}, brokerAddr={}, brokerName={}", tmp, msg.getTopic(), addr,
+                retryBrokerName, e);
             try {
                 request.setOpaque(RemotingCommand.createNewRequestId());
                 sendMessageAsync(addr, retryBrokerName, msg, timeoutMillis, request, sendCallback, topicPublishInfo, instance,

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java
Patch:
@@ -72,7 +72,7 @@ public ConsumeMessageConcurrentlyService(DefaultMQPushConsumerImpl defaultMQPush
 
         String consumeThreadPrefix = null;
         if (consumerGroup.length() > 100) {
-            consumeThreadPrefix = new StringBuilder("ConsumeMessageThread_").append(consumerGroup.substring(0, 100)).append("_").toString();
+            consumeThreadPrefix = new StringBuilder("ConsumeMessageThread_").append(consumerGroup, 0, 100).append("_").toString();
         } else {
             consumeThreadPrefix = new StringBuilder("ConsumeMessageThread_").append(consumerGroup).append("_").toString();
         }

File: client/src/test/java/org/apache/rocketmq/client/common/ThreadLocalIndexTest.java
Patch:
@@ -33,7 +33,7 @@ public void testIncrementAndGet() throws Exception {
     public void testIncrementAndGet2() throws Exception {
         ThreadLocalIndex localIndex = new ThreadLocalIndex();
         int initialVal = localIndex.incrementAndGet();
-        assertThat(initialVal >= 0);
+        assertThat(initialVal >= 0).isTrue();
     }
 
 }
\ No newline at end of file

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -1022,7 +1022,7 @@ public void updateConsumerOffsetOneway(
         this.remotingClient.invokeOneway(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr), request, timeoutMillis);
     }
 
-    public int sendHearbeat(
+    public int sendHeartbeat(
         final String addr,
         final HeartbeatData heartbeatData,
         final long timeoutMillis

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -555,7 +555,7 @@ private void sendHeartbeatToAllBroker() {
                             }
 
                             try {
-                                int version = this.mQClientAPIImpl.sendHearbeat(addr, heartbeatData, clientConfig.getMqClientApiTimeout());
+                                int version = this.mQClientAPIImpl.sendHeartbeat(addr, heartbeatData, clientConfig.getMqClientApiTimeout());
                                 if (!this.brokerVersionTable.containsKey(brokerName)) {
                                     this.brokerVersionTable.put(brokerName, new HashMap<String, Integer>(4));
                                 }

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainPermissionManager.java
Patch:
@@ -212,7 +212,8 @@ public void load(String aclFilePath) {
             for (PlainAccessConfig plainAccessConfig : plainAccessConfigList) {
                 PlainAccessResource plainAccessResource = buildPlainAccessResource(plainAccessConfig);
                 //AccessKey can not be defined in multiple ACL files
-                if (this.accessKeyTable.get(plainAccessResource.getAccessKey()) == null) {
+                String oldPath = this.accessKeyTable.get(plainAccessResource.getAccessKey());
+                if (oldPath == null || aclFilePath.equals(oldPath)) {
                     plainAccessResourceMap.put(plainAccessResource.getAccessKey(), plainAccessResource);
                     this.accessKeyTable.put(plainAccessResource.getAccessKey(), aclFilePath);
                 }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -429,6 +429,7 @@ private RemotingCommand getBrokerAclConfigVersion(ChannelHandlerContext ctx, Rem
         try {
             AccessValidator accessValidator = this.brokerController.getAccessValidatorMap().get(PlainAccessValidator.class);
 
+            responseHeader.setAllAclFileVersion(JSON.toJSONString(accessValidator.getAllAclConfigVersion()));
             responseHeader.setVersion(accessValidator.getAclConfigVersion());
             responseHeader.setBrokerAddr(this.brokerController.getBrokerAddr());
             responseHeader.setBrokerName(this.brokerController.getBrokerConfig().getBrokerName());

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java
Patch:
@@ -849,6 +849,8 @@ public void run() {
                             break;
                     }
                     updatePullOffset(messageQueue, pullResult.getNextBeginOffset(), processQueue);
+                } catch (InterruptedException interruptedException) {
+                    log.warn("Polling thread was interrupted.", interruptedException);
                 } catch (Throwable e) {
                     pullDelayTimeMills = pullTimeDelayMillsWhenException;
                     log.error("An error occurred in pull message process.", e);

File: client/src/main/java/org/apache/rocketmq/client/producer/LocalTransactionExecuter.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.rocketmq.common.message.Message;
 
 /**
- * This interface will be removed in the version 5.0.0, interface {@link TransactionListener} is recommended.
+ * @deprecated This interface will be removed in the version 5.0.0, interface {@link TransactionListener} is recommended.
  */
 @Deprecated
 public interface LocalTransactionExecuter {

File: client/src/main/java/org/apache/rocketmq/client/producer/TransactionCheckListener.java
Patch:
@@ -17,8 +17,9 @@
 package org.apache.rocketmq.client.producer;
 
 import org.apache.rocketmq.common.message.MessageExt;
+
 /**
- * This interface will be removed in the version 5.0.0, interface {@link TransactionListener} is recommended.
+ * @deprecated This interface will be removed in the version 5.0.0, interface {@link TransactionListener} is recommended.
  */
 @Deprecated
 public interface TransactionCheckListener {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java
Patch:
@@ -92,6 +92,7 @@ public class PopMessageProcessor implements NettyRequestProcessor {
     private PopLongPollingService popLongPollingService;
     private PopBufferMergeService popBufferMergeService;
     private QueueLockManager queueLockManager;
+    private AtomicLong ckMessageNumber;
 
     public PopMessageProcessor(final BrokerController brokerController) {
         this.brokerController = brokerController;
@@ -104,6 +105,7 @@ public PopMessageProcessor(final BrokerController brokerController) {
         this.popLongPollingService = new PopLongPollingService();
         this.queueLockManager = new QueueLockManager();
         this.popBufferMergeService = new PopBufferMergeService(this.brokerController, this);
+        this.ckMessageNumber = new AtomicLong();
     }
 
     public PopLongPollingService getPopLongPollingService() {
@@ -350,7 +352,7 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
         if (requestHeader.isOrder()) {
             reviveQid = KeyBuilder.POP_ORDER_REVIVE_QUEUE;
         } else {
-            reviveQid = randomQ % this.brokerController.getBrokerConfig().getReviveQueueNum();
+            reviveQid = (int) Math.abs(ckMessageNumber.getAndIncrement() % this.brokerController.getBrokerConfig().getReviveQueueNum());
         }
 
         GetMessageResult getMessageResult = new GetMessageResult();

File: common/src/main/java/org/apache/rocketmq/common/attribute/CQType.java
Patch:
@@ -19,6 +19,5 @@
 
 public enum CQType {
     SimpleCQ,
-    BatchCQ,
-    MillionCQ;
+    BatchCQ
 }

File: store/src/main/java/org/apache/rocketmq/store/queue/ConsumeQueueStore.java
Patch:
@@ -295,7 +295,7 @@ private ConsumeQueueInterface doFindOrCreateConsumeQueue(String topic, int queue
     }
 
     public Long getMaxOffset(String topic, int queueId) {
-        return this.queueOffsetAssigner.getTopicQueueTable().get(topic + "-" + queueId);
+        return this.queueOffsetAssigner.currentQueueOffset(topic + "-" + queueId);
     }
 
     public void setTopicQueueTable(HashMap<String, Long> topicQueueTable) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -33,7 +33,6 @@
 import org.apache.rocketmq.common.MQVersion;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.PlainAccessConfig;
-import org.apache.rocketmq.common.TopicAttributes;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.admin.ConsumeStats;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ConsumerManageProcessor.java
Patch:
@@ -32,12 +32,10 @@
 import org.apache.rocketmq.common.rpc.RpcClientUtils;
 import org.apache.rocketmq.common.rpc.RpcRequest;
 import org.apache.rocketmq.common.rpc.RpcResponse;
-import org.apache.rocketmq.common.rpc.TopicQueueRequestHeader;
 import org.apache.rocketmq.common.statictopic.LogicQueueMappingItem;
 import org.apache.rocketmq.common.statictopic.TopicQueueMappingContext;
 import org.apache.rocketmq.common.statictopic.TopicQueueMappingDetail;
 import org.apache.rocketmq.common.statictopic.TopicQueueMappingUtils;
-import org.apache.rocketmq.common.sysflag.PullSysFlag;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumer.java
Patch:
@@ -431,8 +431,8 @@ public DefaultMQPushConsumer(final String namespace, final String consumerGroup,
      */
     @Deprecated
     @Override
-    public void createTopic(String key, String newTopic, int queueNum) throws MQClientException {
-        createTopic(key, withNamespace(newTopic), queueNum, 0);
+    public void createTopic(String key, String newTopic, int queueNum, Map<String, String> attributes) throws MQClientException {
+        createTopic(key, withNamespace(newTopic), queueNum, 0, null);
     }
     
     @Override
@@ -448,7 +448,7 @@ public void setUseTLS(boolean useTLS) {
      */
     @Deprecated
     @Override
-    public void createTopic(String key, String newTopic, int queueNum, int topicSysFlag) throws MQClientException {
+    public void createTopic(String key, String newTopic, int queueNum, int topicSysFlag, Map<String, String> attributes) throws MQClientException {
         this.defaultMQPushConsumerImpl.createTopic(key, withNamespace(newTopic), queueNum, topicSysFlag);
     }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java
Patch:
@@ -100,7 +100,7 @@ public void createTopic(String key, String newTopic, int queueNum) throws MQClie
 
     public void createTopic(String key, String newTopic, int queueNum, int topicSysFlag) throws MQClientException {
         this.isRunning();
-        this.mQClientFactory.getMQAdminImpl().createTopic(key, newTopic, queueNum, topicSysFlag);
+        this.mQClientFactory.getMQAdminImpl().createTopic(key, newTopic, queueNum, topicSysFlag, null);
     }
 
     private void isRunning() throws MQClientException {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -184,7 +184,7 @@ public void createTopic(String key, String newTopic, int queueNum) throws MQClie
     }
 
     public void createTopic(String key, String newTopic, int queueNum, int topicSysFlag) throws MQClientException {
-        this.mQClientFactory.getMQAdminImpl().createTopic(key, newTopic, queueNum, topicSysFlag);
+        this.mQClientFactory.getMQAdminImpl().createTopic(key, newTopic, queueNum, topicSysFlag, null);
     }
 
     public Set<MessageQueue> fetchSubscribeMessageQueues(String topic) throws MQClientException {

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -447,7 +447,7 @@ public void createTopic(String key, String newTopic, int queueNum, int topicSysF
         Validators.checkTopic(newTopic);
         Validators.isSystemTopic(newTopic);
 
-        this.mQClientFactory.getMQAdminImpl().createTopic(key, newTopic, queueNum, topicSysFlag);
+        this.mQClientFactory.getMQAdminImpl().createTopic(key, newTopic, queueNum, topicSysFlag, null);
     }
 
     private void makeSureStateOK() throws MQClientException {

File: common/src/main/java/org/apache/rocketmq/common/TopicAttributes.java
Patch:
@@ -25,7 +25,7 @@
 import static com.google.common.collect.Sets.newHashSet;
 
 public class TopicAttributes {
-    public static final EnumAttribute QUEUE_TYPE = new EnumAttribute(
+    public static final EnumAttribute QUEUE_TYPE_ATTRIBUTE = new EnumAttribute(
             "queue.type",
             false,
             newHashSet("BatchCQ", "SimpleCQ"),
@@ -35,6 +35,6 @@ public class TopicAttributes {
 
     static {
         ALL = new HashMap<>();
-        ALL.put(QUEUE_TYPE.getName(), QUEUE_TYPE);
+        ALL.put(QUEUE_TYPE_ATTRIBUTE.getName(), QUEUE_TYPE_ATTRIBUTE);
     }
 }

File: common/src/main/java/org/apache/rocketmq/common/attribute/CQType.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.store.queue;
+package org.apache.rocketmq.common.attribute;
 
 public enum CQType {
     SimpleCQ,

File: store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java
Patch:
@@ -33,7 +33,6 @@
 import java.net.Inet6Address;
 import java.net.InetSocketAddress;
 import java.nio.ByteBuffer;
-import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.concurrent.CompletableFuture;
@@ -431,7 +430,7 @@ public CompletableFuture<PutMessageResult> asyncPutMessage(MessageExtBrokerInner
         String topicQueueKey = msg.getTopic() + "-" + msg.getQueueId();
         topicQueueLock.lock(topicQueueKey);
         try {
-            defaultMessageStore.assignOffset(topicQueueKey, msg, getBatchNum(msg));
+            defaultMessageStore.assignOffset(topicQueueKey, msg, getMessageNum(msg));
 
             encodeResult = this.messageSerializer.serialize(msg);
             if (encodeResult.status != AppendMessageStatus.PUT_OK) {

File: store/src/main/java/org/apache/rocketmq/store/logfile/MappedFile.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.rocketmq.store.AppendMessageCallback;
 import org.apache.rocketmq.store.AppendMessageResult;
-import org.apache.rocketmq.store.CommitLog;
 import org.apache.rocketmq.store.MessageExtBatch;
 import org.apache.rocketmq.store.MessageExtBrokerInner;
 import org.apache.rocketmq.store.PutMessageContext;

File: store/src/main/java/org/apache/rocketmq/store/queue/ConsumeQueueInterface.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.rocketmq.store.queue;
 
+import org.apache.rocketmq.common.attribute.CQType;
+
 public interface ConsumeQueueInterface {
     /**
      * Get the topic name

File: store/src/main/java/org/apache/rocketmq/store/queue/FileQueueLifeCycle.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.rocketmq.store.queue;
 
 import org.apache.rocketmq.store.DispatchRequest;
+import org.apache.rocketmq.store.MessageExtBrokerInner;
 import org.apache.rocketmq.store.Swappable;
 
 public interface FileQueueLifeCycle extends Swappable {
@@ -32,4 +33,5 @@ public interface FileQueueLifeCycle extends Swappable {
     boolean isFirstFileExist();
     void correctMinOffset(long minCommitLogOffset);
     void putMessagePositionInfoWrapper(DispatchRequest request);
+    void assignQueueOffset(QueueOffsetAssigner queueOffsetAssigner, MessageExtBrokerInner msg, short messageNum);
 }

File: store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreShutDownTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.rocketmq.store.config.FlushDiskType;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 import org.apache.rocketmq.store.config.StorePathConfigHelper;
-import org.apache.rocketmq.store.queue.CQType;
+import org.apache.rocketmq.common.attribute.CQType;
 import org.apache.rocketmq.store.stats.BrokerStatsManager;
 import org.junit.After;
 import org.junit.Before;
@@ -72,7 +72,6 @@ public DefaultMessageStore buildMessageStore() throws Exception {
         messageStoreConfig.setMaxIndexNum(100 * 100);
         messageStoreConfig.setFlushDiskType(FlushDiskType.SYNC_FLUSH);
         messageStoreConfig.setHaListenPort(StoreTestBase.nextPort());
-        messageStoreConfig.setDefaultCQType(CQType.SimpleCQ.name());
         return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager("simpleTest"), null, new BrokerConfig());
     }
 

File: store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreTest.java
Patch:
@@ -38,7 +38,7 @@
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 import org.apache.rocketmq.store.config.StorePathConfigHelper;
 import org.apache.rocketmq.store.logfile.DefaultMappedFile;
-import org.apache.rocketmq.store.queue.CQType;
+import org.apache.rocketmq.common.attribute.CQType;
 import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
 import org.apache.rocketmq.store.queue.CqUnit;
 import org.apache.rocketmq.store.stats.BrokerStatsManager;
@@ -115,7 +115,6 @@ private MessageStore buildMessageStore() throws Exception {
         messageStoreConfig.setFlushDiskType(FlushDiskType.SYNC_FLUSH);
         messageStoreConfig.setFlushIntervalConsumeQueue(1);
         messageStoreConfig.setHaListenPort(StoreTestBase.nextPort());
-        messageStoreConfig.setDefaultCQType(CQType.SimpleCQ.name());
         return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager("simpleTest"), new MyMessageArrivingListener(), new BrokerConfig());
     }
 

File: store/src/test/java/org/apache/rocketmq/store/queue/ConsumeQueueTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.store.queue;
 
+import org.apache.rocketmq.common.attribute.CQType;
 import org.apache.rocketmq.store.ConsumeQueueExt;
 import org.apache.rocketmq.store.DispatchRequest;
 import org.apache.rocketmq.store.MessageStore;
@@ -30,7 +31,7 @@ public class ConsumeQueueTest extends QueueTestBase {
     public void testIterator() throws Exception {
         final int msgNum = 100;
         final int msgSize = 1000;
-        MessageStore messageStore =  createMessageStore(null, true, CQType.SimpleCQ);
+        MessageStore messageStore =  createMessageStore(null, true);
         messageStore.load();
         String topic = UUID.randomUUID().toString();
         //The initial min max offset, before and after the creation of consume queue

File: test/src/test/java/org/apache/rocketmq/test/base/dledger/DLedgerProduceAndConsumeIT.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
-import org.apache.rocketmq.store.queue.CQType;
+import org.apache.rocketmq.common.attribute.CQType;
 import org.apache.rocketmq.test.base.BaseConf;
 import org.apache.rocketmq.test.base.IntegrationTestBase;
 import org.apache.rocketmq.test.factory.ConsumerFactory;
@@ -63,7 +63,6 @@ public MessageStoreConfig buildStoreConfig(String brokerName, String peers, Stri
         storeConfig.setdLegerGroup(brokerName);
         storeConfig.setdLegerSelfId(selfId);
         storeConfig.setdLegerPeers(peers);
-        storeConfig.setDefaultCQType(CQType.SimpleCQ.toString());
         return storeConfig;
     }
 
@@ -83,7 +82,7 @@ public void testProduceAndConsume() throws Exception {
 
         String topic = UUID.randomUUID().toString();
         String consumerGroup = UUID.randomUUID().toString();
-        IntegrationTestBase.initTopic(topic, BaseConf.nsAddr, cluster, 1);
+        IntegrationTestBase.initTopic(topic, BaseConf.nsAddr, cluster, 1, CQType.SimpleCQ);
         DefaultMQProducer producer = ProducerFactory.getRMQProducer(BaseConf.nsAddr);
         DefaultMQPullConsumer consumer = ConsumerFactory.getRMQPullConsumer(BaseConf.nsAddr, consumerGroup);
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateTopicSubCommand.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.OptionGroup;
 import org.apache.commons.cli.Options;
-import org.apache.rocketmq.common.TopicAttributes;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.attribute.AttributeParser;
 import org.apache.rocketmq.common.sysflag.TopicSysFlag;

File: broker/src/test/java/org/apache/rocketmq/broker/topic/TopicConfigManagerTest.java
Patch:
@@ -123,7 +123,7 @@ public void testDeleteKeyOnCreating() {
     @Test
     public void testAddWrongValueOnCreating() {
         Map<String, String> attributes = new HashMap<>();
-        attributes.put("+" + TopicAttributes.queueType.getName(), "wrong-value");
+        attributes.put("+" + TopicAttributes.QUEUE_TYPE.getName(), "wrong-value");
 
         TopicConfig topicConfig = new TopicConfig();
         topicConfig.setTopicName("new-topic");

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -56,7 +56,6 @@
 import org.apache.rocketmq.common.MQVersion;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.PlainAccessConfig;
-import org.apache.rocketmq.common.TopicAttributes;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.admin.ConsumeStats;

File: common/src/main/java/org/apache/rocketmq/common/TopicAttributes.java
Patch:
@@ -25,7 +25,7 @@
 import static com.google.common.collect.Sets.newHashSet;
 
 public class TopicAttributes {
-    public static final EnumAttribute queueType = new EnumAttribute(
+    public static final EnumAttribute QUEUE_TYPE = new EnumAttribute(
             "queue.type",
             false,
             newHashSet("BatchCQ", "SimpleCQ"),
@@ -35,6 +35,6 @@ public class TopicAttributes {
 
     static {
         ALL = new HashMap<>();
-        ALL.put(queueType.getName(), queueType);
+        ALL.put(QUEUE_TYPE.getName(), QUEUE_TYPE);
     }
 }

File: store/src/main/java/org/apache/rocketmq/store/util/QueueTypeUtils.java
Patch:
@@ -39,17 +39,17 @@ public static CQType getCQType(MessageStore messageStore) {
     }
 
     public static CQType getCQType(TopicConfig topicConfig) {
-        String attributeName = TopicAttributes.queueType.getName();
+        String attributeName = TopicAttributes.QUEUE_TYPE.getName();
 
         Map<String, String> attributes = topicConfig.getAttributes();
         if (attributes == null || attributes.size() == 0) {
-            return CQType.valueOf(TopicAttributes.queueType.getDefaultValue());
+            return CQType.valueOf(TopicAttributes.QUEUE_TYPE.getDefaultValue());
         }
 
         if (attributes.containsKey(attributeName)) {
             return CQType.valueOf(attributes.get(attributeName));
         } else {
-            return CQType.valueOf(TopicAttributes.queueType.getDefaultValue());
+            return CQType.valueOf(TopicAttributes.QUEUE_TYPE.getDefaultValue());
         }
     }
 }

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/CreateTopicRequestHeader.java
Patch:
@@ -26,8 +26,6 @@
 import org.apache.rocketmq.remoting.annotation.CFNullable;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 
-import java.util.Map;
-
 public class CreateTopicRequestHeader implements CommandCustomHeader {
     @CFNotNull
     private String topic;

File: test/src/test/java/org/apache/rocketmq/test/statictopic/StaticTopicIT.java
Patch:
@@ -292,6 +292,7 @@ public void testDoubleReadCheckConsumerOffset() throws Exception {
         String group = initConsumerGroup();
         RMQNormalProducer producer = getProducer(nsAddr, topic);
         RMQNormalConsumer consumer = getConsumer(nsAddr, group, topic, "*", new RMQNormalListener());
+        long start = System.currentTimeMillis();
 
         int queueNum = 10;
         int msgEachQueue = 100;
@@ -314,6 +315,7 @@ public void testDoubleReadCheckConsumerOffset() throws Exception {
             Assert.assertNotNull(wrapper);
             Assert.assertEquals(msgEachQueue, wrapper.getBrokerOffset());
             Assert.assertEquals(msgEachQueue, wrapper.getConsumerOffset());
+            Assert.assertTrue(wrapper.getLastTimestamp() > start);
         }
 
         List<String> brokers = ImmutableList.of(broker2Name, broker3Name, broker1Name);
@@ -332,6 +334,7 @@ public void testDoubleReadCheckConsumerOffset() throws Exception {
             Assert.assertNotNull(wrapper);
             Assert.assertEquals(msgEachQueue + brokers.size() * TopicQueueMappingUtils.DEFAULT_BLOCK_SEQ_SIZE, wrapper.getBrokerOffset());
             Assert.assertEquals(msgEachQueue, wrapper.getConsumerOffset());
+            Assert.assertTrue(wrapper.getLastTimestamp() > start);
         }
         consumer = getConsumer(nsAddr, group, topic, "*", new RMQNormalListener());
         consumeMessagesAndCheck(producer, consumer, topic, queueNum, msgEachQueue, 1, brokers.size());

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -56,10 +56,12 @@
 import org.apache.rocketmq.common.MQVersion;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.PlainAccessConfig;
+import org.apache.rocketmq.common.TopicAttributes;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.admin.ConsumeStats;
 import org.apache.rocketmq.common.admin.TopicStatsTable;
+import org.apache.rocketmq.common.attribute.AttributeParser;
 import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.common.message.MessageBatch;
 import org.apache.rocketmq.common.message.MessageClientIDSetter;
@@ -332,6 +334,7 @@ public void createTopic(final String addr, final String defaultTopic, final Topi
         requestHeader.setTopicFilterType(topicConfig.getTopicFilterType().name());
         requestHeader.setTopicSysFlag(topicConfig.getTopicSysFlag());
         requestHeader.setOrder(topicConfig.isOrder());
+        requestHeader.setAttributes(AttributeParser.parseToString(topicConfig.getAttributes()));
 
         RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.UPDATE_AND_CREATE_TOPIC, requestHeader);
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/consumer/SetConsumeModeSubCommand.java
Patch:
@@ -64,7 +64,7 @@ public Options buildCommandlineOptions(Options options) {
         opt.setRequired(true);
         options.addOption(opt);
 
-        opt = new Option("n", "popShareQueueNum", true, "num fo queue which share in pop mode");
+        opt = new Option("q", "popShareQueueNum", true, "num of queue which share in pop mode");
         opt.setRequired(false);
         options.addOption(opt);
 
@@ -89,8 +89,8 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook)
 
 
             int popShareQueueNum = 0;
-            if (commandLine.hasOption('n')) {
-                popShareQueueNum = Integer.parseInt(commandLine.getOptionValue('n')
+            if (commandLine.hasOption('q')) {
+                popShareQueueNum = Integer.parseInt(commandLine.getOptionValue('q')
                         .trim());
             }
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -48,6 +48,7 @@
 import org.apache.rocketmq.tools.command.consumer.ConsumerStatusSubCommand;
 import org.apache.rocketmq.tools.command.consumer.DeleteSubscriptionGroupCommand;
 import org.apache.rocketmq.tools.command.consumer.GetConsumerConfigSubCommand;
+import org.apache.rocketmq.tools.command.consumer.SetConsumeModeSubCommand;
 import org.apache.rocketmq.tools.command.consumer.StartMonitoringSubCommand;
 import org.apache.rocketmq.tools.command.consumer.UpdateSubGroupSubCommand;
 import org.apache.rocketmq.tools.command.export.ExportConfigsCommand;
@@ -160,6 +161,7 @@ public static void initCommand() {
         initCommand(new UpdateTopicSubCommand());
         initCommand(new DeleteTopicSubCommand());
         initCommand(new UpdateSubGroupSubCommand());
+        initCommand(new SetConsumeModeSubCommand());
         initCommand(new DeleteSubscriptionGroupCommand());
         initCommand(new UpdateBrokerConfigSubCommand());
         initCommand(new UpdateTopicPermSubCommand());

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -732,7 +732,7 @@ private SendResult sendKernelImpl(final Message msg,
                 }
 
                 final String tranMsg = msg.getProperty(MessageConst.PROPERTY_TRANSACTION_PREPARED);
-                if (tranMsg != null && Boolean.parseBoolean(tranMsg)) {
+                if (Boolean.parseBoolean(tranMsg)) {
                     sysFlag |= MessageSysFlag.TRANSACTION_PREPARED_TYPE;
                 }
 

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPullConsumer.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.rocketmq.remoting.exception.RemotingException;
 
 /**
+ * @deprecated
  * Default pulling consumer.
  * This class will be removed in 2022, and a better implementation {@link DefaultLitePullConsumer} is recommend to use
  * in the scenario of actively pulling messages.

File: store/src/main/java/org/apache/rocketmq/store/ha/HAConnection.java
Patch:
@@ -168,7 +168,7 @@ private boolean processReadEvent() {
                             if (HAConnection.this.slaveRequestOffset < 0) {
                                 HAConnection.this.slaveRequestOffset = readOffset;
                                 log.info("slave[" + HAConnection.this.clientAddr + "] request offset " + readOffset);
-                            } else if (HAConnection.this.slaveAckOffset > HAConnection.this.haService.getDefaultMessageStore().getMaxPhyOffset()){
+                            } else if (HAConnection.this.slaveAckOffset > HAConnection.this.haService.getDefaultMessageStore().getMaxPhyOffset()) {
                                 log.warn("slave[{}] request offset={} greater than local commitLog offset={}. ",
                                         HAConnection.this.clientAddr,
                                         HAConnection.this.slaveAckOffset,

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -375,7 +375,7 @@ public RemotingCommand invokeSync(String addr, final RemotingCommand request, lo
                 doBeforeRpcHooks(addr, request);
                 long costTime = System.currentTimeMillis() - beginStartTime;
                 if (timeoutMillis < costTime) {
-                    throw new RemotingTimeoutException("invokeSync call timeout");
+                    throw new RemotingTimeoutException("invokeSync call the addr[" + addr + "] timeout");
                 }
                 RemotingCommand response = this.invokeSyncImpl(channel, request, timeoutMillis - costTime);
                 doAfterRpcHooks(RemotingHelper.parseChannelRemoteAddr(channel), request, response);
@@ -525,7 +525,7 @@ public void invokeAsync(String addr, RemotingCommand request, long timeoutMillis
                 doBeforeRpcHooks(addr, request);
                 long costTime = System.currentTimeMillis() - beginStartTime;
                 if (timeoutMillis < costTime) {
-                    throw new RemotingTooMuchRequestException("invokeAsync call timeout");
+                    throw new RemotingTooMuchRequestException("invokeAsync call the addr[" + addr + "] timeout");
                 }
                 this.invokeAsyncImpl(channel, request, timeoutMillis - costTime, invokeCallback);
             } catch (RemotingSendRequestException e) {

File: tools/src/main/java/org/apache/rocketmq/tools/command/offset/ResetOffsetByTimeCommand.java
Patch:
@@ -75,7 +75,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
             String group = commandLine.getOptionValue("g").trim();
             String topic = commandLine.getOptionValue("t").trim();
             String timeStampStr = commandLine.getOptionValue("s").trim();
-            long timestamp = timeStampStr.equals("now") ? System.currentTimeMillis() : 0;
+            long timestamp = timeStampStr.equals("now") ? -1 : 0;
 
             try {
                 if (timestamp == 0) {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java
Patch:
@@ -147,7 +147,7 @@ private enum SubscriptionType {
 
     private final MessageQueueLock messageQueueLock = new MessageQueueLock();
 
-    private final ArrayList<ConsumeMessageHook> consumeMessageHookList = new ArrayList<>();
+    private final ArrayList<ConsumeMessageHook> consumeMessageHookList = new ArrayList<ConsumeMessageHook>();
 
     public DefaultLitePullConsumerImpl(final DefaultLitePullConsumer defaultLitePullConsumer, final RPCHook rpcHook) {
         this.defaultLitePullConsumer = defaultLitePullConsumer;

File: client/src/main/java/org/apache/rocketmq/client/producer/RequestFutureHolder.java
Patch:
@@ -39,7 +39,7 @@ public class RequestFutureHolder {
     private static InternalLogger log = ClientLogger.getLog();
     private static final RequestFutureHolder INSTANCE = new RequestFutureHolder();
     private ConcurrentHashMap<String, RequestResponseFuture> requestFutureTable = new ConcurrentHashMap<String, RequestResponseFuture>();
-    private final Set<DefaultMQProducerImpl> producerSet = new HashSet<>();
+    private final Set<DefaultMQProducerImpl> producerSet = new HashSet<DefaultMQProducerImpl>();
     private ScheduledExecutorService scheduledExecutorService = null;
 
     public ConcurrentHashMap<String, RequestResponseFuture> getRequestFutureTable() {

File: client/src/main/java/org/apache/rocketmq/client/trace/hook/ConsumeMessageOpenTracingHookImpl.java
Patch:
@@ -51,7 +51,7 @@ public void consumeMessageBefore(ConsumeMessageContext context) {
         if (context == null || context.getMsgList() == null || context.getMsgList().isEmpty()) {
             return;
         }
-        List<Span> spanList = new ArrayList<>();
+        List<Span> spanList = new ArrayList<Span>();
         for (MessageExt msg : context.getMsgList()) {
             if (msg == null) {
                 continue;

File: client/src/test/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyServiceTest.java
Patch:
@@ -149,7 +149,7 @@ public PullResult answer(InvocationOnMock mock) throws Throwable {
     @Test
     public void testPullMessage_ConsumeSuccess() throws InterruptedException, RemotingException, MQBrokerException, NoSuchFieldException,Exception {
         final CountDownLatch countDownLatch = new CountDownLatch(1);
-        final AtomicReference<MessageExt> messageAtomic = new AtomicReference<>();
+        final AtomicReference<MessageExt> messageAtomic = new AtomicReference<MessageExt>();
 
         ConsumeMessageConcurrentlyService  normalServie = new ConsumeMessageConcurrentlyService(pushConsumer.getDefaultMQPushConsumerImpl(), new MessageListenerConcurrently() {
             @Override

File: client/src/test/java/org/apache/rocketmq/client/producer/DefaultMQProducerTest.java
Patch:
@@ -257,7 +257,7 @@ public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {
             }
         };
 
-        List<Message> msgs = new ArrayList<>();
+        List<Message> msgs = new ArrayList<Message>();
         for (int i = 0; i < 5; i++) {
             Message message = new Message();
             message.setTopic("test");

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/BrokerConsumeStatsSubCommad.java
Patch:
@@ -105,7 +105,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
             }
 
             ConsumeStatsList consumeStatsList = defaultMQAdminExt.fetchConsumeStatsInBroker(brokerAddr, isOrder, timeoutMillis);
-            System.out.printf("%-32s  %-32s  %-32s  %-4s  %-20s  %-20s  %-20s  %s%n",
+            System.out.printf("%-64s  %-64s  %-32s  %-4s  %-20s  %-20s  %-20s  %s%n",
                 "#Topic",
                 "#Group",
                 "#Broker Name",
@@ -136,8 +136,8 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
 
                             }
                             if (offsetWrapper.getLastTimestamp() > 0)
-                                System.out.printf("%-32s  %-32s  %-32s  %-4d  %-20d  %-20d  %-20d  %s%n",
-                                    UtilAll.frontStringAtLeast(mq.getTopic(), 32),
+                                System.out.printf("%-64s  %-64s  %-32s  %-4d  %-20d  %-20d  %-20d  %s%n",
+                                    UtilAll.frontStringAtLeast(mq.getTopic(), 64),
                                     group,
                                     UtilAll.frontStringAtLeast(mq.getBrokerName(), 32),
                                     mq.getQueueId(),

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicListSubCommand.java
Patch:
@@ -96,10 +96,10 @@ public void execute(final CommandLine commandLine, final Options options,
                     }
 
                     for (String group : groupList.getGroupList()) {
-                        System.out.printf("%-20s  %-48s  %-48s%n",
+                        System.out.printf("%-20s  %-64s  %-64s%n",
                             UtilAll.frontStringAtLeast(clusterName, 20),
-                            UtilAll.frontStringAtLeast(topic, 48),
-                            UtilAll.frontStringAtLeast(group, 48)
+                            UtilAll.frontStringAtLeast(topic, 64),
+                            UtilAll.frontStringAtLeast(group, 64)
                         );
                     }
                 }

File: test/src/test/java/org/apache/rocketmq/test/lmq/TestBenchLmqStore.java
Patch:
@@ -82,7 +82,7 @@ public void testOffset() throws RemotingException, InterruptedException, MQClien
         RebalanceImpl rebalanceImpl = mock(RebalanceImpl.class);
         when(defaultMQPullConsumerImpl.getRebalanceImpl()).thenReturn(rebalanceImpl);
         MQClientInstance mqClientInstance = mock(MQClientInstance.class);
-        when(rebalanceImpl.getMqClientFactory()).thenReturn(mqClientInstance);
+        when(rebalanceImpl.getmQClientFactory()).thenReturn(mqClientInstance);
         MQClientAPIImpl mqClientAPI = mock(MQClientAPIImpl.class);
         when(mqClientInstance.getMQClientAPIImpl()).thenReturn(mqClientAPI);
         TopicRouteData topicRouteData = new TopicRouteData();

File: test/src/main/java/org/apache/rocketmq/test/lmq/benchmark/BenchLmqStore.java
Patch:
@@ -242,7 +242,7 @@ public static void doBenchOffset() throws RemotingException, InterruptedExceptio
         Map<String, Long> offsetMap = new ConcurrentHashMap<>();
         String statKey = "benchOffset";
         TopicRouteData topicRouteData = defaultMQPullConsumers[0].getDefaultMQPullConsumerImpl().
-                getRebalanceImpl().getMqClientFactory().getMQClientAPIImpl().
+                getRebalanceImpl().getmQClientFactory().getMQClientAPIImpl().
                 getTopicRouteInfoFromNameServer(lmqTopic, 3000);
         HashMap<Long, String> brokerMap = topicRouteData.getBrokerDatas().get(0).getBrokerAddrs();
         if (brokerMap == null || brokerMap.isEmpty()) {
@@ -277,7 +277,7 @@ public void run() {
                             defaultMQPullConsumer
                                     .getDefaultMQPullConsumerImpl()
                                     .getRebalanceImpl()
-                                    .getMqClientFactory()
+                                    .getmQClientFactory()
                                     .getMQClientAPIImpl().updateConsumerOffset(brokerAddress, updateHeader, 1000);
                             QueryConsumerOffsetRequestHeader queryHeader = new QueryConsumerOffsetRequestHeader();
                             queryHeader.setTopic(lmq);
@@ -286,7 +286,7 @@ public void run() {
                             long newOffset2 = defaultMQPullConsumer
                                     .getDefaultMQPullConsumerImpl()
                                     .getRebalanceImpl()
-                                    .getMqClientFactory()
+                                    .getmQClientFactory()
                                     .getMQClientAPIImpl()
                                     .queryConsumerOffset(brokerAddress, queryHeader, 1000);
                             offsetMap.put(lmq, newOffset2);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -378,7 +378,7 @@ public boolean sendMessageBack(final MessageExt msg) {
             MessageAccessor.clearProperty(newMsg, MessageConst.PROPERTY_TRANSACTION_PREPARED);
             newMsg.setDelayTimeLevel(3 + msg.getReconsumeTimes());
 
-            this.defaultMQPushConsumer.getDefaultMQPushConsumerImpl().getMqClientFactory().getDefaultMQProducer().send(newMsg);
+            this.defaultMQPushConsumer.getDefaultMQPushConsumerImpl().getmQClientFactory().getDefaultMQProducer().send(newMsg);
             return true;
         } catch (Exception e) {
             log.error("sendMessageBack exception, group: " + this.consumerGroup + " msg: " + msg.toString(), e);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java
Patch:
@@ -329,7 +329,7 @@ private void initRebalanceImpl() {
         this.rebalanceImpl.setConsumerGroup(this.defaultLitePullConsumer.getConsumerGroup());
         this.rebalanceImpl.setMessageModel(this.defaultLitePullConsumer.getMessageModel());
         this.rebalanceImpl.setAllocateMessageQueueStrategy(this.defaultLitePullConsumer.getAllocateMessageQueueStrategy());
-        this.rebalanceImpl.setMqClientFactory(this.mQClientFactory);
+        this.rebalanceImpl.setmQClientFactory(this.mQClientFactory);
     }
 
     private void initPullAPIWrapper() {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java
Patch:
@@ -637,7 +637,7 @@ public synchronized void start() throws MQClientException {
                 this.rebalanceImpl.setConsumerGroup(this.defaultMQPullConsumer.getConsumerGroup());
                 this.rebalanceImpl.setMessageModel(this.defaultMQPullConsumer.getMessageModel());
                 this.rebalanceImpl.setAllocateMessageQueueStrategy(this.defaultMQPullConsumer.getAllocateMessageQueueStrategy());
-                this.rebalanceImpl.setMqClientFactory(this.mQClientFactory);
+                this.rebalanceImpl.setmQClientFactory(this.mQClientFactory);
 
                 this.pullAPIWrapper = new PullAPIWrapper(
                     mQClientFactory,

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -591,7 +591,7 @@ public synchronized void start() throws MQClientException {
                 this.rebalanceImpl.setConsumerGroup(this.defaultMQPushConsumer.getConsumerGroup());
                 this.rebalanceImpl.setMessageModel(this.defaultMQPushConsumer.getMessageModel());
                 this.rebalanceImpl.setAllocateMessageQueueStrategy(this.defaultMQPushConsumer.getAllocateMessageQueueStrategy());
-                this.rebalanceImpl.setMqClientFactory(this.mQClientFactory);
+                this.rebalanceImpl.setmQClientFactory(this.mQClientFactory);
 
                 this.pullAPIWrapper = new PullAPIWrapper(
                     mQClientFactory,
@@ -1089,11 +1089,11 @@ public ConsumerRunningInfo consumerRunningInfo() {
         return info;
     }
 
-    public MQClientInstance getMqClientFactory() {
+    public MQClientInstance getmQClientFactory() {
         return mQClientFactory;
     }
 
-    public void setMqClientFactory(MQClientInstance mQClientFactory) {
+    public void setmQClientFactory(MQClientInstance mQClientFactory) {
         this.mQClientFactory = mQClientFactory;
     }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceImpl.java
Patch:
@@ -472,11 +472,11 @@ public void setAllocateMessageQueueStrategy(AllocateMessageQueueStrategy allocat
         this.allocateMessageQueueStrategy = allocateMessageQueueStrategy;
     }
 
-    public MQClientInstance getMqClientFactory() {
+    public MQClientInstance getmQClientFactory() {
         return mQClientFactory;
     }
 
-    public void setMqClientFactory(MQClientInstance mQClientFactory) {
+    public void setmQClientFactory(MQClientInstance mQClientFactory) {
         this.mQClientFactory = mQClientFactory;
     }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalancePushImpl.java
Patch:
@@ -78,7 +78,7 @@ public void messageQueueChanged(String topic, Set<MessageQueue> mqAll, Set<Messa
         }
 
         // notify broker
-        this.getMqClientFactory().sendHeartbeatToAllBrokerWithLock();
+        this.getmQClientFactory().sendHeartbeatToAllBrokerWithLock();
     }
 
     @Override
@@ -114,7 +114,7 @@ private boolean unlockDelay(final MessageQueue mq, final ProcessQueue pq) {
 
         if (pq.hasTempMessage()) {
             log.info("[{}]unlockDelay, begin {} ", mq.hashCode(), mq);
-            this.defaultMQPushConsumerImpl.getMqClientFactory().getScheduledExecutorService().schedule(new Runnable() {
+            this.defaultMQPushConsumerImpl.getmQClientFactory().getScheduledExecutorService().schedule(new Runnable() {
                 @Override
                 public void run() {
                     log.info("[{}]unlockDelay, execute at once {}", mq.hashCode(), mq);

File: client/src/main/java/org/apache/rocketmq/client/trace/AsyncTraceDispatcher.java
Patch:
@@ -413,7 +413,7 @@ private Set<String> tryGetMessageQueueBrokerSet(DefaultMQProducerImpl producer,
             TopicPublishInfo topicPublishInfo = producer.getTopicPublishInfoTable().get(topic);
             if (null == topicPublishInfo || !topicPublishInfo.ok()) {
                 producer.getTopicPublishInfoTable().putIfAbsent(topic, new TopicPublishInfo());
-                producer.getMqClientFactory().updateTopicRouteInfoFromNameServer(topic);
+                producer.getmQClientFactory().updateTopicRouteInfoFromNameServer(topic);
                 topicPublishInfo = producer.getTopicPublishInfoTable().get(topic);
             }
             if (topicPublishInfo.isHaveTopicRouterInfo() || topicPublishInfo.ok()) {

File: client/src/main/java/org/apache/rocketmq/client/trace/hook/EndTransactionTraceHookImpl.java
Patch:
@@ -63,7 +63,7 @@ public void endTransaction(EndTransactionContext context) {
         traceBean.setKeys(context.getMessage().getKeys());
         traceBean.setStoreHost(context.getBrokerAddr());
         traceBean.setMsgType(MessageType.Trans_msg_Commit);
-        traceBean.setClientHost(((AsyncTraceDispatcher)localDispatcher).getHostProducer().getMqClientFactory().getClientId());
+        traceBean.setClientHost(((AsyncTraceDispatcher)localDispatcher).getHostProducer().getmQClientFactory().getClientId());
         traceBean.setMsgId(context.getMsgId());
         traceBean.setTransactionState(context.getTransactionState());
         traceBean.setTransactionId(context.getTransactionId());

File: client/src/test/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyServiceTest.java
Patch:
@@ -102,7 +102,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
         pushConsumer.subscribe(topic, "*");
         pushConsumer.start();
 
-        mQClientFactory = spy(pushConsumerImpl.getMqClientFactory());
+        mQClientFactory = spy(pushConsumerImpl.getmQClientFactory());
         field = DefaultMQPushConsumerImpl.class.getDeclaredField("mQClientFactory");
         field.setAccessible(true);
         field.set(pushConsumerImpl, mQClientFactory);
@@ -116,7 +116,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
         field.setAccessible(true);
         field.set(pushConsumerImpl, pullAPIWrapper);
 
-        pushConsumer.getDefaultMQPushConsumerImpl().getRebalanceImpl().setMqClientFactory(mQClientFactory);
+        pushConsumer.getDefaultMQPushConsumerImpl().getRebalanceImpl().setmQClientFactory(mQClientFactory);
         mQClientFactory.registerConsumer(consumerGroup, pushConsumerImpl);
 
         when(mQClientFactory.getMQClientAPIImpl().pullMessage(anyString(), any(PullMessageRequestHeader.class),

File: client/src/test/java/org/apache/rocketmq/client/producer/DefaultMQProducerTest.java
Patch:
@@ -102,7 +102,7 @@ public void init() throws Exception {
         field.setAccessible(true);
         field.set(mQClientFactory, mQClientAPIImpl);
 
-        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
 
         when(mQClientAPIImpl.sendMessage(anyString(), anyString(), any(Message.class), any(SendMessageRequestHeader.class), anyLong(), any(CommunicationMode.class),
             nullable(SendMessageContext.class), any(DefaultMQProducerImpl.class))).thenCallRealMethod();
@@ -358,7 +358,7 @@ public void testSetCallbackExecutor() throws MQClientException {
         producer.setCallbackExecutor(customized);
 
         NettyRemotingClient remotingClient = (NettyRemotingClient) producer.getDefaultMQProducerImpl()
-            .getMqClientFactory().getMQClientAPIImpl().getRemotingClient();
+            .getmQClientFactory().getMQClientAPIImpl().getRemotingClient();
 
         assertThat(remotingClient.getCallbackExecutor()).isEqualTo(customized);
     }

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQLitePullConsumerWithTraceTest.java
Patch:
@@ -218,7 +218,7 @@ private void initDefaultLitePullConsumer(DefaultLitePullConsumer litePullConsume
         field.setAccessible(true);
         field.set(litePullConsumerImpl, offsetStore);
 
-        traceProducer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
+        traceProducer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
 
         when(mQClientFactory.getMQClientAPIImpl().pullMessage(anyString(), any(PullMessageRequestHeader.class),
             anyLong(), any(CommunicationMode.class), nullable(PullCallback.class)))

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQProducerWithOpenTracingTest.java
Patch:
@@ -100,7 +100,7 @@ public void init() throws Exception {
         field.setAccessible(true);
         field.set(mQClientFactory, mQClientAPIImpl);
 
-        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
 
         when(mQClientAPIImpl.sendMessage(anyString(), anyString(), any(Message.class), any(SendMessageRequestHeader.class), anyLong(), any(CommunicationMode.class),
             nullable(SendMessageContext.class), any(DefaultMQProducerImpl.class))).thenCallRealMethod();
@@ -112,7 +112,7 @@ public void init() throws Exception {
 
     @Test
     public void testSendMessageSync_WithTrace_Success() throws RemotingException, InterruptedException, MQBrokerException, MQClientException {
-        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, producer.getDefaultMQProducerImpl());
         when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());
         producer.send(message);
         assertThat(tracer.finishedSpans().size()).isEqualTo(1);

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQProducerWithTraceTest.java
Patch:
@@ -109,7 +109,7 @@ public void init() throws Exception {
         field.setAccessible(true);
         field.set(mQClientFactory, mQClientAPIImpl);
 
-        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
 
         when(mQClientAPIImpl.sendMessage(anyString(), anyString(), any(Message.class), any(SendMessageRequestHeader.class), anyLong(), any(CommunicationMode.class),
             nullable(SendMessageContext.class), any(DefaultMQProducerImpl.class))).thenCallRealMethod();
@@ -121,7 +121,7 @@ public void init() throws Exception {
 
     @Test
     public void testSendMessageSync_WithTrace_Success() throws RemotingException, InterruptedException, MQBrokerException, MQClientException {
-        traceProducer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
+        traceProducer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
         when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());
         final CountDownLatch countDownLatch = new CountDownLatch(1);
         try {

File: client/src/test/java/org/apache/rocketmq/client/trace/TransactionMQProducerWithOpenTracingTest.java
Patch:
@@ -118,7 +118,7 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
         field.setAccessible(true);
         field.set(mQClientFactory, mQClientAPIImpl);
 
-        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
 
         when(mQClientAPIImpl.sendMessage(anyString(), anyString(), any(Message.class), any(SendMessageRequestHeader.class), anyLong(), any(CommunicationMode.class),
             nullable(SendMessageContext.class), any(DefaultMQProducerImpl.class))).thenCallRealMethod();
@@ -130,7 +130,7 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
 
     @Test
     public void testSendMessageSync_WithTrace_Success() throws RemotingException, InterruptedException, MQBrokerException, MQClientException {
-        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, producer.getDefaultMQProducerImpl());
         when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());
         producer.sendMessageInTransaction(message, null);
 

File: client/src/test/java/org/apache/rocketmq/client/trace/TransactionMQProducerWithTraceTest.java
Patch:
@@ -123,7 +123,7 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
         field.setAccessible(true);
         field.set(mQClientFactory, mQClientAPIImpl);
 
-        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
 
         Field fieldHooks = DefaultMQProducerImpl.class.getDeclaredField("endTransactionHookList");
         fieldHooks.setAccessible(true);
@@ -141,7 +141,7 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
 
     @Test
     public void testSendMessageSync_WithTrace_Success() throws RemotingException, InterruptedException, MQBrokerException, MQClientException {
-        traceProducer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
+        traceProducer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
         when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());
         AtomicReference<EndTransactionContext> context = new AtomicReference<>();
         doAnswer(mock -> {

File: example/src/main/java/org/apache/rocketmq/example/simple/PullConsumer.java
Patch:
@@ -136,7 +136,7 @@ public long consumeFromOffset(MessageQueue messageQueue) throws MQClientExceptio
                 }
 
                 public void incPullTPS(String topic, int pullSize) {
-                    consumer.getDefaultMQPullConsumerImpl().getRebalanceImpl().getMqClientFactory()
+                    consumer.getDefaultMQPullConsumerImpl().getRebalanceImpl().getmQClientFactory()
                             .getConsumerStatsManager().incPullTPS(consumer.getConsumerGroup(), topic, pullSize);
                 }
             });

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -72,6 +72,7 @@
 import org.apache.rocketmq.tools.command.namesrv.WipeWritePermSubCommand;
 import org.apache.rocketmq.tools.command.offset.CloneGroupOffsetCommand;
 import org.apache.rocketmq.tools.command.offset.ResetOffsetByTimeCommand;
+import org.apache.rocketmq.tools.command.offset.SkipAccumulationSubCommand;
 import org.apache.rocketmq.tools.command.queue.QueryConsumeQueueCommand;
 import org.apache.rocketmq.tools.command.stats.StatsAllSubCommand;
 import org.apache.rocketmq.tools.command.topic.AllocateMQSubCommand;
@@ -192,6 +193,7 @@ public static void initCommand() {
         initCommand(new WipeWritePermSubCommand());
         initCommand(new AddWritePermSubCommand());
         initCommand(new ResetOffsetByTimeCommand());
+        initCommand(new SkipAccumulationSubCommand());
 
         initCommand(new UpdateOrderConfCommand());
         initCommand(new CleanExpiredCQSubCommand());

File: remoting/src/main/java/org/apache/rocketmq/remoting/common/RemotingHelper.java
Patch:
@@ -47,9 +47,9 @@ public static String exceptionSimpleDesc(final Throwable e) {
 
             StackTraceElement[] stackTrace = e.getStackTrace();
             if (stackTrace != null && stackTrace.length > 0) {
-                StackTraceElement elment = stackTrace[0];
+                StackTraceElement element = stackTrace[0];
                 sb.append(", ");
-                sb.append(elment.toString());
+                sb.append(element.toString());
             }
         }
 

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -484,7 +484,9 @@ public List<RollbackStats> resetOffsetByTimestampOld(String consumerGroup, Strin
         Map<String, Integer> topicRouteMap = new HashMap<String, Integer>();
         for (BrokerData bd : topicRouteData.getBrokerDatas()) {
             for (QueueData queueData : topicRouteData.getQueueDatas()) {
-                topicRouteMap.put(bd.selectBrokerAddr(), queueData.getReadQueueNums());
+                if (StringUtils.equals(queueData.getBrokerName(), bd.getBrokerName())) {
+                    topicRouteMap.put(bd.selectBrokerAddr(), queueData.getReadQueueNums());
+                }
             }
         }
         for (BrokerData bd : topicRouteData.getBrokerDatas()) {

File: test/src/test/java/org/apache/rocketmq/test/delay/NormalMsgDelayIT.java
Patch:
@@ -31,7 +31,7 @@
 import org.junit.Test;
 
 public class NormalMsgDelayIT extends DelayConf {
-    private static Logger logger = Logger.getLogger(NormalMsgStaticBalanceIT.class);
+    private static Logger logger = Logger.getLogger(NormalMsgDelayIT.class);
     protected int msgSize = 100;
     private RMQNormalProducer producer = null;
     private RMQNormalConsumer consumer = null;

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -1228,7 +1228,7 @@ public void run() {
             try {
                 Thread.sleep(10);
             } catch (InterruptedException e) {
-                CommitLog.log.warn("GroupCommitService Exception, ", e);
+                CommitLog.log.warn(this.getServiceName() + " Exception, ", e);
             }
 
             synchronized (this) {

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -924,7 +924,7 @@ public boolean appendToCommitLog(long startOffset, byte[] data, int dataStart, i
 
     @Override
     public void executeDeleteFilesManually() {
-        this.cleanCommitLogService.excuteDeleteFilesManualy();
+        this.cleanCommitLogService.executeDeleteFilesManually();
     }
 
     @Override
@@ -1590,7 +1590,7 @@ class CleanCommitLogService {
 
         private volatile boolean cleanImmediately = false;
 
-        public void excuteDeleteFilesManualy() {
+        public void executeDeleteFilesManually() {
             this.manualDeleteFileSeveralTimes = MAX_MANUAL_DELETE_FILE_TIMES;
             DefaultMessageStore.log.info("executeDeleteFilesManually was invoked");
         }

File: store/src/main/java/org/apache/rocketmq/store/StoreStatsService.java
Patch:
@@ -177,6 +177,7 @@ public String toString() {
         sb.append("\truntime: " + this.getFormatRuntime() + "\r\n");
         sb.append("\tputMessageEntireTimeMax: " + this.putMessageEntireTimeMax + "\r\n");
         sb.append("\tputMessageTimesTotal: " + totalTimes + "\r\n");
+        sb.append("\tgetPutMessageFailedTimes: " + this.getPutMessageFailedTimes() + "\r\n");
         sb.append("\tputMessageSizeTotal: " + this.getPutMessageSizeTotal() + "\r\n");
         sb.append("\tputMessageDistributeTime: " + this.getPutMessageDistributeTimeStringInfo(totalTimes)
             + "\r\n");
@@ -429,6 +430,7 @@ public HashMap<String, String> getRuntimeInfo() {
         result.put("runtime", this.getFormatRuntime());
         result.put("putMessageEntireTimeMax", String.valueOf(this.putMessageEntireTimeMax));
         result.put("putMessageTimesTotal", String.valueOf(totalTimes));
+        result.put("putMessageFailedTimes", String.valueOf(this.putMessageFailedTimes));
         result.put("putMessageSizeTotal", String.valueOf(this.getPutMessageSizeTotal()));
         result.put("putMessageDistributeTime",
             String.valueOf(this.getPutMessageDistributeTimeStringInfo(totalTimes)));

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -358,7 +358,7 @@ private boolean handleRetryAndDLQ(SendMessageRequestHeader requestHeader, Remoti
             }
 
             int maxReconsumeTimes = subscriptionGroupConfig.getRetryMaxTimes();
-            if (request.getVersion() >= MQVersion.Version.V3_4_9.ordinal()) {
+            if (request.getVersion() >= MQVersion.Version.V3_4_9.ordinal() && requestHeader.getMaxReconsumeTimes() != null) {
                 maxReconsumeTimes = requestHeader.getMaxReconsumeTimes();
             }
             int reconsumeTimes = requestHeader.getReconsumeTimes() == null ? 0 : requestHeader.getReconsumeTimes();

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExt.java
Patch:
@@ -424,7 +424,7 @@ public boolean cleanExpiredConsumerQueueByAddr(
     @Override
     public boolean cleanUnusedTopic(String cluster) throws RemotingConnectException, RemotingSendRequestException,
         RemotingTimeoutException, MQClientException, InterruptedException {
-        return defaultMQAdminExtImpl.cleanUnusedTopicByAddr(cluster);
+        return defaultMQAdminExtImpl.cleanUnusedTopic(cluster);
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/CleanUnusedTopicCommand.java
Patch:
@@ -66,7 +66,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
                 String cluster = commandLine.getOptionValue('c');
                 if (null != cluster)
                     cluster = cluster.trim();
-                result = defaultMQAdminExt.cleanUnusedTopicByAddr(cluster);
+                result = defaultMQAdminExt.cleanUnusedTopic(cluster);
             }
             System.out.printf(result ? "success" : "false");
         } catch (Exception e) {

File: test/src/test/java/org/apache/rocketmq/test/client/producer/exception/msg/MessageExceptionIT.java
Patch:
@@ -59,7 +59,7 @@ public void testProducerSmoke() {
         assertThat(sendResult.getSendStatus()).isEqualTo(SendStatus.SEND_OK);
     }
 
-    @Test(expected = org.apache.rocketmq.client.exception.MQClientException.class)
+    @Test(expected = java.lang.NullPointerException.class)
     public void testSynSendNullMessage() throws Exception {
         producer.send((Message) null);
     }

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -27,6 +27,7 @@
 import io.netty.channel.ChannelPromise;
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.SimpleChannelInboundHandler;
+import io.netty.channel.WriteBufferWaterMark;
 import io.netty.channel.nio.NioEventLoopGroup;
 import io.netty.channel.socket.SocketChannel;
 import io.netty.channel.socket.nio.NioSocketChannel;
@@ -167,6 +168,8 @@ public Thread newThread(Runnable r) {
             .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, nettyClientConfig.getConnectTimeoutMillis())
             .option(ChannelOption.SO_SNDBUF, nettyClientConfig.getClientSocketSndBufSize())
             .option(ChannelOption.SO_RCVBUF, nettyClientConfig.getClientSocketRcvBufSize())
+            .option(ChannelOption.WRITE_BUFFER_WATER_MARK, new WriteBufferWaterMark(nettyClientConfig.getWriteBufferLowWaterMark(),
+                nettyClientConfig.getWriteBufferHighWaterMark()))
             .handler(new ChannelInitializer<SocketChannel>() {
                 @Override
                 public void initChannel(SocketChannel ch) throws Exception {

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingServer.java
Patch:
@@ -28,6 +28,7 @@
 import io.netty.channel.ChannelOption;
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.SimpleChannelInboundHandler;
+import io.netty.channel.WriteBufferWaterMark;
 import io.netty.channel.epoll.Epoll;
 import io.netty.channel.epoll.EpollEventLoopGroup;
 import io.netty.channel.epoll.EpollServerSocketChannel;
@@ -204,6 +205,8 @@ public Thread newThread(Runnable r) {
                 .childOption(ChannelOption.TCP_NODELAY, true)
                 .childOption(ChannelOption.SO_SNDBUF, nettyServerConfig.getServerSocketSndBufSize())
                 .childOption(ChannelOption.SO_RCVBUF, nettyServerConfig.getServerSocketRcvBufSize())
+                .childOption(ChannelOption.WRITE_BUFFER_WATER_MARK, new WriteBufferWaterMark(
+                    nettyServerConfig.getWriteBufferLowWaterMark(), nettyServerConfig.getWriteBufferHighWaterMark()))
                 .localAddress(new InetSocketAddress(this.nettyServerConfig.getListenPort()))
                 .childHandler(new ChannelInitializer<SocketChannel>() {
                     @Override

File: remoting/src/main/java/org/apache/rocketmq/remoting/common/RemotingHelper.java
Patch:
@@ -62,7 +62,7 @@ public static SocketAddress string2SocketAddress(final String addr) {
 
     public static RemotingCommand invokeSync(final String addr, final RemotingCommand request,
         final long timeoutMillis) throws InterruptedException, RemotingConnectException,
-            RemotingSendRequestException, RemotingTimeoutException, RemotingCommandException {
+        RemotingSendRequestException, RemotingTimeoutException, RemotingCommandException {
         long beginTime = System.currentTimeMillis();
         SocketAddress socketAddress = RemotingUtil.string2SocketAddress(addr);
         SocketChannel socketChannel = RemotingUtil.connect(socketAddress);

File: remoting/src/test/java/org/apache/rocketmq/remoting/protocol/RemotingCommandTest.java
Patch:
@@ -130,7 +130,6 @@ public void testEncodeAndDecode_EmptyBody() {
             Assert.fail("Should not throw IOException");
         }
 
-
     }
 
     @Test

File: remoting/src/test/java/org/apache/rocketmq/remoting/protocol/RocketMQSerializableTest.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.rocketmq.remoting.protocol;
 
 import java.util.HashMap;
-
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.junit.Assert;
 import org.junit.Test;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -84,7 +84,7 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx,
 
     @Override
     public void asyncProcessRequest(ChannelHandlerContext ctx, RemotingCommand request, RemotingResponseCallback responseCallback) throws Exception {
-        asyncProcessRequest(ctx, request).thenAcceptAsync(responseCallback::callback, this.brokerController.getSendMessageExecutor());
+        asyncProcessRequest(ctx, request).thenAcceptAsync(responseCallback::callback, this.brokerController.getPutMessageFutureExecutor());
     }
 
     public CompletableFuture<RemotingCommand> asyncProcessRequest(ChannelHandlerContext ctx,

File: broker/src/test/java/org/apache/rocketmq/broker/BrokerControllerTest.java
Patch:
@@ -71,7 +71,6 @@ public void run() {
 
             }
         };
-        queue.add(runnable);
 
         RequestTask requestTask = new RequestTask(runnable, null, null);
         // the requestTask is not the head of queue;
@@ -80,6 +79,5 @@ public void run() {
         long headSlowTimeMills = 100;
         TimeUnit.MILLISECONDS.sleep(headSlowTimeMills);
         assertThat(brokerController.headSlowTimeMills(queue)).isGreaterThanOrEqualTo(headSlowTimeMills);
-        //Attention: if we use the previous version method BrokerController#headSlowTimeMills, it will return 0;
     }
 }

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -206,7 +206,7 @@ public BrokerController(
         this.heartbeatThreadPoolQueue = new LinkedBlockingQueue<Runnable>(this.brokerConfig.getHeartbeatThreadPoolQueueCapacity());
         this.endTransactionThreadPoolQueue = new LinkedBlockingQueue<Runnable>(this.brokerConfig.getEndTransactionPoolQueueCapacity());
 
-        this.brokerStatsManager = new BrokerStatsManager(this.brokerConfig.getBrokerClusterName());
+        this.brokerStatsManager = new BrokerStatsManager(this.brokerConfig.getBrokerClusterName(), this.brokerConfig.isEnableDetailStat());
         this.setStoreHost(new InetSocketAddress(this.getBrokerConfig().getBrokerIP1(), this.getNettyServerConfig().getListenPort()));
 
         this.brokerFastFailure = new BrokerFastFailure(this);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PullMessageProcessor.java
Patch:
@@ -91,6 +91,7 @@ public boolean rejectRequest() {
 
     private RemotingCommand processRequest(final Channel channel, RemotingCommand request, boolean brokerAllowSuspend)
         throws RemotingCommandException {
+        final long beginTimeMills = this.brokerController.getMessageStore().now();
         RemotingCommand response = RemotingCommand.createResponseCommand(PullMessageResponseHeader.class);
         final PullMessageResponseHeader responseHeader = (PullMessageResponseHeader) response.readCustomHeader();
         final PullMessageRequestHeader requestHeader =
@@ -379,7 +380,6 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
 
                     this.brokerController.getBrokerStatsManager().incBrokerGetNums(getMessageResult.getMessageCount());
                     if (this.brokerController.getBrokerConfig().isTransferMsgByHeap()) {
-                        final long beginTimeMills = this.brokerController.getMessageStore().now();
                         final byte[] r = this.readGetMessageResult(getMessageResult, requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueId());
                         this.brokerController.getBrokerStatsManager().incGroupGetLatency(requestHeader.getConsumerGroup(),
                             requestHeader.getTopic(), requestHeader.getQueueId(),

File: broker/src/test/java/org/apache/rocketmq/broker/filter/MessageStoreWithFilterTest.java
Patch:
@@ -146,7 +146,7 @@ protected DefaultMessageStore gen(ConsumerFilterManager filterManager) throws Ex
 
         DefaultMessageStore master = new DefaultMessageStore(
             messageStoreConfig,
-            new BrokerStatsManager(brokerConfig.getBrokerClusterName()),
+            new BrokerStatsManager(brokerConfig.getBrokerClusterName(), brokerConfig.isEnableDetailStat()),
             new MessageArrivingListener() {
                 @Override
                 public void arriving(String topic, int queueId, long logicOffset, long tagsCode,

File: store/src/test/java/org/apache/rocketmq/store/BatchPutMessageTest.java
Patch:
@@ -76,7 +76,7 @@ private MessageStore buildMessageStore() throws Exception {
         messageStoreConfig.setFlushIntervalConsumeQueue(1);
         messageStoreConfig.setStorePathRootDir(System.getProperty("user.home") + File.separator + "putmessagesteststore");
         messageStoreConfig.setStorePathCommitLog(System.getProperty("user.home") + File.separator + "putmessagesteststore" + File.separator + "commitlog");
-        return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager("simpleTest"), new MyMessageArrivingListener(), new BrokerConfig());
+        return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager("simpleTest", true), new MyMessageArrivingListener(), new BrokerConfig());
     }
 
     @Test

File: store/src/test/java/org/apache/rocketmq/store/ConsumeQueueTest.java
Patch:
@@ -130,7 +130,7 @@ protected DefaultMessageStore gen() throws Exception {
 
         DefaultMessageStore master = new DefaultMessageStore(
             messageStoreConfig,
-            new BrokerStatsManager(brokerConfig.getBrokerClusterName()),
+            new BrokerStatsManager(brokerConfig.getBrokerClusterName(), brokerConfig.isEnableDetailStat()),
             new MessageArrivingListener() {
                 @Override
                 public void arriving(String topic, int queueId, long logicOffset, long tagsCode,

File: store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreCleanFilesTest.java
Patch:
@@ -486,7 +486,7 @@ private MessageStoreConfig genMessageStoreConfig(String deleteWhen, int diskMaxU
 
     private void initMessageStore(MessageStoreConfig messageStoreConfig, double diskSpaceCleanForciblyRatio) throws Exception {
         messageStore = new DefaultMessageStore(messageStoreConfig,
-                new BrokerStatsManager("test"), new MyMessageArrivingListener(), new BrokerConfig());
+                new BrokerStatsManager("test", true), new MyMessageArrivingListener(), new BrokerConfig());
 
         cleanCommitLogService = getCleanCommitLogService(diskSpaceCleanForciblyRatio);
         cleanConsumeQueueService = getCleanConsumeQueueService();

File: store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreShutDownTest.java
Patch:
@@ -70,7 +70,7 @@ public DefaultMessageStore buildMessageStore() throws Exception {
         messageStoreConfig.setMaxHashSlotNum(10000);
         messageStoreConfig.setMaxIndexNum(100 * 100);
         messageStoreConfig.setFlushDiskType(FlushDiskType.SYNC_FLUSH);
-        return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager("simpleTest"), null, new BrokerConfig());
+        return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager("simpleTest", true), null, new BrokerConfig());
     }
 
 

File: store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreTest.java
Patch:
@@ -112,7 +112,7 @@ private MessageStore buildMessageStore() throws Exception {
         messageStoreConfig.setMaxIndexNum(100 * 100);
         messageStoreConfig.setFlushDiskType(FlushDiskType.SYNC_FLUSH);
         messageStoreConfig.setFlushIntervalConsumeQueue(1);
-        return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager("simpleTest"), new MyMessageArrivingListener(), new BrokerConfig());
+        return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager("simpleTest", true), new MyMessageArrivingListener(), new BrokerConfig());
     }
 
     @Test

File: store/src/test/java/org/apache/rocketmq/store/HATest.java
Patch:
@@ -60,7 +60,7 @@ public class HATest {
     private MessageStore slaveMessageStore;
     private MessageStoreConfig masterMessageStoreConfig;
     private MessageStoreConfig slaveStoreConfig;
-    private BrokerStatsManager brokerStatsManager = new BrokerStatsManager("simpleTest");
+    private BrokerStatsManager brokerStatsManager = new BrokerStatsManager("simpleTest", true);
     private String storePathRootParentDir = System.getProperty("user.home") + File.separator +
             UUID.randomUUID().toString().replace("-", "");
     private String storePathRootDir = storePathRootParentDir + File.separator + "store";

File: store/src/test/java/org/apache/rocketmq/store/ScheduleMessageServiceTest.java
Patch:
@@ -79,6 +79,6 @@ private MessageStore buildMessageStore() throws Exception {
         messageStoreConfig.setMaxIndexNum(100 * 100);
         messageStoreConfig.setFlushDiskType(FlushDiskType.SYNC_FLUSH);
         messageStoreConfig.setFlushIntervalConsumeQueue(1);
-        return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager("simpleTest"), null, new BrokerConfig());
+        return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager("simpleTest", true), null, new BrokerConfig());
     }
 }

File: store/src/test/java/org/apache/rocketmq/store/dledger/MessageStoreTestBase.java
Patch:
@@ -56,7 +56,7 @@ protected DefaultMessageStore createDledgerMessageStore(String base, String grou
         storeConfig.setdLegerGroup(group);
         storeConfig.setdLegerPeers(peers);
         storeConfig.setdLegerSelfId(selfId);
-        DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig,  new BrokerStatsManager("DLedgerCommitlogTest"), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {
+        DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig,  new BrokerStatsManager("DLedgerCommitlogTest", true), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {
 
         }, new BrokerConfig());
         DLedgerServer dLegerServer = ((DLedgerCommitLog) defaultMessageStore.getCommitLog()).getdLedgerServer();
@@ -106,7 +106,7 @@ protected DefaultMessageStore createMessageStore(String base, boolean createAbor
         storeConfig.setStorePathRootDir(base);
         storeConfig.setStorePathCommitLog(base + File.separator + "commitlog");
         storeConfig.setFlushDiskType(FlushDiskType.ASYNC_FLUSH);
-        DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig,  new BrokerStatsManager("CommitlogTest"), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {
+        DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig,  new BrokerStatsManager("CommitlogTest", true), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {
 
         }, new BrokerConfig());
 

File: store/src/test/java/org/apache/rocketmq/store/schedule/ScheduleMessageServiceTest.java
Patch:
@@ -103,7 +103,7 @@ public void init() throws Exception {
         messageStoreConfig.setStorePathCommitLog(storePath + File.separator + "commitlog");
 
         brokerConfig = new BrokerConfig();
-        BrokerStatsManager manager = new BrokerStatsManager(brokerConfig.getBrokerClusterName());
+        BrokerStatsManager manager = new BrokerStatsManager(brokerConfig.getBrokerClusterName(), brokerConfig.isEnableDetailStat());
         messageStore = new DefaultMessageStore(messageStoreConfig, manager, new MyMessageArrivingListener(), new BrokerConfig());
 
         assertThat(messageStore.load()).isTrue();

File: store/src/test/java/stats/BrokerStatsManagerTest.java
Patch:
@@ -47,7 +47,7 @@ public class BrokerStatsManagerTest {
 
     @Before
     public void init() {
-        brokerStatsManager = new BrokerStatsManager("DefaultCluster");
+        brokerStatsManager = new BrokerStatsManager("DefaultCluster", true);
         brokerStatsManager.start();
     }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -65,6 +65,7 @@
 import org.apache.rocketmq.common.constant.PermName;
 import org.apache.rocketmq.common.filter.ExpressionType;
 import org.apache.rocketmq.common.protocol.NamespaceUtil;
+import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
@@ -671,7 +672,7 @@ public boolean updateTopicRouteInfoFromNameServer(final String topic, boolean is
                         log.warn("updateTopicRouteInfoFromNameServer, getTopicRouteInfoFromNameServer return null, Topic: {}. [{}]", topic, this.clientId);
                     }
                 } catch (MQClientException e) {
-                    if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
+                    if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX) && !topic.equals(TopicValidator.AUTO_CREATE_TOPIC_KEY_TOPIC)) {
                         log.warn("updateTopicRouteInfoFromNameServer Exception", e);
                     }
                 } catch (RemotingException e) {

File: store/src/test/java/org/apache/rocketmq/store/ScheduleMessageServiceTest.java
Patch:
@@ -66,7 +66,7 @@ public void testCorrectDelayOffset_whenInit() throws Exception {
         offsetTable = (ConcurrentMap<Integer, Long>) field.get(scheduleMessageService);
 
         for (long offset : offsetTable.values()) {
-            assertEquals(offset, 0);
+            assertEquals(0, offset);
         }
 
     }

File: broker/src/test/java/org/apache/rocketmq/broker/processor/SendMessageProcessorTest.java
Patch:
@@ -88,7 +88,9 @@ public void init() {
         Channel mockChannel = mock(Channel.class);
         when(mockChannel.remoteAddress()).thenReturn(new InetSocketAddress(1024));
         when(handlerContext.channel()).thenReturn(mockChannel);
-        when(messageStore.lookMessageByOffset(anyLong())).thenReturn(new MessageExt());
+        MessageExt messageExt = new MessageExt();
+        messageExt.setTopic(topic);
+        when(messageStore.lookMessageByOffset(anyLong())).thenReturn(messageExt);
         sendMessageProcessor = new SendMessageProcessor(brokerController);
     }
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -570,10 +570,11 @@ class NettyEventExecutor extends ServiceThread {
         private final int maxSize = 10000;
 
         public void putNettyEvent(final NettyEvent event) {
-            if (this.eventQueue.size() <= maxSize) {
+            int currentSize = this.eventQueue.size();
+            if (currentSize <= maxSize) {
                 this.eventQueue.add(event);
             } else {
-                log.warn("event queue size[{}] enough, so drop this event {}", this.eventQueue.size(), event.toString());
+                log.warn("event queue size [{}] over the limit [{}], so drop this event {}", currentSize, maxSize, event.toString());
             }
         }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/ClientRemotingProcessor.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
 import org.apache.rocketmq.client.impl.producer.MQProducerInner;
 import org.apache.rocketmq.client.log.ClientLogger;
-import org.apache.rocketmq.client.producer.RequestFutureTable;
+import org.apache.rocketmq.client.producer.RequestFutureHolder;
 import org.apache.rocketmq.client.producer.RequestResponseFuture;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.message.MessageAccessor;
@@ -274,11 +274,11 @@ private RemotingCommand receiveReplyMessage(ChannelHandlerContext ctx,
 
     private void processReplyMessage(MessageExt replyMsg) {
         final String correlationId = replyMsg.getUserProperty(MessageConst.PROPERTY_CORRELATION_ID);
-        final RequestResponseFuture requestResponseFuture = RequestFutureTable.getRequestFutureTable().get(correlationId);
+        final RequestResponseFuture requestResponseFuture = RequestFutureHolder.getInstance().getRequestFutureTable().get(correlationId);
         if (requestResponseFuture != null) {
             requestResponseFuture.putResponseMessage(replyMsg);
 
-            RequestFutureTable.getRequestFutureTable().remove(correlationId);
+            RequestFutureHolder.getInstance().getRequestFutureTable().remove(correlationId);
 
             if (requestResponseFuture.getRequestCallback() != null) {
                 requestResponseFuture.getRequestCallback().onSuccess(replyMsg);

File: client/src/test/java/org/apache/rocketmq/client/producer/DefaultMQProducerTest.java
Patch:
@@ -369,7 +369,7 @@ public void testRequestMessage() throws RemotingException, RequestTimeoutExcepti
         final AtomicBoolean finish = new AtomicBoolean(false);
         new Thread(new Runnable() {
             @Override public void run() {
-                ConcurrentHashMap<String, RequestResponseFuture> responseMap = RequestFutureTable.getRequestFutureTable();
+                ConcurrentHashMap<String, RequestResponseFuture> responseMap = RequestFutureHolder.getInstance().getRequestFutureTable();
                 assertThat(responseMap).isNotNull();
                 while (!finish.get()) {
                     try {
@@ -411,7 +411,7 @@ public void testAsyncRequest_OnSuccess() throws Exception {
             }
         };
         producer.request(message, requestCallback, 3 * 1000L);
-        ConcurrentHashMap<String, RequestResponseFuture> responseMap = RequestFutureTable.getRequestFutureTable();
+        ConcurrentHashMap<String, RequestResponseFuture> responseMap = RequestFutureHolder.getInstance().getRequestFutureTable();
         assertThat(responseMap).isNotNull();
         for (Map.Entry<String, RequestResponseFuture> entry : responseMap.entrySet()) {
             RequestResponseFuture future = entry.getValue();
@@ -447,7 +447,7 @@ public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {
             producer.request(message, requestCallback, 3 * 1000L);
             failBecauseExceptionWasNotThrown(Exception.class);
         } catch (Exception e) {
-            ConcurrentHashMap<String, RequestResponseFuture> responseMap = RequestFutureTable.getRequestFutureTable();
+            ConcurrentHashMap<String, RequestResponseFuture> responseMap = RequestFutureHolder.getInstance().getRequestFutureTable();
             assertThat(responseMap).isNotNull();
             for (Map.Entry<String, RequestResponseFuture> entry : responseMap.entrySet()) {
                 RequestResponseFuture future = entry.getValue();

File: broker/src/main/java/org/apache/rocketmq/broker/longpolling/PullRequestHoldService.java
Patch:
@@ -56,7 +56,7 @@ public void suspendPullRequest(final String topic, final int queueId, final Pull
     }
 
     private String buildKey(final String topic, final int queueId) {
-        StringBuilder sb = new StringBuilder();
+        StringBuilder sb = new StringBuilder(topic.length() + 5);
         sb.append(topic);
         sb.append(TOPIC_QUEUEID_SEPARATOR);
         sb.append(queueId);

File: broker/src/main/java/org/apache/rocketmq/broker/filter/MessageEvaluationContext.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Map.Entry;
 
 /**
  * Evaluation context from message.
@@ -49,8 +50,8 @@ public Map<String, Object> keyValues() {
 
         Map<String, Object> copy = new HashMap<String, Object>(properties.size(), 1);
 
-        for (String key : properties.keySet()) {
-            copy.put(key, properties.get(key));
+        for (Entry<String, String> entry : properties.entrySet()) {
+            copy.put(entry.getKey(), entry.getValue());
         }
 
         return copy;

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumer.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Map.Entry;
 import java.util.Set;
 import org.apache.rocketmq.client.ClientConfig;
 import org.apache.rocketmq.client.QueryResult;
@@ -640,8 +641,8 @@ public Map<String, String> getSubscription() {
     @Deprecated
     public void setSubscription(Map<String, String> subscription) {
         Map<String, String> subscriptionWithNamespace = new HashMap<String, String>();
-        for (String topic : subscription.keySet()) {
-            subscriptionWithNamespace.put(withNamespace(topic), subscription.get(topic));
+        for (Entry<String, String> topicEntry : subscription.entrySet()) {
+            subscriptionWithNamespace.put(withNamespace(topicEntry.getKey()), topicEntry.getValue());
         }
         this.subscription = subscriptionWithNamespace;
     }

File: client/src/test/java/org/apache/rocketmq/client/ValidatorsTest.java
Patch:
@@ -44,7 +44,7 @@ public void testCheckTopic_HasIllegalCharacters() {
             Validators.checkTopic(illegalTopic);
             failBecauseExceptionWasNotThrown(MQClientException.class);
         } catch (MQClientException e) {
-            assertThat(e).hasMessageStartingWith(String.format("The specified topic[%s] contains illegal characters, allowing only %s", illegalTopic, Validators.VALID_PATTERN_STR));
+            assertThat(e).hasMessageStartingWith(String.format("The specified topic[%s] contains illegal characters, allowing only %s", illegalTopic, "^[%|a-zA-Z0-9_-]+$"));
         }
     }
 

File: client/src/test/java/org/apache/rocketmq/client/consumer/store/RemoteBrokerOffsetStoreTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.rocketmq.client.impl.FindBrokerResult;
 import org.apache.rocketmq.client.impl.MQClientAPIImpl;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
+import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.protocol.header.QueryConsumerOffsetRequestHeader;
 import org.apache.rocketmq.common.protocol.header.UpdateConsumerOffsetRequestHeader;
@@ -58,7 +59,7 @@ public void init() {
         System.setProperty("rocketmq.client.localOffsetStoreDir", System.getProperty("java.io.tmpdir") + ".rocketmq_offsets");
         String clientId = new ClientConfig().buildMQClientId() + "#TestNamespace" + System.currentTimeMillis();
         when(mQClientFactory.getClientId()).thenReturn(clientId);
-        when(mQClientFactory.findBrokerAddressInAdmin(brokerName)).thenReturn(new FindBrokerResult("127.0.0.1", false));
+        when(mQClientFactory.findBrokerAddressInSubscribe(brokerName, MixAll.MASTER_ID, false)).thenReturn(new FindBrokerResult("127.0.0.1", false));
         when(mQClientFactory.getMQClientAPIImpl()).thenReturn(mqClientAPI);
     }
 

File: store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java
Patch:
@@ -629,7 +629,7 @@ public CompletableFuture<PutMessageResult> asyncPutMessages(MessageExtBatch mess
             PutMessageResult putMessageResult = new PutMessageResult(putMessageStatus, appendResult);
             if (putMessageStatus == PutMessageStatus.PUT_OK) {
                 // Statistics
-                storeStatsService.getSinglePutMessageTopicTimesTotal(messageExtBatch.getTopic()).add(1);
+                storeStatsService.getSinglePutMessageTopicTimesTotal(messageExtBatch.getTopic()).add(appendResult.getMsgNum());
                 storeStatsService.getSinglePutMessageTopicSizeTotal(messageExtBatch.getTopic()).add(appendResult.getWroteBytes());
             }
             return putMessageResult;

File: store/src/test/java/org/apache/rocketmq/store/BatchPutMessageTest.java
Patch:
@@ -105,7 +105,7 @@ public void testPutMessages() throws Exception {
             short propertiesLength = (short) propertiesBytes.length;
             final byte[] topicData = msg.getTopic().getBytes(MessageDecoder.CHARSET_UTF8);
             final int topicLength = topicData.length;
-            msgLengthArr[j] = calMsgLength(msg.getBody().length, topicLength, propertiesLength+batchPropLen) + msgLengthArr[j - 1];
+            msgLengthArr[j] = calMsgLength(msg.getBody().length, topicLength, propertiesLength+batchPropLen+1) + msgLengthArr[j - 1];
             j++;
         }
         byte[] batchMessageBody = MessageDecoder.encodeMessages(messages);

File: tools/src/main/java/org/apache/rocketmq/tools/command/offset/CloneGroupOffsetCommand.java
Patch:
@@ -87,7 +87,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
                             break;
                         }
                     }
-                    long offset = consumeStats.getOffsetTable().get(mq).getBrokerOffset();
+                    long offset = consumeStats.getOffsetTable().get(mq).getConsumerOffset();
                     if (offset >= 0) {
                         defaultMQAdminExt.updateConsumeOffset(addr, destGroup, mq, offset);
                     }

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -378,7 +378,7 @@ public boolean sendMessageBack(final MessageExt msg) {
             MessageAccessor.clearProperty(newMsg, MessageConst.PROPERTY_TRANSACTION_PREPARED);
             newMsg.setDelayTimeLevel(3 + msg.getReconsumeTimes());
 
-            this.defaultMQPushConsumer.getDefaultMQPushConsumerImpl().getmQClientFactory().getDefaultMQProducer().send(newMsg);
+            this.defaultMQPushConsumer.getDefaultMQPushConsumerImpl().getMqClientFactory().getDefaultMQProducer().send(newMsg);
             return true;
         } catch (Exception e) {
             log.error("sendMessageBack exception, group: " + this.consumerGroup + " msg: " + msg.toString(), e);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java
Patch:
@@ -329,7 +329,7 @@ private void initRebalanceImpl() {
         this.rebalanceImpl.setConsumerGroup(this.defaultLitePullConsumer.getConsumerGroup());
         this.rebalanceImpl.setMessageModel(this.defaultLitePullConsumer.getMessageModel());
         this.rebalanceImpl.setAllocateMessageQueueStrategy(this.defaultLitePullConsumer.getAllocateMessageQueueStrategy());
-        this.rebalanceImpl.setmQClientFactory(this.mQClientFactory);
+        this.rebalanceImpl.setMqClientFactory(this.mQClientFactory);
     }
 
     private void initPullAPIWrapper() {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java
Patch:
@@ -637,7 +637,7 @@ public synchronized void start() throws MQClientException {
                 this.rebalanceImpl.setConsumerGroup(this.defaultMQPullConsumer.getConsumerGroup());
                 this.rebalanceImpl.setMessageModel(this.defaultMQPullConsumer.getMessageModel());
                 this.rebalanceImpl.setAllocateMessageQueueStrategy(this.defaultMQPullConsumer.getAllocateMessageQueueStrategy());
-                this.rebalanceImpl.setmQClientFactory(this.mQClientFactory);
+                this.rebalanceImpl.setMqClientFactory(this.mQClientFactory);
 
                 this.pullAPIWrapper = new PullAPIWrapper(
                     mQClientFactory,

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -591,7 +591,7 @@ public synchronized void start() throws MQClientException {
                 this.rebalanceImpl.setConsumerGroup(this.defaultMQPushConsumer.getConsumerGroup());
                 this.rebalanceImpl.setMessageModel(this.defaultMQPushConsumer.getMessageModel());
                 this.rebalanceImpl.setAllocateMessageQueueStrategy(this.defaultMQPushConsumer.getAllocateMessageQueueStrategy());
-                this.rebalanceImpl.setmQClientFactory(this.mQClientFactory);
+                this.rebalanceImpl.setMqClientFactory(this.mQClientFactory);
 
                 this.pullAPIWrapper = new PullAPIWrapper(
                     mQClientFactory,
@@ -1089,11 +1089,11 @@ public ConsumerRunningInfo consumerRunningInfo() {
         return info;
     }
 
-    public MQClientInstance getmQClientFactory() {
+    public MQClientInstance getMqClientFactory() {
         return mQClientFactory;
     }
 
-    public void setmQClientFactory(MQClientInstance mQClientFactory) {
+    public void setMqClientFactory(MQClientInstance mQClientFactory) {
         this.mQClientFactory = mQClientFactory;
     }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceImpl.java
Patch:
@@ -472,11 +472,11 @@ public void setAllocateMessageQueueStrategy(AllocateMessageQueueStrategy allocat
         this.allocateMessageQueueStrategy = allocateMessageQueueStrategy;
     }
 
-    public MQClientInstance getmQClientFactory() {
+    public MQClientInstance getMqClientFactory() {
         return mQClientFactory;
     }
 
-    public void setmQClientFactory(MQClientInstance mQClientFactory) {
+    public void setMqClientFactory(MQClientInstance mQClientFactory) {
         this.mQClientFactory = mQClientFactory;
     }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalancePushImpl.java
Patch:
@@ -78,7 +78,7 @@ public void messageQueueChanged(String topic, Set<MessageQueue> mqAll, Set<Messa
         }
 
         // notify broker
-        this.getmQClientFactory().sendHeartbeatToAllBrokerWithLock();
+        this.getMqClientFactory().sendHeartbeatToAllBrokerWithLock();
     }
 
     @Override
@@ -114,7 +114,7 @@ private boolean unlockDelay(final MessageQueue mq, final ProcessQueue pq) {
 
         if (pq.hasTempMessage()) {
             log.info("[{}]unlockDelay, begin {} ", mq.hashCode(), mq);
-            this.defaultMQPushConsumerImpl.getmQClientFactory().getScheduledExecutorService().schedule(new Runnable() {
+            this.defaultMQPushConsumerImpl.getMqClientFactory().getScheduledExecutorService().schedule(new Runnable() {
                 @Override
                 public void run() {
                     log.info("[{}]unlockDelay, execute at once {}", mq.hashCode(), mq);

File: client/src/main/java/org/apache/rocketmq/client/trace/AsyncTraceDispatcher.java
Patch:
@@ -413,7 +413,7 @@ private Set<String> tryGetMessageQueueBrokerSet(DefaultMQProducerImpl producer,
             TopicPublishInfo topicPublishInfo = producer.getTopicPublishInfoTable().get(topic);
             if (null == topicPublishInfo || !topicPublishInfo.ok()) {
                 producer.getTopicPublishInfoTable().putIfAbsent(topic, new TopicPublishInfo());
-                producer.getmQClientFactory().updateTopicRouteInfoFromNameServer(topic);
+                producer.getMqClientFactory().updateTopicRouteInfoFromNameServer(topic);
                 topicPublishInfo = producer.getTopicPublishInfoTable().get(topic);
             }
             if (topicPublishInfo.isHaveTopicRouterInfo() || topicPublishInfo.ok()) {

File: client/src/main/java/org/apache/rocketmq/client/trace/hook/EndTransactionTraceHookImpl.java
Patch:
@@ -63,7 +63,7 @@ public void endTransaction(EndTransactionContext context) {
         traceBean.setKeys(context.getMessage().getKeys());
         traceBean.setStoreHost(context.getBrokerAddr());
         traceBean.setMsgType(MessageType.Trans_msg_Commit);
-        traceBean.setClientHost(((AsyncTraceDispatcher)localDispatcher).getHostProducer().getmQClientFactory().getClientId());
+        traceBean.setClientHost(((AsyncTraceDispatcher)localDispatcher).getHostProducer().getMqClientFactory().getClientId());
         traceBean.setMsgId(context.getMsgId());
         traceBean.setTransactionState(context.getTransactionState());
         traceBean.setTransactionId(context.getTransactionId());

File: client/src/test/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyServiceTest.java
Patch:
@@ -102,7 +102,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
         pushConsumer.subscribe(topic, "*");
         pushConsumer.start();
 
-        mQClientFactory = spy(pushConsumerImpl.getmQClientFactory());
+        mQClientFactory = spy(pushConsumerImpl.getMqClientFactory());
         field = DefaultMQPushConsumerImpl.class.getDeclaredField("mQClientFactory");
         field.setAccessible(true);
         field.set(pushConsumerImpl, mQClientFactory);
@@ -116,7 +116,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
         field.setAccessible(true);
         field.set(pushConsumerImpl, pullAPIWrapper);
 
-        pushConsumer.getDefaultMQPushConsumerImpl().getRebalanceImpl().setmQClientFactory(mQClientFactory);
+        pushConsumer.getDefaultMQPushConsumerImpl().getRebalanceImpl().setMqClientFactory(mQClientFactory);
         mQClientFactory.registerConsumer(consumerGroup, pushConsumerImpl);
 
         when(mQClientFactory.getMQClientAPIImpl().pullMessage(anyString(), any(PullMessageRequestHeader.class),

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQLitePullConsumerWithTraceTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.rocketmq.client.consumer.PullStatus;
 import org.apache.rocketmq.client.consumer.store.OffsetStore;
 import org.apache.rocketmq.client.consumer.store.ReadOffsetType;
-import org.apache.rocketmq.client.hook.SendMessageContext;
 import org.apache.rocketmq.client.impl.CommunicationMode;
 import org.apache.rocketmq.client.impl.FindBrokerResult;
 import org.apache.rocketmq.client.impl.MQAdminImpl;
@@ -219,7 +218,7 @@ private void initDefaultLitePullConsumer(DefaultLitePullConsumer litePullConsume
         field.setAccessible(true);
         field.set(litePullConsumerImpl, offsetStore);
 
-        traceProducer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
+        traceProducer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
 
         when(mQClientFactory.getMQClientAPIImpl().pullMessage(anyString(), any(PullMessageRequestHeader.class),
             anyLong(), any(CommunicationMode.class), nullable(PullCallback.class)))

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQProducerWithOpenTracingTest.java
Patch:
@@ -100,7 +100,7 @@ public void init() throws Exception {
         field.setAccessible(true);
         field.set(mQClientFactory, mQClientAPIImpl);
 
-        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
 
         when(mQClientAPIImpl.sendMessage(anyString(), anyString(), any(Message.class), any(SendMessageRequestHeader.class), anyLong(), any(CommunicationMode.class),
             nullable(SendMessageContext.class), any(DefaultMQProducerImpl.class))).thenCallRealMethod();
@@ -112,7 +112,7 @@ public void init() throws Exception {
 
     @Test
     public void testSendMessageSync_WithTrace_Success() throws RemotingException, InterruptedException, MQBrokerException, MQClientException {
-        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, producer.getDefaultMQProducerImpl());
         when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());
         producer.send(message);
         assertThat(tracer.finishedSpans().size()).isEqualTo(1);

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQProducerWithTraceTest.java
Patch:
@@ -109,7 +109,7 @@ public void init() throws Exception {
         field.setAccessible(true);
         field.set(mQClientFactory, mQClientAPIImpl);
 
-        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
 
         when(mQClientAPIImpl.sendMessage(anyString(), anyString(), any(Message.class), any(SendMessageRequestHeader.class), anyLong(), any(CommunicationMode.class),
             nullable(SendMessageContext.class), any(DefaultMQProducerImpl.class))).thenCallRealMethod();
@@ -121,7 +121,7 @@ public void init() throws Exception {
 
     @Test
     public void testSendMessageSync_WithTrace_Success() throws RemotingException, InterruptedException, MQBrokerException, MQClientException {
-        traceProducer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
+        traceProducer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
         when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());
         final CountDownLatch countDownLatch = new CountDownLatch(1);
         try {

File: client/src/test/java/org/apache/rocketmq/client/trace/TransactionMQProducerWithOpenTracingTest.java
Patch:
@@ -118,7 +118,7 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
         field.setAccessible(true);
         field.set(mQClientFactory, mQClientAPIImpl);
 
-        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
 
         when(mQClientAPIImpl.sendMessage(anyString(), anyString(), any(Message.class), any(SendMessageRequestHeader.class), anyLong(), any(CommunicationMode.class),
             nullable(SendMessageContext.class), any(DefaultMQProducerImpl.class))).thenCallRealMethod();
@@ -130,7 +130,7 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
 
     @Test
     public void testSendMessageSync_WithTrace_Success() throws RemotingException, InterruptedException, MQBrokerException, MQClientException {
-        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, producer.getDefaultMQProducerImpl());
         when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());
         producer.sendMessageInTransaction(message, null);
 

File: client/src/test/java/org/apache/rocketmq/client/trace/TransactionMQProducerWithTraceTest.java
Patch:
@@ -123,7 +123,7 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
         field.setAccessible(true);
         field.set(mQClientFactory, mQClientAPIImpl);
 
-        producer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
+        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTemp, producer.getDefaultMQProducerImpl());
 
         Field fieldHooks = DefaultMQProducerImpl.class.getDeclaredField("endTransactionHookList");
         fieldHooks.setAccessible(true);
@@ -141,7 +141,7 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
 
     @Test
     public void testSendMessageSync_WithTrace_Success() throws RemotingException, InterruptedException, MQBrokerException, MQClientException {
-        traceProducer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
+        traceProducer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
         when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());
         AtomicReference<EndTransactionContext> context = new AtomicReference<>();
         doAnswer(mock -> {

File: example/src/main/java/org/apache/rocketmq/example/simple/PullConsumer.java
Patch:
@@ -136,7 +136,7 @@ public long consumeFromOffset(MessageQueue messageQueue) throws MQClientExceptio
                 }
 
                 public void incPullTPS(String topic, int pullSize) {
-                    consumer.getDefaultMQPullConsumerImpl().getRebalanceImpl().getmQClientFactory()
+                    consumer.getDefaultMQPullConsumerImpl().getRebalanceImpl().getMqClientFactory()
                             .getConsumerStatsManager().incPullTPS(consumer.getConsumerGroup(), topic, pullSize);
                 }
             });

File: example/src/main/java/org/apache/rocketmq/example/quickstart/Consumer.java
Patch:
@@ -50,12 +50,12 @@ public static void main(String[] args) throws InterruptedException, MQClientExce
          */
 
         /*
-         * Specify where to start in case the specified consumer group is a brand new one.
+         * Specify where to start in case the specific consumer group is a brand-new one.
          */
         consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);
 
         /*
-         * Subscribe one more more topics to consume.
+         * Subscribe one more topic to consume.
          */
         consumer.subscribe("TopicTest", "*");
 

File: example/src/main/java/org/apache/rocketmq/example/simple/PullConsumer.java
Patch:
@@ -56,7 +56,7 @@ public Thread newThread(Runnable r) {
             executors.execute(new Runnable() {
 
                 public void doSomething(List<MessageExt> msgs) {
-                    //do you business
+                    //do your business
 
                 }
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingServer.java
Patch:
@@ -198,7 +198,7 @@ public Thread newThread(Runnable r) {
         ServerBootstrap childHandler =
             this.serverBootstrap.group(this.eventLoopGroupBoss, this.eventLoopGroupSelector)
                 .channel(useEpoll() ? EpollServerSocketChannel.class : NioServerSocketChannel.class)
-                .option(ChannelOption.SO_BACKLOG, 1024)
+                .option(ChannelOption.SO_BACKLOG, nettyServerConfig.getServerSocketBacklog())
                 .option(ChannelOption.SO_REUSEADDR, true)
                 .option(ChannelOption.SO_KEEPALIVE, false)
                 .childOption(ChannelOption.TCP_NODELAY, true)

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/namesrv/DeleteTopicFromNamesrvRequestHeader.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.rocketmq.remoting.annotation.CFNotNull;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 
-public class DeleteTopicInNamesrvRequestHeader implements CommandCustomHeader {
+public class DeleteTopicFromNamesrvRequestHeader implements CommandCustomHeader {
     @CFNotNull
     private String topic;
 

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/DefaultRequestProcessor.java
Patch:
@@ -39,7 +39,7 @@
 import org.apache.rocketmq.common.protocol.body.TopicConfigSerializeWrapper;
 import org.apache.rocketmq.common.protocol.header.GetTopicsByClusterRequestHeader;
 import org.apache.rocketmq.common.protocol.header.namesrv.DeleteKVConfigRequestHeader;
-import org.apache.rocketmq.common.protocol.header.namesrv.DeleteTopicInNamesrvRequestHeader;
+import org.apache.rocketmq.common.protocol.header.namesrv.DeleteTopicFromNamesrvRequestHeader;
 import org.apache.rocketmq.common.protocol.header.namesrv.GetKVConfigRequestHeader;
 import org.apache.rocketmq.common.protocol.header.namesrv.GetKVConfigResponseHeader;
 import org.apache.rocketmq.common.protocol.header.namesrv.GetKVListByNamespaceRequestHeader;
@@ -438,8 +438,8 @@ private RemotingCommand getAllTopicListFromNameserver(ChannelHandlerContext ctx,
     private RemotingCommand deleteTopicInNamesrv(ChannelHandlerContext ctx,
         RemotingCommand request) throws RemotingCommandException {
         final RemotingCommand response = RemotingCommand.createResponseCommand(null);
-        final DeleteTopicInNamesrvRequestHeader requestHeader =
-            (DeleteTopicInNamesrvRequestHeader) request.decodeCommandCustomHeader(DeleteTopicInNamesrvRequestHeader.class);
+        final DeleteTopicFromNamesrvRequestHeader requestHeader =
+            (DeleteTopicFromNamesrvRequestHeader) request.decodeCommandCustomHeader(DeleteTopicFromNamesrvRequestHeader.class);
 
         this.namesrvController.getRouteInfoManager().deleteTopic(requestHeader.getTopic());
 

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -1672,7 +1672,7 @@ private boolean isSpaceToDelete() {
             cleanImmediately = false;
 
             {
-                String commitLogStorePath = DefaultMessageStore.this.getMessageStoreConfig().getStorePathCommitLog();
+                String commitLogStorePath = DefaultMessageStore.this.getStorePathPhysic();
                 String[] storePaths = commitLogStorePath.trim().split(MessageStoreConfig.MULTI_PATH_SPLITTER);
                 Set<String> fullStorePath = new HashSet<>();
                 double minPhysicRatio = 100;
@@ -1714,8 +1714,7 @@ private boolean isSpaceToDelete() {
             }
 
             {
-                String storePathLogics = StorePathConfigHelper
-                    .getStorePathConsumeQueue(DefaultMessageStore.this.getMessageStoreConfig().getStorePathRootDir());
+                String storePathLogics = DefaultMessageStore.this.getStorePathLogic();
                 double logicsRatio = UtilAll.getDiskPartitionSpaceUsedPercent(storePathLogics);
                 if (logicsRatio > diskSpaceWarningLevelRatio) {
                     boolean diskok = DefaultMessageStore.this.runningFlags.getAndMakeDiskFull();

File: store/src/main/java/org/apache/rocketmq/store/MappedFileQueue.java
Patch:
@@ -162,8 +162,8 @@ public boolean doLoad(List<File> files) {
         for (File file : files) {
             if (file.length() != this.mappedFileSize) {
                 log.warn(file + "\t" + file.length()
-                        + " length not matched message store config value, ignore it");
-                return true;
+                        + " length not matched message store config value, please check it manually");
+                return false;
             }
 
             try {

File: client/src/main/java/org/apache/rocketmq/client/producer/DefaultMQProducer.java
Patch:
@@ -331,7 +331,6 @@ public List<MessageQueue> fetchPublishMessageQueues(String topic) throws MQClien
     @Override
     public SendResult send(
         Message msg) throws MQClientException, RemotingException, MQBrokerException, InterruptedException {
-        Validators.checkMessage(msg, this);
         msg.setTopic(withNamespace(msg.getTopic()));
         return this.defaultMQProducerImpl.send(msg);
     }

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -1182,7 +1182,7 @@ public void changeToSlave(int brokerId) {
         handleSlaveSynchronize(BrokerRole.SLAVE);
 
         try {
-            this.registerBrokerAll(true, true, brokerConfig.isForceRegister());
+            this.registerBrokerAll(true, true, true);
         } catch (Throwable ignored) {
 
         }
@@ -1219,7 +1219,7 @@ public void changeToMaster(BrokerRole role) {
         messageStoreConfig.setBrokerRole(role);
 
         try {
-            this.registerBrokerAll(true, true, brokerConfig.isForceRegister());
+            this.registerBrokerAll(true, true, true);
         } catch (Throwable ignored) {
 
         }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java
Patch:
@@ -95,8 +95,7 @@ protected SendMessageContext buildMsgContext(ChannelHandlerContext ctx,
             return null;
         }
         String namespace = NamespaceUtil.getNamespaceFromResource(requestHeader.getTopic());
-        SendMessageContext mqtraceContext;
-        mqtraceContext = new SendMessageContext();
+        SendMessageContext mqtraceContext = new SendMessageContext();
         mqtraceContext.setProducerGroup(requestHeader.getProducerGroup());
         mqtraceContext.setNamespace(namespace);
         mqtraceContext.setTopic(requestHeader.getTopic());

File: client/src/main/java/org/apache/rocketmq/client/ClientConfig.java
Patch:
@@ -158,6 +158,7 @@ public void resetClientConfig(final ClientConfig cc) {
         this.useTLS = cc.useTLS;
         this.namespace = cc.namespace;
         this.language = cc.language;
+        this.mqClientApiTimeout = cc.mqClientApiTimeout;
     }
 
     public ClientConfig cloneClientConfig() {
@@ -176,6 +177,7 @@ public ClientConfig cloneClientConfig() {
         cc.useTLS = useTLS;
         cc.namespace = namespace;
         cc.language = language;
+        cc.mqClientApiTimeout = mqClientApiTimeout;
         return cc;
     }
 

File: client/src/main/java/org/apache/rocketmq/client/consumer/MessageSelector.java
Patch:
@@ -47,7 +47,7 @@ private MessageSelector(String type, String expression) {
     }
 
     /**
-     * Use SLQ92 to select message.
+     * Use SQL92 to select message.
      *
      * @param sql if null or empty, will be treated as select all message.
      */

File: common/src/main/java/org/apache/rocketmq/common/MQVersion.java
Patch:
@@ -640,9 +640,6 @@ public enum Version {
         V4_9_9_SNAPSHOT,
         V4_9_9,
 
-        V5_0_0_PREVIEW_SNAPSHOT,
-        V5_0_0_PREVIEW,
-
         V5_0_0_SNAPSHOT,
         V5_0_0,
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/CommandUtil.java
Patch:
@@ -146,5 +146,4 @@ public static String fetchBrokerNameByAddr(final MQAdminExt adminExt, final Stri
         }
         throw new Exception(ERROR_MESSAGE);
     }
-
 }

File: client/src/main/java/org/apache/rocketmq/client/ClientConfig.java
Patch:
@@ -158,6 +158,7 @@ public void resetClientConfig(final ClientConfig cc) {
         this.useTLS = cc.useTLS;
         this.namespace = cc.namespace;
         this.language = cc.language;
+        this.mqClientApiTimeout = cc.mqClientApiTimeout;
     }
 
     public ClientConfig cloneClientConfig() {
@@ -176,6 +177,7 @@ public ClientConfig cloneClientConfig() {
         cc.useTLS = useTLS;
         cc.namespace = namespace;
         cc.language = language;
+        cc.mqClientApiTimeout = mqClientApiTimeout;
         return cc;
     }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -605,8 +605,8 @@ private void onExceptionImpl(final String brokerName,
                 retryBrokerName = mqChosen.getBrokerName();
             }
             String addr = instance.findBrokerAddressInPublish(retryBrokerName);
-            log.info("async send msg by retry {} times. topic={}, brokerAddr={}, brokerName={}", tmp, msg.getTopic(), addr,
-                retryBrokerName);
+            log.warn(String.format("async send msg by retry {} times. topic={}, brokerAddr={}, brokerName={}", tmp, msg.getTopic(), addr,
+                retryBrokerName), e);
             try {
                 request.setOpaque(RemotingCommand.createNewRequestId());
                 sendMessageAsync(addr, retryBrokerName, msg, timeoutMillis, request, sendCallback, topicPublishInfo, instance,

File: tools/src/main/java/org/apache/rocketmq/tools/command/export/ExportMetricsCommand.java
Patch:
@@ -259,7 +259,7 @@ private Map<String, Object> getRuntimeQuota(KVTable kvTable, DefaultMQAdminExt d
         totalOneDayNumMap.put("transOneDayInNum", totalOneDayNumMap.get("transOneDayInNum") + transOneDayInNum);
         totalOneDayNumMap.put("scheduleOneDayInNum", totalOneDayNumMap.get("scheduleOneDayInNum") + scheduleOneDayInNum);
 
-        // putMessageAverageSize 平均
+        // putMessageAverageSize
         runtimeQuotaMap.put("messageAverageSize", kvTable.getTable().get("putMessageAverageSize"));
 
         //topicSize

File: tools/src/main/java/org/apache/rocketmq/tools/command/CommandUtil.java
Patch:
@@ -146,5 +146,4 @@ public static String fetchBrokerNameByAddr(final MQAdminExt adminExt, final Stri
         }
         throw new Exception(ERROR_MESSAGE);
     }
-
 }

File: client/src/main/java/org/apache/rocketmq/client/consumer/MessageSelector.java
Patch:
@@ -47,7 +47,7 @@ private MessageSelector(String type, String expression) {
     }
 
     /**
-     * Use SLQ92 to select message.
+     * Use SQL92 to select message.
      *
      * @param sql if null or empty, will be treated as select all message.
      */

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExt.java
Patch:
@@ -209,7 +209,7 @@ public SubscriptionGroupConfig examineSubscriptionGroupConfig(String addr, Strin
     }
 
     @Override
-    public TopicConfig examineTopicConfig(String addr, String topic) {
+    public TopicConfig examineTopicConfig(String addr, String topic) throws RemotingException, InterruptedException, MQBrokerException {
         return defaultMQAdminExtImpl.examineTopicConfig(addr, topic);
     }
 

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -224,8 +224,9 @@ public SubscriptionGroupConfig examineSubscriptionGroupConfig(String addr, Strin
     }
 
     @Override
-    public TopicConfig examineTopicConfig(String addr, String topic) {
-        return null;
+    public TopicConfig examineTopicConfig(String addr, String topic) throws RemotingException, InterruptedException, MQBrokerException {
+        TopicConfigSerializeWrapper topicConfigSerializeWrapper = this.mqClientInstance.getMQClientAPIImpl().getAllTopicConfig(addr,timeoutMillis);
+        return topicConfigSerializeWrapper.getTopicConfigTable().get(topic);
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java
Patch:
@@ -92,7 +92,7 @@ void createAndUpdateSubscriptionGroupConfig(final String addr,
 
     SubscriptionGroupConfig examineSubscriptionGroupConfig(final String addr, final String group) throws InterruptedException, RemotingException, MQClientException, MQBrokerException;
 
-    TopicConfig examineTopicConfig(final String addr, final String topic);
+    TopicConfig examineTopicConfig(final String addr, final String topic) throws RemotingException, InterruptedException, MQBrokerException;
 
     TopicStatsTable examineTopicStats(
         final String topic) throws RemotingException, MQClientException, InterruptedException,

File: broker/src/main/java/org/apache/rocketmq/broker/loadbalance/MessageRequestModeManager.java
Patch:
@@ -26,7 +26,7 @@
 
 public class MessageRequestModeManager extends ConfigManager {
 
-    private BrokerController brokerController;
+    private transient BrokerController brokerController;
 
     private ConcurrentHashMap<String, ConcurrentHashMap<String, SetMessageRequestModeRequestBody>>
             messageRequestModeMap = new ConcurrentHashMap<String, ConcurrentHashMap<String, SetMessageRequestModeRequestBody>>();

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -888,7 +888,7 @@ public boolean consumed(final MessageExt msg,
             if (mq.getTopic().equals(msg.getTopic()) && mq.getQueueId() == msg.getQueueId()) {
                 BrokerData brokerData = ci.getBrokerAddrTable().get(mq.getBrokerName());
                 if (brokerData != null) {
-                    String addr = brokerData.getBrokerAddrs().get(MixAll.MASTER_ID);
+                    String addr = RemotingUtil.convert2IpString(brokerData.getBrokerAddrs().get(MixAll.MASTER_ID));
                     if (RemotingUtil.socketAddress2String(msg.getStoreHost()).equals(addr)) {
                         if (next.getValue().getConsumerOffset() > msg.getQueueOffset()) {
                             return true;

File: common/src/main/java/org/apache/rocketmq/common/stats/StatsItem.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.LinkedList;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.LongAdder;
 
 import org.apache.rocketmq.common.UtilAll;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Locale;
-import java.util.Map;Optional
+import java.util.Map;
 
 import java.util.concurrent.ThreadLocalRandom;
 

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -88,6 +88,7 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.message.MessageType;
 import org.apache.rocketmq.common.protocol.NamespaceUtil;
+import org.apache.rocketmq.common.protocol.ResponseCode;
 import org.apache.rocketmq.common.protocol.header.CheckTransactionStateRequestHeader;
 import org.apache.rocketmq.common.protocol.header.EndTransactionRequestHeader;
 import org.apache.rocketmq.common.protocol.header.SendMessageRequestHeader;

File: common/src/main/java/org/apache/rocketmq/common/stats/StatsItem.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.LinkedList;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.LongAdder;
 
 import org.apache.rocketmq.common.UtilAll;

File: common/src/test/java/org/apache/rocketmq/common/UtilAllTest.java
Patch:
@@ -119,7 +119,8 @@ public void testJoin() {
         String comma = ",";
         assertEquals("groupA=DENY,groupB=PUB|SUB,groupC=SUB", UtilAll.join(list, comma));
         assertEquals(null, UtilAll.join(null, comma));
-        assertEquals("", UtilAll.join(Collections.emptyList(), comma));
+        List<String> objects = Collections.emptyList();
+        assertEquals("", UtilAll.join(objects, comma));
     }
 
     static class DemoConfig {

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/DefaultRequestProcessor.java
Patch:
@@ -56,8 +56,6 @@
 import org.apache.rocketmq.common.protocol.route.LogicalQueuesInfoUnordered;
 import org.apache.rocketmq.common.protocol.route.TopicRouteDataNameSrv;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java
Patch:
@@ -50,8 +50,6 @@
 import org.apache.rocketmq.common.protocol.route.QueueData;
 import org.apache.rocketmq.common.protocol.route.TopicRouteDataNameSrv;
 import org.apache.rocketmq.common.sysflag.TopicSysFlag;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.apache.rocketmq.srvutil.ConcurrentHashMapUtil;
 

File: acl/src/main/java/org/apache/rocketmq/acl/plain/RemoteAddressStrategyFactory.java
Patch:
@@ -167,7 +167,7 @@ public RangeRemoteAddressStrategy(String remoteAddr) {
                 String[] strArray = StringUtils.split(remoteAddr, ".");
                 if (analysis(strArray, 1) || analysis(strArray, 2) || analysis(strArray, 3)) {
                     AclUtils.verify(remoteAddr, index - 1);
-                    StringBuffer sb = new StringBuffer();
+                    StringBuilder sb = new StringBuilder();
                     for (int j = 0; j < index; j++) {
                         sb.append(strArray[j].trim()).append(".");
                     }

File: acl/src/test/java/org/apache/rocketmq/acl/common/AclUtilsTest.java
Patch:
@@ -202,6 +202,7 @@ public void v6ipProcessTest() {
 
     @Test
     public void expandIPTest() {
+        Assert.assertEquals(AclUtils.expandIP("::", 8), "0000:0000:0000:0000:0000:0000:0000:0000");
         Assert.assertEquals(AclUtils.expandIP("::1", 8), "0000:0000:0000:0000:0000:0000:0000:0001");
         Assert.assertEquals(AclUtils.expandIP("3::", 8), "0003:0000:0000:0000:0000:0000:0000:0000");
         Assert.assertEquals(AclUtils.expandIP("2::2", 8), "0002:0000:0000:0000:0000:0000:0000:0002");

File: broker/src/main/java/org/apache/rocketmq/broker/plugin/AbstractPluginMessageStore.java
Patch:
@@ -185,8 +185,8 @@ public SelectMappedBufferResult getCommitLogData(long offset) {
     }
 
     @Override
-    public boolean appendToCommitLog(long startOffset, byte[] data) {
-        return next.appendToCommitLog(startOffset, data);
+    public boolean appendToCommitLog(long startOffset, byte[] data, int dataStart, int dataLength) {
+        return next.appendToCommitLog(startOffset, data, dataStart, dataLength);
     }
 
     @Override

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ReplyMessageProcessor.java
Patch:
@@ -45,6 +45,8 @@
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.stats.BrokerStatsManager;
 
+import java.util.concurrent.ThreadLocalRandom;
+
 public class ReplyMessageProcessor extends AbstractSendMessageProcessor implements NettyRequestProcessor {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
@@ -125,7 +127,7 @@ private RemotingCommand processReplyMessageRequest(final ChannelHandlerContext c
         TopicConfig topicConfig = this.brokerController.getTopicConfigManager().selectTopicConfig(requestHeader.getTopic());
 
         if (queueIdInt < 0) {
-            queueIdInt = Math.abs(this.random.nextInt() % 99999999) % topicConfig.getWriteQueueNums();
+            queueIdInt = ThreadLocalRandom.current().nextInt(99999999) % topicConfig.getWriteQueueNums();
         }
 
         MessageExtBrokerInner msgInner = new MessageExtBrokerInner();

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/AbstractTransactionalMessageCheckListener.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.rocketmq.broker.transaction;
 
 import io.netty.channel.Channel;
-import java.util.Random;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageConst;
@@ -40,7 +39,6 @@ public abstract class AbstractTransactionalMessageCheckListener {
 
     //queue nums of topic TRANS_CHECK_MAX_TIME_TOPIC
     protected final static int TCMT_QUEUE_NUMS = 1;
-    protected final Random random = new Random(System.currentTimeMillis());
 
     private static ExecutorService executorService = new ThreadPoolExecutor(2, 5, 100, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(2000), new ThreadFactory() {
         @Override

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/DefaultTransactionalMessageCheckListener.java
Patch:
@@ -30,6 +30,8 @@
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
 
+import java.util.concurrent.ThreadLocalRandom;
+
 public class DefaultTransactionalMessageCheckListener extends AbstractTransactionalMessageCheckListener {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
@@ -58,7 +60,7 @@ public void resolveDiscardMsg(MessageExt msgExt) {
 
     private MessageExtBrokerInner toMessageExtBrokerInner(MessageExt msgExt) {
         TopicConfig topicConfig = this.getBrokerController().getTopicConfigManager().createTopicOfTranCheckMaxTime(TCMT_QUEUE_NUMS, PermName.PERM_READ | PermName.PERM_WRITE);
-        int queueId = Math.abs(random.nextInt() % 99999999) % TCMT_QUEUE_NUMS;
+        int queueId = ThreadLocalRandom.current().nextInt(99999999) % TCMT_QUEUE_NUMS;
         MessageExtBrokerInner inner = new MessageExtBrokerInner();
         inner.setTopic(topicConfig.getTopicName());
         inner.setBody(msgExt.getBody());

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultLitePullConsumer.java
Patch:
@@ -535,7 +535,9 @@ public void setCustomizedTraceTopic(String customizedTraceTopic) {
     private void setTraceDispatcher() {
         if (isEnableMsgTrace()) {
             try {
-                this.traceDispatcher = new AsyncTraceDispatcher(consumerGroup, TraceDispatcher.Type.CONSUME, customizedTraceTopic, null);
+                AsyncTraceDispatcher traceDispatcher = new AsyncTraceDispatcher(consumerGroup, TraceDispatcher.Type.CONSUME, customizedTraceTopic, null);
+                traceDispatcher.getTraceProducer().setUseTLS(this.isUseTLS());
+                this.traceDispatcher = traceDispatcher;
                 this.defaultLitePullConsumerImpl.registerConsumeMessageHook(
                     new ConsumeMessageTraceHookImpl(traceDispatcher));
             } catch (Throwable e) {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -493,11 +493,11 @@ public void run() {
 
                                 status = messageListener.consumeMessage(Collections.unmodifiableList(msgs), context);
                             } catch (Throwable e) {
-                                log.warn("consumeMessage exception: {} Group: {} Msgs: {} MQ: {}",
+                                log.warn(String.format("consumeMessage exception: %s Group: %s Msgs: %s MQ: %s",
                                     RemotingHelper.exceptionSimpleDesc(e),
                                     ConsumeMessageOrderlyService.this.consumerGroup,
                                     msgs,
-                                    messageQueue);
+                                    messageQueue), e);
                                 hasException = true;
                             } finally {
                                 this.processQueue.getConsumeLock().unlock();

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -297,7 +297,7 @@ public void pullMessage(final PullRequest pullRequest) {
                     long offset = -1L;
                     try {
                         offset = this.rebalanceImpl.computePullFromWhereWithException(pullRequest.getMessageQueue());
-                    } catch (MQClientException e) {
+                    } catch (Exception e) {
                         this.executePullRequestLater(pullRequest, pullTimeDelayMillsWhenException);
                         log.error("Failed to compute pull offset, pullResult: {}", pullRequest, e);
                         return;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceImpl.java
Patch:
@@ -696,7 +696,7 @@ private boolean updateMessageQueueAssignment(final String topic, final Set<Messa
                     long nextOffset = -1L;
                     try {
                         nextOffset = this.computePullFromWhereWithException(mq);
-                    } catch (MQClientException e) {
+                    } catch (Exception e) {
                         log.info("doRebalance, {}, compute offset failed, {}", consumerGroup, mq);
                         continue;
                     }

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceLitePullImpl.java
Patch:
@@ -102,7 +102,8 @@ public long computePullFromWhereWithException(MessageQueue mq) throws MQClientEx
                         try {
                             result = this.mQClientFactory.getMQAdminImpl().maxOffset(mq);
                         } catch (MQClientException e) {
-                            result = -1;
+                            log.warn("Compute consume offset from last offset exception, mq={}, exception={}", mq, e);
+                            throw e;
                         }
                     }
                 } else {

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceDataEncoder.java
Patch:
@@ -191,7 +191,6 @@ public static TraceTransferBean encoderFromContextBean(TraceContext ctx) {
                         .append(ctx.getContextCode()).append(TraceConstants.CONTENT_SPLITOR)
                         .append(ctx.getTimeStamp()).append(TraceConstants.CONTENT_SPLITOR)
                         .append(ctx.getGroupName()).append(TraceConstants.FIELD_SPLITOR);
-
                 }
             }
             break;

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceView.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.rocketmq.client.trace;
 
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
-import org.apache.commons.codec.Charsets;
 import org.apache.rocketmq.common.message.MessageExt;
 
 public class TraceView {
@@ -40,7 +40,7 @@ public class TraceView {
 
     public static List<TraceView> decodeFromTraceTransData(String key, MessageExt messageExt) {
         List<TraceView> messageTraceViewList = new ArrayList<TraceView>();
-        String messageBody = new String(messageExt.getBody(), Charsets.UTF_8);
+        String messageBody = new String(messageExt.getBody(), StandardCharsets.UTF_8);
         if (messageBody == null || messageBody.length() <= 0) {
             return messageTraceViewList;
         }

File: client/src/test/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyServiceTest.java
Patch:
@@ -178,7 +178,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
         StatsItemSet itemSet = (StatsItemSet)statItmeSetField.get(mgr);
         StatsItem item = itemSet.getAndCreateStatsItem(topic + "@" + pushConsumer.getDefaultMQPushConsumerImpl().groupName());
 
-        assertThat(item.getValue().get()).isGreaterThan(0L);
+        assertThat(item.getValue().sum()).isGreaterThan(0L);
         MessageExt msg = messageAtomic.get();
         assertThat(msg).isNotNull();
         assertThat(msg.getTopic()).isEqualTo(topic);

File: client/src/test/java/org/apache/rocketmq/client/trace/TraceViewTest.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.rocketmq.client.trace;
 
-import org.apache.commons.codec.Charsets;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageType;
 import org.junit.Assert;
 import org.junit.Test;
 
+import java.nio.charset.StandardCharsets;
 import java.util.List;
 
 public class TraceViewTest {
@@ -46,7 +46,7 @@ public void testDecodeFromTraceTransData() {
             .append(true).append(TraceConstants.FIELD_SPLITOR)
             .toString();
         MessageExt message = new MessageExt();
-        message.setBody(messageBody.getBytes(Charsets.UTF_8));
+        message.setBody(messageBody.getBytes(StandardCharsets.UTF_8));
         String key = "AC1415116D1418B4AAC217FE1B4E0000";
         List<TraceView> traceViews = TraceView.decodeFromTraceTransData(key, message);
         Assert.assertEquals(traceViews.size(), 1);

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -61,6 +61,7 @@ public class MixAll {
     public static final String DEFAULT_PRODUCER_GROUP = "DEFAULT_PRODUCER";
     public static final String DEFAULT_CONSUMER_GROUP = "DEFAULT_CONSUMER";
     public static final String TOOLS_CONSUMER_GROUP = "TOOLS_CONSUMER";
+    public static final String SCHEDULE_CONSUMER_GROUP = "SCHEDULE_CONSUMER";
     public static final String FILTERSRV_CONSUMER_GROUP = "FILTERSRV_CONSUMER";
     public static final String MONITOR_CONSUMER_GROUP = "__MONITOR_CONSUMER";
     public static final String CLIENT_INNER_PRODUCER_GROUP = "CLIENT_INNER_PRODUCER";

File: common/src/main/java/org/apache/rocketmq/common/protocol/NamespaceUtil.java
Patch:
@@ -120,7 +120,7 @@ public static String wrapNamespaceAndRetry(String namespace, String consumerGrou
             return null;
         }
 
-        return new StringBuffer()
+        return new StringBuilder()
             .append(MixAll.RETRY_GROUP_TOPIC_PREFIX)
             .append(wrapNamespace(namespace, consumerGroup))
             .toString();

File: common/src/main/java/org/apache/rocketmq/common/protocol/RequestCode.java
Patch:
@@ -193,6 +193,8 @@ public class RequestCode {
 
     public static final int PUSH_REPLY_MESSAGE_TO_CLIENT = 326;
 
+    public static final int ADD_WRITE_PERM_OF_BROKER = 327;
+
     public static final int GET_TOPIC_CONFIG = 351;
 
     public static final int QUERY_ASSIGNMENT = 400;

File: common/src/main/java/org/apache/rocketmq/common/utils/NameServerAddressUtils.java
Patch:
@@ -20,6 +20,7 @@ public class NameServerAddressUtils {
     public static final String INSTANCE_PREFIX = "MQ_INST_";
     public static final String INSTANCE_REGEX = INSTANCE_PREFIX + "\\w+_\\w+";
     public static final String ENDPOINT_PREFIX = "(\\w+://|)";
+    public static final Pattern NAMESRV_ENDPOINT_PATTERN = Pattern.compile("^http://.*");
     public static final Pattern INST_ENDPOINT_PATTERN = Pattern.compile("^" + ENDPOINT_PREFIX + INSTANCE_REGEX + "\\..*");
 
     public static String getNameServerAddresses() {

File: common/src/test/java/org/apache/rocketmq/common/stats/StatsItemSetTest.java
Patch:
@@ -23,6 +23,8 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
+import java.util.concurrent.atomic.LongAdder;
+
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.junit.After;
 import org.junit.Test;
@@ -95,7 +97,7 @@ public void run() {
         }
     }
 
-    private AtomicLong test_unit() throws InterruptedException {
+    private LongAdder test_unit() throws InterruptedException {
         final StatsItemSet statsItemSet = new StatsItemSet("topicTest", scheduler, null);
         executor = new ThreadPoolExecutor(10, 20, 10, TimeUnit.SECONDS,
             new ArrayBlockingQueue<Runnable>(100), new ThreadFactoryImpl("testMultiThread"));

File: common/src/test/java/org/apache/rocketmq/common/utils/IOTinyUtilsTest.java
Patch:
@@ -82,7 +82,7 @@ public void testCopy() throws Exception {
 
     @Test
     public void testReadLines() throws Exception {
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         for (int i = 0; i < 10; i++) {
             sb.append("testReadLines").append("\n");
         }
@@ -95,7 +95,7 @@ public void testReadLines() throws Exception {
 
     @Test
     public void testToBufferedReader() throws Exception {
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         for (int i = 0; i < 10; i++) {
             sb.append("testToBufferedReader").append("\n");
         }

File: filter/src/main/java/org/apache/rocketmq/filter/parser/TokenMgrError.java
Patch:
@@ -66,7 +66,7 @@ public class TokenMgrError extends Error {
      * equivalents in the given string
      */
     protected static final String addEscapes(String str) {
-        StringBuffer retval = new StringBuffer();
+        StringBuilder retval = new StringBuilder();
         char ch;
         for (int i = 0; i < str.length(); i++) {
             switch (str.charAt(i)) {
@@ -141,6 +141,7 @@ protected static String LexicalError(boolean eofSeen, int lexState, int errorLin
      * <p/>
      * from this method for such cases in the release version of your parser.
      */
+    @Override
     public String getMessage() {
         return super.getMessage();
     }

File: filter/src/test/java/org/apache/rocketmq/filter/ParserTest.java
Patch:
@@ -84,7 +84,7 @@ public void testParse_decimalOverFlow() {
     @Test
     public void testParse_floatOverFlow() {
         try {
-            StringBuffer sb = new StringBuffer(210000);
+            StringBuilder sb = new StringBuilder(210000);
             sb.append("1");
             for (int i = 0; i < 2048; i ++) {
                 sb.append("111111111111111111111111111111111111111111111111111");

File: remoting/src/main/java/org/apache/rocketmq/remoting/common/RemotingHelper.java
Patch:
@@ -36,7 +36,7 @@ public class RemotingHelper {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(ROCKETMQ_REMOTING);
 
     public static String exceptionSimpleDesc(final Throwable e) {
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         if (e != null) {
             sb.append(e.toString());
 

File: store/src/main/java/org/apache/rocketmq/store/AppendMessageCallback.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.nio.ByteBuffer;
 import org.apache.rocketmq.common.message.MessageExtBatch;
+import org.apache.rocketmq.store.CommitLog.PutMessageContext;
 
 /**
  * Write messages callback interface
@@ -30,7 +31,7 @@ public interface AppendMessageCallback {
      * @return How many bytes to write
      */
     AppendMessageResult doAppend(final long fileFromOffset, final ByteBuffer byteBuffer,
-        final int maxBlank, final MessageExtBrokerInner msg);
+        final int maxBlank, final MessageExtBrokerInner msg, PutMessageContext putMessageContext);
 
     /**
      * After batched message serialization, write MapedByteBuffer
@@ -39,5 +40,5 @@ AppendMessageResult doAppend(final long fileFromOffset, final ByteBuffer byteBuf
      * @return How many bytes to write
      */
     AppendMessageResult doAppend(final long fileFromOffset, final ByteBuffer byteBuffer,
-        final int maxBlank, final MessageExtBatch messageExtBatch);
+        final int maxBlank, final MessageExtBatch messageExtBatch, PutMessageContext putMessageContext);
 }

File: store/src/main/java/org/apache/rocketmq/store/MessageStore.java
Patch:
@@ -255,9 +255,11 @@ GetMessageResult getMessage(final String group, final String topic, final int qu
      *
      * @param startOffset starting offset.
      * @param data data to append.
+     * @param dataStart the start index of data array
+     * @param dataLength the length of data array
      * @return true if success; false otherwise.
      */
-    boolean appendToCommitLog(final long startOffset, final byte[] data);
+    boolean appendToCommitLog(final long startOffset, final byte[] data, int dataStart, int dataLength);
 
     /**
      * Execute file deletion manually.

File: store/src/main/java/org/apache/rocketmq/store/stats/BrokerStats.java
Patch:
@@ -45,7 +45,7 @@ public void record() {
         this.msgPutTotalTodayMorning =
             this.defaultMessageStore.getStoreStatsService().getPutMessageTimesTotal();
         this.msgGetTotalTodayMorning =
-            this.defaultMessageStore.getStoreStatsService().getGetMessageTransferedMsgCount().get();
+            this.defaultMessageStore.getStoreStatsService().getGetMessageTransferedMsgCount().longValue();
 
         log.info("yesterday put message total: {}", msgPutTotalTodayMorning - msgPutTotalYesterdayMorning);
         log.info("yesterday get message total: {}", msgGetTotalTodayMorning - msgGetTotalYesterdayMorning);
@@ -88,6 +88,6 @@ public long getMsgPutTotalTodayNow() {
     }
 
     public long getMsgGetTotalTodayNow() {
-        return this.defaultMessageStore.getStoreStatsService().getGetMessageTransferedMsgCount().get();
+        return this.defaultMessageStore.getStoreStatsService().getGetMessageTransferedMsgCount().longValue();
     }
 }

File: store/src/test/java/org/apache/rocketmq/store/schedule/ScheduleMessageServiceTest.java
Patch:
@@ -149,9 +149,9 @@ public void deliverDelayedMessageTimerTaskTest() throws Exception {
         assertThat(messageResult.getStatus()).isEqualTo(GetMessageStatus.FOUND);
 
         // get the stats change
-        assertThat(messageStore.getBrokerStatsManager().getStatsItem(BROKER_PUT_NUMS, brokerConfig.getBrokerClusterName()).getValue().get()).isEqualTo(1);
-        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_NUMS, topic).getValue().get()).isEqualTo(1L);
-        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_SIZE, topic).getValue().get()).isEqualTo(messageResult.getBufferTotalSize());
+        assertThat(messageStore.getBrokerStatsManager().getStatsItem(BROKER_PUT_NUMS, brokerConfig.getBrokerClusterName()).getValue().sum()).isEqualTo(1);
+        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_NUMS, topic).getValue().sum()).isEqualTo(1L);
+        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_SIZE, topic).getValue().sum()).isEqualTo(messageResult.getBufferTotalSize());
 
         // get the message body
         ByteBuffer byteBuffer = ByteBuffer.allocate(messageResult.getBufferTotalSize());

File: tools/src/main/java/org/apache/rocketmq/tools/command/acl/UpdateGlobalWhiteAddrSubCommand.java
Patch:
@@ -82,9 +82,9 @@ public class UpdateGlobalWhiteAddrSubCommand implements SubCommand {
                 String clusterName = commandLine.getOptionValue('c').trim();
 
                 defaultMQAdminExt.start();
-                Set<String> masterSet =
-                    CommandUtil.fetchMasterAddrByClusterName(defaultMQAdminExt, clusterName);
-                for (String addr : masterSet) {
+                Set<String> brokerAddrSet =
+                    CommandUtil.fetchMasterAndSlaveAddrByClusterName(defaultMQAdminExt, clusterName);
+                for (String addr : brokerAddrSet) {
                     defaultMQAdminExt.updateGlobalWhiteAddrConfig(addr, globalWhiteRemoteAddresses);
                     System.out.printf("update global white remote addresses to %s success.%n", addr);
                 }

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByUniqueKeySubCommand.java
Patch:
@@ -114,7 +114,7 @@ private static void showMessage(final DefaultMQAdminExt admin, MessageExt msg, i
     private static String createBodyFile(MessageExt msg, int index) throws IOException {
         DataOutputStream dos = null;
         try {
-            StringBuffer bodyTmpFilePath = new StringBuffer("/tmp/rocketmq/msgbodys");
+            StringBuilder bodyTmpFilePath = new StringBuilder("/tmp/rocketmq/msgbodys");
             File file = new File(bodyTmpFilePath.toString());
             if (!file.exists()) {
                 file.mkdirs();
@@ -127,8 +127,9 @@ private static String createBodyFile(MessageExt msg, int index) throws IOExcepti
             dos.write(msg.getBody());
             return bodyTmpFilePath.toString();
         } finally {
-            if (dos != null)
+            if (dos != null) {
                 dos.close();
+            }
         }
     }
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/namesrv/WipeWritePermSubCommand.java
Patch:
@@ -34,7 +34,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Wipe write perm of broker in all name server";
+        return "Wipe write perm of broker in all name server you defined in the -n param";
     }
 
     @Override

File: store/src/main/java/org/apache/rocketmq/store/MultiPathMappedFileQueue.java
Patch:
@@ -90,7 +90,7 @@ protected MappedFile tryCreateMappedFile(long createOffset) {
         //do not create file is space is nearly full.
         availableStorePath.removeAll(fullStorePaths);
 
-        //if no store path left, fall back to wriable store path.
+        //if no store path left, fall back to writable store path.
         if (availableStorePath.isEmpty()) {
             availableStorePath = new HashSet<>(storePath);
             availableStorePath.removeAll(readonlyPathSet);

File: acl/src/test/java/org/apache/rocketmq/acl/common/AclUtilsTest.java
Patch:
@@ -202,6 +202,7 @@ public void v6ipProcessTest() {
 
     @Test
     public void expandIPTest() {
+        Assert.assertEquals(AclUtils.expandIP("::", 8), "0000:0000:0000:0000:0000:0000:0000:0000");
         Assert.assertEquals(AclUtils.expandIP("::1", 8), "0000:0000:0000:0000:0000:0000:0000:0001");
         Assert.assertEquals(AclUtils.expandIP("3::", 8), "0003:0000:0000:0000:0000:0000:0000:0000");
         Assert.assertEquals(AclUtils.expandIP("2::2", 8), "0002:0000:0000:0000:0000:0000:0000:0002");

File: store/src/main/java/org/apache/rocketmq/store/MappedFileQueue.java
Patch:
@@ -20,7 +20,6 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.Comparator;
 import java.util.Iterator;
 import java.util.List;

File: store/src/main/java/org/apache/rocketmq/store/MappedFileQueue.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.Comparator;
 import java.util.Iterator;
 import java.util.List;
 import java.util.ListIterator;
@@ -157,7 +158,8 @@ public boolean load() {
 
     public boolean doLoad(List<File> files) {
         // ascending order
-        Collections.sort(files);
+        files.sort(Comparator.comparing(File::getName));
+
         for (File file : files) {
             if (file.length() != this.mappedFileSize) {
                 log.warn(file + "\t" + file.length()

File: store/src/main/java/org/apache/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -23,7 +23,7 @@
 
 public class MessageStoreConfig {
 
-    public static final String MULTI_PATH_SPLITTER = ":";
+    public static final String MULTI_PATH_SPLITTER = System.getProperty("rocketmq.broker.multiPathSplitter", ",");
 
     //The root directory in which the log data is kept
     @ImportantField

File: store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreCleanFilesTest.java
Patch:
@@ -105,7 +105,7 @@ public void testIsSpaceFullMultiCommitLogStorePath() throws Exception {
         String storePath = config.getStorePathCommitLog();
         StringBuilder storePathBuilder = new StringBuilder();
         for (int i = 0; i < 3; i++) {
-            storePathBuilder.append(storePath).append(i).append(":");
+            storePathBuilder.append(storePath).append(i).append(MessageStoreConfig.MULTI_PATH_SPLITTER);
         }
         config.setStorePathCommitLog(storePathBuilder.toString());
         String[] paths = config.getStorePathCommitLog().trim().split(MessageStoreConfig.MULTI_PATH_SPLITTER);

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExt.java
Patch:
@@ -203,7 +203,8 @@ public void createAndUpdateSubscriptionGroupConfig(String addr,
     }
 
     @Override
-    public SubscriptionGroupConfig examineSubscriptionGroupConfig(String addr, String group) {
+    public SubscriptionGroupConfig examineSubscriptionGroupConfig(String addr, String group)
+        throws InterruptedException, RemotingException, MQClientException, MQBrokerException {
         return defaultMQAdminExtImpl.examineSubscriptionGroupConfig(addr, group);
     }
 

File: tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java
Patch:
@@ -90,7 +90,7 @@ void createAndUpdateSubscriptionGroupConfig(final String addr,
         final SubscriptionGroupConfig config) throws RemotingException,
         MQBrokerException, InterruptedException, MQClientException;
 
-    SubscriptionGroupConfig examineSubscriptionGroupConfig(final String addr, final String group);
+    SubscriptionGroupConfig examineSubscriptionGroupConfig(final String addr, final String group) throws InterruptedException, RemotingException, MQClientException, MQBrokerException;
 
     TopicConfig examineTopicConfig(final String addr, final String topic);
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -49,6 +49,7 @@
 import org.apache.rocketmq.tools.command.consumer.ConsumerProgressSubCommand;
 import org.apache.rocketmq.tools.command.consumer.ConsumerStatusSubCommand;
 import org.apache.rocketmq.tools.command.consumer.DeleteSubscriptionGroupCommand;
+import org.apache.rocketmq.tools.command.consumer.GetConsumerConfigSubCommand;
 import org.apache.rocketmq.tools.command.consumer.StartMonitoringSubCommand;
 import org.apache.rocketmq.tools.command.consumer.UpdateSubGroupSubCommand;
 import org.apache.rocketmq.tools.command.message.CheckMsgSendRTCommand;
@@ -204,6 +205,7 @@ public static void initCommand() {
         initCommand(new GetNamesrvConfigCommand());
         initCommand(new UpdateNamesrvConfigCommand());
         initCommand(new GetBrokerConfigCommand());
+        initCommand(new GetConsumerConfigSubCommand());
 
         initCommand(new QueryConsumeQueueCommand());
         initCommand(new SendMessageCommand());

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -193,7 +193,8 @@ private CompletableFuture<RemotingCommand> asyncConsumerSendMsgBack(ChannelHandl
 
             topicConfig = this.brokerController.getTopicConfigManager().createTopicInSendMessageBackMethod(newTopic,
                     DLQ_NUMS_PER_GROUP,
-                    PermName.PERM_WRITE, 0);
+                    PermName.PERM_WRITE | PermName.PERM_READ, 0);
+
             if (null == topicConfig) {
                 response.setCode(ResponseCode.SYSTEM_ERROR);
                 response.setRemark("topic[" + newTopic + "] not exist");
@@ -357,7 +358,7 @@ private boolean handleRetryAndDLQ(SendMessageRequestHeader requestHeader, Remoti
                 int queueIdInt = ThreadLocalRandom.current().nextInt(99999999) % DLQ_NUMS_PER_GROUP;
                 topicConfig = this.brokerController.getTopicConfigManager().createTopicInSendMessageBackMethod(newTopic,
                     DLQ_NUMS_PER_GROUP,
-                    PermName.PERM_WRITE, 0
+                    PermName.PERM_WRITE | PermName.PERM_READ, 0
                 );
                 msg.setTopic(newTopic);
                 msg.setQueueId(queueIdInt);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -189,6 +189,7 @@ private CompletableFuture<RemotingCommand> asyncConsumerSendMsgBack(ChannelHandl
             topicConfig = this.brokerController.getTopicConfigManager().createTopicInSendMessageBackMethod(newTopic,
                     DLQ_NUMS_PER_GROUP,
                     PermName.PERM_WRITE | PermName.PERM_READ, 0);
+
             if (null == topicConfig) {
                 response.setCode(ResponseCode.SYSTEM_ERROR);
                 response.setRemark("topic[" + newTopic + "] not exist");

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -636,7 +636,7 @@ public SocketAddress getStoreHost() {
     }
 
     private String diskUtil() {
-        double physicRatio = -1;
+        double physicRatio = 100;
         String storePath = this.brokerController.getMessageStoreConfig().getStorePathCommitLog();
         if (storePath.contains(MessageStoreConfig.MULTI_PATH_SPLITTER)) {
             String[] paths = storePath.trim().split(MessageStoreConfig.MULTI_PATH_SPLITTER);

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -785,14 +785,14 @@ public HashMap<String, String> getRuntimeInfo() {
 
         String commitLogStorePath = DefaultMessageStore.this.getMessageStoreConfig().getStorePathCommitLog();
         if (commitLogStorePath.contains(MessageStoreConfig.MULTI_PATH_SPLITTER)) {
-            double maxValue = Double.MIN_VALUE;
+            double minPhysicsUsedRatio = Double.MAX_VALUE;
             String[] paths = commitLogStorePath.trim().split(MessageStoreConfig.MULTI_PATH_SPLITTER);
             for (String clPath : paths) {
                 double physicRatio = UtilAll.getDiskPartitionSpaceUsedPercent(clPath);
                 result.put(RunningStats.commitLogDiskRatio.name() + "_" + clPath, String.valueOf(physicRatio));
-                maxValue = Math.max(maxValue, physicRatio);
+                minPhysicsUsedRatio = Math.min(minPhysicsUsedRatio, physicRatio);
             }
-            result.put(RunningStats.commitLogDiskRatio.name(), String.valueOf(maxValue));
+            result.put(RunningStats.commitLogDiskRatio.name(), String.valueOf(minPhysicsUsedRatio));
         } else {
             String storePathPhysic = DefaultMessageStore.this.getMessageStoreConfig().getStorePathCommitLog();
             double physicRatio = UtilAll.getDiskPartitionSpaceUsedPercent(storePathPhysic);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -637,7 +637,7 @@ public SocketAddress getStoreHost() {
 
     private String diskUtil() {
         double physicRatio = -1;
-        String storePath =this.brokerController.getMessageStoreConfig().getStorePathCommitLog();
+        String storePath = this.brokerController.getMessageStoreConfig().getStorePathCommitLog();
         if (storePath.contains(MessageStoreConfig.MULTI_PATH_SPLITTER)) {
             String[] paths = storePath.trim().split(MessageStoreConfig.MULTI_PATH_SPLITTER);
             for (String storePathPhysic : paths) {

File: store/src/main/java/org/apache/rocketmq/store/MappedFileQueue.java
Patch:
@@ -411,7 +411,7 @@ public int deleteExpiredFileByOffset(long offset, int unitSize) {
                     destroy = maxOffsetInLogicQueue < offset;
                     if (destroy) {
                         log.info("physic min offset " + offset + ", logics in current mappedFile max offset "
-                                + maxOffsetInLogicQueue + ", delete it");
+                            + maxOffsetInLogicQueue + ", delete it");
                     }
                 } else if (!mappedFile.isAvailable()) { // Handle hanged file.
                     log.warn("Found a hanged consume queue file, attempting to delete it.");
@@ -479,7 +479,7 @@ public MappedFile findMappedFileByOffset(final long offset, final boolean return
             if (firstMappedFile != null && lastMappedFile != null) {
                 if (offset < firstMappedFile.getFileFromOffset() || offset >= lastMappedFile.getFileFromOffset() + this.mappedFileSize) {
                     LOG_ERROR.warn("Offset not matched. Request offset: {}, firstOffset: {}, lastOffset: {}, mappedFileSize: {}, mappedFiles count: {}",
-                            offset,
+                        offset,
                         firstMappedFile.getFileFromOffset(),
                         lastMappedFile.getFileFromOffset() + this.mappedFileSize,
                         this.mappedFileSize,
@@ -493,7 +493,7 @@ public MappedFile findMappedFileByOffset(final long offset, final boolean return
                     }
 
                     if (targetFile != null && offset >= targetFile.getFileFromOffset()
-                            && offset < targetFile.getFileFromOffset() + this.mappedFileSize) {
+                        && offset < targetFile.getFileFromOffset() + this.mappedFileSize) {
                         return targetFile;
                     }
 

File: store/src/main/java/org/apache/rocketmq/store/MultiPathMappedFileQueue.java
Patch:
@@ -18,7 +18,6 @@
 
 
 import java.util.Arrays;
-import java.util.Collection;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.function.Supplier;

File: store/src/main/java/org/apache/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -17,9 +17,6 @@
 package org.apache.rocketmq.store.config;
 
 import java.io.File;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
 
 import org.apache.rocketmq.common.annotation.ImportantField;
 import org.apache.rocketmq.store.ConsumeQueue;

File: store/src/test/java/org/apache/rocketmq/store/MultiPathMappedFileQueueTest.java
Patch:
@@ -73,7 +73,7 @@ public void testLoadReadOnlyMappedFiles() {
 
         mappedFileQueue.load();
 
-        assertThat(mappedFileQueue.mappedFiles.size()).isEqualTo(1025);
+        assertThat(mappedFileQueue.mappedFiles.size()).isEqualTo(1024);
         mappedFileQueue.destroy();
 
     }

File: client/src/test/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyServiceTest.java
Patch:
@@ -178,7 +178,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
         StatsItemSet itemSet = (StatsItemSet)statItmeSetField.get(mgr);
         StatsItem item = itemSet.getAndCreateStatsItem(topic + "@" + pushConsumer.getDefaultMQPushConsumerImpl().groupName());
 
-        assertThat(item.getValue().get()).isGreaterThan(0L);
+        assertThat(item.getValue().sum()).isGreaterThan(0L);
         MessageExt msg = messageAtomic.get();
         assertThat(msg).isNotNull();
         assertThat(msg.getTopic()).isEqualTo(topic);

File: common/src/test/java/org/apache/rocketmq/common/stats/StatsItemSetTest.java
Patch:
@@ -23,6 +23,8 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
+import java.util.concurrent.atomic.LongAdder;
+
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.junit.After;
 import org.junit.Test;
@@ -95,7 +97,7 @@ public void run() {
         }
     }
 
-    private AtomicLong test_unit() throws InterruptedException {
+    private LongAdder test_unit() throws InterruptedException {
         final StatsItemSet statsItemSet = new StatsItemSet("topicTest", scheduler, null);
         executor = new ThreadPoolExecutor(10, 20, 10, TimeUnit.SECONDS,
             new ArrayBlockingQueue<Runnable>(100), new ThreadFactoryImpl("testMultiThread"));

File: store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java
Patch:
@@ -213,15 +213,15 @@ public void incGroupGetLatency(final String group, final String topic, final int
     }
 
     public void incBrokerPutNums() {
-        this.statsTable.get(BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().incrementAndGet();
+        this.statsTable.get(BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(1);
     }
 
     public void incBrokerPutNums(final int incValue) {
-        this.statsTable.get(BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().addAndGet(incValue);
+        this.statsTable.get(BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
     }
 
     public void incBrokerGetNums(final int incValue) {
-        this.statsTable.get(BROKER_GET_NUMS).getAndCreateStatsItem(this.clusterName).getValue().addAndGet(incValue);
+        this.statsTable.get(BROKER_GET_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
     }
 
     public void incSendBackNums(final String group, final String topic) {

File: store/src/test/java/org/apache/rocketmq/store/schedule/ScheduleMessageServiceTest.java
Patch:
@@ -149,9 +149,9 @@ public void deliverDelayedMessageTimerTaskTest() throws Exception {
         assertThat(messageResult.getStatus()).isEqualTo(GetMessageStatus.FOUND);
 
         // get the stats change
-        assertThat(messageStore.getBrokerStatsManager().getStatsItem(BROKER_PUT_NUMS, brokerConfig.getBrokerClusterName()).getValue().get()).isEqualTo(1);
-        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_NUMS, topic).getValue().get()).isEqualTo(1L);
-        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_SIZE, topic).getValue().get()).isEqualTo(messageResult.getBufferTotalSize());
+        assertThat(messageStore.getBrokerStatsManager().getStatsItem(BROKER_PUT_NUMS, brokerConfig.getBrokerClusterName()).getValue().sum()).isEqualTo(1);
+        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_NUMS, topic).getValue().sum()).isEqualTo(1L);
+        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_SIZE, topic).getValue().sum()).isEqualTo(messageResult.getBufferTotalSize());
 
         // get the message body
         ByteBuffer byteBuffer = ByteBuffer.allocate(messageResult.getBufferTotalSize());

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -316,8 +316,8 @@ private synchronized RemotingCommand updateAndCreateAccessConfig(ChannelHandlerC
         accessConfig.setWhiteRemoteAddress(requestHeader.getWhiteRemoteAddress());
         accessConfig.setDefaultTopicPerm(requestHeader.getDefaultTopicPerm());
         accessConfig.setDefaultGroupPerm(requestHeader.getDefaultGroupPerm());
-        accessConfig.setTopicPerms(UtilAll.string2List(requestHeader.getTopicPerms(), ","));
-        accessConfig.setGroupPerms(UtilAll.string2List(requestHeader.getGroupPerms(), ","));
+        accessConfig.setTopicPerms(UtilAll.split(requestHeader.getTopicPerms(), ","));
+        accessConfig.setGroupPerms(UtilAll.split(requestHeader.getGroupPerms(), ","));
         accessConfig.setAdmin(requestHeader.isAdmin());
         try {
 
@@ -390,7 +390,7 @@ private synchronized RemotingCommand updateGlobalWhiteAddrsConfig(ChannelHandler
 
         try {
             AccessValidator accessValidator = this.brokerController.getAccessValidatorMap().get(PlainAccessValidator.class);
-            if (accessValidator.updateGlobalWhiteAddrsConfig(UtilAll.string2List(requestHeader.getGlobalWhiteAddrs(), ","))) {
+            if (accessValidator.updateGlobalWhiteAddrsConfig(UtilAll.split(requestHeader.getGlobalWhiteAddrs(), ","))) {
                 response.setCode(ResponseCode.SUCCESS);
                 response.setOpaque(request.getOpaque());
                 response.markResponseType();

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -307,8 +307,8 @@ public void createPlainAccessConfig(final String addr, final PlainAccessConfig p
         requestHeader.setDefaultGroupPerm(plainAccessConfig.getDefaultGroupPerm());
         requestHeader.setDefaultTopicPerm(plainAccessConfig.getDefaultTopicPerm());
         requestHeader.setWhiteRemoteAddress(plainAccessConfig.getWhiteRemoteAddress());
-        requestHeader.setTopicPerms(UtilAll.list2String(plainAccessConfig.getTopicPerms(), ","));
-        requestHeader.setGroupPerms(UtilAll.list2String(plainAccessConfig.getGroupPerms(), ","));
+        requestHeader.setTopicPerms(UtilAll.join(plainAccessConfig.getTopicPerms(), ","));
+        requestHeader.setGroupPerms(UtilAll.join(plainAccessConfig.getGroupPerms(), ","));
 
         RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.UPDATE_AND_CREATE_ACL_CONFIG, requestHeader);
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/acl/DeleteAccessConfigSubCommand.java
Patch:
@@ -85,9 +85,9 @@ public Options buildCommandlineOptions(Options options) {
 
                 defaultMQAdminExt.start();
 
-                Set<String> masterSet =
-                    CommandUtil.fetchMasterAddrByClusterName(defaultMQAdminExt, clusterName);
-                for (String addr : masterSet) {
+                Set<String> brokerAddrSet =
+                    CommandUtil.fetchMasterAndSlaveAddrByClusterName(defaultMQAdminExt, clusterName);
+                for (String addr : brokerAddrSet) {
                     defaultMQAdminExt.deletePlainAccessConfig(addr, accessKey);
                     System.out.printf("delete plain access config account from %s success.%n", addr);
                 }

File: tools/src/main/java/org/apache/rocketmq/tools/command/acl/UpdateGlobalWhiteAddrSubCommand.java
Patch:
@@ -82,9 +82,9 @@ public class UpdateGlobalWhiteAddrSubCommand implements SubCommand {
                 String clusterName = commandLine.getOptionValue('c').trim();
 
                 defaultMQAdminExt.start();
-                Set<String> masterSet =
-                    CommandUtil.fetchMasterAddrByClusterName(defaultMQAdminExt, clusterName);
-                for (String addr : masterSet) {
+                Set<String> brokerAddrSet =
+                    CommandUtil.fetchMasterAndSlaveAddrByClusterName(defaultMQAdminExt, clusterName);
+                for (String addr : brokerAddrSet) {
                     defaultMQAdminExt.updateGlobalWhiteAddrConfig(addr, globalWhiteRemoteAddresses);
                     System.out.printf("update global white remote addresses to %s success.%n", addr);
                 }

File: common/src/main/java/org/apache/rocketmq/common/protocol/RequestCode.java
Patch:
@@ -188,4 +188,6 @@ public class RequestCode {
     public static final int SEND_REPLY_MESSAGE_V2 = 325;
 
     public static final int PUSH_REPLY_MESSAGE_TO_CLIENT = 326;
+
+    public static final int ADD_WRITE_PERM_OF_BROKER = 327;
 }

File: tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java
Patch:
@@ -134,6 +134,9 @@ ProducerConnection examineProducerConnectionInfo(final String producerGroup,
     int wipeWritePermOfBroker(final String namesrvAddr, String brokerName) throws RemotingCommandException,
         RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, InterruptedException, MQClientException;
 
+    int addWritePermOfBroker(final String namesrvAddr, String brokerName) throws RemotingCommandException,
+            RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, InterruptedException, MQClientException;
+
     void putKVConfig(final String namespace, final String key, final String value);
 
     String getKVConfig(final String namespace,

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -61,6 +61,7 @@
 import org.apache.rocketmq.tools.command.message.QueryMsgByUniqueKeySubCommand;
 import org.apache.rocketmq.tools.command.message.QueryMsgTraceByIdSubCommand;
 import org.apache.rocketmq.tools.command.message.SendMessageCommand;
+import org.apache.rocketmq.tools.command.namesrv.AddWritePermSubCommand;
 import org.apache.rocketmq.tools.command.namesrv.DeleteKvConfigCommand;
 import org.apache.rocketmq.tools.command.namesrv.GetNamesrvConfigCommand;
 import org.apache.rocketmq.tools.command.namesrv.UpdateKvConfigCommand;
@@ -185,6 +186,7 @@ public static void initCommand() {
         initCommand(new DeleteKvConfigCommand());
 
         initCommand(new WipeWritePermSubCommand());
+        initCommand(new AddWritePermSubCommand());
         initCommand(new ResetOffsetByTimeCommand());
 
         initCommand(new UpdateOrderConfCommand());

File: tools/src/main/java/org/apache/rocketmq/tools/command/namesrv/WipeWritePermSubCommand.java
Patch:
@@ -34,7 +34,7 @@ public String commandName() {
 
     @Override
     public String commandDesc() {
-        return "Wipe write perm of broker in all name server";
+        return "Wipe write perm of broker in all name server you defined in the -n param";
     }
 
     @Override

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java
Patch:
@@ -22,7 +22,8 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.Random;
+import java.util.concurrent.ThreadLocalRandom;
+
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.mqtrace.SendMessageContext;
 import org.apache.rocketmq.broker.mqtrace.SendMessageHook;
@@ -60,7 +61,6 @@ public abstract class AbstractSendMessageProcessor extends AsyncNettyRequestProc
 
     protected final static int DLQ_NUMS_PER_GROUP = 1;
     protected final BrokerController brokerController;
-    protected final Random random = new Random(System.currentTimeMillis());
     protected final SocketAddress storeHost;
     private List<SendMessageHook> sendMessageHookList;
 
@@ -109,7 +109,7 @@ protected MessageExtBrokerInner buildInnerMsg(final ChannelHandlerContext ctx,
         final SendMessageRequestHeader requestHeader, final byte[] body, TopicConfig topicConfig) {
         int queueIdInt = requestHeader.getQueueId();
         if (queueIdInt < 0) {
-            queueIdInt = Math.abs(this.random.nextInt() % 99999999) % topicConfig.getWriteQueueNums();
+            queueIdInt = ThreadLocalRandom.current().nextInt(99999999) % topicConfig.getWriteQueueNums();
         }
         int sysFlag = requestHeader.getSysFlag();
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ReplyMessageProcessor.java
Patch:
@@ -45,6 +45,8 @@
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.stats.BrokerStatsManager;
 
+import java.util.concurrent.ThreadLocalRandom;
+
 public class ReplyMessageProcessor extends AbstractSendMessageProcessor implements NettyRequestProcessor {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
@@ -125,7 +127,7 @@ private RemotingCommand processReplyMessageRequest(final ChannelHandlerContext c
         TopicConfig topicConfig = this.brokerController.getTopicConfigManager().selectTopicConfig(requestHeader.getTopic());
 
         if (queueIdInt < 0) {
-            queueIdInt = Math.abs(this.random.nextInt() % 99999999) % topicConfig.getWriteQueueNums();
+            queueIdInt = ThreadLocalRandom.current().nextInt(99999999) % topicConfig.getWriteQueueNums();
         }
 
         MessageExtBrokerInner msgInner = new MessageExtBrokerInner();

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/AbstractTransactionalMessageCheckListener.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.rocketmq.broker.transaction;
 
 import io.netty.channel.Channel;
-import java.util.Random;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageConst;
@@ -40,7 +39,6 @@ public abstract class AbstractTransactionalMessageCheckListener {
 
     //queue nums of topic TRANS_CHECK_MAX_TIME_TOPIC
     protected final static int TCMT_QUEUE_NUMS = 1;
-    protected final Random random = new Random(System.currentTimeMillis());
 
     private static ExecutorService executorService = new ThreadPoolExecutor(2, 5, 100, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(2000), new ThreadFactory() {
         @Override

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/DefaultTransactionalMessageCheckListener.java
Patch:
@@ -30,6 +30,8 @@
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
 
+import java.util.concurrent.ThreadLocalRandom;
+
 public class DefaultTransactionalMessageCheckListener extends AbstractTransactionalMessageCheckListener {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
 
@@ -58,7 +60,7 @@ public void resolveDiscardMsg(MessageExt msgExt) {
 
     private MessageExtBrokerInner toMessageExtBrokerInner(MessageExt msgExt) {
         TopicConfig topicConfig = this.getBrokerController().getTopicConfigManager().createTopicOfTranCheckMaxTime(TCMT_QUEUE_NUMS, PermName.PERM_READ | PermName.PERM_WRITE);
-        int queueId = Math.abs(random.nextInt() % 99999999) % TCMT_QUEUE_NUMS;
+        int queueId = ThreadLocalRandom.current().nextInt(99999999) % TCMT_QUEUE_NUMS;
         MessageExtBrokerInner inner = new MessageExtBrokerInner();
         inner.setTopic(topicConfig.getTopicName());
         inner.setBody(msgExt.getBody());

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -199,11 +199,12 @@ public void processRequestCommand(final ChannelHandlerContext ctx, final Remotin
                 @Override
                 public void run() {
                     try {
-                        doBeforeRpcHooks(RemotingHelper.parseChannelRemoteAddr(ctx.channel()), cmd);
+                        String remoteAddr = RemotingHelper.parseChannelRemoteAddr(ctx.channel());
+                        doBeforeRpcHooks(remoteAddr, cmd);
                         final RemotingResponseCallback callback = new RemotingResponseCallback() {
                             @Override
                             public void callback(RemotingCommand response) {
-                                doAfterRpcHooks(RemotingHelper.parseChannelRemoteAddr(ctx.channel()), cmd, response);
+                                doAfterRpcHooks(remoteAddr, cmd, response);
                                 if (!cmd.isOnewayRPC()) {
                                     if (response != null) {
                                         response.setOpaque(opaque);

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -58,6 +58,7 @@ public class MixAll {
     public static final String DEFAULT_PRODUCER_GROUP = "DEFAULT_PRODUCER";
     public static final String DEFAULT_CONSUMER_GROUP = "DEFAULT_CONSUMER";
     public static final String TOOLS_CONSUMER_GROUP = "TOOLS_CONSUMER";
+    public static final String SCHEDULE_CONSUMER_GROUP = "SCHEDULE_CONSUMER";
     public static final String FILTERSRV_CONSUMER_GROUP = "FILTERSRV_CONSUMER";
     public static final String MONITOR_CONSUMER_GROUP = "__MONITOR_CONSUMER";
     public static final String CLIENT_INNER_PRODUCER_GROUP = "CLIENT_INNER_PRODUCER";

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -197,6 +197,7 @@ private CompletableFuture<RemotingCommand> asyncConsumerSendMsgBack(ChannelHandl
                 response.setRemark("topic[" + newTopic + "] not exist");
                 return CompletableFuture.completedFuture(response);
             }
+            msgExt.setDelayTimeLevel(0);
         } else {
             if (0 == delayLevel) {
                 delayLevel = 3 + msgExt.getReconsumeTimes();
@@ -358,6 +359,7 @@ private boolean handleRetryAndDLQ(SendMessageRequestHeader requestHeader, Remoti
                 );
                 msg.setTopic(newTopic);
                 msg.setQueueId(queueIdInt);
+                msg.setDelayTimeLevel(0);
                 if (null == topicConfig) {
                     response.setCode(ResponseCode.SYSTEM_ERROR);
                     response.setRemark("topic[" + newTopic + "] not exist");

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultLitePullConsumer.java
Patch:
@@ -535,7 +535,9 @@ public void setCustomizedTraceTopic(String customizedTraceTopic) {
     private void setTraceDispatcher() {
         if (isEnableMsgTrace()) {
             try {
-                this.traceDispatcher = new AsyncTraceDispatcher(consumerGroup, TraceDispatcher.Type.CONSUME, customizedTraceTopic, null);
+                AsyncTraceDispatcher traceDispatcher = new AsyncTraceDispatcher(consumerGroup, TraceDispatcher.Type.CONSUME, customizedTraceTopic, null);
+                traceDispatcher.getTraceProducer().setUseTLS(this.isUseTLS());
+                this.traceDispatcher = traceDispatcher;
                 this.defaultLitePullConsumerImpl.registerConsumeMessageHook(
                     new ConsumeMessageTraceHookImpl(traceDispatcher));
             } catch (Throwable e) {

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceView.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.rocketmq.client.trace;
 
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
-import org.apache.commons.codec.Charsets;
 import org.apache.rocketmq.common.message.MessageExt;
 
 public class TraceView {
@@ -40,7 +40,7 @@ public class TraceView {
 
     public static List<TraceView> decodeFromTraceTransData(String key, MessageExt messageExt) {
         List<TraceView> messageTraceViewList = new ArrayList<TraceView>();
-        String messageBody = new String(messageExt.getBody(), Charsets.UTF_8);
+        String messageBody = new String(messageExt.getBody(), StandardCharsets.UTF_8);
         if (messageBody == null || messageBody.length() <= 0) {
             return messageTraceViewList;
         }

File: client/src/test/java/org/apache/rocketmq/client/trace/TraceViewTest.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.rocketmq.client.trace;
 
-import org.apache.commons.codec.Charsets;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageType;
 import org.junit.Assert;
 import org.junit.Test;
 
+import java.nio.charset.StandardCharsets;
 import java.util.List;
 
 public class TraceViewTest {
@@ -46,7 +46,7 @@ public void testDecodeFromTraceTransData() {
             .append(true).append(TraceConstants.FIELD_SPLITOR)
             .toString();
         MessageExt message = new MessageExt();
-        message.setBody(messageBody.getBytes(Charsets.UTF_8));
+        message.setBody(messageBody.getBytes(StandardCharsets.UTF_8));
         String key = "AC1415116D1418B4AAC217FE1B4E0000";
         List<TraceView> traceViews = TraceView.decodeFromTraceTransData(key, message);
         Assert.assertEquals(traceViews.size(), 1);

File: store/src/main/java/org/apache/rocketmq/store/stats/BrokerStats.java
Patch:
@@ -45,7 +45,7 @@ public void record() {
         this.msgPutTotalTodayMorning =
             this.defaultMessageStore.getStoreStatsService().getPutMessageTimesTotal();
         this.msgGetTotalTodayMorning =
-            this.defaultMessageStore.getStoreStatsService().getGetMessageTransferedMsgCount().get();
+            this.defaultMessageStore.getStoreStatsService().getGetMessageTransferedMsgCount().longValue();
 
         log.info("yesterday put message total: {}", msgPutTotalTodayMorning - msgPutTotalYesterdayMorning);
         log.info("yesterday get message total: {}", msgGetTotalTodayMorning - msgGetTotalYesterdayMorning);
@@ -88,6 +88,6 @@ public long getMsgPutTotalTodayNow() {
     }
 
     public long getMsgGetTotalTodayNow() {
-        return this.defaultMessageStore.getStoreStatsService().getGetMessageTransferedMsgCount().get();
+        return this.defaultMessageStore.getStoreStatsService().getGetMessageTransferedMsgCount().longValue();
     }
 }

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceDataEncoder.java
Patch:
@@ -188,8 +188,9 @@ public static TraceTransferBean encoderFromContextBean(TraceContext ctx) {
                         .append(ctx.getCostTime()).append(TraceConstants.CONTENT_SPLITOR)//
                         .append(ctx.isSuccess()).append(TraceConstants.CONTENT_SPLITOR)//
                         .append(bean.getKeys()).append(TraceConstants.CONTENT_SPLITOR)//
-                        .append(ctx.getContextCode()).append(TraceConstants.FIELD_SPLITOR);
-
+                        .append(ctx.getContextCode()).append(TraceConstants.CONTENT_SPLITOR)
+                        .append(ctx.getTimeStamp()).append(TraceConstants.CONTENT_SPLITOR)
+                        .append(ctx.getGroupName()).append(TraceConstants.FIELD_SPLITOR);
                 }
             }
             break;

File: client/src/test/java/org/apache/rocketmq/client/trace/TraceDataEncoderTest.java
Patch:
@@ -189,6 +189,8 @@ public void testSubAfterTraceDataFormatTest() {
         subAfterContext.setRequestId("3455848576927");
         subAfterContext.setCostTime(20);
         subAfterContext.setSuccess(true);
+        subAfterContext.setTimeStamp(1625883640000L);
+        subAfterContext.setGroupName("GroupName-test");
         subAfterContext.setContextCode(98623046);
         TraceBean bean = new TraceBean();
         bean.setMsgId("AC1415116D1418B4AAC217FE1B4E0000");
@@ -200,7 +202,7 @@ public void testSubAfterTraceDataFormatTest() {
         String transData = traceTransferBean.getTransData();
         Assert.assertNotNull(transData);
         String[] items = transData.split(String.valueOf(TraceConstants.CONTENT_SPLITOR));
-        Assert.assertEquals(7, items.length);
+        Assert.assertEquals(9, items.length);
 
     }
 

File: acl/src/main/java/org/apache/rocketmq/acl/plain/RemoteAddressStrategyFactory.java
Patch:
@@ -167,7 +167,7 @@ public RangeRemoteAddressStrategy(String remoteAddr) {
                 String[] strArray = StringUtils.split(remoteAddr, ".");
                 if (analysis(strArray, 1) || analysis(strArray, 2) || analysis(strArray, 3)) {
                     AclUtils.verify(remoteAddr, index - 1);
-                    StringBuffer sb = new StringBuffer();
+                    StringBuilder sb = new StringBuilder();
                     for (int j = 0; j < index; j++) {
                         sb.append(strArray[j].trim()).append(".");
                     }

File: common/src/main/java/org/apache/rocketmq/common/UtilAll.java
Patch:
@@ -565,11 +565,11 @@ public static String list2String(List<String> list, String splitor) {
         if (list == null || list.size() == 0) {
             return null;
         }
-        StringBuffer str = new StringBuffer();
+        StringBuilder str = new StringBuilder();
         for (int i = 0; i < list.size(); i++) {
             str.append(list.get(i));
             if (i == list.size() - 1) {
-                continue;
+                break;
             }
             str.append(splitor);
         }

File: common/src/main/java/org/apache/rocketmq/common/protocol/NamespaceUtil.java
Patch:
@@ -120,7 +120,7 @@ public static String wrapNamespaceAndRetry(String namespace, String consumerGrou
             return null;
         }
 
-        return new StringBuffer()
+        return new StringBuilder()
             .append(MixAll.RETRY_GROUP_TOPIC_PREFIX)
             .append(wrapNamespace(namespace, consumerGroup))
             .toString();

File: common/src/test/java/org/apache/rocketmq/common/utils/IOTinyUtilsTest.java
Patch:
@@ -82,7 +82,7 @@ public void testCopy() throws Exception {
 
     @Test
     public void testReadLines() throws Exception {
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         for (int i = 0; i < 10; i++) {
             sb.append("testReadLines").append("\n");
         }
@@ -95,7 +95,7 @@ public void testReadLines() throws Exception {
 
     @Test
     public void testToBufferedReader() throws Exception {
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         for (int i = 0; i < 10; i++) {
             sb.append("testToBufferedReader").append("\n");
         }

File: filter/src/main/java/org/apache/rocketmq/filter/parser/TokenMgrError.java
Patch:
@@ -66,7 +66,7 @@ public class TokenMgrError extends Error {
      * equivalents in the given string
      */
     protected static final String addEscapes(String str) {
-        StringBuffer retval = new StringBuffer();
+        StringBuilder retval = new StringBuilder();
         char ch;
         for (int i = 0; i < str.length(); i++) {
             switch (str.charAt(i)) {
@@ -141,6 +141,7 @@ protected static String LexicalError(boolean eofSeen, int lexState, int errorLin
      * <p/>
      * from this method for such cases in the release version of your parser.
      */
+    @Override
     public String getMessage() {
         return super.getMessage();
     }

File: filter/src/test/java/org/apache/rocketmq/filter/ParserTest.java
Patch:
@@ -84,7 +84,7 @@ public void testParse_decimalOverFlow() {
     @Test
     public void testParse_floatOverFlow() {
         try {
-            StringBuffer sb = new StringBuffer(210000);
+            StringBuilder sb = new StringBuilder(210000);
             sb.append("1");
             for (int i = 0; i < 2048; i ++) {
                 sb.append("111111111111111111111111111111111111111111111111111");

File: remoting/src/main/java/org/apache/rocketmq/remoting/common/RemotingHelper.java
Patch:
@@ -36,7 +36,7 @@ public class RemotingHelper {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(ROCKETMQ_REMOTING);
 
     public static String exceptionSimpleDesc(final Throwable e) {
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         if (e != null) {
             sb.append(e.toString());
 

File: store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java
Patch:
@@ -159,7 +159,7 @@ public void incGroupGetNums(final String group, final String topic, final int in
     }
 
     public String buildStatsKey(String topic, String group) {
-        StringBuffer strBuilder = new StringBuffer();
+        StringBuilder strBuilder = new StringBuilder();
         strBuilder.append(topic);
         strBuilder.append("@");
         strBuilder.append(group);
@@ -217,7 +217,7 @@ public void incCommercialValue(final String key, final String owner, final Strin
     }
 
     public String buildCommercialStatsKey(String owner, String topic, String group, String type) {
-        StringBuffer strBuilder = new StringBuffer();
+        StringBuilder strBuilder = new StringBuilder();
         strBuilder.append(owner);
         strBuilder.append("@");
         strBuilder.append(topic);

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByUniqueKeySubCommand.java
Patch:
@@ -114,7 +114,7 @@ private static void showMessage(final DefaultMQAdminExt admin, MessageExt msg, i
     private static String createBodyFile(MessageExt msg, int index) throws IOException {
         DataOutputStream dos = null;
         try {
-            StringBuffer bodyTmpFilePath = new StringBuffer("/tmp/rocketmq/msgbodys");
+            StringBuilder bodyTmpFilePath = new StringBuilder("/tmp/rocketmq/msgbodys");
             File file = new File(bodyTmpFilePath.toString());
             if (!file.exists()) {
                 file.mkdirs();
@@ -127,8 +127,9 @@ private static String createBodyFile(MessageExt msg, int index) throws IOExcepti
             dos.write(msg.getBody());
             return bodyTmpFilePath.toString();
         } finally {
-            if (dos != null)
+            if (dos != null) {
                 dos.close();
+            }
         }
     }
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.Objects;
 import java.util.Random;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.mqtrace.SendMessageContext;

File: client/src/main/java/org/apache/rocketmq/client/producer/RequestFutureTable.java
Patch:
@@ -32,7 +32,7 @@
 public class RequestFutureTable {
     private static InternalLogger log = ClientLogger.getLog();
     private static ConcurrentHashMap<String, RequestResponseFuture> requestFutureTable = new ConcurrentHashMap<String, RequestResponseFuture>();
-    private static final AtomicInteger producerNum = new AtomicInteger(0);
+    private static final AtomicInteger PRODUCER_NUM = new AtomicInteger(0);
 
     public static ConcurrentHashMap<String, RequestResponseFuture> getRequestFutureTable() {
         return requestFutureTable;
@@ -64,6 +64,6 @@ public static void scanExpiredRequest() {
     }
 
     public static AtomicInteger getProducerNum() {
-        return producerNum;
+        return PRODUCER_NUM;
     }
 }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.Objects;
 import java.util.Random;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.mqtrace.SendMessageContext;

File: client/src/main/java/org/apache/rocketmq/client/producer/RequestFutureTable.java
Patch:
@@ -32,7 +32,7 @@
 public class RequestFutureTable {
     private static InternalLogger log = ClientLogger.getLog();
     private static ConcurrentHashMap<String, RequestResponseFuture> requestFutureTable = new ConcurrentHashMap<String, RequestResponseFuture>();
-    private static final AtomicInteger producerNum = new AtomicInteger(0);
+    private static final AtomicInteger PRODUCER_NUM = new AtomicInteger(0);
 
     public static ConcurrentHashMap<String, RequestResponseFuture> getRequestFutureTable() {
         return requestFutureTable;
@@ -64,6 +64,6 @@ public static void scanExpiredRequest() {
     }
 
     public static AtomicInteger getProducerNum() {
-        return producerNum;
+        return PRODUCER_NUM;
     }
 }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -1445,7 +1445,7 @@ private HashMap<String, String> prepareRuntimeInfo() {
 
         java.io.File commitLogDir = new java.io.File(this.brokerController.getMessageStoreConfig().getStorePathRootDir());
         if (commitLogDir.exists()) {
-            runtimeInfo.put("commitLogDirCapacity", String.format("Total : %s, Free : %s.", MixAll.humanReadableByteCount(commitLogDir.getTotalSpace(), false), MixAll.humanReadableByteCount(commitLogDir.getFreeSpace(), false)));
+            runtimeInfo.put("commitLogDirCapacity", String.format("Total : %s, Free : %s.", MixAll.humanReadableByteCount(commitLogDir.getTotalSpace(), false), MixAll.humanReadableByteCount(commitLogDir.getUsableSpace(), false)));
         }
 
         return runtimeInfo;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java
Patch:
@@ -257,8 +257,8 @@ public void executeSendMessageHookBefore(final ChannelHandlerContext ctx, final
                 try {
                     final SendMessageRequestHeader requestHeader = parseRequestHeader(request);
 
-                    String namespace = NamespaceUtil.getNamespaceFromResource(requestHeader.getTopic());
                     if (null != requestHeader) {
+                        String namespace = NamespaceUtil.getNamespaceFromResource(requestHeader.getTopic());
                         context.setNamespace(namespace);
                         context.setProducerGroup(requestHeader.getProducerGroup());
                         context.setTopic(requestHeader.getTopic());

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -612,6 +612,7 @@ public void executeConsumeMessageHookAfter(final ConsumeMessageContext context)
         }
     }
 
+    @Override
     public SocketAddress getStoreHost() {
         return storeHost;
     }

File: tools/src/main/java/org/apache/rocketmq/tools/command/acl/UpdateAccessConfigSubCommand.java
Patch:
@@ -164,9 +164,9 @@ public void execute(CommandLine commandLine, Options options,
                 String clusterName = commandLine.getOptionValue('c').trim();
 
                 defaultMQAdminExt.start();
-                Set<String> masterSet =
-                    CommandUtil.fetchMasterAddrByClusterName(defaultMQAdminExt, clusterName);
-                for (String addr : masterSet) {
+                Set<String> brokerAddrSet =
+                    CommandUtil.fetchMasterAndSlaveAddrByClusterName(defaultMQAdminExt, clusterName);
+                for (String addr : brokerAddrSet) {
                     defaultMQAdminExt.createAndUpdatePlainAccessConfig(addr, accessConfig);
                     System.out.printf("create or update plain access config to %s success.%n", addr);
                 }

File: store/src/main/java/org/apache/rocketmq/store/AppendMessageCallback.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.nio.ByteBuffer;
 import org.apache.rocketmq.common.message.MessageExtBatch;
+import org.apache.rocketmq.store.CommitLog.PutMessageContext;
 
 /**
  * Write messages callback interface
@@ -30,7 +31,7 @@ public interface AppendMessageCallback {
      * @return How many bytes to write
      */
     AppendMessageResult doAppend(final long fileFromOffset, final ByteBuffer byteBuffer,
-        final int maxBlank, final MessageExtBrokerInner msg);
+        final int maxBlank, final MessageExtBrokerInner msg, PutMessageContext putMessageContext);
 
     /**
      * After batched message serialization, write MapedByteBuffer
@@ -39,5 +40,5 @@ AppendMessageResult doAppend(final long fileFromOffset, final ByteBuffer byteBuf
      * @return How many bytes to write
      */
     AppendMessageResult doAppend(final long fileFromOffset, final ByteBuffer byteBuffer,
-        final int maxBlank, final MessageExtBatch messageExtBatch);
+        final int maxBlank, final MessageExtBatch messageExtBatch, PutMessageContext putMessageContext);
 }

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -863,7 +863,7 @@ public void shutdown() {
         }
     }
 
-    public boolean registerConsumer(final String group, final MQConsumerInner consumer) {
+    public synchronized boolean registerConsumer(final String group, final MQConsumerInner consumer) {
         if (null == group || null == consumer) {
             return false;
         }
@@ -877,9 +877,9 @@ public boolean registerConsumer(final String group, final MQConsumerInner consum
         return true;
     }
 
-    public void unregisterConsumer(final String group) {
+    public synchronized void unregisterConsumer(final String group) {
         this.consumerTable.remove(group);
-        this.unregisterClientWithLock(null, group);
+        this.unregisterClient(null, group);
     }
 
     private void unregisterClientWithLock(final String producerGroup, final String consumerGroup) {

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java
Patch:
@@ -187,6 +187,7 @@ public static BrokerController createBrokerController(String[] args) {
             JoranConfigurator configurator = new JoranConfigurator();
             configurator.setContext(lc);
             lc.reset();
+            System.setProperty("brokerLogDir", brokerConfig.getBrokerName() + "_" + brokerConfig.getBrokerId());
             configurator.doConfigure(brokerConfig.getRocketmqHome() + "/conf/logback_broker.xml");
 
             if (commandLine.hasOption('p')) {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java
Patch:
@@ -785,7 +785,7 @@ public void run() {
                 long offset = 0L;
                 try {
                     offset = nextPullOffset(messageQueue);
-                } catch (MQClientException e) {
+                } catch (Exception e) {
                     log.error("Failed to get next pull offset", e);
                     scheduledThreadPoolExecutor.schedule(this, PULL_TIME_DELAY_MILLS_ON_EXCEPTION, TimeUnit.MILLISECONDS);
                     return;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -273,7 +273,7 @@ public void pullMessage(final PullRequest pullRequest) {
                     long offset = -1L;
                     try {
                         offset = this.rebalanceImpl.computePullFromWhereWithException(pullRequest.getMessageQueue());
-                    } catch (MQClientException e) {
+                    } catch (Exception e) {
                         this.executePullRequestLater(pullRequest, pullTimeDelayMillsWhenException);
                         log.error("Failed to compute pull offset, pullResult: {}", pullRequest, e);
                         return;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceImpl.java
Patch:
@@ -378,7 +378,7 @@ private boolean updateProcessQueueTableInRebalance(final String topic, final Set
                 long nextOffset = -1L;
                 try {
                     nextOffset = this.computePullFromWhereWithException(mq);
-                } catch (MQClientException e) {
+                } catch (Exception e) {
                     log.info("doRebalance, {}, compute offset failed, {}", consumerGroup, mq);
                     continue;
                 }

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceLitePullImpl.java
Patch:
@@ -102,7 +102,8 @@ public long computePullFromWhereWithException(MessageQueue mq) throws MQClientEx
                         try {
                             result = this.mQClientFactory.getMQAdminImpl().maxOffset(mq);
                         } catch (MQClientException e) {
-                            result = -1;
+                            log.warn("Compute consume offset from last offset exception, mq={}, exception={}", mq, e);
+                            throw e;
                         }
                     }
                 } else {

File: example/src/main/java/org/apache/rocketmq/example/quickstart/Producer.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
-import org.apache.rocketmq.client.producer.SendCallback;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
@@ -77,7 +76,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
                  * if you want to get the send result in a synchronize way, you can use this send method
                  * {@code
                  * SendResult sendResult = producer.send(msg);
-                 * System.out.println(sendResult.toString());
+                 * System.out.printf("%s%n", sendResult);
                  * }
                  */
 

File: example/src/main/java/org/apache/rocketmq/example/quickstart/Producer.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
-import org.apache.rocketmq.client.producer.SendCallback;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
@@ -77,7 +76,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
                  * if you want to get the send result in a synchronize way, you can use this send method
                  * {@code
                  * SendResult sendResult = producer.send(msg);
-                 * System.out.println(sendResult.toString());
+                 * System.out.printf("%s%n", sendResult);
                  * }
                  */
 

File: example/src/main/java/org/apache/rocketmq/example/quickstart/Producer.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
-import org.apache.rocketmq.client.producer.SendCallback;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
@@ -77,7 +76,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
                  * if you want to get the send result in a synchronize way, you can use this send method
                  * {@code
                  * SendResult sendResult = producer.send(msg);
-                 * System.out.println(sendResult.toString());
+                 * System.out.printf("%s%n", sendResult);
                  * }
                  */
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java
Patch:
@@ -785,7 +785,7 @@ public void run() {
                 long offset = 0L;
                 try {
                     offset = nextPullOffset(messageQueue);
-                } catch (MQClientException e) {
+                } catch (Exception e) {
                     log.error("Failed to get next pull offset", e);
                     scheduledThreadPoolExecutor.schedule(this, PULL_TIME_DELAY_MILLS_ON_EXCEPTION, TimeUnit.MILLISECONDS);
                     return;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -273,7 +273,7 @@ public void pullMessage(final PullRequest pullRequest) {
                     long offset = -1L;
                     try {
                         offset = this.rebalanceImpl.computePullFromWhereWithException(pullRequest.getMessageQueue());
-                    } catch (MQClientException e) {
+                    } catch (Exception e) {
                         this.executePullRequestLater(pullRequest, pullTimeDelayMillsWhenException);
                         log.error("Failed to compute pull offset, pullResult: {}", pullRequest, e);
                         return;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceImpl.java
Patch:
@@ -378,7 +378,7 @@ private boolean updateProcessQueueTableInRebalance(final String topic, final Set
                 long nextOffset = -1L;
                 try {
                     nextOffset = this.computePullFromWhereWithException(mq);
-                } catch (MQClientException e) {
+                } catch (Exception e) {
                     log.info("doRebalance, {}, compute offset failed, {}", consumerGroup, mq);
                     continue;
                 }

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceLitePullImpl.java
Patch:
@@ -102,7 +102,8 @@ public long computePullFromWhereWithException(MessageQueue mq) throws MQClientEx
                         try {
                             result = this.mQClientFactory.getMQAdminImpl().maxOffset(mq);
                         } catch (MQClientException e) {
-                            result = -1;
+                            log.warn("Compute consume offset from last offset exception, mq={}, exception={}", mq, e);
+                            throw e;
                         }
                     }
                 } else {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java
Patch:
@@ -411,11 +411,11 @@ public void run() {
                 }
                 status = listener.consumeMessage(Collections.unmodifiableList(msgs), context);
             } catch (Throwable e) {
-                log.warn("consumeMessage exception: {} Group: {} Msgs: {} MQ: {}",
+                log.warn(String.format("consumeMessage exception: %s Group: %s Msgs: %s MQ: %s",
                     RemotingHelper.exceptionSimpleDesc(e),
                     ConsumeMessageConcurrentlyService.this.consumerGroup,
                     msgs,
-                    messageQueue);
+                    messageQueue), e);
                 hasException = true;
             }
             long consumeRT = System.currentTimeMillis() - beginTimestamp;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -487,11 +487,11 @@ public void run() {
 
                                 status = messageListener.consumeMessage(Collections.unmodifiableList(msgs), context);
                             } catch (Throwable e) {
-                                log.warn("consumeMessage exception: {} Group: {} Msgs: {} MQ: {}",
+                                log.warn(String.format("consumeMessage exception: %s Group: %s Msgs: %s MQ: %s",
                                     RemotingHelper.exceptionSimpleDesc(e),
                                     ConsumeMessageOrderlyService.this.consumerGroup,
                                     msgs,
-                                    messageQueue);
+                                    messageQueue), e);
                                 hasException = true;
                             } finally {
                                 this.processQueue.getConsumeLock().unlock();

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -341,7 +341,7 @@ private boolean handleRetryAndDLQ(SendMessageRequestHeader requestHeader, Remoti
                 int queueIdInt = Math.abs(this.random.nextInt() % 99999999) % DLQ_NUMS_PER_GROUP;
                 topicConfig = this.brokerController.getTopicConfigManager().createTopicInSendMessageBackMethod(newTopic,
                     DLQ_NUMS_PER_GROUP,
-                    PermName.PERM_WRITE, 0
+                    PermName.PERM_WRITE | PermName.PERM_READ, 0
                 );
                 msg.setTopic(newTopic);
                 msg.setQueueId(queueIdInt);

File: client/src/main/java/org/apache/rocketmq/client/ClientConfig.java
Patch:
@@ -178,7 +178,7 @@ public ClientConfig cloneClientConfig() {
     }
 
     public String getNamesrvAddr() {
-        if (StringUtils.isNotEmpty(namesrvAddr) && NameServerAddressUtils.validateInstanceEndpoint(namesrvAddr.trim())) {
+        if (StringUtils.isNotEmpty(namesrvAddr) && NameServerAddressUtils.NAMESRV_ENDPOINT_PATTERN.matcher(namesrvAddr.trim()).matches()) {
             return NameServerAddressUtils.getNameSrvAddrFromNamesrvEndpoint(namesrvAddr);
         }
         return namesrvAddr;

File: common/src/main/java/org/apache/rocketmq/common/utils/NameServerAddressUtils.java
Patch:
@@ -20,6 +20,7 @@ public class NameServerAddressUtils {
     public static final String INSTANCE_PREFIX = "MQ_INST_";
     public static final String INSTANCE_REGEX = INSTANCE_PREFIX + "\\w+_\\w+";
     public static final String ENDPOINT_PREFIX = "(\\w+://|)";
+    public static final Pattern NAMESRV_ENDPOINT_PATTERN = Pattern.compile("^http://.*");
     public static final Pattern INST_ENDPOINT_PATTERN = Pattern.compile("^" + ENDPOINT_PREFIX + INSTANCE_REGEX + "\\..*");
 
     public static String getNameServerAddresses() {

File: store/src/main/java/org/apache/rocketmq/store/MappedFile.java
Patch:
@@ -301,7 +301,7 @@ public int commit(final int commitLeastPages) {
         }
         if (this.isAbleToCommit(commitLeastPages)) {
             if (this.hold()) {
-                commit0(commitLeastPages);
+                commit0();
                 this.release();
             } else {
                 log.warn("in commit, hold failed, commit offset = " + this.committedPosition.get());
@@ -317,11 +317,11 @@ public int commit(final int commitLeastPages) {
         return this.committedPosition.get();
     }
 
-    protected void commit0(final int commitLeastPages) {
+    protected void commit0() {
         int writePos = this.wrotePosition.get();
         int lastCommittedPosition = this.committedPosition.get();
 
-        if (writePos - lastCommittedPosition > commitLeastPages) {
+        if (writePos - lastCommittedPosition > 0) {
             try {
                 ByteBuffer byteBuffer = writeBuffer.slice();
                 byteBuffer.position(lastCommittedPosition);

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -553,7 +553,7 @@ public void operationComplete(ChannelFuture f) throws Exception {
                 throw new RemotingTooMuchRequestException("invokeOnewayImpl invoke too fast");
             } else {
                 String info = String.format(
-                    "invokeOnewayImpl tryAcquire semaphore timeout, %dms, waiting thread nums: %d semaphoreAsyncValue: %d",
+                    "invokeOnewayImpl tryAcquire semaphore timeout, %dms, waiting thread nums: %d semaphoreOnewayValue: %d",
                     timeoutMillis,
                     this.semaphoreOneway.getQueueLength(),
                     this.semaphoreOneway.availablePermits()

File: example/src/main/java/org/apache/rocketmq/example/benchmark/Consumer.java
Patch:
@@ -189,8 +189,7 @@ public static Options buildCommandlineOptions(final Options options) {
         opt = new Option("g", "group", true, "Consumer group name, Default: benchmark_consumer");
         opt.setRequired(false);
         options.addOption(opt);
-
-        opt = new Option("p", "group suffix enable", true, "Consumer group suffix enable, Default: false");
+        opt = new Option("p", "group prefix enable", true, "Is group prefix enable, Default: false");
         opt.setRequired(false);
         options.addOption(opt);
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/acl/UpdateAccessConfigSubCommand.java
Patch:
@@ -50,7 +50,7 @@ public Options buildCommandlineOptions(Options options) {
         Option opt = new Option("b", "brokerAddr", true, "update acl config file to which broker");
         optionGroup.addOption(opt);
 
-        opt = new Option("c", "clusterName", true, "update cl config file to which cluster");
+        opt = new Option("c", "clusterName", true, "update acl config file to which cluster");
         optionGroup.addOption(opt);
 
         optionGroup.setRequired(true);

File: example/src/main/java/org/apache/rocketmq/example/benchmark/Consumer.java
Patch:
@@ -189,8 +189,7 @@ public static Options buildCommandlineOptions(final Options options) {
         opt = new Option("g", "group", true, "Consumer group name, Default: benchmark_consumer");
         opt.setRequired(false);
         options.addOption(opt);
-
-        opt = new Option("p", "group suffix enable", true, "Consumer group suffix enable, Default: false");
+        opt = new Option("p", "group prefix enable", true, "Is group prefix enable, Default: false");
         opt.setRequired(false);
         options.addOption(opt);
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/acl/UpdateAccessConfigSubCommand.java
Patch:
@@ -50,7 +50,7 @@ public Options buildCommandlineOptions(Options options) {
         Option opt = new Option("b", "brokerAddr", true, "update acl config file to which broker");
         optionGroup.addOption(opt);
 
-        opt = new Option("c", "clusterName", true, "update cl config file to which cluster");
+        opt = new Option("c", "clusterName", true, "update acl config file to which cluster");
         optionGroup.addOption(opt);
 
         optionGroup.setRequired(true);

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -633,7 +633,6 @@ private SendResult sendDefaultImpl(
                             case ResponseCode.TOPIC_NOT_EXIST:
                             case ResponseCode.SERVICE_NOT_AVAILABLE:
                             case ResponseCode.SYSTEM_ERROR:
-                            case ResponseCode.SYSTEM_BUSY:
                             case ResponseCode.NO_PERMISSION:
                             case ResponseCode.NO_BUYER_ID:
                             case ResponseCode.NOT_IN_CURRENT_UNIT:

File: client/src/main/java/org/apache/rocketmq/client/ClientConfig.java
Patch:
@@ -178,7 +178,7 @@ public ClientConfig cloneClientConfig() {
     }
 
     public String getNamesrvAddr() {
-        if (StringUtils.isNotEmpty(namesrvAddr) && NameServerAddressUtils.validateInstanceEndpoint(namesrvAddr.trim())) {
+        if (StringUtils.isNotEmpty(namesrvAddr) && NameServerAddressUtils.NAMESRV_ENDPOINT_PATTERN.matcher(namesrvAddr.trim()).matches()) {
             return NameServerAddressUtils.getNameSrvAddrFromNamesrvEndpoint(namesrvAddr);
         }
         return namesrvAddr;

File: common/src/main/java/org/apache/rocketmq/common/utils/NameServerAddressUtils.java
Patch:
@@ -20,6 +20,7 @@ public class NameServerAddressUtils {
     public static final String INSTANCE_PREFIX = "MQ_INST_";
     public static final String INSTANCE_REGEX = INSTANCE_PREFIX + "\\w+_\\w+";
     public static final String ENDPOINT_PREFIX = "(\\w+://|)";
+    public static final Pattern NAMESRV_ENDPOINT_PATTERN = Pattern.compile("^http://.*");
     public static final Pattern INST_ENDPOINT_PATTERN = Pattern.compile("^" + ENDPOINT_PREFIX + INSTANCE_REGEX + "\\..*");
 
     public static String getNameServerAddresses() {

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -633,6 +633,7 @@ private SendResult sendDefaultImpl(
                             case ResponseCode.TOPIC_NOT_EXIST:
                             case ResponseCode.SERVICE_NOT_AVAILABLE:
                             case ResponseCode.SYSTEM_ERROR:
+                            case ResponseCode.SYSTEM_BUSY:
                             case ResponseCode.NO_PERMISSION:
                             case ResponseCode.NO_BUYER_ID:
                             case ResponseCode.NOT_IN_CURRENT_UNIT:

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -863,7 +863,7 @@ public void shutdown() {
         }
     }
 
-    public boolean registerConsumer(final String group, final MQConsumerInner consumer) {
+    public synchronized boolean registerConsumer(final String group, final MQConsumerInner consumer) {
         if (null == group || null == consumer) {
             return false;
         }
@@ -877,9 +877,9 @@ public boolean registerConsumer(final String group, final MQConsumerInner consum
         return true;
     }
 
-    public void unregisterConsumer(final String group) {
+    public synchronized void unregisterConsumer(final String group) {
         this.consumerTable.remove(group);
-        this.unregisterClientWithLock(null, group);
+        this.unregisterClient(null, group);
     }
 
     private void unregisterClientWithLock(final String producerGroup, final String consumerGroup) {

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExt.java
Patch:
@@ -208,7 +208,7 @@ public SubscriptionGroupConfig examineSubscriptionGroupConfig(String addr, Strin
     }
 
     @Override
-    public TopicConfig examineTopicConfig(String addr, String topic) {
+    public TopicConfig examineTopicConfig(String addr, String topic) throws RemotingException, InterruptedException, MQBrokerException {
         return defaultMQAdminExtImpl.examineTopicConfig(addr, topic);
     }
 

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -222,8 +222,9 @@ public SubscriptionGroupConfig examineSubscriptionGroupConfig(String addr, Strin
     }
 
     @Override
-    public TopicConfig examineTopicConfig(String addr, String topic) {
-        return null;
+    public TopicConfig examineTopicConfig(String addr, String topic) throws RemotingException, InterruptedException, MQBrokerException {
+        TopicConfigSerializeWrapper topicConfigSerializeWrapper = this.mqClientInstance.getMQClientAPIImpl().getAllTopicConfig(addr,timeoutMillis);
+        return topicConfigSerializeWrapper.getTopicConfigTable().get(topic);
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java
Patch:
@@ -92,7 +92,7 @@ void createAndUpdateSubscriptionGroupConfig(final String addr,
 
     SubscriptionGroupConfig examineSubscriptionGroupConfig(final String addr, final String group);
 
-    TopicConfig examineTopicConfig(final String addr, final String topic);
+    TopicConfig examineTopicConfig(final String addr, final String topic) throws RemotingException, InterruptedException, MQBrokerException;
 
     TopicStatsTable examineTopicStats(
         final String topic) throws RemotingException, MQClientException, InterruptedException,

File: client/src/main/java/org/apache/rocketmq/client/trace/AsyncTraceDispatcher.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.client.AccessChannel;
@@ -54,6 +55,7 @@
 public class AsyncTraceDispatcher implements TraceDispatcher {
 
     private final static InternalLogger log = ClientLogger.getLog();
+    private final static AtomicInteger COUNTER = new AtomicInteger();
     private final int queueSize;
     private final int batchSize;
     private final int maxMsgSize;
@@ -165,7 +167,7 @@ private DefaultMQProducer getAndCreateTraceProducer(RPCHook rpcHook) {
     }
 
     private String genGroupNameForTrace() {
-        return TraceConstants.GROUP_NAME_PREFIX + "-" + this.group + "-" + this.type ;
+        return TraceConstants.GROUP_NAME_PREFIX + "-" + this.group + "-" + this.type + "-" + COUNTER.incrementAndGet();
     }
 
     @Override

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceDataEncoder.java
Patch:
@@ -188,9 +188,7 @@ public static TraceTransferBean encoderFromContextBean(TraceContext ctx) {
                         .append(ctx.getCostTime()).append(TraceConstants.CONTENT_SPLITOR)//
                         .append(ctx.isSuccess()).append(TraceConstants.CONTENT_SPLITOR)//
                         .append(bean.getKeys()).append(TraceConstants.CONTENT_SPLITOR)//
-                        .append(ctx.getContextCode()).append(TraceConstants.CONTENT_SPLITOR)
-                        .append(ctx.getTimeStamp()).append(TraceConstants.CONTENT_SPLITOR)
-                        .append(ctx.getGroupName()).append(TraceConstants.FIELD_SPLITOR);
+                        .append(ctx.getContextCode()).append(TraceConstants.FIELD_SPLITOR);
 
                 }
             }

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -68,6 +68,7 @@
 import org.apache.rocketmq.tools.command.namesrv.WipeWritePermSubCommand;
 import org.apache.rocketmq.tools.command.offset.CloneGroupOffsetCommand;
 import org.apache.rocketmq.tools.command.offset.ResetOffsetByTimeCommand;
+import org.apache.rocketmq.tools.command.offset.SkipAccumulationSubCommand;
 import org.apache.rocketmq.tools.command.queue.QueryConsumeQueueCommand;
 import org.apache.rocketmq.tools.command.stats.StatsAllSubCommand;
 import org.apache.rocketmq.tools.command.topic.AllocateMQSubCommand;
@@ -186,6 +187,7 @@ public static void initCommand() {
 
         initCommand(new WipeWritePermSubCommand());
         initCommand(new ResetOffsetByTimeCommand());
+        initCommand(new SkipAccumulationSubCommand());
 
         initCommand(new UpdateOrderConfCommand());
         initCommand(new CleanExpiredCQSubCommand());

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExt.java
Patch:
@@ -203,7 +203,8 @@ public void createAndUpdateSubscriptionGroupConfig(String addr,
     }
 
     @Override
-    public SubscriptionGroupConfig examineSubscriptionGroupConfig(String addr, String group) {
+    public SubscriptionGroupConfig examineSubscriptionGroupConfig(String addr, String group)
+        throws InterruptedException, RemotingException, MQClientException, MQBrokerException {
         return defaultMQAdminExtImpl.examineSubscriptionGroupConfig(addr, group);
     }
 

File: tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java
Patch:
@@ -90,7 +90,7 @@ void createAndUpdateSubscriptionGroupConfig(final String addr,
         final SubscriptionGroupConfig config) throws RemotingException,
         MQBrokerException, InterruptedException, MQClientException;
 
-    SubscriptionGroupConfig examineSubscriptionGroupConfig(final String addr, final String group);
+    SubscriptionGroupConfig examineSubscriptionGroupConfig(final String addr, final String group) throws InterruptedException, RemotingException, MQClientException, MQBrokerException;
 
     TopicConfig examineTopicConfig(final String addr, final String topic);
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -49,6 +49,7 @@
 import org.apache.rocketmq.tools.command.consumer.ConsumerProgressSubCommand;
 import org.apache.rocketmq.tools.command.consumer.ConsumerStatusSubCommand;
 import org.apache.rocketmq.tools.command.consumer.DeleteSubscriptionGroupCommand;
+import org.apache.rocketmq.tools.command.consumer.GetConsumerConfigSubCommand;
 import org.apache.rocketmq.tools.command.consumer.StartMonitoringSubCommand;
 import org.apache.rocketmq.tools.command.consumer.UpdateSubGroupSubCommand;
 import org.apache.rocketmq.tools.command.message.CheckMsgSendRTCommand;
@@ -202,6 +203,7 @@ public static void initCommand() {
         initCommand(new GetNamesrvConfigCommand());
         initCommand(new UpdateNamesrvConfigCommand());
         initCommand(new GetBrokerConfigCommand());
+        initCommand(new GetConsumerConfigSubCommand());
 
         initCommand(new QueryConsumeQueueCommand());
         initCommand(new SendMessageCommand());

File: client/src/main/java/org/apache/rocketmq/client/trace/hook/SendMessageTraceHookImpl.java
Patch:
@@ -60,7 +60,6 @@ public void sendMessageBefore(SendMessageContext context) {
         traceBean.setStoreHost(context.getBrokerAddr());
         traceBean.setBodyLength(context.getMessage().getBody().length);
         traceBean.setMsgType(context.getMsgType());
-        traceBean.setClientHost(((AsyncTraceDispatcher)localDispatcher).getHostProducer().getmQClientFactory().getClientId());
         tuxeContext.getTraceBeans().add(traceBean);
     }
 

File: client/src/test/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumerTest.java
Patch:
@@ -214,7 +214,7 @@ public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs, ConsumeOrderly
         MessageExt msg = messageAtomic.get();
         assertThat(msg).isNotNull();
         assertThat(msg.getTopic()).isEqualTo(topic);
-        assertThat(msg.getBody()).isEqualTo(new byte[]{'a'});
+        assertThat(msg.getBody()).isEqualTo(new byte[] {'a'});
     }
 
     @Test
@@ -327,7 +327,6 @@ private PullResultExt createPullResult(PullMessageRequestHeader requestHeader, P
 
     @Test
     public void testPullMessage_ExceptionOccursWhenComputePullFromWhere() throws MQClientException {
-        doThrow(MQClientException.class).when(rebalancePushImpl).computePullFromWhereWithException(any(MessageQueue.class));
         final CountDownLatch countDownLatch = new CountDownLatch(1);
         final MessageExt[] messageExts = new MessageExt[1];
         pushConsumer.getDefaultMQPushConsumerImpl().setConsumeMessageService(

File: client/src/test/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumerTest.java
Patch:
@@ -108,7 +108,7 @@ public PullResult answer(InvocationOnMock mock) throws Throwable {
                     messageClientExt.setTopic(topic);
                     messageClientExt.setQueueId(0);
                     messageClientExt.setMsgId("123");
-                    messageClientExt.setBody(new byte[]{'a'});
+                    messageClientExt.setBody(new byte[] {'a'});
                     messageClientExt.setOffsetMsgId("234");
                     messageClientExt.setBornHost(new InetSocketAddress(8080));
                     messageClientExt.setStoreHost(new InetSocketAddress(8080));
@@ -187,7 +187,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
         MessageExt msg = messageAtomic.get();
         assertThat(msg).isNotNull();
         assertThat(msg.getTopic()).isEqualTo(topic);
-        assertThat(msg.getBody()).isEqualTo(new byte[]{'a'});
+        assertThat(msg.getBody()).isEqualTo(new byte[] {'a'});
     }
 
     @Test

File: client/src/test/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyServiceTest.java
Patch:
@@ -129,7 +129,7 @@ public PullResult answer(InvocationOnMock mock) throws Throwable {
                         messageClientExt.setTopic(topic);
                         messageClientExt.setQueueId(0);
                         messageClientExt.setMsgId("123");
-                        messageClientExt.setBody(new byte[]{'a'});
+                        messageClientExt.setBody(new byte[] {'a'});
                         messageClientExt.setOffsetMsgId("234");
                         messageClientExt.setBornHost(new InetSocketAddress(8080));
                         messageClientExt.setStoreHost(new InetSocketAddress(8080));
@@ -182,7 +182,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
         MessageExt msg = messageAtomic.get();
         assertThat(msg).isNotNull();
         assertThat(msg.getTopic()).isEqualTo(topic);
-        assertThat(msg.getBody()).isEqualTo(new byte[]{'a'});
+        assertThat(msg.getBody()).isEqualTo(new byte[] {'a'});
     }
 
     @After

File: client/src/test/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyServiceTest.java
Patch:
@@ -129,7 +129,7 @@ public PullResult answer(InvocationOnMock mock) throws Throwable {
                         messageClientExt.setTopic(topic);
                         messageClientExt.setQueueId(0);
                         messageClientExt.setMsgId("123");
-                        messageClientExt.setBody(new byte[] {'a'});
+                        messageClientExt.setBody(new byte[]{'a'});
                         messageClientExt.setOffsetMsgId("234");
                         messageClientExt.setBornHost(new InetSocketAddress(8080));
                         messageClientExt.setStoreHost(new InetSocketAddress(8080));

File: client/src/test/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumerTest.java
Patch:
@@ -146,7 +146,6 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
         doReturn(new FindBrokerResult("127.0.0.1:10911", false)).when(mQClientFactory).findBrokerAddressInSubscribe(anyString(), anyLong(), anyBoolean());
 
         rebalanceImpl = spy(pushConsumerImpl.getRebalanceImpl());
-        // doReturn(123L).when(rebalancePushImpl).computePullFromWhere(any(MessageQueue.class));
         doReturn(123L).when(rebalanceImpl).computePullFromWhereWithException(any(MessageQueue.class));
         FieldUtils.writeDeclaredField(pushConsumerImpl, "rebalanceImpl", rebalanceImpl, true);
 
@@ -292,7 +291,7 @@ private DefaultMQPushConsumer createPushConsumer() {
         pushConsumer.registerMessageListener(new MessageListenerConcurrently() {
             @Override
             public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
-                                                            ConsumeConcurrentlyContext context) {
+                ConsumeConcurrentlyContext context) {
                 return null;
             }
         });
@@ -318,7 +317,7 @@ private PullRequest createPullRequest() {
     }
 
     private PullResultExt createPullResult(PullMessageRequestHeader requestHeader, PullStatus pullStatus,
-                                           List<MessageExt> messageExtList) throws Exception {
+        List<MessageExt> messageExtList) throws Exception {
         ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
         for (MessageExt messageExt : messageExtList) {
             outputStream.write(MessageDecoder.encode(messageExt, false));

File: client/src/test/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyServiceTest.java
Patch:
@@ -182,7 +182,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
         MessageExt msg = messageAtomic.get();
         assertThat(msg).isNotNull();
         assertThat(msg.getTopic()).isEqualTo(topic);
-        assertThat(msg.getBody()).isEqualTo(new byte[] {'a'});
+        assertThat(msg.getBody()).isEqualTo(new byte[]{'a'});
     }
 
     @After

File: client/src/test/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumerTest.java
Patch:
@@ -128,7 +128,7 @@ public PullResult answer(InvocationOnMock mock) throws Throwable {
         pushConsumer.registerMessageListener(new MessageListenerConcurrently() {
             @Override
             public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
-                                                            ConsumeConcurrentlyContext context) {
+                ConsumeConcurrentlyContext context) {
                 return null;
             }
         });
@@ -176,7 +176,7 @@ public void testPullMessage_Success() throws InterruptedException, RemotingExcep
         pushConsumer.getDefaultMQPushConsumerImpl().setConsumeMessageService(new ConsumeMessageConcurrentlyService(pushConsumer.getDefaultMQPushConsumerImpl(), new MessageListenerConcurrently() {
             @Override
             public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
-                                                            ConsumeConcurrentlyContext context) {
+                ConsumeConcurrentlyContext context) {
                 messageAtomic.set(msgs.get(0));
                 countDownLatch.countDown();
                 return null;
@@ -268,7 +268,7 @@ public void testGracefulShutdown() throws InterruptedException, RemotingExceptio
         pushConsumer.getDefaultMQPushConsumerImpl().setConsumeMessageService(new ConsumeMessageConcurrentlyService(pushConsumer.getDefaultMQPushConsumerImpl(), new MessageListenerConcurrently() {
             @Override
             public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
-                                                            ConsumeConcurrentlyContext context) {
+                ConsumeConcurrentlyContext context) {
                 countDownLatch.countDown();
                 try {
                     Thread.sleep(1000);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -275,7 +275,7 @@ public void pullMessage(final PullRequest pullRequest) {
                         offset = this.rebalanceImpl.computePullFromWhereWithException(pullRequest.getMessageQueue());
                     } catch (MQClientException e) {
                         this.executePullRequestLater(pullRequest, pullTimeDelayMillsWhenException);
-                        log.error("Failed to compute pull offset", e);
+                        log.error("Failed to compute pull offset, pullResult: {}", pullRequest, e);
                         return;
                     }
                     boolean brokerBusy = offset < pullRequest.getNextOffset();

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceImpl.java
Patch:
@@ -375,7 +375,7 @@ private boolean updateProcessQueueTableInRebalance(final String topic, final Set
                 this.removeDirtyOffset(mq);
                 ProcessQueue pq = new ProcessQueue();
 
-                long nextOffset = 0L;
+                long nextOffset = -1L;
                 try {
                     nextOffset = this.computePullFromWhereWithException(mq);
                 } catch (MQClientException e) {

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExt.java
Patch:
@@ -134,7 +134,7 @@ public QueryResult queryMessage(String topic, String key, int maxNum, long begin
         return defaultMQAdminExtImpl.queryMessage(topic, key, maxNum, begin, end);
     }
 
-    public QueryResult queryMessageByUniqueKey(String topic, String key, int maxNum, long begin, long end)
+    public QueryResult queryMessageByUniqKey(String topic, String key, int maxNum, long begin, long end)
         throws MQClientException, InterruptedException {
 
         return defaultMQAdminExtImpl.queryMessageByUniqKey(topic, key, maxNum, begin, end);

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -998,8 +998,8 @@ public QueryResult queryMessage(String topic, String key, int maxNum, long begin
     }
 
     public QueryResult queryMessageByUniqKey(String topic, String key, int maxNum, long begin,
-                                    long end) throws MQClientException,
-            InterruptedException {
+        long end) throws MQClientException, InterruptedException {
+
         return this.mqClientInstance.getMQAdminImpl().queryMessageByUniqKey(topic, key, maxNum, begin, end);
     }
 

File: store/src/main/java/org/apache/rocketmq/store/schedule/ScheduleMessageService.java
Patch:
@@ -112,6 +112,7 @@ public long computeDeliverTimestamp(final int delayLevel, final long storeTimest
 
     public void start() {
         if (started.compareAndSet(false, true)) {
+            super.load();
             this.timer = new Timer("ScheduleMessageTimerThread", true);
             for (Map.Entry<Integer, Long> entry : this.delayLevelTable.entrySet()) {
                 Integer level = entry.getKey();

File: client/src/main/java/org/apache/rocketmq/client/common/ThreadLocalIndex.java
Patch:
@@ -30,9 +30,8 @@ public int incrementAndGet() {
             this.threadLocalIndex.set(index);
         }
 
-        index = Math.abs(index + 1);
-        this.threadLocalIndex.set(index);
-        return index;
+        this.threadLocalIndex.set(++index);
+        return Math.abs(index);
     }
 
     @Override

File: client/src/main/java/org/apache/rocketmq/client/trace/hook/SendMessageTraceHookImpl.java
Patch:
@@ -60,7 +60,6 @@ public void sendMessageBefore(SendMessageContext context) {
         traceBean.setStoreHost(context.getBrokerAddr());
         traceBean.setBodyLength(context.getMessage().getBody().length);
         traceBean.setMsgType(context.getMsgType());
-        traceBean.setClientHost(((AsyncTraceDispatcher)localDispatcher).getHostProducer().getmQClientFactory().getClientId());
         tuxeContext.getTraceBeans().add(traceBean);
     }
 

File: example/src/main/java/org/apache/rocketmq/example/benchmark/Consumer.java
Patch:
@@ -54,7 +54,7 @@ public static void main(String[] args) throws MQClientException, IOException {
         final String topic = commandLine.hasOption('t') ? commandLine.getOptionValue('t').trim() : "BenchmarkTest";
         final int threadCount = commandLine.hasOption('w') ? Integer.parseInt(commandLine.getOptionValue('w')) : 20;
         final String groupPrefix = commandLine.hasOption('g') ? commandLine.getOptionValue('g').trim() : "benchmark_consumer";
-        final String isSuffixEnable = commandLine.hasOption('p') ? commandLine.getOptionValue('p').trim() : "true";
+        final String isSuffixEnable = commandLine.hasOption('p') ? commandLine.getOptionValue('p').trim() : "false";
         final String filterType = commandLine.hasOption('f') ? commandLine.getOptionValue('f').trim() : null;
         final String expression = commandLine.hasOption('e') ? commandLine.getOptionValue('e').trim() : null;
         final double failRate = commandLine.hasOption('r') ? Double.parseDouble(commandLine.getOptionValue('r').trim()) : 0.0;
@@ -190,7 +190,7 @@ public static Options buildCommandlineOptions(final Options options) {
         opt.setRequired(false);
         options.addOption(opt);
 
-        opt = new Option("p", "group prefix enable", true, "Consumer group name, Default: false");
+        opt = new Option("p", "group suffix enable", true, "Consumer group suffix enable, Default: false");
         opt.setRequired(false);
         options.addOption(opt);
 

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceDataEncoder.java
Patch:
@@ -198,6 +198,7 @@ public static TraceTransferBean encoderFromContextBean(TraceContext ctx) {
 
                 }
             }
+            break;
             case EndTransaction: {
                 TraceBean bean = ctx.getTraceBeans().get(0);
                 sb.append(ctx.getTraceType()).append(TraceConstants.CONTENT_SPLITOR)//

File: test/src/main/java/org/apache/rocketmq/test/util/data/collect/impl/ListDataCollectorImpl.java
Patch:
@@ -43,7 +43,7 @@ public Collection<Object> getAllData() {
         return datas;
     }
 
-    public void resetData() {
+    public synchronized void resetData() {
         datas.clear();
         unlockIncrement();
     }
@@ -67,7 +67,7 @@ public boolean isRepeatedData(Object data) {
         return Collections.frequency(datas, data) == 1;
     }
 
-    public Collection<Object> getAllDataWithoutDuplicate() {
+    public synchronized Collection<Object> getAllDataWithoutDuplicate() {
         return new HashSet<Object>(datas);
     }
 
@@ -81,7 +81,7 @@ public int getRepeatedTimeForData(Object data) {
         return res;
     }
 
-    public void removeData(Object data) {
+    public synchronized void removeData(Object data) {
         datas.remove(data);
     }
 

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQConsumerWithOpenTracingTest.java
Patch:
@@ -75,6 +75,7 @@
 import org.mockito.stubbing.Answer;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.awaitility.Awaitility.waitAtMost;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyBoolean;
 import static org.mockito.ArgumentMatchers.anyLong;
@@ -209,7 +210,8 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
         assertThat(msg.getTopic()).isEqualTo(topic);
         assertThat(msg.getBody()).isEqualTo(new byte[]{'a'});
 
-        assertThat(tracer.finishedSpans().size()).isEqualTo(1);
+        // wait until consumeMessageAfter hook of tracer is done surely.
+        waitAtMost(1, TimeUnit.SECONDS).until(() -> tracer.finishedSpans().size() == 1);
         MockSpan span = tracer.finishedSpans().get(0);
         assertThat(span.tags().get(Tags.MESSAGE_BUS_DESTINATION.getKey())).isEqualTo(topic);
         assertThat(span.tags().get(Tags.SPAN_KIND.getKey())).isEqualTo(Tags.SPAN_KIND_CONSUMER);

File: test/src/main/java/org/apache/rocketmq/test/util/data/collect/impl/ListDataCollectorImpl.java
Patch:
@@ -43,7 +43,7 @@ public Collection<Object> getAllData() {
         return datas;
     }
 
-    public void resetData() {
+    public synchronized void resetData() {
         datas.clear();
         unlockIncrement();
     }
@@ -67,7 +67,7 @@ public boolean isRepeatedData(Object data) {
         return Collections.frequency(datas, data) == 1;
     }
 
-    public Collection<Object> getAllDataWithoutDuplicate() {
+    public synchronized Collection<Object> getAllDataWithoutDuplicate() {
         return new HashSet<Object>(datas);
     }
 
@@ -81,7 +81,7 @@ public int getRepeatedTimeForData(Object data) {
         return res;
     }
 
-    public void removeData(Object data) {
+    public synchronized void removeData(Object data) {
         datas.remove(data);
     }
 

File: acl/src/main/java/org/apache/rocketmq/acl/plain/RemoteAddressStrategyFactory.java
Patch:
@@ -193,7 +193,7 @@ private boolean analysis(String[] strArray, int index) {
                     throw new AclException(String.format("RangeRemoteAddressStrategy netaddress examine scope Exception start is %s , end is %s", start, end));
                 }
             }
-            return this.end > 0 ? true : false;
+            return this.end > 0;
         }
 
         private boolean ipv6Analysis(String[] strArray, int index) {

File: broker/src/main/java/org/apache/rocketmq/broker/mqtrace/SendMessageHook.java
Patch:
@@ -17,9 +17,9 @@
 package org.apache.rocketmq.broker.mqtrace;
 
 public interface SendMessageHook {
-    public String hookName();
+    String hookName();
 
-    public void sendMessageBefore(final SendMessageContext context);
+    void sendMessageBefore(final SendMessageContext context);
 
-    public void sendMessageAfter(final SendMessageContext context);
+    void sendMessageAfter(final SendMessageContext context);
 }

File: broker/src/test/java/org/apache/rocketmq/broker/BrokerOuterAPITest.java
Patch:
@@ -124,7 +124,7 @@ public RemotingCommand answer(InvocationOnMock invocation) throws Throwable {
         boolean success = Iterables.any(booleanList,
             new Predicate<Boolean>() {
                 public boolean apply(Boolean input) {
-                    return input ? true : false;
+                    return input;
                 }
             });
 

File: common/src/main/java/org/apache/rocketmq/common/hook/FilterCheckHook.java
Patch:
@@ -20,7 +20,7 @@
 import java.nio.ByteBuffer;
 
 public interface FilterCheckHook {
-    public String hookName();
+    String hookName();
 
-    public boolean isFilterMatched(final boolean isUnitMode, final ByteBuffer byteBuffer);
+    boolean isFilterMatched(final boolean isUnitMode, final ByteBuffer byteBuffer);
 }

File: logging/src/main/java/org/apache/rocketmq/logging/inner/Level.java
Patch:
@@ -116,7 +116,6 @@ public static Level toLevel(String sArg, Level defaultLevel) {
         if (s.equals(OFF_NAME)) {
             return Level.OFF;
         }
-
         if (s.equals(INFO_NAME)) {
             return Level.INFO;
         }

File: test/src/main/java/org/apache/rocketmq/test/util/FileUtil.java
Patch:
@@ -33,7 +33,7 @@ public FileUtil(String filePath, String fileName) {
         this.fileName = fileName;
     }
 
-    public static void main(String args[]) {
+    public static void main(String[] args) {
         String filePath = FileUtil.class.getResource("/").getPath();
         String fileName = "test.txt";
         FileUtil fileUtil = new FileUtil(filePath, fileName);

File: test/src/main/java/org/apache/rocketmq/test/util/MQWait.java
Patch:
@@ -76,7 +76,7 @@ public static void setCondition(Condition condition, int waitTimeMills, int inte
         }
     }
 
-    public static void main(String args[]) {
+    public static void main(String[] args) {
 
         long start = System.currentTimeMillis();
         MQWait.setCondition(new Condition() {

File: test/src/main/java/org/apache/rocketmq/test/util/VerifyUtils.java
Patch:
@@ -140,7 +140,7 @@ public static boolean verifyRT(Collection<Object> rts, long maxRTMills) {
         return rtExpect;
     }
 
-    public static void main(String args[]) {
+    public static void main(String[] args) {
         verifyBalance(400, 0.1f, 230, 190);
     }
 }

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/MulTagSubIT.java
Patch:
@@ -92,7 +92,7 @@ public void testSubTwoTabAndMatchOne() {
 
     @Test
     public void testSubTwoTabAndMatchTwo() {
-        String tags[] = {"jueyin1", "jueyin2"};
+        String[] tags = {"jueyin1", "jueyin2"};
         String subExpress = String.format("%s||%s", tags[0], tags[1]);
         int msgSize = 10;
 
@@ -113,7 +113,7 @@ public void testSubTwoTabAndMatchTwo() {
 
     @Test
     public void testSubThreeTabAndMatchTwo() {
-        String tags[] = {"jueyin1", "jueyin2", "jueyin3"};
+        String[] tags = {"jueyin1", "jueyin2", "jueyin3"};
         String subExpress = String.format("%s||%s", tags[0], tags[1]);
         int msgSize = 10;
 
@@ -135,7 +135,7 @@ public void testSubThreeTabAndMatchTwo() {
 
     @Test
     public void testNoMatch() {
-        String tags[] = {"jueyin1", "jueyin2", "jueyin3"};
+        String[] tags = {"jueyin1", "jueyin2", "jueyin3"};
         String subExpress = "no_match";
         int msgSize = 10;
 

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/TagMessageWithMulConsumerIT.java
Patch:
@@ -84,7 +84,7 @@ public void testSendTwoTag() {
 
     @Test
     public void testSendMessagesWithTwoTag() {
-        String tags[] = {"jueyin1", "jueyin2"};
+        String[] tags = {"jueyin1", "jueyin2"};
         int msgSize = 10;
 
         TagMessage tagMessage = new TagMessage(tags, topic, msgSize);
@@ -113,7 +113,7 @@ public void testSendMessagesWithTwoTag() {
 
     @Test
     public void testTwoConsumerOneMatchOneOtherMatchAll() {
-        String tags[] = {"jueyin1", "jueyin2"};
+        String[] tags = {"jueyin1", "jueyin2"};
         String sub1 = String.format("%s||%s", tags[0], tags[1]);
         String sub2 = String.format("%s|| noExist", tags[0]);
         int msgSize = 10;
@@ -144,7 +144,7 @@ public void testTwoConsumerOneMatchOneOtherMatchAll() {
 
     @Test
     public void testSubKindsOf() {
-        String tags[] = {"jueyin1", "jueyin2"};
+        String[] tags = {"jueyin1", "jueyin2"};
         String sub1 = String.format("%s||%s", tags[0], tags[1]);
         String sub2 = String.format("%s|| noExist", tags[0]);
         String sub3 = tags[0];

File: tools/src/main/java/org/apache/rocketmq/tools/command/cluster/CLusterSendMsgRTCommand.java
Patch:
@@ -38,7 +38,7 @@
 
 public class CLusterSendMsgRTCommand implements SubCommand {
 
-    public static void main(String args[]) {
+    public static void main(String[] args) {
     }
 
     @Override

File: example/src/main/java/org/apache/rocketmq/example/simple/PopPushConsumer.java
Patch:
@@ -32,7 +32,7 @@ public class PopPushConsumer {
     public static final String CONSUMER_GROUP = "CID_JODIE_1";
     public static final String TOPIC = "TopicTest";
 
-    // Or it can use cli directly: mqadmin setConsumeMode -c cluster -t topic -g group -m POP -n 8
+    // Or use AdminTools directly: mqadmin setConsumeMode -c cluster -t topic -g group -m POP -n 8
     private static void switchPop() throws Exception {
         DefaultMQAdminExt mqAdminExt = new DefaultMQAdminExt();
         mqAdminExt.start();

File: common/src/main/java/org/apache/rocketmq/common/constant/PermName.java
Patch:
@@ -20,10 +20,10 @@ public class PermName {
     public static final int PERM_PRIORITY = 0x1 << 3;
     public static final int PERM_READ = 0x1 << 2;
     public static final int PERM_WRITE = 0x1 << 1;
-    public static final int PERM_INHERIT = 0x1 << 0;
+    public static final int PERM_INHERIT = 0x1;
 
     public static String perm2String(final int perm) {
-        final StringBuffer sb = new StringBuffer("---");
+        final StringBuilder sb = new StringBuilder("---");
         if (isReadable(perm)) {
             sb.replace(0, 1, "R");
         }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -218,6 +218,8 @@ private CompletableFuture<RemotingCommand> asyncConsumerSendMsgBack(ChannelHandl
 
         String originMsgId = MessageAccessor.getOriginMessageId(msgExt);
         MessageAccessor.setOriginMessageId(msgInner, UtilAll.isBlank(originMsgId) ? msgExt.getMsgId() : originMsgId);
+        msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgExt.getProperties()));
+
         CompletableFuture<PutMessageResult> putMessageResult = this.brokerController.getMessageStore().asyncPutMessage(msgInner);
         return putMessageResult.thenApply((r) -> {
             if (r != null) {

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java
Patch:
@@ -176,9 +176,7 @@ public TopicConfig createTopicInSendMessageMethod(final String topic, final Stri
                         if (PermName.isInherited(defaultTopicConfig.getPerm())) {
                             topicConfig = new TopicConfig(topic);
 
-                            int queueNums =
-                                clientDefaultTopicQueueNums > defaultTopicConfig.getWriteQueueNums() ? defaultTopicConfig
-                                    .getWriteQueueNums() : clientDefaultTopicQueueNums;
+                            int queueNums = Math.min(clientDefaultTopicQueueNums, defaultTopicConfig.getWriteQueueNums());
 
                             if (queueNums < 0) {
                                 queueNums = 0;

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageServiceImpl.java
Patch:
@@ -164,7 +164,7 @@ public void check(long transactionTimeout, int transactionCheckMax,
                         break;
                     }
                     if (removeMap.containsKey(i)) {
-                        log.info("Half offset {} has been committed/rolled back", i);
+                        log.debug("Half offset {} has been committed/rolled back", i);
                         Long removedOpOffset = removeMap.remove(i);
                         doneOpOffset.add(removedOpOffset);
                     } else {

File: client/src/main/java/org/apache/rocketmq/client/ClientConfig.java
Patch:
@@ -94,7 +94,7 @@ public void setInstanceName(String instanceName) {
 
     public void changeInstanceNameToPID() {
         if (this.instanceName.equals("DEFAULT")) {
-            this.instanceName = String.valueOf(UtilAll.getPid());
+            this.instanceName = UtilAll.getPid() + "#" + System.nanoTime();
         }
     }
 
@@ -178,8 +178,8 @@ public ClientConfig cloneClientConfig() {
     }
 
     public String getNamesrvAddr() {
-        if (StringUtils.isNotEmpty(namesrvAddr) && NameServerAddressUtils.NAMESRV_ENDPOINT_PATTERN.matcher(namesrvAddr.trim()).matches()) {
-            return namesrvAddr.substring(NameServerAddressUtils.ENDPOINT_PREFIX.length());
+        if (StringUtils.isNotEmpty(namesrvAddr) && NameServerAddressUtils.validateInstanceEndpoint(namesrvAddr.trim())) {
+            return NameServerAddressUtils.getNameSrvAddrFromNamesrvEndpoint(namesrvAddr);
         }
         return namesrvAddr;
     }

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -1721,10 +1721,11 @@ public void deleteTopicInNameServer(final String addr, final String topic, final
         throw new MQClientException(response.getCode(), response.getRemark());
     }
 
-    public void deleteSubscriptionGroup(final String addr, final String groupName, final long timeoutMillis)
+    public void deleteSubscriptionGroup(final String addr, final String groupName, final boolean removeOffset, final long timeoutMillis)
         throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
         DeleteSubscriptionGroupRequestHeader requestHeader = new DeleteSubscriptionGroupRequestHeader();
         requestHeader.setGroupName(groupName);
+        requestHeader.setRemoveOffset(removeOffset);
         RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.DELETE_SUBSCRIPTIONGROUP, requestHeader);
 
         RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),

File: client/src/main/java/org/apache/rocketmq/client/trace/AsyncTraceDispatcher.java
Patch:
@@ -370,7 +370,7 @@ public void onSuccess(SendResult sendResult) {
 
                     @Override
                     public void onException(Throwable e) {
-                        log.info("send trace data ,the traceData is " + data);
+                        log.error("send trace data failed, the traceData is {}", data, e);
                     }
                 };
                 if (traceBrokerSet.isEmpty()) {
@@ -398,7 +398,7 @@ public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {
                 }
 
             } catch (Exception e) {
-                log.info("send trace data,the traceData is" + data);
+                log.error("send trace data failed, the traceData is {}", data, e);
             }
         }
 

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceType.java
Patch:
@@ -20,4 +20,5 @@ public enum TraceType {
     Pub,
     SubBefore,
     SubAfter,
+    EndTransaction,
 }

File: client/src/test/java/org/apache/rocketmq/client/impl/factory/MQClientInstanceTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Properties;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
+import org.apache.commons.lang3.reflect.FieldUtils;
 import org.apache.rocketmq.client.ClientConfig;
 import org.apache.rocketmq.client.admin.MQAdminExtInner;
 import org.apache.rocketmq.client.exception.MQBrokerException;
@@ -39,7 +40,6 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.internal.util.reflection.FieldSetter;
 import org.mockito.junit.MockitoJUnitRunner;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -55,7 +55,7 @@ public class MQClientInstanceTest {
 
     @Before
     public void init() throws Exception {
-        FieldSetter.setField(mqClientInstance, MQClientInstance.class.getDeclaredField("brokerAddrTable"), brokerAddrTable);
+        FieldUtils.writeDeclaredField(mqClientInstance, "brokerAddrTable", brokerAddrTable, true);
     }
 
     @Test
@@ -79,7 +79,7 @@ public void testTopicRouteData2TopicPublishInfo() {
         queueData.setPerm(6);
         queueData.setReadQueueNums(3);
         queueData.setWriteQueueNums(4);
-        queueData.setTopicSynFlag(0);
+        queueData.setTopicSysFlag(0);
         queueDataList.add(queueData);
         topicRouteData.setQueueDatas(queueDataList);
 

File: client/src/test/java/org/apache/rocketmq/client/producer/DefaultMQProducerTest.java
Patch:
@@ -478,7 +478,7 @@ public static TopicRouteData createTopicRoute() {
         queueData.setPerm(6);
         queueData.setReadQueueNums(3);
         queueData.setWriteQueueNums(4);
-        queueData.setTopicSynFlag(0);
+        queueData.setTopicSysFlag(0);
         queueDataList.add(queueData);
         topicRouteData.setQueueDatas(queueDataList);
         return topicRouteData;

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQProducerWithTraceTest.java
Patch:
@@ -168,7 +168,7 @@ public static TopicRouteData createTopicRoute() {
         queueData.setPerm(6);
         queueData.setReadQueueNums(3);
         queueData.setWriteQueueNums(4);
-        queueData.setTopicSynFlag(0);
+        queueData.setTopicSysFlag(0);
         queueDataList.add(queueData);
         topicRouteData.setQueueDatas(queueDataList);
         return topicRouteData;
@@ -204,7 +204,7 @@ public static TopicRouteData createTraceTopicRoute() {
         queueData.setPerm(6);
         queueData.setReadQueueNums(1);
         queueData.setWriteQueueNums(1);
-        queueData.setTopicSynFlag(1);
+        queueData.setTopicSysFlag(1);
         queueDataList.add(queueData);
         topicRouteData.setQueueDatas(queueDataList);
         return topicRouteData;

File: common/src/test/java/org/apache/rocketmq/common/protocol/route/TopicRouteDataTest.java
Patch:
@@ -43,7 +43,7 @@ public void testTopicRouteDataClone() throws Exception {
         queueData.setPerm(6);
         queueData.setReadQueueNums(8);
         queueData.setWriteQueueNums(8);
-        queueData.setTopicSynFlag(0);
+        queueData.setTopicSysFlag(0);
 
         List<QueueData> queueDataList = new ArrayList<QueueData>();
         queueDataList.add(queueData);
@@ -78,7 +78,7 @@ public void testTopicRouteDataJsonSerialize() throws Exception {
         queueData.setPerm(6);
         queueData.setReadQueueNums(8);
         queueData.setWriteQueueNums(8);
-        queueData.setTopicSynFlag(0);
+        queueData.setTopicSysFlag(0);
 
         List<QueueData> queueDataList = new ArrayList<QueueData>();
         queueDataList.add(queueData);

File: logging/src/main/java/org/apache/rocketmq/logging/inner/SysLogger.java
Patch:
@@ -33,13 +33,13 @@ public static void setInternalDebugging(boolean enabled) {
 
     public static void debug(String msg) {
         if (debugEnabled && !quietMode) {
-            System.out.printf("%s", PREFIX + msg);
+            System.err.println(PREFIX + msg);
         }
     }
 
     public static void debug(String msg, Throwable t) {
         if (debugEnabled && !quietMode) {
-            System.out.printf("%s", PREFIX + msg);
+            System.err.println(PREFIX + msg);
             if (t != null) {
                 t.printStackTrace(System.out);
             }

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/TlsHelper.java
Patch:
@@ -133,7 +133,7 @@ public static SslContext buildSslContext(boolean forClient) throws IOException,
                 SelfSignedCertificate selfSignedCertificate = new SelfSignedCertificate();
                 return SslContextBuilder
                     .forServer(selfSignedCertificate.certificate(), selfSignedCertificate.privateKey())
-                    .sslProvider(SslProvider.JDK)
+                    .sslProvider(provider)
                     .clientAuth(ClientAuth.OPTIONAL)
                     .build();
             } else {

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -1948,7 +1948,8 @@ private void doReput() {
                                     DefaultMessageStore.this.doDispatch(dispatchRequest);
 
                                     if (BrokerRole.SLAVE != DefaultMessageStore.this.getMessageStoreConfig().getBrokerRole()
-                                        && DefaultMessageStore.this.brokerConfig.isLongPollingEnable()) {
+                                            && DefaultMessageStore.this.brokerConfig.isLongPollingEnable()
+                                            && DefaultMessageStore.this.messageArrivingListener != null) {
                                         DefaultMessageStore.this.messageArrivingListener.arriving(dispatchRequest.getTopic(),
                                             dispatchRequest.getQueueId(), dispatchRequest.getConsumeQueueOffset() + 1,
                                             dispatchRequest.getTagsCode(), dispatchRequest.getStoreTimestamp(),

File: store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreTest.java
Patch:
@@ -133,7 +133,7 @@ public void testWriteAndRead() {
         StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);
 
         for (long i = 0; i < totalMsgs; i++) {
-            GetMessageResult result = messageStore.getMessage("GROUP_A", "TOPIC_A", 0, i, 1024 * 1024, null);
+            GetMessageResult result = messageStore.getMessage("GROUP_A", "FooBar", 0, i, 1024 * 1024, null);
             assertThat(result).isNotNull();
             result.release();
         }
@@ -471,7 +471,7 @@ private void verifyThatMasterIsFunctional(long totalMsgs, MessageStore master) {
         StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);
 
         for (long i = 0; i < totalMsgs; i++) {
-            GetMessageResult result = master.getMessage("GROUP_A", "TOPIC_A", 0, i, 1024 * 1024, null);
+            GetMessageResult result = master.getMessage("GROUP_A", "FooBar", 0, i, 1024 * 1024, null);
             assertThat(result).isNotNull();
             result.release();
 

File: tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java
Patch:
@@ -156,6 +156,9 @@ void deleteTopicInNameServer(final Set<String> addrs,
     void deleteSubscriptionGroup(final String addr, String groupName) throws RemotingException, MQBrokerException,
         InterruptedException, MQClientException;
 
+    void deleteSubscriptionGroup(final String addr, String groupName, boolean removeOffset) throws RemotingException, MQBrokerException,
+        InterruptedException, MQClientException;
+
     void createAndUpdateKvConfig(String namespace, String key,
         String value) throws RemotingException, MQBrokerException,
         InterruptedException, MQClientException;

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateTopicPermSubCommand.java
Patch:
@@ -94,7 +94,7 @@ public void execute(final CommandLine commandLine, final Options options,
             topicConfig.setTopicName(topic);
             topicConfig.setWriteQueueNums(queueData.getWriteQueueNums());
             topicConfig.setReadQueueNums(queueData.getReadQueueNums());
-            topicConfig.setTopicSysFlag(queueData.getTopicSynFlag());
+            topicConfig.setTopicSysFlag(queueData.getTopicSysFlag());
             //new perm
             int perm;
             if (commandLine.hasOption('p')) {

File: client/src/test/java/org/apache/rocketmq/client/impl/factory/MQClientInstanceTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Properties;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
+import org.apache.commons.lang3.reflect.FieldUtils;
 import org.apache.rocketmq.client.ClientConfig;
 import org.apache.rocketmq.client.admin.MQAdminExtInner;
 import org.apache.rocketmq.client.exception.MQBrokerException;
@@ -39,7 +40,6 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.internal.util.reflection.FieldSetter;
 import org.mockito.junit.MockitoJUnitRunner;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -55,7 +55,7 @@ public class MQClientInstanceTest {
 
     @Before
     public void init() throws Exception {
-        FieldSetter.setField(mqClientInstance, MQClientInstance.class.getDeclaredField("brokerAddrTable"), brokerAddrTable);
+        FieldUtils.writeDeclaredField(mqClientInstance, "brokerAddrTable", brokerAddrTable, true);
     }
 
     @Test

File: logging/src/main/java/org/apache/rocketmq/logging/inner/SysLogger.java
Patch:
@@ -33,13 +33,13 @@ public static void setInternalDebugging(boolean enabled) {
 
     public static void debug(String msg) {
         if (debugEnabled && !quietMode) {
-            System.out.printf("%s", PREFIX + msg);
+            System.err.println(PREFIX + msg);
         }
     }
 
     public static void debug(String msg, Throwable t) {
         if (debugEnabled && !quietMode) {
-            System.out.printf("%s", PREFIX + msg);
+            System.err.println(PREFIX + msg);
             if (t != null) {
                 t.printStackTrace(System.out);
             }

File: example/src/main/java/org/apache/rocketmq/example/tracemessage/OpenTracingTransactionProducer.java
Patch:
@@ -57,7 +57,7 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
 
         try {
             Message msg = new Message("TopicTest", "Tag", "KEY",
-                    ("Hello RocketMQ").getBytes(RemotingHelper.DEFAULT_CHARSET));
+                    "Hello RocketMQ".getBytes(RemotingHelper.DEFAULT_CHARSET));
             SendResult sendResult = producer.sendMessageInTransaction(msg, null);
             System.out.printf("%s%n", sendResult);
         } catch (MQClientException | UnsupportedEncodingException e) {

File: client/src/test/java/org/apache/rocketmq/client/impl/factory/MQClientInstanceTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Properties;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
+import org.apache.commons.lang3.reflect.FieldUtils;
 import org.apache.rocketmq.client.ClientConfig;
 import org.apache.rocketmq.client.admin.MQAdminExtInner;
 import org.apache.rocketmq.client.exception.MQBrokerException;
@@ -39,7 +40,6 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.internal.util.reflection.FieldSetter;
 import org.mockito.junit.MockitoJUnitRunner;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -55,7 +55,7 @@ public class MQClientInstanceTest {
 
     @Before
     public void init() throws Exception {
-        FieldSetter.setField(mqClientInstance, MQClientInstance.class.getDeclaredField("brokerAddrTable"), brokerAddrTable);
+        FieldUtils.writeDeclaredField(mqClientInstance, "brokerAddrTable", brokerAddrTable, true);
     }
 
     @Test

File: example/src/main/java/org/apache/rocketmq/example/tracemessage/OpenTracingTransactionProducer.java
Patch:
@@ -57,7 +57,7 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
 
         try {
             Message msg = new Message("TopicTest", "Tag", "KEY",
-                    ("Hello RocketMQ").getBytes(RemotingHelper.DEFAULT_CHARSET));
+                    "Hello RocketMQ".getBytes(RemotingHelper.DEFAULT_CHARSET));
             SendResult sendResult = producer.sendMessageInTransaction(msg, null);
             System.out.printf("%s%n", sendResult);
         } catch (MQClientException | UnsupportedEncodingException e) {

File: logging/src/main/java/org/apache/rocketmq/logging/inner/SysLogger.java
Patch:
@@ -33,13 +33,13 @@ public static void setInternalDebugging(boolean enabled) {
 
     public static void debug(String msg) {
         if (debugEnabled && !quietMode) {
-            System.out.printf("%s", PREFIX + msg);
+            System.err.println(PREFIX + msg);
         }
     }
 
     public static void debug(String msg, Throwable t) {
         if (debugEnabled && !quietMode) {
-            System.out.printf("%s", PREFIX + msg);
+            System.err.println(PREFIX + msg);
             if (t != null) {
                 t.printStackTrace(System.out);
             }

File: example/src/main/java/org/apache/rocketmq/example/tracemessage/OpenTracingTransactionProducer.java
Patch:
@@ -57,7 +57,7 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
 
         try {
             Message msg = new Message("TopicTest", "Tag", "KEY",
-                    ("Hello RocketMQ").getBytes(RemotingHelper.DEFAULT_CHARSET));
+                    "Hello RocketMQ".getBytes(RemotingHelper.DEFAULT_CHARSET));
             SendResult sendResult = producer.sendMessageInTransaction(msg, null);
             System.out.printf("%s%n", sendResult);
         } catch (MQClientException | UnsupportedEncodingException e) {

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageServiceImpl.java
Patch:
@@ -164,7 +164,7 @@ public void check(long transactionTimeout, int transactionCheckMax,
                         break;
                     }
                     if (removeMap.containsKey(i)) {
-                        log.info("Half offset {} has been committed/rolled back", i);
+                        log.debug("Half offset {} has been committed/rolled back", i);
                         Long removedOpOffset = removeMap.remove(i);
                         doneOpOffset.add(removedOpOffset);
                     } else {

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageServiceImpl.java
Patch:
@@ -164,7 +164,7 @@ public void check(long transactionTimeout, int transactionCheckMax,
                         break;
                     }
                     if (removeMap.containsKey(i)) {
-                        log.info("Half offset {} has been committed/rolled back", i);
+                        log.debug("Half offset {} has been committed/rolled back", i);
                         Long removedOpOffset = removeMap.remove(i);
                         doneOpOffset.add(removedOpOffset);
                     } else {

File: client/src/main/java/org/apache/rocketmq/client/ClientConfig.java
Patch:
@@ -94,7 +94,7 @@ public void setInstanceName(String instanceName) {
 
     public void changeInstanceNameToPID() {
         if (this.instanceName.equals("DEFAULT")) {
-            this.instanceName = UtilAll.getPid()+ "#" + System.nanoTime();
+            this.instanceName = UtilAll.getPid() + "#" + System.nanoTime();
         }
     }
 

File: common/src/main/java/org/apache/rocketmq/common/utils/NameServerAddressUtils.java
Patch:
@@ -34,7 +34,7 @@ public static String parseInstanceIdFromEndpoint(String endpoint) {
         if (StringUtils.isEmpty(endpoint)) {
             return null;
         }
-        return endpoint.substring(endpoint.lastIndexOf("/")+1, endpoint.indexOf('.'));
+        return endpoint.substring(endpoint.lastIndexOf("/") + 1, endpoint.indexOf('.'));
     }
 
     public static String getNameSrvAddrFromNamesrvEndpoint(String nameSrvEndpoint) {

File: example/src/main/java/org/apache/rocketmq/example/ordermessage/Producer.java
Patch:
@@ -16,19 +16,19 @@
  */
 package org.apache.rocketmq.example.ordermessage;
 
-import java.io.UnsupportedEncodingException;
-import java.util.List;
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
-import org.apache.rocketmq.client.producer.MQProducer;
 import org.apache.rocketmq.client.producer.MessageQueueSelector;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 
+import java.io.UnsupportedEncodingException;
+import java.util.List;
+
 public class Producer {
     public static void main(String[] args) throws UnsupportedEncodingException {
         try {

File: client/src/main/java/org/apache/rocketmq/client/ClientConfig.java
Patch:
@@ -94,7 +94,7 @@ public void setInstanceName(String instanceName) {
 
     public void changeInstanceNameToPID() {
         if (this.instanceName.equals("DEFAULT")) {
-            this.instanceName = UtilAll.getPid()+ "#" + System.nanoTime();
+            this.instanceName = UtilAll.getPid() + "#" + System.nanoTime();
         }
     }
 

File: common/src/main/java/org/apache/rocketmq/common/utils/NameServerAddressUtils.java
Patch:
@@ -34,7 +34,7 @@ public static String parseInstanceIdFromEndpoint(String endpoint) {
         if (StringUtils.isEmpty(endpoint)) {
             return null;
         }
-        return endpoint.substring(endpoint.lastIndexOf("/")+1, endpoint.indexOf('.'));
+        return endpoint.substring(endpoint.lastIndexOf("/") + 1, endpoint.indexOf('.'));
     }
 
     public static String getNameSrvAddrFromNamesrvEndpoint(String nameSrvEndpoint) {

File: example/src/main/java/org/apache/rocketmq/example/ordermessage/Producer.java
Patch:
@@ -16,19 +16,19 @@
  */
 package org.apache.rocketmq.example.ordermessage;
 
-import java.io.UnsupportedEncodingException;
-import java.util.List;
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
-import org.apache.rocketmq.client.producer.MQProducer;
 import org.apache.rocketmq.client.producer.MessageQueueSelector;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 
+import java.io.UnsupportedEncodingException;
+import java.util.List;
+
 public class Producer {
     public static void main(String[] args) throws UnsupportedEncodingException {
         try {

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceType.java
Patch:
@@ -20,4 +20,5 @@ public enum TraceType {
     Pub,
     SubBefore,
     SubAfter,
+    EndTransaction,
 }

File: client/src/main/java/org/apache/rocketmq/client/trace/AsyncTraceDispatcher.java
Patch:
@@ -370,7 +370,7 @@ public void onSuccess(SendResult sendResult) {
 
                     @Override
                     public void onException(Throwable e) {
-                        log.info("send trace data ,the traceData is " + data);
+                        log.error("send trace data failed, the traceData is {}", data, e);
                     }
                 };
                 if (traceBrokerSet.isEmpty()) {
@@ -398,7 +398,7 @@ public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {
                 }
 
             } catch (Exception e) {
-                log.info("send trace data,the traceData is" + data);
+                log.error("send trace data failed, the traceData is {}", data, e);
             }
         }
 

File: store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreTest.java
Patch:
@@ -133,7 +133,7 @@ public void testWriteAndRead() {
         StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);
 
         for (long i = 0; i < totalMsgs; i++) {
-            GetMessageResult result = messageStore.getMessage("GROUP_A", "TOPIC_A", 0, i, 1024 * 1024, null);
+            GetMessageResult result = messageStore.getMessage("GROUP_A", "FooBar", 0, i, 1024 * 1024, null);
             assertThat(result).isNotNull();
             result.release();
         }
@@ -471,7 +471,7 @@ private void verifyThatMasterIsFunctional(long totalMsgs, MessageStore master) {
         StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);
 
         for (long i = 0; i < totalMsgs; i++) {
-            GetMessageResult result = master.getMessage("GROUP_A", "TOPIC_A", 0, i, 1024 * 1024, null);
+            GetMessageResult result = master.getMessage("GROUP_A", "FooBar", 0, i, 1024 * 1024, null);
             assertThat(result).isNotNull();
             result.release();
 

File: store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreTest.java
Patch:
@@ -133,7 +133,7 @@ public void testWriteAndRead() {
         StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);
 
         for (long i = 0; i < totalMsgs; i++) {
-            GetMessageResult result = messageStore.getMessage("GROUP_A", "TOPIC_A", 0, i, 1024 * 1024, null);
+            GetMessageResult result = messageStore.getMessage("GROUP_A", "FooBar", 0, i, 1024 * 1024, null);
             assertThat(result).isNotNull();
             result.release();
         }
@@ -471,7 +471,7 @@ private void verifyThatMasterIsFunctional(long totalMsgs, MessageStore master) {
         StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);
 
         for (long i = 0; i < totalMsgs; i++) {
-            GetMessageResult result = master.getMessage("GROUP_A", "TOPIC_A", 0, i, 1024 * 1024, null);
+            GetMessageResult result = master.getMessage("GROUP_A", "FooBar", 0, i, 1024 * 1024, null);
             assertThat(result).isNotNull();
             result.release();
 

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -1947,7 +1947,8 @@ private void doReput() {
                                     DefaultMessageStore.this.doDispatch(dispatchRequest);
 
                                     if (BrokerRole.SLAVE != DefaultMessageStore.this.getMessageStoreConfig().getBrokerRole()
-                                        && DefaultMessageStore.this.brokerConfig.isLongPollingEnable()) {
+                                            && DefaultMessageStore.this.brokerConfig.isLongPollingEnable()
+                                            && DefaultMessageStore.this.messageArrivingListener != null) {
                                         DefaultMessageStore.this.messageArrivingListener.arriving(dispatchRequest.getTopic(),
                                             dispatchRequest.getQueueId(), dispatchRequest.getConsumeQueueOffset() + 1,
                                             dispatchRequest.getTagsCode(), dispatchRequest.getStoreTimestamp(),

File: client/src/main/java/org/apache/rocketmq/client/trace/AsyncTraceDispatcher.java
Patch:
@@ -370,7 +370,7 @@ public void onSuccess(SendResult sendResult) {
 
                     @Override
                     public void onException(Throwable e) {
-                        log.info("send trace data ,the traceData is " + data);
+                        log.error("send trace data failed, the traceData is {}", data, e);
                     }
                 };
                 if (traceBrokerSet.isEmpty()) {
@@ -398,7 +398,7 @@ public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {
                 }
 
             } catch (Exception e) {
-                log.info("send trace data,the traceData is" + data);
+                log.error("send trace data failed, the traceData is {}", data, e);
             }
         }
 

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -1947,7 +1947,8 @@ private void doReput() {
                                     DefaultMessageStore.this.doDispatch(dispatchRequest);
 
                                     if (BrokerRole.SLAVE != DefaultMessageStore.this.getMessageStoreConfig().getBrokerRole()
-                                        && DefaultMessageStore.this.brokerConfig.isLongPollingEnable()) {
+                                            && DefaultMessageStore.this.brokerConfig.isLongPollingEnable()
+                                            && DefaultMessageStore.this.messageArrivingListener != null) {
                                         DefaultMessageStore.this.messageArrivingListener.arriving(dispatchRequest.getTopic(),
                                             dispatchRequest.getQueueId(), dispatchRequest.getConsumeQueueOffset() + 1,
                                             dispatchRequest.getTagsCode(), dispatchRequest.getStoreTimestamp(),

File: client/src/main/java/org/apache/rocketmq/client/ClientConfig.java
Patch:
@@ -178,8 +178,8 @@ public ClientConfig cloneClientConfig() {
     }
 
     public String getNamesrvAddr() {
-        if (StringUtils.isNotEmpty(namesrvAddr) && NameServerAddressUtils.NAMESRV_ENDPOINT_PATTERN.matcher(namesrvAddr.trim()).matches()) {
-            return namesrvAddr.substring(NameServerAddressUtils.ENDPOINT_PREFIX.length());
+        if (StringUtils.isNotEmpty(namesrvAddr) && NameServerAddressUtils.validateInstanceEndpoint(namesrvAddr.trim())) {
+            return NameServerAddressUtils.getNameSrvAddrFromNamesrvEndpoint(namesrvAddr);
         }
         return namesrvAddr;
     }

File: client/src/test/java/org/apache/rocketmq/client/impl/factory/MQClientInstanceTest.java
Patch:
@@ -79,7 +79,7 @@ public void testTopicRouteData2TopicPublishInfo() {
         queueData.setPerm(6);
         queueData.setReadQueueNums(3);
         queueData.setWriteQueueNums(4);
-        queueData.setTopicSynFlag(0);
+        queueData.setTopicSysFlag(0);
         queueDataList.add(queueData);
         topicRouteData.setQueueDatas(queueDataList);
 

File: client/src/test/java/org/apache/rocketmq/client/producer/DefaultMQProducerTest.java
Patch:
@@ -481,7 +481,7 @@ public static TopicRouteData createTopicRoute() {
         queueData.setPerm(6);
         queueData.setReadQueueNums(3);
         queueData.setWriteQueueNums(4);
-        queueData.setTopicSynFlag(0);
+        queueData.setTopicSysFlag(0);
         queueDataList.add(queueData);
         topicRouteData.setQueueDatas(queueDataList);
         return topicRouteData;

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQConsumerWithTraceTest.java
Patch:
@@ -273,7 +273,7 @@ public static TopicRouteData createTopicRoute() {
         queueData.setPerm(6);
         queueData.setReadQueueNums(3);
         queueData.setWriteQueueNums(4);
-        queueData.setTopicSynFlag(0);
+        queueData.setTopicSysFlag(0);
         queueDataList.add(queueData);
         topicRouteData.setQueueDatas(queueDataList);
         return topicRouteData;
@@ -309,7 +309,7 @@ public static TopicRouteData createTraceTopicRoute() {
         queueData.setPerm(6);
         queueData.setReadQueueNums(1);
         queueData.setWriteQueueNums(1);
-        queueData.setTopicSynFlag(1);
+        queueData.setTopicSysFlag(1);
         queueDataList.add(queueData);
         topicRouteData.setQueueDatas(queueDataList);
         return topicRouteData;

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQProducerWithTraceTest.java
Patch:
@@ -168,7 +168,7 @@ public static TopicRouteData createTopicRoute() {
         queueData.setPerm(6);
         queueData.setReadQueueNums(3);
         queueData.setWriteQueueNums(4);
-        queueData.setTopicSynFlag(0);
+        queueData.setTopicSysFlag(0);
         queueDataList.add(queueData);
         topicRouteData.setQueueDatas(queueDataList);
         return topicRouteData;
@@ -204,7 +204,7 @@ public static TopicRouteData createTraceTopicRoute() {
         queueData.setPerm(6);
         queueData.setReadQueueNums(1);
         queueData.setWriteQueueNums(1);
-        queueData.setTopicSynFlag(1);
+        queueData.setTopicSysFlag(1);
         queueDataList.add(queueData);
         topicRouteData.setQueueDatas(queueDataList);
         return topicRouteData;

File: common/src/test/java/org/apache/rocketmq/common/protocol/route/TopicRouteDataTest.java
Patch:
@@ -43,7 +43,7 @@ public void testTopicRouteDataClone() throws Exception {
         queueData.setPerm(6);
         queueData.setReadQueueNums(8);
         queueData.setWriteQueueNums(8);
-        queueData.setTopicSynFlag(0);
+        queueData.setTopicSysFlag(0);
 
         List<QueueData> queueDataList = new ArrayList<QueueData>();
         queueDataList.add(queueData);
@@ -78,7 +78,7 @@ public void testTopicRouteDataJsonSerialize() throws Exception {
         queueData.setPerm(6);
         queueData.setReadQueueNums(8);
         queueData.setWriteQueueNums(8);
-        queueData.setTopicSynFlag(0);
+        queueData.setTopicSysFlag(0);
 
         List<QueueData> queueDataList = new ArrayList<QueueData>();
         queueDataList.add(queueData);

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateTopicPermSubCommand.java
Patch:
@@ -94,7 +94,7 @@ public void execute(final CommandLine commandLine, final Options options,
             topicConfig.setTopicName(topic);
             topicConfig.setWriteQueueNums(queueData.getWriteQueueNums());
             topicConfig.setReadQueueNums(queueData.getReadQueueNums());
-            topicConfig.setTopicSysFlag(queueData.getTopicSynFlag());
+            topicConfig.setTopicSysFlag(queueData.getTopicSysFlag());
             //new perm
             int perm;
             if (commandLine.hasOption('p')) {

File: example/src/main/java/org/apache/rocketmq/example/ordermessage/Producer.java
Patch:
@@ -32,7 +32,7 @@
 public class Producer {
     public static void main(String[] args) throws UnsupportedEncodingException {
         try {
-            MQProducer producer = new DefaultMQProducer("please_rename_unique_group_name");
+            DefaultMQProducer producer = new DefaultMQProducer("please_rename_unique_group_name");
             producer.start();
 
             String[] tags = new String[] {"TagA", "TagB", "TagC", "TagD", "TagE"};

File: example/src/main/java/org/apache/rocketmq/example/ordermessage/Producer.java
Patch:
@@ -32,7 +32,7 @@
 public class Producer {
     public static void main(String[] args) throws UnsupportedEncodingException {
         try {
-            MQProducer producer = new DefaultMQProducer("please_rename_unique_group_name");
+            DefaultMQProducer producer = new DefaultMQProducer("please_rename_unique_group_name");
             producer.start();
 
             String[] tags = new String[] {"TagA", "TagB", "TagC", "TagD", "TagE"};

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java
Patch:
@@ -176,9 +176,7 @@ public TopicConfig createTopicInSendMessageMethod(final String topic, final Stri
                         if (PermName.isInherited(defaultTopicConfig.getPerm())) {
                             topicConfig = new TopicConfig(topic);
 
-                            int queueNums =
-                                clientDefaultTopicQueueNums > defaultTopicConfig.getWriteQueueNums() ? defaultTopicConfig
-                                    .getWriteQueueNums() : clientDefaultTopicQueueNums;
+                            int queueNums = Math.min(clientDefaultTopicQueueNums, defaultTopicConfig.getWriteQueueNums());
 
                             if (queueNums < 0) {
                                 queueNums = 0;

File: client/src/main/java/org/apache/rocketmq/client/common/ThreadLocalIndex.java
Patch:
@@ -30,9 +30,8 @@ public int incrementAndGet() {
             this.threadLocalIndex.set(index);
         }
 
-        index = Math.abs(index + 1);
-        this.threadLocalIndex.set(index);
-        return index;
+        this.threadLocalIndex.set(++index);
+        return Math.abs(index);
     }
 
     @Override

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -1467,10 +1467,11 @@ public void deleteTopicInNameServer(final String addr, final String topic, final
         throw new MQClientException(response.getCode(), response.getRemark());
     }
 
-    public void deleteSubscriptionGroup(final String addr, final String groupName, final long timeoutMillis)
+    public void deleteSubscriptionGroup(final String addr, final String groupName, final boolean removeOffset, final long timeoutMillis)
         throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
         DeleteSubscriptionGroupRequestHeader requestHeader = new DeleteSubscriptionGroupRequestHeader();
         requestHeader.setGroupName(groupName);
+        requestHeader.setRemoveOffset(removeOffset);
         RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.DELETE_SUBSCRIPTIONGROUP, requestHeader);
 
         RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),

File: tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java
Patch:
@@ -152,6 +152,9 @@ void deleteTopicInNameServer(final Set<String> addrs,
     void deleteSubscriptionGroup(final String addr, String groupName) throws RemotingException, MQBrokerException,
         InterruptedException, MQClientException;
 
+    void deleteSubscriptionGroup(final String addr, String groupName, boolean removeOffset) throws RemotingException, MQBrokerException,
+        InterruptedException, MQClientException;
+
     void createAndUpdateKvConfig(String namespace, String key,
         String value) throws RemotingException, MQBrokerException,
         InterruptedException, MQClientException;

File: client/src/main/java/org/apache/rocketmq/client/ClientConfig.java
Patch:
@@ -94,7 +94,7 @@ public void setInstanceName(String instanceName) {
 
     public void changeInstanceNameToPID() {
         if (this.instanceName.equals("DEFAULT")) {
-            this.instanceName = String.valueOf(UtilAll.getPid());
+            this.instanceName = UtilAll.getPid()+ "#" + System.nanoTime();
         }
     }
 

File: client/src/main/java/org/apache/rocketmq/client/ClientConfig.java
Patch:
@@ -94,7 +94,7 @@ public void setInstanceName(String instanceName) {
 
     public void changeInstanceNameToPID() {
         if (this.instanceName.equals("DEFAULT")) {
-            this.instanceName = String.valueOf(UtilAll.getPid());
+            this.instanceName = UtilAll.getPid()+ "#" + System.nanoTime();
         }
     }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -80,7 +80,6 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.message.MessageType;
 import org.apache.rocketmq.common.protocol.NamespaceUtil;
-import org.apache.rocketmq.common.protocol.ResponseCode;
 import org.apache.rocketmq.common.protocol.header.CheckTransactionStateRequestHeader;
 import org.apache.rocketmq.common.protocol.header.EndTransactionRequestHeader;
 import org.apache.rocketmq.common.protocol.header.SendMessageRequestHeader;

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/TlsHelper.java
Patch:
@@ -133,7 +133,7 @@ public static SslContext buildSslContext(boolean forClient) throws IOException,
                 SelfSignedCertificate selfSignedCertificate = new SelfSignedCertificate();
                 return SslContextBuilder
                     .forServer(selfSignedCertificate.certificate(), selfSignedCertificate.privateKey())
-                    .sslProvider(SslProvider.JDK)
+                    .sslProvider(provider)
                     .clientAuth(ClientAuth.OPTIONAL)
                     .build();
             } else {

File: common/src/main/java/org/apache/rocketmq/common/filter/FilterAPI.java
Patch:
@@ -36,8 +36,7 @@ public static String simpleClassName(final String className) {
         return simple;
     }
 
-    public static SubscriptionData buildSubscriptionData(final String consumerGroup, String topic,
-        String subString) throws Exception {
+    public static SubscriptionData buildSubscriptionData(String topic, String subString) throws Exception {
         SubscriptionData subscriptionData = new SubscriptionData();
         subscriptionData.setTopic(topic);
         subscriptionData.setSubString(subString);
@@ -67,7 +66,7 @@ public static SubscriptionData buildSubscriptionData(final String consumerGroup,
     public static SubscriptionData build(final String topic, final String subString,
         final String type) throws Exception {
         if (ExpressionType.TAG.equals(type) || type == null) {
-            return buildSubscriptionData(null, topic, subString);
+            return buildSubscriptionData(topic, subString);
         }
 
         if (subString == null || subString.length() < 1) {

File: common/src/test/java/org/apache/rocketmq/common/filter/FilterAPITest.java
Patch:
@@ -33,7 +33,7 @@ public class FilterAPITest {
     @Test
     public void testBuildSubscriptionData() throws Exception {
         SubscriptionData subscriptionData =
-                FilterAPI.buildSubscriptionData(group, topic, subString);
+                FilterAPI.buildSubscriptionData(topic, subString);
         assertThat(subscriptionData.getTopic()).isEqualTo(topic);
         assertThat(subscriptionData.getSubString()).isEqualTo(subString);
         String[] tags = subString.split("\\|\\|");

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicRouteSubCommand.java
Patch:
@@ -109,7 +109,7 @@ private void printData(TopicRouteData topicRouteData, boolean useListFormat) {
         for (int i = 0; i < 158; i++) {
             System.out.print("-");
         }
-        System.out.print("%n");
+        System.out.printf("%n");
         System.out.printf(FORMAT, "Total:", map.keySet().size(), "", totalReadQueue, totalWriteQueue, "");
     }
 }
\ No newline at end of file

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicRouteSubCommand.java
Patch:
@@ -34,7 +34,7 @@
 
 public class TopicRouteSubCommand implements SubCommand {
 
-    private static final String FORMAT = "%-45s %-32s %-50s %-10s %-11s %-5s\n";
+    private static final String FORMAT = "%-45s %-32s %-50s %-10s %-11s %-5s%n";
 
     @Override
     public String commandName() {
@@ -80,7 +80,7 @@ public void execute(final CommandLine commandLine, final Options options,
 
     private void printData(TopicRouteData topicRouteData, boolean useListFormat) {
         if (!useListFormat) {
-            System.out.printf("%s\n", topicRouteData.toJson(true));
+            System.out.printf("%s%n", topicRouteData.toJson(true));
             return;
         }
 
@@ -109,7 +109,7 @@ private void printData(TopicRouteData topicRouteData, boolean useListFormat) {
         for (int i = 0; i < 158; i++) {
             System.out.print("-");
         }
-        System.out.print("\n");
+        System.out.print("%n");
         System.out.printf(FORMAT, "Total:", map.keySet().size(), "", totalReadQueue, totalWriteQueue, "");
     }
 }
\ No newline at end of file

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicRouteSubCommand.java
Patch:
@@ -80,7 +80,7 @@ public void execute(final CommandLine commandLine, final Options options,
 
     private void printData(TopicRouteData topicRouteData, boolean useListFormat) {
         if (!useListFormat) {
-            System.out.printf("%s%n", topicRouteData.toJson(true));
+            System.out.printf("%s\n", topicRouteData.toJson(true));
             return;
         }
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicRouteSubCommand.java
Patch:
@@ -60,7 +60,7 @@ public Options buildCommandlineOptions(Options options) {
 
     @Override
     public void execute(final CommandLine commandLine, final Options options,
-                        RPCHook rpcHook) throws SubCommandException {
+        RPCHook rpcHook) throws SubCommandException {
         DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));

File: client/src/main/java/org/apache/rocketmq/client/common/ThreadLocalIndex.java
Patch:
@@ -23,7 +23,7 @@ public class ThreadLocalIndex {
     private final ThreadLocal<Integer> threadLocalIndex = new ThreadLocal<Integer>();
     private final Random random = new Random();
 
-    public int getAndIncrement() {
+    public int incrementAndGet() {
         Integer index = this.threadLocalIndex.get();
         if (null == index) {
             index = Math.abs(random.nextInt());

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/TopicPublishInfo.java
Patch:
@@ -71,7 +71,7 @@ public MessageQueue selectOneMessageQueue(final String lastBrokerName) {
             return selectOneMessageQueue();
         } else {
             for (int i = 0; i < this.messageQueueList.size(); i++) {
-                int index = this.sendWhichQueue.getAndIncrement();
+                int index = this.sendWhichQueue.incrementAndGet();
                 int pos = Math.abs(index) % this.messageQueueList.size();
                 if (pos < 0)
                     pos = 0;
@@ -85,7 +85,7 @@ public MessageQueue selectOneMessageQueue(final String lastBrokerName) {
     }
 
     public MessageQueue selectOneMessageQueue() {
-        int index = this.sendWhichQueue.getAndIncrement();
+        int index = this.sendWhichQueue.incrementAndGet();
         int pos = Math.abs(index) % this.messageQueueList.size();
         if (pos < 0)
             pos = 0;

File: client/src/main/java/org/apache/rocketmq/client/latency/LatencyFaultToleranceImpl.java
Patch:
@@ -80,7 +80,7 @@ public String pickOneAtLeast() {
             if (half <= 0) {
                 return tmpList.get(0).getName();
             } else {
-                final int i = this.whichItemWorst.getAndIncrement() % half;
+                final int i = this.whichItemWorst.incrementAndGet() % half;
                 return tmpList.get(i).getName();
             }
         }

File: client/src/main/java/org/apache/rocketmq/client/latency/MQFaultStrategy.java
Patch:
@@ -58,7 +58,7 @@ public void setSendLatencyFaultEnable(final boolean sendLatencyFaultEnable) {
     public MessageQueue selectOneMessageQueue(final TopicPublishInfo tpInfo, final String lastBrokerName) {
         if (this.sendLatencyFaultEnable) {
             try {
-                int index = tpInfo.getSendWhichQueue().getAndIncrement();
+                int index = tpInfo.getSendWhichQueue().incrementAndGet();
                 for (int i = 0; i < tpInfo.getMessageQueueList().size(); i++) {
                     int pos = Math.abs(index++) % tpInfo.getMessageQueueList().size();
                     if (pos < 0)
@@ -74,7 +74,7 @@ public MessageQueue selectOneMessageQueue(final TopicPublishInfo tpInfo, final S
                     final MessageQueue mq = tpInfo.selectOneMessageQueue();
                     if (notBestBroker != null) {
                         mq.setBrokerName(notBestBroker);
-                        mq.setQueueId(tpInfo.getSendWhichQueue().getAndIncrement() % writeQueueNums);
+                        mq.setQueueId(tpInfo.getSendWhichQueue().incrementAndGet() % writeQueueNums);
                     }
                     return mq;
                 } else {

File: client/src/main/java/org/apache/rocketmq/client/trace/AsyncTraceDispatcher.java
Patch:
@@ -387,7 +387,7 @@ public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {
                                     filterMqs.add(queue);
                                 }
                             }
-                            int index = sendWhichQueue.getAndIncrement();
+                            int index = sendWhichQueue.incrementAndGet();
                             int pos = Math.abs(index) % filterMqs.size();
                             if (pos < 0) {
                                 pos = 0;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PullMessageProcessor.java
Patch:
@@ -584,7 +584,7 @@ public void operationComplete(ChannelFuture future) throws Exception {
         this.brokerController.getPullMessageExecutor().submit(new RequestTask(run, channel, request));
     }
 
-    public void registerConsumeMessageHook(List<ConsumeMessageHook> sendMessageHookList) {
-        this.consumeMessageHookList = sendMessageHookList;
+    public void registerConsumeMessageHook(List<ConsumeMessageHook> consumeMessageHookList) {
+        this.consumeMessageHookList = consumeMessageHookList;
     }
 }

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -1747,8 +1747,7 @@ public void setManualDeleteFileSeveralTimes(int manualDeleteFileSeveralTimes) {
             this.manualDeleteFileSeveralTimes = manualDeleteFileSeveralTimes;
         }
         public boolean isSpaceFull() {
-            String storePathPhysic = DefaultMessageStore.this.getMessageStoreConfig().getStorePathCommitLog();
-            double physicRatio = UtilAll.getDiskPartitionSpaceUsedPercent(storePathPhysic);
+            double physicRatio = UtilAll.getDiskPartitionSpaceUsedPercent(getStorePathPhysic());
             double ratio = DefaultMessageStore.this.getMessageStoreConfig().getDiskMaxUsedSpaceRatio() / 100.0;
             if (physicRatio > ratio) {
                 DefaultMessageStore.log.info("physic disk of commitLog used: " + physicRatio);

File: client/src/test/java/org/apache/rocketmq/client/consumer/DefaultLitePullConsumerTest.java
Patch:
@@ -54,6 +54,7 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -71,6 +72,7 @@
 
 @RunWith(PowerMockRunner.class)
 @PrepareForTest(DefaultLitePullConsumerImpl.class)
+@PowerMockIgnore("javax.management.*")
 public class DefaultLitePullConsumerTest {
     @Spy
     private MQClientInstance mQClientFactory = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());

File: client/src/test/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumerTest.java
Patch:
@@ -62,6 +62,7 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -78,6 +79,7 @@
 
 @RunWith(PowerMockRunner.class)
 @PrepareForTest(DefaultMQPushConsumerImpl.class)
+@PowerMockIgnore("javax.management.*")
 public class DefaultMQPushConsumerTest {
     private String consumerGroup;
     private String topic = "FooBar";

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQConsumerWithTraceTest.java
Patch:
@@ -73,6 +73,7 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -88,6 +89,7 @@
 
 @RunWith(PowerMockRunner.class)
 @PrepareForTest(DefaultMQPushConsumerImpl.class)
+@PowerMockIgnore("javax.management.*")
 public class DefaultMQConsumerWithTraceTest {
     private String consumerGroup;
     private String consumerGroupNormal;

File: broker/src/main/java/org/apache/rocketmq/broker/out/BrokerOuterAPI.java
Patch:
@@ -146,7 +146,7 @@ public List<RegisterBrokerResult> registerBrokerAll(
                     @Override
                     public void run() {
                         try {
-                            RegisterBrokerResult result = registerBroker(namesrvAddr,oneway, timeoutMills,requestHeader,body);
+                            RegisterBrokerResult result = registerBroker(namesrvAddr, oneway, timeoutMills, requestHeader, body);
                             if (result != null) {
                                 registerBrokerResultList.add(result);
                             }

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -478,7 +478,7 @@ public void run() {
                             ConsumeReturnType returnType = ConsumeReturnType.SUCCESS;
                             boolean hasException = false;
                             try {
-                                this.processQueue.getLockConsume().lock();
+                                this.processQueue.getConsumeLock().lock();
                                 if (this.processQueue.isDropped()) {
                                     log.warn("consumeMessage, the message queue not be able to consume, because it's dropped. {}",
                                         this.messageQueue);
@@ -494,7 +494,7 @@ public void run() {
                                     messageQueue);
                                 hasException = true;
                             } finally {
-                                this.processQueue.getLockConsume().unlock();
+                                this.processQueue.getConsumeLock().unlock();
                             }
 
                             if (null == status

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalancePushImpl.java
Patch:
@@ -88,11 +88,11 @@ public boolean removeUnnecessaryMessageQueue(MessageQueue mq, ProcessQueue pq) {
         if (this.defaultMQPushConsumerImpl.isConsumeOrderly()
             && MessageModel.CLUSTERING.equals(this.defaultMQPushConsumerImpl.messageModel())) {
             try {
-                if (pq.getLockConsume().tryLock(1000, TimeUnit.MILLISECONDS)) {
+                if (pq.getConsumeLock().tryLock(1000, TimeUnit.MILLISECONDS)) {
                     try {
                         return this.unlockDelay(mq, pq);
                     } finally {
-                        pq.getLockConsume().unlock();
+                        pq.getConsumeLock().unlock();
                     }
                 } else {
                     log.warn("[WRONG]mq is consuming, so can not unlock it, {}. maybe hanged for a while, {}",

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -84,7 +84,7 @@ public class NettyRemotingClient extends NettyRemotingAbstract implements Remoti
     private final AtomicReference<List<String>> namesrvAddrList = new AtomicReference<List<String>>();
     private final AtomicReference<String> namesrvAddrChoosed = new AtomicReference<String>();
     private final AtomicInteger namesrvIndex = new AtomicInteger(initValueIndex());
-    private final Lock lockNamesrvChannel = new ReentrantLock();
+    private final Lock namesrvChannelLock = new ReentrantLock();
 
     private final ExecutorService publicExecutor;
 
@@ -418,7 +418,7 @@ private Channel getAndCreateNameserverChannel() throws RemotingConnectException,
         }
 
         final List<String> addrList = this.namesrvAddrList.get();
-        if (this.lockNamesrvChannel.tryLock(LOCK_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS)) {
+        if (this.namesrvChannelLock.tryLock(LOCK_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS)) {
             try {
                 addr = this.namesrvAddrChoosed.get();
                 if (addr != null) {
@@ -445,7 +445,7 @@ private Channel getAndCreateNameserverChannel() throws RemotingConnectException,
                     throw new RemotingConnectException(addrList.toString());
                 }
             } finally {
-                this.lockNamesrvChannel.unlock();
+                this.namesrvChannelLock.unlock();
             }
         } else {
             log.warn("getAndCreateNameserverChannel: try to lock name server, but timeout, {}ms", LOCK_TIMEOUT_MILLIS);

File: client/src/test/java/org/apache/rocketmq/client/consumer/DefaultLitePullConsumerTest.java
Patch:
@@ -54,6 +54,7 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -71,6 +72,7 @@
 
 @RunWith(PowerMockRunner.class)
 @PrepareForTest(DefaultLitePullConsumerImpl.class)
+@PowerMockIgnore("javax.management.*")
 public class DefaultLitePullConsumerTest {
     @Spy
     private MQClientInstance mQClientFactory = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());

File: client/src/test/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumerTest.java
Patch:
@@ -62,6 +62,7 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -78,6 +79,7 @@
 
 @RunWith(PowerMockRunner.class)
 @PrepareForTest(DefaultMQPushConsumerImpl.class)
+@PowerMockIgnore("javax.management.*")
 public class DefaultMQPushConsumerTest {
     private String consumerGroup;
     private String topic = "FooBar";

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQConsumerWithTraceTest.java
Patch:
@@ -73,6 +73,7 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -88,6 +89,7 @@
 
 @RunWith(PowerMockRunner.class)
 @PrepareForTest(DefaultMQPushConsumerImpl.class)
+@PowerMockIgnore("javax.management.*")
 public class DefaultMQConsumerWithTraceTest {
     private String consumerGroup;
     private String consumerGroupNormal;

File: remoting/src/test/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstractTest.java
Patch:
@@ -27,8 +27,6 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.ArgumentMatchers.notNull;
 import static org.mockito.Mockito.when;
 
 @RunWith(MockitoJUnitRunner.class)
@@ -98,7 +96,7 @@ public void operationComplete(final ResponseFuture responseFuture) {
     public void testScanResponseTable() {
         int dummyId = 1;
         // mock timeout
-        ResponseFuture responseFuture = new ResponseFuture(null,dummyId, -1000, new InvokeCallback() {
+        ResponseFuture responseFuture = new ResponseFuture(null, dummyId, -1000, new InvokeCallback() {
             @Override
             public void operationComplete(final ResponseFuture responseFuture) {
             }

File: remoting/src/test/java/org/apache/rocketmq/remoting/netty/NettyRemotingClientTest.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.rocketmq.remoting.netty;
 
-import java.lang.reflect.Field;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import org.junit.Test;

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -1105,7 +1105,7 @@ public String findBrokerAddrByTopic(final String topic) {
         return null;
     }
 
-    public void resetOffset(String topic, String group, Map<MessageQueue, Long> offsetTable) {
+    public synchronized void resetOffset(String topic, String group, Map<MessageQueue, Long> offsetTable) {
         DefaultMQPushConsumerImpl consumer = null;
         try {
             MQConsumerInner impl = this.consumerTable.get(group);

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -1105,7 +1105,7 @@ public String findBrokerAddrByTopic(final String topic) {
         return null;
     }
 
-    public void resetOffset(String topic, String group, Map<MessageQueue, Long> offsetTable) {
+    public synchronized void resetOffset(String topic, String group, Map<MessageQueue, Long> offsetTable) {
         DefaultMQPushConsumerImpl consumer = null;
         try {
             MQConsumerInner impl = this.consumerTable.get(group);

File: example/src/main/java/org/apache/rocketmq/example/benchmark/Consumer.java
Patch:
@@ -54,7 +54,7 @@ public static void main(String[] args) throws MQClientException, IOException {
         final String topic = commandLine.hasOption('t') ? commandLine.getOptionValue('t').trim() : "BenchmarkTest";
         final int threadCount = commandLine.hasOption('w') ? Integer.parseInt(commandLine.getOptionValue('w')) : 20;
         final String groupPrefix = commandLine.hasOption('g') ? commandLine.getOptionValue('g').trim() : "benchmark_consumer";
-        final String isSuffixEnable = commandLine.hasOption('s') ? commandLine.getOptionValue('s').trim() : "false";
+        final String isSuffixEnable = commandLine.hasOption('p') ? commandLine.getOptionValue('p').trim() : "false";
         final String filterType = commandLine.hasOption('f') ? commandLine.getOptionValue('f').trim() : null;
         final String expression = commandLine.hasOption('e') ? commandLine.getOptionValue('e').trim() : null;
         final double failRate = commandLine.hasOption('r') ? Double.parseDouble(commandLine.getOptionValue('r').trim()) : 0.0;
@@ -190,7 +190,7 @@ public static Options buildCommandlineOptions(final Options options) {
         opt.setRequired(false);
         options.addOption(opt);
 
-        opt = new Option("s", "group suffix enable", true, "Consumer group suffix enable, Default: false");
+        opt = new Option("p", "group suffix enable", true, "Consumer group suffix enable, Default: false");
         opt.setRequired(false);
         options.addOption(opt);
 

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -1030,7 +1030,8 @@ public int cleanUnusedTopic(Set<String> topics) {
             Entry<String, ConcurrentMap<Integer, ConsumeQueue>> next = it.next();
             String topic = next.getKey();
 
-            if (!topics.contains(topic) && !topic.equals(TopicValidator.RMQ_SYS_SCHEDULE_TOPIC)) {
+            if (!topics.contains(topic) && !topic.equals(TopicValidator.RMQ_SYS_SCHEDULE_TOPIC)
+                    && !topic.equals(TopicValidator.RMQ_SYS_TRANS_OP_HALF_TOPIC)) {
                 ConcurrentMap<Integer, ConsumeQueue> queueTable = next.getValue();
                 for (ConsumeQueue cq : queueTable.values()) {
                     cq.destroy();

File: example/src/main/java/org/apache/rocketmq/example/benchmark/Consumer.java
Patch:
@@ -54,7 +54,7 @@ public static void main(String[] args) throws MQClientException, IOException {
         final String topic = commandLine.hasOption('t') ? commandLine.getOptionValue('t').trim() : "BenchmarkTest";
         final int threadCount = commandLine.hasOption('w') ? Integer.parseInt(commandLine.getOptionValue('w')) : 20;
         final String groupPrefix = commandLine.hasOption('g') ? commandLine.getOptionValue('g').trim() : "benchmark_consumer";
-        final String isSuffixEnable = commandLine.hasOption('p') ? commandLine.getOptionValue('p').trim() : "true";
+        final String isSuffixEnable = commandLine.hasOption('s') ? commandLine.getOptionValue('s').trim() : "false";
         final String filterType = commandLine.hasOption('f') ? commandLine.getOptionValue('f').trim() : null;
         final String expression = commandLine.hasOption('e') ? commandLine.getOptionValue('e').trim() : null;
         final double failRate = commandLine.hasOption('r') ? Double.parseDouble(commandLine.getOptionValue('r').trim()) : 0.0;
@@ -190,7 +190,7 @@ public static Options buildCommandlineOptions(final Options options) {
         opt.setRequired(false);
         options.addOption(opt);
 
-        opt = new Option("p", "group prefix enable", true, "Consumer group name, Default: false");
+        opt = new Option("s", "group suffix enable", true, "Consumer group suffix enable, Default: false");
         opt.setRequired(false);
         options.addOption(opt);
 

File: client/src/main/java/org/apache/rocketmq/client/impl/ClientRemotingProcessor.java
Patch:
@@ -282,8 +282,6 @@ private void processReplyMessage(MessageExt replyMsg) {
 
             if (requestResponseFuture.getRequestCallback() != null) {
                 requestResponseFuture.getRequestCallback().onSuccess(replyMsg);
-            } else {
-                requestResponseFuture.putResponseMessage(replyMsg);
             }
         } else {
             String bornHost = replyMsg.getBornHostString();

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/TopicPublishInfo.java
Patch:
@@ -70,9 +70,9 @@ public MessageQueue selectOneMessageQueue(final String lastBrokerName) {
         if (lastBrokerName == null) {
             return selectOneMessageQueue();
         } else {
-            int index = this.sendWhichQueue.getAndIncrement();
             for (int i = 0; i < this.messageQueueList.size(); i++) {
-                int pos = Math.abs(index++) % this.messageQueueList.size();
+                int index = this.sendWhichQueue.getAndIncrement();
+                int pos = Math.abs(index) % this.messageQueueList.size();
                 if (pos < 0)
                     pos = 0;
                 MessageQueue mq = this.messageQueueList.get(pos);

File: logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java
Patch:
@@ -1201,7 +1201,7 @@ public static class DefaultLayout extends Layout {
         public String format(LoggingEvent event) {
 
             StringBuilder sb = new StringBuilder();
-            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss,sss");
+            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss,SSS");
             String format = simpleDateFormat.format(new Date(event.timeStamp));
             sb.append(format);
             sb.append(" ");

File: client/src/main/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueByMachineRoom.java
Patch:
@@ -49,7 +49,7 @@ public List<MessageQueue> allocate(String consumerGroup, String currentCID, List
         int startIndex = mod * currentIndex;
         int endIndex = startIndex + mod;
         for (int i = startIndex; i < endIndex; i++) {
-            result.add(mqAll.get(i));
+            result.add(premqAll.get(i));
         }
         if (rem > currentIndex) {
             result.add(premqAll.get(currentIndex + mod * cidAll.size()));

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -188,7 +188,7 @@ private CompletableFuture<RemotingCommand> asyncConsumerSendMsgBack(ChannelHandl
 
             topicConfig = this.brokerController.getTopicConfigManager().createTopicInSendMessageBackMethod(newTopic,
                     DLQ_NUMS_PER_GROUP,
-                    PermName.PERM_WRITE, 0);
+                    PermName.PERM_WRITE | PermName.PERM_READ, 0);
             if (null == topicConfig) {
                 response.setCode(ResponseCode.SYSTEM_ERROR);
                 response.setRemark("topic[" + newTopic + "] not exist");

File: client/src/main/java/org/apache/rocketmq/client/producer/selector/SelectMessageQueueByHash.java
Patch:
@@ -25,12 +25,10 @@ public class SelectMessageQueueByHash implements MessageQueueSelector {
 
     @Override
     public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {
-        int value = arg.hashCode();
+        int value = arg.hashCode() % mqs.size();
         if (value < 0) {
             value = Math.abs(value);
         }
-
-        value = value % mqs.size();
         return mqs.get(value);
     }
 }

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -1214,6 +1214,9 @@ public ConsumeMessageDirectlyResult consumeMessageDirectly(final MessageExt msg,
 
     public ConsumerRunningInfo consumerRunningInfo(final String consumerGroup) {
         MQConsumerInner mqConsumerInner = this.consumerTable.get(consumerGroup);
+        if (mqConsumerInner == null) {
+            return null;
+        }
 
         ConsumerRunningInfo consumerRunningInfo = mqConsumerInner.consumerRunningInfo();
 

File: common/src/main/java/org/apache/rocketmq/common/message/MessageDecoder.java
Patch:
@@ -42,6 +42,7 @@ public class MessageDecoder {
     public static final char NAME_VALUE_SEPARATOR = 1;
     public static final char PROPERTY_SEPARATOR = 2;
     public static final int PHY_POS_POSITION = 4 + 4 + 4 + 4 + 4 + 8;
+    public static final int QUEUE_OFFSET_POSITION = 4 + 4 + 4 + 4 + 4;
     public static final int SYSFLAG_POSITION = 4 + 4 + 4 + 4 + 4 + 8 + 8;
 //    public static final int BODY_SIZE_POSITION = 4 // 1 TOTALSIZE
 //        + 4 // 2 MAGICCODE

File: example/src/main/java/org/apache/rocketmq/example/benchmark/Producer.java
Patch:
@@ -89,8 +89,8 @@ private void printStats() {
                     final long sendTps = (long) (((end[3] - begin[3]) / (double) (end[0] - begin[0])) * 1000L);
                     final double averageRT = (end[5] - begin[5]) / (double) (end[3] - begin[3]);
 
-                    System.out.printf("Send TPS: %d Max RT: %d Average RT: %7.3f Send Failed: %d Response Failed: %d%n",
-                        sendTps, statsBenchmark.getSendMessageMaxRT().get(), averageRT, end[2], end[4]);
+                    System.out.printf("Current Time: %s Send TPS: %d Max RT(ms): %d Average RT(ms): %7.3f Send Failed: %d Response Failed: %d%n",
+                        System.currentTimeMillis(), sendTps, statsBenchmark.getSendMessageMaxRT().get(), averageRT, end[2], end[4]);
                 }
             }
 

File: example/src/main/java/org/apache/rocketmq/example/benchmark/TransactionProducer.java
Patch:
@@ -105,8 +105,8 @@ private void printStats() {
                     final long dupCheck = end.duplicatedCheck - begin.duplicatedCheck;
 
                     System.out.printf(
-                        "Send TPS:%5d Max RT:%5d AVG RT:%3.1f Send Failed: %d check: %d unexpectedCheck: %d duplicatedCheck: %d %n",
-                            sendTps, statsBenchmark.getSendMessageMaxRT().get(), averageRT, failCount, checkCount,
+                        "Current Time: %s Send TPS:%5d Max RT(ms):%5d AVG RT(ms):%3.1f Send Failed: %d check: %d unexpectedCheck: %d duplicatedCheck: %d %n",
+                            System.currentTimeMillis(), sendTps, statsBenchmark.getSendMessageMaxRT().get(), averageRT, failCount, checkCount,
                             unexpectedCheck, dupCheck);
                     statsBenchmark.getSendMessageMaxRT().set(0);
                 }

File: store/src/main/java/org/apache/rocketmq/store/MappedFile.java
Patch:
@@ -321,7 +321,7 @@ protected void commit0(final int commitLeastPages) {
         int writePos = this.wrotePosition.get();
         int lastCommittedPosition = this.committedPosition.get();
 
-        if (writePos - this.committedPosition.get() > 0) {
+        if (writePos - lastCommittedPosition > commitLeastPages) {
             try {
                 ByteBuffer byteBuffer = writeBuffer.slice();
                 byteBuffer.position(lastCommittedPosition);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -480,7 +480,8 @@ private RemotingCommand handlePutMessageResult(PutMessageResult putMessageResult
             case SERVICE_NOT_AVAILABLE:
                 response.setCode(ResponseCode.SERVICE_NOT_AVAILABLE);
                 response.setRemark(
-                    "service not available now, maybe disk full, " + diskUtil() + ", maybe your broker machine memory too small.");
+                    "service not available now. It may be caused by one of the following reasons: " +
+                        "the broker's disk is full [" + diskUtil() + "], messages are put to the slave, message store has been shut down, etc.");
                 break;
             case OS_PAGECACHE_BUSY:
                 response.setCode(ResponseCode.SYSTEM_ERROR);

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -392,15 +392,16 @@ private PutMessageStatus checkStoreStatus() {
         if (BrokerRole.SLAVE == this.messageStoreConfig.getBrokerRole()) {
             long value = this.printTimes.getAndIncrement();
             if ((value % 50000) == 0) {
-                log.warn("message store has shutdown, so putMessage is forbidden");
+                log.warn("broke role is slave, so putMessage is forbidden");
             }
             return PutMessageStatus.SERVICE_NOT_AVAILABLE;
         }
 
         if (!this.runningFlags.isWriteable()) {
             long value = this.printTimes.getAndIncrement();
             if ((value % 50000) == 0) {
-                log.warn("message store has shutdown, so putMessage is forbidden");
+                log.warn("the message store is not writable. It may be caused by one of the following reasons: " +
+                    "the broker's disk is full, write to logic queue error, write to index file error, etc");
             }
             return PutMessageStatus.SERVICE_NOT_AVAILABLE;
         } else {

File: broker/src/main/java/org/apache/rocketmq/broker/out/BrokerOuterAPI.java
Patch:
@@ -19,7 +19,6 @@
 import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Vector;
 import java.util.concurrent.ArrayBlockingQueue;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.CountDownLatch;
@@ -123,7 +122,7 @@ public List<RegisterBrokerResult> registerBrokerAll(
         final int timeoutMills,
         final boolean compressed) {
 
-        final List<RegisterBrokerResult> registerBrokerResultList = new Vector<>();
+        final List<RegisterBrokerResult> registerBrokerResultList = new CopyOnWriteArrayList<>();
         List<String> nameServerAddressList = this.remotingClient.getNameServerAddressList();
         if (nameServerAddressList != null && nameServerAddressList.size() > 0) {
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -59,6 +59,7 @@
 import org.apache.rocketmq.tools.command.message.QueryMsgByKeySubCommand;
 import org.apache.rocketmq.tools.command.message.QueryMsgByOffsetSubCommand;
 import org.apache.rocketmq.tools.command.message.QueryMsgByUniqueKeySubCommand;
+import org.apache.rocketmq.tools.command.message.QueryMsgTraceByIdSubCommand;
 import org.apache.rocketmq.tools.command.message.SendMessageCommand;
 import org.apache.rocketmq.tools.command.namesrv.DeleteKvConfigCommand;
 import org.apache.rocketmq.tools.command.namesrv.GetNamesrvConfigCommand;
@@ -164,6 +165,7 @@ public static void initCommand() {
         initCommand(new QueryMsgByKeySubCommand());
         initCommand(new QueryMsgByUniqueKeySubCommand());
         initCommand(new QueryMsgByOffsetSubCommand());
+        initCommand(new QueryMsgTraceByIdSubCommand());
 
         initCommand(new PrintMessageSubCommand());
         initCommand(new PrintMessageByQueueCommand());

File: client/src/main/java/org/apache/rocketmq/client/trace/hook/ConsumeMessageTraceHookImpl.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.rocketmq.client.consumer.listener.ConsumeReturnType;
 import org.apache.rocketmq.client.hook.ConsumeMessageContext;
 import org.apache.rocketmq.client.hook.ConsumeMessageHook;
+import org.apache.rocketmq.client.trace.AsyncTraceDispatcher;
 import org.apache.rocketmq.client.trace.TraceContext;
 import org.apache.rocketmq.client.trace.TraceDispatcher;
 import org.apache.rocketmq.client.trace.TraceBean;
@@ -73,6 +74,7 @@ public void consumeMessageBefore(ConsumeMessageContext context) {
             traceBean.setStoreTime(msg.getStoreTimestamp());//
             traceBean.setBodyLength(msg.getStoreSize());//
             traceBean.setRetryTimes(msg.getReconsumeTimes());//
+            traceBean.setClientHost(((AsyncTraceDispatcher)localDispatcher).getHostConsumer().getmQClientFactory().getClientId());
             traceContext.setRegionId(regionId);//
             beans.add(traceBean);
         }

File: client/src/main/java/org/apache/rocketmq/client/trace/hook/SendMessageTraceHookImpl.java
Patch:
@@ -60,6 +60,7 @@ public void sendMessageBefore(SendMessageContext context) {
         traceBean.setStoreHost(context.getBrokerAddr());
         traceBean.setBodyLength(context.getMessage().getBody().length);
         traceBean.setMsgType(context.getMsgType());
+        traceBean.setClientHost(((AsyncTraceDispatcher)localDispatcher).getHostProducer().getmQClientFactory().getClientId());
         tuxeContext.getTraceBeans().add(traceBean);
     }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -280,7 +280,7 @@ public boolean processConsumeResult(
                 case SUSPEND_CURRENT_QUEUE_A_MOMENT:
                     this.getConsumerStatsManager().incConsumeFailedTPS(consumerGroup, consumeRequest.getMessageQueue().getTopic(), msgs.size());
                     if (checkReconsumeTimes(msgs)) {
-                        consumeRequest.getProcessQueue().makeMessageToCosumeAgain(msgs);
+                        consumeRequest.getProcessQueue().makeMessageToConsumeAgain(msgs);
                         this.submitConsumeRequestLater(
                             consumeRequest.getProcessQueue(),
                             consumeRequest.getMessageQueue(),
@@ -312,7 +312,7 @@ public boolean processConsumeResult(
                 case SUSPEND_CURRENT_QUEUE_A_MOMENT:
                     this.getConsumerStatsManager().incConsumeFailedTPS(consumerGroup, consumeRequest.getMessageQueue().getTopic(), msgs.size());
                     if (checkReconsumeTimes(msgs)) {
-                        consumeRequest.getProcessQueue().makeMessageToCosumeAgain(msgs);
+                        consumeRequest.getProcessQueue().makeMessageToConsumeAgain(msgs);
                         this.submitConsumeRequestLater(
                             consumeRequest.getProcessQueue(),
                             consumeRequest.getMessageQueue(),

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ProcessQueue.java
Patch:
@@ -280,7 +280,7 @@ public long commit() {
         return -1;
     }
 
-    public void makeMessageToCosumeAgain(List<MessageExt> msgs) {
+    public void makeMessageToConsumeAgain(List<MessageExt> msgs) {
         try {
             this.lockTreeMap.writeLock().lockInterruptibly();
             try {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/PullAPIWrapper.java
Patch:
@@ -194,7 +194,7 @@ public PullResult pullKernelImpl(
 
             String brokerAddr = findBrokerResult.getBrokerAddr();
             if (PullSysFlag.hasClassFilterFlag(sysFlagInner)) {
-                brokerAddr = computPullFromWhichFilterServer(mq.getTopic(), brokerAddr);
+                brokerAddr = computePullFromWhichFilterServer(mq.getTopic(), brokerAddr);
             }
 
             PullResult pullResult = this.mQClientFactory.getMQClientAPIImpl().pullMessage(
@@ -223,7 +223,7 @@ public long recalculatePullFromWhichNode(final MessageQueue mq) {
         return MixAll.MASTER_ID;
     }
 
-    private String computPullFromWhichFilterServer(final String topic, final String brokerAddr)
+    private String computePullFromWhichFilterServer(final String topic, final String brokerAddr)
         throws MQClientException {
         ConcurrentMap<String, TopicRouteData> topicRouteTable = this.mQClientFactory.getTopicRouteTable();
         if (topicRouteTable != null) {

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/AbstractTransactionalMessageCheckListener.java
Patch:
@@ -69,7 +69,7 @@ public void sendCheckMessage(MessageExt msgExt) throws Exception {
         msgExt.setQueueId(Integer.parseInt(msgExt.getUserProperty(MessageConst.PROPERTY_REAL_QUEUE_ID)));
         msgExt.setStoreSize(0);
         String groupId = msgExt.getProperty(MessageConst.PROPERTY_PRODUCER_GROUP);
-        Channel channel = brokerController.getProducerManager().getAvaliableChannel(groupId);
+        Channel channel = brokerController.getProducerManager().getAvailableChannel(groupId);
         if (channel != null) {
             brokerController.getBroker2Client().checkProducerTransactionState(groupId, channel, checkTransactionStateRequestHeader, msgExt);
         } else {

File: client/src/test/java/org/apache/rocketmq/client/consumer/store/RemoteBrokerOffsetStoreTest.java
Patch:
@@ -84,7 +84,7 @@ public void testReadOffset_WithException() throws Exception {
 
         offsetStore.updateOffset(messageQueue, 1024, false);
 
-        doThrow(new MQBrokerException(-1, ""))
+        doThrow(new MQBrokerException(-1, "", null))
             .when(mqClientAPI).queryConsumerOffset(anyString(), any(QueryConsumerOffsetRequestHeader.class), anyLong());
         assertThat(offsetStore.readOffset(messageQueue, ReadOffsetType.READ_FROM_STORE)).isEqualTo(-1);
 

File: broker/src/main/java/org/apache/rocketmq/broker/out/BrokerOuterAPI.java
Patch:
@@ -16,10 +16,10 @@
  */
 package org.apache.rocketmq.broker.out;
 
-import com.google.common.collect.Lists;
 import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Vector;
 import java.util.concurrent.ArrayBlockingQueue;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.CountDownLatch;
@@ -123,7 +123,7 @@ public List<RegisterBrokerResult> registerBrokerAll(
         final int timeoutMills,
         final boolean compressed) {
 
-        final List<RegisterBrokerResult> registerBrokerResultList = Lists.newArrayList();
+        final List<RegisterBrokerResult> registerBrokerResultList = new Vector<>();
         List<String> nameServerAddressList = this.remotingClient.getNameServerAddressList();
         if (nameServerAddressList != null && nameServerAddressList.size() > 0) {
 

File: client/src/test/java/org/apache/rocketmq/client/consumer/store/RemoteBrokerOffsetStoreTest.java
Patch:
@@ -84,7 +84,7 @@ public void testReadOffset_WithException() throws Exception {
 
         offsetStore.updateOffset(messageQueue, 1024, false);
 
-        doThrow(new MQBrokerException(-1, ""))
+        doThrow(new MQBrokerException(-1, "", null))
             .when(mqClientAPI).queryConsumerOffset(anyString(), any(QueryConsumerOffsetRequestHeader.class), anyLong());
         assertThat(offsetStore.readOffset(messageQueue, ReadOffsetType.READ_FROM_STORE)).isEqualTo(-1);
 

File: store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java
Patch:
@@ -84,6 +84,9 @@ public DLedgerCommitLog(final DefaultMessageStore defaultMessageStore) {
         dLedgerConfig.setMappedFileSizeForEntryData(defaultMessageStore.getMessageStoreConfig().getMappedFileSizeCommitLog());
         dLedgerConfig.setDeleteWhen(defaultMessageStore.getMessageStoreConfig().getDeleteWhen());
         dLedgerConfig.setFileReservedHours(defaultMessageStore.getMessageStoreConfig().getFileReservedTime() + 1);
+        dLedgerConfig.setPreferredLeaderId(defaultMessageStore.getMessageStoreConfig().getPreferredLeaderId());
+        dLedgerConfig.setEnableBatchPush(defaultMessageStore.getMessageStoreConfig().isEnableBatchPush());
+
         id = Integer.valueOf(dLedgerConfig.getSelfId().substring(1)) + 1;
         dLedgerServer = new DLedgerServer(dLedgerConfig);
         dLedgerFileStore = (DLedgerMmapFileStore) dLedgerServer.getdLedgerStore();

File: store/src/test/java/org/apache/rocketmq/store/dledger/MessageStoreTestBase.java
Patch:
@@ -63,9 +63,9 @@ protected DefaultMessageStore createDledgerMessageStore(String base, String grou
         if (leaderId != null) {
             dLegerServer.getdLedgerConfig().setEnableLeaderElector(false);
             if (selfId.equals(leaderId)) {
-                dLegerServer.getMemberState().changeToLeader(-1);
+                dLegerServer.getMemberState().changeToLeader(0);
             } else {
-                dLegerServer.getMemberState().changeToFollower(-1, leaderId);
+                dLegerServer.getMemberState().changeToFollower(0, leaderId);
             }
 
         }

File: acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java
Patch:
@@ -94,7 +94,7 @@ public static void IPv6AddressCheck(String netaddress) {
         }
     }
 
-    public static String v6ipProcess(String netaddress, String[] strArray, int index) {
+    public static String v6ipProcess(String netaddress) {
         int part;
         String subAddress;
         boolean isAsterisk = isAsterisk(netaddress);

File: acl/src/main/java/org/apache/rocketmq/acl/plain/RemoteAddressStrategyFactory.java
Patch:
@@ -153,7 +153,7 @@ public RangeRemoteAddressStrategy(String remoteAddr) {
                 for (int i = 1; i < strArray.length; i++) {
                     if (ipv6Analysis(strArray, i)) {
                         AclUtils.verify(remoteAddr, index - 1);
-                        String preAddress = AclUtils.v6ipProcess(remoteAddr, strArray, index);
+                        String preAddress = AclUtils.v6ipProcess(remoteAddr);
                         this.index = StringUtils.split(preAddress, ":").length;
                         this.head = preAddress;
                         break;

File: acl/src/main/java/org/apache/rocketmq/acl/common/Permission.java
Patch:
@@ -65,7 +65,6 @@ public static byte parsePermFromString(String permString) {
             case "SUB":
                 return Permission.SUB;
             case "PUB|SUB":
-                return Permission.PUB | Permission.SUB;
             case "SUB|PUB":
                 return Permission.PUB | Permission.SUB;
             case "DENY":

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -1115,7 +1115,7 @@ private SendResult sendSelectImpl(
 
                 mq = mQClientFactory.getClientConfig().queueWithNamespace(selector.select(messageQueueList, userMessage, arg));
             } catch (Throwable e) {
-                throw new MQClientException("select message queue throwed exception.", e);
+                throw new MQClientException("select message queue threw exception.", e);
             }
 
             long costTime = System.currentTimeMillis() - beginStartTime;

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/GetBrokerConfigCommand.java
Patch:
@@ -48,11 +48,11 @@ public String commandDesc() {
 
     @Override
     public Options buildCommandlineOptions(final Options options) {
-        Option opt = new Option("b", "brokerAddr", true, "update which broker");
+        Option opt = new Option("b", "brokerAddr", true, "get which broker");
         opt.setRequired(false);
         options.addOption(opt);
 
-        opt = new Option("c", "clusterName", true, "update which cluster");
+        opt = new Option("c", "clusterName", true, "get which cluster");
         opt.setRequired(false);
         options.addOption(opt);
 

File: acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java
Patch:
@@ -120,7 +120,7 @@ public static void verify(String netaddress, int index) {
         }
     }
 
-    public static String[] getAddreeStrArray(String netaddress, String partialAddress) {
+    public static String[] getAddresses(String netaddress, String partialAddress) {
         String[] parAddStrArray = StringUtils.split(partialAddress.substring(1, partialAddress.length() - 1), ",");
         String address = netaddress.substring(0, netaddress.indexOf("{"));
         String[] addreeStrArray = new String[parAddStrArray.length];

File: acl/src/main/java/org/apache/rocketmq/acl/plain/RemoteAddressStrategyFactory.java
Patch:
@@ -52,14 +52,14 @@ public RemoteAddressStrategy getRemoteAddressStrategy(String remoteAddr) {
                 if (!last.startsWith("{")) {
                     throw new AclException(String.format("MultipleRemoteAddressStrategy netaddress examine scope Exception netaddress", remoteAddr));
                 }
-                return new MultipleRemoteAddressStrategy(AclUtils.getAddreeStrArray(remoteAddr, last));
+                return new MultipleRemoteAddressStrategy(AclUtils.getAddresses(remoteAddr, last));
             } else {
                 String[] strArray = StringUtils.split(remoteAddr, ".");
                 String four = strArray[3];
                 if (!four.startsWith("{")) {
                     throw new AclException(String.format("MultipleRemoteAddressStrategy netaddress examine scope Exception netaddress", remoteAddr));
                 }
-                return new MultipleRemoteAddressStrategy(AclUtils.getAddreeStrArray(remoteAddr, four));
+                return new MultipleRemoteAddressStrategy(AclUtils.getAddresses(remoteAddr, four));
             }
         } else if (AclUtils.isComma(remoteAddr)) {
             return new MultipleRemoteAddressStrategy(StringUtils.split(remoteAddr, ","));

File: acl/src/test/java/org/apache/rocketmq/acl/common/AclUtilsTest.java
Patch:
@@ -32,9 +32,9 @@
 public class AclUtilsTest {
 
     @Test
-    public void getAddreeStrArray() {
+    public void getAddresses() {
         String address = "1.1.1.{1,2,3,4}";
-        String[] addressArray = AclUtils.getAddreeStrArray(address, "{1,2,3,4}");
+        String[] addressArray = AclUtils.getAddresses(address, "{1,2,3,4}");
         List<String> newAddressList = new ArrayList<>();
         for (String a : addressArray) {
             newAddressList.add(a);
@@ -49,7 +49,7 @@ public void getAddreeStrArray() {
 
 //        IPv6 test
         String ipv6Address = "1:ac41:9987::bb22:666:{1,2,3,4}";
-        String[] ipv6AddressArray = AclUtils.getAddreeStrArray(ipv6Address, "{1,2,3,4}");
+        String[] ipv6AddressArray = AclUtils.getAddresses(ipv6Address, "{1,2,3,4}");
         List<String> newIPv6AddressList = new ArrayList<>();
         for (String a : ipv6AddressArray) {
             newIPv6AddressList.add(a);

File: broker/src/test/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessorTest.java
Patch:
@@ -90,7 +90,6 @@ public void init() {
                 TopicValidator.RMQ_SYS_OFFSET_MOVED_EVENT,
                 TopicValidator.AUTO_CREATE_TOPIC_KEY_TOPIC,
                 this.brokerController.getBrokerConfig().getBrokerClusterName(),
-                this.brokerController.getBrokerConfig().getBrokerName(),
                 this.brokerController.getBrokerConfig().getBrokerClusterName() + "_" + MixAll.REPLY_TOPIC_POSTFIX);
         if (this.brokerController.getBrokerConfig().isTraceTopicEnable()) {
             systemTopicSet.add(this.brokerController.getBrokerConfig().getMsgTraceTopicName());

File: client/src/main/java/org/apache/rocketmq/client/stat/ConsumerStatsManager.java
Patch:
@@ -62,15 +62,15 @@ public void shutdown() {
     }
 
     public void incPullRT(final String group, final String topic, final long rt) {
-        this.topicAndGroupPullRT.addValue(topic + "@" + group, (int) rt, 1);
+        this.topicAndGroupPullRT.addRTValue(topic + "@" + group, (int) rt, 1);
     }
 
     public void incPullTPS(final String group, final String topic, final long msgs) {
         this.topicAndGroupPullTPS.addValue(topic + "@" + group, (int) msgs, 1);
     }
 
     public void incConsumeRT(final String group, final String topic, final long rt) {
-        this.topicAndGroupConsumeRT.addValue(topic + "@" + group, (int) rt, 1);
+        this.topicAndGroupConsumeRT.addRTValue(topic + "@" + group, (int) rt, 1);
     }
 
     public void incConsumeOKTPS(final String group, final String topic, final long msgs) {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java
Patch:
@@ -45,6 +45,7 @@
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.protocol.body.CMResult;
 import org.apache.rocketmq.common.protocol.body.ConsumeMessageDirectlyResult;
+import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 
@@ -92,9 +93,9 @@ public void run() {
         }, this.defaultMQPushConsumer.getConsumeTimeout(), this.defaultMQPushConsumer.getConsumeTimeout(), TimeUnit.MINUTES);
     }
 
-    public void shutdown() {
+    public void shutdown(long awaitTerminateMillis) {
         this.scheduledExecutorService.shutdown();
-        this.consumeExecutor.shutdown();
+        ThreadUtils.shutdownGracefully(this.consumeExecutor, awaitTerminateMillis, TimeUnit.MILLISECONDS);
         this.cleanExpireMsgExecutors.shutdown();
     }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -40,6 +40,7 @@
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.protocol.NamespaceUtil;
+import org.apache.rocketmq.common.utils.ThreadUtils;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.common.message.MessageAccessor;
@@ -96,10 +97,10 @@ public void run() {
         }
     }
 
-    public void shutdown() {
+    public void shutdown(long awaitTerminateMillis) {
         this.stopped = true;
         this.scheduledExecutorService.shutdown();
-        this.consumeExecutor.shutdown();
+        ThreadUtils.shutdownGracefully(this.consumeExecutor, awaitTerminateMillis, TimeUnit.MILLISECONDS);
         if (MessageModel.CLUSTERING.equals(this.defaultMQPushConsumerImpl.messageModel())) {
             this.unlockAllMQ();
         }

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageService.java
Patch:
@@ -24,7 +24,7 @@
 public interface ConsumeMessageService {
     void start();
 
-    void shutdown();
+    void shutdown(long awaitTerminateMillis);
 
     void updateCorePoolSize(int corePoolSize);
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PullMessageProcessor.java
Patch:
@@ -52,6 +52,7 @@
 import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.sysflag.PullSysFlag;
+import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
@@ -523,7 +524,7 @@ private byte[] readGetMessageResult(final GetMessageResult getMessageResult, fin
     private void generateOffsetMovedEvent(final OffsetMovedEvent event) {
         try {
             MessageExtBrokerInner msgInner = new MessageExtBrokerInner();
-            msgInner.setTopic(MixAll.OFFSET_MOVED_EVENT);
+            msgInner.setTopic(TopicValidator.RMQ_SYS_OFFSET_MOVED_EVENT);
             msgInner.setTags(event.getConsumerGroup());
             msgInner.setDelayTimeLevel(0);
             msgInner.setKeys(event.getConsumerGroup());

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageServiceImpl.java
Patch:
@@ -21,13 +21,13 @@
 import org.apache.rocketmq.broker.transaction.TransactionalMessageService;
 import org.apache.rocketmq.client.consumer.PullResult;
 import org.apache.rocketmq.client.consumer.PullStatus;
-import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.protocol.ResponseCode;
 import org.apache.rocketmq.common.protocol.header.EndTransactionRequestHeader;
+import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.store.MessageExtBrokerInner;
@@ -127,7 +127,7 @@ private boolean putBackHalfMsgQueue(MessageExt msgExt, long offset) {
     public void check(long transactionTimeout, int transactionCheckMax,
         AbstractTransactionalMessageCheckListener listener) {
         try {
-            String topic = MixAll.RMQ_SYS_TRANS_HALF_TOPIC;
+            String topic = TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC;
             Set<MessageQueue> msgQueues = transactionalMessageBridge.fetchMessageQueues(topic);
             if (msgQueues == null || msgQueues.size() == 0) {
                 log.warn("The queue of topic is empty :" + topic);

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageUtil.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.rocketmq.broker.transaction.queue;
 
 import org.apache.rocketmq.common.MixAll;
+import org.apache.rocketmq.common.topic.TopicValidator;
 
 import java.nio.charset.Charset;
 
@@ -25,11 +26,11 @@ public class TransactionalMessageUtil {
     public static Charset charset = Charset.forName("utf-8");
 
     public static String buildOpTopic() {
-        return MixAll.RMQ_SYS_TRANS_OP_HALF_TOPIC;
+        return TopicValidator.RMQ_SYS_TRANS_OP_HALF_TOPIC;
     }
 
     public static String buildHalfTopic() {
-        return MixAll.RMQ_SYS_TRANS_HALF_TOPIC;
+        return TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC;
     }
 
     public static String buildConsumerGroup() {

File: broker/src/test/java/org/apache/rocketmq/broker/processor/ReplyMessageProcessorTest.java
Patch:
@@ -25,15 +25,14 @@
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.client.ClientChannelInfo;
 import org.apache.rocketmq.broker.client.net.Broker2Client;
-import org.apache.rocketmq.broker.transaction.TransactionalMessageService;
 import org.apache.rocketmq.common.BrokerConfig;
-import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.protocol.RequestCode;
 import org.apache.rocketmq.common.protocol.ResponseCode;
 import org.apache.rocketmq.common.protocol.header.SendMessageRequestHeader;
 import org.apache.rocketmq.common.protocol.header.SendMessageResponseHeader;
+import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
 import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
@@ -115,7 +114,7 @@ private SendMessageRequestHeader createSendMessageRequestHeader() {
         SendMessageRequestHeader requestHeader = new SendMessageRequestHeader();
         requestHeader.setProducerGroup(group);
         requestHeader.setTopic(topic);
-        requestHeader.setDefaultTopic(MixAll.AUTO_CREATE_TOPIC_KEY_TOPIC);
+        requestHeader.setDefaultTopic(TopicValidator.AUTO_CREATE_TOPIC_KEY_TOPIC);
         requestHeader.setDefaultTopicQueueNums(3);
         requestHeader.setQueueId(1);
         requestHeader.setSysFlag(0);

File: broker/src/test/java/org/apache/rocketmq/broker/processor/SendMessageProcessorTest.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.rocketmq.broker.mqtrace.SendMessageHook;
 import org.apache.rocketmq.broker.transaction.TransactionalMessageService;
 import org.apache.rocketmq.common.BrokerConfig;
-import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
@@ -32,6 +31,7 @@
 import org.apache.rocketmq.common.protocol.header.ConsumerSendMsgBackRequestHeader;
 import org.apache.rocketmq.common.protocol.header.SendMessageRequestHeader;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
+import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyClientConfig;
 import org.apache.rocketmq.remoting.netty.NettyServerConfig;
@@ -238,7 +238,7 @@ private SendMessageRequestHeader createSendMsgRequestHeader() {
         SendMessageRequestHeader requestHeader = new SendMessageRequestHeader();
         requestHeader.setProducerGroup(group);
         requestHeader.setTopic(topic);
-        requestHeader.setDefaultTopic(MixAll.AUTO_CREATE_TOPIC_KEY_TOPIC);
+        requestHeader.setDefaultTopic(TopicValidator.AUTO_CREATE_TOPIC_KEY_TOPIC);
         requestHeader.setDefaultTopicQueueNums(3);
         requestHeader.setQueueId(1);
         requestHeader.setSysFlag(0);

File: broker/src/test/java/org/apache/rocketmq/broker/transaction/queue/DefaultTransactionalMessageCheckListenerTest.java
Patch:
@@ -19,10 +19,10 @@
 import java.net.InetSocketAddress;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.BrokerConfig;
-import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.message.MessageAccessor;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
+import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.remoting.netty.NettyClientConfig;
 import org.apache.rocketmq.remoting.netty.NettyServerConfig;
 import org.apache.rocketmq.store.MessageExtBrokerInner;
@@ -92,7 +92,7 @@ private MessageExtBrokerInner createMessageExt() {
     @Test
     public void testResolveDiscardMsg() {
         MessageExt messageExt = new MessageExt();
-        messageExt.setTopic(MixAll.RMQ_SYS_TRANS_HALF_TOPIC);
+        messageExt.setTopic(TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC);
         messageExt.setQueueId(0);
         messageExt.setBody("test resolve discard msg".getBytes());
         messageExt.setStoreHost(new InetSocketAddress("127.0.0.1", 10911));

File: broker/src/test/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageBridgeTest.java
Patch:
@@ -20,11 +20,11 @@
 import org.apache.rocketmq.client.consumer.PullResult;
 import org.apache.rocketmq.client.consumer.PullStatus;
 import org.apache.rocketmq.common.BrokerConfig;
-import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.message.MessageAccessor;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
+import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.remoting.netty.NettyClientConfig;
 import org.apache.rocketmq.remoting.netty.NettyServerConfig;
 import org.apache.rocketmq.store.AppendMessageResult;
@@ -98,7 +98,7 @@ public void testAsyncPutHalfMessage() throws Exception {
 
     @Test
     public void testFetchMessageQueues() {
-        Set<MessageQueue> messageQueues = transactionBridge.fetchMessageQueues(MixAll.RMQ_SYS_TRANS_HALF_TOPIC);
+        Set<MessageQueue> messageQueues = transactionBridge.fetchMessageQueues(TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC);
         assertThat(messageQueues.size()).isEqualTo(1);
     }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/MQAdminImpl.java
Patch:
@@ -82,6 +82,7 @@ public void createTopic(String key, String newTopic, int queueNum) throws MQClie
     public void createTopic(String key, String newTopic, int queueNum, int topicSysFlag) throws MQClientException {
         try {
             Validators.checkTopic(newTopic);
+            Validators.isSystemTopic(newTopic);
             TopicRouteData topicRouteData = this.mQClientFactory.getMQClientAPIImpl().getTopicRouteInfoFromNameServer(key, timeoutMillis);
             List<BrokerData> brokerDataList = topicRouteData.getBrokerDatas();
             if (brokerDataList != null && !brokerDataList.isEmpty()) {

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -1364,7 +1364,7 @@ public TopicRouteData getTopicRouteInfoFromNameServer(final String topic, final
         assert response != null;
         switch (response.getCode()) {
             case ResponseCode.TOPIC_NOT_EXIST: {
-                if (allowTopicNotExist && !topic.equals(MixAll.AUTO_CREATE_TOPIC_KEY_TOPIC)) {
+                if (allowTopicNotExist) {
                     log.warn("get Topic [{}] RouteInfoFromNameServer is not exist value", topic);
                 }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -671,7 +671,7 @@ public boolean updateTopicRouteInfoFromNameServer(final String topic, boolean is
                         log.warn("updateTopicRouteInfoFromNameServer, getTopicRouteInfoFromNameServer return null, Topic: {}", topic);
                     }
                 } catch (MQClientException e) {
-                    if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX) && !topic.equals(MixAll.AUTO_CREATE_TOPIC_KEY_TOPIC)) {
+                    if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
                         log.warn("updateTopicRouteInfoFromNameServer Exception", e);
                     }
                 } catch (RemotingException e) {

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -421,6 +421,7 @@ public void createTopic(String key, String newTopic, int queueNum) throws MQClie
     public void createTopic(String key, String newTopic, int queueNum, int topicSysFlag) throws MQClientException {
         this.makeSureStateOK();
         Validators.checkTopic(newTopic);
+        Validators.isSystemTopic(newTopic);
 
         this.mQClientFactory.getMQAdminImpl().createTopic(key, newTopic, queueNum, topicSysFlag);
     }

File: client/src/main/java/org/apache/rocketmq/client/producer/DefaultMQProducer.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageId;
 import org.apache.rocketmq.common.message.MessageQueue;
+import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingException;
@@ -74,7 +75,7 @@ public class DefaultMQProducer extends ClientConfig implements MQProducer {
     /**
      * Just for testing or demo program
      */
-    private String createTopicKey = MixAll.AUTO_CREATE_TOPIC_KEY_TOPIC;
+    private String createTopicKey = TopicValidator.AUTO_CREATE_TOPIC_KEY_TOPIC;
 
     /**
      * Number of queues to create per default topic.

File: client/src/main/java/org/apache/rocketmq/client/trace/AsyncTraceDispatcher.java
Patch:
@@ -41,11 +41,11 @@
 import org.apache.rocketmq.client.producer.MessageQueueSelector;
 import org.apache.rocketmq.client.producer.SendCallback;
 import org.apache.rocketmq.client.producer.SendResult;
-import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.common.message.MessageQueue;
+import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 
@@ -90,7 +90,7 @@ public AsyncTraceDispatcher(String group, Type type,String traceTopicName, RPCHo
         if (!UtilAll.isBlank(traceTopicName)) {
             this.traceTopicName = traceTopicName;
         } else {
-            this.traceTopicName = MixAll.RMQ_SYS_TRACE_TOPIC;
+            this.traceTopicName = TopicValidator.RMQ_SYS_TRACE_TOPIC;
         }
         this.traceExecutor = new ThreadPoolExecutor(//
             10, //

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceConstants.java
Patch:
@@ -16,13 +16,13 @@
  */
 package org.apache.rocketmq.client.trace;
 
-import org.apache.rocketmq.common.MixAll;
+import org.apache.rocketmq.common.topic.TopicValidator;
 
 public class TraceConstants {
 
     public static final String GROUP_NAME_PREFIX = "_INNER_TRACE_PRODUCER";
     public static final char CONTENT_SPLITOR = (char) 1;
     public static final char FIELD_SPLITOR = (char) 2;
     public static final String TRACE_INSTANCE_NAME = "PID_CLIENT_INNER_TRACE_PRODUCER";
-    public static final String TRACE_TOPIC_PREFIX = MixAll.SYSTEM_TOPIC_PREFIX + "TRACE_DATA_";
+    public static final String TRACE_TOPIC_PREFIX = TopicValidator.SYSTEM_TOPIC_PREFIX + "TRACE_DATA_";
 }

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQConsumerWithTraceTest.java
Patch:
@@ -63,6 +63,7 @@
 import org.apache.rocketmq.common.protocol.route.BrokerData;
 import org.apache.rocketmq.common.protocol.route.QueueData;
 import org.apache.rocketmq.common.protocol.route.TopicRouteData;
+import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.junit.After;
 import org.junit.Before;
@@ -90,7 +91,7 @@
 public class DefaultMQConsumerWithTraceTest {
     private String consumerGroup;
     private String consumerGroupNormal;
-    private String producerGroupTraceTemp = MixAll.RMQ_SYS_TRACE_TOPIC + System.currentTimeMillis();
+    private String producerGroupTraceTemp = TopicValidator.RMQ_SYS_TRACE_TOPIC + System.currentTimeMillis();
 
     private String topic = "FooBar";
     private String brokerName = "BrokerA";

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQProducerWithTraceTest.java
Patch:
@@ -31,12 +31,12 @@
 import org.apache.rocketmq.client.producer.SendCallback;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.client.producer.SendStatus;
-import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.common.protocol.header.SendMessageRequestHeader;
 import org.apache.rocketmq.common.protocol.route.BrokerData;
 import org.apache.rocketmq.common.protocol.route.QueueData;
 import org.apache.rocketmq.common.protocol.route.TopicRouteData;
+import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.junit.After;
 import org.junit.Before;
@@ -75,7 +75,7 @@ public class DefaultMQProducerWithTraceTest {
     private String topic = "FooBar";
     private String producerGroupPrefix = "FooBar_PID";
     private String producerGroupTemp = producerGroupPrefix + System.currentTimeMillis();
-    private String producerGroupTraceTemp = MixAll.RMQ_SYS_TRACE_TOPIC + System.currentTimeMillis();
+    private String producerGroupTraceTemp = TopicValidator.RMQ_SYS_TRACE_TOPIC + System.currentTimeMillis();
     private String customerTraceTopic = "rmq_trace_topic_12345";
 
     @Before

File: common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.rocketmq.common.annotation.ImportantField;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.constant.PermName;
+import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingUtil;
@@ -52,7 +53,7 @@ public class BrokerConfig {
     private boolean autoCreateSubscriptionGroup = true;
     private String messageStorePlugIn = "";
     @ImportantField
-    private String msgTraceTopicName = MixAll.RMQ_SYS_TRACE_TOPIC;
+    private String msgTraceTopicName = TopicValidator.RMQ_SYS_TRACE_TOPIC;
     @ImportantField
     private boolean traceTopicEnable = false;
     /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/NamespaceUtil.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.MixAll;
+import org.apache.rocketmq.common.topic.TopicValidator;
 
 public class NamespaceUtil {
     public static final char NAMESPACE_SEPARATOR = '%';
@@ -155,11 +156,11 @@ private static boolean isSystemResource(String resource) {
             return false;
         }
 
-        if (MixAll.isSystemTopic(resource) || MixAll.isSysConsumerGroup(resource)) {
+        if (TopicValidator.isSystemTopic(resource) || MixAll.isSysConsumerGroup(resource)) {
             return true;
         }
 
-        return MixAll.AUTO_CREATE_TOPIC_KEY_TOPIC.equals(resource);
+        return false;
     }
 
     public static boolean isRetryTopic(String resource) {

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -50,6 +50,7 @@
 import org.apache.rocketmq.common.message.MessageExtBatch;
 import org.apache.rocketmq.common.running.RunningStats;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
+import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.store.config.BrokerRole;
@@ -1019,7 +1020,7 @@ public int cleanUnusedTopic(Set<String> topics) {
             Entry<String, ConcurrentMap<Integer, ConsumeQueue>> next = it.next();
             String topic = next.getKey();
 
-            if (!topics.contains(topic) && !topic.equals(ScheduleMessageService.SCHEDULE_TOPIC)) {
+            if (!topics.contains(topic) && !topic.equals(TopicValidator.RMQ_SYS_SCHEDULE_TOPIC)) {
                 ConcurrentMap<Integer, ConsumeQueue> queueTable = next.getValue();
                 for (ConsumeQueue cq : queueTable.values()) {
                     cq.destroy();
@@ -1050,7 +1051,7 @@ public void cleanExpiredConsumerQueue() {
         while (it.hasNext()) {
             Entry<String, ConcurrentMap<Integer, ConsumeQueue>> next = it.next();
             String topic = next.getKey();
-            if (!topic.equals(ScheduleMessageService.SCHEDULE_TOPIC)) {
+            if (!topic.equals(TopicValidator.RMQ_SYS_SCHEDULE_TOPIC)) {
                 ConcurrentMap<Integer, ConsumeQueue> queueTable = next.getValue();
                 Iterator<Entry<Integer, ConsumeQueue>> itQT = queueTable.entrySet().iterator();
                 while (itQT.hasNext()) {

File: store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExtBatch;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
+import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.store.AppendMessageResult;
 import org.apache.rocketmq.store.AppendMessageStatus;
 import org.apache.rocketmq.store.CommitLog;
@@ -383,7 +384,7 @@ public PutMessageResult putMessage(final MessageExtBrokerInner msg) {
                     msg.setDelayTimeLevel(this.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel());
                 }
 
-                topic = ScheduleMessageService.SCHEDULE_TOPIC;
+                topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;
                 queueId = ScheduleMessageService.delayLevel2QueueId(msg.getDelayTimeLevel());
 
                 // Backup real topic, queueId

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExt.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.AclConfig;
-import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.PlainAccessConfig;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.admin.ConsumeStats;
@@ -51,6 +50,7 @@
 import org.apache.rocketmq.common.protocol.body.TopicList;
 import org.apache.rocketmq.common.protocol.route.TopicRouteData;
 import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
+import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.exception.RemotingConnectException;
@@ -62,7 +62,7 @@
 public class DefaultMQAdminExt extends ClientConfig implements MQAdminExt {
     private final DefaultMQAdminExtImpl defaultMQAdminExtImpl;
     private String adminExtGroup = "admin_ext_group";
-    private String createTopicKey = MixAll.AUTO_CREATE_TOPIC_KEY_TOPIC;
+    private String createTopicKey = TopicValidator.AUTO_CREATE_TOPIC_KEY_TOPIC;
     private long timeoutMillis = 5000;
 
     public DefaultMQAdminExt() {

File: tools/src/main/java/org/apache/rocketmq/tools/monitor/MonitorService.java
Patch:
@@ -40,6 +40,7 @@
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.admin.ConsumeStats;
 import org.apache.rocketmq.common.admin.OffsetWrapper;
+import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
@@ -83,7 +84,7 @@ public MonitorService(MonitorConfig monitorConfig, MonitorListener monitorListen
         try {
             this.defaultMQPushConsumer.setConsumeThreadMin(1);
             this.defaultMQPushConsumer.setConsumeThreadMax(1);
-            this.defaultMQPushConsumer.subscribe(MixAll.OFFSET_MOVED_EVENT, "*");
+            this.defaultMQPushConsumer.subscribe(TopicValidator.RMQ_SYS_OFFSET_MOVED_EVENT, "*");
             this.defaultMQPushConsumer.registerMessageListener(new MessageListenerConcurrently() {
 
                 @Override

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -226,7 +226,6 @@ public void callback(RemotingCommand response) {
                         } else {
                             NettyRequestProcessor processor = pair.getObject1();
                             RemotingCommand response = processor.processRequest(ctx, cmd);
-                            doAfterRpcHooks(RemotingHelper.parseChannelRemoteAddr(ctx.channel()), cmd, response);
                             callback.callback(response);
                         }
                     } catch (Throwable e) {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java
Patch:
@@ -691,7 +691,7 @@ public void run() {
 
                 ProcessQueue processQueue = assignedMessageQueue.getProcessQueue(messageQueue);
 
-                if (processQueue == null && processQueue.isDropped()) {
+                if (null == processQueue || processQueue.isDropped()) {
                     log.info("The message queue not be able to poll, because it's dropped. group={}, messageQueue={}", defaultLitePullConsumer.getConsumerGroup(), this.messageQueue);
                     return;
                 }

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -226,7 +226,6 @@ public void callback(RemotingCommand response) {
                         } else {
                             NettyRequestProcessor processor = pair.getObject1();
                             RemotingCommand response = processor.processRequest(ctx, cmd);
-                            doAfterRpcHooks(RemotingHelper.parseChannelRemoteAddr(ctx.channel()), cmd, response);
                             callback.callback(response);
                         }
                     } catch (Throwable e) {

File: broker/src/main/java/org/apache/rocketmq/broker/filter/ConsumerFilterManager.java
Patch:
@@ -47,7 +47,7 @@ public class ConsumerFilterManager extends ConfigManager {
     private static final long MS_24_HOUR = 24 * 3600 * 1000;
 
     private ConcurrentMap<String/*Topic*/, FilterDataMapByTopic>
-        filterDataByTopic = new ConcurrentHashMap<String/*consumer group*/, FilterDataMapByTopic>(256);
+        filterDataByTopic = new ConcurrentHashMap<String/*Topic*/, FilterDataMapByTopic>(256);
 
     private transient BrokerController brokerController;
     private transient BloomFilter bloomFilter;

File: broker/src/main/java/org/apache/rocketmq/broker/filter/ConsumerFilterManager.java
Patch:
@@ -47,7 +47,7 @@ public class ConsumerFilterManager extends ConfigManager {
     private static final long MS_24_HOUR = 24 * 3600 * 1000;
 
     private ConcurrentMap<String/*Topic*/, FilterDataMapByTopic>
-        filterDataByTopic = new ConcurrentHashMap<String/*consumer group*/, FilterDataMapByTopic>(256);
+        filterDataByTopic = new ConcurrentHashMap<String/*Topic*/, FilterDataMapByTopic>(256);
 
     private transient BrokerController brokerController;
     private transient BloomFilter bloomFilter;

File: store/src/main/java/org/apache/rocketmq/store/index/IndexFile.java
Patch:
@@ -134,7 +134,9 @@ public boolean putKey(final String key, final long phyOffset, final long storeTi
                     this.indexHeader.setBeginTimestamp(storeTimestamp);
                 }
 
-                this.indexHeader.incHashSlotCount();
+                if (invalidIndex == slotValue) {
+                    this.indexHeader.incHashSlotCount();
+                }
                 this.indexHeader.incIndexCount();
                 this.indexHeader.setEndPhyOffset(phyOffset);
                 this.indexHeader.setEndTimestamp(storeTimestamp);

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -1404,9 +1404,7 @@ public synchronized void putRequest(final GroupCommitRequest request) {
             synchronized (this.requestsWrite) {
                 this.requestsWrite.add(request);
             }
-            if (hasNotified.compareAndSet(false, true)) {
-                waitPoint.countDown(); // notify
-            }
+            this.wakeup();
         }
 
         private void swapRequests() {

File: store/src/main/java/org/apache/rocketmq/store/ha/HAService.java
Patch:
@@ -261,9 +261,7 @@ public synchronized void putRequest(final CommitLog.GroupCommitRequest request)
             synchronized (this.requestsWrite) {
                 this.requestsWrite.add(request);
             }
-            if (hasNotified.compareAndSet(false, true)) {
-                waitPoint.countDown(); // notify
-            }
+            this.wakeup();
         }
 
         public void notifyTransferSome() {

File: common/src/test/java/org/apache/rocketmq/common/BrokerConfigTest.java
Patch:
@@ -37,11 +37,13 @@ public void testBrokerConfigAttribute() {
         brokerConfig.setBrokerId(0);
         brokerConfig.setBrokerClusterName("DefaultCluster");
         brokerConfig.setMsgTraceTopicName("RMQ_SYS_TRACE_TOPIC4");
+        brokerConfig.setAutoDeleteUnusedStats(true);
         assertThat(brokerConfig.getBrokerClusterName()).isEqualTo("DefaultCluster");
         assertThat(brokerConfig.getNamesrvAddr()).isEqualTo("127.0.0.1:9876");
         assertThat(brokerConfig.getMsgTraceTopicName()).isEqualTo("RMQ_SYS_TRACE_TOPIC4");
         assertThat(brokerConfig.getBrokerId()).isEqualTo(0);
         assertThat(brokerConfig.getBrokerName()).isEqualTo("broker-a");
         assertThat(brokerConfig.isAutoCreateTopicEnable()).isEqualTo(false);
+        assertThat(brokerConfig.isAutoDeleteUnusedStats()).isEqualTo(true);
     }
 }
\ No newline at end of file

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -1407,9 +1407,7 @@ public synchronized void putRequest(final GroupCommitRequest request) {
             synchronized (this.requestsWrite) {
                 this.requestsWrite.add(request);
             }
-            if (hasNotified.compareAndSet(false, true)) {
-                waitPoint.countDown(); // notify
-            }
+            this.wakeup();
         }
 
         private void swapRequests() {

File: store/src/main/java/org/apache/rocketmq/store/ha/HAService.java
Patch:
@@ -260,9 +260,7 @@ public synchronized void putRequest(final CommitLog.GroupCommitRequest request)
             synchronized (this.requestsWrite) {
                 this.requestsWrite.add(request);
             }
-            if (hasNotified.compareAndSet(false, true)) {
-                waitPoint.countDown(); // notify
-            }
+            this.wakeup();
         }
 
         public void notifyTransferSome() {

File: store/src/main/java/org/apache/rocketmq/store/index/IndexFile.java
Patch:
@@ -134,7 +134,9 @@ public boolean putKey(final String key, final long phyOffset, final long storeTi
                     this.indexHeader.setBeginTimestamp(storeTimestamp);
                 }
 
-                this.indexHeader.incHashSlotCount();
+                if (invalidIndex == slotValue) {
+                    this.indexHeader.incHashSlotCount();
+                }
                 this.indexHeader.incIndexCount();
                 this.indexHeader.setEndPhyOffset(phyOffset);
                 this.indexHeader.setEndTimestamp(storeTimestamp);

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -258,7 +258,7 @@ public void shutdown(final boolean shutdownFactory) {
                 if (shutdownFactory) {
                     this.mQClientFactory.shutdown();
                 }
-
+                this.timer.cancel();
                 log.info("the producer [{}] shutdown OK", this.defaultMQProducer.getProducerGroup());
                 this.serviceState = ServiceState.SHUTDOWN_ALREADY;
                 break;

File: filter/src/main/java/org/apache/rocketmq/filter/expression/ComparisonExpression.java
Patch:
@@ -90,11 +90,11 @@ public static BooleanExpression createNotInFilter(Expression left, List elements
     }
 
     public static BooleanExpression createIsNull(Expression left) {
-        return doCreateEqual(left, ConstantExpression.NULL);
+        return doCreateEqual(left, BooleanConstantExpression.NULL);
     }
 
     public static BooleanExpression createIsNotNull(Expression left) {
-        return UnaryExpression.createNOT(doCreateEqual(left, ConstantExpression.NULL));
+        return UnaryExpression.createNOT(doCreateEqual(left, BooleanConstantExpression.NULL));
     }
 
     public static BooleanExpression createNotEqual(Expression left, Expression right) {

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -853,6 +853,7 @@ public void shutdown() {
                     this.scheduledExecutorService.shutdown();
                     this.mQClientAPIImpl.shutdown();
                     this.rebalanceService.shutdown();
+                    this.defaultMQProducer.shutdown();
 
                     if (this.datagramSocket != null) {
                         this.datagramSocket.close();

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -258,7 +258,7 @@ public void shutdown(final boolean shutdownFactory) {
                 if (shutdownFactory) {
                     this.mQClientFactory.shutdown();
                 }
-
+                this.timer.cancel();
                 log.info("the producer [{}] shutdown OK", this.defaultMQProducer.getProducerGroup());
                 this.serviceState = ServiceState.SHUTDOWN_ALREADY;
                 break;

File: client/src/main/java/org/apache/rocketmq/client/producer/RequestResponseFuture.java
Patch:
@@ -103,8 +103,8 @@ public boolean isSendRequestOk() {
         return sendRequestOk;
     }
 
-    public void setSendReqeustOk(boolean sendReqeustOk) {
-        this.sendRequestOk = sendReqeustOk;
+    public void setSendRequestOk(boolean sendRequestOk) {
+        this.sendRequestOk = sendRequestOk;
     }
 
     public Message getRequestMsg() {

File: client/src/test/java/org/apache/rocketmq/client/producer/DefaultMQProducerTest.java
Patch:
@@ -373,7 +373,7 @@ public void testAsyncRequest_OnSuccess() throws Exception {
         assertThat(responseMap).isNotNull();
         for (Map.Entry<String, RequestResponseFuture> entry : responseMap.entrySet()) {
             RequestResponseFuture future = entry.getValue();
-            future.setSendReqeustOk(true);
+            future.setSendRequestOk(true);
             message.setFlag(1);
             future.getRequestCallback().onSuccess(message);
         }

File: client/src/test/java/org/apache/rocketmq/client/producer/RequestResponseFutureTest.java
Patch:
@@ -37,7 +37,7 @@ public void testExecuteRequestCallback() throws Exception {
             @Override public void onException(Throwable e) {
             }
         });
-        future.setSendReqeustOk(true);
+        future.setSendRequestOk(true);
         future.executeRequestCallback();
         assertThat(cc.get()).isEqualTo(1);
     }

File: client/src/main/java/org/apache/rocketmq/client/producer/RequestResponseFuture.java
Patch:
@@ -103,8 +103,8 @@ public boolean isSendRequestOk() {
         return sendRequestOk;
     }
 
-    public void setSendReqeustOk(boolean sendReqeustOk) {
-        this.sendRequestOk = sendReqeustOk;
+    public void setSendRequestOk(boolean sendRequestOk) {
+        this.sendRequestOk = sendRequestOk;
     }
 
     public Message getRequestMsg() {

File: client/src/test/java/org/apache/rocketmq/client/producer/DefaultMQProducerTest.java
Patch:
@@ -373,7 +373,7 @@ public void testAsyncRequest_OnSuccess() throws Exception {
         assertThat(responseMap).isNotNull();
         for (Map.Entry<String, RequestResponseFuture> entry : responseMap.entrySet()) {
             RequestResponseFuture future = entry.getValue();
-            future.setSendReqeustOk(true);
+            future.setSendRequestOk(true);
             message.setFlag(1);
             future.getRequestCallback().onSuccess(message);
         }

File: client/src/test/java/org/apache/rocketmq/client/producer/RequestResponseFutureTest.java
Patch:
@@ -37,7 +37,7 @@ public void testExecuteRequestCallback() throws Exception {
             @Override public void onException(Throwable e) {
             }
         });
-        future.setSendReqeustOk(true);
+        future.setSendRequestOk(true);
         future.executeRequestCallback();
         assertThat(cc.get()).isEqualTo(1);
     }

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -1240,6 +1240,7 @@ private void shutdownProcessorByHa() {
         }
     }
 
-
-
+    public ExecutorService getSendMessageExecutor() {
+        return sendMessageExecutor;
+    }
 }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -79,7 +79,7 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx,
 
     @Override
     public void asyncProcessRequest(ChannelHandlerContext ctx, RemotingCommand request, RemotingResponseCallback responseCallback) throws Exception {
-        asyncProcessRequest(ctx, request).thenAccept(responseCallback::callback);
+        asyncProcessRequest(ctx, request).thenAcceptAsync(responseCallback::callback, this.brokerController.getSendMessageExecutor());
     }
 
     public CompletableFuture<RemotingCommand> asyncProcessRequest(ChannelHandlerContext ctx,

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultLitePullConsumer.java
Patch:
@@ -279,7 +279,7 @@ public void commitSync() {
 
     @Override
     public Long committed(MessageQueue messageQueue) throws MQClientException {
-        return this.defaultLitePullConsumerImpl.committed(messageQueue);
+        return this.defaultLitePullConsumerImpl.committed(queueWithNamespace(messageQueue));
     }
 
     @Override
@@ -289,12 +289,12 @@ public void updateNameServerAddress(String nameServerAddress) {
 
     @Override
     public void seekToBegin(MessageQueue messageQueue) throws MQClientException {
-        this.defaultLitePullConsumerImpl.seekToBegin(messageQueue);
+        this.defaultLitePullConsumerImpl.seekToBegin(queueWithNamespace(messageQueue));
     }
 
     @Override
     public void seekToEnd(MessageQueue messageQueue) throws MQClientException {
-        this.defaultLitePullConsumerImpl.seekToEnd(messageQueue);
+        this.defaultLitePullConsumerImpl.seekToEnd(queueWithNamespace(messageQueue));
     }
 
     @Override

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java
Patch:
@@ -631,7 +631,7 @@ private long fetchConsumeOffset(MessageQueue messageQueue) {
 
     public long committed(MessageQueue messageQueue) throws MQClientException {
         checkServiceState();
-        long offset = this.offsetStore.readOffset(messageQueue, ReadOffsetType.READ_FROM_STORE);
+        long offset = this.offsetStore.readOffset(messageQueue, ReadOffsetType.MEMORY_FIRST_THEN_STORE);
         if (offset == -2)
             throw new MQClientException("Fetch consume offset from broker exception", null);
         return offset;

File: common/src/main/java/org/apache/rocketmq/common/message/MessageDecoder.java
Patch:
@@ -414,6 +414,9 @@ public static String messageProperties2String(Map<String, String> properties) {
                 final String name = entry.getKey();
                 final String value = entry.getValue();
 
+                if (value == null) {
+                    continue;
+                }
                 sb.append(name);
                 sb.append(NAME_VALUE_SEPARATOR);
                 sb.append(value);

File: store/src/main/java/org/apache/rocketmq/store/ha/HAService.java
Patch:
@@ -39,6 +39,7 @@
 import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.apache.rocketmq.store.CommitLog;
 import org.apache.rocketmq.store.DefaultMessageStore;
+import org.apache.rocketmq.store.PutMessageStatus;
 
 public class HAService {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
@@ -291,7 +292,7 @@ private void doWaitTransfer() {
                             log.warn("transfer messsage to slave timeout, " + req.getNextOffset());
                         }
 
-                        req.wakeupCustomer(transferOK);
+                        req.wakeupCustomer(transferOK ? PutMessageStatus.PUT_OK : PutMessageStatus.FLUSH_SLAVE_TIMEOUT);
                     }
 
                     this.requestsRead.clear();

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -1366,7 +1366,7 @@ public TopicRouteData getTopicRouteInfoFromNameServer(final String topic, final
         GetRouteInfoRequestHeader requestHeader = new GetRouteInfoRequestHeader();
         requestHeader.setTopic(topic);
 
-        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_ROUTEINTO_BY_TOPIC, requestHeader);
+        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_ROUTEINFO_BY_TOPIC, requestHeader);
 
         RemotingCommand response = this.remotingClient.invokeSync(null, request, timeoutMillis);
         assert response != null;

File: common/src/main/java/org/apache/rocketmq/common/protocol/RequestCode.java
Patch:
@@ -89,7 +89,7 @@ public class RequestCode {
     public static final int REGISTER_BROKER = 103;
 
     public static final int UNREGISTER_BROKER = 104;
-    public static final int GET_ROUTEINTO_BY_TOPIC = 105;
+    public static final int GET_ROUTEINFO_BY_TOPIC = 105;
 
     public static final int GET_BROKER_CLUSTER_INFO = 106;
     public static final int UPDATE_AND_CREATE_SUBSCRIPTIONGROUP = 200;

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/DefaultRequestProcessor.java
Patch:
@@ -97,7 +97,7 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx,
                 }
             case RequestCode.UNREGISTER_BROKER:
                 return this.unregisterBroker(ctx, request);
-            case RequestCode.GET_ROUTEINTO_BY_TOPIC:
+            case RequestCode.GET_ROUTEINFO_BY_TOPIC:
                 return this.getRouteInfoByTopic(ctx, request);
             case RequestCode.GET_BROKER_CLUSTER_INFO:
                 return this.getBrokerClusterInfo(ctx, request);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -452,7 +452,7 @@ public void run() {
                         final int consumeBatchSize =
                             ConsumeMessageOrderlyService.this.defaultMQPushConsumer.getConsumeMessageBatchMaxSize();
 
-                        List<MessageExt> msgs = this.processQueue.takeMessags(consumeBatchSize);
+                        List<MessageExt> msgs = this.processQueue.takeMessages(consumeBatchSize);
                         defaultMQPushConsumerImpl.resetRetryAndNamespace(msgs, defaultMQPushConsumer.getConsumerGroup());
                         if (!msgs.isEmpty()) {
                             final ConsumeOrderlyContext context = new ConsumeOrderlyContext(this.messageQueue);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ProcessQueue.java
Patch:
@@ -296,7 +296,7 @@ public void makeMessageToCosumeAgain(List<MessageExt> msgs) {
         }
     }
 
-    public List<MessageExt> takeMessags(final int batchSize) {
+    public List<MessageExt> takeMessages(final int batchSize) {
         List<MessageExt> result = new ArrayList<MessageExt>(batchSize);
         final long now = System.currentTimeMillis();
         try {

File: common/src/main/java/org/apache/rocketmq/common/message/MessageClientIDSetter.java
Patch:
@@ -104,11 +104,11 @@ public static byte[] getIPFromID(String msgID) {
         return result;
     }
 
-    public static short getPidFromID(String msgID) {
+    public static int getPidFromID(String msgID) {
         byte[] bytes = UtilAll.string2bytes(msgID);
         ByteBuffer wrap = ByteBuffer.wrap(bytes);
-        wrap.position(bytes.length - 2 - 4 - 4 - 2);
-        return wrap.getShort();
+        int value = wrap.getShort(bytes.length - 2 - 4 - 4 - 2);
+        return value & 0x0000FFFF;
     }
 
     public static String createUniqID() {

File: common/src/test/java/org/apache/rocketmq/common/message/MessageClientIDSetterTest.java
Patch:
@@ -40,7 +40,7 @@ public void testGetPidFromID() {
         int pid = UtilAll.getPid();
 
         String uniqID = MessageClientIDSetter.createUniqID();
-        short pidFromID = MessageClientIDSetter.getPidFromID(uniqID);
+        int pidFromID = MessageClientIDSetter.getPidFromID(uniqID);
 
         assertThat(pid).isEqualTo(pidFromID);
     }

File: common/src/main/java/org/apache/rocketmq/common/message/MessageClientIDSetter.java
Patch:
@@ -104,11 +104,11 @@ public static byte[] getIPFromID(String msgID) {
         return result;
     }
 
-    public static short getPidFromID(String msgID) {
+    public static int getPidFromID(String msgID) {
         byte[] bytes = UtilAll.string2bytes(msgID);
         ByteBuffer wrap = ByteBuffer.wrap(bytes);
-        wrap.position(bytes.length - 2 - 4 - 4 - 2);
-        return wrap.getShort();
+        int value = wrap.getShort(bytes.length - 2 - 4 - 4 - 2);
+        return value & 0x0000FFFF;
     }
 
     public static String createUniqID() {

File: common/src/test/java/org/apache/rocketmq/common/message/MessageClientIDSetterTest.java
Patch:
@@ -40,7 +40,7 @@ public void testGetPidFromID() {
         int pid = UtilAll.getPid();
 
         String uniqID = MessageClientIDSetter.createUniqID();
-        short pidFromID = MessageClientIDSetter.getPidFromID(uniqID);
+        int pidFromID = MessageClientIDSetter.getPidFromID(uniqID);
 
         assertThat(pid).isEqualTo(pidFromID);
     }

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java
Patch:
@@ -188,7 +188,7 @@ public static SerializeType getProtocolType(int source) {
     }
 
     public static int createNewRequestId() {
-        return requestId.incrementAndGet();
+        return requestId.getAndIncrement();
     }
 
     public static SerializeType getSerializeTypeConfigInThisServer() {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java
Patch:
@@ -49,11 +49,12 @@
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.store.MessageExtBrokerInner;
 
-public abstract class AbstractSendMessageProcessor implements NettyRequestProcessor {
+public abstract class AbstractSendMessageProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {
     protected static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     protected final static int DLQ_NUMS_PER_GROUP = 1;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -122,6 +122,7 @@
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
+import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.LanguageCode;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
@@ -136,7 +137,7 @@
 import org.apache.rocketmq.store.PutMessageStatus;
 import org.apache.rocketmq.store.SelectMappedBufferResult;
 
-public class AdminBrokerProcessor implements NettyRequestProcessor {
+public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ClientManageProcessor.java
Patch:
@@ -40,9 +40,10 @@
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
+import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
-public class ClientManageProcessor implements NettyRequestProcessor {
+public class ClientManageProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ConsumerManageProcessor.java
Patch:
@@ -34,10 +34,11 @@
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
-public class ConsumerManageProcessor implements NettyRequestProcessor {
+public class ConsumerManageProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final BrokerController brokerController;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/EndTransactionProcessor.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.store.MessageExtBrokerInner;
@@ -41,7 +42,7 @@
 /**
  * EndTransaction processor: process commit and rollback message
  */
-public class EndTransactionProcessor implements NettyRequestProcessor {
+public class EndTransactionProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {
     private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);
     private final BrokerController brokerController;
 

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ForwardRequestProcessor.java
Patch:
@@ -21,10 +21,11 @@
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.logging.InternalLoggerFactory;
+import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
-public class ForwardRequestProcessor implements NettyRequestProcessor {
+public class ForwardRequestProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final BrokerController brokerController;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PullMessageProcessor.java
Patch:
@@ -57,6 +57,7 @@
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.netty.RequestTask;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
@@ -67,7 +68,7 @@
 import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.stats.BrokerStatsManager;
 
-public class PullMessageProcessor implements NettyRequestProcessor {
+public class PullMessageProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
     private final BrokerController brokerController;
     private List<ConsumeMessageHook> consumeMessageHookList;

File: broker/src/main/java/org/apache/rocketmq/broker/processor/QueryMessageProcessor.java
Patch:
@@ -33,12 +33,13 @@
 import org.apache.rocketmq.common.protocol.header.QueryMessageResponseHeader;
 import org.apache.rocketmq.common.protocol.header.ViewMessageRequestHeader;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.store.QueryMessageResult;
 import org.apache.rocketmq.store.SelectMappedBufferResult;
 
-public class QueryMessageProcessor implements NettyRequestProcessor {
+public class QueryMessageProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
 
     private final BrokerController brokerController;

File: client/src/main/java/org/apache/rocketmq/client/impl/ClientRemotingProcessor.java
Patch:
@@ -52,10 +52,11 @@
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
-public class ClientRemotingProcessor implements NettyRequestProcessor {
+public class ClientRemotingProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {
     private final InternalLogger log = ClientLogger.getLog();
     private final MQClientInstance mqClientFactory;
 

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/DefaultRequestProcessor.java
Patch:
@@ -54,10 +54,11 @@
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
+import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 
-public class DefaultRequestProcessor implements NettyRequestProcessor {
+public class DefaultRequestProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {
     private static InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);
 
     protected final NamesrvController namesrvController;

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRequestProcessor.java
Patch:
@@ -27,4 +27,5 @@ RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand reques
         throws Exception;
 
     boolean rejectRequest();
+
 }

File: client/src/main/java/org/apache/rocketmq/client/consumer/MQPullConsumerScheduleService.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.message.MessageQueue;
+import org.apache.rocketmq.common.protocol.NamespaceUtil;
 import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
@@ -95,7 +96,7 @@ public void start() throws MQClientException {
     }
 
     public void registerPullTaskCallback(final String topic, final PullTaskCallback callback) {
-        this.callbackTable.put(topic, callback);
+        this.callbackTable.put(NamespaceUtil.wrapNamespace(this.defaultMQPullConsumer.getNamespace(), topic), callback);
         this.defaultMQPullConsumer.registerMessageQueueListener(topic, null);
     }
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java
Patch:
@@ -188,7 +188,7 @@ public static SerializeType getProtocolType(int source) {
     }
 
     public static int createNewRequestId() {
-        return requestId.incrementAndGet();
+        return requestId.getAndIncrement();
     }
 
     public static SerializeType getSerializeTypeConfigInThisServer() {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/PullAPIWrapper.java
Patch:
@@ -104,6 +104,7 @@ public PullResult processPullResult(final MessageQueue mq, final PullResult pull
                     Long.toString(pullResult.getMinOffset()));
                 MessageAccessor.putProperty(msg, MessageConst.PROPERTY_MAX_OFFSET,
                     Long.toString(pullResult.getMaxOffset()));
+                msg.setBrokerName(mq.getBrokerName());
             }
 
             pullResultExt.setMsgFoundList(msgListFilterAgain);

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessValidator.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.rocketmq.acl.common.Permission;
 import org.apache.rocketmq.acl.common.SessionCredentials;
 import org.apache.rocketmq.common.AclConfig;
+import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.PlainAccessConfig;
 import org.apache.rocketmq.common.protocol.RequestCode;
 import org.apache.rocketmq.common.protocol.header.GetConsumerListByGroupRequestHeader;
@@ -125,7 +126,8 @@ public AccessResource parse(RemotingCommand request, String remoteAddr) {
         // Content
         SortedMap<String, String> map = new TreeMap<String, String>();
         for (Map.Entry<String, String> entry : request.getExtFields().entrySet()) {
-            if (!SessionCredentials.SIGNATURE.equals(entry.getKey())) {
+            if (!SessionCredentials.SIGNATURE.equals(entry.getKey())
+                    && !MixAll.UNIQUE_MSG_QUERY_FLAG.equals(entry.getKey())) {
                 map.put(entry.getKey(), entry.getValue());
             }
         }

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java
Patch:
@@ -561,8 +561,8 @@ public void seekToBegin(MessageQueue messageQueue) throws MQClientException {
     }
 
     public void seekToEnd(MessageQueue messageQueue) throws MQClientException {
-        long begin = maxOffset(messageQueue);
-        this.seek(messageQueue, begin);
+        long end = maxOffset(messageQueue);
+        this.seek(messageQueue, end);
     }
 
     private long maxOffset(MessageQueue messageQueue) throws MQClientException {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/EndTransactionProcessor.java
Patch:
@@ -132,6 +132,7 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand
                     msgInner.setQueueOffset(requestHeader.getTranStateTableOffset());
                     msgInner.setPreparedTransactionOffset(requestHeader.getCommitLogOffset());
                     msgInner.setStoreTimestamp(result.getPrepareMessage().getStoreTimestamp());
+                    MessageAccessor.clearProperty(msgInner, MessageConst.PROPERTY_TRANSACTION_PREPARED);
                     RemotingCommand sendResult = sendFinalMessage(msgInner);
                     if (sendResult.getCode() == ResponseCode.SUCCESS) {
                         this.brokerController.getTransactionalMessageService().deletePrepareMessage(result.getPrepareMessage());

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -353,7 +353,8 @@ private RemotingCommand sendMessage(final ChannelHandlerContext ctx,
         PutMessageResult putMessageResult = null;
         Map<String, String> oriProps = MessageDecoder.string2messageProperties(requestHeader.getProperties());
         String traFlag = oriProps.get(MessageConst.PROPERTY_TRANSACTION_PREPARED);
-        if (traFlag != null && Boolean.parseBoolean(traFlag)) {
+        if (traFlag != null && Boolean.parseBoolean(traFlag)
+            && !(msgInner.getReconsumeTimes() > 0 && msgInner.getDelayTimeLevel() > 0)) { //For client under version 4.6.1
             if (this.brokerController.getBrokerConfig().isRejectTransactionMessage()) {
                 response.setCode(ResponseCode.NO_PERMISSION);
                 response.setRemark(

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -374,6 +374,7 @@ public boolean sendMessageBack(final MessageExt msg) {
             MessageAccessor.putProperty(newMsg, MessageConst.PROPERTY_RETRY_TOPIC, msg.getTopic());
             MessageAccessor.setReconsumeTime(newMsg, String.valueOf(msg.getReconsumeTimes()));
             MessageAccessor.setMaxReconsumeTimes(newMsg, String.valueOf(getMaxReconsumeTimes()));
+            MessageAccessor.clearProperty(newMsg, MessageConst.PROPERTY_TRANSACTION_PREPARED);
             newMsg.setDelayTimeLevel(3 + msg.getReconsumeTimes());
 
             this.defaultMQPushConsumer.getDefaultMQPushConsumerImpl().getmQClientFactory().getDefaultMQProducer().send(newMsg);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -528,6 +528,7 @@ public void sendMessageBack(MessageExt msg, int delayLevel, final String brokerN
             MessageAccessor.putProperty(newMsg, MessageConst.PROPERTY_RETRY_TOPIC, msg.getTopic());
             MessageAccessor.setReconsumeTime(newMsg, String.valueOf(msg.getReconsumeTimes() + 1));
             MessageAccessor.setMaxReconsumeTimes(newMsg, String.valueOf(getMaxReconsumeTimes()));
+            MessageAccessor.clearProperty(newMsg, MessageConst.PROPERTY_TRANSACTION_PREPARED);
             newMsg.setDelayTimeLevel(3 + msg.getReconsumeTimes());
 
             this.mQClientFactory.getDefaultMQProducer().send(newMsg);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -815,7 +815,7 @@ private RemotingCommand getProducerConnectionList(ChannelHandlerContext ctx,
             (GetProducerConnectionListRequestHeader) request.decodeCommandCustomHeader(GetProducerConnectionListRequestHeader.class);
 
         ProducerConnection bodydata = new ProducerConnection();
-        HashMap<Channel, ClientChannelInfo> channelInfoHashMap =
+        Map<Channel, ClientChannelInfo> channelInfoHashMap =
             this.brokerController.getProducerManager().getGroupChannelTable().get(requestHeader.getProducerGroup());
         if (channelInfoHashMap != null) {
             Iterator<Map.Entry<Channel, ClientChannelInfo>> it = channelInfoHashMap.entrySet().iterator();

File: broker/src/test/java/org/apache/rocketmq/broker/processor/ClientManageProcessorTest.java
Patch:
@@ -19,6 +19,7 @@
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandlerContext;
 import java.util.HashMap;
+import java.util.Map;
 import java.util.UUID;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.client.ClientChannelInfo;
@@ -81,7 +82,7 @@ public void init() {
     @Test
     public void processRequest_UnRegisterProducer() throws Exception {
         brokerController.getProducerManager().registerProducer(group, clientChannelInfo);
-        HashMap<Channel, ClientChannelInfo> channelMap = brokerController.getProducerManager().getGroupChannelTable().get(group);
+        Map<Channel, ClientChannelInfo> channelMap = brokerController.getProducerManager().getGroupChannelTable().get(group);
         assertThat(channelMap).isNotNull();
         assertThat(channelMap.get(channel)).isEqualTo(clientChannelInfo);
 

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultLitePullConsumer.java
Patch:
@@ -269,7 +269,7 @@ public void registerTopicMessageQueueChangeListener(String topic,
 
     @Override
     public void commitSync() {
-        this.defaultLitePullConsumerImpl.commitSync();
+        this.defaultLitePullConsumerImpl.commitAll();
     }
 
     @Override

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicValidator.java
Patch:
@@ -27,7 +27,7 @@ public class TopicValidator {
 
     private static final String VALID_PATTERN_STR = "^[%|a-zA-Z0-9_-]+$";
     private static final Pattern PATTERN = Pattern.compile(VALID_PATTERN_STR);
-    private static final int CHARACTER_MAX_LENGTH = 255;
+    private static final int TOPIC_MAX_LENGTH = 127;
 
     private static boolean regularExpressionMatcher(String origin, Pattern pattern) {
         if (pattern == null) {
@@ -51,9 +51,9 @@ public static boolean validateTopic(String topic, RemotingCommand response) {
             return false;
         }
 
-        if (topic.length() > CHARACTER_MAX_LENGTH) {
+        if (topic.length() > TOPIC_MAX_LENGTH) {
             response.setCode(ResponseCode.SYSTEM_ERROR);
-            response.setRemark("The specified topic is longer than topic max length 255.");
+            response.setRemark("The specified topic is longer than topic max length.");
             return false;
         }
 

File: broker/src/test/java/org/apache/rocketmq/broker/topic/TopicValidatorTest.java
Patch:
@@ -47,10 +47,10 @@ public void testTopicValidator_NotPass() {
         assertThat(response.getRemark()).contains("The specified topic is conflict with AUTO_CREATE_TOPIC_KEY_TOPIC.");
 
         clearResponse(response);
-        res = TopicValidator.validateTopic(generateString(255), response);
+        res = TopicValidator.validateTopic(generateString(128), response);
         assertThat(res).isFalse();
         assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);
-        assertThat(response.getRemark()).contains("The specified topic is longer than topic max length 255.");
+        assertThat(response.getRemark()).contains("The specified topic is longer than topic max length.");
 
     }
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/cluster/CLusterSendMsgRTCommand.java
Patch:
@@ -53,7 +53,7 @@ public String commandDesc() {
 
     @Override
     public Options buildCommandlineOptions(Options options) {
-        Option opt = new Option("a", "amout", true, "message amout | default 100");
+        Option opt = new Option("a", "amount", true, "message amount | default 100");
         opt.setRequired(false);
         options.addOption(opt);
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/CheckMsgSendRTCommand.java
Patch:
@@ -49,7 +49,7 @@ public Options buildCommandlineOptions(Options options) {
         opt.setRequired(true);
         options.addOption(opt);
 
-        opt = new Option("a", "amout", true, "message amout | default 100");
+        opt = new Option("a", "amount", true, "message amount | default 100");
         opt.setRequired(false);
         options.addOption(opt);
 

File: common/src/main/java/org/apache/rocketmq/common/UtilAll.java
Patch:
@@ -547,8 +547,6 @@ public static byte[] getIP() {
                             if (ipV6Check(ipByte)) {
                                 if (!isInternalV6IP(ip)) {
                                     return ipByte;
-                                } else if (internalIP == null) {
-                                    internalIP = ipByte;
                                 }
                             }
                         }

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumer.java
Patch:
@@ -388,7 +388,7 @@ public DefaultMQPushConsumer(final String namespace, final String consumerGroup,
         defaultMQPushConsumerImpl = new DefaultMQPushConsumerImpl(this, rpcHook);
         if (enableMsgTrace) {
             try {
-                AsyncTraceDispatcher dispatcher = new AsyncTraceDispatcher(customizedTraceTopic, rpcHook);
+                AsyncTraceDispatcher dispatcher = new AsyncTraceDispatcher(consumerGroup, TraceDispatcher.Type.CONSUME, customizedTraceTopic, rpcHook);
                 dispatcher.setHostConsumer(this.getDefaultMQPushConsumerImpl());
                 traceDispatcher = dispatcher;
                 this.getDefaultMQPushConsumerImpl().registerConsumeMessageHook(

File: client/src/main/java/org/apache/rocketmq/client/producer/DefaultMQProducer.java
Patch:
@@ -161,7 +161,7 @@ public DefaultMQProducer(final String producerGroup, RPCHook rpcHook, boolean en
         //if client open the message trace feature
         if (enableMsgTrace) {
             try {
-                AsyncTraceDispatcher dispatcher = new AsyncTraceDispatcher(customizedTraceTopic, rpcHook);
+                AsyncTraceDispatcher dispatcher = new AsyncTraceDispatcher(producerGroup, TraceDispatcher.Type.PRODUCE, customizedTraceTopic, rpcHook);
                 dispatcher.setHostProducer(this.defaultMQProducerImpl);
                 traceDispatcher = dispatcher;
                 this.defaultMQProducerImpl.registerSendMessageHook(
@@ -246,7 +246,7 @@ public DefaultMQProducer(final String namespace, final String producerGroup, RPC
         //if client open the message trace feature
         if (enableMsgTrace) {
             try {
-                AsyncTraceDispatcher dispatcher = new AsyncTraceDispatcher(customizedTraceTopic, rpcHook);
+                AsyncTraceDispatcher dispatcher = new AsyncTraceDispatcher(producerGroup, TraceDispatcher.Type.PRODUCE, customizedTraceTopic, rpcHook);
                 dispatcher.setHostProducer(this.getDefaultMQProducerImpl());
                 traceDispatcher = dispatcher;
                 this.getDefaultMQProducerImpl().registerSendMessageHook(

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceConstants.java
Patch:
@@ -20,7 +20,7 @@
 
 public class TraceConstants {
 
-    public static final String GROUP_NAME = "_INNER_TRACE_PRODUCER";
+    public static final String GROUP_NAME_PREFIX = "_INNER_TRACE_PRODUCER";
     public static final char CONTENT_SPLITOR = (char) 1;
     public static final char FIELD_SPLITOR = (char) 2;
     public static final String TRACE_INSTANCE_NAME = "PID_CLIENT_INNER_TRACE_PRODUCER";

File: client/src/test/java/org/apache/rocketmq/client/ValidatorsTest.java
Patch:
@@ -71,13 +71,13 @@ public void testCheckTopic_BlankTopic() {
 
     @Test
     public void testCheckTopic_TooLongTopic() {
-        String tooLongTopic = StringUtils.rightPad("TooLongTopic", Validators.CHARACTER_MAX_LENGTH + 1, "_");
-        assertThat(tooLongTopic.length()).isGreaterThan(Validators.CHARACTER_MAX_LENGTH);
+        String tooLongTopic = StringUtils.rightPad("TooLongTopic", Validators.TOPIC_MAX_LENGTH + 1, "_");
+        assertThat(tooLongTopic.length()).isGreaterThan(Validators.TOPIC_MAX_LENGTH);
         try {
             Validators.checkTopic(tooLongTopic);
             failBecauseExceptionWasNotThrown(MQClientException.class);
         } catch (MQClientException e) {
-            assertThat(e).hasMessageStartingWith("The specified topic is longer than topic max length 255.");
+            assertThat(e).hasMessageStartingWith("The specified topic is longer than topic max length");
         }
     }
 }

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateTopicPermSubCommand.java
Patch:
@@ -83,7 +83,7 @@ public void execute(final CommandLine commandLine, final Options options,
             if (commandLine.hasOption('t')) {
                 topic = commandLine.getOptionValue('t').trim();
             } else {
-                System.out.printf("topic paramter value must be need.%n");
+                System.out.printf("topic parameter value must be need.%n");
                 return;
             }
             TopicRouteData topicRouteData = defaultMQAdminExt.examineTopicRouteInfo(topic);
@@ -100,7 +100,7 @@ public void execute(final CommandLine commandLine, final Options options,
             if (commandLine.hasOption('p')) {
                 perm = Integer.parseInt(commandLine.getOptionValue('p').trim());
             } else {
-                System.out.printf("perm paramter value must be need.%n");
+                System.out.printf("perm parameter value must be need.%n");
                 return;
             }
             topicConfig.setPerm(perm);

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateTopicPermSubCommand.java
Patch:
@@ -83,7 +83,7 @@ public void execute(final CommandLine commandLine, final Options options,
             if (commandLine.hasOption('t')) {
                 topic = commandLine.getOptionValue('t').trim();
             } else {
-                System.out.printf("topic paramter value must be need.%n");
+                System.out.printf("topic parameter value must be need.%n");
                 return;
             }
             TopicRouteData topicRouteData = defaultMQAdminExt.examineTopicRouteInfo(topic);
@@ -100,7 +100,7 @@ public void execute(final CommandLine commandLine, final Options options,
             if (commandLine.hasOption('p')) {
                 perm = Integer.parseInt(commandLine.getOptionValue('p').trim());
             } else {
-                System.out.printf("perm paramter value must be need.%n");
+                System.out.printf("perm parameter value must be need.%n");
                 return;
             }
             topicConfig.setPerm(perm);

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -419,7 +419,7 @@ public static String getLocalhostByNetworkInterface() throws SocketException {
                 if (address.isLoopbackAddress()) {
                     continue;
                 }
-                //ip4 highter priority
+                //ip4 higher priority
                 if (address instanceof Inet6Address) {
                     candidatesHost.add(address.getHostAddress());
                     continue;

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -419,7 +419,7 @@ public static String getLocalhostByNetworkInterface() throws SocketException {
                 if (address.isLoopbackAddress()) {
                     continue;
                 }
-                //ip4 highter priority
+                //ip4 higher priority
                 if (address instanceof Inet6Address) {
                     candidatesHost.add(address.getHostAddress());
                     continue;

File: client/src/main/java/org/apache/rocketmq/client/impl/MQAdminImpl.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 
 import org.apache.rocketmq.client.QueryResult;
+import org.apache.rocketmq.client.Validators;
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
@@ -80,6 +81,7 @@ public void createTopic(String key, String newTopic, int queueNum) throws MQClie
 
     public void createTopic(String key, String newTopic, int queueNum, int topicSysFlag) throws MQClientException {
         try {
+            Validators.checkTopic(newTopic);
             TopicRouteData topicRouteData = this.mQClientFactory.getMQClientAPIImpl().getTopicRouteInfoFromNameServer(key, timeoutMillis);
             List<BrokerData> brokerDataList = topicRouteData.getBrokerDatas();
             if (brokerDataList != null && !brokerDataList.isEmpty()) {

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -43,12 +43,12 @@
 import org.apache.rocketmq.client.producer.SendCallback;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.client.producer.SendStatus;
+import org.apache.rocketmq.common.AclConfig;
 import org.apache.rocketmq.common.DataVersion;
 import org.apache.rocketmq.common.MQVersion;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.PlainAccessConfig;
 import org.apache.rocketmq.common.TopicConfig;
-import org.apache.rocketmq.common.AclConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.admin.ConsumeStats;
 import org.apache.rocketmq.common.admin.TopicStatsTable;
@@ -305,8 +305,8 @@ public void createPlainAccessConfig(final String addr, final PlainAccessConfig p
         requestHeader.setDefaultGroupPerm(plainAccessConfig.getDefaultGroupPerm());
         requestHeader.setDefaultTopicPerm(plainAccessConfig.getDefaultTopicPerm());
         requestHeader.setWhiteRemoteAddress(plainAccessConfig.getWhiteRemoteAddress());
-        requestHeader.setTopicPerms(UtilAll.List2String(plainAccessConfig.getTopicPerms(), ","));
-        requestHeader.setGroupPerms(UtilAll.List2String(plainAccessConfig.getGroupPerms(), ","));
+        requestHeader.setTopicPerms(UtilAll.list2String(plainAccessConfig.getTopicPerms(), ","));
+        requestHeader.setGroupPerms(UtilAll.list2String(plainAccessConfig.getGroupPerms(), ","));
 
         RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.UPDATE_AND_CREATE_ACL_CONFIG, requestHeader);
 

File: common/src/main/java/org/apache/rocketmq/common/UtilAll.java
Patch:
@@ -580,7 +580,7 @@ public static void deleteFile(File file) {
         }
     }
 
-    public static String List2String(List<String> list, String splitor) {
+    public static String list2String(List<String> list, String splitor) {
         if (list == null || list.size() == 0) {
             return null;
         }
@@ -595,7 +595,7 @@ public static String List2String(List<String> list, String splitor) {
         return str.toString();
     }
 
-    public static List<String> String2List(String str, String splitor) {
+    public static List<String> string2List(String str, String splitor) {
         if (StringUtils.isEmpty(str)) {
             return null;
         }

File: tools/src/main/java/org/apache/rocketmq/tools/command/cluster/CLusterSendMsgRTCommand.java
Patch:
@@ -53,7 +53,7 @@ public String commandDesc() {
 
     @Override
     public Options buildCommandlineOptions(Options options) {
-        Option opt = new Option("a", "amout", true, "message amout | default 100");
+        Option opt = new Option("a", "amount", true, "message amount | default 100");
         opt.setRequired(false);
         options.addOption(opt);
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/CheckMsgSendRTCommand.java
Patch:
@@ -49,7 +49,7 @@ public Options buildCommandlineOptions(Options options) {
         opt.setRequired(true);
         options.addOption(opt);
 
-        opt = new Option("a", "amout", true, "message amout | default 100");
+        opt = new Option("a", "amount", true, "message amount | default 100");
         opt.setRequired(false);
         options.addOption(opt);
 

File: common/src/main/java/org/apache/rocketmq/common/UtilAll.java
Patch:
@@ -547,8 +547,6 @@ public static byte[] getIP() {
                             if (ipV6Check(ipByte)) {
                                 if (!isInternalV6IP(ip)) {
                                     return ipByte;
-                                } else if (internalIP == null) {
-                                    internalIP = ipByte;
                                 }
                             }
                         }

File: common/src/test/java/org/apache/rocketmq/common/message/MessageClientIDSetterTest.java
Patch:
@@ -17,9 +17,8 @@
 
 package org.apache.rocketmq.common.message;
 
-import java.util.Calendar;
-import java.util.Date;
 import org.junit.Test;
+
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class MessageClientIDSetterTest {

File: common/src/test/java/org/apache/rocketmq/common/message/MessageClientIDSetterTest.java
Patch:
@@ -17,9 +17,8 @@
 
 package org.apache.rocketmq.common.message;
 
-import java.util.Calendar;
-import java.util.Date;
 import org.junit.Test;
+
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class MessageClientIDSetterTest {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/EndTransactionProcessor.java
Patch:
@@ -55,7 +55,7 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand
         final RemotingCommand response = RemotingCommand.createResponseCommand(null);
         final EndTransactionRequestHeader requestHeader =
             (EndTransactionRequestHeader)request.decodeCommandCustomHeader(EndTransactionRequestHeader.class);
-        LOGGER.info("Transaction request:{}", requestHeader);
+        LOGGER.debug("Transaction request:{}", requestHeader);
         if (BrokerRole.SLAVE == brokerController.getMessageStoreConfig().getBrokerRole()) {
             response.setCode(ResponseCode.SLAVE_NOT_AVAILABLE);
             LOGGER.warn("Message store is slave mode, so end transaction is forbidden. ");

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/AbstractTransactionalMessageCheckListener.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy;
 import java.util.concurrent.TimeUnit;
 
 public abstract class AbstractTransactionalMessageCheckListener {
@@ -48,7 +49,7 @@ public Thread newThread(Runnable r) {
             thread.setName("Transaction-msg-check-thread");
             return thread;
         }
-    });
+    }, new CallerRunsPolicy());
 
     public AbstractTransactionalMessageCheckListener() {
     }

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageBridge.java
Patch:
@@ -141,6 +141,7 @@ private PullResult getMessage(String group, String topic, int queueId, long offs
                         getMessageResult.getStatus(), topic, group, offset);
                     break;
                 case NO_MESSAGE_IN_QUEUE:
+                case OFFSET_OVERFLOW_ONE:
                     pullStatus = PullStatus.NO_NEW_MSG;
                     LOGGER.warn("No new message. GetMessageStatus={}, topic={}, groupId={}, requestOffset={}",
                         getMessageResult.getStatus(), topic, group, offset);
@@ -149,7 +150,6 @@ private PullResult getMessage(String group, String topic, int queueId, long offs
                 case NO_MATCHED_LOGIC_QUEUE:
                 case OFFSET_FOUND_NULL:
                 case OFFSET_OVERFLOW_BADLY:
-                case OFFSET_OVERFLOW_ONE:
                 case OFFSET_TOO_SMALL:
                     pullStatus = PullStatus.OFFSET_ILLEGAL;
                     LOGGER.warn("Offset illegal. GetMessageStatus={}, topic={}, groupId={}, requestOffset={}",

File: store/src/main/java/org/apache/rocketmq/store/ha/HAService.java
Patch:
@@ -280,7 +280,9 @@ private void doWaitTransfer() {
                 if (!this.requestsRead.isEmpty()) {
                     for (CommitLog.GroupCommitRequest req : this.requestsRead) {
                         boolean transferOK = HAService.this.push2SlaveMaxOffset.get() >= req.getNextOffset();
-                        for (int i = 0; !transferOK && i < 5; i++) {
+                        long waitUntilWhen = HAService.this.defaultMessageStore.getSystemClock().now()
+                            + HAService.this.defaultMessageStore.getMessageStoreConfig().getSyncFlushTimeout();
+                        while (!transferOK && HAService.this.defaultMessageStore.getSystemClock().now() < waitUntilWhen) {
                             this.notifyTransferObject.waitForRunning(1000);
                             transferOK = HAService.this.push2SlaveMaxOffset.get() >= req.getNextOffset();
                         }

File: broker/src/test/java/org/apache/rocketmq/broker/processor/ReplyMessageProcessorTest.java
Patch:
@@ -71,8 +71,7 @@ public class ReplyMessageProcessorTest {
     private MessageStore messageStore;
     @Mock
     private Channel channel;
-    @Mock
-    private TransactionalMessageService transactionMsgService;
+
     private String topic = "FooBar";
     private String group = "FooBarGroup";
     private ClientChannelInfo clientInfo;

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/AbstractTransactionalMessageCheckListener.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy;
 import java.util.concurrent.TimeUnit;
 
 public abstract class AbstractTransactionalMessageCheckListener {
@@ -48,7 +49,7 @@ public Thread newThread(Runnable r) {
             thread.setName("Transaction-msg-check-thread");
             return thread;
         }
-    });
+    }, new CallerRunsPolicy());
 
     public AbstractTransactionalMessageCheckListener() {
     }

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageServiceImpl.java
Patch:
@@ -159,7 +159,8 @@ public void check(long transactionTimeout, int transactionCheckMax,
                     }
                     if (removeMap.containsKey(i)) {
                         log.info("Half offset {} has been committed/rolled back", i);
-                        removeMap.remove(i);
+                        Long removedOpOffset = removeMap.remove(i);
+                        doneOpOffset.add(removedOpOffset);
                     } else {
                         GetResult getResult = getHalfMsg(messageQueue, i);
                         MessageExt msgExt = getResult.getMsg();

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -275,6 +275,7 @@ private CompletableFuture<RemotingCommand> asyncSendMessage(ChannelHandlerContex
 
         msgInner.setBody(body);
         msgInner.setFlag(requestHeader.getFlag());
+        MessageAccessor.setProperties(msgInner, MessageDecoder.string2messageProperties(requestHeader.getProperties()));
         msgInner.setPropertiesString(requestHeader.getProperties());
         msgInner.setBornTimestamp(requestHeader.getBornTimestamp());
         msgInner.setBornHost(ctx.channel().remoteAddress());

File: store/src/test/java/org/apache/rocketmq/store/HATest.java
Patch:
@@ -144,10 +144,12 @@ public void testSemiSyncReplica() throws Exception {
 
         //shutdown slave, putMessage should return FLUSH_SLAVE_TIMEOUT
         slaveMessageStore.shutdown();
+        //wait to let master clean the slave's connection
+        Thread.sleep(masterMessageStoreConfig.getHaHousekeepingInterval() + 500);
         for (long i = 0; i < totalMsgs; i++) {
             CompletableFuture<PutMessageResult> putResultFuture = messageStore.asyncPutMessage(buildMessage());
             PutMessageResult result = putResultFuture.get();
-            assertEquals(PutMessageStatus.FLUSH_SLAVE_TIMEOUT, result.getPutMessageStatus());
+            assertEquals(PutMessageStatus.SLAVE_NOT_AVAILABLE, result.getPutMessageStatus());
         }
     }
 

File: store/src/main/java/org/apache/rocketmq/store/ha/HAService.java
Patch:
@@ -280,9 +280,9 @@ private void doWaitTransfer() {
                 if (!this.requestsRead.isEmpty()) {
                     for (CommitLog.GroupCommitRequest req : this.requestsRead) {
                         boolean transferOK = HAService.this.push2SlaveMaxOffset.get() >= req.getNextOffset();
-                        long waitUntillWhen = HAService.this.defaultMessageStore.getSystemClock().now()
+                        long waitUntilWhen = HAService.this.defaultMessageStore.getSystemClock().now()
                             + HAService.this.defaultMessageStore.getMessageStoreConfig().getSyncFlushTimeout();
-                        while (!transferOK && HAService.this.defaultMessageStore.getSystemClock().now() < waitUntillWhen) {
+                        while (!transferOK && HAService.this.defaultMessageStore.getSystemClock().now() < waitUntilWhen) {
                             this.notifyTransferObject.waitForRunning(1000);
                             transferOK = HAService.this.push2SlaveMaxOffset.get() >= req.getNextOffset();
                         }

File: client/src/test/java/org/apache/rocketmq/client/producer/DefaultMQProducerTest.java
Patch:
@@ -398,13 +398,13 @@ public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {
 
         try {
             producer.request(message, requestCallback, 3 * 1000L);
-            failBecauseExceptionWasNotThrown(RemotingSendRequestException.class);
-        } catch (RemotingSendRequestException e) {
+            failBecauseExceptionWasNotThrown(Exception.class);
+        } catch (Exception e) {
             ConcurrentHashMap<String, RequestResponseFuture> responseMap = RequestFutureTable.getRequestFutureTable();
             assertThat(responseMap).isNotNull();
             for (Map.Entry<String, RequestResponseFuture> entry : responseMap.entrySet()) {
                 RequestResponseFuture future = entry.getValue();
-                future.getRequestCallback().onException(new Throwable());
+                future.getRequestCallback().onException(e);
             }
         }
         countDownLatch.await(3000L, TimeUnit.MILLISECONDS);

File: broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageBridge.java
Patch:
@@ -141,6 +141,7 @@ private PullResult getMessage(String group, String topic, int queueId, long offs
                         getMessageResult.getStatus(), topic, group, offset);
                     break;
                 case NO_MESSAGE_IN_QUEUE:
+                case OFFSET_OVERFLOW_ONE:
                     pullStatus = PullStatus.NO_NEW_MSG;
                     LOGGER.warn("No new message. GetMessageStatus={}, topic={}, groupId={}, requestOffset={}",
                         getMessageResult.getStatus(), topic, group, offset);
@@ -149,7 +150,6 @@ private PullResult getMessage(String group, String topic, int queueId, long offs
                 case NO_MATCHED_LOGIC_QUEUE:
                 case OFFSET_FOUND_NULL:
                 case OFFSET_OVERFLOW_BADLY:
-                case OFFSET_OVERFLOW_ONE:
                 case OFFSET_TOO_SMALL:
                     pullStatus = PullStatus.OFFSET_ILLEGAL;
                     LOGGER.warn("Offset illegal. GetMessageStatus={}, topic={}, groupId={}, requestOffset={}",

File: common/src/main/java/org/apache/rocketmq/common/protocol/RequestCode.java
Patch:
@@ -78,6 +78,8 @@ public class RequestCode {
 
     public static final int UPDATE_GLOBAL_WHITE_ADDRS_CONFIG = 53;
 
+    public static final int GET_BROKER_CLUSTER_ACL_CONFIG = 54;
+
     public static final int PUT_KV_CONFIG = 100;
 
     public static final int GET_KV_CONFIG = 101;

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.srvutil.ServerUtil;
 import org.apache.rocketmq.tools.command.acl.ClusterAclConfigVersionListSubCommand;
+import org.apache.rocketmq.tools.command.acl.GetAccessConfigSubCommand;
 import org.apache.rocketmq.tools.command.acl.DeleteAccessConfigSubCommand;
 import org.apache.rocketmq.tools.command.acl.UpdateAccessConfigSubCommand;
 import org.apache.rocketmq.tools.command.acl.UpdateGlobalWhiteAddrSubCommand;
@@ -209,6 +210,7 @@ public static void initCommand() {
         initCommand(new DeleteAccessConfigSubCommand());
         initCommand(new ClusterAclConfigVersionListSubCommand());
         initCommand(new UpdateGlobalWhiteAddrSubCommand());
+        initCommand(new GetAccessConfigSubCommand());
     }
 
     private static void initLogback() throws JoranException {

File: broker/src/test/java/org/apache/rocketmq/broker/processor/ReplyMessageProcessorTest.java
Patch:
@@ -92,7 +92,6 @@ public void init() throws IllegalAccessException, NoSuchFieldException {
         Channel mockChannel = mock(Channel.class);
         when(mockChannel.remoteAddress()).thenReturn(new InetSocketAddress(1024));
         when(handlerContext.channel()).thenReturn(mockChannel);
-        when(messageStore.lookMessageByOffset(anyLong())).thenReturn(new MessageExt());
         replyMessageProcessor = new ReplyMessageProcessor(brokerController);
     }
 

File: client/src/test/java/org/apache/rocketmq/client/utils/MessageUtilsTest.java
Patch:
@@ -45,7 +45,7 @@ public void testCreateReplyMessage_Exception() throws MQClientException {
             Message msg = MessageUtil.createReplyMessage(createReplyMessage(null), new byte[] {'a'});
             failBecauseExceptionWasNotThrown(MQClientException.class);
         } catch (MQClientException e) {
-            assertThat(e).hasMessageContaining("create reply message fail.");
+            assertThat(e).hasMessageContaining("create reply message fail, requestMessage error, property[" + MessageConst.PROPERTY_CLUSTER + "] is null.");
         }
     }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java
Patch:
@@ -676,7 +676,6 @@ private long nextPullOffset(MessageQueue messageQueue) {
                     offset = 0;
                 }
             }
-            assignedMessageQueue.updateConsumeOffset(messageQueue, offset);
         }
         return offset;
     }

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java
Patch:
@@ -676,7 +676,6 @@ private long nextPullOffset(MessageQueue messageQueue) {
                     offset = 0;
                 }
             }
-            assignedMessageQueue.updateConsumeOffset(messageQueue, offset);
         }
         return offset;
     }

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingServer.java
Patch:
@@ -373,7 +373,7 @@ protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) throws Excep
                 switch (tlsMode) {
                     case DISABLED:
                         ctx.close();
-                        log.warn("Clients intend to establish a SSL connection while this server is running in SSL disabled mode");
+                        log.warn("Clients intend to establish an SSL connection while this server is running in SSL disabled mode");
                         break;
                     case PERMISSIVE:
                     case ENFORCING:
@@ -384,7 +384,7 @@ protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) throws Excep
                             log.info("Handlers prepended to channel pipeline to establish SSL connection");
                         } else {
                             ctx.close();
-                            log.error("Trying to establish a SSL connection but sslContext is null");
+                            log.error("Trying to establish an SSL connection but sslContext is null");
                         }
                         break;
 

File: openmessaging/src/main/java/io/openmessaging/rocketmq/consumer/LocalMessageCache.java
Patch:
@@ -73,7 +73,7 @@ long nextPullOffset(MessageQueue remoteQueue) {
                 pullOffsetTable.putIfAbsent(remoteQueue,
                     rocketmqPullConsumer.fetchConsumeOffset(remoteQueue, false));
             } catch (MQClientException e) {
-                log.error("A error occurred in fetch consume offset process.", e);
+                log.error("An error occurred in fetch consume offset process.", e);
             }
         }
         return pullOffsetTable.get(remoteQueue);
@@ -124,7 +124,7 @@ void ack(final String messageId) {
             try {
                 rocketmqPullConsumer.updateConsumeOffset(consumeRequest.getMessageQueue(), offset);
             } catch (MQClientException e) {
-                log.error("A error occurred in update consume offset process.", e);
+                log.error("An error occurred in update consume offset process.", e);
             }
         }
     }
@@ -135,7 +135,7 @@ void ack(final MessageQueue messageQueue, final ProcessQueue processQueue, final
         try {
             rocketmqPullConsumer.updateConsumeOffset(messageQueue, offset);
         } catch (MQClientException e) {
-            log.error("A error occurred in update consume offset process.", e);
+            log.error("An error occurred in update consume offset process.", e);
         }
     }
 

File: openmessaging/src/main/java/io/openmessaging/rocketmq/consumer/PullConsumerImpl.java
Patch:
@@ -167,7 +167,7 @@ public void doPullTask(final MessageQueue mq, final PullTaskContext context) {
                     }
                     localMessageCache.updatePullOffset(mq, pullResult.getNextBeginOffset());
                 } catch (Exception e) {
-                    log.error("A error occurred in pull message process.", e);
+                    log.error("An error occurred in pull message process.", e);
                 }
             }
         });

File: broker/src/test/java/org/apache/rocketmq/broker/client/ProducerManagerTest.java
Patch:
@@ -20,6 +20,7 @@
 import io.netty.channel.ChannelFuture;
 import java.lang.reflect.Field;
 import java.util.HashMap;
+import org.apache.rocketmq.remoting.protocol.LanguageCode;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -42,7 +43,7 @@ public class ProducerManagerTest {
     @Before
     public void init() {
         producerManager = new ProducerManager();
-        clientInfo = new ClientChannelInfo(channel);
+        clientInfo = new ClientChannelInfo(channel, "clientId", LanguageCode.JAVA, 0);
     }
 
     @Test

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientManager.java
Patch:
@@ -40,11 +40,11 @@ public static MQClientManager getInstance() {
         return instance;
     }
 
-    public MQClientInstance getAndCreateMQClientInstance(final ClientConfig clientConfig) {
-        return getAndCreateMQClientInstance(clientConfig, null);
+    public MQClientInstance getOrCreateMQClientInstance(final ClientConfig clientConfig) {
+        return getOrCreateMQClientInstance(clientConfig, null);
     }
 
-    public MQClientInstance getAndCreateMQClientInstance(final ClientConfig clientConfig, RPCHook rpcHook) {
+    public MQClientInstance getOrCreateMQClientInstance(final ClientConfig clientConfig, RPCHook rpcHook) {
         String clientId = clientConfig.buildMQClientId();
         MQClientInstance instance = this.factoryTable.get(clientId);
         if (null == instance) {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java
Patch:
@@ -272,7 +272,7 @@ public synchronized void start() throws MQClientException {
     }
 
     private void initMQClientFactory() throws MQClientException {
-        this.mQClientFactory = MQClientManager.getInstance().getAndCreateMQClientInstance(this.defaultLitePullConsumer, this.rpcHook);
+        this.mQClientFactory = MQClientManager.getInstance().getOrCreateMQClientInstance(this.defaultLitePullConsumer, this.rpcHook);
         boolean registerOK = mQClientFactory.registerConsumer(this.defaultLitePullConsumer.getConsumerGroup(), this);
         if (!registerOK) {
             this.serviceState = ServiceState.CREATE_JUST;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java
Patch:
@@ -634,7 +634,7 @@ public synchronized void start() throws MQClientException {
                     this.defaultMQPullConsumer.changeInstanceNameToPID();
                 }
 
-                this.mQClientFactory = MQClientManager.getInstance().getAndCreateMQClientInstance(this.defaultMQPullConsumer, this.rpcHook);
+                this.mQClientFactory = MQClientManager.getInstance().getOrCreateMQClientInstance(this.defaultMQPullConsumer, this.rpcHook);
 
                 this.rebalanceImpl.setConsumerGroup(this.defaultMQPullConsumer.getConsumerGroup());
                 this.rebalanceImpl.setMessageModel(this.defaultMQPullConsumer.getMessageModel());

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -579,7 +579,7 @@ public synchronized void start() throws MQClientException {
                     this.defaultMQPushConsumer.changeInstanceNameToPID();
                 }
 
-                this.mQClientFactory = MQClientManager.getInstance().getAndCreateMQClientInstance(this.defaultMQPushConsumer, this.rpcHook);
+                this.mQClientFactory = MQClientManager.getInstance().getOrCreateMQClientInstance(this.defaultMQPushConsumer, this.rpcHook);
 
                 this.rebalanceImpl.setConsumerGroup(this.defaultMQPushConsumer.getConsumerGroup());
                 this.rebalanceImpl.setMessageModel(this.defaultMQPushConsumer.getMessageModel());

File: client/src/test/java/org/apache/rocketmq/client/consumer/DefaultMQPullConsumerTest.java
Patch:
@@ -54,7 +54,7 @@
 @RunWith(MockitoJUnitRunner.class)
 public class DefaultMQPullConsumerTest {
     @Spy
-    private MQClientInstance mQClientFactory = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private MQClientInstance mQClientFactory = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     @Mock
     private MQClientAPIImpl mQClientAPIImpl;
     private DefaultMQPullConsumer pullConsumer;

File: client/src/test/java/org/apache/rocketmq/client/impl/factory/MQClientInstanceTest.java
Patch:
@@ -39,7 +39,7 @@
 
 @RunWith(MockitoJUnitRunner.class)
 public class MQClientInstanceTest {
-    private MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     private String topic = "FooBar";
     private String group = "FooBarGroup";
 

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/processor/ClusterTestRequestProcessorTest.java
Patch:
@@ -52,7 +52,7 @@
 public class ClusterTestRequestProcessorTest {
     private ClusterTestRequestProcessor clusterTestProcessor;
     private DefaultMQAdminExtImpl defaultMQAdminExtImpl;
-    private MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     private MQClientAPIImpl mQClientAPIImpl;
     private ChannelHandlerContext ctx;
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/exception/RemotingConnectException.java
Patch:
@@ -24,6 +24,6 @@ public RemotingConnectException(String addr) {
     }
 
     public RemotingConnectException(String addr, Throwable cause) {
-        super("connect to <" + addr + "> failed", cause);
+        super("connect to " + addr + " failed", cause);
     }
 }

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -116,7 +116,7 @@ public void start() throws MQClientException {
 
                 this.defaultMQAdminExt.changeInstanceNameToPID();
 
-                this.mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(this.defaultMQAdminExt, rpcHook);
+                this.mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(this.defaultMQAdminExt, rpcHook);
 
                 boolean registerOK = mqClientInstance.registerAdminExt(this.defaultMQAdminExt.getAdminExtGroup(), this);
                 if (!registerOK) {

File: tools/src/test/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtTest.java
Patch:
@@ -85,7 +85,7 @@
 public class DefaultMQAdminExtTest {
     private static DefaultMQAdminExt defaultMQAdminExt;
     private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;
-    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     private static MQClientAPIImpl mQClientAPIImpl;
     private static Properties properties = new Properties();
     private static TopicList topicList = new TopicList();

File: tools/src/test/java/org/apache/rocketmq/tools/command/CommandUtilTest.java
Patch:
@@ -48,7 +48,7 @@
 public class CommandUtilTest {
     private DefaultMQAdminExt defaultMQAdminExt;
     private DefaultMQAdminExtImpl defaultMQAdminExtImpl;
-    private MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     private MQClientAPIImpl mQClientAPIImpl;
 
     @Before

File: tools/src/test/java/org/apache/rocketmq/tools/command/broker/BrokerConsumeStatsSubCommadTest.java
Patch:
@@ -39,7 +39,6 @@
 import org.apache.rocketmq.tools.command.SubCommandException;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import static org.mockito.ArgumentMatchers.anyBoolean;
@@ -54,7 +53,7 @@ public class BrokerConsumeStatsSubCommadTest {
 
     private static DefaultMQAdminExt defaultMQAdminExt;
     private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;
-    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     private static MQClientAPIImpl mQClientAPIImpl;
 
     @BeforeClass

File: tools/src/test/java/org/apache/rocketmq/tools/command/broker/BrokerStatusSubCommandTest.java
Patch:
@@ -48,7 +48,7 @@
 public class BrokerStatusSubCommandTest {
     private static DefaultMQAdminExt defaultMQAdminExt;
     private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;
-    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     private static MQClientAPIImpl mQClientAPIImpl;
 
     @BeforeClass

File: tools/src/test/java/org/apache/rocketmq/tools/command/broker/CleanExpiredCQSubCommandTest.java
Patch:
@@ -46,7 +46,7 @@
 public class CleanExpiredCQSubCommandTest {
     private static DefaultMQAdminExt defaultMQAdminExt;
     private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;
-    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     private static MQClientAPIImpl mQClientAPIImpl;
 
     @BeforeClass

File: tools/src/test/java/org/apache/rocketmq/tools/command/broker/CleanUnusedTopicCommandTest.java
Patch:
@@ -46,7 +46,7 @@
 public class CleanUnusedTopicCommandTest {
     private static DefaultMQAdminExt defaultMQAdminExt;
     private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;
-    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     private static MQClientAPIImpl mQClientAPIImpl;
 
     @BeforeClass

File: tools/src/test/java/org/apache/rocketmq/tools/command/broker/GetBrokerConfigCommandTest.java
Patch:
@@ -48,7 +48,7 @@
 public class GetBrokerConfigCommandTest {
     private static DefaultMQAdminExt defaultMQAdminExt;
     private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;
-    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     private static MQClientAPIImpl mQClientAPIImpl;
 
     @BeforeClass

File: tools/src/test/java/org/apache/rocketmq/tools/command/broker/SendMsgStatusCommandTest.java
Patch:
@@ -41,7 +41,7 @@
 public class SendMsgStatusCommandTest {
     private static DefaultMQAdminExt defaultMQAdminExt;
     private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;
-    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     private static MQClientAPIImpl mQClientAPIImpl;
 
     @BeforeClass

File: tools/src/test/java/org/apache/rocketmq/tools/command/broker/UpdateBrokerConfigSubCommandTest.java
Patch:
@@ -44,7 +44,7 @@
 public class UpdateBrokerConfigSubCommandTest {
     private static DefaultMQAdminExt defaultMQAdminExt;
     private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;
-    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     private static MQClientAPIImpl mQClientAPIImpl;
 
     @BeforeClass

File: tools/src/test/java/org/apache/rocketmq/tools/command/connection/ConsumerConnectionSubCommandTest.java
Patch:
@@ -54,7 +54,7 @@
 public class ConsumerConnectionSubCommandTest {
     private static DefaultMQAdminExt defaultMQAdminExt;
     private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;
-    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     private static MQClientAPIImpl mQClientAPIImpl;
 
     @BeforeClass

File: tools/src/test/java/org/apache/rocketmq/tools/command/connection/ProducerConnectionSubCommandTest.java
Patch:
@@ -49,7 +49,7 @@
 public class ProducerConnectionSubCommandTest {
     private static DefaultMQAdminExt defaultMQAdminExt;
     private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;
-    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     private static MQClientAPIImpl mQClientAPIImpl;
 
     @BeforeClass

File: tools/src/test/java/org/apache/rocketmq/tools/command/consumer/ConsumerProgressSubCommandTest.java
Patch:
@@ -53,7 +53,7 @@
 public class ConsumerProgressSubCommandTest {
     private static DefaultMQAdminExt defaultMQAdminExt;
     private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;
-    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     private static MQClientAPIImpl mQClientAPIImpl;
 
     @BeforeClass

File: tools/src/test/java/org/apache/rocketmq/tools/command/consumer/ConsumerStatusSubCommandTest.java
Patch:
@@ -65,7 +65,7 @@
 public class ConsumerStatusSubCommandTest {
     private static DefaultMQAdminExt defaultMQAdminExt;
     private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;
-    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     private static MQClientAPIImpl mQClientAPIImpl;
 
     @BeforeClass

File: tools/src/test/java/org/apache/rocketmq/tools/command/message/QueryMsgByUniqueKeySubCommandTest.java
Patch:
@@ -61,7 +61,7 @@ public class QueryMsgByUniqueKeySubCommandTest {
 
     private static DefaultMQAdminExt defaultMQAdminExt;
     private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;
-    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
 
     private static MQClientAPIImpl mQClientAPIImpl;
     private static MQAdminImpl mQAdminImpl;

File: tools/src/test/java/org/apache/rocketmq/tools/command/namesrv/GetNamesrvConfigCommandTest.java
Patch:
@@ -41,7 +41,6 @@
 import org.apache.rocketmq.tools.command.SubCommandException;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.mockito.ArgumentMatchers;
 
@@ -52,7 +51,7 @@
 public class GetNamesrvConfigCommandTest {
     private static DefaultMQAdminExt defaultMQAdminExt;
     private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;
-    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     private static MQClientAPIImpl mQClientAPIImpl;
 
     @BeforeClass

File: tools/src/test/java/org/apache/rocketmq/tools/command/namesrv/UpdateKvConfigCommandTest.java
Patch:
@@ -39,7 +39,7 @@
 public class UpdateKvConfigCommandTest {
     private static DefaultMQAdminExt defaultMQAdminExt;
     private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;
-    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     private static MQClientAPIImpl mQClientAPIImpl;
 
     @BeforeClass

File: tools/src/test/java/org/apache/rocketmq/tools/command/namesrv/WipeWritePermSubCommandTest.java
Patch:
@@ -49,7 +49,7 @@
 public class WipeWritePermSubCommandTest {
     private static DefaultMQAdminExt defaultMQAdminExt;
     private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;
-    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     private static MQClientAPIImpl mQClientAPIImpl;
 
     @BeforeClass

File: tools/src/test/java/org/apache/rocketmq/tools/command/offset/GetConsumerStatusCommandTest.java
Patch:
@@ -47,7 +47,7 @@
 public class GetConsumerStatusCommandTest {
     private static DefaultMQAdminExt defaultMQAdminExt;
     private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;
-    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     private static MQClientAPIImpl mQClientAPIImpl;
 
     @BeforeClass

File: tools/src/test/java/org/apache/rocketmq/tools/command/offset/ResetOffsetByTimeCommandTest.java
Patch:
@@ -53,7 +53,7 @@
 public class ResetOffsetByTimeCommandTest {
     private static DefaultMQAdminExt defaultMQAdminExt;
     private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;
-    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     private static MQClientAPIImpl mQClientAPIImpl;
 
     @BeforeClass

File: tools/src/test/java/org/apache/rocketmq/tools/monitor/MonitorServiceTest.java
Patch:
@@ -69,7 +69,7 @@
 public class MonitorServiceTest {
     private static DefaultMQAdminExt defaultMQAdminExt;
     private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;
-    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
+    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());
     private static MQClientAPIImpl mQClientAPIImpl;
     private static MonitorConfig monitorConfig;
     private static MonitorListener monitorListener;

File: client/src/main/java/org/apache/rocketmq/client/consumer/MQPullConsumer.java
Patch:
@@ -169,4 +169,5 @@ void pullBlockIfNotFound(final MessageQueue mq, final String subExpression, fina
      */
     void sendMessageBack(MessageExt msg, int delayLevel, String brokerName, String consumerGroup)
         throws RemotingException, MQBrokerException, InterruptedException, MQClientException;
+
 }

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ProcessQueue.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
+
 import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
 import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.logging.InternalLogger;
@@ -431,4 +432,5 @@ public long getLastConsumeTimestamp() {
     public void setLastConsumeTimestamp(long lastConsumeTimestamp) {
         this.lastConsumeTimestamp = lastConsumeTimestamp;
     }
+
 }

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceImpl.java
Patch:
@@ -41,8 +41,10 @@
 import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;
 
 /**
- * Base class for rebalance algorithm
+ * This class will be removed in 2022, and a better implementation {@link RebalanceLitePullImpl} is recommend to use
+ * in the scenario of actively pulling messages.
  */
+@Deprecated
 public abstract class RebalanceImpl {
     protected static final InternalLogger log = ClientLogger.getLog();
     protected final ConcurrentMap<MessageQueue, ProcessQueue> processQueueTable = new ConcurrentHashMap<MessageQueue, ProcessQueue>(64);

File: example/src/main/java/org/apache/rocketmq/example/broadcast/PushConsumer.java
Patch:
@@ -50,4 +50,4 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
         consumer.start();
         System.out.printf("Broadcast Consumer Started.%n");
     }
-}
+}
\ No newline at end of file

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessValidator.java
Patch:
@@ -50,7 +50,7 @@ public PlainAccessValidator() {
     public AccessResource parse(RemotingCommand request, String remoteAddr) {
         PlainAccessResource accessResource = new PlainAccessResource();
         if (remoteAddr != null && remoteAddr.contains(":")) {
-            accessResource.setWhiteRemoteAddress(remoteAddr.split(":")[0]);
+            accessResource.setWhiteRemoteAddress(remoteAddr.substring(0, remoteAddr.lastIndexOf(':')));
         } else {
             accessResource.setWhiteRemoteAddress(remoteAddr);
         }

File: client/src/main/java/org/apache/rocketmq/client/MQAdmin.java
Patch:
@@ -82,7 +82,7 @@ void createTopic(String key, String newTopic, int queueNum, int topicSysFlag)
     long earliestMsgStoreTime(final MessageQueue mq) throws MQClientException;
 
     /**
-     * Query message according tto message id
+     * Query message according to message id
      *
      * @param offsetMsgId message id
      * @return message

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/PullAPIWrapper.java
Patch:
@@ -97,7 +97,7 @@ public PullResult processPullResult(final MessageQueue mq, final PullResult pull
 
             for (MessageExt msg : msgListFilterAgain) {
                 String traFlag = msg.getProperty(MessageConst.PROPERTY_TRANSACTION_PREPARED);
-                if (traFlag != null && Boolean.parseBoolean(traFlag)) {
+                if (Boolean.parseBoolean(traFlag)) {
                     msg.setTransactionId(msg.getProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX));
                 }
                 MessageAccessor.putProperty(msg, MessageConst.PROPERTY_MIN_OFFSET,

File: common/src/main/java/org/apache/rocketmq/common/MQVersion.java
Patch:
@@ -18,7 +18,7 @@
 
 public class MQVersion {
 
-    public static final int CURRENT_VERSION = Version.V4_5_1.ordinal();
+    public static final int CURRENT_VERSION = Version.V4_5_2.ordinal();
 
     public static String getVersionDesc(int value) {
         int length = Version.values().length;

File: common/src/main/java/org/apache/rocketmq/common/sysflag/MessageSysFlag.java
Patch:
@@ -23,6 +23,8 @@ public class MessageSysFlag {
     public final static int TRANSACTION_PREPARED_TYPE = 0x1 << 2;
     public final static int TRANSACTION_COMMIT_TYPE = 0x2 << 2;
     public final static int TRANSACTION_ROLLBACK_TYPE = 0x3 << 2;
+    public final static int BORNHOST_V6_FLAG = 0x1 << 4;
+    public final static int STOREHOSTADDRESS_V6_FLAG = 0x1 << 5;
 
     public static int getTransactionValue(final int flag) {
         return flag & TRANSACTION_ROLLBACK_TYPE;
@@ -35,4 +37,5 @@ public static int resetTransactionValue(final int flag, final int type) {
     public static int clearCompressedFlag(final int flag) {
         return flag & (~COMPRESSED_FLAG);
     }
+
 }

File: common/src/main/java/org/apache/rocketmq/common/sysflag/PullSysFlag.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.rocketmq.common.sysflag;
 
 public class PullSysFlag {
-    private final static int FLAG_COMMIT_OFFSET = 0x1 << 0;
+    private final static int FLAG_COMMIT_OFFSET = 0x1;
     private final static int FLAG_SUSPEND = 0x1 << 1;
     private final static int FLAG_SUBSCRIPTION = 0x1 << 2;
     private final static int FLAG_CLASS_FILTER = 0x1 << 3;

File: common/src/test/java/org/apache/rocketmq/common/protocol/route/TopicRouteDataTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.common.protocol;
+package org.apache.rocketmq.common.protocol.route;
 
 
 import org.apache.rocketmq.common.protocol.route.BrokerData;

File: store/src/main/java/org/apache/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -80,7 +80,7 @@ public class MessageStoreConfig {
     private int fileReservedTime = 72;
     // Flow control for ConsumeQueue
     private int putMsgIndexHightWater = 600000;
-    // The maximum size of a single log file,default is 512K
+    // The maximum size of message,default is 4M
     private int maxMessageSize = 1024 * 1024 * 4;
     // Whether check the CRC32 of the records consumed.
     // This ensures no on-the-wire or on-disk corruption to the messages occurred.

File: store/src/main/java/org/apache/rocketmq/store/ha/HAService.java
Patch:
@@ -374,6 +374,7 @@ private boolean reportSlaveMaxOffset(final long maxOffset) {
                 }
             }
 
+            lastWriteTimestamp = HAService.this.defaultMessageStore.getSystemClock().now();
             return !this.reportOffset.hasRemaining();
         }
 
@@ -406,7 +407,6 @@ private boolean processReadEvent() {
                 try {
                     int readSize = this.socketChannel.read(this.byteBufferRead);
                     if (readSize > 0) {
-                        lastWriteTimestamp = HAService.this.defaultMessageStore.getSystemClock().now();
                         readSizeZeroTimes = 0;
                         boolean result = this.dispatchReadRequest();
                         if (!result) {

File: store/src/test/java/org/apache/rocketmq/store/dledger/MessageStoreTestBase.java
Patch:
@@ -19,6 +19,7 @@
 import io.openmessaging.storage.dledger.DLedgerConfig;
 import io.openmessaging.storage.dledger.DLedgerServer;
 import java.io.File;
+import java.net.UnknownHostException;
 import java.util.Arrays;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.message.MessageDecoder;
@@ -118,7 +119,7 @@ protected DefaultMessageStore createMessageStore(String base, boolean createAbor
         return defaultMessageStore;
     }
 
-    protected void doPutMessages(MessageStore messageStore, String topic, int queueId, int num, long beginLogicsOffset) {
+    protected void doPutMessages(MessageStore messageStore, String topic, int queueId, int num, long beginLogicsOffset) throws UnknownHostException {
         for (int i = 0; i < num; i++) {
             MessageExtBrokerInner msgInner = buildMessage();
             msgInner.setTopic(topic);

File: example/src/main/java/org/apache/rocketmq/example/simple/LitePullConsumerSubscribe.java
Patch:
@@ -31,9 +31,7 @@ public static void main(String[] args) throws Exception {
         try {
             while (running) {
                 List<MessageExt> messageExts = litePullConsumer.poll();
-                if (messageExts != null) {
-                    System.out.printf("%s%n", messageExts);
-                }
+                System.out.printf("%s%n", messageExts);
             }
         } finally {
             litePullConsumer.shutdown();

File: client/src/main/java/org/apache/rocketmq/client/consumer/MQPullConsumerScheduleService.java
Patch:
@@ -31,7 +31,9 @@
 import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
 
 /**
- * Schedule service for pull consumer
+ * Schedule service for pull consumer.
+ * This Consumer will be removed in 2022, and a better implementation {@link
+ * DefaultLitePullConsumer} is recommend to use in the scenario of actively pulling messages.
  */
 public class MQPullConsumerScheduleService {
     private final InternalLogger log = ClientLogger.getLog();

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java
Patch:
@@ -758,7 +758,7 @@ public void run() {
                     if (subscriptionType == SubscriptionType.SUBSCRIBE) {
                         String topic = this.messageQueue.getTopic();
                         subscriptionData = rebalanceImpl.getSubscriptionInner().get(topic);
-                    } else{
+                    } else {
                         String topic = this.messageQueue.getTopic();
                         subscriptionData = FilterAPI.buildSubscriptionData(defaultLitePullConsumer.getConsumerGroup(),
                             topic, SubscriptionData.SUB_ALL);

File: example/src/main/java/org/apache/rocketmq/example/simple/LitePullConsumer.java
Patch:
@@ -24,12 +24,12 @@
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 
-public class LitePullConsumerTest {
+public class LitePullConsumer {
     public static void main(String[] args) throws Exception {
-        DefaultLitePullConsumer litePullConsumer = new DefaultLitePullConsumer("test");
+        DefaultLitePullConsumer litePullConsumer = new DefaultLitePullConsumer("please_rename_unique_group_name");
         litePullConsumer.setAutoCommit(false);
         litePullConsumer.start();
-        Collection<MessageQueue> mqSet = litePullConsumer.fetchMessageQueues("test400");
+        Collection<MessageQueue> mqSet = litePullConsumer.fetchMessageQueues("TopicTest");
         List<MessageQueue> list = new ArrayList<>(mqSet);
         Collection<MessageQueue> assginMq = Collections.singletonList(list.get(0));
         litePullConsumer.assign(assginMq);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/AssignedMessageQueue.java
Patch:
@@ -138,7 +138,6 @@ public void updateAssignedMessageQueue(String topic, Collection<MessageQueue> as
                 Map.Entry<MessageQueue, MessageQueueStat> next = it.next();
                 if (next.getKey().getTopic().equals(topic)) {
                     if (!assigned.contains(next.getKey())) {
-                        System.out.printf("MessageQueue-%s is removed %n", next.getKey());
                         next.getValue().getProcessQueue().setDropped(true);
                         it.remove();
                     }
@@ -167,7 +166,6 @@ private void addAssignedMessageQueue(Collection<MessageQueue> assigned) {
             if (!this.assignedMessageQueueState.containsKey(messageQueue)) {
                 MessageQueueStat messageQueueStat;
                 if (rebalanceImpl != null && rebalanceImpl.getProcessQueueTable().get(messageQueue) != null) {
-                    System.out.printf("MessageQueue-%s is added %n", messageQueue);
                     messageQueueStat = new MessageQueueStat(messageQueue, rebalanceImpl.getProcessQueueTable().get(messageQueue));
                 } else {
                     ProcessQueue processQueue = new ProcessQueue();

File: example/src/main/java/org/apache/rocketmq/example/broadcast/PushConsumer.java
Patch:
@@ -50,4 +50,4 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
         consumer.start();
         System.out.printf("Broadcast Consumer Started.%n");
     }
-}
+}
\ No newline at end of file

File: common/src/test/java/org/apache/rocketmq/common/protocol/route/TopicRouteDataTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.common.protocol;
+package org.apache.rocketmq.common.protocol.route;
 
 
 import org.apache.rocketmq.common.protocol.route.BrokerData;

File: client/src/main/java/org/apache/rocketmq/client/consumer/store/RemoteBrokerOffsetStore.java
Patch:
@@ -204,7 +204,6 @@ public void updateConsumeOffsetToBroker(MessageQueue mq, long offset, boolean is
         MQBrokerException, InterruptedException, MQClientException {
         FindBrokerResult findBrokerResult = this.mQClientFactory.findBrokerAddressInAdmin(mq.getBrokerName());
         if (null == findBrokerResult) {
-
             this.mQClientFactory.updateTopicRouteInfoFromNameServer(mq.getTopic());
             findBrokerResult = this.mQClientFactory.findBrokerAddressInAdmin(mq.getBrokerName());
         }

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java
Patch:
@@ -68,7 +68,7 @@
 
 public class DefaultMQPullConsumerImpl implements MQConsumerInner {
     private final InternalLogger log = ClientLogger.getLog();
-    protected final DefaultMQPullConsumer defaultMQPullConsumer;
+    private final DefaultMQPullConsumer defaultMQPullConsumer;
     private final long consumerStartTimestamp = System.currentTimeMillis();
     private final RPCHook rpcHook;
     private final ArrayList<ConsumeMessageHook> consumeMessageHookList = new ArrayList<ConsumeMessageHook>();
@@ -77,7 +77,7 @@ public class DefaultMQPullConsumerImpl implements MQConsumerInner {
     protected MQClientInstance mQClientFactory;
     private PullAPIWrapper pullAPIWrapper;
     private OffsetStore offsetStore;
-    protected RebalanceImpl rebalanceImpl = new RebalancePullImpl(this);
+    private RebalanceImpl rebalanceImpl = new RebalancePullImpl(this);
 
     public DefaultMQPullConsumerImpl(final DefaultMQPullConsumer defaultMQPullConsumer, final RPCHook rpcHook) {
         this.defaultMQPullConsumer = defaultMQPullConsumer;

File: store/src/main/java/org/apache/rocketmq/store/ha/HAService.java
Patch:
@@ -374,6 +374,7 @@ private boolean reportSlaveMaxOffset(final long maxOffset) {
                 }
             }
 
+            lastWriteTimestamp = HAService.this.defaultMessageStore.getSystemClock().now();
             return !this.reportOffset.hasRemaining();
         }
 
@@ -406,7 +407,6 @@ private boolean processReadEvent() {
                 try {
                     int readSize = this.socketChannel.read(this.byteBufferRead);
                     if (readSize > 0) {
-                        lastWriteTimestamp = HAService.this.defaultMessageStore.getSystemClock().now();
                         readSizeZeroTimes = 0;
                         boolean result = this.dispatchReadRequest();
                         if (!result) {

File: client/src/main/java/org/apache/rocketmq/client/MQAdmin.java
Patch:
@@ -82,7 +82,7 @@ void createTopic(String key, String newTopic, int queueNum, int topicSysFlag)
     long earliestMsgStoreTime(final MessageQueue mq) throws MQClientException;
 
     /**
-     * Query message according tto message id
+     * Query message according to message id
      *
      * @param offsetMsgId message id
      * @return message

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultLiteMQPullConsumer.java
Patch:
@@ -42,7 +42,7 @@ public class DefaultLiteMQPullConsumer extends DefaultMQPullConsumer implements
     /**
      * Maximum commit offset interval time in seconds.
      */
-    private long autoCommitInterval = 20;
+    private long autoCommitInterval = 5;
 
     public DefaultLiteMQPullConsumer(String consumerGroup, RPCHook rpcHook) {
         this.setConsumerGroup(consumerGroup);
@@ -55,7 +55,7 @@ public DefaultLiteMQPullConsumer(String consumerGroup) {
     }
 
     @Override
-    public void start() throws MQClientException{
+    public void start() throws MQClientException {
         this.liteMQPullConsumer.start();
     }
 
@@ -95,7 +95,7 @@ public void resume(Collection<MessageQueue> messageQueues) {
 
     @Override
     public void commitSync() {
-        this.liteMQPullConsumer.commit();
+        this.liteMQPullConsumer.commitSync();
     }
 
     public long getConsumeTimeout() {

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPullConsumer.java
Patch:
@@ -16,9 +16,7 @@
  */
 package org.apache.rocketmq.client.consumer;
 
-import java.util.Collection;
 import java.util.HashSet;
-import java.util.List;
 import java.util.Set;
 import org.apache.rocketmq.client.ClientConfig;
 import org.apache.rocketmq.client.QueryResult;
@@ -40,6 +38,7 @@
  * Default pulling consumer
  */
 public class DefaultMQPullConsumer extends ClientConfig implements MQPullConsumer {
+
     protected final transient DefaultMQPullConsumerImpl defaultMQPullConsumerImpl;
 
     /**

File: client/src/main/java/org/apache/rocketmq/client/consumer/MQPullConsumer.java
Patch:
@@ -16,8 +16,6 @@
  */
 package org.apache.rocketmq.client.consumer;
 
-import java.util.Collection;
-import java.util.List;
 import java.util.Set;
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -319,7 +319,7 @@ public boolean initialize() throws CloneNotSupportedException {
 
             this.registerProcessor();
 
-            final long initialDelay = UtilAll.computNextMorningTimeMillis() - System.currentTimeMillis();
+            final long initialDelay = UtilAll.computeNextMorningTimeMillis() - System.currentTimeMillis();
             final long period = 1000 * 60 * 60 * 24;
             this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
                 @Override

File: common/src/main/java/org/apache/rocketmq/common/ServiceThread.java
Patch:
@@ -78,8 +78,8 @@ public void shutdown(final boolean interrupt) {
             if (!this.thread.isDaemon()) {
                 this.thread.join(this.getJointime());
             }
-            long eclipseTime = System.currentTimeMillis() - beginTime;
-            log.info("join thread " + this.getServiceName() + " eclipse time(ms) " + eclipseTime + " "
+            long elapsedTime = System.currentTimeMillis() - beginTime;
+            log.info("join thread " + this.getServiceName() + " elapsed time(ms) " + elapsedTime + " "
                 + this.getJointime());
         } catch (InterruptedException e) {
             log.error("Interrupted", e);

File: common/src/main/java/org/apache/rocketmq/common/stats/MomentStatsItem.java
Patch:
@@ -51,7 +51,7 @@ public void run() {
                 } catch (Throwable e) {
                 }
             }
-        }, Math.abs(UtilAll.computNextMinutesTimeMillis() - System.currentTimeMillis()), 1000 * 60 * 5, TimeUnit.MILLISECONDS);
+        }, Math.abs(UtilAll.computeNextMinutesTimeMillis() - System.currentTimeMillis()), 1000 * 60 * 5, TimeUnit.MILLISECONDS);
     }
 
     public void printAtMinutes() {

File: common/src/main/java/org/apache/rocketmq/common/stats/MomentStatsItemSet.java
Patch:
@@ -58,7 +58,7 @@ public void run() {
                 } catch (Throwable ignored) {
                 }
             }
-        }, Math.abs(UtilAll.computNextMinutesTimeMillis() - System.currentTimeMillis()), 1000 * 60 * 5, TimeUnit.MILLISECONDS);
+        }, Math.abs(UtilAll.computeNextMinutesTimeMillis() - System.currentTimeMillis()), 1000 * 60 * 5, TimeUnit.MILLISECONDS);
     }
 
     private void printAtMinutes() {

File: common/src/main/java/org/apache/rocketmq/common/stats/StatsItem.java
Patch:
@@ -127,7 +127,7 @@ public void run() {
                 } catch (Throwable ignored) {
                 }
             }
-        }, Math.abs(UtilAll.computNextMinutesTimeMillis() - System.currentTimeMillis()), 1000 * 60, TimeUnit.MILLISECONDS);
+        }, Math.abs(UtilAll.computeNextMinutesTimeMillis() - System.currentTimeMillis()), 1000 * 60, TimeUnit.MILLISECONDS);
 
         this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
             @Override
@@ -137,7 +137,7 @@ public void run() {
                 } catch (Throwable ignored) {
                 }
             }
-        }, Math.abs(UtilAll.computNextHourTimeMillis() - System.currentTimeMillis()), 1000 * 60 * 60, TimeUnit.MILLISECONDS);
+        }, Math.abs(UtilAll.computeNextHourTimeMillis() - System.currentTimeMillis()), 1000 * 60 * 60, TimeUnit.MILLISECONDS);
 
         this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
             @Override
@@ -147,7 +147,7 @@ public void run() {
                 } catch (Throwable ignored) {
                 }
             }
-        }, Math.abs(UtilAll.computNextMorningTimeMillis() - System.currentTimeMillis()) - 2000, 1000 * 60 * 60 * 24, TimeUnit.MILLISECONDS);
+        }, Math.abs(UtilAll.computeNextMorningTimeMillis() - System.currentTimeMillis()) - 2000, 1000 * 60 * 60 * 24, TimeUnit.MILLISECONDS);
     }
 
     public void samplingInSeconds() {

File: common/src/main/java/org/apache/rocketmq/common/stats/StatsItemSet.java
Patch:
@@ -81,7 +81,7 @@ public void run() {
                 } catch (Throwable ignored) {
                 }
             }
-        }, Math.abs(UtilAll.computNextMinutesTimeMillis() - System.currentTimeMillis()), 1000 * 60, TimeUnit.MILLISECONDS);
+        }, Math.abs(UtilAll.computeNextMinutesTimeMillis() - System.currentTimeMillis()), 1000 * 60, TimeUnit.MILLISECONDS);
 
         this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
             @Override
@@ -91,7 +91,7 @@ public void run() {
                 } catch (Throwable ignored) {
                 }
             }
-        }, Math.abs(UtilAll.computNextHourTimeMillis() - System.currentTimeMillis()), 1000 * 60 * 60, TimeUnit.MILLISECONDS);
+        }, Math.abs(UtilAll.computeNextHourTimeMillis() - System.currentTimeMillis()), 1000 * 60 * 60, TimeUnit.MILLISECONDS);
 
         this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
             @Override
@@ -101,7 +101,7 @@ public void run() {
                 } catch (Throwable ignored) {
                 }
             }
-        }, Math.abs(UtilAll.computNextMorningTimeMillis() - System.currentTimeMillis()), 1000 * 60 * 60 * 24, TimeUnit.MILLISECONDS);
+        }, Math.abs(UtilAll.computeNextMorningTimeMillis() - System.currentTimeMillis()), 1000 * 60 * 60 * 24, TimeUnit.MILLISECONDS);
     }
 
     private void samplingInSeconds() {

File: common/src/test/java/org/apache/rocketmq/common/protocol/QueryConsumeTimeSpanBodyTest.java
Patch:
@@ -103,8 +103,8 @@ private List<QueueTimeSpan> newUniqueConsumeTimeSpanSet() {
         List<QueueTimeSpan> queueTimeSpans = new ArrayList<QueueTimeSpan>();
         QueueTimeSpan queueTimeSpan = new QueueTimeSpan();
         queueTimeSpan.setMinTimeStamp(System.currentTimeMillis());
-        queueTimeSpan.setMaxTimeStamp(UtilAll.computNextHourTimeMillis());
-        queueTimeSpan.setConsumeTimeStamp(UtilAll.computNextMinutesTimeMillis());
+        queueTimeSpan.setMaxTimeStamp(UtilAll.computeNextHourTimeMillis());
+        queueTimeSpan.setConsumeTimeStamp(UtilAll.computeNextMinutesTimeMillis());
         queueTimeSpan.setDelayTime(5000l);
         MessageQueue messageQueue = new MessageQueue(UUID.randomUUID().toString(), UUID.randomUUID().toString(), new Random().nextInt());
         queueTimeSpan.setMessageQueue(messageQueue);

File: remoting/src/main/java/org/apache/rocketmq/remoting/common/ServiceThread.java
Patch:
@@ -62,8 +62,8 @@ public void shutdown(final boolean interrupt) {
 
             long beginTime = System.currentTimeMillis();
             this.thread.join(this.getJointime());
-            long eclipseTime = System.currentTimeMillis() - beginTime;
-            log.info("join thread " + this.getServiceName() + " eclipse time(ms) " + eclipseTime + " "
+            long elapsedTime = System.currentTimeMillis() - beginTime;
+            log.info("join thread " + this.getServiceName() + " elapsed time(ms) " + elapsedTime + " "
                 + this.getJointime());
         } catch (InterruptedException e) {
             log.error("Interrupted", e);

File: store/src/main/java/org/apache/rocketmq/store/AllocateMappedFileService.java
Patch:
@@ -176,10 +176,10 @@ private boolean mmapOperation() {
                     mappedFile = new MappedFile(req.getFilePath(), req.getFileSize());
                 }
 
-                long eclipseTime = UtilAll.computeEclipseTimeMilliseconds(beginTime);
-                if (eclipseTime > 10) {
+                long elapsedTime = UtilAll.computeElapsedTimeMilliseconds(beginTime);
+                if (elapsedTime > 10) {
                     int queueSize = this.requestQueue.size();
-                    log.warn("create mappedFile spent time(ms) " + eclipseTime + " queue size " + queueSize
+                    log.warn("create mappedFile spent time(ms) " + elapsedTime + " queue size " + queueSize
                         + " " + req.getFilePath() + " " + req.getFileSize());
                 }
 

File: store/src/main/java/org/apache/rocketmq/store/MappedFile.java
Patch:
@@ -448,7 +448,7 @@ public boolean destroy(final long intervalForcibly) {
                 log.info("delete file[REF:" + this.getRefCount() + "] " + this.fileName
                     + (result ? " OK, " : " Failed, ") + "W:" + this.getWrotePosition() + " M:"
                     + this.getFlushedPosition() + ", "
-                    + UtilAll.computeEclipseTimeMilliseconds(beginTime));
+                    + UtilAll.computeElapsedTimeMilliseconds(beginTime));
             } catch (Exception e) {
                 log.warn("close file channel " + this.fileName + " Failed. ", e);
             }

File: store/src/main/java/org/apache/rocketmq/store/index/IndexFile.java
Patch:
@@ -77,7 +77,7 @@ public void flush() {
             this.indexHeader.updateByteBuffer();
             this.mappedByteBuffer.force();
             this.mappedFile.release();
-            log.info("flush index file eclipse time(ms) " + (System.currentTimeMillis() - beginTime));
+            log.info("flush index file elapsed time(ms) " + (System.currentTimeMillis() - beginTime));
         }
     }
 

File: broker/src/test/java/org/apache/rocketmq/broker/filter/MessageStoreWithFilterTest.java
Patch:
@@ -122,8 +122,8 @@ public MessageExtBrokerInner buildMessage() {
     public MessageStoreConfig buildStoreConfig(int commitLogFileSize, int cqFileSize,
                                                boolean enableCqExt, int cqExtFileSize) {
         MessageStoreConfig messageStoreConfig = new MessageStoreConfig();
-        messageStoreConfig.setMapedFileSizeCommitLog(commitLogFileSize);
-        messageStoreConfig.setMapedFileSizeConsumeQueue(cqFileSize);
+        messageStoreConfig.setMappedFileSizeCommitLog(commitLogFileSize);
+        messageStoreConfig.setMappedFileSizeConsumeQueue(cqFileSize);
         messageStoreConfig.setMappedFileSizeConsumeQueueExt(cqExtFileSize);
         messageStoreConfig.setMessageIndexEnable(false);
         messageStoreConfig.setEnableConsumeQueueExt(enableCqExt);

File: store/src/main/java/org/apache/rocketmq/store/AllocateMappedFileService.java
Patch:
@@ -185,7 +185,7 @@ private boolean mmapOperation() {
 
                 // pre write mappedFile
                 if (mappedFile.getFileSize() >= this.messageStore.getMessageStoreConfig()
-                    .getMapedFileSizeCommitLog()
+                    .getMappedFileSizeCommitLog()
                     &&
                     this.messageStore.getMessageStoreConfig().isWarmMapedFileEnable()) {
                     mappedFile.warmMappedFile(this.messageStore.getMessageStoreConfig().getFlushDiskType(),

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -1144,7 +1144,7 @@ public ConsumeQueue findConsumeQueue(String topic, int queueId) {
                 topic,
                 queueId,
                 StorePathConfigHelper.getStorePathConsumeQueue(this.messageStoreConfig.getStorePathRootDir()),
-                this.getMessageStoreConfig().getMapedFileSizeConsumeQueue(),
+                this.getMessageStoreConfig().getMappedFileSizeConsumeQueue(),
                 this);
             ConsumeQueue oldLogic = map.putIfAbsent(queueId, newLogic);
             if (oldLogic != null) {
@@ -1309,7 +1309,7 @@ private boolean loadConsumeQueue() {
                             topic,
                             queueId,
                             StorePathConfigHelper.getStorePathConsumeQueue(this.messageStoreConfig.getStorePathRootDir()),
-                            this.getMessageStoreConfig().getMapedFileSizeConsumeQueue(),
+                            this.getMessageStoreConfig().getMappedFileSizeConsumeQueue(),
                             this);
                         this.putConsumeQueue(topic, queueId, logic);
                         if (!logic.load()) {

File: store/src/main/java/org/apache/rocketmq/store/TransientStorePool.java
Patch:
@@ -39,7 +39,7 @@ public class TransientStorePool {
     public TransientStorePool(final MessageStoreConfig storeConfig) {
         this.storeConfig = storeConfig;
         this.poolSize = storeConfig.getTransientStorePoolSize();
-        this.fileSize = storeConfig.getMapedFileSizeCommitLog();
+        this.fileSize = storeConfig.getMappedFileSizeCommitLog();
         this.availableBuffers = new ConcurrentLinkedDeque<>();
     }
 

File: store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java
Patch:
@@ -80,7 +80,7 @@ public DLedgerCommitLog(final DefaultMessageStore defaultMessageStore) {
         dLedgerConfig.setGroup(defaultMessageStore.getMessageStoreConfig().getdLegerGroup());
         dLedgerConfig.setPeers(defaultMessageStore.getMessageStoreConfig().getdLegerPeers());
         dLedgerConfig.setStoreBaseDir(defaultMessageStore.getMessageStoreConfig().getStorePathRootDir());
-        dLedgerConfig.setMappedFileSizeForEntryData(defaultMessageStore.getMessageStoreConfig().getMapedFileSizeCommitLog());
+        dLedgerConfig.setMappedFileSizeForEntryData(defaultMessageStore.getMessageStoreConfig().getMappedFileSizeCommitLog());
         dLedgerConfig.setDeleteWhen(defaultMessageStore.getMessageStoreConfig().getDeleteWhen());
         dLedgerConfig.setFileReservedHours(defaultMessageStore.getMessageStoreConfig().getFileReservedTime() + 1);
         id = Integer.valueOf(dLedgerConfig.getSelfId().substring(1)) + 1;
@@ -514,7 +514,7 @@ public SelectMappedBufferResult getMessage(final long offset, final int size) {
 
     @Override
     public long rollNextFile(final long offset) {
-        int mappedFileSize = this.defaultMessageStore.getMessageStoreConfig().getMapedFileSizeCommitLog();
+        int mappedFileSize = this.defaultMessageStore.getMessageStoreConfig().getMappedFileSizeCommitLog();
         return offset + mappedFileSize - offset % mappedFileSize;
     }
 

File: store/src/main/java/org/apache/rocketmq/store/ha/HAConnection.java
Patch:
@@ -227,7 +227,7 @@ public void run() {
                             masterOffset =
                                 masterOffset
                                     - (masterOffset % HAConnection.this.haService.getDefaultMessageStore().getMessageStoreConfig()
-                                    .getMapedFileSizeCommitLog());
+                                    .getMappedFileSizeCommitLog());
 
                             if (masterOffset < 0) {
                                 masterOffset = 0;

File: store/src/test/java/org/apache/rocketmq/store/AppendCallbackTest.java
Patch:
@@ -47,8 +47,8 @@ public class AppendCallbackTest {
     @Before
     public void init() throws Exception {
         MessageStoreConfig messageStoreConfig = new MessageStoreConfig();
-        messageStoreConfig.setMapedFileSizeCommitLog(1024 * 8);
-        messageStoreConfig.setMapedFileSizeConsumeQueue(1024 * 4);
+        messageStoreConfig.setMappedFileSizeCommitLog(1024 * 8);
+        messageStoreConfig.setMappedFileSizeConsumeQueue(1024 * 4);
         messageStoreConfig.setMaxHashSlotNum(100);
         messageStoreConfig.setMaxIndexNum(100 * 10);
         messageStoreConfig.setStorePathRootDir(System.getProperty("user.home") + File.separator + "unitteststore");

File: store/src/test/java/org/apache/rocketmq/store/BatchPutMessageTest.java
Patch:
@@ -66,8 +66,8 @@ public void destory() {
 
     private MessageStore buildMessageStore() throws Exception {
         MessageStoreConfig messageStoreConfig = new MessageStoreConfig();
-        messageStoreConfig.setMapedFileSizeCommitLog(1024 * 8);
-        messageStoreConfig.setMapedFileSizeConsumeQueue(1024 * 4);
+        messageStoreConfig.setMappedFileSizeCommitLog(1024 * 8);
+        messageStoreConfig.setMappedFileSizeConsumeQueue(1024 * 4);
         messageStoreConfig.setMaxHashSlotNum(100);
         messageStoreConfig.setMaxIndexNum(100 * 10);
         messageStoreConfig.setFlushDiskType(FlushDiskType.SYNC_FLUSH);

File: store/src/test/java/org/apache/rocketmq/store/ConsumeQueueTest.java
Patch:
@@ -86,8 +86,8 @@ public MessageExtBrokerInner buildMessage() {
     public MessageStoreConfig buildStoreConfig(int commitLogFileSize, int cqFileSize,
         boolean enableCqExt, int cqExtFileSize) {
         MessageStoreConfig messageStoreConfig = new MessageStoreConfig();
-        messageStoreConfig.setMapedFileSizeCommitLog(commitLogFileSize);
-        messageStoreConfig.setMapedFileSizeConsumeQueue(cqFileSize);
+        messageStoreConfig.setMappedFileSizeCommitLog(commitLogFileSize);
+        messageStoreConfig.setMappedFileSizeConsumeQueue(cqFileSize);
         messageStoreConfig.setMappedFileSizeConsumeQueueExt(cqExtFileSize);
         messageStoreConfig.setMessageIndexEnable(false);
         messageStoreConfig.setEnableConsumeQueueExt(enableCqExt);

File: store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreCleanFilesTest.java
Patch:
@@ -281,7 +281,7 @@ private int getFileCountConsumeQueue() {
     }
 
     private int getMsgCountPerConsumeQueueMappedFile() {
-        int size = messageStore.getMessageStoreConfig().getMapedFileSizeConsumeQueue();
+        int size = messageStore.getMessageStoreConfig().getMappedFileSizeConsumeQueue();
         return size / CQ_STORE_UNIT_SIZE;// 7 in this case
     }
 
@@ -322,8 +322,8 @@ private void expireFiles(MappedFileQueue commitLogQueue, int expireCount) {
 
     private void initMessageStore(String deleteWhen, int diskMaxUsedSpaceRatio, double diskSpaceCleanForciblyRatio) throws Exception {
         MessageStoreConfig messageStoreConfig = new MessageStoreConfigForTest();
-        messageStoreConfig.setMapedFileSizeCommitLog(mappedFileSize);
-        messageStoreConfig.setMapedFileSizeConsumeQueue(mappedFileSize);
+        messageStoreConfig.setMappedFileSizeCommitLog(mappedFileSize);
+        messageStoreConfig.setMappedFileSizeConsumeQueue(mappedFileSize);
         messageStoreConfig.setMaxHashSlotNum(10000);
         messageStoreConfig.setMaxIndexNum(100 * 100);
         messageStoreConfig.setFlushDiskType(FlushDiskType.SYNC_FLUSH);

File: store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreShutDownTest.java
Patch:
@@ -64,8 +64,8 @@ public void destroy() {
 
     public DefaultMessageStore buildMessageStore() throws Exception {
         MessageStoreConfig messageStoreConfig = new MessageStoreConfig();
-        messageStoreConfig.setMapedFileSizeCommitLog(1024 * 1024 * 10);
-        messageStoreConfig.setMapedFileSizeConsumeQueue(1024 * 1024 * 10);
+        messageStoreConfig.setMappedFileSizeCommitLog(1024 * 1024 * 10);
+        messageStoreConfig.setMappedFileSizeConsumeQueue(1024 * 1024 * 10);
         messageStoreConfig.setMaxHashSlotNum(10000);
         messageStoreConfig.setMaxIndexNum(100 * 100);
         messageStoreConfig.setFlushDiskType(FlushDiskType.SYNC_FLUSH);

File: store/src/test/java/org/apache/rocketmq/store/dledger/MixCommitlogTest.java
Patch:
@@ -36,7 +36,7 @@ public void testFallBehindCQ() throws Exception {
         {
             DefaultMessageStore originalStore = createMessageStore(base, false);
             doPutMessages(originalStore, topic, 0, 1000, 0);
-            Assert.assertEquals(11, originalStore.getMaxPhyOffset()/originalStore.getMessageStoreConfig().getMapedFileSizeCommitLog());
+            Assert.assertEquals(11, originalStore.getMaxPhyOffset()/originalStore.getMessageStoreConfig().getMappedFileSizeCommitLog());
             Thread.sleep(500);
             Assert.assertEquals(0, originalStore.getMinOffsetInQueue(topic, 0));
             Assert.assertEquals(1000, originalStore.getMaxOffsetInQueue(topic, 0));
@@ -83,7 +83,7 @@ public void testPutAndGet() throws Exception {
             Assert.assertEquals(1000, originalStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, originalStore.dispatchBehindBytes());
             dividedOffset = originalStore.getCommitLog().getMaxOffset();
-            dividedOffset = dividedOffset - dividedOffset % originalStore.getMessageStoreConfig().getMapedFileSizeCommitLog() + originalStore.getMessageStoreConfig().getMapedFileSizeCommitLog();
+            dividedOffset = dividedOffset - dividedOffset % originalStore.getMessageStoreConfig().getMappedFileSizeCommitLog() + originalStore.getMessageStoreConfig().getMappedFileSizeCommitLog();
             doGetMessages(originalStore, topic, 0, 1000, 0);
             originalStore.shutdown();
         }
@@ -144,7 +144,7 @@ public void testDeleteExpiredFiles() throws Exception {
             Assert.assertEquals(1000, originalStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, originalStore.dispatchBehindBytes());
             dividedOffset = originalStore.getCommitLog().getMaxOffset();
-            dividedOffset = dividedOffset - dividedOffset % originalStore.getMessageStoreConfig().getMapedFileSizeCommitLog() + originalStore.getMessageStoreConfig().getMapedFileSizeCommitLog();
+            dividedOffset = dividedOffset - dividedOffset % originalStore.getMessageStoreConfig().getMappedFileSizeCommitLog() + originalStore.getMessageStoreConfig().getMappedFileSizeCommitLog();
             originalStore.shutdown();
         }
         long maxPhysicalOffset;

File: store/src/test/java/org/apache/rocketmq/store/schedule/ScheduleMessageServiceTest.java
Patch:
@@ -91,8 +91,8 @@ public class ScheduleMessageServiceTest {
     public void init() throws Exception {
         messageStoreConfig = new MessageStoreConfig();
         messageStoreConfig.setMessageDelayLevel(testMessageDelayLevel);
-        messageStoreConfig.setMapedFileSizeCommitLog(commitLogFileSize);
-        messageStoreConfig.setMapedFileSizeConsumeQueue(cqFileSize);
+        messageStoreConfig.setMappedFileSizeCommitLog(commitLogFileSize);
+        messageStoreConfig.setMappedFileSizeConsumeQueue(cqFileSize);
         messageStoreConfig.setMappedFileSizeConsumeQueueExt(cqExtFileSize);
         messageStoreConfig.setMessageIndexEnable(false);
         messageStoreConfig.setEnableConsumeQueueExt(true);

File: test/src/test/java/org/apache/rocketmq/test/base/IntegrationTestBase.java
Patch:
@@ -135,7 +135,7 @@ public static BrokerController createAndStartBroker(String nsAddr) {
         brokerConfig.setEnablePropertyFilter(true);
         storeConfig.setStorePathRootDir(baseDir);
         storeConfig.setStorePathCommitLog(baseDir + SEP + "commitlog");
-        storeConfig.setMapedFileSizeCommitLog(COMMIT_LOG_SIZE);
+        storeConfig.setMappedFileSizeCommitLog(COMMIT_LOG_SIZE);
         storeConfig.setMaxIndexNum(INDEX_NUM);
         storeConfig.setMaxHashSlotNum(INDEX_NUM * 4);
         return createAndStartBroker(storeConfig, brokerConfig);

File: test/src/test/java/org/apache/rocketmq/test/base/dledger/DLedgerProduceAndConsumeIT.java
Patch:
@@ -35,7 +35,6 @@
 import org.apache.rocketmq.test.factory.ConsumerFactory;
 import org.apache.rocketmq.test.factory.ProducerFactory;
 import org.junit.Assert;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import static org.apache.rocketmq.test.base.IntegrationTestBase.nextPort;
@@ -58,7 +57,7 @@ public MessageStoreConfig buildStoreConfig(String brokerName, String peers, Stri
         storeConfig.setStorePathRootDir(baseDir);
         storeConfig.setStorePathCommitLog(baseDir + SEP + "commitlog");
         storeConfig.setHaListenPort(nextPort());
-        storeConfig.setMapedFileSizeCommitLog(10 * 1024 * 1024);
+        storeConfig.setMappedFileSizeCommitLog(10 * 1024 * 1024);
         storeConfig.setEnableDLegerCommitLog(true);
         storeConfig.setdLegerGroup(brokerName);
         storeConfig.setdLegerSelfId(selfId);

File: acl/src/main/java/org/apache/rocketmq/acl/plain/RemoteAddressStrategyFactory.java
Patch:
@@ -41,7 +41,7 @@ public RemoteAddressStrategy getRemoteAddressStrategy(String remoteAddr) {
         if (StringUtils.isBlank(remoteAddr)) {
             return BLANK_NET_ADDRESS_STRATEGY;
         }
-        if ("*".equals(remoteAddr)) {
+        if ("*".equals(remoteAddr) || "*.*.*.*".equals(remoteAddr)) {
             return NULL_NET_ADDRESS_STRATEGY;
         }
         if (remoteAddr.endsWith("}")) {
@@ -122,7 +122,7 @@ public static class RangeRemoteAddressStrategy implements RemoteAddressStrategy
 
         public RangeRemoteAddressStrategy(String remoteAddr) {
             String[] strArray = StringUtils.split(remoteAddr, ".");
-            if (analysis(strArray, 2) || analysis(strArray, 3)) {
+            if (analysis(strArray, 1) || analysis(strArray, 2) || analysis(strArray, 3)) {
                 AclUtils.verify(remoteAddr, index - 1);
                 StringBuffer sb = new StringBuffer().append(strArray[0].trim()).append(".").append(strArray[1].trim()).append(".");
                 if (index == 3) {

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -92,6 +92,7 @@ public class MixAll {
     public static final String RMQ_SYS_TRANS_HALF_TOPIC = "RMQ_SYS_TRANS_HALF_TOPIC";
     public static final String RMQ_SYS_TRACE_TOPIC = "RMQ_SYS_TRACE_TOPIC";
     public static final String RMQ_SYS_TRANS_OP_HALF_TOPIC = "RMQ_SYS_TRANS_OP_HALF_TOPIC";
+    public static final String TRANS_CHECK_MAX_TIME_TOPIC = "TRANS_CHECK_MAX_TIME_TOPIC";
     public static final String CID_SYS_RMQ_TRANS = "CID_RMQ_SYS_TRANS";
     public static final String ACL_CONF_TOOLS_FILE = "/conf/tools.yml";
 

File: srvutil/src/main/java/org/apache/rocketmq/srvutil/FileWatchService.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.rocketmq.srvutil;
 
-import com.google.common.base.Strings;
 import java.io.File;
 import java.io.IOException;
 import java.nio.file.Files;
@@ -27,6 +26,7 @@
 import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
 import java.util.List;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.ServiceThread;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
@@ -49,7 +49,7 @@ public FileWatchService(final String[] watchFiles,
         this.fileCurrentHash = new ArrayList<>();
 
         for (int i = 0; i < watchFiles.length; i++) {
-            if (!Strings.isNullOrEmpty(watchFiles[i]) && new File(watchFiles[i]).exists()) {
+            if (StringUtils.isNotEmpty(watchFiles[i]) && new File(watchFiles[i]).exists()) {
                 this.watchFiles.add(watchFiles[i]);
                 this.fileCurrentHash.add(hash(watchFiles[i]));
             }

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessResource.java
Patch:
@@ -43,7 +43,7 @@ public class PlainAccessResource implements AccessResource {
 
     private int requestCode;
 
-    //the content to calculate the content
+    // The content to calculate the content
     private byte[] content;
 
     private String signature;

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQConsumerWithTraceTest.java
Patch:
@@ -200,9 +200,6 @@ public void terminate() {
     @Test
     public void testPullMessage_WithTrace_Success() throws InterruptedException, RemotingException, MQBrokerException, MQClientException {
         traceProducer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
-        //when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());
-        //when(mQClientTraceAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTraceTopicRoute());
-
 
         final CountDownLatch countDownLatch = new CountDownLatch(1);
         final MessageExt[] messageExts = new MessageExt[1];

File: tools/src/test/java/org/apache/rocketmq/tools/command/topic/UpdateTopicSubCommandTest.java
Patch:
@@ -31,7 +31,6 @@ public void testExecute() {
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         String[] subargs = new String[] {
             "-b 127.0.0.1:10911",
-            "-c default-cluster",
             "-t unit-test",
             "-r 8",
             "-w 8",
@@ -42,7 +41,6 @@ public void testExecute() {
         final CommandLine commandLine =
             ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());
         assertThat(commandLine.getOptionValue('b').trim()).isEqualTo("127.0.0.1:10911");
-        assertThat(commandLine.getOptionValue('c').trim()).isEqualTo("default-cluster");
         assertThat(commandLine.getOptionValue('r').trim()).isEqualTo("8");
         assertThat(commandLine.getOptionValue('w').trim()).isEqualTo("8");
         assertThat(commandLine.getOptionValue('t').trim()).isEqualTo("unit-test");

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQConsumerWithTraceTest.java
Patch:
@@ -200,9 +200,6 @@ public void terminate() {
     @Test
     public void testPullMessage_WithTrace_Success() throws InterruptedException, RemotingException, MQBrokerException, MQClientException {
         traceProducer.getDefaultMQProducerImpl().getmQClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());
-        //when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());
-        //when(mQClientTraceAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTraceTopicRoute());
-
 
         final CountDownLatch countDownLatch = new CountDownLatch(1);
         final MessageExt[] messageExts = new MessageExt[1];

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessResource.java
Patch:
@@ -43,7 +43,7 @@ public class PlainAccessResource implements AccessResource {
 
     private int requestCode;
 
-    //the content to calculate the content
+    // The content to calculate the content
     private byte[] content;
 
     private String signature;

File: tools/src/test/java/org/apache/rocketmq/tools/command/topic/UpdateTopicSubCommandTest.java
Patch:
@@ -31,7 +31,6 @@ public void testExecute() {
         Options options = ServerUtil.buildCommandlineOptions(new Options());
         String[] subargs = new String[] {
             "-b 127.0.0.1:10911",
-            "-c default-cluster",
             "-t unit-test",
             "-r 8",
             "-w 8",
@@ -42,7 +41,6 @@ public void testExecute() {
         final CommandLine commandLine =
             ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());
         assertThat(commandLine.getOptionValue('b').trim()).isEqualTo("127.0.0.1:10911");
-        assertThat(commandLine.getOptionValue('c').trim()).isEqualTo("default-cluster");
         assertThat(commandLine.getOptionValue('r').trim()).isEqualTo("8");
         assertThat(commandLine.getOptionValue('w').trim()).isEqualTo("8");
         assertThat(commandLine.getOptionValue('t').trim()).isEqualTo("unit-test");

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumer.java
Patch:
@@ -693,7 +693,7 @@ public void start() throws MQClientException {
         this.defaultMQPushConsumerImpl.start();
         if (null != traceDispatcher) {
             try {
-                traceDispatcher.start(this.getNamesrvAddr());
+                traceDispatcher.start(this.getNamesrvAddr(), this.getAccessChannel());
             } catch (MQClientException e) {
                 log.warn("trace dispatcher start failed ", e);
             }

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceDispatcher.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.client.trace;
 
+import org.apache.rocketmq.client.AccessChannel;
 import org.apache.rocketmq.client.exception.MQClientException;
 import java.io.IOException;
 
@@ -27,7 +28,7 @@ public interface TraceDispatcher {
     /**
      * Initialize asynchronous transfer data module
      */
-    void start(String nameSrvAddr) throws MQClientException;
+    void start(String nameSrvAddr, AccessChannel accessChannel) throws MQClientException;
 
     /**
      * Append the transfering data

File: common/src/test/java/org/apache/rocketmq/common/ServiceThreadTest.java
Patch:
@@ -92,7 +92,7 @@ public String getServiceName() {
                 return "TestServiceThread";
             }
         };
-        testServiceThread.thread.setDaemon(daemon);
+        testServiceThread.setDaemon(daemon);
         // test start
         testServiceThread.start();
         assertEquals(false, testServiceThread.isStopped());

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceConstants.java
Patch:
@@ -16,10 +16,13 @@
  */
 package org.apache.rocketmq.client.trace;
 
+import org.apache.rocketmq.common.MixAll;
+
 public class TraceConstants {
 
     public static final String GROUP_NAME = "_INNER_TRACE_PRODUCER";
     public static final char CONTENT_SPLITOR = (char) 1;
     public static final char FIELD_SPLITOR = (char) 2;
     public static final String TRACE_INSTANCE_NAME = "PID_CLIENT_INNER_TRACE_PRODUCER";
+    public static final String TRACE_TOPIC_PREFIX = MixAll.SYSTEM_TOPIC_PREFIX + "TRACE_DATA_";
 }

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -93,6 +93,7 @@ public class MixAll {
     public static final String RMQ_SYS_TRACE_TOPIC = "RMQ_SYS_TRACE_TOPIC";
     public static final String RMQ_SYS_TRANS_OP_HALF_TOPIC = "RMQ_SYS_TRANS_OP_HALF_TOPIC";
     public static final String CID_SYS_RMQ_TRANS = "CID_RMQ_SYS_TRANS";
+    public static final String ACL_CONF_TOOLS_FILE = "/conf/tools.yml";
 
     public static String getWSAddr() {
         String wsDomainName = System.getProperty("rocketmq.namesrv.domain", DEFAULT_NAMESRV_ADDR_LOOKUP);

File: common/src/main/java/org/apache/rocketmq/common/message/MessageConst.java
Patch:
@@ -44,6 +44,7 @@ public class MessageConst {
     public static final String PROPERTY_TRANSACTION_PREPARED_QUEUE_OFFSET = "TRAN_PREPARED_QUEUE_OFFSET";
     public static final String PROPERTY_TRANSACTION_CHECK_TIMES = "TRANSACTION_CHECK_TIMES";
     public static final String PROPERTY_CHECK_IMMUNITY_TIME_IN_SECONDS = "CHECK_IMMUNITY_TIME_IN_SECONDS";
+    public static final String PROPERTY_INSTANCE_ID = "INSTANCE_ID";
 
     public static final String KEY_SEPARATOR = " ";
 
@@ -72,5 +73,6 @@ public class MessageConst {
         STRING_HASH_SET.add(PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX);
         STRING_HASH_SET.add(PROPERTY_MAX_RECONSUME_TIMES);
         STRING_HASH_SET.add(PROPERTY_CONSUME_START_TIMESTAMP);
+        STRING_HASH_SET.add(PROPERTY_INSTANCE_ID);
     }
 }

File: client/src/main/java/org/apache/rocketmq/client/producer/DefaultMQProducer.java
Patch:
@@ -40,7 +40,6 @@
 import org.apache.rocketmq.logging.InternalLogger;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.remoting.exception.RemotingException;
-import org.apache.rocketmq.remoting.netty.NettyRemotingClient;
 
 /**
  * This class is the entry point for applications intending to send messages.

File: client/src/main/java/org/apache/rocketmq/client/ClientConfig.java
Patch:
@@ -45,7 +45,7 @@ public class ClientConfig {
     private int persistConsumerOffsetInterval = 1000 * 5;
     private boolean unitMode = false;
     private String unitName;
-    private boolean vipChannelEnabled = Boolean.parseBoolean(System.getProperty(SEND_MESSAGE_WITH_VIP_CHANNEL_PROPERTY, "true"));
+    private boolean vipChannelEnabled = Boolean.parseBoolean(System.getProperty(SEND_MESSAGE_WITH_VIP_CHANNEL_PROPERTY, "false"));
 
     private boolean useTLS = TlsSystemConfig.tlsEnable;
 

File: example/src/main/java/org/apache/rocketmq/example/namespace/ProducerWithNamespace.java
Patch:
@@ -30,7 +30,7 @@ public static void main(String[] args) throws Exception {
             Message message = new Message("topicTest", "tagTest", "Hello world".getBytes());
             try {
                 SendResult result = producer.send(message);
-                System.out.println("Topic:" + message.getTopic() + " send success, msgId is:" + result.getMsgId());
+                System.out.printf("Topic:%s send success, misId is:%s%n", message.getTopic(), result.getMsgId());
             } catch (Exception e) {
                 e.printStackTrace();
             }

File: example/src/main/java/org/apache/rocketmq/example/namespace/PullConsumerWithNamespace.java
Patch:
@@ -79,7 +79,7 @@ private static void dealWithPullResult(PullResult pullResult) {
             return;
         }
         pullResult.getMsgFoundList().stream().forEach(
-            (msg) -> System.out.println("Topic is:" + msg.getTopic() + "msgId is:" + msg.getMsgId()));
+            (msg) -> System.out.printf("Topic is:%s, msgId is:%s%n" , msg.getTopic(), msg.getMsgId()));
     }
 
     private static void putMessageQueueOffset(MessageQueue mq, long offset) {

File: example/src/main/java/org/apache/rocketmq/example/namespace/PushConsumerWithNamespace.java
Patch:
@@ -27,9 +27,9 @@ public static void main(String[] args) throws Exception {
         defaultMQPushConsumer.subscribe("topicTest", "*");
         defaultMQPushConsumer.registerMessageListener((MessageListenerConcurrently)(msgs, context) -> {
             msgs.stream().forEach((msg) -> {
-                System.out.println("Msg topic is:" + msg.getTopic() + " MsgId is:" + msg.getMsgId());
+                System.out.printf("Msg topic is:%s, MsgId is:%s, reconsumeTimes is:%s%n", msg.getTopic() , msg.getMsgId(), msg.getReconsumeTimes());
             });
-            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
+            return ConsumeConcurrentlyStatus.RECONSUME_LATER;
         });
 
         defaultMQPushConsumer.start();

File: common/src/main/java/org/apache/rocketmq/common/message/MessageConst.java
Patch:
@@ -44,6 +44,7 @@ public class MessageConst {
     public static final String PROPERTY_TRANSACTION_PREPARED_QUEUE_OFFSET = "TRAN_PREPARED_QUEUE_OFFSET";
     public static final String PROPERTY_TRANSACTION_CHECK_TIMES = "TRANSACTION_CHECK_TIMES";
     public static final String PROPERTY_CHECK_IMMUNITY_TIME_IN_SECONDS = "CHECK_IMMUNITY_TIME_IN_SECONDS";
+    public static final String PROPERTY_INSTANCE_ID = "INSTANCE_ID";
 
     public static final String KEY_SEPARATOR = " ";
 
@@ -72,5 +73,6 @@ public class MessageConst {
         STRING_HASH_SET.add(PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX);
         STRING_HASH_SET.add(PROPERTY_MAX_RECONSUME_TIMES);
         STRING_HASH_SET.add(PROPERTY_CONSUME_START_TIMESTAMP);
+        STRING_HASH_SET.add(PROPERTY_INSTANCE_ID);
     }
 }

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -236,6 +236,7 @@ public void shutdown(final boolean shutdownFactory) {
                 break;
             case RUNNING:
                 this.mQClientFactory.unregisterProducer(this.defaultMQProducer.getProducerGroup());
+                this.defaultAsyncSenderExecutor.shutdown();
                 if (shutdownFactory) {
                     this.mQClientFactory.shutdown();
                 }

File: common/src/main/java/org/apache/rocketmq/common/stats/MomentStatsItemSet.java
Patch:
@@ -79,10 +79,10 @@ public MomentStatsItem getAndCreateStatsItem(final String statsKey) {
         if (null == statsItem) {
             statsItem =
                 new MomentStatsItem(this.statsName, statsKey, this.scheduledExecutorService, this.log);
-            MomentStatsItem prev = this.statsItemTable.put(statsKey, statsItem);
-
-            if (null == prev) {
+            MomentStatsItem prev = this.statsItemTable.putIfAbsent(statsKey, statsItem);
 
+            if (null != prev) {
+                statsItem = prev;
                 // statsItem.init();
             }
         }

File: common/src/main/java/org/apache/rocketmq/common/stats/StatsItemSet.java
Patch:
@@ -162,10 +162,10 @@ public StatsItem getAndCreateStatsItem(final String statsKey) {
         StatsItem statsItem = this.statsItemTable.get(statsKey);
         if (null == statsItem) {
             statsItem = new StatsItem(this.statsName, statsKey, this.scheduledExecutorService, this.log);
-            StatsItem prev = this.statsItemTable.put(statsKey, statsItem);
-
-            if (null == prev) {
+            StatsItem prev = this.statsItemTable.putIfAbsent(statsKey, statsItem);
 
+            if (null != prev) {
+                statsItem = prev;
                 // statsItem.init();
             }
         }

File: store/src/test/java/org/apache/rocketmq/store/schedule/ScheduleMessageServiceTest.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.UUID;
 import java.util.concurrent.TimeUnit;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -54,7 +55,7 @@ public class ScheduleMessageServiceTest {
      */
     int delayLevel = 1;
 
-    private static final String storePath = System.getProperty("user.home")  + File.separator + "schedule_test";
+    private static final String storePath = System.getProperty("user.home")  + File.separator + "schedule_test"+ UUID.randomUUID();
     private static final int commitLogFileSize = 1024;
     private static final int cqFileSize = 10;
     private static final int cqExtFileSize = 10 * (ConsumeQueueExt.CqExtUnit.MIN_EXT_UNIT_SIZE + 64);

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainPermissionLoader.java
Patch:
@@ -130,8 +130,8 @@ void checkPerm(PlainAccessResource needCheckedAccess, PlainAccessResource ownedA
 
             if (!ownedPermMap.containsKey(resource)) {
                 // Check the default perm
-                byte ownedPerm = isGroup ? needCheckedAccess.getDefaultGroupPerm() :
-                    needCheckedAccess.getDefaultTopicPerm();
+                byte ownedPerm = isGroup ? ownedAccess.getDefaultGroupPerm() :
+                    ownedAccess.getDefaultTopicPerm();
                 if (!Permission.checkPermission(neededPerm, ownedPerm)) {
                     throw new AclException(String.format("No default permission for %s", PlainAccessResource.printStr(resource, isGroup)));
                 }

File: acl/src/test/java/org/apache/rocketmq/acl/plain/PlainPermissionLoaderTest.java
Patch:
@@ -158,10 +158,10 @@ public void checkPerm() {
 
     }
     @Test(expected = AclException.class)
-    public void checkErrorPerm() {
+    public void checkErrorPermDefaultValueNotMatch() {
 
         plainAccessResource = new PlainAccessResource();
-        plainAccessResource.addResourceAndPerm("topicF", Permission.SUB);
+        plainAccessResource.addResourceAndPerm("topicF", Permission.PUB);
         plainPermissionLoader.checkPerm(plainAccessResource, SUBPlainAccessResource);
     }
     @Test(expected = AclException.class)

File: acl/src/main/java/org/apache/rocketmq/acl/AccessValidator.java
Patch:
@@ -24,7 +24,8 @@ public interface AccessValidator {
      * Parse to get the AccessResource(user, resource, needed permission)
      *
      * @param request
-     * @return
+     * @param remoteAddr
+     * @return Plain access resource result,include access key,signature and some other access attributes.
      */
     AccessResource parse(RemotingCommand request, String remoteAddr);
 

File: acl/src/main/java/org/apache/rocketmq/acl/common/Permission.java
Patch:
@@ -33,11 +33,11 @@ public class Permission {
     public static final Set<Integer> ADMIN_CODE = new HashSet<Integer>();
 
     static {
-        //  UPDATE_AND_CREATE_TOPIC
+        // UPDATE_AND_CREATE_TOPIC
         ADMIN_CODE.add(RequestCode.UPDATE_AND_CREATE_TOPIC);
-        //  UPDATE_BROKER_CONFIG
+        // UPDATE_BROKER_CONFIG
         ADMIN_CODE.add(RequestCode.UPDATE_BROKER_CONFIG);
-        //  DELETE_TOPIC_IN_BROKER
+        // DELETE_TOPIC_IN_BROKER
         ADMIN_CODE.add(RequestCode.DELETE_TOPIC_IN_BROKER);
         // UPDATE_AND_CREATE_SUBSCRIPTIONGROUP
         ADMIN_CODE.add(RequestCode.UPDATE_AND_CREATE_SUBSCRIPTIONGROUP);

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessResource.java
Patch:
@@ -24,7 +24,7 @@
 
 public class PlainAccessResource implements AccessResource {
 
-    //identify the user
+    // Identify the user
     private String accessKey;
 
     private String secretKey;

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessValidator.java
Patch:
@@ -111,7 +111,7 @@ public AccessResource parse(RemotingCommand request, String remoteAddr) {
         } catch (Throwable t) {
             throw new AclException(t.getMessage(), t);
         }
-        // content
+        // Content
         SortedMap<String, String> map = new TreeMap<String, String>();
         for (Map.Entry<String, String> entry : request.getExtFields().entrySet()) {
             if (!SessionCredentials.SIGNATURE.equals(entry.getKey())) {

File: acl/src/main/java/org/apache/rocketmq/acl/plain/RemoteAddressStrategy.java
Patch:
@@ -18,5 +18,5 @@
 
 public interface RemoteAddressStrategy {
 
-    public boolean match(PlainAccessResource plainAccessResource);
+    boolean match(PlainAccessResource plainAccessResource);
 }

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceDataEncoder.java
Patch:
@@ -22,12 +22,12 @@
 import java.util.List;
 
 /**
- * encode/decode for Trace Data
+ * Encode/decode for Trace Data
  */
 public class TraceDataEncoder {
 
     /**
-     * resolving traceContext list From trace data String
+     * Resolving traceContext list From trace data String
      *
      * @param traceData
      * @return

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceDispatcher.java
Patch:
@@ -30,21 +30,21 @@ public interface TraceDispatcher {
     void start(String nameSrvAddr) throws MQClientException;
 
     /**
-     * append the transfering data
+     * Append the transfering data
      * @param ctx data infomation
      * @return
      */
     boolean append(Object ctx);
 
     /**
-     * write flush action
+     * Write flush action
      *
      * @throws IOException
      */
     void flush() throws IOException;
 
     /**
-     * close the trace Hook
+     * Close the trace Hook
      */
     void shutdown();
 }

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceTransferBean.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Set;
 
 /**
- * trace transfering bean
+ * Trace transfering bean
  */
 public class TraceTransferBean {
     private String transData;

File: client/src/main/java/org/apache/rocketmq/client/trace/hook/ConsumeMessageTraceHookImpl.java
Patch:
@@ -61,7 +61,7 @@ public void consumeMessageBefore(ConsumeMessageContext context) {
             String traceOn = msg.getProperty(MessageConst.PROPERTY_TRACE_SWITCH);
 
             if (traceOn != null && traceOn.equals("false")) {
-                // if trace switch is false ,skip it
+                // If trace switch is false ,skip it
                 continue;
             }
             TraceBean traceBean = new TraceBean();
@@ -90,7 +90,7 @@ public void consumeMessageAfter(ConsumeMessageContext context) {
         TraceContext subBeforeContext = (TraceContext) context.getMqTraceContext();
 
         if (subBeforeContext.getTraceBeans() == null || subBeforeContext.getTraceBeans().size() < 1) {
-            // if subbefore bean is null ,skip it
+            // If subbefore bean is null ,skip it
             return;
         }
         TraceContext subAfterContext = new TraceContext();
@@ -100,7 +100,7 @@ public void consumeMessageAfter(ConsumeMessageContext context) {
         subAfterContext.setRequestId(subBeforeContext.getRequestId());//
         subAfterContext.setSuccess(context.isSuccess());//
 
-        //caculate the cost time for processing messages
+        // Caculate the cost time for processing messages
         int costTime = (int) ((System.currentTimeMillis() - subBeforeContext.getTimeStamp()) / context.getMsgList().size());
         subAfterContext.setCostTime(costTime);//
         subAfterContext.setTraceBeans(subBeforeContext.getTraceBeans());

File: example/src/main/java/org/apache/rocketmq/example/simple/AclClient.java
Patch:
@@ -84,7 +84,7 @@ public static void pushConsumer() throws MQClientException {
         consumer.setNamesrvAddr("127.0.0.1:9876");
         consumer.subscribe("TopicTest", "*");
         consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);
-        //wrong time format 2017_0422_221800
+        // Wrong time format 2017_0422_221800
         consumer.setConsumeTimestamp("20180422221800");
         consumer.registerMessageListener(new MessageListenerConcurrently() {
 

File: example/src/main/java/org/apache/rocketmq/example/tracemessage/TracePushConsumer.java
Patch:
@@ -28,11 +28,11 @@
 
 public class TracePushConsumer {
     public static void main(String[] args) throws InterruptedException, MQClientException {
-        //here,we use the default message track trace topic name
+        // Here,we use the default message track trace topic name
         DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("CID_JODIE_1",true);
         consumer.subscribe("TopicTest", "*");
         consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);
-        //wrong time format 2017_0422_221800
+        // Wrong time format 2017_0422_221800
         consumer.setConsumeTimestamp("20181109221800");
         consumer.registerMessageListener(new MessageListenerConcurrently() {
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -256,7 +256,7 @@ public static RPCHook getAclRPCHook() {
             System.out.printf(" Cannot find conf file %s, acl is not be enabled.%n" ,fileHome + fileName);
             return null;
         }
-        // admin ak sk
+
         String accessKey = yamlDataObject.getString("accessKey");
         String secretKey = yamlDataObject.getString("secretKey");
 

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainPermissionLoader.java
Patch:
@@ -119,7 +119,6 @@ public void run() {
                                     && (StandardWatchEventKinds.ENTRY_MODIFY.equals(event.kind())
                                     || StandardWatchEventKinds.ENTRY_CREATE.equals(event.kind()))) {
                                     log.info("{} make a difference  change is : {}", watchFileName, event.toString());
-                                    //TODO do a retain
                                     //Clearing the info, may result in a non-available time
                                     PlainPermissionLoader.this.clearPermissionInfo();
                                     initialize();

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -492,7 +492,7 @@ private void initialTransaction() {
     }
 
     private void initialAcl() {
-        if (!this.brokerConfig.isEnableAcl()) {
+        if (!this.brokerConfig.isAclEnable()) {
             log.info("The broker dose not enable acl");
             return;
         }

File: acl/src/main/java/org/apache/rocketmq/acl/plain/PlainPermissionLoader.java
Patch:
@@ -119,7 +119,6 @@ public void run() {
                                     && (StandardWatchEventKinds.ENTRY_MODIFY.equals(event.kind())
                                     || StandardWatchEventKinds.ENTRY_CREATE.equals(event.kind()))) {
                                     log.info("{} make a difference  change is : {}", watchFileName, event.toString());
-                                    //TODO do a retain
                                     //Clearing the info, may result in a non-available time
                                     PlainPermissionLoader.this.clearPermissionInfo();
                                     initialize();

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -492,7 +492,7 @@ private void initialTransaction() {
     }
 
     private void initialAcl() {
-        if (!this.brokerConfig.isEnableAcl()) {
+        if (!this.brokerConfig.isAclEnable()) {
             log.info("The broker dose not enable acl");
             return;
         }

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java
Patch:
@@ -126,7 +126,7 @@ public TopicConfigManager(BrokerController brokerController) {
         }
         {
             if (this.brokerController.getBrokerConfig().isAutoTraceBrokerEnable()) {
-                String topic = this.brokerController.getBrokerConfig().getMsgTrackTopicName();
+                String topic = this.brokerController.getBrokerConfig().getMsgTraceTopicName();
                 TopicConfig topicConfig = new TopicConfig(topic);
                 this.systemTopicList.add(topic);
                 topicConfig.setReadQueueNums(1);

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceContext.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.List;
 
 /**
- * The context of Track Trace
+ * The context of Trace
  */
 public class TraceContext implements Comparable<TraceContext> {
 

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceDispatcher.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.rocketmq.client.trace;
 
-import java.util.Properties;
 import org.apache.rocketmq.client.exception.MQClientException;
 import java.io.IOException;
 
@@ -28,7 +27,7 @@ public interface TraceDispatcher {
     /**
      * Initialize asynchronous transfer data module
      */
-    void start(Properties properties) throws MQClientException;
+    void start(String nameSrvAddr) throws MQClientException;
 
     /**
      * append the transfering data
@@ -45,7 +44,7 @@ public interface TraceDispatcher {
     void flush() throws IOException;
 
     /**
-     * close the track trace Hook
+     * close the trace Hook
      */
     void shutdown();
 }

File: client/src/main/java/org/apache/rocketmq/client/trace/TraceTransferBean.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Set;
 
 /**
- * track trace transfering bean
+ * trace transfering bean
  */
 public class TraceTransferBean {
     private String transData;

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQConsumerWithTraceTest.java
Patch:
@@ -87,7 +87,7 @@
 public class DefaultMQConsumerWithTraceTest {
     private String consumerGroup;
     private String consumerGroupNormal;
-    private String producerGroupTraceTemp = MixAll.RMQ_SYS_TRACK_TRACE_TOPIC + System.currentTimeMillis();
+    private String producerGroupTraceTemp = MixAll.RMQ_SYS_TRACE_TOPIC + System.currentTimeMillis();
 
     private String topic = "FooBar";
     private String brokerName = "BrokerA";
@@ -107,7 +107,7 @@ public class DefaultMQConsumerWithTraceTest {
     @Mock
     private MQClientAPIImpl mQClientTraceAPIImpl;
     private DefaultMQProducer traceProducer;
-    private String customerTraceTopic = "rmq_track_trace_topic_12345";
+    private String customerTraceTopic = "rmq_trace_topic_12345";
 
     @Before
     public void init() throws Exception {

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQProducerWithTraceTest.java
Patch:
@@ -83,8 +83,8 @@ public class DefaultMQProducerWithTraceTest {
     private String topic = "FooBar";
     private String producerGroupPrefix = "FooBar_PID";
     private String producerGroupTemp = producerGroupPrefix + System.currentTimeMillis();
-    private String producerGroupTraceTemp = MixAll.RMQ_SYS_TRACK_TRACE_TOPIC + System.currentTimeMillis();
-    private String customerTraceTopic = "rmq_track_trace_topic_12345";
+    private String producerGroupTraceTemp = MixAll.RMQ_SYS_TRACE_TOPIC + System.currentTimeMillis();
+    private String customerTraceTopic = "rmq_trace_topic_12345";
 
     @Before
     public void init() throws Exception {

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -91,7 +91,7 @@ public class MixAll {
     public static final String CONSUME_CONTEXT_TYPE = "ConsumeContextType";
 
     public static final String RMQ_SYS_TRANS_HALF_TOPIC = "RMQ_SYS_TRANS_HALF_TOPIC";
-    public static final String RMQ_SYS_TRACK_TRACE_TOPIC = "RMQ_SYS_TRACK_TRACE_TOPIC";
+    public static final String RMQ_SYS_TRACE_TOPIC = "RMQ_SYS_TRACE_TOPIC";
     public static final String RMQ_SYS_TRANS_OP_HALF_TOPIC = "RMQ_SYS_TRANS_OP_HALF_TOPIC";
     public static final String CID_SYS_RMQ_TRANS = "CID_RMQ_SYS_TRANS";
 

File: common/src/test/java/org/apache/rocketmq/common/BrokerConfigTest.java
Patch:
@@ -37,10 +37,10 @@ public void testBrokerConfigAttribute() {
         brokerConfig.setBrokerName("broker-a");
         brokerConfig.setBrokerId(0);
         brokerConfig.setBrokerClusterName("DefaultCluster");
-        brokerConfig.setMsgTrackTopicName("RMQ_SYS_TRACK_TRACE_TOPIC4");
+        brokerConfig.setMsgTraceTopicName("RMQ_SYS_TRACE_TOPIC4");
         assertThat(brokerConfig.getBrokerClusterName()).isEqualTo("DefaultCluster");
         assertThat(brokerConfig.getNamesrvAddr()).isEqualTo("127.0.0.1:9876");
-        assertThat(brokerConfig.getMsgTrackTopicName()).isEqualTo("RMQ_SYS_TRACK_TRACE_TOPIC4");
+        assertThat(brokerConfig.getMsgTraceTopicName()).isEqualTo("RMQ_SYS_TRACE_TOPIC4");
         assertThat(brokerConfig.getBrokerId()).isEqualTo(0);
         assertThat(brokerConfig.getBrokerName()).isEqualTo("broker-a");
         assertThat(brokerConfig.isAutoCreateTopicEnable()).isEqualTo(false);

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumer.java
Patch:
@@ -309,7 +309,7 @@ public DefaultMQPushConsumer(final String consumerGroup, RPCHook rpcHook,
                 } else {
                     tempProperties.put(TrackTraceConstants.TRACE_TOPIC, MixAll.RMQ_SYS_TRACK_TRACE_TOPIC);
                 }
-                AsyncArrayDispatcher dispatcher = new AsyncArrayDispatcher(tempProperties);
+                AsyncArrayDispatcher dispatcher = new AsyncArrayDispatcher(tempProperties, rpcHook);
                 dispatcher.setHostConsumer(this.getDefaultMQPushConsumerImpl());
                 traceDispatcher = dispatcher;
 

File: client/src/main/java/org/apache/rocketmq/client/producer/DefaultMQProducer.java
Patch:
@@ -178,7 +178,7 @@ public DefaultMQProducer(final String producerGroup, RPCHook rpcHook, boolean ms
                 } else {
                     tempProperties.put(TrackTraceConstants.TRACE_TOPIC, MixAll.RMQ_SYS_TRACK_TRACE_TOPIC);
                 }
-                AsyncArrayDispatcher dispatcher = new AsyncArrayDispatcher(tempProperties);
+                AsyncArrayDispatcher dispatcher = new AsyncArrayDispatcher(tempProperties, rpcHook);
                 dispatcher.setHostProducer(this.getDefaultMQProducerImpl());
                 traceDispatcher = dispatcher;
 

File: client/src/main/java/org/apache/rocketmq/client/trace/core/dispatch/impl/AsyncArrayDispatcher.java
Patch:
@@ -49,6 +49,7 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
+import org.apache.rocketmq.remoting.RPCHook;
 
 /**
  * Created by zongtanghu on 2018/11/6.
@@ -74,7 +75,7 @@ public class AsyncArrayDispatcher implements AsyncDispatcher {
     private String dispatcherId = UUID.randomUUID().toString();
     private String traceTopicName;
 
-    public AsyncArrayDispatcher(Properties properties) throws MQClientException {
+    public AsyncArrayDispatcher(Properties properties, RPCHook rpcHook) throws MQClientException {
         dispatcherType = properties.getProperty(TrackTraceConstants.TRACE_DISPATCHER_TYPE);
         int queueSize = Integer.parseInt(properties.getProperty(TrackTraceConstants.ASYNC_BUFFER_SIZE, "2048"));
         // queueSize is greater than or equal to the n power of 2 of value
@@ -92,7 +93,7 @@ public AsyncArrayDispatcher(Properties properties) throws MQClientException {
             TimeUnit.MILLISECONDS, //
             this.appenderQueue, //
             new ThreadFactoryImpl("MQTraceSendThread_"));
-        traceProducer = TrackTraceProducerFactory.getTraceDispatcherProducer(properties);
+        traceProducer = TrackTraceProducerFactory.getTraceDispatcherProducer(properties, rpcHook);
     }
 
     public String getTraceTopicName() {

File: client/src/main/java/org/apache/rocketmq/client/trace/core/dispatch/impl/TrackTraceProducerFactory.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.Properties;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicBoolean;
+import org.apache.rocketmq.remoting.RPCHook;
 
 public class TrackTraceProducerFactory {
 
@@ -33,10 +34,10 @@ public class TrackTraceProducerFactory {
     private static DefaultMQProducer traceProducer;
 
 
-    public static DefaultMQProducer getTraceDispatcherProducer(Properties properties) {
+    public static DefaultMQProducer getTraceDispatcherProducer(Properties properties, RPCHook rpcHook) {
         if (traceProducer == null) {
 
-            traceProducer = new DefaultMQProducer();
+            traceProducer = new DefaultMQProducer(rpcHook);
             traceProducer.setProducerGroup(TrackTraceConstants.GROUP_NAME);
             traceProducer.setSendMsgTimeout(5000);
             traceProducer.setInstanceName(properties.getProperty(TrackTraceConstants.INSTANCE_NAME, String.valueOf(System.currentTimeMillis())));

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -237,7 +237,7 @@ public boolean initialize() throws CloneNotSupportedException {
                         this.brokerConfig);
                 if (messageStoreConfig.isEnableDLegerCommitLog()) {
                     DLedgerRoleChangeHandler roleChangeHandler = new DLedgerRoleChangeHandler(this, (DefaultMessageStore) messageStore);
-                    ((DLedgerCommitLog)((DefaultMessageStore) messageStore).getCommitLog()).getdLedgerServer().getdLegerLeaderElector().addRoleChangeHandler(roleChangeHandler);
+                    ((DLedgerCommitLog)((DefaultMessageStore) messageStore).getCommitLog()).getdLedgerServer().getdLedgerLeaderElector().addRoleChangeHandler(roleChangeHandler);
                 }
                 this.brokerStats = new BrokerStats((DefaultMessageStore) this.messageStore);
                 //load plugin

File: broker/src/test/java/org/apache/rocketmq/broker/BrokerControllerTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.rocketmq.remoting.netty.NettyServerConfig;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 import org.junit.After;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -42,6 +43,7 @@ public void testBrokerRestart() throws Exception {
         brokerController.shutdown();
     }
 
+    @Ignore
     @Test
     public void testBrokerStartAclEnabled() throws Exception {
         BrokerConfig brokerConfigAclEnabled = new BrokerConfig();

File: acl/src/main/java/org/apache/rocketmq/acl/common/SessionCredentials.java
Patch:
@@ -30,7 +30,7 @@ public class SessionCredentials {
     public static final String SECURITY_TOKEN = "SecurityToken";
 
     public static final String KEY_FILE = System.getProperty("rocketmq.client.keyFile",
-        System.getProperty("user.home") + File.separator + "onskey");
+        System.getProperty("user.home") + File.separator + "key");
 
     private String accessKey;
     private String secretKey;

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -499,6 +499,7 @@ private void initialAcl() {
 
         List<AccessValidator> accessValidators = ServiceProvider.load(ServiceProvider.ACL_VALIDATOR_ID, AccessValidator.class);
         if (accessValidators == null || accessValidators.isEmpty()) {
+            log.info("The broker dose not load the AccessValidator");
             return;
         }
 

File: acl/src/main/java/org/apache/rocketmq/acl/common/SessionCredentials.java
Patch:
@@ -30,7 +30,7 @@ public class SessionCredentials {
     public static final String SECURITY_TOKEN = "SecurityToken";
 
     public static final String KEY_FILE = System.getProperty("rocketmq.client.keyFile",
-        System.getProperty("user.home") + File.separator + "onskey");
+        System.getProperty("user.home") + File.separator + "key");
 
     private String accessKey;
     private String secretKey;

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -499,6 +499,7 @@ private void initialAcl() {
 
         List<AccessValidator> accessValidators = ServiceProvider.load(ServiceProvider.ACL_VALIDATOR_ID, AccessValidator.class);
         if (accessValidators == null || accessValidators.isEmpty()) {
+            log.info("The broker dose not load the AccessValidator");
             return;
         }
 

File: store/src/test/java/org/apache/rocketmq/store/dledger/MixCommitlogTest.java
Patch:
@@ -85,6 +85,8 @@ public void testPutAndGet() throws Exception {
             DLedgerCommitLog dLedgerCommitLog = (DLedgerCommitLog) dledgerStore.getCommitLog();
             Assert.assertFalse(dLedgerCommitLog.getdLedgerServer().getdLedgerConfig().isEnableDiskForceClean());
             Assert.assertEquals(dividedOffset, dLedgerCommitLog.getDividedCommitlogOffset());
+            Assert.assertEquals(0, dledgerStore.dispatchBehindBytes());
+            Assert.assertEquals(dividedOffset, dLedgerCommitLog.getMaxOffset());
             Thread.sleep(2000);
             doPutMessages(dledgerStore, topic, 0, 1000, 1000);
             Thread.sleep(500);

File: store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java
Patch:
@@ -31,7 +31,6 @@
 import java.nio.ByteBuffer;
 import java.util.HashMap;
 import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicBoolean;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.message.MessageAccessor;
 import org.apache.rocketmq.common.message.MessageConst;

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -410,7 +410,8 @@ public void invokeAsyncImpl(final Channel channel, final RemotingCommand request
             final SemaphoreReleaseOnlyOnce once = new SemaphoreReleaseOnlyOnce(this.semaphoreAsync);
             long costTime = System.currentTimeMillis() - beginStartTime;
             if (timeoutMillis < costTime) {
-                throw new RemotingTooMuchRequestException("invokeAsyncImpl call timeout");
+                once.release();
+                throw new RemotingTimeoutException("invokeAsyncImpl call timeout");
             }
 
             final ResponseFuture responseFuture = new ResponseFuture(channel, opaque, timeoutMillis - costTime, invokeCallback, once);

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java
Patch:
@@ -126,7 +126,7 @@ public TopicConfigManager(BrokerController brokerController) {
         }
         {
             if (this.brokerController.getBrokerConfig().isAutoTraceBrokerEnable()) {
-                String topic = MixAll.RMQ_SYS_TRACK_TRACE_TOPIC;
+                String topic = this.brokerController.getBrokerConfig().getMsgTrackTopicName();
                 TopicConfig topicConfig = new TopicConfig(topic);
                 this.systemTopicList.add(topic);
                 topicConfig.setReadQueueNums(1);

File: client/src/main/java/org/apache/rocketmq/client/trace/core/common/TrackTraceConstants.java
Patch:
@@ -16,8 +16,6 @@
  */
 package org.apache.rocketmq.client.trace.core.common;
 
-import org.apache.rocketmq.common.MixAll;
-
 public class TrackTraceConstants {
     public static final String NAMESRV_ADDR = "NAMESRV_ADDR";
     public static final String ADDRSRV_URL = "ADDRSRV_URL";
@@ -27,7 +25,7 @@ public class TrackTraceConstants {
     public static final String WAKE_UP_NUM = "WakeUpNum";
     public static final String MAX_MSG_SIZE = "MaxMsgSize";
     public static final String GROUP_NAME = "_INNER_TRACE_PRODUCER";
-    public static final String TRACE_TOPIC = MixAll.RMQ_SYS_TRACK_TRACE_TOPIC;
+    public static final String TRACE_TOPIC = "TRACK_TRACE_TOPIC_NAME";
     public static final char CONTENT_SPLITOR = (char) 1;
     public static final char FIELD_SPLITOR = (char) 2;
     public static final String TRACE_DISPATCHER_TYPE = "DispatcherType";

File: example/src/main/java/org/apache/rocketmq/example/tracemessage/TraceProducer.java
Patch:
@@ -26,7 +26,7 @@
 public class TraceProducer {
     public static void main(String[] args) throws MQClientException, InterruptedException {
 
-        DefaultMQProducer producer = new DefaultMQProducer("ProducerGroupName",true);
+        DefaultMQProducer producer = new DefaultMQProducer("ProducerGroupName",true, "");
         producer.start();
 
         for (int i = 0; i < 128; i++)

File: example/src/main/java/org/apache/rocketmq/example/tracemessage/TracePushConsumer.java
Patch:
@@ -28,7 +28,8 @@
 
 public class TracePushConsumer {
     public static void main(String[] args) throws InterruptedException, MQClientException {
-        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("CID_JODIE_1",true);
+        //here,we use the default message track trace topic name
+        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("CID_JODIE_1",true, "");
         consumer.subscribe("TopicTest", "*");
         consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);
         //wrong time format 2017_0422_221800

File: logappender/src/main/java/org/apache/rocketmq/logappender/common/ProducerInstance.java
Patch:
@@ -63,7 +63,7 @@ public MQProducer getInstance(String nameServerAddress, String group) throws MQC
             return p;
         }
 
-        DefaultMQProducer defaultMQProducer = new DefaultMQProducer(group,false);
+        DefaultMQProducer defaultMQProducer = new DefaultMQProducer(group);
         defaultMQProducer.setNamesrvAddr(nameServerAddress);
         MQProducer beforeProducer = null;
         beforeProducer = getProducerInstance().producerMap.putIfAbsent(genKey, defaultMQProducer);

File: logappender/src/test/java/org/apache/rocketmq/logappender/AbstractTestCase.java
Patch:
@@ -39,7 +39,7 @@ public class AbstractTestCase {
 
     @Before
     public void mockLoggerAppender() throws Exception {
-        DefaultMQProducer defaultMQProducer = spy(new DefaultMQProducer("loggerAppender",false));
+        DefaultMQProducer defaultMQProducer = spy(new DefaultMQProducer("loggerAppender"));
         doAnswer(new Answer<Void>() {
             @Override
             public Void answer(InvocationOnMock invocationOnMock) throws Throwable {

File: test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQNormalConsumer.java
Patch:
@@ -46,7 +46,7 @@ public void create() {
     }
 
     public void create(boolean useTLS) {
-        consumer = new DefaultMQPushConsumer(consumerGroup,false);
+        consumer = new DefaultMQPushConsumer(consumerGroup);
         consumer.setInstanceName(RandomUtil.getStringByUUID());
         consumer.setNamesrvAddr(nsAddr);
         try {

File: test/src/main/java/org/apache/rocketmq/test/factory/ProducerFactory.java
Patch:
@@ -24,7 +24,7 @@
 public class ProducerFactory {
 
     public static DefaultMQProducer getRMQProducer(String ns) {
-        DefaultMQProducer producer = new DefaultMQProducer(RandomUtil.getStringByUUID(),false);
+        DefaultMQProducer producer = new DefaultMQProducer(RandomUtil.getStringByUUID());
         producer.setNamesrvAddr(ns);
         try {
             producer.start();

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByIdSubCommand.java
Patch:
@@ -213,7 +213,7 @@ public Options buildCommandlineOptions(Options options) {
     public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) throws SubCommandException {
         DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
-        DefaultMQProducer defaultMQProducer = new DefaultMQProducer("ReSendMsgById",false);
+        DefaultMQProducer defaultMQProducer = new DefaultMQProducer("ReSendMsgById");
         defaultMQProducer.setInstanceName(Long.toString(System.currentTimeMillis()));
 
         try {

File: tools/src/main/java/org/apache/rocketmq/tools/monitor/MonitorService.java
Patch:
@@ -65,7 +65,7 @@ public class MonitorService {
     private final DefaultMQPullConsumer defaultMQPullConsumer = new DefaultMQPullConsumer(
         MixAll.TOOLS_CONSUMER_GROUP);
     private final DefaultMQPushConsumer defaultMQPushConsumer = new DefaultMQPushConsumer(
-        MixAll.MONITOR_CONSUMER_GROUP,false);
+        MixAll.MONITOR_CONSUMER_GROUP);
 
     public MonitorService(MonitorConfig monitorConfig, MonitorListener monitorListener, RPCHook rpcHook) {
         this.monitorConfig = monitorConfig;

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -410,7 +410,8 @@ public void invokeAsyncImpl(final Channel channel, final RemotingCommand request
             final SemaphoreReleaseOnlyOnce once = new SemaphoreReleaseOnlyOnce(this.semaphoreAsync);
             long costTime = System.currentTimeMillis() - beginStartTime;
             if (timeoutMillis < costTime) {
-                throw new RemotingTooMuchRequestException("invokeAsyncImpl call timeout");
+                once.release();
+                throw new RemotingTimeoutException("invokeAsyncImpl call timeout");
             }
 
             final ResponseFuture responseFuture = new ResponseFuture(channel, opaque, timeoutMillis - costTime, invokeCallback, once);

File: client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQProducerWithTraceTest.java
Patch:
@@ -98,6 +98,9 @@ public void init() throws Exception {
         customTraceTopicproducer.setNamesrvAddr("127.0.0.1:9878");
         message = new Message(topic, new byte[] {'a', 'b' ,'c'});
         asyncArrayDispatcher = (AsyncArrayDispatcher)producer.getTraceDispatcher();
+        asyncArrayDispatcher.setTraceTopicName(customerTraceTopic);
+        asyncArrayDispatcher.getHostProducer();
+        asyncArrayDispatcher.getHostConsumer();
         traceProducer = asyncArrayDispatcher.getTraceProducer();
 
         producer.start();

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java
Patch:
@@ -126,7 +126,7 @@ public TopicConfigManager(BrokerController brokerController) {
         }
         {
             if (this.brokerController.getBrokerConfig().isAutoTraceBrokerEnable()) {
-                String topic = MixAll.RMQ_SYS_TRACK_TRACE_TOPIC;
+                String topic = this.brokerController.getBrokerConfig().getMsgTrackTopicName();
                 TopicConfig topicConfig = new TopicConfig(topic);
                 this.systemTopicList.add(topic);
                 topicConfig.setReadQueueNums(1);

File: client/src/main/java/org/apache/rocketmq/client/trace/core/common/TrackTraceConstants.java
Patch:
@@ -16,8 +16,6 @@
  */
 package org.apache.rocketmq.client.trace.core.common;
 
-import org.apache.rocketmq.common.MixAll;
-
 public class TrackTraceConstants {
     public static final String NAMESRV_ADDR = "NAMESRV_ADDR";
     public static final String ADDRSRV_URL = "ADDRSRV_URL";
@@ -27,7 +25,7 @@ public class TrackTraceConstants {
     public static final String WAKE_UP_NUM = "WakeUpNum";
     public static final String MAX_MSG_SIZE = "MaxMsgSize";
     public static final String GROUP_NAME = "_INNER_TRACE_PRODUCER";
-    public static final String TRACE_TOPIC = MixAll.RMQ_SYS_TRACK_TRACE_TOPIC;
+    public static final String TRACE_TOPIC = "TRACK_TRACE_TOPIC_NAME";
     public static final char CONTENT_SPLITOR = (char) 1;
     public static final char FIELD_SPLITOR = (char) 2;
     public static final String TRACE_DISPATCHER_TYPE = "DispatcherType";

File: example/src/main/java/org/apache/rocketmq/example/tracemessage/TraceProducer.java
Patch:
@@ -26,7 +26,7 @@
 public class TraceProducer {
     public static void main(String[] args) throws MQClientException, InterruptedException {
 
-        DefaultMQProducer producer = new DefaultMQProducer("ProducerGroupName",true);
+        DefaultMQProducer producer = new DefaultMQProducer("ProducerGroupName",true, "");
         producer.start();
 
         for (int i = 0; i < 128; i++)

File: example/src/main/java/org/apache/rocketmq/example/tracemessage/TracePushConsumer.java
Patch:
@@ -28,7 +28,8 @@
 
 public class TracePushConsumer {
     public static void main(String[] args) throws InterruptedException, MQClientException {
-        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("CID_JODIE_1",true);
+        //here,we use the default message track trace topic name
+        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("CID_JODIE_1",true, "");
         consumer.subscribe("TopicTest", "*");
         consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);
         //wrong time format 2017_0422_221800

File: logappender/src/main/java/org/apache/rocketmq/logappender/common/ProducerInstance.java
Patch:
@@ -63,7 +63,7 @@ public MQProducer getInstance(String nameServerAddress, String group) throws MQC
             return p;
         }
 
-        DefaultMQProducer defaultMQProducer = new DefaultMQProducer(group,false);
+        DefaultMQProducer defaultMQProducer = new DefaultMQProducer(group);
         defaultMQProducer.setNamesrvAddr(nameServerAddress);
         MQProducer beforeProducer = null;
         beforeProducer = getProducerInstance().producerMap.putIfAbsent(genKey, defaultMQProducer);

File: logappender/src/test/java/org/apache/rocketmq/logappender/AbstractTestCase.java
Patch:
@@ -39,7 +39,7 @@ public class AbstractTestCase {
 
     @Before
     public void mockLoggerAppender() throws Exception {
-        DefaultMQProducer defaultMQProducer = spy(new DefaultMQProducer("loggerAppender",false));
+        DefaultMQProducer defaultMQProducer = spy(new DefaultMQProducer("loggerAppender"));
         doAnswer(new Answer<Void>() {
             @Override
             public Void answer(InvocationOnMock invocationOnMock) throws Throwable {

File: test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQNormalConsumer.java
Patch:
@@ -46,7 +46,7 @@ public void create() {
     }
 
     public void create(boolean useTLS) {
-        consumer = new DefaultMQPushConsumer(consumerGroup,false);
+        consumer = new DefaultMQPushConsumer(consumerGroup);
         consumer.setInstanceName(RandomUtil.getStringByUUID());
         consumer.setNamesrvAddr(nsAddr);
         try {

File: test/src/main/java/org/apache/rocketmq/test/factory/ProducerFactory.java
Patch:
@@ -24,7 +24,7 @@
 public class ProducerFactory {
 
     public static DefaultMQProducer getRMQProducer(String ns) {
-        DefaultMQProducer producer = new DefaultMQProducer(RandomUtil.getStringByUUID(),false);
+        DefaultMQProducer producer = new DefaultMQProducer(RandomUtil.getStringByUUID());
         producer.setNamesrvAddr(ns);
         try {
             producer.start();

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByIdSubCommand.java
Patch:
@@ -213,7 +213,7 @@ public Options buildCommandlineOptions(Options options) {
     public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) throws SubCommandException {
         DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
-        DefaultMQProducer defaultMQProducer = new DefaultMQProducer("ReSendMsgById",false);
+        DefaultMQProducer defaultMQProducer = new DefaultMQProducer("ReSendMsgById");
         defaultMQProducer.setInstanceName(Long.toString(System.currentTimeMillis()));
 
         try {

File: tools/src/main/java/org/apache/rocketmq/tools/monitor/MonitorService.java
Patch:
@@ -65,7 +65,7 @@ public class MonitorService {
     private final DefaultMQPullConsumer defaultMQPullConsumer = new DefaultMQPullConsumer(
         MixAll.TOOLS_CONSUMER_GROUP);
     private final DefaultMQPushConsumer defaultMQPushConsumer = new DefaultMQPushConsumer(
-        MixAll.MONITOR_CONSUMER_GROUP,false);
+        MixAll.MONITOR_CONSUMER_GROUP);
 
     public MonitorService(MonitorConfig monitorConfig, MonitorListener monitorListener, RPCHook rpcHook) {
         this.monitorConfig = monitorConfig;

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -82,14 +82,16 @@ public class MixAll {
     public static final long CURRENT_JVM_PID = getPID();
 
     public static final String RETRY_GROUP_TOPIC_PREFIX = "%RETRY%";
-
+    public static final String TRACE_BROKER_NAME_SUFFIX = "trace";
+    
     public static final String DLQ_GROUP_TOPIC_PREFIX = "%DLQ%";
     public static final String SYSTEM_TOPIC_PREFIX = "rmq_sys_";
     public static final String UNIQUE_MSG_QUERY_FLAG = "_UNIQUE_KEY_QUERY";
     public static final String DEFAULT_TRACE_REGION_ID = "DefaultRegion";
     public static final String CONSUME_CONTEXT_TYPE = "ConsumeContextType";
 
     public static final String RMQ_SYS_TRANS_HALF_TOPIC = "RMQ_SYS_TRANS_HALF_TOPIC";
+    public static final String RMQ_SYS_TRACK_TRACE_TOPIC = "RMQ_SYS_TRACK_TRACE_TOPIC";
     public static final String RMQ_SYS_TRANS_OP_HALF_TOPIC = "RMQ_SYS_TRANS_OP_HALF_TOPIC";
     public static final String CID_SYS_RMQ_TRANS = "CID_RMQ_SYS_TRANS";
 

File: example/src/main/java/org/apache/rocketmq/example/simple/Producer.java
Patch:
@@ -26,7 +26,6 @@ public class Producer {
     public static void main(String[] args) throws MQClientException, InterruptedException {
 
         DefaultMQProducer producer = new DefaultMQProducer("ProducerGroupName");
-
         producer.start();
 
         for (int i = 0; i < 128; i++)

File: example/src/main/java/org/apache/rocketmq/example/simple/PushConsumer.java
Patch:
@@ -29,10 +29,10 @@ public class PushConsumer {
 
     public static void main(String[] args) throws InterruptedException, MQClientException {
         DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("CID_JODIE_1");
-        consumer.subscribe("Jodie_topic_1023", "*");
+        consumer.subscribe("TopicTest", "*");
         consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);
         //wrong time format 2017_0422_221800
-        consumer.setConsumeTimestamp("20170422221800");
+        consumer.setConsumeTimestamp("20181109221800");
         consumer.registerMessageListener(new MessageListenerConcurrently() {
 
             @Override

File: logappender/src/main/java/org/apache/rocketmq/logappender/common/ProducerInstance.java
Patch:
@@ -63,7 +63,7 @@ public MQProducer getInstance(String nameServerAddress, String group) throws MQC
             return p;
         }
 
-        DefaultMQProducer defaultMQProducer = new DefaultMQProducer(group);
+        DefaultMQProducer defaultMQProducer = new DefaultMQProducer(group,false);
         defaultMQProducer.setNamesrvAddr(nameServerAddress);
         MQProducer beforeProducer = null;
         beforeProducer = getProducerInstance().producerMap.putIfAbsent(genKey, defaultMQProducer);

File: logappender/src/test/java/org/apache/rocketmq/logappender/AbstractTestCase.java
Patch:
@@ -39,7 +39,7 @@ public class AbstractTestCase {
 
     @Before
     public void mockLoggerAppender() throws Exception {
-        DefaultMQProducer defaultMQProducer = spy(new DefaultMQProducer("loggerAppender"));
+        DefaultMQProducer defaultMQProducer = spy(new DefaultMQProducer("loggerAppender",false));
         doAnswer(new Answer<Void>() {
             @Override
             public Void answer(InvocationOnMock invocationOnMock) throws Throwable {

File: test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQNormalConsumer.java
Patch:
@@ -46,7 +46,7 @@ public void create() {
     }
 
     public void create(boolean useTLS) {
-        consumer = new DefaultMQPushConsumer(consumerGroup);
+        consumer = new DefaultMQPushConsumer(consumerGroup,false);
         consumer.setInstanceName(RandomUtil.getStringByUUID());
         consumer.setNamesrvAddr(nsAddr);
         try {

File: test/src/main/java/org/apache/rocketmq/test/factory/ProducerFactory.java
Patch:
@@ -24,7 +24,7 @@
 public class ProducerFactory {
 
     public static DefaultMQProducer getRMQProducer(String ns) {
-        DefaultMQProducer producer = new DefaultMQProducer(RandomUtil.getStringByUUID());
+        DefaultMQProducer producer = new DefaultMQProducer(RandomUtil.getStringByUUID(),false);
         producer.setNamesrvAddr(ns);
         try {
             producer.start();

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByIdSubCommand.java
Patch:
@@ -213,7 +213,7 @@ public Options buildCommandlineOptions(Options options) {
     public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) throws SubCommandException {
         DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
-        DefaultMQProducer defaultMQProducer = new DefaultMQProducer("ReSendMsgById");
+        DefaultMQProducer defaultMQProducer = new DefaultMQProducer("ReSendMsgById",false);
         defaultMQProducer.setInstanceName(Long.toString(System.currentTimeMillis()));
 
         try {

File: tools/src/main/java/org/apache/rocketmq/tools/monitor/MonitorService.java
Patch:
@@ -65,7 +65,7 @@ public class MonitorService {
     private final DefaultMQPullConsumer defaultMQPullConsumer = new DefaultMQPullConsumer(
         MixAll.TOOLS_CONSUMER_GROUP);
     private final DefaultMQPushConsumer defaultMQPushConsumer = new DefaultMQPushConsumer(
-        MixAll.MONITOR_CONSUMER_GROUP);
+        MixAll.MONITOR_CONSUMER_GROUP,false);
 
     public MonitorService(MonitorConfig monitorConfig, MonitorListener monitorListener, RPCHook rpcHook) {
         this.monitorConfig = monitorConfig;

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -144,7 +144,7 @@ public MQClientInstance(ClientConfig clientConfig, int instanceIndex, String cli
 
         this.rebalanceService = new RebalanceService(this);
 
-        this.defaultMQProducer = new DefaultMQProducer(MixAll.CLIENT_INNER_PRODUCER_GROUP,false);
+        this.defaultMQProducer = new DefaultMQProducer(MixAll.CLIENT_INNER_PRODUCER_GROUP);
         this.defaultMQProducer.resetClientConfig(clientConfig);
 
         this.consumerStatsManager = new ConsumerStatsManager(this.scheduledExecutorService);

File: client/src/main/java/org/apache/rocketmq/client/producer/TransactionMQProducer.java
Patch:
@@ -35,11 +35,11 @@ public TransactionMQProducer() {
     }
 
     public TransactionMQProducer(final String producerGroup) {
-        super(producerGroup,false);
+        super(producerGroup);
     }
 
     public TransactionMQProducer(final String producerGroup, RPCHook rpcHook) {
-        super(producerGroup, rpcHook,false);
+        super(producerGroup, rpcHook);
     }
 
     @Override

File: client/src/main/java/org/apache/rocketmq/client/trace/core/common/TrackTraceBean.java
Patch:
@@ -16,11 +16,11 @@
  */
 package org.apache.rocketmq.client.trace.core.common;
 
-import org.apache.rocketmq.client.trace.core.Utils.TrackTraceUtils;
+import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.message.MessageType;
 
 public class TrackTraceBean {
-    private static final String LOCAL_ADDRESS = TrackTraceUtils.getLocalAddress();
+    private static final String LOCAL_ADDRESS = UtilAll.ipToIPv4Str(UtilAll.getIP());
     private String topic = "";
     private String msgId = "";
     private String offsetMsgId = "";

File: client/src/main/java/org/apache/rocketmq/client/trace/core/common/TrackTraceType.java
Patch:
@@ -16,9 +16,6 @@
  */
 package org.apache.rocketmq.client.trace.core.common;
 
-/**
- * Created by zongtanghu on 2018/11/6.
- */
 public enum TrackTraceType {
     Pub,
     SubBefore,

File: client/src/test/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumerTest.java
Patch:
@@ -89,7 +89,7 @@ public class DefaultMQPushConsumerTest {
     @Before
     public void init() throws Exception {
         consumerGroup = "FooBarGroup" + System.currentTimeMillis();
-        pushConsumer = new DefaultMQPushConsumer(consumerGroup,false);
+        pushConsumer = new DefaultMQPushConsumer(consumerGroup);
         pushConsumer.setNamesrvAddr("127.0.0.1:9876");
         pushConsumer.setPullInterval(60 * 1000);
 
@@ -252,7 +252,7 @@ public void testCheckConfig() {
     }
 
     private DefaultMQPushConsumer createPushConsumer() {
-        DefaultMQPushConsumer pushConsumer = new DefaultMQPushConsumer(consumerGroup,false);
+        DefaultMQPushConsumer pushConsumer = new DefaultMQPushConsumer(consumerGroup);
         pushConsumer.registerMessageListener(new MessageListenerConcurrently() {
             @Override
             public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,

File: client/src/test/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImplTest.java
Patch:
@@ -42,7 +42,7 @@ public void checkConfigTest() throws MQClientException {
         //test message
         thrown.expectMessage("consumeThreadMin (10) is larger than consumeThreadMax (9)");
 
-        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("test_consumer_group",false);
+        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("test_consumer_group");
 
         consumer.setConsumeThreadMin(10);
         consumer.setConsumeThreadMax(9);

File: client/src/test/java/org/apache/rocketmq/client/impl/consumer/RebalancePushImplTest.java
Patch:
@@ -44,7 +44,7 @@
 @RunWith(MockitoJUnitRunner.class)
 public class RebalancePushImplTest {
     @Spy
-    private DefaultMQPushConsumerImpl defaultMQPushConsumer = new DefaultMQPushConsumerImpl(new DefaultMQPushConsumer("RebalancePushImplTest",false), null);
+    private DefaultMQPushConsumerImpl defaultMQPushConsumer = new DefaultMQPushConsumerImpl(new DefaultMQPushConsumer("RebalancePushImplTest"), null);
     @Mock
     private MQClientInstance mqClientInstance;
     @Mock

File: client/src/test/java/org/apache/rocketmq/client/producer/DefaultMQProducerTest.java
Patch:
@@ -82,7 +82,7 @@ public class DefaultMQProducerTest {
     @Before
     public void init() throws Exception {
         String producerGroupTemp = producerGroupPrefix + System.currentTimeMillis();
-        producer = new DefaultMQProducer(producerGroupTemp,false);
+        producer = new DefaultMQProducer(producerGroupTemp);
         producer.setNamesrvAddr("127.0.0.1:9876");
         producer.setCompressMsgBodyOverHowmuch(16);
         message = new Message(topic, new byte[] {'a'});
@@ -309,7 +309,7 @@ public void run() {
     @Test
     public void testSetCallbackExecutor() throws MQClientException {
         String producerGroupTemp = "testSetCallbackExecutor_" + System.currentTimeMillis();
-        producer = new DefaultMQProducer(producerGroupTemp,false);
+        producer = new DefaultMQProducer(producerGroupTemp);
         producer.setNamesrvAddr("127.0.0.1:9876");
         producer.start();
 

File: example/src/main/java/org/apache/rocketmq/example/batch/SimpleBatchProducer.java
Patch:
@@ -25,7 +25,7 @@
 public class SimpleBatchProducer {
 
     public static void main(String[] args) throws Exception {
-        DefaultMQProducer producer = new DefaultMQProducer("BatchProducerGroupName",false);
+        DefaultMQProducer producer = new DefaultMQProducer("BatchProducerGroupName");
         producer.start();
 
         //If you just send messages of no more than 1MiB at a time, it is easy to use batch

File: example/src/main/java/org/apache/rocketmq/example/batch/SplitBatchProducer.java
Patch:
@@ -28,7 +28,7 @@ public class SplitBatchProducer {
 
     public static void main(String[] args) throws Exception {
 
-        DefaultMQProducer producer = new DefaultMQProducer("BatchProducerGroupName",false);
+        DefaultMQProducer producer = new DefaultMQProducer("BatchProducerGroupName");
         producer.start();
 
         //large batch

File: example/src/main/java/org/apache/rocketmq/example/benchmark/Consumer.java
Patch:
@@ -102,7 +102,7 @@ public void run() {
             }
         }, 10000, 10000);
 
-        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(group,false);
+        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(group);
         consumer.setInstanceName(Long.toString(System.currentTimeMillis()));
 
         if (filterType == null || expression == null) {

File: example/src/main/java/org/apache/rocketmq/example/benchmark/Producer.java
Patch:
@@ -100,7 +100,7 @@ public void run() {
             }
         }, 10000, 10000);
 
-        final DefaultMQProducer producer = new DefaultMQProducer("benchmark_producer",false);
+        final DefaultMQProducer producer = new DefaultMQProducer("benchmark_producer");
         producer.setInstanceName(Long.toString(System.currentTimeMillis()));
 
         if (commandLine.hasOption('n')) {

File: example/src/main/java/org/apache/rocketmq/example/broadcast/PushConsumer.java
Patch:
@@ -29,7 +29,7 @@
 public class PushConsumer {
 
     public static void main(String[] args) throws InterruptedException, MQClientException {
-        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("please_rename_unique_group_name_1",false);
+        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("please_rename_unique_group_name_1");
 
         consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);
 

File: example/src/main/java/org/apache/rocketmq/example/filter/Consumer.java
Patch:
@@ -30,7 +30,7 @@
 public class Consumer {
 
     public static void main(String[] args) throws InterruptedException, MQClientException, IOException {
-        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("ConsumerGroupNamecc4",false);
+        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("ConsumerGroupNamecc4");
 
         ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
         File classFile = new File(classLoader.getResource("MessageFilterImpl.java").getFile());

File: example/src/main/java/org/apache/rocketmq/example/filter/Producer.java
Patch:
@@ -24,7 +24,7 @@
 
 public class Producer {
     public static void main(String[] args) throws MQClientException, InterruptedException {
-        DefaultMQProducer producer = new DefaultMQProducer("ProducerGroupName",false);
+        DefaultMQProducer producer = new DefaultMQProducer("ProducerGroupName");
         producer.start();
 
         try {

File: example/src/main/java/org/apache/rocketmq/example/filter/SqlConsumer.java
Patch:
@@ -30,7 +30,7 @@
 public class SqlConsumer {
 
     public static void main(String[] args) {
-        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("please_rename_unique_group_name_4",false);
+        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("please_rename_unique_group_name_4");
         try {
             consumer.subscribe("TopicTest",
                 MessageSelector.bySql("(TAGS is not null and TAGS in ('TagA', 'TagB'))" +

File: example/src/main/java/org/apache/rocketmq/example/filter/SqlProducer.java
Patch:
@@ -26,7 +26,7 @@
 public class SqlProducer {
 
     public static void main(String[] args) {
-        DefaultMQProducer producer = new DefaultMQProducer("please_rename_unique_group_name",false);
+        DefaultMQProducer producer = new DefaultMQProducer("please_rename_unique_group_name");
         try {
             producer.start();
         } catch (MQClientException e) {

File: example/src/main/java/org/apache/rocketmq/example/operation/Consumer.java
Patch:
@@ -41,7 +41,7 @@ public static void main(String[] args) throws InterruptedException, MQClientExce
             String subscription = commandLine.getOptionValue('s');
             final String returnFailedHalf = commandLine.getOptionValue('f');
 
-            DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(group,false);
+            DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(group);
             consumer.setInstanceName(Long.toString(System.currentTimeMillis()));
 
             consumer.subscribe(topic, subscription);

File: example/src/main/java/org/apache/rocketmq/example/operation/Producer.java
Patch:
@@ -39,7 +39,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
             String keys = commandLine.getOptionValue('k');
             String msgCount = commandLine.getOptionValue('c');
 
-            DefaultMQProducer producer = new DefaultMQProducer(group,false);
+            DefaultMQProducer producer = new DefaultMQProducer(group);
             producer.setInstanceName(Long.toString(System.currentTimeMillis()));
 
             producer.start();

File: example/src/main/java/org/apache/rocketmq/example/ordermessage/Consumer.java
Patch:
@@ -29,7 +29,7 @@
 public class Consumer {
 
     public static void main(String[] args) throws MQClientException {
-        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("please_rename_unique_group_name_3",false);
+        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("please_rename_unique_group_name_3");
 
         consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);
 

File: example/src/main/java/org/apache/rocketmq/example/ordermessage/Producer.java
Patch:
@@ -32,7 +32,7 @@
 public class Producer {
     public static void main(String[] args) throws UnsupportedEncodingException {
         try {
-            MQProducer producer = new DefaultMQProducer("please_rename_unique_group_name",false);
+            MQProducer producer = new DefaultMQProducer("please_rename_unique_group_name");
             producer.start();
 
             String[] tags = new String[] {"TagA", "TagB", "TagC", "TagD", "TagE"};

File: example/src/main/java/org/apache/rocketmq/example/quickstart/Consumer.java
Patch:
@@ -35,7 +35,7 @@ public static void main(String[] args) throws InterruptedException, MQClientExce
         /*
          * Instantiate with specified consumer group name.
          */
-        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("please_rename_unique_group_name_4",false);
+        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("please_rename_unique_group_name_4");
 
         /*
          * Specify name server addresses.

File: example/src/main/java/org/apache/rocketmq/example/quickstart/Producer.java
Patch:
@@ -31,7 +31,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
         /*
          * Instantiate with a producer group name.
          */
-        DefaultMQProducer producer = new DefaultMQProducer("please_rename_unique_group_name",false);
+        DefaultMQProducer producer = new DefaultMQProducer("please_rename_unique_group_name");
 
         /*
          * Specify name server addresses.

File: example/src/main/java/org/apache/rocketmq/example/simple/AsyncProducer.java
Patch:
@@ -30,7 +30,7 @@ public class AsyncProducer {
     public static void main(
         String[] args) throws MQClientException, InterruptedException, UnsupportedEncodingException {
 
-        DefaultMQProducer producer = new DefaultMQProducer("Jodie_Daily_test",false);
+        DefaultMQProducer producer = new DefaultMQProducer("Jodie_Daily_test");
         producer.start();
         producer.setRetryTimesWhenSendAsyncFailed(0);
 

File: example/src/main/java/org/apache/rocketmq/example/simple/Producer.java
Patch:
@@ -25,7 +25,7 @@
 public class Producer {
     public static void main(String[] args) throws MQClientException, InterruptedException {
 
-        DefaultMQProducer producer = new DefaultMQProducer("ProducerGroupName",true);
+        DefaultMQProducer producer = new DefaultMQProducer("ProducerGroupName");
         producer.start();
 
         for (int i = 0; i < 128; i++)

File: example/src/main/java/org/apache/rocketmq/example/simple/PushConsumer.java
Patch:
@@ -28,7 +28,7 @@
 public class PushConsumer {
 
     public static void main(String[] args) throws InterruptedException, MQClientException {
-        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("CID_JODIE_1",true);
+        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("CID_JODIE_1");
         consumer.subscribe("TopicTest", "*");
         consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);
         //wrong time format 2017_0422_221800

File: example/src/main/java/org/apache/rocketmq/example/simple/TestProducer.java
Patch:
@@ -26,7 +26,7 @@
 
 public class TestProducer {
     public static void main(String[] args) throws MQClientException, InterruptedException {
-        DefaultMQProducer producer = new DefaultMQProducer("ProducerGroupName",false);
+        DefaultMQProducer producer = new DefaultMQProducer("ProducerGroupName");
         producer.start();
 
         for (int i = 0; i < 1; i++)

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/SendMsgStatusCommand.java
Patch:
@@ -71,7 +71,7 @@ public Options buildCommandlineOptions(Options options) {
 
     @Override
     public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) throws SubCommandException {
-        final DefaultMQProducer producer = new DefaultMQProducer("PID_SMSC", rpcHook,false);
+        final DefaultMQProducer producer = new DefaultMQProducer("PID_SMSC", rpcHook);
         producer.setInstanceName("PID_SMSC_" + System.currentTimeMillis());
 
         try {

File: store/src/main/java/org/apache/rocketmq/store/dleger/DLegerCommitLog.java
Patch:
@@ -275,6 +275,7 @@ public long getBeginTimeInLock() {
         return beginTimeInDlegerLock;
     }
 
+    @Override
     public PutMessageResult putMessage(final MessageExtBrokerInner msg) {
         // Set the storage time
         msg.setStoreTimestamp(System.currentTimeMillis());
@@ -415,6 +416,7 @@ public void handleHA(AppendMessageResult result, PutMessageResult putMessageResu
 
     }
 
+    @Override
     public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) {
         return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);
     }

File: acl/src/main/java/org/apache/rocketmq/acl/plug/PlainAclPlugEngine.java
Patch:
@@ -56,6 +56,7 @@ public void initialize() {
         if (accessControlTransport == null) {
             throw new AclPlugRuntimeException("transport.yml file  is no data");
         }
+        log.info("BorkerAccessControlTransport data is : ", accessControlTransport.toString());
         accessContralAnalysis.analysisClass(accessContralAnalysisClass);
         setBorkerAccessControlTransport(accessControlTransport);
     }

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -1033,6 +1033,7 @@ public void registerConsumeMessageHook(final ConsumeMessageHook hook) {
 
     public void registerServerRPCHook(RPCHook rpcHook) {
         getRemotingServer().registerRPCHook(rpcHook);
+        this.fastRemotingServer.registerRPCHook(rpcHook);
     }
 
     public RemotingServer getRemotingServer() {

File: store/src/main/java/org/apache/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -143,7 +143,7 @@ public class MessageStoreConfig {
     private int transientStorePoolSize = 5;
     private boolean fastFailIfNoBufferInStorePool = false;
 
-    private boolean enableDLegerCommitLog;
+    private boolean enableDLegerCommitLog = false;
     private String dLegerGroup;
     private String dLegerPeers;
     private String dLegerSelfId;

File: store/src/test/java/org/apache/rocketmq/store/ConsumeQueueTest.java
Patch:
@@ -30,9 +30,10 @@
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 import org.apache.rocketmq.store.stats.BrokerStatsManager;
-import static org.assertj.core.api.Assertions.assertThat;
 import org.junit.Test;
 
+import static org.assertj.core.api.Assertions.assertThat;
+
 public class ConsumeQueueTest {
 
     private static final String msg = "Once, there was a chance for me!";

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -60,7 +60,7 @@ public class CommitLog {
     protected HashMap<String/* topic-queueid */, Long/* offset */> topicQueueTable = new HashMap<String, Long>(1024);
     protected volatile long confirmOffset = -1L;
 
-    protected volatile long beginTimeInLock = 0;
+    private volatile long beginTimeInLock = 0;
     protected final PutMessageLock putMessageLock;
 
     public CommitLog(final DefaultMessageStore defaultMessageStore) {

File: store/src/main/java/org/apache/rocketmq/store/dleger/DLegerCommitLog.java
Patch:
@@ -345,14 +345,14 @@ public PutMessageResult putMessage(final MessageExtBrokerInner msg) {
             log.error("Put message error", e);
             appendResult = new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR);
         } finally {
+            beginTimeInLock = 0;
             putMessageLock.unlock();
         }
 
         if (eclipseTimeInLock > 500) {
             log.warn("[NOTIFYME]putMessage in lock cost time(ms)={}, bodyLength={} AppendMessageResult={}", eclipseTimeInLock, msg.getBody().length, appendResult);
         }
 
-
         if (dlegerFuture != null) {
             try {
                 AppendEntryResponse appendEntryResponse = dlegerFuture.get(3, TimeUnit.SECONDS);

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -1029,7 +1029,7 @@ public BlockingQueue<Runnable> getEndTransactionThreadPoolQueue() {
 
     private void handleSlaveSynchronize(BrokerRole role) {
         if (role == BrokerRole.SLAVE) {
-            if (null != slaveSyncFuture){
+            if (null != slaveSyncFuture) {
                 slaveSyncFuture.cancel(false);
             }
             this.slaveSynchronize.setMasterAddr(null);
@@ -1046,7 +1046,7 @@ public void run() {
             }, 1000 * 10, 1000 * 60, TimeUnit.MILLISECONDS);
         } else {
             //handle the slave synchronise
-            if (null != slaveSyncFuture){
+            if (null != slaveSyncFuture) {
                 slaveSyncFuture.cancel(false);
             }
             this.slaveSynchronize.setMasterAddr(null);

File: store/src/main/java/org/apache/rocketmq/store/dleger/DLegerCommitLog.java
Patch:
@@ -366,7 +366,7 @@ public PutMessageResult putMessage(final MessageExtBrokerInner msg) {
                         break;
                     case INCONSISTENT_LEADER:
                     case NOT_LEADER:
-                    case NOT_READY:
+                    case LEADER_NOT_READY:
                     case DISK_FULL:
                         putMessageStatus = PutMessageStatus.SERVICE_NOT_AVAILABLE;
                         break;

File: store/src/test/java/org/apache/rocketmq/store/StoreTestBase.java
Patch:
@@ -21,10 +21,10 @@ public class StoreTestBase {
 
     protected Set<String> baseDirs = new HashSet<>();
 
-    private AtomicInteger port = new AtomicInteger(30000);
+    private static AtomicInteger port = new AtomicInteger(30000);
 
-    public int nextPort() {
-        return port.incrementAndGet();
+    public static synchronized int nextPort() {
+        return port.addAndGet(5);
     }
 
     protected MessageExtBrokerInner buildMessage() {

File: test/src/test/java/org/apache/rocketmq/test/base/IntegrationTestBase.java
Patch:
@@ -47,7 +47,7 @@ public class IntegrationTestBase {
     protected static final List<BrokerController> BROKER_CONTROLLERS = new ArrayList<>();
     protected static final List<NamesrvController> NAMESRV_CONTROLLERS = new ArrayList<>();
     protected static int topicCreateTime = 30 * 1000;
-    protected static final int COMMIT_LOG_SIZE = 1024 * 1024 * 256;
+    protected static final int COMMIT_LOG_SIZE = 1024 * 1024 * 100;
     protected static final int INDEX_NUM = 1000;
 
     private static final AtomicInteger port = new AtomicInteger(50000);
@@ -135,7 +135,7 @@ public static BrokerController createAndStartBroker(String nsAddr) {
         brokerConfig.setEnablePropertyFilter(true);
         storeConfig.setStorePathRootDir(baseDir);
         storeConfig.setStorePathCommitLog(baseDir + SEP + "commitlog");
-        storeConfig.setMapedFileSizeCommitLog(100 * 1024 * 1024);
+        storeConfig.setMapedFileSizeCommitLog(COMMIT_LOG_SIZE);
         storeConfig.setMaxIndexNum(INDEX_NUM);
         storeConfig.setMaxHashSlotNum(INDEX_NUM * 4);
         return createAndStartBroker(storeConfig, brokerConfig);

File: store/src/main/java/org/apache/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -604,7 +604,7 @@ public void setDefaultQueryMaxNum(int defaultQueryMaxNum) {
     }
 
     /**
-     * Enable transient commitLog store poll only if transientStorePoolEnable is true and the FlushDiskType is
+     * Enable transient commitLog store pool only if transientStorePoolEnable is true and the FlushDiskType is
      * ASYNC_FLUSH
      *
      * @return <tt>true</tt> or <tt>false</tt>

File: acl-plug/src/main/java/org/apache/rocketmq/acl/plug/Authentication.java
Patch:
@@ -24,7 +24,7 @@
 public class Authentication {
 
     public boolean authentication(AuthenticationInfo authenticationInfo,
-        AccessControl accessControl, AuthenticationResult authenticationResult) {
+                                  AccessControl accessControl, AuthenticationResult authenticationResult) {
         int code = accessControl.getCode();
         if (!authenticationInfo.getAuthority().get(code)) {
             authenticationResult.setResultString(String.format("code is %d Authentication failed", code));

File: acl-plug/src/main/java/org/apache/rocketmq/acl/plug/engine/AclPlugEngine.java
Patch:
@@ -31,5 +31,7 @@ public interface AclPlugEngine {
 
     public AuthenticationResult eachCheckLoginAndAuthentication(AccessControl accessControl);
 
+    public AuthenticationResult eachCheckAuthentication(AccessControl accessControl);
+
     public void initialize();
 }

File: acl-plug/src/main/java/org/apache/rocketmq/acl/plug/engine/LoginInfoAclPlugEngine.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
+
 import org.apache.rocketmq.acl.plug.entity.AccessControl;
 import org.apache.rocketmq.acl.plug.entity.AuthenticationInfo;
 import org.apache.rocketmq.acl.plug.entity.AuthenticationResult;
@@ -53,7 +54,7 @@ public void deleteLoginInfo(String remoteAddr) {
     }
 
     protected AuthenticationInfo getAuthenticationInfo(AccessControl accessControl,
-        AuthenticationResult authenticationResult) {
+                                                       AuthenticationResult authenticationResult) {
         LoginInfo loginInfo = getLoginInfo(accessControl);
         if (loginInfo != null && loginInfo.getAuthenticationInfo() != null) {
             return loginInfo.getAuthenticationInfo();

File: acl-plug/src/main/java/org/apache/rocketmq/acl/plug/entity/BorkerAccessControl.java
Patch:
@@ -556,8 +556,8 @@ public void setQueryConsumeQueue(boolean queryConsumeQueue) {
     public String toString() {
         StringBuilder builder = new StringBuilder();
         builder.append("BorkerAccessControl [permitSendTopic=").append(permitSendTopic).append(", noPermitSendTopic=")
-            .append(noPermitSendTopic).append(", permitPullTopic=").append(permitPullTopic)
-            .append(", noPermitPullTopic=").append(noPermitPullTopic);
+                .append(noPermitSendTopic).append(", permitPullTopic=").append(permitPullTopic)
+                .append(", noPermitPullTopic=").append(noPermitPullTopic);
         if (!!sendMessage)
             builder.append(", sendMessage=").append(sendMessage);
         if (!!sendMessageV2)

File: acl-plug/src/main/java/org/apache/rocketmq/acl/plug/entity/ControllerParameters.java
Patch:
@@ -16,11 +16,12 @@
  */
 package org.apache.rocketmq.acl.plug.entity;
 
+import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.protocol.RequestCode;
 
 public class ControllerParameters {
 
-    private String fileHome;
+    private String fileHome = System.getProperty(MixAll.ROCKETMQ_HOME_PROPERTY, System.getenv(MixAll.ROCKETMQ_HOME_ENV));
 
     private Class<?> accessContralAnalysisClass = RequestCode.class;
 
@@ -44,7 +45,7 @@ public void setAccessContralAnalysisClass(Class<?> accessContralAnalysisClass) {
     public String toString() {
         StringBuilder builder = new StringBuilder();
         builder.append("ControllerParametersEntity [fileHome=").append(fileHome).append(", accessContralAnalysisClass=")
-            .append(accessContralAnalysisClass).append("]");
+                .append(accessContralAnalysisClass).append("]");
         return builder.toString();
     }
 

File: acl-plug/src/main/java/org/apache/rocketmq/acl/plug/entity/LoginInfo.java
Patch:
@@ -74,8 +74,8 @@ public void setClear(AtomicBoolean clear) {
     public String toString() {
         StringBuilder builder = new StringBuilder();
         builder.append("LoginInfo [recognition=").append(recognition).append(", loginTime=").append(loginTime)
-            .append(", operationTime=").append(operationTime).append(", clear=").append(clear)
-            .append(", authenticationInfo=").append(authenticationInfo).append("]");
+                .append(", operationTime=").append(operationTime).append(", clear=").append(clear)
+                .append(", authenticationInfo=").append(authenticationInfo).append("]");
         return builder.toString();
     }
 

File: acl-plug/src/main/java/org/apache/rocketmq/acl/plug/strategy/NetaddressStrategyFactory.java
Patch:
@@ -16,13 +16,14 @@
  */
 package org.apache.rocketmq.acl.plug.strategy;
 
-import java.util.HashSet;
-import java.util.Set;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.acl.plug.AclUtils;
 import org.apache.rocketmq.acl.plug.entity.AccessControl;
 import org.apache.rocketmq.acl.plug.exception.AclPlugRuntimeException;
 
+import java.util.HashSet;
+import java.util.Set;
+
 public class NetaddressStrategyFactory {
 
     public static final NullNetaddressStrategy NULL_NET_ADDRESS_STRATEGY = new NullNetaddressStrategy();

File: acl-plug/src/test/java/org/apache/rocketmq/acl/plug/AclUtilsTest.java
Patch:
@@ -18,13 +18,12 @@
 
 import java.util.ArrayList;
 import java.util.List;
+
 import org.apache.commons.lang3.StringUtils;
 import org.junit.Assert;
 import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.junit.MockitoJUnitRunner;
 
-@RunWith(MockitoJUnitRunner.class)
+
 public class AclUtilsTest {
 
     @Test

File: broker/src/main/java/org/apache/rocketmq/broker/client/ClientHousekeepingService.java
Patch:
@@ -72,9 +72,6 @@ public void onChannelClose(String remoteAddr, Channel channel) {
         this.brokerController.getProducerManager().doChannelCloseEvent(remoteAddr, channel);
         this.brokerController.getConsumerManager().doChannelCloseEvent(remoteAddr, channel);
         this.brokerController.getFilterServerManager().doChannelCloseEvent(remoteAddr, channel);
-        if (this.brokerController.getAclPlugController() != null && this.brokerController.getAclPlugController().isStartSucceed()) {
-            this.brokerController.getAclPlugController().doChannelCloseEvent(remoteAddr);
-        }
     }
 
     @Override

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -282,7 +282,7 @@ public void closeChannel(final String addr, final Channel channel) {
 
     @Override
     public void registerRPCHook(RPCHook rpcHook) {
-        if (!rpcHooks.contains(rpcHook)) {
+        if (rpcHook != null && !rpcHooks.contains(rpcHook)) {
             rpcHooks.add(rpcHook);
         }
     }

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingServer.java
Patch:
@@ -265,7 +265,7 @@ public void shutdown() {
 
     @Override
     public void registerRPCHook(RPCHook rpcHook) {
-        if (!rpcHooks.contains(rpcHook)) {
+        if (rpcHook != null && !rpcHooks.contains(rpcHook)) {
             rpcHooks.add(rpcHook);
         }
     }

File: common/src/main/java/org/apache/rocketmq/common/constant/LoggerName.java
Patch:
@@ -19,6 +19,7 @@
 public class LoggerName {
     public static final String FILTERSRV_LOGGER_NAME = "RocketmqFiltersrv";
     public static final String NAMESRV_LOGGER_NAME = "RocketmqNamesrv";
+    public static final String NAMESRV_CONSOLE_NAME = "RocketmqNamesrvConsole";
     public static final String BROKER_LOGGER_NAME = "RocketmqBroker";
     public static final String BROKER_CONSOLE_NAME = "RocketmqConsole";
     public static final String CLIENT_LOGGER_NAME = "RocketmqClient";

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/NamesrvStartup.java
Patch:
@@ -99,8 +99,9 @@ public static NamesrvController createNamesrvController(String[] args) throws IO
         }
 
         if (commandLine.hasOption('p')) {
-            MixAll.printObjectProperties(null, namesrvConfig);
-            MixAll.printObjectProperties(null, nettyServerConfig);
+            InternalLogger console = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_CONSOLE_NAME);
+            MixAll.printObjectProperties(console, namesrvConfig);
+            MixAll.printObjectProperties(console, nettyServerConfig);
             System.exit(0);
         }
 

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -842,7 +842,7 @@ public boolean consumed(final MessageExt msg,
                 BrokerData brokerData = ci.getBrokerAddrTable().get(mq.getBrokerName());
                 if (brokerData != null) {
                     String addr = brokerData.getBrokerAddrs().get(MixAll.MASTER_ID);
-                    if (addr.equals(RemotingUtil.socketAddress2String(msg.getStoreHost()))) {
+                    if (RemotingUtil.socketAddress2String(msg.getStoreHost()).equals(addr)) {
                         if (next.getValue().getConsumerOffset() > msg.getQueueOffset()) {
                             return true;
                         }

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -198,7 +198,6 @@ else if (dispatchRequest.isSuccess() && size == 0) {
                 // Intermediate file read error
                 else if (!dispatchRequest.isSuccess()) {
                     log.info("recover physics file end, " + mappedFile.getFileName());
-                    isDamaged = true;
                     break;
                 }
             }

File: common/src/test/java/org/apache/rocketmq/common/MixAllTest.java
Patch:
@@ -34,7 +34,7 @@ public void testGetLocalInetAddress() throws Exception {
         List<String> localInetAddress = MixAll.getLocalInetAddress();
         String local = InetAddress.getLocalHost().getHostAddress();
         assertThat(localInetAddress).contains("127.0.0.1");
-        assertThat(localInetAddress).contains(local);
+        assertThat(local).isNotNull();
     }
 
     @Test

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -1371,6 +1371,7 @@ public void putMessagePositionInfo(DispatchRequest dispatchRequest) {
         cq.putMessagePositionInfoWrapper(dispatchRequest);
     }
 
+    @Override
     public BrokerStatsManager getBrokerStatsManager() {
         return brokerStatsManager;
     }

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -1153,7 +1153,7 @@ public TransactionSendResult sendMessageInTransaction(final Message msg,
                         localTransactionState = localTransactionExecuter.executeLocalTransactionBranch(msg, arg);
                     } else if (transactionListener != null) {
                         log.debug("Used new transaction API");
-                        transactionListener.executeLocalTransaction(msg, arg);
+                        localTransactionState = transactionListener.executeLocalTransaction(msg, arg);
                     }
                     if (null == localTransactionState) {
                         localTransactionState = LocalTransactionState.UNKNOW;

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/ConsumeMessageCommand.java
Patch:
@@ -131,7 +131,7 @@ public void execute(final CommandLine commandLine, final Options options, RPCHoo
         try {
             /* Group name must be set before consumer start */
             if (commandLine.hasOption('g')) {
-                String consumerGroup = commandLine.getOptionValue('b').trim();
+                String consumerGroup = commandLine.getOptionValue('g').trim();
                 defaultMQPullConsumer.setConsumerGroup(consumerGroup);
             }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -1153,7 +1153,7 @@ public TransactionSendResult sendMessageInTransaction(final Message msg,
                         localTransactionState = localTransactionExecuter.executeLocalTransactionBranch(msg, arg);
                     } else if (transactionListener != null) {
                         log.debug("Used new transaction API");
-                        transactionListener.executeLocalTransaction(msg, arg);
+                        localTransactionState = transactionListener.executeLocalTransaction(msg, arg);
                     }
                     if (null == localTransactionState) {
                         localTransactionState = LocalTransactionState.UNKNOW;

File: common/src/main/java/org/apache/rocketmq/common/MQVersion.java
Patch:
@@ -18,7 +18,7 @@
 
 public class MQVersion {
 
-    public static final int CURRENT_VERSION = Version.V4_3_0.ordinal();
+    public static final int CURRENT_VERSION = Version.V4_3_1.ordinal();
 
     public static String getVersionDesc(int value) {
         int length = Version.values().length;

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -757,6 +757,7 @@ public void shutdown() {
         }
         if (this.transactionalMessageCheckService != null) {
             this.transactionalMessageCheckService.shutdown(false);
+        }
 
         if (this.endTransactionExecutor != null) {
             this.endTransactionExecutor.shutdown();

File: client/src/main/java/org/apache/rocketmq/client/producer/TransactionListener.java
Patch:
@@ -37,4 +37,4 @@ public interface TransactionListener {
      * @return Transaction state
      */
     LocalTransactionState checkLocalTransaction(final MessageExt msg);
-}
+}
\ No newline at end of file

File: common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
Patch:
@@ -157,7 +157,7 @@ public class BrokerConfig {
      * that can be checked.
      */
     @ImportantField
-    private long transactionTimeOut = 3 * 1000;
+    private long transactionTimeOut = 6 * 1000;
 
     /**
      * The maximum number of times the message was checked, if exceed this value, this message will be discarded.

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -57,7 +57,7 @@ public class MixAll {
     public static final String WS_DOMAIN_SUBGROUP = System.getProperty("rocketmq.namesrv.domain.subgroup", "nsaddr");
     //http://jmenv.tbsite.net:8080/rocketmq/nsaddr
     //public static final String WS_ADDR = "http://" + WS_DOMAIN_NAME + ":8080/rocketmq/" + WS_DOMAIN_SUBGROUP;
-    public static final String AUTO_CREATE_TOPIC_KEY_TOPIC = "AUTO_CREATE_TOPIC_KEY"; // Will be created at broker when isAutoCreateTopicEnable
+    public static final String AUTO_CREATE_TOPIC_KEY_TOPIC = "TBW102"; // Will be created at broker when isAutoCreateTopicEnable
     public static final String BENCHMARK_TOPIC = "BenchmarkTest";
     public static final String DEFAULT_PRODUCER_GROUP = "DEFAULT_PRODUCER";
     public static final String DEFAULT_CONSUMER_GROUP = "DEFAULT_CONSUMER";

File: example/src/main/java/org/apache/rocketmq/example/transaction/TransactionListenerImpl.java
Patch:
@@ -48,6 +48,8 @@ public LocalTransactionState checkLocalTransaction(MessageExt msg) {
                     return LocalTransactionState.COMMIT_MESSAGE;
                 case 2:
                     return LocalTransactionState.ROLLBACK_MESSAGE;
+                default:
+                    return LocalTransactionState.COMMIT_MESSAGE;
             }
         }
         return LocalTransactionState.COMMIT_MESSAGE;

File: broker/src/main/java/org/apache/rocketmq/broker/latency/BrokerFastFailure.java
Patch:
@@ -92,6 +92,9 @@ private void cleanExpiredRequest() {
 
         cleanExpiredRequestInQueue(this.brokerController.getHeartbeatThreadPoolQueue(),
             this.brokerController.getBrokerConfig().getWaitTimeMillsInHeartbeatQueue());
+
+        cleanExpiredRequestInQueue(this.brokerController.getEndTransactionThreadPoolQueue(), this
+            .brokerController.getBrokerConfig().getWaitTimeMillsInTransactionQueue());
     }
 
     void cleanExpiredRequestInQueue(final BlockingQueue<Runnable> blockingQueue, final long maxWaitTimeMillsInQueue) {

File: client/src/main/java/org/apache/rocketmq/client/producer/DefaultMQProducer.java
Patch:
@@ -464,12 +464,14 @@ public void sendOneway(Message msg, MessageQueueSelector selector, Object arg)
      * This method is to send transactional messages.
      *
      * @param msg Transactional message to send.
+     * @param tranExecuter local transaction executor.
      * @param arg Argument used along with local transaction executor.
      * @return Transaction result.
      * @throws MQClientException if there is any client error.
      */
     @Override
-    public TransactionSendResult sendMessageInTransaction(Message msg, final Object arg)
+    public TransactionSendResult sendMessageInTransaction(Message msg, LocalTransactionExecuter tranExecuter,
+        final Object arg)
         throws MQClientException {
         throw new RuntimeException("sendMessageInTransaction not implement, please use TransactionMQProducer class");
     }

File: client/src/main/java/org/apache/rocketmq/client/producer/MQProducer.java
Patch:
@@ -80,7 +80,8 @@ void send(final Message msg, final MessageQueueSelector selector, final Object a
     void sendOneway(final Message msg, final MessageQueueSelector selector, final Object arg)
         throws MQClientException, RemotingException, InterruptedException;
 
-    TransactionSendResult sendMessageInTransaction(final Message msg, final Object arg) throws MQClientException;
+    TransactionSendResult sendMessageInTransaction(final Message msg,
+        final LocalTransactionExecuter tranExecuter, final Object arg) throws MQClientException;
 
     //for batch
     SendResult send(final Collection<Message> msgs) throws MQClientException, RemotingException, MQBrokerException,

File: common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
Patch:
@@ -150,13 +150,13 @@ public class BrokerConfig {
      * that can be checked.
      */
     @ImportantField
-    private long transactionTimeOut = 3 * 1000;
+    private long transactionTimeOut = 6 * 1000;
 
     /**
      * The maximum number of times the message was checked, if exceed this value, this message will be discarded.
      */
     @ImportantField
-    private int transactionCheckMax = 5;
+    private int transactionCheckMax = 15;
 
     /**
      * Transaction message check interval.

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -57,7 +57,7 @@ public class MixAll {
     public static final String WS_DOMAIN_SUBGROUP = System.getProperty("rocketmq.namesrv.domain.subgroup", "nsaddr");
     //http://jmenv.tbsite.net:8080/rocketmq/nsaddr
     //public static final String WS_ADDR = "http://" + WS_DOMAIN_NAME + ":8080/rocketmq/" + WS_DOMAIN_SUBGROUP;
-    public static final String AUTO_CREATE_TOPIC_KEY_TOPIC = "AUTO_CREATE_TOPIC_KEY"; // Will be created at broker when isAutoCreateTopicEnable
+    public static final String AUTO_CREATE_TOPIC_KEY_TOPIC = "TBW102"; // Will be created at broker when isAutoCreateTopicEnable
     public static final String BENCHMARK_TOPIC = "BenchmarkTest";
     public static final String DEFAULT_PRODUCER_GROUP = "DEFAULT_PRODUCER";
     public static final String DEFAULT_CONSUMER_GROUP = "DEFAULT_CONSUMER";

File: common/src/main/java/org/apache/rocketmq/common/message/MessageDecoder.java
Patch:
@@ -38,7 +38,7 @@ public class MessageDecoder {
     public final static int MESSAGE_FLAG_POSTION = 16;
     public final static int MESSAGE_PHYSIC_OFFSET_POSTION = 28;
     public final static int MESSAGE_STORE_TIMESTAMP_POSTION = 56;
-    public final static int MESSAGE_MAGIC_CODE = 0xAABBCCDD ^ 1880681586 + 8;
+    public final static int MESSAGE_MAGIC_CODE = -626843481;
     public static final char NAME_VALUE_SEPARATOR = 1;
     public static final char PROPERTY_SEPARATOR = 2;
     public static final int BODY_SIZE_POSITION = 4 // 1 TOTALSIZE

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -44,10 +44,10 @@
  */
 public class CommitLog {
     // Message's MAGIC CODE daa320a7
-    public final static int MESSAGE_MAGIC_CODE = 0xAABBCCDD ^ 1880681586 + 8;
+    public final static int MESSAGE_MAGIC_CODE = -626843481;
     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
     // End of file empty MAGIC CODE cbd43194
-    private final static int BLANK_MAGIC_CODE = 0xBBCCDDEE ^ 1880681586 + 8;
+    private final static int BLANK_MAGIC_CODE = -875286124;
     private final MappedFileQueue mappedFileQueue;
     private final DefaultMessageStore defaultMessageStore;
     private final FlushCommitLogService flushCommitLogService;

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/ConsumeMessageCommand.java
Patch:
@@ -207,6 +207,7 @@ private void pullMessageByQueue(MessageQueue mq, long minOffset, long maxOffset)
                 pullResult = defaultMQPullConsumer.pull(mq, "*", offset, (int)(maxOffset - offset + 1));
             } catch (Exception e) {
                 e.printStackTrace();
+                return;
             }
             if (pullResult != null) {
                 offset = pullResult.getNextBeginOffset();

File: client/src/test/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumerTest.java
Patch:
@@ -289,4 +289,4 @@ private PullResultExt createPullResult(PullMessageRequestHeader requestHeader, P
         }
         return new PullResultExt(pullStatus, requestHeader.getQueueOffset() + messageExtList.size(), 123, 2048, messageExtList, 0, outputStream.toByteArray());
     }
-}
\ No newline at end of file
+}

File: remoting/src/main/java/org/apache/rocketmq/remoting/RemotingClient.java
Patch:
@@ -48,5 +48,7 @@ void registerProcessor(final int requestCode, final NettyRequestProcessor proces
 
     void setCallbackExecutor(final ExecutorService callbackExecutor);
 
+    ExecutorService getCallbackExecutor();
+
     boolean isChannelWritable(final String addr);
 }

File: test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendExceptionIT.java
Patch:
@@ -61,23 +61,23 @@ public void testSendCallBackNull() throws Exception {
         producer.send(msg, sendCallback);
     }
 
-    @Test(expected = java.lang.NullPointerException.class)
+    @Test
     public void testSendMQNull() throws Exception {
         Message msg = new Message(topic, RandomUtils.getStringByUUID().getBytes());
         DefaultMQProducer producer = ProducerFactory.getRMQProducer(nsAddr);
         MessageQueue messageQueue = null;
         producer.send(msg, messageQueue, SendCallBackFactory.getSendCallBack());
     }
 
-    @Test(expected = org.apache.rocketmq.client.exception.MQClientException.class)
+    @Test
     public void testSendSelectorNull() throws Exception {
         Message msg = new Message(topic, RandomUtils.getStringByUUID().getBytes());
         DefaultMQProducer producer = ProducerFactory.getRMQProducer(nsAddr);
         MessageQueueSelector selector = null;
         producer.send(msg, selector, 100, SendCallBackFactory.getSendCallBack());
     }
 
-    @Test(expected = org.apache.rocketmq.client.exception.MQClientException.class)
+    @Test
     public void testSelectorThrowsException() throws Exception {
         Message msg = new Message(topic, RandomUtils.getStringByUUID().getBytes());
         DefaultMQProducer producer = ProducerFactory.getRMQProducer(nsAddr);

File: broker/src/main/java/org/apache/rocketmq/broker/latency/BrokerFastFailure.java
Patch:
@@ -89,6 +89,9 @@ private void cleanExpiredRequest() {
 
         cleanExpiredRequestInQueue(this.brokerController.getPullThreadPoolQueue(),
             this.brokerController.getBrokerConfig().getWaitTimeMillsInPullQueue());
+
+        cleanExpiredRequestInQueue(this.brokerController.getHeartbeatThreadPoolQueue(),
+            this.brokerController.getBrokerConfig().getWaitTimeMillsInHeartbeatQueue());
     }
 
     void cleanExpiredRequestInQueue(final BlockingQueue<Runnable> blockingQueue, final long maxWaitTimeMillsInQueue) {

File: logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java
Patch:
@@ -966,7 +966,7 @@ int computeCheckPeriod() {
                     rollingCalendar.setType(i);
                     Date next = new Date(rollingCalendar.getNextCheckMillis(epoch));
                     String r1 = simpleDateFormat.format(next);
-                    if (r0.equals(r1)) {
+                    if (r0 != null && r1 != null && !r0.equals(r1)) {
                         return i;
                     }
                 }

File: client/src/main/java/org/apache/rocketmq/client/producer/DefaultMQProducer.java
Patch:
@@ -464,14 +464,12 @@ public void sendOneway(Message msg, MessageQueueSelector selector, Object arg)
      * This method is to send transactional messages.
      *
      * @param msg Transactional message to send.
-     * @param tranExecuter local transaction executor.
      * @param arg Argument used along with local transaction executor.
      * @return Transaction result.
      * @throws MQClientException if there is any client error.
      */
     @Override
-    public TransactionSendResult sendMessageInTransaction(Message msg, LocalTransactionExecuter tranExecuter,
-        final Object arg)
+    public TransactionSendResult sendMessageInTransaction(Message msg, final Object arg)
         throws MQClientException {
         throw new RuntimeException("sendMessageInTransaction not implement, please use TransactionMQProducer class");
     }

File: client/src/main/java/org/apache/rocketmq/client/producer/MQProducer.java
Patch:
@@ -80,8 +80,7 @@ void send(final Message msg, final MessageQueueSelector selector, final Object a
     void sendOneway(final Message msg, final MessageQueueSelector selector, final Object arg)
         throws MQClientException, RemotingException, InterruptedException;
 
-    TransactionSendResult sendMessageInTransaction(final Message msg,
-        final LocalTransactionExecuter tranExecuter, final Object arg) throws MQClientException;
+    TransactionSendResult sendMessageInTransaction(final Message msg, final Object arg) throws MQClientException;
 
     //for batch
     SendResult send(final Collection<Message> msgs) throws MQClientException, RemotingException, MQBrokerException,

File: common/src/main/java/org/apache/rocketmq/common/message/MessageConst.java
Patch:
@@ -41,6 +41,9 @@ public class MessageConst {
     public static final String PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX = "UNIQ_KEY";
     public static final String PROPERTY_MAX_RECONSUME_TIMES = "MAX_RECONSUME_TIMES";
     public static final String PROPERTY_CONSUME_START_TIMESTAMP = "CONSUME_START_TIME";
+    public static final String PROPERTY_TRANSACTION_PREPARED_QUEUE_OFFSET = "TRAN_PREPARED_QUEUE_OFFSET";
+    public static final String PROPERTY_TRANSACTION_CHECK_TIMES = "TRANSACTION_CHECK_TIMES";
+    public static final String PROPERTY_CHECK_IMMUNITY_TIME_IN_SECONDS = "CHECK_IMMUNITY_TIME_IN_SECONDS";
 
     public static final String KEY_SEPARATOR = " ";
 

File: logging/src/test/java/org/apache/rocketmq/logging/inner/LoggingBuilderTest.java
Patch:
@@ -88,7 +88,7 @@ public void testRollingFileAppender() throws InterruptedException {
         Assert.assertTrue(cc >= 2);
     }
 
-    @Test
+    //@Test
     public void testDailyRollingFileAppender() throws InterruptedException {
         String rollingFile = loggingDir + "/daily-rolling--222.log";
         Appender rollingFileAppender = LoggingBuilder.newAppenderBuilder().withAsync(false, 1024)

File: client/src/main/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMachineRoomNearby.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.rocketmq.client.consumer.AllocateMessageQueueStrategy;
 import org.apache.rocketmq.client.log.ClientLogger;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.slf4j.Logger;
+import org.apache.rocketmq.logging.InternalLogger;
 
 /**
  * An allocate strategy proxy for based on machine room nearside priority. An actual allocate strategy can be
@@ -35,7 +35,7 @@
  * no alive consumer to monopolize them.
  */
 public class AllocateMachineRoomNearby implements AllocateMessageQueueStrategy {
-    private final Logger log = ClientLogger.getLog();
+    private final InternalLogger log = ClientLogger.getLog();
 
     private final AllocateMessageQueueStrategy allocateMessageQueueStrategy;//actual allocate strategy
     private final MachineRoomResolver machineRoomResolver;

File: remoting/src/test/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstractTest.java
Patch:
@@ -36,7 +36,7 @@ public class NettyRemotingAbstractTest {
     @Test
     public void testProcessResponseCommand() throws InterruptedException {
         final Semaphore semaphore = new Semaphore(0);
-        ResponseFuture responseFuture = new ResponseFuture(1, 3000, new InvokeCallback() {
+        ResponseFuture responseFuture = new ResponseFuture(null,1, 3000, new InvokeCallback() {
             @Override
             public void operationComplete(final ResponseFuture responseFuture) {
                 assertThat(semaphore.availablePermits()).isEqualTo(0);
@@ -57,7 +57,7 @@ public void operationComplete(final ResponseFuture responseFuture) {
     @Test
     public void testProcessResponseCommand_NullCallBack() throws InterruptedException {
         final Semaphore semaphore = new Semaphore(0);
-        ResponseFuture responseFuture = new ResponseFuture(1, 3000, null,
+        ResponseFuture responseFuture = new ResponseFuture(null,1, 3000, null,
             new SemaphoreReleaseOnlyOnce(semaphore));
 
         remotingAbstract.responseTable.putIfAbsent(1, responseFuture);
@@ -72,7 +72,7 @@ public void testProcessResponseCommand_NullCallBack() throws InterruptedExceptio
     @Test
     public void testProcessResponseCommand_RunCallBackInCurrentThread() throws InterruptedException {
         final Semaphore semaphore = new Semaphore(0);
-        ResponseFuture responseFuture = new ResponseFuture(1, 3000, new InvokeCallback() {
+        ResponseFuture responseFuture = new ResponseFuture(null,1, 3000, new InvokeCallback() {
             @Override
             public void operationComplete(final ResponseFuture responseFuture) {
                 assertThat(semaphore.availablePermits()).isEqualTo(0);

File: store/src/main/java/org/apache/rocketmq/store/ha/HAConnection.java
Patch:
@@ -300,6 +300,8 @@ public void run() {
                 }
             }
 
+            HAConnection.this.haService.getWaitNotifyObject().removeFromWaitingThreadTable();
+
             if (this.selectMappedBufferResult != null) {
                 this.selectMappedBufferResult.release();
             }

File: broker/src/test/java/org/apache/rocketmq/broker/processor/SendMessageProcessorTest.java
Patch:
@@ -181,7 +181,7 @@ private RemotingCommand createSendMsgCommand(int requestCode) {
         SendMessageRequestHeader requestHeader = new SendMessageRequestHeader();
         requestHeader.setProducerGroup(group);
         requestHeader.setTopic(topic);
-        requestHeader.setDefaultTopic(MixAll.DEFAULT_TOPIC);
+        requestHeader.setDefaultTopic(MixAll.AUTO_CREATE_TOPIC_KEY_TOPIC);
         requestHeader.setDefaultTopicQueueNums(3);
         requestHeader.setQueueId(1);
         requestHeader.setSysFlag(0);

File: client/src/main/java/org/apache/rocketmq/client/Validators.java
Patch:
@@ -119,9 +119,9 @@ public static void checkTopic(String topic) throws MQClientException {
         }
 
         //whether the same with system reserved keyword
-        if (topic.equals(MixAll.DEFAULT_TOPIC)) {
+        if (topic.equals(MixAll.AUTO_CREATE_TOPIC_KEY_TOPIC)) {
             throw new MQClientException(
-                String.format("The topic[%s] is conflict with default topic.", topic), null);
+                String.format("The topic[%s] is conflict with AUTO_CREATE_TOPIC_KEY_TOPIC.", topic), null);
         }
     }
 }

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -1204,7 +1204,7 @@ public TopicRouteData getTopicRouteInfoFromNameServer(final String topic, final
         assert response != null;
         switch (response.getCode()) {
             case ResponseCode.TOPIC_NOT_EXIST: {
-                if (allowTopicNotExist && !topic.equals(MixAll.DEFAULT_TOPIC)) {
+                if (allowTopicNotExist && !topic.equals(MixAll.AUTO_CREATE_TOPIC_KEY_TOPIC)) {
                     log.warn("get Topic [{}] RouteInfoFromNameServer is not exist value", topic);
                 }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -654,7 +654,7 @@ public boolean updateTopicRouteInfoFromNameServer(final String topic, boolean is
                         log.warn("updateTopicRouteInfoFromNameServer, getTopicRouteInfoFromNameServer return null, Topic: {}", topic);
                     }
                 } catch (Exception e) {
-                    if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX) && !topic.equals(MixAll.DEFAULT_TOPIC)) {
+                    if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX) && !topic.equals(MixAll.AUTO_CREATE_TOPIC_KEY_TOPIC)) {
                         log.warn("updateTopicRouteInfoFromNameServer Exception", e);
                     }
                 } finally {

File: client/src/main/java/org/apache/rocketmq/client/producer/DefaultMQProducer.java
Patch:
@@ -76,7 +76,7 @@ public class DefaultMQProducer extends ClientConfig implements MQProducer {
     /**
      * Just for testing or demo program
      */
-    private String createTopicKey = MixAll.DEFAULT_TOPIC;
+    private String createTopicKey = MixAll.AUTO_CREATE_TOPIC_KEY_TOPIC;
 
     /**
      * Number of queues to create per default topic.

File: client/src/test/java/org/apache/rocketmq/client/ValidatorsTest.java
Patch:
@@ -49,12 +49,12 @@ public void testCheckTopic_HasIllegalCharacters() {
 
     @Test
     public void testCheckTopic_UseDefaultTopic() {
-        String defaultTopic = MixAll.DEFAULT_TOPIC;
+        String defaultTopic = MixAll.AUTO_CREATE_TOPIC_KEY_TOPIC;
         try {
             Validators.checkTopic(defaultTopic);
             failBecauseExceptionWasNotThrown(MQClientException.class);
         } catch (MQClientException e) {
-            assertThat(e).hasMessageStartingWith(String.format("The topic[%s] is conflict with default topic.", defaultTopic));
+            assertThat(e).hasMessageStartingWith(String.format("The topic[%s] is conflict with AUTO_CREATE_TOPIC_KEY_TOPIC.", defaultTopic));
         }
     }
 

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -57,7 +57,7 @@ public class MixAll {
     public static final String WS_DOMAIN_SUBGROUP = System.getProperty("rocketmq.namesrv.domain.subgroup", "nsaddr");
     //http://jmenv.tbsite.net:8080/rocketmq/nsaddr
     //public static final String WS_ADDR = "http://" + WS_DOMAIN_NAME + ":8080/rocketmq/" + WS_DOMAIN_SUBGROUP;
-    public static final String DEFAULT_TOPIC = "TBW102";
+    public static final String AUTO_CREATE_TOPIC_KEY_TOPIC = "AUTO_CREATE_TOPIC_KEY"; // Will be created at broker when isAutoCreateTopicEnable
     public static final String BENCHMARK_TOPIC = "BenchmarkTest";
     public static final String DEFAULT_PRODUCER_GROUP = "DEFAULT_PRODUCER";
     public static final String DEFAULT_CONSUMER_GROUP = "DEFAULT_CONSUMER";

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExt.java
Patch:
@@ -59,7 +59,7 @@
 public class DefaultMQAdminExt extends ClientConfig implements MQAdminExt {
     private final DefaultMQAdminExtImpl defaultMQAdminExtImpl;
     private String adminExtGroup = "admin_ext_group";
-    private String createTopicKey = MixAll.DEFAULT_TOPIC;
+    private String createTopicKey = MixAll.AUTO_CREATE_TOPIC_KEY_TOPIC;
     private long timeoutMillis = 5000;
 
     public DefaultMQAdminExt() {

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/balance/NormalMsgDynamicBalanceIT.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
 import org.apache.rocketmq.test.util.MQWait;
+import org.apache.rocketmq.test.util.TestUtils;
 import org.apache.rocketmq.test.util.VerifyUtils;
 import org.junit.After;
 import org.junit.Assert;
@@ -54,6 +55,7 @@ public void testTwoConsumerAndCrashOne() {
         RMQNormalConsumer consumer1 = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
         RMQNormalConsumer consumer2 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
             "*", new RMQNormalListener());
+        TestUtils.waitForSeconds(waitTime);
 
         producer.send(msgSize);
 
@@ -84,6 +86,7 @@ public void test3ConsumerAndCrashOne() {
             "*", new RMQNormalListener());
         RMQNormalConsumer consumer3 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
             "*", new RMQNormalListener());
+        TestUtils.waitForSeconds(waitTime);
 
         producer.send(msgSize);
 

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -247,7 +247,7 @@ public void shutdown() {
 
             try {
 
-                Thread.sleep(1000 * 3);
+                Thread.sleep(1000);
             } catch (InterruptedException e) {
                 log.error("shutdown Exception, ", e);
             }

File: store/src/test/java/org/apache/rocketmq/store/ConsumeQueueTest.java
Patch:
@@ -212,8 +212,6 @@ public void dispatch(DispatchRequest request) {
         try {
             try {
                 putMsg(master);
-                // wait build consume queue
-                Thread.sleep(1000);
             } catch (Exception e) {
                 e.printStackTrace();
                 assertThat(Boolean.FALSE).isTrue();

File: test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQNormalProducer.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.test.clientinterface.AbstractMQProducer;
-import org.apache.rocketmq.test.sendresult.SendResult;
+import org.apache.rocketmq.test.sendresult.ResultWrapper;
 
 public class RMQNormalProducer extends AbstractMQProducer {
     private static Logger logger = Logger.getLogger(RMQNormalProducer.class);
@@ -91,7 +91,7 @@ public void start() {
         }
     }
 
-    public SendResult send(Object msg, Object orderKey) {
+    public ResultWrapper send(Object msg, Object orderKey) {
         org.apache.rocketmq.client.producer.SendResult metaqResult = null;
         Message message = (Message) msg;
         try {
@@ -132,7 +132,7 @@ public void send(List<Object> msgs, MessageQueue mq) {
         }
     }
 
-    public SendResult sendMQ(Message msg, MessageQueue mq) {
+    public ResultWrapper sendMQ(Message msg, MessageQueue mq) {
         org.apache.rocketmq.client.producer.SendResult metaqResult = null;
         try {
             long start = System.currentTimeMillis();

File: test/src/main/java/org/apache/rocketmq/test/clientinterface/AbstractMQProducer.java
Patch:
@@ -21,14 +21,14 @@
 import java.util.List;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
-import org.apache.rocketmq.test.sendresult.SendResult;
+import org.apache.rocketmq.test.sendresult.ResultWrapper;
 import org.apache.rocketmq.test.util.RandomUtil;
 import org.apache.rocketmq.test.util.TestUtil;
 
 public abstract class AbstractMQProducer extends MQCollector implements MQProducer {
     protected String topic = null;
 
-    protected SendResult sendResult = new SendResult();
+    protected ResultWrapper sendResult = new ResultWrapper();
     protected boolean startSuccess = false;
     protected String producerGroupName = null;
     protected String producerInstanceName = null;

File: test/src/main/java/org/apache/rocketmq/test/clientinterface/MQProducer.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.rocketmq.test.clientinterface;
 
-import org.apache.rocketmq.test.sendresult.SendResult;
+import org.apache.rocketmq.test.sendresult.ResultWrapper;
 
 public interface MQProducer {
-    SendResult send(Object msg, Object arg);
+    ResultWrapper send(Object msg, Object arg);
 
     void setDebug();
 

File: test/src/main/java/org/apache/rocketmq/test/sendresult/ResultWrapper.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.rocketmq.test.sendresult;
 
-public class SendResult {
+public class ResultWrapper {
     private boolean sendResult = false;
     private String msgId = null;
     private Exception sendException = null;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -308,12 +308,12 @@ public void onSuccess(PullResult pullResult) {
                                 DefaultMQPushConsumerImpl.this.getConsumerStatsManager().incPullTPS(pullRequest.getConsumerGroup(),
                                     pullRequest.getMessageQueue().getTopic(), pullResult.getMsgFoundList().size());
 
-                                boolean dispathToConsume = processQueue.putMessage(pullResult.getMsgFoundList());
+                                boolean dispatchToConsume = processQueue.putMessage(pullResult.getMsgFoundList());
                                 DefaultMQPushConsumerImpl.this.consumeMessageService.submitConsumeRequest(
                                     pullResult.getMsgFoundList(),
                                     processQueue,
                                     pullRequest.getMessageQueue(),
-                                    dispathToConsume);
+                                    dispatchToConsume);
 
                                 if (DefaultMQPushConsumerImpl.this.defaultMQPushConsumer.getPullInterval() > 0) {
                                     DefaultMQPushConsumerImpl.this.executePullRequestLater(pullRequest,

File: store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreShutDownTest.java
Patch:
@@ -35,7 +35,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(MockitoJUnitRunner.class)
-public class DefaultMessageStoreShutdownTest {
+public class DefaultMessageStoreShutDownTest {
     private DefaultMessageStore messageStore;
 
     @Before

File: client/src/test/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumerTest.java
Patch:
@@ -58,7 +58,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.mockito.Spy;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.junit.MockitoJUnitRunner;
 import org.mockito.stubbing.Answer;

File: logging/src/test/java/org/apache/rocketmq/logging/Slf4jLoggerFactoryTest.java
Patch:
@@ -59,7 +59,7 @@ public void testSlf4j() throws IOException {
         String file = loggingDir + "/logback_test.log";
 
         logger.info("logback slf4j info Message");
-        logger.error("logback slf4j error Message", new RuntimeException());
+        logger.error("logback slf4j error Message", new RuntimeException("test"));
         logger.debug("logback slf4j debug message");
         logger3.info("logback info message");
         logger3.error("logback error message");

File: test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithMessageQueueIT.java
Patch:
@@ -68,7 +68,7 @@ public void testAsyncSendWithMQ() {
 
         producer.clearMsg();
         consumer.clearMsg();
-	producer.getSuccessSendResult().clear();
+        producer.getSuccessSendResult().clear();
         mq = new MessageQueue(topic, broker2Name, queueId);
         producer.asyncSend(msgSize, mq);
         producer.waitForResponse(10 * 1000);

File: test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQAsyncSendProducer.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.rocketmq.test.client.rmq;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.log4j.Logger;
@@ -38,7 +39,8 @@ public class RMQAsyncSendProducer extends AbstractMQProducer {
     private String nsAddr = null;
     private DefaultMQProducer producer = null;
     private SendCallback sendCallback = null;
-    private List<org.apache.rocketmq.client.producer.SendResult> successSendResult = new ArrayList<org.apache.rocketmq.client.producer.SendResult>();
+    private List<org.apache.rocketmq.client.producer.SendResult> successSendResult = Collections
+        .synchronizedList(new ArrayList<org.apache.rocketmq.client.producer.SendResult>());
     private AtomicInteger exceptionMsgCount = new AtomicInteger(
         0);
     private int msgSize = 0;

File: test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithMessageQueueIT.java
Patch:
@@ -68,7 +68,7 @@ public void testAsyncSendWithMQ() {
 
         producer.clearMsg();
         consumer.clearMsg();
-
+	producer.getSuccessSendResult().clear();
         mq = new MessageQueue(topic, broker2Name, queueId);
         producer.asyncSend(msgSize, mq);
         producer.waitForResponse(10 * 1000);

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -741,7 +741,7 @@ public void run() {
                     log.error("registerBrokerAll Exception", e);
                 }
             }
-        }, 1000 * 10, 1000 * 30, TimeUnit.MILLISECONDS);
+        }, 1000 * 10, Math.max(10000, Math.min(brokerConfig.getRegisterNameServerPeriod(), 60000)), TimeUnit.MILLISECONDS);
 
         if (this.brokerStatsManager != null) {
             this.brokerStatsManager.start();

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/DeleteTopicSubCommand.java
Patch:
@@ -38,8 +38,8 @@ public static void deleteTopic(final DefaultMQAdminExt adminExt,
         final String topic
     ) throws InterruptedException, MQBrokerException, RemotingException, MQClientException {
 
-        Set<String> masterSet = CommandUtil.fetchMasterAddrByClusterName(adminExt, clusterName);
-        adminExt.deleteTopicInBroker(masterSet, topic);
+        Set<String> brokerAddressSet = CommandUtil.fetchMasterAndSlaveAddrByClusterName(adminExt, clusterName);
+        adminExt.deleteTopicInBroker(brokerAddressSet, topic);
         System.out.printf("delete topic [%s] from cluster [%s] success.%n", topic, clusterName);
 
         Set<String> nameServerSet = null;

File: client/src/main/java/org/apache/rocketmq/client/log/ClientLogger.java
Patch:
@@ -34,6 +34,7 @@ public class ClientLogger {
     public static final String CLIENT_LOG_MAXINDEX = "rocketmq.client.logFileMaxIndex";
     public static final String CLIENT_LOG_FILESIZE = "rocketmq.client.logFileMaxSize";
     public static final String CLIENT_LOG_LEVEL = "rocketmq.client.logLevel";
+    public static final String CLIENT_LOG_ADDITIVE = "rocketmq.client.log.additive";
     public static final String CLIENT_LOG_FILENAME = "rocketmq.client.logFileName";
     public static final String CLIENT_LOG_ASYNC_QUEUESIZE = "rocketmq.client.logAsyncQueueSize";
     public static final String ROCKETMQ_CLIENT_APPENDER_NAME = "RocketmqClientAppender";
@@ -79,6 +80,7 @@ private static synchronized void createClientAppender() {
 
     private static InternalLogger createLogger(final String loggerName) {
         String clientLogLevel = System.getProperty(CLIENT_LOG_LEVEL, "INFO");
+        boolean additive = "true".equalsIgnoreCase(System.getProperty(CLIENT_LOG_ADDITIVE));
         InternalLogger logger = InternalLoggerFactory.getLogger(loggerName);
         InnerLoggerFactory.InnerLogger innerLogger = (InnerLoggerFactory.InnerLogger) logger;
         Logger realLogger = innerLogger.getLogger();
@@ -89,6 +91,7 @@ private static InternalLogger createLogger(final String loggerName) {
 
         realLogger.addAppender(rocketmqClientAppender);
         realLogger.setLevel(Level.toLevel(clientLogLevel));
+        realLogger.setAdditivity(additive);
         return logger;
     }
 

File: client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.Properties;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicInteger;
+
 import org.apache.rocketmq.client.ClientConfig;
 import org.apache.rocketmq.client.consumer.PullCallback;
 import org.apache.rocketmq.client.consumer.PullResult;

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -149,7 +149,7 @@ public MQClientInstance(ClientConfig clientConfig, int instanceIndex, String cli
 
         this.consumerStatsManager = new ConsumerStatsManager(this.scheduledExecutorService);
 
-        log.info("created a new client Instance, FactoryIndex: {} ClinetID: {} {} {}, serializeType={}",
+        log.info("Created a new client Instance, InstanceIndex:{}, ClientID:{}, ClientConfig:{}, ClientVersion:{}, SerializerType:{}",
             this.instanceIndex,
             this.clientId,
             this.clientConfig,

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -155,7 +155,7 @@ public static void initCommand() {
         initCommand(new QueryMsgByKeySubCommand());
         initCommand(new QueryMsgByUniqueKeySubCommand());
         initCommand(new QueryMsgByOffsetSubCommand());
-        initCommand(new QueryMsgByUniqueKeySubCommand());
+        
         initCommand(new PrintMessageSubCommand());
         initCommand(new PrintMessageByQueueCommand());
         initCommand(new SendMsgStatusCommand());

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateTopicSubCommand.java
Patch:
@@ -67,15 +67,15 @@ public Options buildCommandlineOptions(Options options) {
         opt.setRequired(false);
         options.addOption(opt);
 
-        opt = new Option("o", "order", true, "set topic's order(true|false");
+        opt = new Option("o", "order", true, "set topic's order(true|false)");
         opt.setRequired(false);
         options.addOption(opt);
 
-        opt = new Option("u", "unit", true, "is unit topic (true|false");
+        opt = new Option("u", "unit", true, "is unit topic (true|false)");
         opt.setRequired(false);
         options.addOption(opt);
 
-        opt = new Option("s", "hasUnitSub", true, "has unit sub (true|false");
+        opt = new Option("s", "hasUnitSub", true, "has unit sub (true|false)");
         opt.setRequired(false);
         options.addOption(opt);
 

File: common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
Patch:
@@ -134,7 +134,7 @@ public class BrokerConfig {
 
     private boolean compressedRegister = false;
 
-    private boolean forceRegister = false;
+    private boolean forceRegister = true;
 
     public boolean isTraceOn() {
         return traceOn;

File: common/src/main/java/org/apache/rocketmq/common/MQVersion.java
Patch:
@@ -18,7 +18,7 @@
 
 public class MQVersion {
 
-    public static final int CURRENT_VERSION = Version.V4_2_0_SNAPSHOT.ordinal();
+    public static final int CURRENT_VERSION = Version.V4_2_0.ordinal();
 
     public static String getVersionDesc(int value) {
         int length = Version.values().length;

File: common/src/main/java/org/apache/rocketmq/common/filter/ExpressionType.java
Patch:
@@ -59,7 +59,7 @@ public class ExpressionType {
     public static final String TAG = "TAG";
 
     public static boolean isTagType(String type) {
-        if (type == null || TAG.equals(type)) {
+        if (type == null || "".equals(type) || TAG.equals(type)) {
             return true;
         }
         return false;

File: common/src/main/java/org/apache/rocketmq/common/protocol/heartbeat/SubscriptionData.java
Patch:
@@ -21,6 +21,8 @@
 package org.apache.rocketmq.common.protocol.heartbeat;
 
 import com.alibaba.fastjson.annotation.JSONField;
+import org.apache.rocketmq.common.filter.ExpressionType;
+
 import java.util.HashSet;
 import java.util.Set;
 
@@ -32,7 +34,7 @@ public class SubscriptionData implements Comparable<SubscriptionData> {
     private Set<String> tagsSet = new HashSet<String>();
     private Set<Integer> codeSet = new HashSet<Integer>();
     private long subVersion = System.currentTimeMillis();
-    private String expressionType;
+    private String expressionType = ExpressionType.TAG;
 
     @JSONField(serialize = false)
     private String filterClassSource;

File: client/src/main/java/org/apache/rocketmq/client/ClientConfig.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.remoting.common.RemotingUtil;
+import org.apache.rocketmq.remoting.netty.TlsSystemConfig;
 
 /**
  * Client Common configuration
@@ -45,7 +46,7 @@ public class ClientConfig {
     private String unitName;
     private boolean vipChannelEnabled = Boolean.parseBoolean(System.getProperty(SEND_MESSAGE_WITH_VIP_CHANNEL_PROPERTY, "true"));
 
-    private boolean useTLS;
+    private boolean useTLS = TlsSystemConfig.tlsEnable;
 
     public String buildMQClientId() {
         StringBuilder sb = new StringBuilder();

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -34,6 +34,7 @@
 import io.netty.handler.timeout.IdleStateEvent;
 import io.netty.handler.timeout.IdleStateHandler;
 import io.netty.util.concurrent.DefaultEventExecutorGroup;
+import java.io.IOException;
 import java.net.SocketAddress;
 import java.security.cert.CertificateException;
 import java.util.Collections;
@@ -52,7 +53,6 @@
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
-import javax.net.ssl.SSLException;
 import org.apache.rocketmq.remoting.ChannelEventListener;
 import org.apache.rocketmq.remoting.InvokeCallback;
 import org.apache.rocketmq.remoting.RPCHook;
@@ -131,9 +131,9 @@ public Thread newThread(Runnable r) {
 
         if (nettyClientConfig.isUseTLS()) {
             try {
-                sslContext = SslHelper.buildSslContext(true);
+                sslContext = TlsHelper.buildSslContext(true);
                 log.info("SSL enabled for client");
-            } catch (SSLException e) {
+            } catch (IOException e) {
                 log.error("Failed to create SSLContext", e);
             } catch (CertificateException e) {
                 log.error("Failed to create SSLContext", e);

File: store/src/main/java/org/apache/rocketmq/store/MappedFileQueue.java
Patch:
@@ -367,6 +367,9 @@ public int deleteExpiredFileByTime(final long expiredTime,
                     } else {
                         break;
                     }
+                } else {
+                    //avoid deleting files in the middle
+                    break;
                 }
             }
         }

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -119,7 +119,6 @@ public static void main0(String[] args, RPCHook rpcHook) {
                             ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options),
                                 new PosixParser());
                         if (null == commandLine) {
-                            System.exit(-1);
                             return;
                         }
 

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java
Patch:
@@ -98,7 +98,7 @@ public static BrokerController createBrokerController(String[] args) {
             final BrokerConfig brokerConfig = new BrokerConfig();
             final NettyServerConfig nettyServerConfig = new NettyServerConfig();
             final NettyClientConfig nettyClientConfig = new NettyClientConfig();
-            nettyClientConfig.setUseTLS(NettySystemConfig.sslMode != SslMode.DISABLED);
+            nettyClientConfig.setUseTLS(NettySystemConfig.sslMode == SslMode.ENFORCING);
             nettyServerConfig.setListenPort(10911);
             final MessageStoreConfig messageStoreConfig = new MessageStoreConfig();
 

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettySystemConfig.java
Patch:
@@ -57,7 +57,7 @@ public class NettySystemConfig {
      * </ol>
      */
     public static SslMode sslMode = //
-        SslMode.parse(System.getProperty(ORG_APACHE_ROCKETMQ_REMOTING_SSL_MODE, "disabled"));
+        SslMode.parse(System.getProperty(ORG_APACHE_ROCKETMQ_REMOTING_SSL_MODE, "permissive"));
 
     public static String sslConfigFile = //
         System.getProperty(ORG_APACHE_ROCKETMQ_REMOTING_SSL_CONFIG_FILE, "/etc/rocketmq/ssl.properties");

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettySystemConfig.java
Patch:
@@ -57,7 +57,7 @@ public class NettySystemConfig {
      * </ol>
      */
     public static SslMode sslMode = //
-        SslMode.parse(System.getProperty(ORG_APACHE_ROCKETMQ_REMOTING_SSL_MODE, "permissive"));
+        SslMode.parse(System.getProperty(ORG_APACHE_ROCKETMQ_REMOTING_SSL_MODE, "disabled"));
 
     public static String sslConfigFile = //
         System.getProperty(ORG_APACHE_ROCKETMQ_REMOTING_SSL_CONFIG_FILE, "/etc/rocketmq/ssl.properties");

File: remoting/src/main/java/org/apache/rocketmq/remoting/common/SslMode.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * For server, three SSL modes are supported: disabled, permissive and enforcing.
  * <ol>
- *     <li><strong>disable:</strong> SSL is not supported; any incoming SSL handshake will be rejected, causing connection closed.</li>
+ *     <li><strong>disabled:</strong> SSL is not supported; any incoming SSL handshake will be rejected, causing connection closed.</li>
  *     <li><strong>permissive:</strong> SSL is optional, aka, server in this mode can serve client connections with or without SSL;</li>
  *     <li><strong>enforcing:</strong> SSL is required, aka, non SSL connection will be rejected.</li>
  * </ol>

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettySystemConfig.java
Patch:
@@ -51,7 +51,7 @@ public class NettySystemConfig {
     /**
      * For server, three SSL modes are supported: disabled, permissive and enforcing.
      * <ol>
-     *     <li><strong>disable:</strong> SSL is not supported; any incoming SSL handshake will be rejected, causing connection closed.</li>
+     *     <li><strong>disabled:</strong> SSL is not supported; any incoming SSL handshake will be rejected, causing connection closed.</li>
      *     <li><strong>permissive:</strong> SSL is optional, aka, server in this mode can serve client connections with or without SSL;</li>
      *     <li><strong>enforcing:</strong> SSL is required, aka, non SSL connection will be rejected.</li>
      * </ol>

File: store/src/main/java/org/apache/rocketmq/store/PutMessageSpinLock.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 /**
- * Spin lock Implementation to put message, suggest using this witb low race conditions
+ * Spin lock Implementation to put message, suggest using this with low race conditions
  */
 public class PutMessageSpinLock implements PutMessageLock {
     //true: Can lock, false : in lock.

File: store/src/main/java/org/apache/rocketmq/store/PutMessageSpinLock.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 /**
- * Spin lock Implementation to put message, suggest using this witb low race conditions
+ * Spin lock Implementation to put message, suggest using this with low race conditions
  */
 public class PutMessageSpinLock implements PutMessageLock {
     //true: Can lock, false : in lock.

File: example/src/main/java/org/apache/rocketmq/example/broadcast/PushConsumer.java
Patch:
@@ -42,7 +42,7 @@ public static void main(String[] args) throws InterruptedException, MQClientExce
             @Override
             public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
                 ConsumeConcurrentlyContext context) {
-                System.out.printf(Thread.currentThread().getName() + " Receive New Messages: " + msgs + "%n");
+                System.out.printf("%s Receive New Messages: %s %n", Thread.currentThread().getName(), msgs);
                 return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
             }
         });

File: example/src/main/java/org/apache/rocketmq/example/filter/Consumer.java
Patch:
@@ -44,7 +44,7 @@ public static void main(String[] args) throws InterruptedException, MQClientExce
             @Override
             public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
                 ConsumeConcurrentlyContext context) {
-                System.out.printf(Thread.currentThread().getName() + " Receive New Messages: " + msgs + "%n");
+                System.out.printf("%s Receive New Messages: %s %n", Thread.currentThread().getName(), msgs);
                 return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
             }
         });

File: example/src/main/java/org/apache/rocketmq/example/filter/SqlConsumer.java
Patch:
@@ -45,7 +45,7 @@ public static void main(String[] args) {
             @Override
             public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
                 ConsumeConcurrentlyContext context) {
-                System.out.printf(Thread.currentThread().getName() + " Receive New Messages: " + msgs + "%n");
+                System.out.printf("%s Receive New Messages: %s %n", Thread.currentThread().getName(), msgs);
                 return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
             }
         });

File: example/src/main/java/org/apache/rocketmq/example/ordermessage/Consumer.java
Patch:
@@ -41,7 +41,7 @@ public static void main(String[] args) throws MQClientException {
             @Override
             public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs, ConsumeOrderlyContext context) {
                 context.setAutoCommit(false);
-                System.out.printf(Thread.currentThread().getName() + " Receive New Messages: " + msgs + "%n");
+                System.out.printf("%s Receive New Messages: %s %n", Thread.currentThread().getName(), msgs);
                 this.consumeTimes.incrementAndGet();
                 if ((this.consumeTimes.get() % 2) == 0) {
                     return ConsumeOrderlyStatus.SUCCESS;

File: example/src/main/java/org/apache/rocketmq/example/quickstart/Consumer.java
Patch:
@@ -67,7 +67,7 @@ public static void main(String[] args) throws InterruptedException, MQClientExce
             @Override
             public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
                 ConsumeConcurrentlyContext context) {
-                System.out.printf(Thread.currentThread().getName() + " Receive New Messages: " + msgs + "%n");
+                System.out.printf("%s Receive New Messages: %s %n", Thread.currentThread().getName(), msgs);
                 return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
             }
         });

File: example/src/main/java/org/apache/rocketmq/example/simple/PullConsumer.java
Patch:
@@ -34,7 +34,7 @@ public static void main(String[] args) throws MQClientException {
 
         Set<MessageQueue> mqs = consumer.fetchSubscribeMessageQueues("TopicTest1");
         for (MessageQueue mq : mqs) {
-            System.out.printf("Consume from the queue: " + mq + "%n");
+            System.out.printf("Consume from the queue: %s%n", mq);
             SINGLE_MQ:
             while (true) {
                 try {

File: example/src/main/java/org/apache/rocketmq/example/simple/PushConsumer.java
Patch:
@@ -37,7 +37,7 @@ public static void main(String[] args) throws InterruptedException, MQClientExce
 
             @Override
             public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {
-                System.out.printf(Thread.currentThread().getName() + " Receive New Messages: " + msgs + "%n");
+                System.out.printf("%s Receive New Messages: %s %n", Thread.currentThread().getName(), msgs);
                 return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
             }
         });

File: example/src/main/java/org/apache/rocketmq/example/transaction/TransactionCheckListenerImpl.java
Patch:
@@ -26,7 +26,7 @@ public class TransactionCheckListenerImpl implements TransactionCheckListener {
 
     @Override
     public LocalTransactionState checkLocalTransactionState(MessageExt msg) {
-        System.out.printf("server checking TrMsg " + msg.toString() + "%n");
+        System.out.printf("server checking TrMsg %s%n", msg);
 
         int value = transactionIndex.getAndIncrement();
         if ((value % 6) == 0) {

File: filtersrv/src/main/java/org/apache/rocketmq/filtersrv/FiltersrvStartup.java
Patch:
@@ -92,7 +92,7 @@ public static FiltersrvController createController(String[] args) {
                     Properties properties = new Properties();
                     properties.load(in);
                     MixAll.properties2Object(properties, filtersrvConfig);
-                    System.out.printf("load config properties file OK, " + file + "%n");
+                    System.out.printf("load config properties file OK, %s%n", file);
                     in.close();
 
                     String port = properties.getProperty("listenPort");
@@ -116,8 +116,7 @@ public static FiltersrvController createController(String[] args) {
 
             MixAll.properties2Object(ServerUtil.commandLine2Properties(commandLine), filtersrvConfig);
             if (null == filtersrvConfig.getRocketmqHome()) {
-                System.out.printf("Please set the " + MixAll.ROCKETMQ_HOME_ENV
-                    + " variable in your environment to match the location of the RocketMQ installation%n");
+                System.out.printf("Please set the %s variable in your environment to match the location of the RocketMQ installation%n", MixAll.ROCKETMQ_HOME_ENV);
                 System.exit(-2);
             }
 

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/NamesrvStartup.java
Patch:
@@ -96,7 +96,7 @@ public static NamesrvController main0(String[] args) {
             MixAll.properties2Object(ServerUtil.commandLine2Properties(commandLine), namesrvConfig);
 
             if (null == namesrvConfig.getRocketmqHome()) {
-                System.out.printf("Please set the " + MixAll.ROCKETMQ_HOME_ENV + " variable in your environment to match the location of the RocketMQ installation%n");
+                System.out.printf("Please set the %s variable in your environment to match the location of the RocketMQ installation%n", MixAll.ROCKETMQ_HOME_ENV);
                 System.exit(-2);
             }
 

File: tools/src/main/java/org/apache/rocketmq/tools/command/broker/SendMsgStatusCommand.java
Patch:
@@ -85,7 +85,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
             for (int i = 0; i < count; i++) {
                 long begin = System.currentTimeMillis();
                 SendResult result = producer.send(buildMessage(brokerName, messageSize));
-                System.out.printf("rt:" + (System.currentTimeMillis() - begin) + "ms, SendResult=" + result);
+                System.out.printf("rt:" + (System.currentTimeMillis() - begin) + "ms, SendResult=%s", result);
             }
         } catch (Exception e) {
             throw new SubCommandException(this.getClass().getSimpleName() + " command failed", e);

File: tools/src/main/java/org/apache/rocketmq/tools/command/consumer/ConsumerStatusSubCommand.java
Patch:
@@ -115,7 +115,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
                             String result =
                                 ConsumerRunningInfo.analyzeProcessQueue(next.getKey(), next.getValue());
                             if (result.length() > 0) {
-                                System.out.printf(result);
+                                System.out.printf("%s", result);
                             }
                         }
                     } else {

File: tools/src/main/java/org/apache/rocketmq/tools/command/consumer/ConsumerSubCommand.java
Patch:
@@ -114,7 +114,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
                             String result =
                                 ConsumerRunningInfo.analyzeProcessQueue(next.getKey(), next.getValue());
                             if (result.length() > 0) {
-                                System.out.printf(result);
+                                System.out.printf("%s", result);
                             }
                         }
                     } else {

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/DecodeMessageIdCommond.java
Patch:
@@ -50,14 +50,14 @@ public void execute(final CommandLine commandLine, final Options options,
         String messageId = commandLine.getOptionValue('i').trim();
 
         try {
-            System.out.printf("ip=" + MessageClientIDSetter.getIPStrFromID(messageId));
+            System.out.printf("ip=%s", MessageClientIDSetter.getIPStrFromID(messageId));
         } catch (Exception e) {
             e.printStackTrace();
         }
 
         try {
             String date = UtilAll.formatDate(MessageClientIDSetter.getNearlyTimeFromID(messageId), UtilAll.YYYY_MM_DD_HH_MM_SS_SSS);
-            System.out.printf("date=" + date);
+            System.out.printf("date=%s", date);
         } catch (Exception e) {
             throw new SubCommandException(this.getClass().getSimpleName() + " command failed", e);
         }

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/PrintMessageSubCommand.java
Patch:
@@ -134,7 +134,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
                     maxOffset = consumer.searchOffset(mq, timeValue);
                 }
 
-                System.out.printf("minOffset=" + minOffset + ", maxOffset=" + maxOffset + ", " + mq);
+                System.out.printf("minOffset=%s, maxOffset=%s, %s", minOffset, maxOffset, mq);
 
                 READQ:
                 for (long offset = minOffset; offset < maxOffset; ) {
@@ -146,11 +146,11 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) t
                                 printMessage(pullResult.getMsgFoundList(), charsetName, printBody);
                                 break;
                             case NO_MATCHED_MSG:
-                                System.out.printf(mq + " no matched msg. status=" + pullResult.getPullStatus() + ", offset=" + offset);
+                                System.out.printf(mq + " no matched msg. status=%s, offset=%s", pullResult.getPullStatus(), offset);
                                 break;
                             case NO_NEW_MSG:
                             case OFFSET_ILLEGAL:
-                                System.out.printf(mq + " print msg finished. status=" + pullResult.getPullStatus() + ", offset=" + offset);
+                                System.out.printf(mq + " print msg finished. status=%s, offset=%s", pullResult.getPullStatus(), offset);
                                 break READQ;
                         }
                     } catch (Exception e) {

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByIdSubCommand.java
Patch:
@@ -279,11 +279,11 @@ private void sendMsg(final DefaultMQAdminExt defaultMQAdminExt, final DefaultMQP
             MessageExt msg = defaultMQAdminExt.viewMessage(msgId);
             if (msg != null) {
                 // resend msg by id
-                System.out.printf("prepare resend msg. originalMsgId=" + msgId);
+                System.out.printf("prepare resend msg. originalMsgId=%s", msgId);
                 SendResult result = defaultMQProducer.send(msg);
                 System.out.printf("%s", result);
             } else {
-                System.out.printf("no message. msgId=" + msgId);
+                System.out.printf("no message. msgId=%s", msgId);
             }
         } catch (Exception e) {
             e.printStackTrace();

File: tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateTopicSubCommand.java
Patch:
@@ -169,8 +169,7 @@ public void execute(final CommandLine commandLine, final Options options,
                     }
                     defaultMQAdminExt.createOrUpdateOrderConf(topicConfig.getTopicName(),
                         orderConf.toString(), true);
-                    System.out.printf(String.format("set cluster orderConf. isOrder=%s, orderConf=[%s]",
-                        isOrder, orderConf.toString()));
+                    System.out.printf("set cluster orderConf. isOrder=%s, orderConf=[%s]", isOrder, orderConf);
                 }
 
                 System.out.printf("%s", topicConfig);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java
Patch:
@@ -161,7 +161,7 @@ public ConsumeMessageDirectlyResult consumeMessageDirectly(MessageExt msg, Strin
 
         final long beginTime = System.currentTimeMillis();
 
-        log.info("consumeMessageDirectly receive new messge: {}", msg);
+        log.info("consumeMessageDirectly receive new message: {}", msg);
 
         try {
             ConsumeConcurrentlyStatus status = this.messageListener.consumeMessage(msgs, context);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -144,7 +144,7 @@ public ConsumeMessageDirectlyResult consumeMessageDirectly(MessageExt msg, Strin
 
         final long beginTime = System.currentTimeMillis();
 
-        log.info("consumeMessageDirectly receive new messge: {}", msg);
+        log.info("consumeMessageDirectly receive new message: {}", msg);
 
         try {
             ConsumeOrderlyStatus status = this.messageListener.consumeMessage(msgs, context);

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java
Patch:
@@ -152,7 +152,7 @@ public RegisterBrokerResult registerBroker(
                         channel,
                         haServerAddr));
                 if (null == prevBrokerLiveInfo) {
-                    log.info("new broker registerd, {} HAServer: {}", brokerAddr, haServerAddr);
+                    log.info("new broker registered, {} HAServer: {}", brokerAddr, haServerAddr);
                 }
 
                 if (filterServerList != null) {
@@ -205,7 +205,7 @@ private void createAndUpdateQueueData(final String brokerName, final TopicConfig
             queueDataList = new LinkedList<QueueData>();
             queueDataList.add(queueData);
             this.topicQueueTable.put(topicConfig.getTopicName(), queueDataList);
-            log.info("new topic registerd, {} {}", topicConfig.getTopicName(), queueData);
+            log.info("new topic registered, {} {}", topicConfig.getTopicName(), queueData);
         } else {
             boolean addNewOne = true;
 

File: store/src/main/java/org/apache/rocketmq/store/ConsumeQueue.java
Patch:
@@ -121,7 +121,7 @@ public void recover() {
                     index++;
                     if (index >= mappedFiles.size()) {
 
-                        log.info("recover last consume queue file over, last maped file "
+                        log.info("recover last consume queue file over, last mapped file "
                             + mappedFile.getFileName());
                         break;
                     } else {

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java
Patch:
@@ -152,7 +152,7 @@ public RegisterBrokerResult registerBroker(
                         channel,
                         haServerAddr));
                 if (null == prevBrokerLiveInfo) {
-                    log.info("new broker registerd, {} HAServer: {}", brokerAddr, haServerAddr);
+                    log.info("new broker registered, {} HAServer: {}", brokerAddr, haServerAddr);
                 }
 
                 if (filterServerList != null) {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java
Patch:
@@ -569,6 +569,7 @@ public synchronized void start() throws MQClientException {
                         default:
                             break;
                     }
+                    this.defaultMQPullConsumer.setOffsetStore(this.offsetStore);
                 }
 
                 this.offsetStore.load();

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -577,6 +577,7 @@ public synchronized void start() throws MQClientException {
                         default:
                             break;
                     }
+                    this.defaultMQPushConsumer.setOffsetStore(this.offsetStore);
                 }
                 this.offsetStore.load();
 

File: client/src/test/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueConsitentHashTest.java
Patch:
@@ -92,9 +92,9 @@ public void testAllocate2() {
 
     @Test
     public void testRun100RandomCase() {
-        for (int i = 0; i < 100; i++) {
-            int consumerSize = new Random().nextInt(200) + 1;//1-200
-            int queueSize = new Random().nextInt(100) + 1;//1-100
+        for (int i = 0; i < 10; i++) {
+            int consumerSize = new Random().nextInt(20) + 1;//1-20
+            int queueSize = new Random().nextInt(20) + 1;//1-20
             testAllocate(queueSize, consumerSize);
             try {
                 Thread.sleep(1);

File: namesrv/src/test/java/org/apache/rocketmq/namesrv/kvconfig/KVConfigManagerTest.java
Patch:
@@ -34,7 +34,6 @@ public void setup() throws Exception {
 
     @Test
     public void testPutKVConfig() {
-        kvConfigManager.load();
         kvConfigManager.putKVConfig(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG, "UnitTest", "test");
         byte[] kvConfig = kvConfigManager.getKVListByNamespace(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG);
         assertThat(kvConfig).isNotNull();

File: logappender/src/main/java/org/apache/rocketmq/logappender/log4j/RocketmqLog4jAppender.java
Patch:
@@ -66,7 +66,7 @@ public void activateOptions() {
             return;
         }
         try {
-            producer = ProducerInstance.getInstance(nameServerAddress, producerGroup);
+            producer = ProducerInstance.getProducerInstance().getInstance(nameServerAddress, producerGroup);
         } catch (Exception e) {
             LogLog.error("activateOptions nameserver:" + nameServerAddress + " group:" + producerGroup + " " + e.getMessage());
         }
@@ -129,7 +129,7 @@ public synchronized void close() {
         this.closed = true;
 
         try {
-            ProducerInstance.removeAndClose(this.nameServerAddress, this.producerGroup);
+            ProducerInstance.getProducerInstance().removeAndClose(this.nameServerAddress, this.producerGroup);
         } catch (Exception e) {
             LogLog.error("Closing RocketmqLog4jAppender [" + name + "] nameServerAddress:" + nameServerAddress + " group:" + producerGroup + " " + e.getMessage());
         }

File: logappender/src/main/java/org/apache/rocketmq/logappender/log4j2/RocketmqLog4j2Appender.java
Patch:
@@ -81,7 +81,7 @@ protected RocketmqLog4j2Appender(String name, Filter filter, Layout<? extends Se
         this.nameServerAddress = nameServerAddress;
         this.producerGroup = producerGroup;
         try {
-            this.producer = ProducerInstance.getInstance(this.nameServerAddress, this.producerGroup);
+            this.producer = ProducerInstance.getProducerInstance().getInstance(this.nameServerAddress, this.producerGroup);
         } catch (Exception e) {
             ErrorHandler handler = this.getHandler();
             if (handler != null) {
@@ -127,7 +127,7 @@ public void append(LogEvent event) {
     public boolean stop(long timeout, TimeUnit timeUnit) {
         this.setStopping();
         try {
-            ProducerInstance.removeAndClose(this.nameServerAddress, this.producerGroup);
+            ProducerInstance.getProducerInstance().removeAndClose(this.nameServerAddress, this.producerGroup);
         } catch (Exception e) {
             ErrorHandler handler = this.getHandler();
             if (handler != null) {

File: logappender/src/main/java/org/apache/rocketmq/logappender/logback/RocketmqLogbackAppender.java
Patch:
@@ -97,7 +97,7 @@ public void start() {
             return;
         }
         try {
-            producer = ProducerInstance.getInstance(nameServerAddress, producerGroup);
+            producer = ProducerInstance.getProducerInstance().getInstance(nameServerAddress, producerGroup);
         } catch (Exception e) {
             addError("Starting RocketmqLogbackAppender [" + this.getName()
                     + "] nameServerAddress:" + nameServerAddress + " group:" + producerGroup + " " + e.getMessage());
@@ -119,7 +119,7 @@ public synchronized void stop() {
         this.started = false;
 
         try {
-            ProducerInstance.removeAndClose(this.nameServerAddress, this.producerGroup);
+            ProducerInstance.getProducerInstance().removeAndClose(this.nameServerAddress, this.producerGroup);
         } catch (Exception e) {
             addError("Closeing RocketmqLogbackAppender [" + this.getName()
                     + "] nameServerAddress:" + nameServerAddress + " group:" + producerGroup + " " + e.getMessage());

File: test/src/test/java/org/apache/rocketmq/test/base/IntegrationTestBase.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.BrokerConfig;
+import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.namesrv.NamesrvConfig;
 import org.apache.rocketmq.namesrv.NamesrvController;
 import org.apache.rocketmq.remoting.netty.NettyClientConfig;
@@ -75,7 +76,7 @@ public class IntegrationTestBase {
                         }
                     }
                     for (File file : TMPE_FILES) {
-                        deleteFile(file);
+                        UtilAll.deleteFile(file);
                     }
                 } catch (Exception e){
                     logger.error("Shutdown error", e);
@@ -187,5 +188,5 @@ public static void deleteFile(File file) {
             file.delete();
         }
     }
-
+  
 }

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -1111,7 +1111,7 @@ private boolean isTheBatchFull(int sizePy, int maxMsgNums, int bufferTotal, int
             return false;
         }
 
-        if ((messageTotal + 1) >= maxMsgNums) {
+        if (maxMsgNums <= messageTotal) {
             return true;
         }
 
@@ -1120,15 +1120,15 @@ private boolean isTheBatchFull(int sizePy, int maxMsgNums, int bufferTotal, int
                 return true;
             }
 
-            if ((messageTotal + 1) > this.messageStoreConfig.getMaxTransferCountOnMessageInDisk()) {
+            if (messageTotal > this.messageStoreConfig.getMaxTransferCountOnMessageInDisk() - 1) {
                 return true;
             }
         } else {
             if ((bufferTotal + sizePy) > this.messageStoreConfig.getMaxTransferBytesOnMessageInMemory()) {
                 return true;
             }
 
-            if ((messageTotal + 1) > this.messageStoreConfig.getMaxTransferCountOnMessageInMemory()) {
+            if (messageTotal > this.messageStoreConfig.getMaxTransferCountOnMessageInMemory() - 1) {
                 return true;
             }
         }

File: test/src/test/java/org/apache/rocketmq/test/base/BaseConf.java
Patch:
@@ -41,7 +41,7 @@ public class BaseConf {
     protected static String clusterName;
     protected static int brokerNum;
     protected static int waitTime = 5;
-    protected static int consumeTime = 1 * 60 * 1000;
+    protected static int consumeTime = 5 * 60 * 1000;
     protected static NamesrvController namesrvController;
     protected static BrokerController brokerController1;
     protected static BrokerController brokerController2;

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -296,7 +296,7 @@ public void run() {
                 public void run() {
                     try {
                         BrokerController.this.protectBroker();
-                    } catch (Exception e) {
+                    } catch (Throwable e) {
                         log.error("protectBroker error.", e);
                     }
                 }
@@ -307,7 +307,7 @@ public void run() {
                 public void run() {
                     try {
                         BrokerController.this.printWaterMark();
-                    } catch (Exception e) {
+                    } catch (Throwable e) {
                         log.error("printWaterMark error.", e);
                     }
                 }

File: broker/src/main/java/org/apache/rocketmq/broker/client/ClientHousekeepingService.java
Patch:
@@ -45,8 +45,8 @@ public void start() {
             public void run() {
                 try {
                     ClientHousekeepingService.this.scanExceptionChannel();
-                } catch (Exception e) {
-                    log.error("", e);
+                } catch (Throwable e) {
+                    log.error("Error occurred when scan not active client channels.", e);
                 }
             }
         }, 1000 * 10, 1000 * 10, TimeUnit.MILLISECONDS);

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -166,7 +166,7 @@ public void initChannel(SocketChannel ch) throws Exception {
             public void run() {
                 try {
                     NettyRemotingClient.this.scanResponseTable();
-                } catch (Exception e) {
+                } catch (Throwable e) {
                     log.error("scanResponseTable exception", e);
                 }
             }

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingServer.java
Patch:
@@ -195,7 +195,7 @@ public void initChannel(SocketChannel ch) throws Exception {
             public void run() {
                 try {
                     NettyRemotingServer.this.scanResponseTable();
-                } catch (Exception e) {
+                } catch (Throwable e) {
                     log.error("scanResponseTable exception", e);
                 }
             }

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -1443,7 +1443,7 @@ public void run() {
                 this.deleteExpiredFiles();
 
                 this.redeleteHangedFile();
-            } catch (Exception e) {
+            } catch (Throwable e) {
                 DefaultMessageStore.log.warn(this.getServiceName() + " service has exception. ", e);
             }
         }
@@ -1583,7 +1583,7 @@ class CleanConsumeQueueService {
         public void run() {
             try {
                 this.deleteExpiredFiles();
-            } catch (Exception e) {
+            } catch (Throwable e) {
                 DefaultMessageStore.log.warn(this.getServiceName() + " service has exception. ", e);
             }
         }

File: store/src/main/java/org/apache/rocketmq/store/schedule/ScheduleMessageService.java
Patch:
@@ -121,7 +121,7 @@ public void start() {
             public void run() {
                 try {
                     ScheduleMessageService.this.persist();
-                } catch (Exception e) {
+                } catch (Throwable e) {
                     log.error("scheduleAtFixedRate flush exception", e);
                 }
             }

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -532,8 +532,7 @@ private RemotingCommand sendBatchMessage(final ChannelHandlerContext ctx, //
 
         PutMessageResult putMessageResult = this.brokerController.getMessageStore().putMessages(messageExtBatch);
 
-        handlePutMessageResult(putMessageResult, response, request, messageExtBatch, responseHeader, sendMessageContext, ctx, queueIdInt);
-        return response;
+        return handlePutMessageResult(putMessageResult, response, request, messageExtBatch, responseHeader, sendMessageContext, ctx, queueIdInt);
     }
 
     public boolean hasConsumeMessageHook() {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -532,8 +532,7 @@ private RemotingCommand sendBatchMessage(final ChannelHandlerContext ctx, //
 
         PutMessageResult putMessageResult = this.brokerController.getMessageStore().putMessages(messageExtBatch);
 
-        handlePutMessageResult(putMessageResult, response, request, messageExtBatch, responseHeader, sendMessageContext, ctx, queueIdInt);
-        return response;
+        return handlePutMessageResult(putMessageResult, response, request, messageExtBatch, responseHeader, sendMessageContext, ctx, queueIdInt);
     }
 
     public boolean hasConsumeMessageHook() {

File: test/src/main/java/org/apache/rocketmq/test/listener/rmq/concurrent/RMQDelayListner.java
Patch:
@@ -49,7 +49,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
         long recvTime = System.currentTimeMillis();
         for (MessageExt msg : msgs) {
             if (isDebug) {
-                logger.info(listnerName + ":" + msg);
+                logger.info(listenerName + ":" + msg);
             }
 
             msgBodys.addData(new String(msg.getBody()));

File: test/src/main/java/org/apache/rocketmq/test/listener/rmq/concurrent/RMQNormalListner.java
Patch:
@@ -51,8 +51,8 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
         for (MessageExt msg : msgs) {
             msgIndex.getAndIncrement();
             if (isDebug) {
-                if (listnerName != null && listnerName != "") {
-                    logger.info(listnerName + ":" + msgIndex.get() + ":"
+                if (listenerName != null && listenerName != "") {
+                    logger.info(listenerName + ":" + msgIndex.get() + ":"
                         + String.format("msgid:%s broker:%s queueId:%s offset:%s",
                         msg.getMsgId(), msg.getStoreHost(), msg.getQueueId(),
                         msg.getQueueOffset()));

File: test/src/main/java/org/apache/rocketmq/test/listener/rmq/order/RMQOrderListener.java
Patch:
@@ -68,8 +68,8 @@ public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs,
         ConsumeOrderlyContext context) {
         for (MessageExt msg : msgs) {
             if (isDebug) {
-                if (listnerName != null && listnerName != "") {
-                    logger.info(listnerName + ": " + msg);
+                if (listenerName != null && listenerName != "") {
+                    logger.info(listenerName + ": " + msg);
                 } else {
                     logger.info(msg);
                 }

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadCastNormalMsgRecvFailIT.java
Patch:
@@ -63,10 +63,10 @@ public void testStartTwoConsumerAndOneConsumerFail() {
         producer.send(msgSize);
         Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());
 
-        consumer1.getListner().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
-            consumer1.getListner().getAllMsgBody()))
+            consumer1.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
     }
 }

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/topic/MulConsumerMulTopicIT.java
Patch:
@@ -59,7 +59,7 @@ public void testSynSendMessage() {
         Assert.assertEquals("Not all sent succeeded", msgSize * 2, producer.getAllUndupMsgBody().size());
 
         boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(),
-            consumer1.getListner(), consumer2.getListner());
+            consumer1.getListener(), consumer2.getListener());
         assertThat(recvAll).isEqualTo(true);
     }
 
@@ -80,7 +80,7 @@ public void testConsumeWithDiffTag() {
         Assert.assertEquals("Not all sent succeeded", msgSize * 2, producer.getAllUndupMsgBody().size());
 
         boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(),
-            consumer1.getListner(), consumer2.getListner());
+            consumer1.getListener(), consumer2.getListener());
         assertThat(recvAll).isEqualTo(true);
     }
 
@@ -102,7 +102,7 @@ public void testConsumeWithDiffTagAndFilter() {
         producer.send(MQMessageFactory.getMsg(topic2, msgSize, tag1));
 
         boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(),
-            consumer1.getListner(), consumer2.getListner());
+            consumer1.getListener(), consumer2.getListener());
         assertThat(recvAll).isEqualTo(true);
     }
 }

File: test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithOnlySendCallBackIT.java
Patch:
@@ -55,9 +55,9 @@ public void testSendWithOnlyCallBack() {
         producer.waitForResponse(10 * 1000);
         assertThat(producer.getSuccessMsgCount()).isEqualTo(msgSize);
 
-        consumer.getListner().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
-            consumer.getListner().getAllMsgBody()))
+            consumer.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
     }
 

File: test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendIT.java
Patch:
@@ -56,9 +56,9 @@ public void testOneWaySendWithOnlyMsgAsParam() {
         producer.waitForResponse(5 * 1000);
         assertThat(producer.getAllMsgBody().size()).isEqualTo(msgSize);
 
-        consumer.getListner().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
-            consumer.getListner().getAllMsgBody()))
+            consumer.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
     }
 }

File: test/src/test/java/org/apache/rocketmq/test/client/producer/querymsg/QueryMsgByIdIT.java
Patch:
@@ -57,11 +57,11 @@ public void testQueryMsg() {
         int msgSize = 20;
         producer.send(msgSize);
         Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());
-        consumer.getListner().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
         Assert.assertEquals("Not all are consumed", 0, VerifyUtils.verify(producer.getAllMsgBody(),
-            consumer.getListner().getAllMsgBody()));
+            consumer.getListener().getAllMsgBody()));
 
-        MessageExt recvMsg = (MessageExt) consumer.getListner().getFirstMsg();
+        MessageExt recvMsg = (MessageExt) consumer.getListener().getFirstMsg();
         MessageExt queryMsg = null;
         try {
             TestUtils.waitForMoment(3000);

File: test/src/test/java/org/apache/rocketmq/test/smoke/NormalMessageSendAndRecvIT.java
Patch:
@@ -54,9 +54,9 @@ public void testSynSendMessage() {
         int msgSize = 10;
         producer.send(msgSize);
         Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());
-        consumer.getListner().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
-            consumer.getListner().getAllMsgBody()))
+            consumer.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
     }
 }

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadCastNormalMsgNotRecvIT.java
Patch:
@@ -50,13 +50,13 @@ public void tearDown() {
     }
 
     @Test
-    public void testNotConsumeAfterConsume() {
+    public void testNotConsumeAfterConsume() throws Exception {
         int msgSize = 16;
 
         String group = initConsumerGroup();
         RMQBroadCastConsumer consumer1 = getBroadCastConsumer(nsAddr, group, topic, "*",
             new RMQNormalListner(group + "_1"));
-
+        Thread.sleep(3000);
         producer.send(msgSize);
         Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());
 

File: test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithMessageQueueSelectorIT.java
Patch:
@@ -80,6 +80,7 @@ public MessageQueue select(List<MessageQueue> list, Message message, Object o) {
 
         producer.clearMsg();
         consumer.clearMsg();
+        producer.getSuccessSendResult().clear();
 
         producer.asyncSend(msgSize, new MessageQueueSelector() {
             @Override

File: common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
Patch:
@@ -47,6 +47,9 @@ public class BrokerConfig {
     private boolean autoCreateSubscriptionGroup = true;
     private String messageStorePlugIn = "";
 
+    /**
+     * thread numbers for send message thread pool, since spin lock will be used by default since 4.0.x, the default value is 1.
+     */
     private int sendMessageThreadPoolNums = 1; //16 + Runtime.getRuntime().availableProcessors() * 4;
     private int pullMessageThreadPoolNums = 16 + Runtime.getRuntime().availableProcessors() * 2;
     private int adminBrokerThreadPoolNums = 16;

File: common/src/main/java/org/apache/rocketmq/common/constant/LoggerName.java
Patch:
@@ -20,6 +20,7 @@ public class LoggerName {
     public static final String FILTERSRV_LOGGER_NAME = "RocketmqFiltersrv";
     public static final String NAMESRV_LOGGER_NAME = "RocketmqNamesrv";
     public static final String BROKER_LOGGER_NAME = "RocketmqBroker";
+    public static final String BROKER_CONSOLE_NAME = "RocketmqConsole";
     public static final String CLIENT_LOGGER_NAME = "RocketmqClient";
     public static final String TOOLS_LOGGER_NAME = "RocketmqTools";
     public static final String COMMON_LOGGER_NAME = "RocketmqCommon";

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/LanguageCode.java
Patch:
@@ -26,7 +26,9 @@ public enum LanguageCode {
     ERLANG((byte) 5),
     RUBY((byte) 6),
     OTHER((byte) 7),
-    HTTP((byte) 8);
+    HTTP((byte) 8),
+    GO((byte) 9),
+    PHP((byte) 10);
 
     private byte code;
 

File: test/src/main/java/org/apache/rocketmq/test/listener/rmq/concurrent/RMQNormalListner.java
Patch:
@@ -63,7 +63,9 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
 
             msgBodys.addData(new String(msg.getBody()));
             originMsgs.addData(msg);
-            originMsgIndex.put(new String(msg.getBody()), msg);
+            if (originMsgIndex != null) {
+                originMsgIndex.put(new String(msg.getBody()), msg);
+            }
         }
         return consumeStatus;
     }

File: test/src/main/java/org/apache/rocketmq/test/util/MQAdmin.java
Patch:
@@ -45,7 +45,6 @@ public static boolean createTopic(String nameSrvAddr, String clusterName, String
             mqAdminExt.start();
             mqAdminExt.createTopic(clusterName, topic, queueNum);
         } catch (Exception e) {
-            e.printStackTrace();
         }
 
         long startTime = System.currentTimeMillis();

File: test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithMessageQueueIT.java
Patch:
@@ -33,7 +33,6 @@
 
 public class AsyncSendWithMessageQueueIT extends BaseConf {
     private static Logger logger = Logger.getLogger(TagMessageWith1ConsumerIT.class);
-    private static boolean sendFail = false;
     private RMQAsyncSendProducer producer = null;
     private String topic = null;
 
@@ -57,7 +56,7 @@ public void testAsyncSendWithMQ() {
         MessageQueue mq = new MessageQueue(topic, broker1Name, queueId);
 
         producer.asyncSend(msgSize, mq);
-        producer.waitForResponse(5 * 1000);
+        producer.waitForResponse(10 * 1000);
         assertThat(producer.getSuccessMsgCount()).isEqualTo(msgSize);
 
         consumer.getListner().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
@@ -72,7 +71,7 @@ public void testAsyncSendWithMQ() {
 
         mq = new MessageQueue(topic, broker2Name, queueId);
         producer.asyncSend(msgSize, mq);
-        producer.waitForResponse(5 * 1000);
+        producer.waitForResponse(10 * 1000);
         assertThat(producer.getSuccessMsgCount()).isEqualTo(msgSize);
 
         consumer.getListner().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);

File: test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithMessageQueueSelectorIT.java
Patch:
@@ -36,7 +36,6 @@
 
 public class AsyncSendWithMessageQueueSelectorIT extends BaseConf {
     private static Logger logger = Logger.getLogger(TagMessageWith1ConsumerIT.class);
-    private static boolean sendFail = false;
     private RMQAsyncSendProducer producer = null;
     private String topic = null;
 

File: test/src/test/java/org/apache/rocketmq/test/delay/NormalMsgDelayIT.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.factory.MQMessageFactory;
 import org.apache.rocketmq.test.listener.rmq.concurrent.RMQDelayListner;
-import org.apache.rocketmq.test.listener.rmq.order.RMQOrderListener;
 import org.apache.rocketmq.test.util.VerifyUtils;
 import org.junit.After;
 import org.junit.Assert;
@@ -43,7 +42,7 @@ public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
         producer = getProducer(nsAddr, topic);
-        consumer = getConsumer(nsAddr, topic, "*", new RMQOrderListener());
+        consumer = getConsumer(nsAddr, topic, "*", new RMQDelayListner());
     }
 
     @After

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -462,7 +462,7 @@ public GetMessageResult getMessage(final String group, final String topic, final
                         long maxPhyOffsetPulling = 0;
 
                         int i = 0;
-                        final int maxFilterMessageCount = 16000;
+                        final int maxFilterMessageCount = Math.max(16000, maxMsgNums * ConsumeQueue.CQ_STORE_UNIT_SIZE);
                         final boolean diskFallRecorded = this.messageStoreConfig.isDiskFallRecorded();
                         for (; i < bufferConsumeQueue.getSize() && i < maxFilterMessageCount; i += ConsumeQueue.CQ_STORE_UNIT_SIZE) {
                             long offsetPy = bufferConsumeQueue.getByteBuffer().getLong();

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -275,7 +275,7 @@ public void run() {
                     log.error("ScheduledTask updateTopicRouteInfoFromNameServer exception", e);
                 }
             }
-        }, 10, this.clientConfig.getPollNameServerInteval(), TimeUnit.MILLISECONDS);
+        }, 10, this.clientConfig.getPollNameServerInterval(), TimeUnit.MILLISECONDS);
 
         this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
 

File: common/src/main/java/org/apache/rocketmq/common/message/MessageClientIDSetter.java
Patch:
@@ -52,7 +52,7 @@ private synchronized static void setStartTime(long millis) {
         Calendar cal = Calendar.getInstance();
         cal.setTimeInMillis(millis);
         cal.set(Calendar.DAY_OF_MONTH, 1);
-        cal.set(Calendar.HOUR, 0);
+        cal.set(Calendar.HOUR_OF_DAY, 0);
         cal.set(Calendar.MINUTE, 0);
         cal.set(Calendar.SECOND, 0);
         cal.set(Calendar.MILLISECOND, 0);
@@ -74,7 +74,7 @@ public static Date getNearlyTimeFromID(String msgID) {
         Calendar cal = Calendar.getInstance();
         long now = cal.getTimeInMillis();
         cal.set(Calendar.DAY_OF_MONTH, 1);
-        cal.set(Calendar.HOUR, 0);
+        cal.set(Calendar.HOUR_OF_DAY, 0);
         cal.set(Calendar.MINUTE, 0);
         cal.set(Calendar.SECOND, 0);
         cal.set(Calendar.MILLISECOND, 0);

File: test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadCastNormalMsgNotRecvIT.java
Patch:
@@ -50,13 +50,13 @@ public void tearDown() {
     }
 
     @Test
-    public void testNotConsumeAfterConsume() {
+    public void testNotConsumeAfterConsume() throws Exception {
         int msgSize = 16;
 
         String group = initConsumerGroup();
         RMQBroadCastConsumer consumer1 = getBroadCastConsumer(nsAddr, group, topic, "*",
             new RMQNormalListner(group + "_1"));
-
+        Thread.sleep(3000);
         producer.send(msgSize);
         Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());
 

File: test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithMessageQueueSelectorIT.java
Patch:
@@ -80,6 +80,7 @@ public MessageQueue select(List<MessageQueue> list, Message message, Object o) {
 
         producer.clearMsg();
         consumer.clearMsg();
+        producer.getSuccessSendResult().clear();
 
         producer.asyncSend(msgSize, new MessageQueueSelector() {
             @Override

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java
Patch:
@@ -205,7 +205,7 @@ private void createAndUpdateQueueData(final String brokerName, final TopicConfig
             queueDataList = new LinkedList<QueueData>();
             queueDataList.add(queueData);
             this.topicQueueTable.put(topicConfig.getTopicName(), queueDataList);
-            log.info("new topic registerd, {} {}", topicConfig.getTopicName(), queueData);
+            log.info("new topic registered, {} {}", topicConfig.getTopicName(), queueData);
         } else {
             boolean addNewOne = true;
 

File: common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
Patch:
@@ -47,6 +47,9 @@ public class BrokerConfig {
     private boolean autoCreateSubscriptionGroup = true;
     private String messageStorePlugIn = "";
 
+    /**
+     * thread numbers for send message thread pool, since spin lock will be used by default since 4.0.x, the default value is 1.
+     */
     private int sendMessageThreadPoolNums = 1; //16 + Runtime.getRuntime().availableProcessors() * 4;
     private int pullMessageThreadPoolNums = 16 + Runtime.getRuntime().availableProcessors() * 2;
     private int adminBrokerThreadPoolNums = 16;

File: common/src/main/java/org/apache/rocketmq/common/constant/LoggerName.java
Patch:
@@ -20,6 +20,7 @@ public class LoggerName {
     public static final String FILTERSRV_LOGGER_NAME = "RocketmqFiltersrv";
     public static final String NAMESRV_LOGGER_NAME = "RocketmqNamesrv";
     public static final String BROKER_LOGGER_NAME = "RocketmqBroker";
+    public static final String BROKER_CONSOLE_NAME = "RocketmqConsole";
     public static final String CLIENT_LOGGER_NAME = "RocketmqClient";
     public static final String TOOLS_LOGGER_NAME = "RocketmqTools";
     public static final String COMMON_LOGGER_NAME = "RocketmqCommon";

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/LanguageCode.java
Patch:
@@ -26,7 +26,9 @@ public enum LanguageCode {
     ERLANG((byte) 5),
     RUBY((byte) 6),
     OTHER((byte) 7),
-    HTTP((byte) 8);
+    HTTP((byte) 8),
+    GO((byte) 9),
+    PHP((byte) 10);
 
     private byte code;
 

File: test/src/main/java/org/apache/rocketmq/test/listener/rmq/concurrent/RMQNormalListner.java
Patch:
@@ -63,7 +63,9 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
 
             msgBodys.addData(new String(msg.getBody()));
             originMsgs.addData(msg);
-            originMsgIndex.put(new String(msg.getBody()), msg);
+            if (originMsgIndex != null) {
+                originMsgIndex.put(new String(msg.getBody()), msg);
+            }
         }
         return consumeStatus;
     }

File: test/src/main/java/org/apache/rocketmq/test/util/MQAdmin.java
Patch:
@@ -45,7 +45,6 @@ public static boolean createTopic(String nameSrvAddr, String clusterName, String
             mqAdminExt.start();
             mqAdminExt.createTopic(clusterName, topic, queueNum);
         } catch (Exception e) {
-            e.printStackTrace();
         }
 
         long startTime = System.currentTimeMillis();

File: test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithMessageQueueIT.java
Patch:
@@ -33,7 +33,6 @@
 
 public class AsyncSendWithMessageQueueIT extends BaseConf {
     private static Logger logger = Logger.getLogger(TagMessageWith1ConsumerIT.class);
-    private static boolean sendFail = false;
     private RMQAsyncSendProducer producer = null;
     private String topic = null;
 
@@ -57,7 +56,7 @@ public void testAsyncSendWithMQ() {
         MessageQueue mq = new MessageQueue(topic, broker1Name, queueId);
 
         producer.asyncSend(msgSize, mq);
-        producer.waitForResponse(5 * 1000);
+        producer.waitForResponse(10 * 1000);
         assertThat(producer.getSuccessMsgCount()).isEqualTo(msgSize);
 
         consumer.getListner().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
@@ -72,7 +71,7 @@ public void testAsyncSendWithMQ() {
 
         mq = new MessageQueue(topic, broker2Name, queueId);
         producer.asyncSend(msgSize, mq);
-        producer.waitForResponse(5 * 1000);
+        producer.waitForResponse(10 * 1000);
         assertThat(producer.getSuccessMsgCount()).isEqualTo(msgSize);
 
         consumer.getListner().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);

File: test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithMessageQueueSelectorIT.java
Patch:
@@ -36,7 +36,6 @@
 
 public class AsyncSendWithMessageQueueSelectorIT extends BaseConf {
     private static Logger logger = Logger.getLogger(TagMessageWith1ConsumerIT.class);
-    private static boolean sendFail = false;
     private RMQAsyncSendProducer producer = null;
     private String topic = null;
 

File: test/src/test/java/org/apache/rocketmq/test/delay/NormalMsgDelayIT.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
 import org.apache.rocketmq.test.factory.MQMessageFactory;
 import org.apache.rocketmq.test.listener.rmq.concurrent.RMQDelayListner;
-import org.apache.rocketmq.test.listener.rmq.order.RMQOrderListener;
 import org.apache.rocketmq.test.util.VerifyUtils;
 import org.junit.After;
 import org.junit.Assert;
@@ -43,7 +42,7 @@ public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
         producer = getProducer(nsAddr, topic);
-        consumer = getConsumer(nsAddr, topic, "*", new RMQOrderListener());
+        consumer = getConsumer(nsAddr, topic, "*", new RMQDelayListner());
     }
 
     @After

File: store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -462,7 +462,7 @@ public GetMessageResult getMessage(final String group, final String topic, final
                         long maxPhyOffsetPulling = 0;
 
                         int i = 0;
-                        final int maxFilterMessageCount = 16000;
+                        final int maxFilterMessageCount = Math.max(16000, maxMsgNums * ConsumeQueue.CQ_STORE_UNIT_SIZE);
                         final boolean diskFallRecorded = this.messageStoreConfig.isDiskFallRecorded();
                         for (; i < bufferConsumeQueue.getSize() && i < maxFilterMessageCount; i += ConsumeQueue.CQ_STORE_UNIT_SIZE) {
                             long offsetPy = bufferConsumeQueue.getByteBuffer().getLong();

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -275,7 +275,7 @@ public void run() {
                     log.error("ScheduledTask updateTopicRouteInfoFromNameServer exception", e);
                 }
             }
-        }, 10, this.clientConfig.getPollNameServerInteval(), TimeUnit.MILLISECONDS);
+        }, 10, this.clientConfig.getPollNameServerInterval(), TimeUnit.MILLISECONDS);
 
         this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
 

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -223,7 +223,7 @@ public void start() throws MQClientException {
                     this.serviceState = ServiceState.START_FAILED;
                     // If not specified,looking address from name server
                     if (null == this.clientConfig.getNamesrvAddr()) {
-                        this.clientConfig.setNamesrvAddr(this.mQClientAPIImpl.fetchNameServerAddr());
+                        this.mQClientAPIImpl.fetchNameServerAddr();
                     }
                     // Start request-response channel
                     this.mQClientAPIImpl.start();

File: client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -223,7 +223,7 @@ public void start() throws MQClientException {
                     this.serviceState = ServiceState.START_FAILED;
                     // If not specified,looking address from name server
                     if (null == this.clientConfig.getNamesrvAddr()) {
-                        this.clientConfig.setNamesrvAddr(this.mQClientAPIImpl.fetchNameServerAddr());
+                        this.mQClientAPIImpl.fetchNameServerAddr();
                     }
                     // Start request-response channel
                     this.mQClientAPIImpl.start();

File: common/src/main/java/org/apache/rocketmq/common/message/MessageClientIDSetter.java
Patch:
@@ -52,7 +52,7 @@ private synchronized static void setStartTime(long millis) {
         Calendar cal = Calendar.getInstance();
         cal.setTimeInMillis(millis);
         cal.set(Calendar.DAY_OF_MONTH, 1);
-        cal.set(Calendar.HOUR, 0);
+        cal.set(Calendar.HOUR_OF_DAY, 0);
         cal.set(Calendar.MINUTE, 0);
         cal.set(Calendar.SECOND, 0);
         cal.set(Calendar.MILLISECOND, 0);
@@ -74,7 +74,7 @@ public static Date getNearlyTimeFromID(String msgID) {
         Calendar cal = Calendar.getInstance();
         long now = cal.getTimeInMillis();
         cal.set(Calendar.DAY_OF_MONTH, 1);
-        cal.set(Calendar.HOUR, 0);
+        cal.set(Calendar.HOUR_OF_DAY, 0);
         cal.set(Calendar.MINUTE, 0);
         cal.set(Calendar.SECOND, 0);
         cal.set(Calendar.MILLISECOND, 0);

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/DefaultRequestProcessor.java
Patch:
@@ -191,7 +191,7 @@ public RemotingCommand registerBrokerWithFilterServer(ChannelHandlerContext ctx,
             registerBrokerBody = RegisterBrokerBody.decode(request.getBody(), RegisterBrokerBody.class);
         } else {
             registerBrokerBody.getTopicConfigSerializeWrapper().getDataVersion().setCounter(new AtomicLong(0));
-            registerBrokerBody.getTopicConfigSerializeWrapper().getDataVersion().setTimestatmp(0);
+            registerBrokerBody.getTopicConfigSerializeWrapper().getDataVersion().setTimestamp(0);
         }
 
         RegisterBrokerResult result = this.namesrvController.getRouteInfoManager().registerBroker(
@@ -227,7 +227,7 @@ public RemotingCommand registerBroker(ChannelHandlerContext ctx, RemotingCommand
         } else {
             topicConfigWrapper = new TopicConfigSerializeWrapper();
             topicConfigWrapper.getDataVersion().setCounter(new AtomicLong(0));
-            topicConfigWrapper.getDataVersion().setTimestatmp(0);
+            topicConfigWrapper.getDataVersion().setTimestamp(0);
         }
 
         RegisterBrokerResult result = this.namesrvController.getRouteInfoManager().registerBroker(

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java
Patch:
@@ -234,7 +234,7 @@ private static void parsePropertie2SystemEnv(Properties properties) {
         if (properties == null) {
             return;
         }
-        String rmqAddressServerDomain = properties.getProperty("rmqAddressServerDomain", "jmenv.tbsite.net");
+        String rmqAddressServerDomain = properties.getProperty("rmqAddressServerDomain", MixAll.DEFAULT_NAMESRV_ADDR_LOOKUP);
         String rmqAddressServerSubGroup = properties.getProperty("rmqAddressServerSubGroup", "nsaddr");
         System.setProperty("rocketmq.namesrv.domain", rmqAddressServerDomain);
         System.setProperty("rocketmq.namesrv.domain.subgroup", rmqAddressServerSubGroup);

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -52,7 +52,8 @@ public class MixAll {
     public static final String NAMESRV_ADDR_ENV = "NAMESRV_ADDR";
     public static final String NAMESRV_ADDR_PROPERTY = "rocketmq.namesrv.addr";
     public static final String MESSAGE_COMPRESS_LEVEL = "rocketmq.message.compressLevel";
-    public static final String WS_DOMAIN_NAME = System.getProperty("rocketmq.namesrv.domain", "jmenv.tbsite.net");
+    public static final String DEFAULT_NAMESRV_ADDR_LOOKUP = "jmenv.tbsite.net";
+    public static final String WS_DOMAIN_NAME = System.getProperty("rocketmq.namesrv.domain", DEFAULT_NAMESRV_ADDR_LOOKUP);
     public static final String WS_DOMAIN_SUBGROUP = System.getProperty("rocketmq.namesrv.domain.subgroup", "nsaddr");
     // http://jmenv.tbsite.net:8080/rocketmq/nsaddr
     public static final String WS_ADDR = "http://" + WS_DOMAIN_NAME + ":8080/rocketmq/" + WS_DOMAIN_SUBGROUP;

File: client/src/test/java/org/apache/rocketmq/client/consumer/DefaultMQPullConsumerTest.java
Patch:
@@ -146,7 +146,7 @@ public void testPullMessageAsync_Success() throws Exception {
         });
     }
 
-    private PullResultExt createPullResult(PullMessageRequestHeader requestHeader, PullStatus pullStatus, List<MessageExt> messageExtList) {
+    private PullResultExt createPullResult(PullMessageRequestHeader requestHeader, PullStatus pullStatus, List<MessageExt> messageExtList) throws Exception {
         return new PullResultExt(pullStatus, requestHeader.getQueueOffset() + messageExtList.size(), 123, 2048, messageExtList, 0, new byte[] {});
     }
 }
\ No newline at end of file

File: client/src/test/java/org/apache/rocketmq/client/producer/DefaultMQProducerTest.java
Patch:
@@ -190,7 +190,7 @@ public void testSendMessageSync_SuccessWithHook() throws Throwable {
         }
     }
 
-    private TopicRouteData createTopicRoute() {
+    public static TopicRouteData createTopicRoute() {
         TopicRouteData topicRouteData = new TopicRouteData();
 
         topicRouteData.setFilterServerTable(new HashMap<String, List<String>>());

File: client/src/test/java/org/apache/rocketmq/client/consumer/store/LocalFileOffsetStoreTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.client.consumer.store;
 
+import java.io.File;
 import java.util.Collections;
 import java.util.HashSet;
 import org.apache.rocketmq.client.ClientConfig;
@@ -40,7 +41,7 @@ public class LocalFileOffsetStoreTest {
 
     @Before
     public void init() {
-        System.setProperty("rocketmq.client.localOffsetStoreDir", System.getProperty("java.io.tmpdir") + ".rocketmq_offsets");
+        System.setProperty("rocketmq.client.localOffsetStoreDir", System.getProperty("java.io.tmpdir") + File.separator + ".rocketmq_offsets");
         String clientId = new ClientConfig().buildMQClientId() + "#TestNamespace" + System.currentTimeMillis();
         when(mQClientFactory.getClientId()).thenReturn(clientId);
     }

File: client/src/test/java/org/apache/rocketmq/client/impl/factory/MQClientInstanceTest.java
Patch:
@@ -39,7 +39,7 @@
 
 @RunWith(MockitoJUnitRunner.class)
 public class MQClientInstanceTest {
-    private MQClientInstance mqClientInstance =  MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());;
+    private MQClientInstance mqClientInstance =  MQClientManager.getInstance().getAndCreateMQClientInstance(new ClientConfig());
     private String topic = "FooBar";
     private String group = "FooBarGroup";
 
@@ -53,15 +53,15 @@ public void testTopicRouteData2TopicPublishInfo() {
         brokerData.setBrokerName("BrokerA");
         brokerData.setCluster("DefaultCluster");
         HashMap<Long, String> brokerAddrs = new HashMap<>();
-        brokerAddrs.put(0L, "127.0.0.1");
+        brokerAddrs.put(0L, "127.0.0.1:10911");
         brokerData.setBrokerAddrs(brokerAddrs);
         brokerDataList.add(brokerData);
         topicRouteData.setBrokerDatas(brokerDataList);
 
         List<QueueData> queueDataList = new ArrayList<>();
         QueueData queueData = new QueueData();
         queueData.setBrokerName("BrokerA");
-        queueData.setPerm(2);
+        queueData.setPerm(6);
         queueData.setReadQueueNums(3);
         queueData.setWriteQueueNums(4);
         queueData.setTopicSynFlag(0);

File: store/src/main/java/org/apache/rocketmq/store/MappedFile.java
Patch:
@@ -486,11 +486,11 @@ public void warmMappedFile(FlushDiskType type, int pages) {
 
         // force flush when prepare load finished
         if (type == FlushDiskType.SYNC_FLUSH) {
-            log.info("mapped file worm up done, force to disk, mappedFile={}, costTime={}",
+            log.info("mapped file warm-up done, force to disk, mappedFile={}, costTime={}",
                 this.getFileName(), System.currentTimeMillis() - beginTime);
             mappedByteBuffer.force();
         }
-        log.info("mapped file worm up done. mappedFile={}, costTime={}", this.getFileName(),
+        log.info("mapped file warm-up done. mappedFile={}, costTime={}", this.getFileName(),
             System.currentTimeMillis() - beginTime);
 
         this.mlock();

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -463,7 +463,7 @@ public long headSlowTimeMills(BlockingQueue<Runnable> q) {
         final Runnable peek = q.peek();
         if (peek != null) {
             RequestTask rt = BrokerFastFailure.castRunnable(peek);
-            slowTimeMills = this.messageStore.now() - rt.getCreateTimestamp();
+            slowTimeMills = rt == null ? 0 : this.messageStore.now() - rt.getCreateTimestamp();
         }
 
         if (slowTimeMills < 0)

File: broker/src/main/java/org/apache/rocketmq/broker/latency/BrokerFastFailure.java
Patch:
@@ -71,7 +71,7 @@ private void cleanExpiredRequest() {
                 } else {
                     break;
                 }
-            } catch (Throwable e) {
+            } catch (Throwable ignored) {
             }
         }
 
@@ -99,7 +99,7 @@ private void cleanExpiredRequest() {
                 } else {
                     break;
                 }
-            } catch (Throwable e) {
+            } catch (Throwable ignored) {
             }
         }
     }

File: broker/src/main/java/org/apache/rocketmq/broker/longpolling/PullRequestHoldService.java
Patch:
@@ -130,7 +130,7 @@ public void notifyMessageArriving(final String topic, final int queueId, final l
                     if (newestOffset > request.getPullFromThisOffset()) {
                         if (this.messageFilter.isMessageMatched(request.getSubscriptionData(), tagsCode)) {
                             try {
-                                this.brokerController.getPullMessageProcessor().excuteRequestWhenWakeup(request.getClientChannel(),
+                                this.brokerController.getPullMessageProcessor().executeRequestWhenWakeup(request.getClientChannel(),
                                     request.getRequestCommand());
                             } catch (Throwable e) {
                                 log.error("execute request when wakeup failed.", e);
@@ -141,7 +141,7 @@ public void notifyMessageArriving(final String topic, final int queueId, final l
 
                     if (System.currentTimeMillis() >= (request.getSuspendTimestamp() + request.getTimeoutMillis())) {
                         try {
-                            this.brokerController.getPullMessageProcessor().excuteRequestWhenWakeup(request.getClientChannel(),
+                            this.brokerController.getPullMessageProcessor().executeRequestWhenWakeup(request.getClientChannel(),
                                 request.getRequestCommand());
                         } catch (Throwable e) {
                             log.error("execute request when wakeup failed.", e);

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PullMessageProcessor.java
Patch:
@@ -50,6 +50,7 @@
 import org.apache.rocketmq.remoting.common.RemotingUtil;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
+import org.apache.rocketmq.remoting.netty.RequestTask;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.store.GetMessageResult;
 import org.apache.rocketmq.store.MessageExtBrokerInner;
@@ -481,7 +482,7 @@ private void generateOffsetMovedEvent(final OffsetMovedEvent event) {
         }
     }
 
-    public void excuteRequestWhenWakeup(final Channel channel, final RemotingCommand request) throws RemotingCommandException {
+    public void executeRequestWhenWakeup(final Channel channel, final RemotingCommand request) throws RemotingCommandException {
         Runnable run = new Runnable() {
             @Override
             public void run() {
@@ -513,8 +514,7 @@ public void operationComplete(ChannelFuture future) throws Exception {
                 }
             }
         };
-
-        this.brokerController.getPullMessageExecutor().submit(run);
+        this.brokerController.getPullMessageExecutor().submit(new RequestTask(run, channel, request));
     }
 
     public void registerConsumeMessageHook(List<ConsumeMessageHook> sendMessageHookList) {

File: example/src/main/resources/MessageFilterImpl.java
Patch:
@@ -17,13 +17,14 @@
 
 package org.apache.rocketmq.example.filter;
 
+import org.apache.rocketmq.common.filter.FilterContext;
 import org.apache.rocketmq.common.filter.MessageFilter;
 import org.apache.rocketmq.common.message.MessageExt;
 
 public class MessageFilterImpl implements MessageFilter {
 
     @Override
-    public boolean match(MessageExt msg) {
+    public boolean match(MessageExt msg, FilterContext context) {
         String property = msg.getProperty("SequenceId");
         if (property != null) {
             int id = Integer.parseInt(property);

File: store/src/main/java/org/apache/rocketmq/store/CommitLog.java
Patch:
@@ -1045,7 +1045,7 @@ public void run() {
 
             while (!this.isStopped()) {
                 try {
-                    this.waitForRunning(0);
+                    this.waitForRunning(10);
                     this.doCommit();
                 } catch (Exception e) {
                     CommitLog.log.warn(this.getServiceName() + " service has exception. ", e);

File: store/src/main/java/org/apache/rocketmq/store/ha/HAService.java
Patch:
@@ -297,7 +297,7 @@ public void run() {
 
             while (!this.isStopped()) {
                 try {
-                    this.waitForRunning(0);
+                    this.waitForRunning(10);
                     this.doWaitTransfer();
                 } catch (Exception e) {
                     log.warn(this.getServiceName() + " service has exception. ", e);

File: common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
Patch:
@@ -91,7 +91,7 @@ public class BrokerConfig {
     private boolean slaveReadEnable = false;
 
     private boolean disableConsumeIfConsumerReadSlowly = false;
-    private long consumerFallbehindThreshold = 1024 * 1024 * 1024 * 16;
+    private long consumerFallbehindThreshold = 1024L * 1024 * 1024 * 16;
 
     private long waitTimeMillsInSendQueue = 200;
 

File: broker/src/main/java/org/apache/rocketmq/broker/subscription/SubscriptionGroupManager.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.rocketmq.broker.subscription;
 
-import java.io.File;
 import java.util.Iterator;
 import java.util.Map.Entry;
 import java.util.concurrent.ConcurrentHashMap;

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.rocketmq.broker.topic;
 
-import java.io.File;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Map;

File: broker/src/main/java/org/apache/rocketmq/broker/subscription/SubscriptionGroupManager.java
Patch:
@@ -142,8 +142,8 @@ public String encode() {
 
     @Override
     public String configFilePath() {
-        //return BrokerPathConfigHelper.getSubscriptionGroupPath(this.brokerController.getMessageStoreConfig().getStorePathRootDir());
-        return BrokerPathConfigHelper.getSubscriptionGroupPath(System.getProperty("user.home") + File.separator + "store");
+        return BrokerPathConfigHelper.getSubscriptionGroupPath(this.brokerController.getMessageStoreConfig()
+                .getStorePathRootDir());
     }
 
     @Override

File: broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java
Patch:
@@ -381,9 +381,8 @@ public String encode() {
 
     @Override
     public String configFilePath() {
-//        return BrokerPathConfigHelper.getTopicConfigPath(this.brokerController.getMessageStoreConfig()
-//                .getStorePathRootDir());
-        return BrokerPathConfigHelper.getTopicConfigPath(System.getProperty("user.home") + File.separator + "store");
+        return BrokerPathConfigHelper.getTopicConfigPath(this.brokerController.getMessageStoreConfig()
+                .getStorePathRootDir());
     }
 
     @Override

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByKeySubCommand.java
Patch:
@@ -69,7 +69,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
         }
     }
 
-    void queryByKey(final DefaultMQAdminExt admin, final String topic, final String key)
+    private void queryByKey(final DefaultMQAdminExt admin, final String topic, final String key)
         throws MQClientException, InterruptedException {
         admin.start();
 

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerPathConfigHelper.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.io.File;
 
+
 public class BrokerPathConfigHelper {
     private static String brokerConfigPath = System.getProperty("user.home") + File.separator + "store"
         + File.separator + "config" + File.separator + "broker.properties";

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java
Patch:
@@ -205,7 +205,7 @@ public boolean initialize() throws CloneNotSupportedException {
                 this.messageStore =
                     new DefaultMessageStore(this.messageStoreConfig, this.brokerStatsManager, this.messageArrivingListener,
                         this.brokerConfig);
-                this.brokerStats = new BrokerStats((DefaultMessageStore)this.messageStore);
+                this.brokerStats = new BrokerStats((DefaultMessageStore) this.messageStore);
                 //load plugin
                 MessageStorePluginContext context = new MessageStorePluginContext(messageStoreConfig, brokerStatsManager, messageArrivingListener, brokerConfig);
                 this.messageStore = MessageStoreFactory.build(context, this.messageStore);
@@ -219,7 +219,7 @@ public boolean initialize() throws CloneNotSupportedException {
 
         if (result) {
             this.remotingServer = new NettyRemotingServer(this.nettyServerConfig, this.clientHousekeepingService);
-            NettyServerConfig fastConfig = (NettyServerConfig)this.nettyServerConfig.clone();
+            NettyServerConfig fastConfig = (NettyServerConfig) this.nettyServerConfig.clone();
             fastConfig.setListenPort(nettyServerConfig.getListenPort() - 2);
             this.fastRemotingServer = new NettyRemotingServer(fastConfig, this.clientHousekeepingService);
             this.sendMessageExecutor = new BrokerFixedThreadPoolExecutor(

File: broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java
Patch:
@@ -178,7 +178,7 @@ public static BrokerController createBrokerController(String[] args) {
             }
 
             messageStoreConfig.setHaListenPort(nettyServerConfig.getListenPort() + 1);
-            LoggerContext lc = (LoggerContext)LoggerFactory.getILoggerFactory();
+            LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();
             JoranConfigurator configurator = new JoranConfigurator();
             configurator.setContext(lc);
             lc.reset();

File: broker/src/main/java/org/apache/rocketmq/broker/client/ClientChannelInfo.java
Patch:
@@ -68,7 +68,7 @@ public int hashCode() {
         result = prime * result + ((channel == null) ? 0 : channel.hashCode());
         result = prime * result + ((clientId == null) ? 0 : clientId.hashCode());
         result = prime * result + ((language == null) ? 0 : language.hashCode());
-        result = prime * result + (int)(lastUpdateTimestamp ^ (lastUpdateTimestamp >>> 32));
+        result = prime * result + (int) (lastUpdateTimestamp ^ (lastUpdateTimestamp >>> 32));
         result = prime * result + version;
         return result;
     }
@@ -81,7 +81,7 @@ public boolean equals(Object obj) {
             return false;
         if (getClass() != obj.getClass())
             return false;
-        ClientChannelInfo other = (ClientChannelInfo)obj;
+        ClientChannelInfo other = (ClientChannelInfo) obj;
         if (channel == null) {
             if (other.channel != null)
                 return false;

File: broker/src/main/java/org/apache/rocketmq/broker/latency/BrokerFastFailure.java
Patch:
@@ -39,8 +39,8 @@ public BrokerFastFailure(final BrokerController brokerController) {
 
     public static RequestTask castRunnable(final Runnable runnable) {
         try {
-            FutureTaskExt object = (FutureTaskExt)runnable;
-            return (RequestTask)object.getRunnable();
+            FutureTaskExt object = (FutureTaskExt) runnable;
+            return (RequestTask) object.getRunnable();
         } catch (Throwable e) {
             log.error(String.format("castRunnable exception, %s", runnable.getClass().getName()), e);
         }

File: broker/src/main/java/org/apache/rocketmq/broker/longpolling/ManyPullRequest.java
Patch:
@@ -32,7 +32,7 @@ public synchronized void addPullRequest(final List<PullRequest> many) {
 
     public synchronized List<PullRequest> cloneListAndClear() {
         if (!this.pullRequestList.isEmpty()) {
-            List<PullRequest> result = (ArrayList<PullRequest>)this.pullRequestList.clone();
+            List<PullRequest> result = (ArrayList<PullRequest>) this.pullRequestList.clone();
             this.pullRequestList.clear();
             return result;
         }

File: broker/src/main/java/org/apache/rocketmq/broker/out/BrokerOuterAPI.java
Patch:
@@ -169,7 +169,7 @@ private RegisterBrokerResult registerBroker(
         switch (response.getCode()) {
             case ResponseCode.SUCCESS: {
                 RegisterBrokerResponseHeader responseHeader =
-                    (RegisterBrokerResponseHeader)response.decodeCommandCustomHeader(RegisterBrokerResponseHeader.class);
+                    (RegisterBrokerResponseHeader) response.decodeCommandCustomHeader(RegisterBrokerResponseHeader.class);
                 RegisterBrokerResult result = new RegisterBrokerResult();
                 result.setMasterAddr(responseHeader.getMasterAddr());
                 result.setHaServerAddr(responseHeader.getHaServerAddr());

File: broker/src/main/java/org/apache/rocketmq/broker/plugin/MessageStoreFactory.java
Patch:
@@ -34,7 +34,7 @@ public final static MessageStore build(MessageStorePluginContext context, Messag
                 String pluginClass = pluginClasses[i];
                 try {
                     @SuppressWarnings("unchecked")
-                    Class<AbstractPluginMessageStore> clazz = (Class<AbstractPluginMessageStore>)Class.forName(pluginClass);
+                    Class<AbstractPluginMessageStore> clazz = (Class<AbstractPluginMessageStore>) Class.forName(pluginClass);
                     Constructor<AbstractPluginMessageStore> construct = clazz.getConstructor(MessageStorePluginContext.class, MessageStore.class);
                     messageStore = construct.newInstance(context, messageStore);
                 } catch (Throwable e) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java
Patch:
@@ -283,12 +283,12 @@ protected SendMessageRequestHeader parseRequestHeader(RemotingCommand request)
         switch (request.getCode()) {
             case RequestCode.SEND_MESSAGE_V2:
                 requestHeaderV2 =
-                    (SendMessageRequestHeaderV2)request
+                    (SendMessageRequestHeaderV2) request
                         .decodeCommandCustomHeader(SendMessageRequestHeaderV2.class);
             case RequestCode.SEND_MESSAGE:
                 if (null == requestHeaderV2) {
                     requestHeader =
-                        (SendMessageRequestHeader)request
+                        (SendMessageRequestHeader) request
                             .decodeCommandCustomHeader(SendMessageRequestHeader.class);
                 } else {
                     requestHeader = SendMessageRequestHeaderV2.createSendMessageRequestHeaderV1(requestHeaderV2);
@@ -305,7 +305,7 @@ public void executeSendMessageHookAfter(final RemotingCommand response, final Se
                 try {
                     if (response != null) {
                         final SendMessageResponseHeader responseHeader =
-                            (SendMessageResponseHeader)response.readCustomHeader();
+                            (SendMessageResponseHeader) response.readCustomHeader();
                         context.setMsgId(responseHeader.getMsgId());
                         context.setQueueId(responseHeader.getQueueId());
                         context.setQueueOffset(responseHeader.getQueueOffset());

File: broker/src/main/java/org/apache/rocketmq/broker/processor/ClientManageProcessor.java
Patch:
@@ -125,7 +125,7 @@ public RemotingCommand unregisterClient(ChannelHandlerContext ctx, RemotingComma
         final RemotingCommand response =
             RemotingCommand.createResponseCommand(UnregisterClientResponseHeader.class);
         final UnregisterClientRequestHeader requestHeader =
-            (UnregisterClientRequestHeader)request
+            (UnregisterClientRequestHeader) request
                 .decodeCommandCustomHeader(UnregisterClientRequestHeader.class);
 
         ClientChannelInfo clientChannelInfo = new ClientChannelInfo(

File: broker/src/main/java/org/apache/rocketmq/broker/processor/EndTransactionProcessor.java
Patch:
@@ -49,7 +49,7 @@ public EndTransactionProcessor(final BrokerController brokerController) {
     public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand request) throws RemotingCommandException {
         final RemotingCommand response = RemotingCommand.createResponseCommand(null);
         final EndTransactionRequestHeader requestHeader =
-            (EndTransactionRequestHeader)request.decodeCommandCustomHeader(EndTransactionRequestHeader.class);
+            (EndTransactionRequestHeader) request.decodeCommandCustomHeader(EndTransactionRequestHeader.class);
 
         if (requestHeader.getFromTransactionCheck()) {
             switch (requestHeader.getCommitOrRollback()) {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/PullMessageProcessor.java
Patch:
@@ -81,9 +81,9 @@ public boolean rejectRequest() {
     private RemotingCommand processRequest(final Channel channel, RemotingCommand request, boolean brokerAllowSuspend)
         throws RemotingCommandException {
         RemotingCommand response = RemotingCommand.createResponseCommand(PullMessageResponseHeader.class);
-        final PullMessageResponseHeader responseHeader = (PullMessageResponseHeader)response.readCustomHeader();
+        final PullMessageResponseHeader responseHeader = (PullMessageResponseHeader) response.readCustomHeader();
         final PullMessageRequestHeader requestHeader =
-            (PullMessageRequestHeader)request.decodeCommandCustomHeader(PullMessageRequestHeader.class);
+            (PullMessageRequestHeader) request.decodeCommandCustomHeader(PullMessageRequestHeader.class);
 
         response.setOpaque(request.getOpaque());
 
@@ -335,7 +335,7 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
                         final byte[] r = this.readGetMessageResult(getMessageResult, requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueId());
                         this.brokerController.getBrokerStatsManager().incGroupGetLatency(requestHeader.getConsumerGroup(),
                             requestHeader.getTopic(), requestHeader.getQueueId(),
-                            (int)(this.brokerController.getMessageStore().now() - beginTimeMills));
+                            (int) (this.brokerController.getMessageStore().now() - beginTimeMills));
                         response.setBody(r);
                     } else {
                         try {

File: broker/src/main/java/org/apache/rocketmq/broker/processor/QueryMessageProcessor.java
Patch:
@@ -72,9 +72,9 @@ public RemotingCommand queryMessage(ChannelHandlerContext ctx, RemotingCommand r
         final RemotingCommand response =
             RemotingCommand.createResponseCommand(QueryMessageResponseHeader.class);
         final QueryMessageResponseHeader responseHeader =
-            (QueryMessageResponseHeader)response.readCustomHeader();
+            (QueryMessageResponseHeader) response.readCustomHeader();
         final QueryMessageRequestHeader requestHeader =
-            (QueryMessageRequestHeader)request
+            (QueryMessageRequestHeader) request
                 .decodeCommandCustomHeader(QueryMessageRequestHeader.class);
 
         response.setOpaque(request.getOpaque());
@@ -127,7 +127,7 @@ public RemotingCommand viewMessageById(ChannelHandlerContext ctx, RemotingComman
         throws RemotingCommandException {
         final RemotingCommand response = RemotingCommand.createResponseCommand(null);
         final ViewMessageRequestHeader requestHeader =
-            (ViewMessageRequestHeader)request.decodeCommandCustomHeader(ViewMessageRequestHeader.class);
+            (ViewMessageRequestHeader) request.decodeCommandCustomHeader(ViewMessageRequestHeader.class);
 
         response.setOpaque(request.getOpaque());
 

File: broker/src/test/java/org/apache/rocketmq/broker/BrokerTestHarness.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: SendMessageTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
+ *
+ * $Id: SendMessageTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
  */
 
 /**

File: broker/src/test/java/org/apache/rocketmq/broker/api/SendMessageTest.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: SendMessageTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
+ *
+ * $Id: SendMessageTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
  */
 
 /**

File: broker/src/test/java/org/apache/rocketmq/broker/offset/ConsumerOffsetManagerTest.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: ConsumerOffsetManagerTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
+ *
+ * $Id: ConsumerOffsetManagerTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
  */
 
 /**

File: broker/src/test/java/org/apache/rocketmq/broker/topic/TopicConfigManagerTest.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: TopicConfigManagerTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
+ *
+ * $Id: TopicConfigManagerTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
  */
 
 /**

File: client/src/main/java/org/apache/rocketmq/client/ClientConfig.java
Patch:
@@ -22,7 +22,6 @@
 
 /**
  * Client Common configuration
- *
  */
 public class ClientConfig {
     public static final String SEND_MESSAGE_WITH_VIP_CHANNEL_PROPERTY = "com.rocketmq.sendMessageWithVIPChannel";

File: client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPullConsumer.java
Patch:
@@ -35,7 +35,6 @@
 
 /**
  * Default pulling consumer
- *
  */
 public class DefaultMQPullConsumer extends ClientConfig implements MQPullConsumer {
     protected final transient DefaultMQPullConsumerImpl defaultMQPullConsumerImpl;

File: client/src/main/java/org/apache/rocketmq/client/consumer/PullCallback.java
Patch:
@@ -18,7 +18,6 @@
 
 /**
  * Async message pulling interface
- *
  */
 public interface PullCallback {
     void onSuccess(final PullResult pullResult);

File: client/src/main/java/org/apache/rocketmq/client/consumer/listener/ConsumeOrderlyContext.java
Patch:
@@ -20,7 +20,6 @@
 
 /**
  * Consumer Orderly consumption context
- *
  */
 public class ConsumeOrderlyContext {
     private final MessageQueue messageQueue;

File: client/src/main/java/org/apache/rocketmq/client/consumer/listener/MessageListener.java
Patch:
@@ -18,7 +18,6 @@
 
 /**
  * A MessageListener object is used to receive asynchronously delivered messages.
- *
  */
 public interface MessageListener {
 }

File: client/src/main/java/org/apache/rocketmq/client/consumer/store/OffsetSerializeWrapper.java
Patch:
@@ -23,7 +23,6 @@
 
 /**
  * Wrapper class for offset serialization
- *
  */
 public class OffsetSerializeWrapper extends RemotingSerializable {
     private ConcurrentHashMap<MessageQueue, AtomicLong> offsetTable =

File: client/src/main/java/org/apache/rocketmq/client/impl/MQAdminImpl.java
Patch:
@@ -307,7 +307,7 @@ public void operationComplete(ResponseFuture responseFuture) {
                                                     QueryMessageResponseHeader responseHeader = null;
                                                     try {
                                                         responseHeader =
-                                                            (QueryMessageResponseHeader)response
+                                                            (QueryMessageResponseHeader) response
                                                                 .decodeCommandCustomHeader(QueryMessageResponseHeader.class);
                                                     } catch (RemotingCommandException e) {
                                                         log.error("decodeCommandCustomHeader exception", e);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/MQConsumerInner.java
Patch:
@@ -26,7 +26,6 @@
 
 /**
  * Consumer inner interface
- *
  */
 public interface MQConsumerInner {
     String groupName();

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/MessageQueueLock.java
Patch:
@@ -21,7 +21,6 @@
 
 /**
  * Message lock,strictly ensure the single queue only one thread at a time consuming
- *
  */
 public class MessageQueueLock {
     private ConcurrentHashMap<MessageQueue, Object> mqLockTable =

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/ProcessQueue.java
Patch:
@@ -35,7 +35,6 @@
 
 /**
  * Queue consumption snapshot
- *
  */
 public class ProcessQueue {
     public final static long REBALANCE_LOCK_MAX_LIVE_TIME =
@@ -69,8 +68,6 @@ public boolean isPullExpired() {
     }
 
     /**
-
-     *
      * @param pushConsumer
      */
     public void cleanExpiredMsg(DefaultMQPushConsumer pushConsumer) {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/PullAPIWrapper.java
Patch:
@@ -66,7 +66,7 @@ public PullAPIWrapper(MQClientInstance mQClientFactory, String consumerGroup, bo
 
     public PullResult processPullResult(final MessageQueue mq, final PullResult pullResult,
         final SubscriptionData subscriptionData) {
-        PullResultExt pullResultExt = (PullResultExt)pullResult;
+        PullResultExt pullResultExt = (PullResultExt) pullResult;
 
         this.updatePullFromWhichNode(mq, pullResultExt.getSuggestWhichBrokerId());
         if (PullStatus.FOUND == pullResult.getPullStatus()) {

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/PullMessageService.java
Patch:
@@ -71,7 +71,7 @@ public ScheduledExecutorService getScheduledExecutorService() {
     private void pullMessage(final PullRequest pullRequest) {
         final MQConsumerInner consumer = this.mQClientFactory.selectConsumer(pullRequest.getConsumerGroup());
         if (consumer != null) {
-            DefaultMQPushConsumerImpl impl = (DefaultMQPushConsumerImpl)consumer;
+            DefaultMQPushConsumerImpl impl = (DefaultMQPushConsumerImpl) consumer;
             impl.pullMessage(pullRequest);
         } else {
             log.warn("No matched consumer for the PullRequest {}, drop it", pullRequest);

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/PullRequest.java
Patch:
@@ -74,7 +74,7 @@ public boolean equals(Object obj) {
             return false;
         if (getClass() != obj.getClass())
             return false;
-        PullRequest other = (PullRequest)obj;
+        PullRequest other = (PullRequest) obj;
         if (consumerGroup == null) {
             if (other.consumerGroup != null)
                 return false;

File: client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceService.java
Patch:
@@ -23,7 +23,6 @@
 
 /**
  * Rebalance Service
- *
  */
 public class RebalanceService extends ServiceThread {
     private static long waitInterval =

File: client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -112,7 +112,7 @@ public void registerCheckForbiddenHook(CheckForbiddenHook checkForbiddenHook) {
     }
 
     public void initTransactionEnv() {
-        TransactionMQProducer producer = (TransactionMQProducer)this.defaultMQProducer;
+        TransactionMQProducer producer = (TransactionMQProducer) this.defaultMQProducer;
         this.checkRequestQueue = new LinkedBlockingQueue<Runnable>(producer.getCheckRequestHoldMax());
         this.checkExecutor = new ThreadPoolExecutor(//
             producer.getCheckThreadPoolMinSize(), //
@@ -238,7 +238,7 @@ public boolean isPublishTopicNeedUpdate(String topic) {
     @Override
     public TransactionCheckListener checkListener() {
         if (this.defaultMQProducer instanceof TransactionMQProducer) {
-            TransactionMQProducer producer = (TransactionMQProducer)defaultMQProducer;
+            TransactionMQProducer producer = (TransactionMQProducer) defaultMQProducer;
             return producer.getTransactionCheckListener();
         }
 
@@ -538,7 +538,7 @@ private SendResult sendDefaultImpl(//
 
             MQClientException mqClientException = new MQClientException(info, exception);
             if (exception instanceof MQBrokerException) {
-                mqClientException.setResponseCode(((MQBrokerException)exception).getResponseCode());
+                mqClientException.setResponseCode(((MQBrokerException) exception).getResponseCode());
             } else if (exception instanceof RemotingConnectException) {
                 mqClientException.setResponseCode(ClientErrorCode.CONNECT_BROKER_EXCEPTION);
             } else if (exception instanceof RemotingTimeoutException) {

File: client/src/main/java/org/apache/rocketmq/client/latency/LatencyFaultToleranceImpl.java
Patch:
@@ -137,8 +137,8 @@ public boolean isAvailable() {
         @Override
         public int hashCode() {
             int result = getName() != null ? getName().hashCode() : 0;
-            result = 31 * result + (int)(getCurrentLatency() ^ (getCurrentLatency() >>> 32));
-            result = 31 * result + (int)(getStartTimestamp() ^ (getStartTimestamp() >>> 32));
+            result = 31 * result + (int) (getCurrentLatency() ^ (getCurrentLatency() >>> 32));
+            result = 31 * result + (int) (getStartTimestamp() ^ (getStartTimestamp() >>> 32));
             return result;
         }
 
@@ -149,7 +149,7 @@ public boolean equals(final Object o) {
             if (!(o instanceof FaultItem))
                 return false;
 
-            final FaultItem faultItem = (FaultItem)o;
+            final FaultItem faultItem = (FaultItem) o;
 
             if (getCurrentLatency() != faultItem.getCurrentLatency())
                 return false;

File: common/src/main/java/org/apache/rocketmq/common/Configuration.java
Patch:
@@ -119,7 +119,6 @@ public Configuration registerConfig(Properties extProperties) {
      *
      * @param object
      * @param fieldName
-     *
      * @throws java.lang.RuntimeException if the field of object is not exist.
      */
     public void setStorePathFromConfig(Object object, String fieldName) {
@@ -156,7 +155,7 @@ private String getStorePath() {
 
                 if (this.storePathFromConfig) {
                     try {
-                        realStorePath = (String)storePathField.get(this.storePathObject);
+                        realStorePath = (String) storePathField.get(this.storePathObject);
                     } catch (IllegalAccessException e) {
                         log.error("getStorePath error, ", e);
                     }

File: common/src/main/java/org/apache/rocketmq/common/CountDownLatch2.java
Patch:
@@ -176,7 +176,7 @@ protected int tryAcquireShared(int acquires) {
 
         protected boolean tryReleaseShared(int releases) {
             // Decrement count; signal when transition to zero
-            for (; ; ) {
+            for (;;) {
                 int c = getState();
                 if (c == 0)
                     return false;

File: common/src/main/java/org/apache/rocketmq/common/DataVersion.java
Patch:
@@ -56,7 +56,7 @@ public boolean equals(final Object o) {
         if (o == null || getClass() != o.getClass())
             return false;
 
-        final DataVersion that = (DataVersion)o;
+        final DataVersion that = (DataVersion) o;
 
         if (timestatmp != that.timestatmp)
             return false;
@@ -66,7 +66,7 @@ public boolean equals(final Object o) {
 
     @Override
     public int hashCode() {
-        int result = (int)(timestatmp ^ (timestatmp >>> 32));
+        int result = (int) (timestatmp ^ (timestatmp >>> 32));
         result = 31 * result + (counter != null ? counter.hashCode() : 0);
         return result;
     }

File: common/src/main/java/org/apache/rocketmq/common/MixAll.java
Patch:
@@ -186,7 +186,7 @@ public static final String file2String(final String fileName) {
 
     public static final String file2String(final File file) {
         if (file.exists()) {
-            char[] data = new char[(int)file.length()];
+            char[] data = new char[(int) file.length()];
             boolean result = false;
 
             FileReader fileReader = null;
@@ -442,7 +442,7 @@ public static String humanReadableByteCount(long bytes, boolean si) {
         int unit = si ? 1000 : 1024;
         if (bytes < unit)
             return bytes + " B";
-        int exp = (int)(Math.log(bytes) / Math.log(unit));
+        int exp = (int) (Math.log(bytes) / Math.log(unit));
         String pre = (si ? "kMGTPE" : "KMGTPE").charAt(exp - 1) + (si ? "" : "i");
         return String.format("%.1f %sB", bytes / Math.pow(unit, exp), pre);
     }

File: common/src/main/java/org/apache/rocketmq/common/TopicConfig.java
Patch:
@@ -151,7 +151,7 @@ public boolean equals(final Object o) {
         if (o == null || getClass() != o.getClass())
             return false;
 
-        final TopicConfig that = (TopicConfig)o;
+        final TopicConfig that = (TopicConfig) o;
 
         if (readQueueNums != that.readQueueNums)
             return false;

File: common/src/main/java/org/apache/rocketmq/common/message/MessageExt.java
Patch:
@@ -65,7 +65,7 @@ public static TopicFilterType parseTopicFilterType(final int sysFlag) {
     }
 
     private static ByteBuffer socketAddress2ByteBuffer(final SocketAddress socketAddress, final ByteBuffer byteBuffer) {
-        InetSocketAddress inetSocketAddress = (InetSocketAddress)socketAddress;
+        InetSocketAddress inetSocketAddress = (InetSocketAddress) socketAddress;
         byteBuffer.put(inetSocketAddress.getAddress().getAddress(), 0, 4);
         byteBuffer.putInt(inetSocketAddress.getPort());
         byteBuffer.flip();
@@ -119,7 +119,7 @@ public void setBornHost(SocketAddress bornHost) {
 
     public String getBornHostString() {
         if (this.bornHost != null) {
-            InetSocketAddress inetSocketAddress = (InetSocketAddress)this.bornHost;
+            InetSocketAddress inetSocketAddress = (InetSocketAddress) this.bornHost;
             return inetSocketAddress.getAddress().getHostAddress();
         }
 
@@ -128,7 +128,7 @@ public String getBornHostString() {
 
     public String getBornHostNameString() {
         if (this.bornHost != null) {
-            InetSocketAddress inetSocketAddress = (InetSocketAddress)this.bornHost;
+            InetSocketAddress inetSocketAddress = (InetSocketAddress) this.bornHost;
             return inetSocketAddress.getAddress().getHostName();
         }
 

File: common/src/main/java/org/apache/rocketmq/common/message/MessageQueue.java
Patch:
@@ -76,7 +76,7 @@ public boolean equals(Object obj) {
             return false;
         if (getClass() != obj.getClass())
             return false;
-        MessageQueue other = (MessageQueue)obj;
+        MessageQueue other = (MessageQueue) obj;
         if (brokerName == null) {
             if (other.brokerName != null)
                 return false;

File: common/src/main/java/org/apache/rocketmq/common/message/MessageQueueForC.java
Patch:
@@ -75,7 +75,7 @@ public boolean equals(Object obj) {
             return false;
         if (getClass() != obj.getClass())
             return false;
-        MessageQueueForC other = (MessageQueueForC)obj;
+        MessageQueueForC other = (MessageQueueForC) obj;
         if (brokerName == null) {
             if (other.brokerName != null)
                 return false;

File: common/src/main/java/org/apache/rocketmq/common/namesrv/NamesrvConfig.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: NamesrvConfig.java 1839 2013-05-16 02:12:02Z vintagewang@apache.org $
+ *
+ * $Id: NamesrvConfig.java 1839 2013-05-16 02:12:02Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/namesrv/TopAddressing.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: TopAddressing.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
+ *
+ * $Id: TopAddressing.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/body/ConsumerRunningInfo.java
Patch:
@@ -53,7 +53,7 @@ public static boolean analyzeSubscription(final TreeMap<String/* clientId */, Co
             String property = prev.getProperties().getProperty(ConsumerRunningInfo.PROP_CONSUME_TYPE);
 
             if (property == null) {
-                property = ((ConsumeType)prev.getProperties().get(ConsumerRunningInfo.PROP_CONSUME_TYPE)).name();
+                property = ((ConsumeType) prev.getProperties().get(ConsumerRunningInfo.PROP_CONSUME_TYPE)).name();
             }
             push = ConsumeType.valueOf(property) == ConsumeType.CONSUME_PASSIVELY;
         }
@@ -109,7 +109,7 @@ public static String analyzeProcessQueue(final String clientId, ConsumerRunningI
             String property = info.getProperties().getProperty(ConsumerRunningInfo.PROP_CONSUME_TYPE);
 
             if (property == null) {
-                property = ((ConsumeType)info.getProperties().get(ConsumerRunningInfo.PROP_CONSUME_TYPE)).name();
+                property = ((ConsumeType) info.getProperties().get(ConsumerRunningInfo.PROP_CONSUME_TYPE)).name();
             }
             push = ConsumeType.valueOf(property) == ConsumeType.CONSUME_PASSIVELY;
         }

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/CheckTransactionStateRequestHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: EndTransactionRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: EndTransactionRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/CheckTransactionStateResponseHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: EndTransactionResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: EndTransactionResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/CloneGroupOffsetRequestHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: DeleteTopicRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: DeleteTopicRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/CreateTopicRequestHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: CreateTopicRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: CreateTopicRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/DeleteTopicRequestHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: DeleteTopicRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: DeleteTopicRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/EndTransactionRequestHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: EndTransactionRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: EndTransactionRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/EndTransactionResponseHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: EndTransactionResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: EndTransactionResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/GetAllTopicConfigResponseHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: GetAllTopicConfigResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: GetAllTopicConfigResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/GetBrokerConfigResponseHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: GetBrokerConfigResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: GetBrokerConfigResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/GetEarliestMsgStoretimeRequestHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: GetEarliestMsgStoretimeRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: GetEarliestMsgStoretimeRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/GetEarliestMsgStoretimeResponseHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: GetEarliestMsgStoretimeResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: GetEarliestMsgStoretimeResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/GetMaxOffsetRequestHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: GetMaxOffsetRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: GetMaxOffsetRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/GetMaxOffsetResponseHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: GetMaxOffsetResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: GetMaxOffsetResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/GetMinOffsetRequestHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: GetMinOffsetRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: GetMinOffsetRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/GetMinOffsetResponseHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: GetMinOffsetResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: GetMinOffsetResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/PullMessageRequestHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: PullMessageRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: PullMessageRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/PullMessageResponseHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: PullMessageResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: PullMessageResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/QueryConsumerOffsetRequestHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: QueryConsumerOffsetRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: QueryConsumerOffsetRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/QueryConsumerOffsetResponseHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: QueryConsumerOffsetResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: QueryConsumerOffsetResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/QueryCorrectionOffsetHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: GetMinOffsetRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: GetMinOffsetRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/QueryMessageRequestHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: QueryMessageRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: QueryMessageRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/QueryMessageResponseHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: QueryMessageResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: QueryMessageResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/QueryTopicConsumeByWhoRequestHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: QueryMessageRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: QueryMessageRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/SearchOffsetRequestHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: SearchOffsetRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: SearchOffsetRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/SearchOffsetResponseHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: SearchOffsetResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: SearchOffsetResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/SendMessageRequestHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: SendMessageRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: SendMessageRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/SendMessageResponseHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: SendMessageResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: SendMessageResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/UpdateConsumerOffsetRequestHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: UpdateConsumerOffsetRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: UpdateConsumerOffsetRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/UpdateConsumerOffsetResponseHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: UpdateConsumerOffsetResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: UpdateConsumerOffsetResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/ViewMessageRequestHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: ViewMessageRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: ViewMessageRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/ViewMessageResponseHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: ViewMessageResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: ViewMessageResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/namesrv/GetRouteInfoRequestHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: GetRouteInfoRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: GetRouteInfoRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/namesrv/GetRouteInfoResponseHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: GetRouteInfoResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: GetRouteInfoResponseHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/namesrv/RegisterBrokerRequestHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: RegisterBrokerRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: RegisterBrokerRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/namesrv/RegisterOrderTopicRequestHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: RegisterOrderTopicRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: RegisterOrderTopicRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/header/namesrv/UnRegisterBrokerRequestHeader.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: UnRegisterBrokerRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: UnRegisterBrokerRequestHeader.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/heartbeat/ConsumeType.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: ConsumeType.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: ConsumeType.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/heartbeat/ConsumerData.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: ConsumerData.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: ConsumerData.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/heartbeat/HeartbeatData.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: HeartbeatData.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: HeartbeatData.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/heartbeat/MessageModel.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: MessageModel.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: MessageModel.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/heartbeat/ProducerData.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: ProducerData.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: ProducerData.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**

File: common/src/main/java/org/apache/rocketmq/common/protocol/heartbeat/SubscriptionData.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: SubscriptionData.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: SubscriptionData.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**
@@ -124,7 +126,7 @@ public boolean equals(Object obj) {
             return false;
         if (getClass() != obj.getClass())
             return false;
-        SubscriptionData other = (SubscriptionData)obj;
+        SubscriptionData other = (SubscriptionData) obj;
         if (classFilterMode != other.classFilterMode)
             return false;
         if (codeSet == null) {

File: common/src/main/java/org/apache/rocketmq/common/protocol/route/BrokerData.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: BrokerData.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: BrokerData.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**
@@ -78,7 +80,7 @@ public boolean equals(Object obj) {
             return false;
         if (getClass() != obj.getClass())
             return false;
-        BrokerData other = (BrokerData)obj;
+        BrokerData other = (BrokerData) obj;
         if (brokerAddrs == null) {
             if (other.brokerAddrs != null)
                 return false;

File: common/src/main/java/org/apache/rocketmq/common/protocol/route/QueueData.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: QueueData.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: QueueData.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**
@@ -81,7 +83,7 @@ public boolean equals(Object obj) {
             return false;
         if (getClass() != obj.getClass())
             return false;
-        QueueData other = (QueueData)obj;
+        QueueData other = (QueueData) obj;
         if (brokerName == null) {
             if (other.brokerName != null)
                 return false;

File: common/src/main/java/org/apache/rocketmq/common/protocol/route/TopicRouteData.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: TopicRouteData.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
+ *
+ * $Id: TopicRouteData.java 1835 2013-05-16 02:00:50Z vintagewang@apache.org $
  */
 
 /**
@@ -106,7 +108,7 @@ public boolean equals(Object obj) {
             return false;
         if (getClass() != obj.getClass())
             return false;
-        TopicRouteData other = (TopicRouteData)obj;
+        TopicRouteData other = (TopicRouteData) obj;
         if (brokerDatas == null) {
             if (other.brokerDatas != null)
                 return false;

File: common/src/main/java/org/apache/rocketmq/common/queue/ConcurrentTreeMap.java
Patch:
@@ -27,7 +27,6 @@
 
 /**
  * thread safe
- *
  */
 public class ConcurrentTreeMap<K, V> {
     private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);

File: common/src/main/java/org/apache/rocketmq/common/queue/RoundQueue.java
Patch:
@@ -22,7 +22,6 @@
 
 /**
  * not thread safe
- *
  */
 public class RoundQueue<E> {
 

File: common/src/main/java/org/apache/rocketmq/common/subscription/SubscriptionGroupConfig.java
Patch:
@@ -114,7 +114,7 @@ public void setNotifyConsumerIdsChangedEnable(final boolean notifyConsumerIdsCha
     public int hashCode() {
         final int prime = 31;
         int result = 1;
-        result = prime * result + (int)(brokerId ^ (brokerId >>> 32));
+        result = prime * result + (int) (brokerId ^ (brokerId >>> 32));
         result = prime * result + (consumeBroadcastEnable ? 1231 : 1237);
         result = prime * result + (consumeEnable ? 1231 : 1237);
         result = prime * result + (consumeFromMinEnable ? 1231 : 1237);
@@ -123,7 +123,7 @@ public int hashCode() {
         result = prime * result + retryMaxTimes;
         result = prime * result + retryQueueNums;
         result =
-            prime * result + (int)(whichBrokerWhenConsumeSlowly ^ (whichBrokerWhenConsumeSlowly >>> 32));
+            prime * result + (int) (whichBrokerWhenConsumeSlowly ^ (whichBrokerWhenConsumeSlowly >>> 32));
         return result;
     }
 
@@ -135,7 +135,7 @@ public boolean equals(Object obj) {
             return false;
         if (getClass() != obj.getClass())
             return false;
-        SubscriptionGroupConfig other = (SubscriptionGroupConfig)obj;
+        SubscriptionGroupConfig other = (SubscriptionGroupConfig) obj;
         if (brokerId != other.brokerId)
             return false;
         if (consumeBroadcastEnable != other.consumeBroadcastEnable)

File: common/src/main/java/org/apache/rocketmq/common/utils/ChannelUtil.java
Patch:
@@ -23,7 +23,7 @@
 
 public class ChannelUtil {
     public static String getRemoteIp(Channel channel) {
-        InetSocketAddress inetSocketAddress = (InetSocketAddress)channel.remoteAddress();
+        InetSocketAddress inetSocketAddress = (InetSocketAddress) channel.remoteAddress();
         if (inetSocketAddress == null) {
             return "";
         }

File: example/src/main/java/org/apache/rocketmq/example/benchmark/Consumer.java
Patch:
@@ -76,9 +76,9 @@ private void printStats() {
                     Long[] end = snapshotList.getLast();
 
                     final long consumeTps =
-                        (long)(((end[1] - begin[1]) / (double)(end[0] - begin[0])) * 1000L);
-                    final double averageB2CRT = (end[2] - begin[2]) / (double)(end[1] - begin[1]);
-                    final double averageS2CRT = (end[3] - begin[3]) / (double)(end[1] - begin[1]);
+                        (long) (((end[1] - begin[1]) / (double) (end[0] - begin[0])) * 1000L);
+                    final double averageB2CRT = (end[2] - begin[2]) / (double) (end[1] - begin[1]);
+                    final double averageS2CRT = (end[3] - begin[3]) / (double) (end[1] - begin[1]);
 
                     System.out.printf("Consume TPS: %d Average(B2C) RT: %7.3f Average(S2C) RT: %7.3f MAX(B2C) RT: %d MAX(S2C) RT: %d%n",
                         consumeTps, averageB2CRT, averageS2CRT, end[4], end[5]

File: example/src/main/java/org/apache/rocketmq/example/benchmark/Producer.java
Patch:
@@ -81,8 +81,8 @@ private void printStats() {
                     Long[] begin = snapshotList.getFirst();
                     Long[] end = snapshotList.getLast();
 
-                    final long sendTps = (long)(((end[3] - begin[3]) / (double)(end[0] - begin[0])) * 1000L);
-                    final double averageRT = (end[5] - begin[5]) / (double)(end[3] - begin[3]);
+                    final long sendTps = (long) (((end[3] - begin[3]) / (double) (end[0] - begin[0])) * 1000L);
+                    final double averageRT = (end[5] - begin[5]) / (double) (end[3] - begin[3]);
 
                     System.out.printf("Send TPS: %d Max RT: %d Average RT: %7.3f Send Failed: %d Response Failed: %d%n",
                         sendTps, statsBenchmark.getSendMessageMaxRT().get(), averageRT, end[2], end[4]);

File: example/src/main/java/org/apache/rocketmq/example/benchmark/TransactionProducer.java
Patch:
@@ -73,8 +73,8 @@ private void printStats() {
                     Long[] end = snapshotList.getLast();
 
                     final long sendTps =
-                        (long)(((end[3] - begin[3]) / (double)(end[0] - begin[0])) * 1000L);
-                    final double averageRT = (end[5] - begin[5]) / (double)(end[3] - begin[3]);
+                        (long) (((end[3] - begin[3]) / (double) (end[0] - begin[0])) * 1000L);
+                    final double averageRT = (end[5] - begin[5]) / (double) (end[3] - begin[3]);
 
                     System.out.printf(
                         "Send TPS: %d Max RT: %d Average RT: %7.3f Send Failed: %d Response Failed: %d transaction checkCount: %d %n",

File: example/src/main/java/org/apache/rocketmq/example/ordermessage/Producer.java
Patch:
@@ -44,7 +44,7 @@ public static void main(String[] args) throws UnsupportedEncodingException {
                 SendResult sendResult = producer.send(msg, new MessageQueueSelector() {
                     @Override
                     public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {
-                        Integer id = (Integer)arg;
+                        Integer id = (Integer) arg;
                         int index = id % mqs.size();
                         return mqs.get(index);
                     }

File: filtersrv/src/main/java/org/apache/rocketmq/filtersrv/FilterServerOuterAPI.java
Patch:
@@ -60,7 +60,7 @@ public RegisterFilterServerResponseHeader registerFilterServerToBroker(
         switch (response.getCode()) {
             case ResponseCode.SUCCESS: {
                 RegisterFilterServerResponseHeader responseHeader =
-                    (RegisterFilterServerResponseHeader)response
+                    (RegisterFilterServerResponseHeader) response
                         .decodeCommandCustomHeader(RegisterFilterServerResponseHeader.class);
 
                 return responseHeader;

File: filtersrv/src/main/java/org/apache/rocketmq/filtersrv/FiltersrvStartup.java
Patch:
@@ -120,7 +120,7 @@ public static FiltersrvController createController(String[] args) {
                 System.exit(-2);
             }
 
-            LoggerContext lc = (LoggerContext)LoggerFactory.getILoggerFactory();
+            LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();
             JoranConfigurator configurator = new JoranConfigurator();
             configurator.setContext(lc);
             lc.reset();

File: filtersrv/src/main/java/org/apache/rocketmq/filtersrv/filter/DynaCode.java
Patch:
@@ -95,7 +95,7 @@ private static String extractClasspath(ClassLoader cl) {
         StringBuffer buf = new StringBuffer();
         while (cl != null) {
             if (cl instanceof URLClassLoader) {
-                URL urls[] = ((URLClassLoader)cl).getURLs();
+                URL urls[] = ((URLClassLoader) cl).getURLs();
                 for (int i = 0; i < urls.length; i++) {
                     if (buf.length() > 0) {
                         buf.append(File.pathSeparatorChar);

File: filtersrv/src/main/java/org/apache/rocketmq/filtersrv/filter/FilterClassManager.java
Patch:
@@ -84,7 +84,7 @@ private void fetchClassFromRemoteHost() {
                     Class<?> newClass =
                         DynaCode.compileAndLoadClass(filterClassInfo.getClassName(), javaSource);
                     Object newInstance = newClass.newInstance();
-                    filterClassInfo.setMessageFilter((MessageFilter)newInstance);
+                    filterClassInfo.setMessageFilter((MessageFilter) newInstance);
                     filterClassInfo.setClassCRC(classCRC);
 
                     log.info("fetch Remote class File OK, {} {}", next.getKey(),
@@ -134,7 +134,7 @@ public boolean registerFilterClass(final String consumerGroup, final String topi
                         String javaSource = new String(filterSourceBinary, MixAll.DEFAULT_CHARSET);
                         Class<?> newClass = DynaCode.compileAndLoadClass(className, javaSource);
                         Object newInstance = newClass.newInstance();
-                        filterClassInfoNew.setMessageFilter((MessageFilter)newInstance);
+                        filterClassInfoNew.setMessageFilter((MessageFilter) newInstance);
                         filterClassInfoNew.setClassCRC(classCRC);
                     }
 

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/NamesrvStartup.java
Patch:
@@ -102,7 +102,7 @@ public static NamesrvController main0(String[] args) {
                 System.exit(-2);
             }
 
-            LoggerContext lc = (LoggerContext)LoggerFactory.getILoggerFactory();
+            LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();
             JoranConfigurator configurator = new JoranConfigurator();
             configurator.setContext(lc);
             lc.reset();

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/ClusterTestRequestProcessor.java
Patch:
@@ -53,7 +53,7 @@ public ClusterTestRequestProcessor(NamesrvController namesrvController, String p
     public RemotingCommand getRouteInfoByTopic(ChannelHandlerContext ctx, RemotingCommand request) throws RemotingCommandException {
         final RemotingCommand response = RemotingCommand.createResponseCommand(null);
         final GetRouteInfoRequestHeader requestHeader =
-            (GetRouteInfoRequestHeader)request.decodeCommandCustomHeader(GetRouteInfoRequestHeader.class);
+            (GetRouteInfoRequestHeader) request.decodeCommandCustomHeader(GetRouteInfoRequestHeader.class);
 
         TopicRouteData topicRouteData = this.namesrvController.getRouteInfoManager().pickupTopicRouteData(requestHeader.getTopic());
         if (topicRouteData != null) {

File: namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java
Patch:
@@ -385,7 +385,7 @@ public TopicRouteData pickupTopicRouteData(final String topic) {
                         if (null != brokerData) {
                             BrokerData brokerDataClone = new BrokerData();
                             brokerDataClone.setBrokerName(brokerData.getBrokerName());
-                            brokerDataClone.setBrokerAddrs((HashMap<Long, String>)brokerData
+                            brokerDataClone.setBrokerAddrs((HashMap<Long, String>) brokerData
                                 .getBrokerAddrs().clone());
                             brokerDataList.add(brokerDataClone);
                             foundBrokerData = true;

File: remoting/src/main/java/org/apache/rocketmq/remoting/common/RemotingHelper.java
Patch:
@@ -67,7 +67,7 @@ public static RemotingCommand invokeSync(final String addr, final RemotingComman
                 socketChannel.configureBlocking(true);
 
                 //bugfix  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4614802
-                socketChannel.socket().setSoTimeout((int)timeoutMillis);
+                socketChannel.socket().setSoTimeout((int) timeoutMillis);
 
                 ByteBuffer byteBufferRequest = request.encode();
                 while (byteBufferRequest.hasRemaining()) {
@@ -168,7 +168,7 @@ public static String parseChannelRemoteName(final Channel channel) {
         if (null == channel) {
             return "";
         }
-        final InetSocketAddress remote = (InetSocketAddress)channel.remoteAddress();
+        final InetSocketAddress remote = (InetSocketAddress) channel.remoteAddress();
         if (remote != null) {
             return remote.getAddress().getHostName();
         }
@@ -188,7 +188,7 @@ public static String parseSocketAddressAddr(SocketAddress socketAddress) {
 
     public static String parseSocketAddressName(SocketAddress socketAddress) {
 
-        final InetSocketAddress addrs = (InetSocketAddress)socketAddress;
+        final InetSocketAddress addrs = (InetSocketAddress) socketAddress;
         if (addrs != null) {
             return addrs.getAddress().getHostName();
         }

File: remoting/src/main/java/org/apache/rocketmq/remoting/common/RemotingUtil.java
Patch:
@@ -67,7 +67,7 @@ public static Selector openSelector() throws IOException {
                     try {
                         final Method method = providerClazz.getMethod("provider");
                         if (method != null) {
-                            final SelectorProvider selectorProvider = (SelectorProvider)method.invoke(null);
+                            final SelectorProvider selectorProvider = (SelectorProvider) method.invoke(null);
                             if (selectorProvider != null) {
                                 result = selectorProvider.openSelector();
                             }
@@ -155,7 +155,7 @@ public static SocketAddress string2SocketAddress(final String addr) {
 
     public static String socketAddress2String(final SocketAddress addr) {
         StringBuilder sb = new StringBuilder();
-        InetSocketAddress inetSocketAddress = (InetSocketAddress)addr;
+        InetSocketAddress inetSocketAddress = (InetSocketAddress) addr;
         sb.append(inetSocketAddress.getAddress().getHostAddress());
         sb.append(":");
         sb.append(inetSocketAddress.getPort());

File: remoting/src/main/java/org/apache/rocketmq/remoting/common/ServiceThread.java
Patch:
@@ -21,8 +21,6 @@
 
 /**
  * Base class for background thread
- *
- *
  */
 public abstract class ServiceThread implements Runnable {
     private static final Logger STLOG = LoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyDecoder.java
Patch:
@@ -42,7 +42,7 @@ public NettyDecoder() {
     public Object decode(ChannelHandlerContext ctx, ByteBuf in) throws Exception {
         ByteBuf frame = null;
         try {
-            frame = (ByteBuf)super.decode(ctx, in);
+            frame = (ByteBuf) super.decode(ctx, in);
             if (null == frame) {
                 return null;
             }

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -637,7 +637,7 @@ public void close(ChannelHandlerContext ctx, ChannelPromise promise) throws Exce
         @Override
         public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {
             if (evt instanceof IdleStateEvent) {
-                IdleStateEvent evnet = (IdleStateEvent)evt;
+                IdleStateEvent evnet = (IdleStateEvent) evt;
                 if (evnet.state().equals(IdleState.ALL_IDLE)) {
                     final String remoteAddress = RemotingHelper.parseChannelRemoteAddr(ctx.channel());
                     log.warn("NETTY CLIENT PIPELINE: IDLE exception [{}]", remoteAddress);

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingServer.java
Patch:
@@ -171,7 +171,7 @@ public void initChannel(SocketChannel ch) throws Exception {
 
         try {
             ChannelFuture sync = this.serverBootstrap.bind().sync();
-            InetSocketAddress addr = (InetSocketAddress)sync.channel().localAddress();
+            InetSocketAddress addr = (InetSocketAddress) sync.channel().localAddress();
             this.port = addr.getPort();
         } catch (InterruptedException e1) {
             throw new RuntimeException("this.serverBootstrap.bind().sync() InterruptedException", e1);
@@ -337,7 +337,7 @@ public void channelInactive(ChannelHandlerContext ctx) throws Exception {
         @Override
         public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {
             if (evt instanceof IdleStateEvent) {
-                IdleStateEvent evnet = (IdleStateEvent)evt;
+                IdleStateEvent evnet = (IdleStateEvent) evt;
                 if (evnet.state().equals(IdleState.ALL_IDLE)) {
                     final String remoteAddress = RemotingHelper.parseChannelRemoteAddr(ctx.channel());
                     log.warn("NETTY SERVER PIPELINE: IDLE exception [{}]", remoteAddress);

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRequestProcessor.java
Patch:
@@ -21,8 +21,6 @@
 
 /**
  * Common remoting command processor
- *
- *
  */
 public interface NettyRequestProcessor {
     RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand request)

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyServerConfig.java
Patch:
@@ -133,6 +133,6 @@ public void setUseEpollNativeSelector(boolean useEpollNativeSelector) {
 
     @Override
     public Object clone() throws CloneNotSupportedException {
-        return (NettyServerConfig)super.clone();
+        return (NettyServerConfig) super.clone();
     }
 }

File: remoting/src/main/java/org/apache/rocketmq/remoting/netty/RequestTask.java
Patch:
@@ -36,7 +36,7 @@ public RequestTask(final Runnable runnable, final Channel channel, final Remotin
     @Override
     public int hashCode() {
         int result = runnable != null ? runnable.hashCode() : 0;
-        result = 31 * result + (int)(getCreateTimestamp() ^ (getCreateTimestamp() >>> 32));
+        result = 31 * result + (int) (getCreateTimestamp() ^ (getCreateTimestamp() >>> 32));
         result = 31 * result + (channel != null ? channel.hashCode() : 0);
         result = 31 * result + (request != null ? request.hashCode() : 0);
         result = 31 * result + (isStopRun() ? 1 : 0);
@@ -50,7 +50,7 @@ public boolean equals(final Object o) {
         if (!(o instanceof RequestTask))
             return false;
 
-        final RequestTask that = (RequestTask)o;
+        final RequestTask that = (RequestTask) o;
 
         if (getCreateTimestamp() != that.getCreateTimestamp())
             return false;

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RocketMQSerializable.java
Patch:
@@ -51,11 +51,11 @@ public static byte[] rocketMQProtocolEncode(RemotingCommand cmd) {
         // ################### content
         ByteBuffer headerBuffer = ByteBuffer.allocate(totalLen);
         // int code(~32767)
-        headerBuffer.putShort((short)cmd.getCode());
+        headerBuffer.putShort((short) cmd.getCode());
         // LanguageCode language
         headerBuffer.put(cmd.getLanguage().getCode());
         // int version(~32767)
-        headerBuffer.putShort((short)cmd.getVersion());
+        headerBuffer.putShort((short) cmd.getVersion());
         // int opaque
         headerBuffer.putInt(cmd.getOpaque());
         // int flag
@@ -109,7 +109,7 @@ public static byte[] mapSerialize(HashMap<String, String> map) {
                 key = entry.getKey().getBytes(RemotingSerializable.CHARSET_UTF8);
                 val = entry.getValue().getBytes(RemotingSerializable.CHARSET_UTF8);
 
-                content.putShort((short)key.length);
+                content.putShort((short) key.length);
                 content.put(key);
 
                 content.putInt(val.length);

File: remoting/src/main/java/org/apache/rocketmq/remoting/protocol/SerializeType.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.rocketmq.remoting.protocol;
 
 public enum SerializeType {
-    JSON((byte)0),
-    ROCKETMQ((byte)1);
+    JSON((byte) 0),
+    ROCKETMQ((byte) 1);
 
     private byte code;
 

File: remoting/src/test/java/org/apache/rocketmq/remoting/MixTest.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: MixTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
+ *
+ * $Id: MixTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
  */
 
 /**

File: store/src/main/java/org/apache/rocketmq/store/AllocateMappedFileService.java
Patch:
@@ -306,7 +306,7 @@ public boolean equals(Object obj) {
                 return false;
             if (getClass() != obj.getClass())
                 return false;
-            AllocateRequest other = (AllocateRequest)obj;
+            AllocateRequest other = (AllocateRequest) obj;
             if (filePath == null) {
                 if (other.filePath != null)
                     return false;

File: store/src/main/java/org/apache/rocketmq/store/AppendMessageCallback.java
Patch:
@@ -20,8 +20,6 @@
 
 /**
  * Write messages callback interface
- *
- *
  */
 public interface AppendMessageCallback {
 
@@ -31,7 +29,6 @@ public interface AppendMessageCallback {
      * @param byteBuffer
      * @param maxBlank
      * @param msg
-     *
      * @return How many bytes to write
      */
     AppendMessageResult doAppend(final long fileFromOffset, final ByteBuffer byteBuffer,

File: store/src/main/java/org/apache/rocketmq/store/AppendMessageResult.java
Patch:
@@ -18,7 +18,6 @@
 
 /**
  * When write a message to the commit log, returns results
- *
  */
 public class AppendMessageResult {
     // Return code

File: store/src/main/java/org/apache/rocketmq/store/AppendMessageStatus.java
Patch:
@@ -18,8 +18,6 @@
 
 /**
  * When write a message to the commit log, returns code
- *
- *
  */
 public enum AppendMessageStatus {
     PUT_OK,

File: store/src/main/java/org/apache/rocketmq/store/ConsumeQueue.java
Patch:
@@ -131,7 +131,7 @@ public long getOffsetInQueueByTime(final long timestamp) {
         if (mappedFile != null) {
             long offset = 0;
             int low =
-                minLogicOffset > mappedFile.getFileFromOffset() ? (int)(minLogicOffset - mappedFile
+                minLogicOffset > mappedFile.getFileFromOffset() ? (int) (minLogicOffset - mappedFile
                     .getFileFromOffset()) : 0;
             int high = 0;
             int midOffset = -1, targetOffset = -1, leftOffset = -1, rightOffset = -1;
@@ -407,7 +407,7 @@ private void fillPreBlank(final MappedFile mappedFile, final long untilWhere) {
         byteBuffer.putInt(Integer.MAX_VALUE);
         byteBuffer.putLong(0L);
 
-        int until = (int)(untilWhere % this.mappedFileQueue.getMappedFileSize());
+        int until = (int) (untilWhere % this.mappedFileQueue.getMappedFileSize());
         for (int i = 0; i < until; i += CQ_STORE_UNIT_SIZE) {
             mappedFile.appendMessage(byteBuffer.array());
         }
@@ -419,7 +419,7 @@ public SelectMappedBufferResult getIndexBuffer(final long startIndex) {
         if (offset >= this.getMinLogicOffset()) {
             MappedFile mappedFile = this.mappedFileQueue.findMappedFileByOffset(offset);
             if (mappedFile != null) {
-                SelectMappedBufferResult result = mappedFile.selectMappedBuffer((int)(offset % mappedFileSize));
+                SelectMappedBufferResult result = mappedFile.selectMappedBuffer((int) (offset % mappedFileSize));
                 return result;
             }
         }

File: store/src/main/java/org/apache/rocketmq/store/GetMessageResult.java
Patch:
@@ -86,7 +86,7 @@ public void addMessage(final SelectMappedBufferResult mapedBuffer) {
         this.messageMapedList.add(mapedBuffer);
         this.messageBufferList.add(mapedBuffer.getByteBuffer());
         this.bufferTotalSize += mapedBuffer.getSize();
-        this.msgCount4Commercial += (int)Math.ceil(
+        this.msgCount4Commercial += (int) Math.ceil(
             mapedBuffer.getSize() / BrokerStatsManager.SIZE_PER_COUNT);
     }
 

File: store/src/main/java/org/apache/rocketmq/store/StoreUtil.java
Patch:
@@ -30,7 +30,7 @@ public static long getTotalPhysicalMemorySize() {
         long physicalTotal = 1024 * 1024 * 1024 * 24;
         OperatingSystemMXBean osmxb = ManagementFactory.getOperatingSystemMXBean();
         if (osmxb instanceof com.sun.management.OperatingSystemMXBean) {
-            physicalTotal = ((com.sun.management.OperatingSystemMXBean)osmxb).getTotalPhysicalMemorySize();
+            physicalTotal = ((com.sun.management.OperatingSystemMXBean) osmxb).getTotalPhysicalMemorySize();
         }
 
         return physicalTotal;

File: store/src/main/java/org/apache/rocketmq/store/TransientStorePool.java
Patch:
@@ -50,7 +50,7 @@ public void init() {
         for (int i = 0; i < poolSize; i++) {
             ByteBuffer byteBuffer = ByteBuffer.allocateDirect(fileSize);
 
-            final long address = ((DirectBuffer)byteBuffer).address();
+            final long address = ((DirectBuffer) byteBuffer).address();
             Pointer pointer = new Pointer(address);
             LibC.INSTANCE.mlock(pointer, new NativeLong(fileSize));
 
@@ -60,7 +60,7 @@ public void init() {
 
     public void destroy() {
         for (ByteBuffer byteBuffer : availableBuffers) {
-            final long address = ((DirectBuffer)byteBuffer).address();
+            final long address = ((DirectBuffer) byteBuffer).address();
             Pointer pointer = new Pointer(address);
             LibC.INSTANCE.munlock(pointer, new NativeLong(fileSize));
         }

File: store/src/main/java/org/apache/rocketmq/store/ha/HAService.java
Patch:
@@ -207,7 +207,7 @@ public void run() {
                     if (selected != null) {
                         for (SelectionKey k : selected) {
                             if ((k.readyOps() & SelectionKey.OP_ACCEPT) != 0) {
-                                SocketChannel sc = ((ServerSocketChannel)k.channel()).accept();
+                                SocketChannel sc = ((ServerSocketChannel) k.channel()).accept();
 
                                 if (sc != null) {
                                     HAService.log.info("HAService receive new connection, "

File: store/src/main/java/org/apache/rocketmq/store/index/IndexService.java
Patch:
@@ -106,7 +106,7 @@ public void deleteExpiredFile(long offset) {
         if (files != null) {
             List<IndexFile> fileList = new ArrayList<IndexFile>();
             for (int i = 0; i < (files.length - 1); i++) {
-                IndexFile f = (IndexFile)files[i];
+                IndexFile f = (IndexFile) files[i];
                 if (f.getEndPhyOffset() < offset) {
                     fileList.add(f);
                 } else {

File: store/src/main/java/org/apache/rocketmq/store/schedule/ScheduleMessageService.java
Patch:
@@ -224,8 +224,6 @@ public void run() {
         }
 
         /**
-
-         *
          * @return
          */
         private long correctDeliverTimestamp(final long now, final long deliverTimestamp) {

File: store/src/main/java/org/apache/rocketmq/store/util/LibC.java
Patch:
@@ -23,7 +23,7 @@
 import com.sun.jna.Pointer;
 
 public interface LibC extends Library {
-    LibC INSTANCE = (LibC)Native.loadLibrary(Platform.isWindows() ? "msvcrt" : "c", LibC.class);
+    LibC INSTANCE = (LibC) Native.loadLibrary(Platform.isWindows() ? "msvcrt" : "c", LibC.class);
 
     int MADV_WILLNEED = 3;
     int MADV_DONTNEED = 4;

File: store/src/test/java/org/apache/rocketmq/store/MappedFileQueueTest.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: MappedFileQueueTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
+ *
+ * $Id: MappedFileQueueTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
  */
 
 /**

File: store/src/test/java/org/apache/rocketmq/store/MappedFileTest.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: MappedFileTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
+ *
+ * $Id: MappedFileTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
  */
 
 /**

File: store/src/test/java/org/apache/rocketmq/store/StoreCheckpointTest.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: StoreCheckpointTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
+ *
+ * $Id: StoreCheckpointTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
  */
 
 /**

File: store/src/test/java/org/apache/rocketmq/store/index/IndexFileTest.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: IndexFileTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
+ *
+ * $Id: IndexFileTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
  */
 
 /**

File: store/src/test/java/org/apache/rocketmq/store/schedule/ScheduleMessageTest.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  *
  * $Id: ScheduleMessageTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
+ *
+ * $Id: ScheduleMessageTest.java 1831 2013-05-16 01:39:51Z vintagewang@apache.org $
  */
 
 /**

File: tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -708,7 +708,7 @@ public ConsumeMessageDirectlyResult consumeMessageDirectly(final String consumer
             return this.mqClientInstance.getMQClientAPIImpl().consumeMessageDirectly(RemotingUtil.socketAddress2String(msg.getStoreHost()),
                 consumerGroup, clientId, msgId, timeoutMillis * 3);
         } else {
-            MessageClientExt msgClient = (MessageClientExt)msg;
+            MessageClientExt msgClient = (MessageClientExt) msg;
             return this.mqClientInstance.getMQClientAPIImpl().consumeMessageDirectly(RemotingUtil.socketAddress2String(msg.getStoreHost()),
                 consumerGroup, clientId, msgClient.getOffsetMsgId(), timeoutMillis * 3);
         }

File: tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -194,7 +194,7 @@ public static void initCommand() {
     private static void initLogback() throws JoranException {
         String rocketmqHome = System.getProperty(MixAll.ROCKETMQ_HOME_PROPERTY, System.getenv(MixAll.ROCKETMQ_HOME_ENV));
 
-        LoggerContext lc = (LoggerContext)LoggerFactory.getILoggerFactory();
+        LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();
         JoranConfigurator configurator = new JoranConfigurator();
         configurator.setContext(lc);
         lc.reset();

File: tools/src/main/java/org/apache/rocketmq/tools/command/cluster/CLusterSendMsgRTCommand.java
Patch:
@@ -161,7 +161,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
                             }
                         }
 
-                        double rt = (double)elapsed / (amount - 1);
+                        double rt = (double) elapsed / (amount - 1);
                         if (!printAsTlog) {
                             System.out.printf("%-24s  %-24s  %-8s  %-16s  %-16s%n",
                                 clusterName,

File: tools/src/main/java/org/apache/rocketmq/tools/command/consumer/ConsumerProgressSubCommand.java
Patch:
@@ -141,7 +141,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
                             groupConsumeInfo.setGroup(consumerGroup);
 
                             if (consumeStats != null) {
-                                groupConsumeInfo.setConsumeTps((int)consumeStats.getConsumeTps());
+                                groupConsumeInfo.setConsumeTps((int) consumeStats.getConsumeTps());
                                 groupConsumeInfo.setDiffTotal(consumeStats.computeTotalDiff());
                             }
 
@@ -251,7 +251,7 @@ public int compareTo(GroupConsumeInfo o) {
             return o.count - this.count;
         }
 
-        return (int)(o.diffTotal - diffTotal);
+        return (int) (o.diffTotal - diffTotal);
     }
 
     public int getConsumeTps() {

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/CheckMsgSendRTCommand.java
Patch:
@@ -88,7 +88,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
                     producer.send(msg, new MessageQueueSelector() {
                         @Override
                         public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {
-                            int queueIndex = (Integer)arg % mqs.size();
+                            int queueIndex = (Integer) arg % mqs.size();
                             MessageQueue queue = mqs.get(queueIndex);
                             brokerName = queue.getBrokerName();
                             queueId = queue.getQueueId();
@@ -114,7 +114,7 @@ public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {
                 );
             }
 
-            double rt = (double)timeElapsed / (amount - 1);
+            double rt = (double) timeElapsed / (amount - 1);
             System.out.printf("Avg RT: %s%n", String.format("%.2f", rt));
         } catch (Exception e) {
             e.printStackTrace();

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/PrintMessageByQueueCommand.java
Patch:
@@ -246,7 +246,7 @@ public void setCount(final AtomicLong count) {
 
         @Override
         public int compareTo(final TagCountBean o) {
-            return (int)(o.getCount().get() - this.count.get());
+            return (int) (o.getCount().get() - this.count.get());
         }
     }
 }

File: tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByIdSubCommand.java
Patch:
@@ -57,7 +57,7 @@ public static void printMsg(final DefaultMQAdminExt admin, final MessageExt msg)
         String bodyTmpFilePath = createBodyFile(msg);
         String msgId = msg.getMsgId();
         if (msg instanceof MessageClientExt) {
-            msgId = ((MessageClientExt)msg).getOffsetMsgId();
+            msgId = ((MessageClientExt) msg).getOffsetMsgId();
         }
 
         System.out.printf("%-20s %s%n",

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/AllocateMappedFileService.java
Patch:
@@ -213,7 +213,7 @@ private boolean mmapOperation() {
                 isSuccess = true;
             }
         } catch (InterruptedException e) {
-            log.warn(this.getServiceName() + " service has exception, maybe by shutdown");
+            log.warn(this.getServiceName() + " interrupted, possibly by shutdown.");
             this.hasException = true;
             return false;
         } catch (IOException e) {

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/index/IndexFile.java
Patch:
@@ -94,7 +94,6 @@ public boolean isWriteFull() {
         return this.indexHeader.getIndexCount() >= this.indexNum;
     }
 
-
     public boolean destroy(final long intervalForcibly) {
         return this.mappedFile.destroy(intervalForcibly);
     }
@@ -167,8 +166,8 @@ public boolean putKey(final String key, final long phyOffset, final long storeTi
                 }
             }
         } else {
-            log.warn("putKey index count " + this.indexHeader.getIndexCount() + " index max num "
-                    + this.indexNum);
+            log.warn("Over index file capacity: index count = " + this.indexHeader.getIndexCount()
+                + "; index max num = " + this.indexNum);
         }
 
         return false;

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/CommitLog.java
Patch:
@@ -1143,7 +1143,7 @@ public AppendMessageResult doAppend(final long fileFromOffset, final ByteBuffer
             final byte[] propertiesData =
                     msgInner.getPropertiesString() == null ? null : msgInner.getPropertiesString().getBytes(MessageDecoder.CHARSET_UTF8);
 
-            final short propertiesLength = propertiesData == null ? 0 : (short) propertiesData.length;
+            final int propertiesLength = propertiesData == null ? 0 : propertiesData.length;
 
             if (propertiesLength > Short.MAX_VALUE) {
                 log.warn("putMessage message properties length too long. length={}", propertiesData.length);
@@ -1222,7 +1222,7 @@ public AppendMessageResult doAppend(final long fileFromOffset, final ByteBuffer
             this.msgStoreItemMemory.put((byte) topicLength);
             this.msgStoreItemMemory.put(topicData);
             // 17 PROPERTIES
-            this.msgStoreItemMemory.putShort(propertiesLength);
+            this.msgStoreItemMemory.putShort((short) propertiesLength);
             if (propertiesLength > 0)
                 this.msgStoreItemMemory.put(propertiesData);
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/CommitLog.java
Patch:
@@ -1143,7 +1143,7 @@ public AppendMessageResult doAppend(final long fileFromOffset, final ByteBuffer
             final byte[] propertiesData =
                     msgInner.getPropertiesString() == null ? null : msgInner.getPropertiesString().getBytes(MessageDecoder.CHARSET_UTF8);
 
-            final short propertiesLength = propertiesData == null ? 0 : (short) propertiesData.length;
+            final int propertiesLength = propertiesData == null ? 0 : propertiesData.length;
 
             if (propertiesLength > Short.MAX_VALUE) {
                 log.warn("putMessage message properties length too long. length={}", propertiesData.length);
@@ -1222,7 +1222,7 @@ public AppendMessageResult doAppend(final long fileFromOffset, final ByteBuffer
             this.msgStoreItemMemory.put((byte) topicLength);
             this.msgStoreItemMemory.put(topicData);
             // 17 PROPERTIES
-            this.msgStoreItemMemory.putShort(propertiesLength);
+            this.msgStoreItemMemory.putShort((short) propertiesLength);
             if (propertiesLength > 0)
                 this.msgStoreItemMemory.put(propertiesData);
 

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MQVersion.java
Patch:
@@ -21,7 +21,7 @@
  */
 public class MQVersion {
 
-    public static final int CurrentVersion = Version.V3_6_2.ordinal();
+    public static final int CurrentVersion = Version.V3_6_3_SNAPSHOT.ordinal();
 
 
     public static String getVersionDesc(int value) {

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MQVersion.java
Patch:
@@ -21,7 +21,7 @@
  */
 public class MQVersion {
 
-    public static final int CurrentVersion = Version.V3_6_2_SNAPSHOT.ordinal();
+    public static final int CurrentVersion = Version.V3_6_2.ordinal();
 
 
     public static String getVersionDesc(int value) {

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/RebalanceImpl.java
Patch:
@@ -219,7 +219,7 @@ public void doRebalance(final boolean isOrder) {
                 final String topic = entry.getKey();
                 try {
                     this.rebalanceByTopic(topic, isOrder);
-                } catch (Exception e) {
+                } catch (Throwable e) {
                     if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
                         log.warn("rebalanceByTopic Exception", e);
                     }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -889,7 +889,7 @@ public void doRebalance() {
             if (impl != null) {
                 try {
                     impl.doRebalance();
-                } catch (Exception e) {
+                } catch (Throwable e) {
                     log.error("doRebalance exception", e);
                 }
             }

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerController.java
Patch:
@@ -214,7 +214,7 @@ public boolean initialize() throws CloneNotSupportedException {
                     Executors.newFixedThreadPool(this.brokerConfig.getAdminBrokerThreadPoolNums(), new ThreadFactoryImpl(
                             "AdminBrokerThread_"));
 
-            this.clientManageExecutor = new BrokerFixedThreadPoolExecutor(//
+            this.clientManageExecutor = new ThreadPoolExecutor(//
                     this.brokerConfig.getClientManageThreadPoolNums(),//
                     this.brokerConfig.getClientManageThreadPoolNums(),//
                     1000 * 60,//

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/producer/SendResult.java
Patch:
@@ -128,7 +128,7 @@ public void setOffsetMsgId(String offsetMsgId) {
 
     @Override
     public String toString() {
-        return "SendResult [sendStatus=" + sendStatus + ", msgId=" + msgId + ",offsetMsgId=" + offsetMsgId + ", messageQueue=" + messageQueue
+        return "SendResult [sendStatus=" + sendStatus + ", msgId=" + msgId + ", offsetMsgId=" + offsetMsgId + ", messageQueue=" + messageQueue
                 + ", queueOffset=" + queueOffset + "]";
     }
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java
Patch:
@@ -396,9 +396,8 @@ public void run() {
             ConsumeMessageContext consumeMessageContext = null;
             if (ConsumeMessageConcurrentlyService.this.defaultMQPushConsumerImpl.hasHook()) {
                 consumeMessageContext = new ConsumeMessageContext();
+                consumeMessageContext.setConsumerGroup(defaultMQPushConsumer.getConsumerGroup());
                 consumeMessageContext.setProps(new HashMap<String, String>());
-                // init the consume context type
-                consumeMessageContext.getProps().put(MixAll.CONSUME_CONTEXT_TYPE, ConsumeReturnType.SUCCESS.name());
                 consumeMessageContext.setMq(messageQueue);
                 consumeMessageContext.setMsgList(msgs);
                 consumeMessageContext.setSuccess(false);

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/AbstractSendMessageProcessor.java
Patch:
@@ -91,6 +91,7 @@ protected SendMessageContext buildMsgContext(ChannelHandlerContext ctx,
         Map<String, String> properties = MessageDecoder.string2messageProperties(requestHeader.getProperties());
         String uniqueKey = properties.get(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX);
         properties.put(MessageConst.PROPERTY_MSG_REGION, this.brokerController.getBrokerConfig().getRegionId());
+        properties.put(MessageConst.PROPERTY_TRACE_SWITCH, String.valueOf(this.brokerController.getBrokerConfig().isTraceOn()));
         requestHeader.setProperties(MessageDecoder.messageProperties2String(properties));
 
 

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -264,6 +264,7 @@ private RemotingCommand sendMessage(final ChannelHandlerContext ctx, //
         response.setOpaque(request.getOpaque());
 
         response.addExtField(MessageConst.PROPERTY_MSG_REGION,this.brokerController.getBrokerConfig().getRegionId());
+        response.addExtField(MessageConst.PROPERTY_TRACE_SWITCH, String.valueOf(this.brokerController.getBrokerConfig().isTraceOn()));
 
         if (log.isDebugEnabled()) {
             log.debug("receive SendMessage request command, " + request);

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MixAll.java
Patch:
@@ -75,6 +75,7 @@ public class MixAll {
     public static final String SYSTEM_TOPIC_PREFIX = "rmq_sys_";
     public static final String UNIQUE_MSG_QUERY_FLAG = "_UNIQUE_KEY_QUERY";
     public static final String DEFAULT_TRACE_REGION_ID="DefaultRegion";
+    public static final String CONSUME_CONTEXT_TYPE="ConsumeContextType";
 
     public static String getRetryTopic(final String consumerGroup) {
         return RETRY_GROUP_TOPIC_PREFIX + consumerGroup;

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/message/MessageConst.java
Patch:
@@ -38,6 +38,7 @@ public class MessageConst {
     public static final String PROPERTY_MQ2_FLAG = "MQ2_FLAG";
     public static final String PROPERTY_RECONSUME_TIME = "RECONSUME_TIME";
     public static final String PROPERTY_MSG_REGION = "MSG_REGION";
+    public static final String PROPERTY_TRACE_SWITCH="TRACE_ON";
     public static final String PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX = "UNIQ_KEY";
     public static final String PROPERTY_MAX_RECONSUME_TIMES = "MAX_RECONSUME_TIMES";
     public static final String PROPERTY_CONSUME_START_TIMESTAMP = "CONSUME_START_TIME";
@@ -48,6 +49,7 @@ public class MessageConst {
 
 
     static {
+        systemKeySet.add(PROPERTY_TRACE_SWITCH);
         systemKeySet.add(PROPERTY_MSG_REGION);
         systemKeySet.add(PROPERTY_KEYS);
         systemKeySet.add(PROPERTY_TAGS);

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerStartup.java
Patch:
@@ -222,6 +222,9 @@ public static BrokerController createBrokerController(String[] args) {
                     nettyServerConfig, //
                     nettyClientConfig, //
                     messageStoreConfig);
+            // remember all configs to prevent discard
+            controller.getConfiguration().registerConfig(properties);
+
             boolean initResult = controller.initialize();
             if (!initResult) {
                 controller.shutdown();

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -287,7 +287,7 @@ private RemotingCommand updateBrokerConfig(ChannelHandlerContext ctx, RemotingCo
                 Properties properties = MixAll.string2Properties(bodyStr);
                 if (properties != null) {
                     log.info("updateBrokerConfig, new config: " + properties + " client: " + ctx.channel().remoteAddress());
-                    this.brokerController.updateAllConfig(properties);
+                    this.brokerController.getConfiguration().update(properties);
                     if (properties.containsKey("brokerPermission")) {
                         this.brokerController.registerBrokerAll(false, false);
                         this.brokerController.getTopicConfigManager().getDataVersion().nextVersion();
@@ -316,7 +316,7 @@ private RemotingCommand getBrokerConfig(ChannelHandlerContext ctx, RemotingComma
         final RemotingCommand response = RemotingCommand.createResponseCommand(GetBrokerConfigResponseHeader.class);
         final GetBrokerConfigResponseHeader responseHeader = (GetBrokerConfigResponseHeader) response.readCustomHeader();
 
-        String content = this.brokerController.encodeAllConfig();
+        String content = this.brokerController.getConfiguration().getAllConfigsFormatString();
         if (content != null && content.length() > 0) {
             try {
                 response.setBody(content.getBytes(MixAll.DEFAULT_CHARSET));
@@ -329,7 +329,7 @@ private RemotingCommand getBrokerConfig(ChannelHandlerContext ctx, RemotingComma
             }
         }
 
-        responseHeader.setVersion(this.brokerController.getConfigDataVersion());
+        responseHeader.setVersion(this.brokerController.getConfiguration().getDataVersionJson());
 
         response.setCode(ResponseCode.SUCCESS);
         response.setRemark(null);

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MixAll.java
Patch:
@@ -380,8 +380,6 @@ public static void properties2Object(final Properties p, final Object object) {
                                 arg = Float.parseFloat(property);
                             }else if (cn.equals("String")) {
                                 arg = property;
-                            } else if (cn.equals("AtomicLong")) {
-                                arg = new AtomicLong(Long.parseLong(property));
                             } else {
                                 continue;
                             }

File: rocketmq-namesrv/src/main/java/com/alibaba/rocketmq/namesrv/processor/DefaultRequestProcessor.java
Patch:
@@ -461,7 +461,7 @@ private RemotingCommand updateConfig(ChannelHandlerContext ctx, RemotingCommand
                 return response;
             }
 
-            this.namesrvController.getNamesrvConfigManager().update(properties);
+            this.namesrvController.getConfiguration().update(properties);
         }
 
         response.setCode(ResponseCode.SUCCESS);
@@ -472,7 +472,7 @@ private RemotingCommand updateConfig(ChannelHandlerContext ctx, RemotingCommand
     private RemotingCommand getConfig(ChannelHandlerContext ctx, RemotingCommand request) {
         final RemotingCommand response = RemotingCommand.createResponseCommand(null);
 
-        String content = this.namesrvController.getNamesrvConfigManager().getConfigs();
+        String content = this.namesrvController.getConfiguration().getAllConfigsFormatString();
         if (content != null && content.length() > 0) {
             try {
                 response.setBody(content.getBytes(MixAll.DEFAULT_CHARSET));

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -170,6 +170,7 @@ public static void initCommand() {
 
         initCommand(new GetNamesrvConfigCommand());
         initCommand(new UpdateNamesrvConfigCommand());
+        initCommand(new GetBrokerConfigCommand());
     }
 
     private static void initLogback() throws JoranException {

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/namesrv/GetNamesrvConfigCommand.java
Patch:
@@ -72,7 +72,7 @@ public void execute(final CommandLine commandLine, final Options options, final
                 System.out.printf("============%s============\n",
                         server);
                 for (Object key : nameServerConfigs.get(server).keySet()) {
-                    System.out.printf("%s=%s\n", key, nameServerConfigs.get(server).get(key));
+                    System.out.printf("%-50s=  %s\n", key, nameServerConfigs.get(server).get(key));
                 }
             }
             return;

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerController.java
Patch:
@@ -195,8 +195,8 @@ public boolean initialize() throws CloneNotSupportedException {
             fastConfig.setListenPort(nettyServerConfig.getListenPort() - 2);
             this.fastRemotingServer = new NettyRemotingServer(fastConfig, this.clientHousekeepingService);
             this.sendMessageExecutor = new BrokerFixedThreadPoolExecutor(//
-                    1,//
-                    1,//
+                    this.brokerConfig.getSendMessageThreadPoolNums(),//
+                    this.brokerConfig.getSendMessageThreadPoolNums(),//
                     1000 * 60,//
                     TimeUnit.MILLISECONDS,//
                     this.sendThreadPoolQueue,//

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/message/QueryMsgByOffsetSubCommand.java
Patch:
@@ -19,6 +19,8 @@
 import com.alibaba.rocketmq.client.consumer.DefaultMQPullConsumer;
 import com.alibaba.rocketmq.client.consumer.PullResult;
 import com.alibaba.rocketmq.common.MixAll;
+import com.alibaba.rocketmq.common.message.MessageClientExt;
+import com.alibaba.rocketmq.common.message.MessageExt;
 import com.alibaba.rocketmq.common.message.MessageQueue;
 import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
@@ -95,8 +97,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
             if (pullResult != null) {
                 switch (pullResult.getPullStatus()) {
                     case FOUND:
-                        QueryMsgByIdSubCommand.queryById(defaultMQAdminExt, pullResult.getMsgFoundList().get(0)
-                                .getMsgId());
+                        QueryMsgByIdSubCommand.printMsg(defaultMQAdminExt, pullResult.getMsgFoundList().get(0));
                         break;
                     case NO_MATCHED_MSG:
                     case NO_NEW_MSG:

File: rocketmq-namesrv/src/main/java/com/alibaba/rocketmq/namesrv/kvconfig/NamesrvConfigManager.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 
 /**
- * Created by xigu.lx on 2016/11/14.
+ * @author xigu.lx
  *
  * manager of name server's config
  */

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/namesrv/GetNamesrvConfigCommand.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Properties;
 
 /**
- * Created by xigu.lx on 2016/11/14.
+ * @author xigu.lx
  */
 public class GetNamesrvConfigCommand implements SubCommand {
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/namesrv/UpdateNamesrvConfigCommand.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Properties;
 
 /**
- * Created by xigu.lx on 2016/11/14.
+ * @author xigu.lx
  */
 public class UpdateNamesrvConfigCommand implements SubCommand {
     @Override

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MixAll.java
Patch:
@@ -378,6 +378,8 @@ public static void properties2Object(final Properties p, final Object object) {
                                 arg = Boolean.parseBoolean(property);
                             } else if (cn.equals("String")) {
                                 arg = property;
+                            } else if (cn.equals("AtomicLong")) {
+                                arg = new AtomicLong(Long.parseLong(property));
                             } else {
                                 continue;
                             }

File: rocketmq-namesrv/src/main/java/com/alibaba/rocketmq/namesrv/NamesrvStartup.java
Patch:
@@ -88,6 +88,9 @@ public static NamesrvController main0(String[] args) {
                     properties.load(in);
                     MixAll.properties2Object(properties, namesrvConfig);
                     MixAll.properties2Object(properties, nettyServerConfig);
+
+                    namesrvConfig.setConfigStorePath(file);
+
                     System.out.println("load config properties file OK, " + file);
                     in.close();
                 }

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -31,9 +31,7 @@
 import com.alibaba.rocketmq.tools.command.connection.ProducerConnectionSubCommand;
 import com.alibaba.rocketmq.tools.command.consumer.*;
 import com.alibaba.rocketmq.tools.command.message.*;
-import com.alibaba.rocketmq.tools.command.namesrv.DeleteKvConfigCommand;
-import com.alibaba.rocketmq.tools.command.namesrv.UpdateKvConfigCommand;
-import com.alibaba.rocketmq.tools.command.namesrv.WipeWritePermSubCommand;
+import com.alibaba.rocketmq.tools.command.namesrv.*;
 import com.alibaba.rocketmq.tools.command.offset.CloneGroupOffsetCommand;
 import com.alibaba.rocketmq.tools.command.offset.ResetOffsetByTimeCommand;
 import com.alibaba.rocketmq.tools.command.stats.StatsAllSubCommand;
@@ -170,6 +168,8 @@ public static void initCommand() {
         initCommand(new CheckMsgSendRTCommand());
         initCommand(new CLusterSendMsgRTCommand());
 
+        initCommand(new GetNamesrvConfigCommand());
+        initCommand(new UpdateNamesrvConfigCommand());
     }
 
     private static void initLogback() throws JoranException {

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/store/RemoteBrokerOffsetStore.java
Patch:
@@ -174,7 +174,7 @@ public void persist(MessageQueue mq) {
     public void removeOffset(MessageQueue mq) {
         if (mq != null) {
             this.offsetTable.remove(mq);
-            log.info("remove unnecessary messageQueue offset. mq={}, offsetTableSize={}", mq,
+            log.info("remove unnecessary messageQueue offset. group={}, mq={}, offsetTableSize={}", this.groupName, mq,
                     offsetTable.size());
         }
     }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java
Patch:
@@ -384,7 +384,7 @@ public ProcessQueue getProcessQueue() {
         @Override
         public void run() {
             if (this.processQueue.isDropped()) {
-                log.info("the message queue not be able to consume, because it's dropped {}", this.messageQueue);
+                log.info("the message queue not be able to consume, because it's dropped. group={} {}", ConsumeMessageConcurrentlyService.this.consumerGroup, this.messageQueue);
                 return;
             }
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -192,7 +192,7 @@ public void setOffsetStore(OffsetStore offsetStore) {
     public void pullMessage(final PullRequest pullRequest) {
         final ProcessQueue processQueue = pullRequest.getProcessQueue();
         if (processQueue.isDropped()) {
-            log.info("the pull request[{}] is droped.", pullRequest.toString());
+            log.info("the pull request[{}] is dropped.", pullRequest.toString());
             return;
         }
 
@@ -207,7 +207,7 @@ public void pullMessage(final PullRequest pullRequest) {
         }
 
         if (this.isPause()) {
-            log.warn("consumer was paused, execute pull request later. instanceName={}", this.defaultMQPushConsumer.getInstanceName());
+            log.warn("consumer was paused, execute pull request later. instanceName={}, group={}", this.defaultMQPushConsumer.getInstanceName(), this.defaultMQPushConsumer.getConsumerGroup());
             this.executePullRequestLater(pullRequest, PullTimeDelayMillsWhenSuspend);
             return;
         }

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -138,6 +138,7 @@ public static void initCommand() {
         initCommand(new QueryMsgByOffsetSubCommand());
         initCommand(new QueryMsgByUniqueKeySubCommand());
         initCommand(new PrintMessageSubCommand());
+        initCommand(new PrintMessageByQueueCommand());
         initCommand(new SendMsgStatusCommand());
         initCommand(new BrokerConsumeStatsSubCommad());
 

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/message/MessageClientIDSetter.java
Patch:
@@ -100,7 +100,7 @@ public static byte[] getIPFromID(String msgID) {
         return result;
     }
 
-    private static String createUniqID() {
+    public static String createUniqID() {
         StringBuilder sb = new StringBuilder(len * 2);
         sb.append(fixString);
         sb.append(UtilAll.bytes2string(createUniqIDBuffer()));

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/ClientRemotingProcessor.java
Patch:
@@ -161,7 +161,6 @@ private RemotingCommand getConsumerRunningInfo(ChannelHandlerContext ctx, Remoti
         if (null != consumerRunningInfo) {
             if (requestHeader.isJstackEnable()) {
                 Map<Thread, StackTraceElement[]> map = Thread.getAllStackTraces();
-                consumerRunningInfo.setStackTraceElementMap(map);
                 String jstack = UtilAll.jstack(map);
                 consumerRunningInfo.setJstack(jstack);
             }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/ClientRemotingProcessor.java
Patch:
@@ -161,7 +161,6 @@ private RemotingCommand getConsumerRunningInfo(ChannelHandlerContext ctx, Remoti
         if (null != consumerRunningInfo) {
             if (requestHeader.isJstackEnable()) {
                 Map<Thread, StackTraceElement[]> map = Thread.getAllStackTraces();
-                consumerRunningInfo.setStackTraceElementMap(map);
                 String jstack = UtilAll.jstack(map);
                 consumerRunningInfo.setJstack(jstack);
             }

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/BrokerConfig.java
Patch:
@@ -91,7 +91,7 @@ public class BrokerConfig {
     private int maxDelayTime = 40;
 
 
-    private String regionId = "DefaultRegion";
+    private String regionId = MixAll.DEFAULT_TRACE_REGION_ID;
     private int registerBrokerTimeoutMills = 6000;
 
     private boolean slaveReadEnable = false;

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MixAll.java
Patch:
@@ -74,7 +74,7 @@ public class MixAll {
     public static final String DLQ_GROUP_TOPIC_PREFIX = "%DLQ%";
     public static final String SYSTEM_TOPIC_PREFIX = "rmq_sys_";
     public static final String UNIQUE_MSG_QUERY_FLAG = "_UNIQUE_KEY_QUERY";
-
+    public static final String DEFAULT_TRACE_REGION_ID="DefaultRegion";
 
     public static String getRetryTopic(final String consumerGroup) {
         return RETRY_GROUP_TOPIC_PREFIX + consumerGroup;

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/BrokerConfig.java
Patch:
@@ -91,7 +91,7 @@ public class BrokerConfig {
     private int maxDelayTime = 40;
 
 
-    private String regionId = "DefaultRegion";
+    private String regionId = MixAll.DEFAULT_TRACE_REGION_ID;
     private int registerBrokerTimeoutMills = 6000;
 
     private boolean slaveReadEnable = false;

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MixAll.java
Patch:
@@ -74,7 +74,7 @@ public class MixAll {
     public static final String DLQ_GROUP_TOPIC_PREFIX = "%DLQ%";
     public static final String SYSTEM_TOPIC_PREFIX = "rmq_sys_";
     public static final String UNIQUE_MSG_QUERY_FLAG = "_UNIQUE_KEY_QUERY";
-
+    public static final String DEFAULT_TRACE_REGION_ID="DefaultRegion";
 
     public static String getRetryTopic(final String consumerGroup) {
         return RETRY_GROUP_TOPIC_PREFIX + consumerGroup;

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/benchmark/TransactionProducer.java
Patch:
@@ -14,6 +14,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
+
 package com.alibaba.rocketmq.example.benchmark;
 
 import com.alibaba.rocketmq.client.exception.MQClientException;

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MQVersion.java
Patch:
@@ -21,7 +21,7 @@
  */
 public class MQVersion {
 
-    public static final int CurrentVersion = Version.V3_6_2_SNAPSHOT.ordinal();
+    public static final int CurrentVersion = Version.V3_6_3_SNAPSHOT.ordinal();
 
 
     public static String getVersionDesc(int value) {

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java
Patch:
@@ -218,7 +218,7 @@ private PullResult pullSyncImpl(MessageQueue mq, String subExpression, long offs
         return pullResult;
     }
 
-    private void subscriptionAutomatically(final String topic) {
+    public void subscriptionAutomatically(final String topic) {
         if (!this.rebalanceImpl.getSubscriptionInner().containsKey(topic)) {
             try {
                 SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData(this.defaultMQPullConsumer.getConsumerGroup(), //

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerController.java
Patch:
@@ -195,8 +195,8 @@ public boolean initialize() throws CloneNotSupportedException {
             fastConfig.setListenPort(nettyServerConfig.getListenPort() - 2);
             this.fastRemotingServer = new NettyRemotingServer(fastConfig, this.clientHousekeepingService);
             this.sendMessageExecutor = new BrokerFixedThreadPoolExecutor(//
-                    1,//
-                    1,//
+                    this.brokerConfig.getSendMessageThreadPoolNums(),//
+                    this.brokerConfig.getSendMessageThreadPoolNums(),//
                     1000 * 60,//
                     TimeUnit.MILLISECONDS,//
                     this.sendThreadPoolQueue,//

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java
Patch:
@@ -91,6 +91,7 @@ public void run() {
     public void shutdown() {
         this.scheduledExecutorService.shutdown();
         this.consumeExecutor.shutdown();
+        this.CleanExpireMsgExecutors.shutdown();
     }
 
     @Override

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/client/ConsumerManager.java
Patch:
@@ -133,7 +133,7 @@ public void unregisterConsumer(final String group, final ClientChannelInfo clien
             if (consumerGroupInfo.getChannelInfoTable().isEmpty()) {
                 ConsumerGroupInfo remove = this.consumerTable.remove(group);
                 if (remove != null) {
-                    log.info("ungister consumer ok, no any connection, and remove consumer group, {}", group);
+                    log.info("unregister consumer ok, no any connection, and remove consumer group, {}", group);
                 }
             }
             this.consumerIdsChangeListener.consumerIdsChanged(group, consumerGroupInfo.getAllChannel());

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java
Patch:
@@ -91,6 +91,7 @@ public void run() {
     public void shutdown() {
         this.scheduledExecutorService.shutdown();
         this.consumeExecutor.shutdown();
+        this.CleanExpireMsgExecutors.shutdown();
     }
 
     @Override

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -667,7 +667,8 @@ public void setDefaultQueryMaxNum(int defaultQueryMaxNum) {
      * @return
      */
     public boolean isTransientStorePoolEnable() {
-        return transientStorePoolEnable && FlushDiskType.ASYNC_FLUSH == getFlushDiskType();
+        return transientStorePoolEnable && FlushDiskType.ASYNC_FLUSH == getFlushDiskType()
+                && BrokerRole.SLAVE != getBrokerRole();
     }
 
     public void setTransientStorePoolEnable(final boolean transientStorePoolEnable) {

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/MappedFileQueue.java
Patch:
@@ -79,7 +79,6 @@ public void checkSelf() {
 
 
     public MappedFile getMappedFileByTime(final long timestamp) {
-        // FIXME: 16/9/1 If we use FileChannel.force(false), the LastModifiedTimestamp may be not accurate
         Object[] mfs = this.copyMappedFiles(0);
 
         if (null == mfs)
@@ -275,7 +274,7 @@ public boolean resetOffset(long offset) {
                     mappedFileLast.getWrotePosition();
             long diff = lastOffset - offset;
 
-            final int maxDiff = 1024 * 1024 * 1024 * 2; // FIXME: 16/9/1 use CommitLogFileSize in StoreConfig.
+            final int maxDiff = this.mappedFileSize * 2;
             if (diff > maxDiff) return false;
         }
 

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -316,7 +316,7 @@ private RemotingCommand sendMessage(final ChannelHandlerContext ctx, //
             if (request.getVersion() >= MQVersion.Version.V3_4_9.ordinal()) {
                 maxReconsumeTimes = requestHeader.getMaxReconsumeTimes();
             }
-            int reconsumeTimes = requestHeader.getReconsumeTimes();
+            int reconsumeTimes = requestHeader.getReconsumeTimes() == null ? 0 : requestHeader.getReconsumeTimes();
             if (reconsumeTimes >= maxReconsumeTimes) {
                 newTopic = MixAll.getDLQTopic(groupName);
                 queueIdInt = Math.abs(this.random.nextInt() % 99999999) % DLQ_NUMS_PER_GROUP;

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/message/Store.java
Patch:
@@ -159,13 +159,13 @@ public void traval(boolean openAll) {
                 long bornTimeStamp = byteBuffer.getLong();
                 bornTimeStamp = bornTimeStamp + 0;
 
-                // 10 BORNHOST（IP+PORT）
+                // 10 BORNHOST(IP+PORT)
                 byteBuffer.position(byteBuffer.position() + 8);
 
                 // 11 STORETIMESTAMP
                 long storeTimestamp = byteBuffer.getLong();
 
-                // 12 STOREHOST（IP+PORT）
+                // 12 STOREHOST(IP+PORT)
                 byteBuffer.position(byteBuffer.position() + 8);
 
                 // 13 RECONSUMETIMES

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -51,8 +51,8 @@ public class MessageStoreConfig {
     @ImportantField
     private int commitIntervalCommitLog = 50;
 
-    // Should commit anyway if 5 seconds is elapsed.
-    private int commitMaxInterval = 5000;
+    // Should commit anyway if 3 seconds is elapsed.
+    private int commitMaxInterval = 3000;
 
     // Whether schedule flush,default is real-time
     @ImportantField

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerController.java
Patch:
@@ -269,7 +269,7 @@ public void run() {
                 @Override
                 public void run() {
                     try {
-                        log.info("dispatch behind flush log {} bytes", BrokerController.this.getMessageStore().dispatchBehindBytes());
+                        log.info("dispatch behind commit log {} bytes", BrokerController.this.getMessageStore().dispatchBehindBytes());
                     } catch (Throwable e) {
                         log.error("schedule dispatchBehindBytes error.", e);
                     }

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/EndTransactionProcessor.java
Patch:
@@ -71,7 +71,7 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand
                 }
 
                 case MessageSysFlag.TransactionCommitType: {
-                    logTransaction.warn("check producer[{}] transaction state, the producer flush the message.\n"//
+                    logTransaction.warn("check producer[{}] transaction state, the producer commit the message.\n"//
                                     + "RequestHeader: {} Remark: {}",//
                             RemotingHelper.parseChannelRemoteAddr(ctx.channel()), //
                             requestHeader.toString(),//
@@ -139,7 +139,7 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand
 
             if (msgExt.getCommitLogOffset() != requestHeader.getCommitLogOffset()) {
                 response.setCode(ResponseCode.SYSTEM_ERROR);
-                response.setRemark("the flush log offset wrong");
+                response.setRemark("the commit log offset wrong");
                 return response;
             }
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/AppendMessageResult.java
Patch:
@@ -17,7 +17,7 @@
 package com.alibaba.rocketmq.store;
 
 /**
- * When write a message to the flush log, returns results
+ * When write a message to the commit log, returns results
  *
  * @author shijia.wxr
  */

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/AppendMessageStatus.java
Patch:
@@ -17,7 +17,7 @@
 package com.alibaba.rocketmq.store;
 
 /**
- * When write a message to the flush log, returns code
+ * When write a message to the commit log, returns code
  *
  * @author shijia.wxr
  *

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/CommitLog.java
Patch:
@@ -93,7 +93,7 @@ public CommitLog(final DefaultMessageStore defaultMessageStore) {
 
     public boolean load() {
         boolean result = this.mappedFileQueue.load();
-        log.info("load flush log " + (result ? "OK" : "Failed"));
+        log.info("load commit log " + (result ? "OK" : "Failed"));
         return result;
     }
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/ConsumeQueue.java
Patch:
@@ -356,7 +356,7 @@ public void putMessagePositionInfoWrapper(long offset, int size, long tagsCode,
 
             else {
                 // XXX: warn and notify me
-                log.warn("[BUG]put flush log position info to " + topic + ":" + queueId + " " + offset
+                log.warn("[BUG]put commit log position info to " + topic + ":" + queueId + " " + offset
                         + " failed, retry " + i + " times");
 
                 try {

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/CommitLog.java
Patch:
@@ -417,7 +417,7 @@ public void recoverAbnormally() {
             MappedFile mappedFile = null;
             for (; index >= 0; index--) {
                 mappedFile = mappedFiles.get(index);
-                if (this.isMapedFileMatchedRecover(mappedFile)) {
+                if (this.isMappedFileMatchedRecover(mappedFile)) {
                     log.info("recover from this maped file " + mappedFile.getFileName());
                     break;
                 }
@@ -487,7 +487,7 @@ else if (size == 0) {
         }
     }
 
-    private boolean isMapedFileMatchedRecover(final MappedFile mappedFile) {
+    private boolean isMappedFileMatchedRecover(final MappedFile mappedFile) {
         ByteBuffer byteBuffer = mappedFile.sliceByteBuffer();
 
         int magicCode = byteBuffer.getInt(MessageDecoder.MessageMagicCodePostion);

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/MappedFile.java
Patch:
@@ -504,7 +504,6 @@ public boolean destroy(final long intervalForcibly) {
         return false;
     }
 
-    // TODO: be carefully
     public int getWrotePosition() {
         return wrotePosition.get();
     }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/MappedFileQueue.java
Patch:
@@ -285,10 +285,11 @@ public boolean resetOffset(long offset) {
             if (offset >= mappedFileLast.getFileFromOffset()) {
                 int where = (int) (offset % mappedFileLast.getFileSize());
                 mappedFileLast.setFlushedPosition(where);
-                mappedFileLast.setWrotePosition(where); // FIXME: 16/9/1 need setCommittedPosition?
+                mappedFileLast.setWrotePosition(where);
+                mappedFileLast.setCommittedPosition(where);
                 break;
             } else {
-                this.mappedFiles.remove(mappedFileLast); // // FIXME: 16/9/10
+                iterator.remove();
             }
         }
         return true;

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MixAll.java
Patch:
@@ -156,7 +156,7 @@ public static final void string2File(final String str, final String fileName) th
 
 
     public static final void string2FileNotSafe(final String str, final String fileName) throws IOException {
-        File file = new File(fileName,DEFAULT_CHARSET);
+        File file = new File(fileName);
         File fileParent = file.getParentFile();
         if (fileParent != null) {
             fileParent.mkdirs();

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -83,7 +83,8 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand
 
     @Override
     public boolean rejectRequest() {
-        return this.brokerController.getMessageStore().isOSPageCacheBusy();
+        return this.brokerController.getMessageStore().isOSPageCacheBusy() ||
+                this.brokerController.getMessageStore().isTransientStorePoolDeficient();
     }
 
     private RemotingCommand consumerSendMsgBack(final ChannelHandlerContext ctx, final RemotingCommand request)

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/CommitLog.java
Patch:
@@ -629,7 +629,7 @@ public PutMessageResult putMessage(final MessageExtBrokerInner msg) {
         }
 
         if (null != unlockMappedFile && this.defaultMessageStore.getMessageStoreConfig().isWarmMapedFileEnable()) {
-            this.defaultMessageStore.unlockMapedFile(unlockMappedFile);
+            this.defaultMessageStore.unlockMappedFile(unlockMappedFile);
         }
 
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/MessageStore.java
Patch:
@@ -136,4 +136,6 @@ QueryMessageResult queryMessage(final String topic, final String key, final int
     boolean isOSPageCacheBusy();
 
     long lockTimeMills();
+
+    boolean isTransientStorePoolDeficient();
 }

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/message/MessageExt.java
Patch:
@@ -81,7 +81,7 @@ public ByteBuffer getBornHostBytes(ByteBuffer byteBuffer) {
 
     private static ByteBuffer SocketAddress2ByteBuffer(final SocketAddress socketAddress, final ByteBuffer byteBuffer) {
         InetSocketAddress inetSocketAddress = (InetSocketAddress) socketAddress;
-        byteBuffer.put(inetSocketAddress.getAddress().getAddress()); // FIXME: 16/9/13 If ipv6?
+        byteBuffer.put(inetSocketAddress.getAddress().getAddress(), 0, 4);
         byteBuffer.putInt(inetSocketAddress.getPort());
         byteBuffer.flip();
         return byteBuffer;

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -134,7 +134,7 @@ public class MessageStoreConfig {
     @ImportantField
     private boolean transientStorePoolEnable = false;
     private int transientStorePoolSize = 5;
-    private boolean fastFailIfNoBufferInStorePool = true;
+    private boolean fastFailIfNoBufferInStorePool = false;
     
     public boolean isDebugLockEnable() {
         return debugLockEnable;

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/AllocateMappedFileService.java
Patch:
@@ -158,7 +158,8 @@ private boolean mmapOperation() {
 
                 MappedFile mappedFile;
                 if (messageStore.getMessageStoreConfig().isTransientStorePoolEnable()) {
-                    mappedFile = new MappedFile(req.getFilePath(), req.getFileSize(), messageStore.getTransientStorePool());
+                    mappedFile = new MappedFile(req.getFilePath(), req.getFileSize(), messageStore.getTransientStorePool(),
+                            messageStore.getMessageStoreConfig().getCommitMaxInterval());
                 } else {
                     mappedFile = new MappedFile(req.getFilePath(), req.getFileSize());
                 }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/MappedFile.java
Patch:
@@ -244,7 +244,6 @@ public boolean appendMessage(final byte[] data) {
 
         if ((currentPos + data.length) <= this.fileSize) {
             try {
-                this.fileChannel.position(currentPos);
                 this.fileChannel.write(ByteBuffer.wrap(data));
             } catch (IOException e) {
                 log.error("Error occurred when append message to mappedFile.", e);
@@ -317,6 +316,7 @@ public int commit(final int commitLeastPages) {
                 if (commitLeastPages == 0 || isFull()) {
                     value = this.wrotePosition.get();
                 } else {
+                    value -= OS_PAGE_SIZE;
                     // seek a message start position
                     ByteBuffer byteBuffer = writeBuffer.slice();
                     for (int i = this.committedPosition.get(); i <= value;) {
@@ -332,6 +332,7 @@ public int commit(final int commitLeastPages) {
                         }
                         i += msgLen;
                     }
+                    value += OS_PAGE_SIZE;
                 }
 
                 if ((value - this.committedPosition.get() > 0)) {
@@ -340,11 +341,9 @@ public int commit(final int commitLeastPages) {
                     byteBuffer.limit(value);
 
                     try {
-                        this.fileChannel.position(this.committedPosition.get() + commitCompensation);
                         this.fileChannel.write(byteBuffer);
                         commitCompensation = newValue == -1 ? 0 : value - newValue;
                         value = newValue == -1 ? value : newValue;
-                        this.fileChannel.position(value); // back to the message start position
                         this.committedPosition.set(value);
                     } catch (IOException e) {
                         log.error("Error occurred when flush data to FileChannel.", e);

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/client/ConsumerGroupInfo.java
Patch:
@@ -166,7 +166,7 @@ public boolean updateSubscription(final Set<SubscriptionData> subList) {
         for (SubscriptionData sub : subList) {
             SubscriptionData old = this.subscriptionTable.get(sub.getTopic());
             if (old == null) {
-                SubscriptionData prev = this.subscriptionTable.put(sub.getTopic(), sub);
+                SubscriptionData prev = this.subscriptionTable.putIfAbsent(sub.getTopic(), sub);
                 if (null == prev) {
                     updated = true;
                     log.info("subscription changed, add new topic, group: {} {}", this.groupName,

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/client/rebalance/RebalanceLockManager.java
Patch:
@@ -244,7 +244,7 @@ public void unlockBatch(final String group, final Set<MessageQueue> mqs, final S
         }
     }
 
-    class LockEntry {
+    static class LockEntry {
         private String clientId;
         private volatile long lastUpdateTimestamp = System.currentTimeMillis();
 

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/filtersrv/FilterServerManager.java
Patch:
@@ -148,7 +148,7 @@ public List<String> buildNewFilterServerList() {
         return addr;
     }
 
-    class FilterServerInfo {
+    static class FilterServerInfo {
         private String filterServerAddr;
         private long lastUpdateTimestamp;
 

File: rocketmq-broker/src/test/java/com/alibaba/rocketmq/broker/api/SendMessageTest.java
Patch:
@@ -73,7 +73,7 @@ public void test_sendMessage() throws Exception {
                 requestHeader.setProperties(MessageDecoder.messageProperties2String(msg.getProperties()));
 
                 SendResult result = client.sendMessage("127.0.0.1:10911", "brokerName", msg, requestHeader, 1000 * 5,
-                        CommunicationMode.SYNC, new SendMessageContext());
+                        CommunicationMode.SYNC, new SendMessageContext(), null);
                 System.out.println(i + "\t" + result);
             } catch (Exception e) {
                 e.printStackTrace();

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/DefaultMQPullConsumer.java
Patch:
@@ -24,7 +24,9 @@
 import com.alibaba.rocketmq.client.exception.MQClientException;
 import com.alibaba.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl;
 import com.alibaba.rocketmq.common.MixAll;
+import com.alibaba.rocketmq.common.message.MessageDecoder;
 import com.alibaba.rocketmq.common.message.MessageExt;
+import com.alibaba.rocketmq.common.message.MessageId;
 import com.alibaba.rocketmq.common.message.MessageQueue;
 import com.alibaba.rocketmq.common.protocol.heartbeat.MessageModel;
 import com.alibaba.rocketmq.remoting.RPCHook;
@@ -331,6 +333,7 @@ public Set<MessageQueue> fetchMessageQueuesInBalance(String topic) throws MQClie
     @Override
     public MessageExt viewMessage(String topic, String uniqKey) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
         try {
+            MessageDecoder.decodeMessageId(uniqKey);
             return this.viewMessage(uniqKey);
         } catch (Exception e) {
         }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/DefaultMQPushConsumer.java
Patch:
@@ -29,6 +29,7 @@
 import com.alibaba.rocketmq.common.MixAll;
 import com.alibaba.rocketmq.common.UtilAll;
 import com.alibaba.rocketmq.common.consumer.ConsumeFromWhere;
+import com.alibaba.rocketmq.common.message.MessageDecoder;
 import com.alibaba.rocketmq.common.message.MessageExt;
 import com.alibaba.rocketmq.common.message.MessageQueue;
 import com.alibaba.rocketmq.common.protocol.heartbeat.MessageModel;
@@ -131,7 +132,7 @@ public class DefaultMQPushConsumer extends ClientConfig implements MQPushConsume
 
     private int maxReconsumeTimes = 16;
     private long suspendCurrentQueueTimeMillis = 1000;
-    private long consumeTimeout = 2;
+    private long consumeTimeout = 15;
 
 
     public DefaultMQPushConsumer() {
@@ -206,6 +207,7 @@ public QueryResult queryMessage(String topic, String key, int maxNum, long begin
     @Override
     public MessageExt viewMessage(String topic, String msgId) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
         try {
+            MessageDecoder.decodeMessageId(msgId);
             return this.viewMessage(msgId);
         } catch (Exception e) {
         }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/MQPullConsumerScheduleService.java
Patch:
@@ -69,6 +69,7 @@ public void putTask(String topic, Set<MessageQueue> mqNewSet) {
                 PullTaskImpl command = new PullTaskImpl(mq);
                 this.taskTable.put(mq, command);
                 this.scheduledThreadPoolExecutor.schedule(command, 0, TimeUnit.MILLISECONDS);
+
             }
         }
     }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ProcessQueue.java
Patch:
@@ -88,7 +88,7 @@ public void cleanExpiredMsg(DefaultMQPushConsumer pushConsumer) {
             try {
                 this.lockTreeMap.readLock().lockInterruptibly();
                 try {
-                    if (!msgTreeMap.isEmpty() && System.currentTimeMillis() - Long.valueOf(MessageAccessor.getConsumeStartTimeStamp(msgTreeMap.firstEntry().getValue())) > pushConsumer.getConsumeTimeout() * 60 * 1000) {
+                    if (!msgTreeMap.isEmpty() && System.currentTimeMillis() - Long.parseLong(MessageAccessor.getConsumeStartTimeStamp(msgTreeMap.firstEntry().getValue())) > pushConsumer.getConsumeTimeout() * 60 * 1000) {
                         msg = msgTreeMap.firstEntry().getValue();
                     } else {
 

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/BrokerConfigSingleton.java
Patch:
@@ -25,14 +25,14 @@ public class BrokerConfigSingleton {
 
     public static BrokerConfig getBrokerConfig() {
         if (brokerConfig == null) {
-
+            throw new IllegalArgumentException("brokerConfig Cannot be null !");
         }
         return brokerConfig;
     }
 
     public static void setBrokerConfig(BrokerConfig brokerConfig) {
         if (!isInit.compareAndSet(false, true)) {
-
+            throw new IllegalArgumentException("broker config have inited !");
         }
         BrokerConfigSingleton.brokerConfig = brokerConfig;
     }

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/constant/LoggerName.java
Patch:
@@ -35,4 +35,6 @@ public class LoggerName {
     public static final String FlowControlLoggerName = "RocketmqFlowControl";
     public static final String RocketmqAuthorizeLoggerName = "RocketmqAuthorize";
     public static final String DuplicationLoggerName = "RocketmqDuplication";
+    public static final String ProtectionLoggerName = "RocketmqProtection";
+    public static final String WaterMarkLoggerName = "RocketmqWaterMark";
 }

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/message/MessageClientIDSetter.java
Patch:
@@ -119,7 +119,7 @@ public static byte[] getIPFromID(String msgID) {
         return result;
     }
     
-    private static synchronized String createUniqID() {
+    public static synchronized String createUniqID() {
             long current = System.currentTimeMillis();
             if (current >= nextStartTime) {
                 setStartTime(current);

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/protocol/route/BrokerData.java
Patch:
@@ -23,6 +23,7 @@
 import com.alibaba.rocketmq.common.MixAll;
 
 import java.util.HashMap;
+import java.util.Map;
 
 
 /**
@@ -37,8 +38,8 @@ public class BrokerData implements Comparable<BrokerData> {
     public String selectBrokerAddr() {
         String value = this.brokerAddrs.get(MixAll.MASTER_ID);
         if (null == value) {
-            for (Long key : this.brokerAddrs.keySet()) {
-                return this.brokerAddrs.get(key);
+            for (Map.Entry<Long, String> entry : this.brokerAddrs.entrySet()) {
+                return entry.getValue();
             }
         }
 

File: rocketmq-common/src/test/java/com/alibaba/rocketmq/common/UtilAllTest.java
Patch:
@@ -115,7 +115,7 @@ public void test_isBlank() {
         }
     }
 
-    class DemoConfig {
+    static class DemoConfig {
         private int demoWidth = 0;
         private int demoLength = 0;
         private boolean demoOK = false;

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/benchmark/Producer.java
Patch:
@@ -159,6 +159,7 @@ public void run() {
                             log.error("[BENCHMARK_PRODUCER] Send Exception", e);
                         } catch (MQBrokerException e) {
                             statsBenchmark.getReceiveResponseFailedCount().incrementAndGet();
+                            log.error("[BENCHMARK_PRODUCER] Send Exception", e);
                             try {
                                 Thread.sleep(3000);
                             } catch (InterruptedException e1) {

File: rocketmq-filtersrv/src/main/java/com/alibaba/rocketmq/filtersrv/filter/DynaCode.java
Patch:
@@ -123,7 +123,7 @@ public DynaCode(List<String> codeStrs) {
     public static Class<?> compileAndLoadClass(final String className, final String javaSource)
             throws Exception {
         String classSimpleName = FilterAPI.simpleClassName(className);
-        String javaCode = new String(javaSource);
+        String javaCode = javaSource;
 
         final String newClassSimpleName = classSimpleName + System.currentTimeMillis();
         String newJavaCode = javaCode.replaceAll(classSimpleName, newClassSimpleName);

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/common/RemotingHelper.java
Patch:
@@ -54,7 +54,7 @@ public static String exceptionSimpleDesc(final Throwable e) {
 
     public static SocketAddress string2SocketAddress(final String addr) {
         String[] s = addr.split(":");
-        InetSocketAddress isa = new InetSocketAddress(s[0], Integer.valueOf(s[1]));
+        InetSocketAddress isa = new InetSocketAddress(s[0], Integer.parseInt(s[1]));
         return isa;
     }
 

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/common/RemotingUtil.java
Patch:
@@ -149,7 +149,7 @@ public static String normalizeHostAddress(final InetAddress localHost) {
 
     public static SocketAddress string2SocketAddress(final String addr) {
         String[] s = addr.split(":");
-        InetSocketAddress isa = new InetSocketAddress(s[0], Integer.valueOf(s[1]));
+        InetSocketAddress isa = new InetSocketAddress(s[0], Integer.parseInt(s[1]));
         return isa;
     }
 

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyClientConfig.java
Patch:
@@ -40,7 +40,7 @@ public class NettyClientConfig {
     private int clientSocketSndBufSize = NettySystemConfig.socketSndbufSize;
     private int clientSocketRcvBufSize = NettySystemConfig.socketRcvbufSize;
     private boolean clientPooledByteBufAllocatorEnable = false;
-    private boolean clientCloseSocketIfTimeout = true;
+    private boolean clientCloseSocketIfTimeout = false;
 
     public boolean isClientCloseSocketIfTimeout() {
         return clientCloseSocketIfTimeout;

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRequestProcessor.java
Patch:
@@ -29,4 +29,5 @@
 public interface NettyRequestProcessor {
     RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand request)
             throws Exception;
+    boolean rejectRequest();
 }

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettySystemConfig.java
Patch:
@@ -36,7 +36,7 @@ public class NettySystemConfig {
     public static int socketRcvbufSize = //
             Integer.parseInt(System.getProperty(SystemPropertySocketRcvbufSize, "65535"));
     public static final int ClientAsyncSemaphoreValue = //
-            Integer.parseInt(System.getProperty(SystemPropertyClientAsyncSemaphoreValue, "2048"));
+            Integer.parseInt(System.getProperty(SystemPropertyClientAsyncSemaphoreValue, "65535"));
     public static final int ClientOnewaySemaphoreValue = //
-            Integer.parseInt(System.getProperty(SystemPropertyClientOnewaySemaphoreValue, "2048"));
+            Integer.parseInt(System.getProperty(SystemPropertyClientOnewaySemaphoreValue, "65535"));
 }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/AllocateMapedFileService.java
Patch:
@@ -197,7 +197,7 @@ private boolean mmapOperation() {
         return true;
     }
 
-    class AllocateRequest implements Comparable<AllocateRequest> {
+    static class AllocateRequest implements Comparable<AllocateRequest> {
         // Full file path
         private String filePath;
         private int fileSize;

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -117,7 +117,7 @@ public class MessageStoreConfig {
     private boolean debugLockEnable = false;
     private boolean duplicationEnable = false;
     private boolean diskFallRecorded = true;
-    private long osPageCacheBusyTimeOutMills = 2000;
+    private long osPageCacheBusyTimeOutMills = 1000;
     private int defaultQueryMaxNum = 32;
     
     public boolean isDebugLockEnable() {

File: rocketmq-store/src/test/java/com/alibaba/rocketmq/store/index/IndexFileTest.java
Patch:
@@ -30,8 +30,8 @@
 
 
 public class IndexFileTest {
-    private final int hashSlotNum = 100;
-    private final int indexNum = 400;
+    private static final int hashSlotNum = 100;
+    private static final int indexNum = 400;
 
 
     @Test

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -528,8 +528,8 @@ public void createOrUpdateOrderConf(String key, String value, boolean isCluster)
 
             StringBuilder newOrderConf = new StringBuilder();
             String splitor = "";
-            for (String tmp : orderConfMap.keySet()) {
-                newOrderConf.append(splitor).append(orderConfMap.get(tmp));
+            for (Map.Entry<String, String> entry : orderConfMap.entrySet()) {
+                newOrderConf.append(splitor).append(entry.getValue());
                 splitor = ";";
             }
             this.mqClientInstance.getMQClientAPIImpl().putKVConfigValue(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG, key,

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/broker/BrokerConsumeStatsSubCommad.java
Patch:
@@ -100,8 +100,9 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
                     "#Diff", //
                     "#LastTime");
             for (Map<String, List<ConsumeStats>> map : consumeStatsList.getConsumeStatsList()) {
-                for (String group : map.keySet()) {
-                    List<ConsumeStats> consumeStatsArray = map.get(group);
+                for (Map.Entry<String, List<ConsumeStats>> entry : map.entrySet()) {
+                    String group = entry.getKey();
+                    List<ConsumeStats> consumeStatsArray = entry.getValue();
                     for (ConsumeStats consumeStats : consumeStatsArray) {
                         List<MessageQueue> mqList = new LinkedList<MessageQueue>();
                         mqList.addAll(consumeStats.getOffsetTable().keySet());

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/broker/SendMsgStatusCommand.java
Patch:
@@ -66,7 +66,7 @@ public Options buildCommandlineOptions(Options options) {
 
     @Override
     public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
-        final DefaultMQProducer producer = new DefaultMQProducer("PID_SMSC");
+        final DefaultMQProducer producer = new DefaultMQProducer("PID_SMSC",rpcHook);
         producer.setInstanceName("PID_SMSC_" + System.currentTimeMillis());
 
         try {

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/message/PrintMessageSubCommand.java
Patch:
@@ -153,7 +153,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
     public static long timestampFormat(final String value) {
         long timestamp = 0;
         try {
-            timestamp = Long.valueOf(value);
+            timestamp = Long.parseLong(value);
         } catch (NumberFormatException e) {
 
             timestamp = UtilAll.parseDate(value, UtilAll.yyyy_MM_dd_HH_mm_ss_SSS).getTime();

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/message/QueryMsgByOffsetSubCommand.java
Patch:
@@ -72,7 +72,7 @@ public Options buildCommandlineOptions(Options options) {
     @Override
     public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
         DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
-        DefaultMQPullConsumer defaultMQPullConsumer = new DefaultMQPullConsumer(MixAll.TOOLS_CONSUMER_GROUP);
+        DefaultMQPullConsumer defaultMQPullConsumer = new DefaultMQPullConsumer(MixAll.TOOLS_CONSUMER_GROUP,rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
         defaultMQPullConsumer.setInstanceName(Long.toString(System.currentTimeMillis()));

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/offset/ResetOffsetByTimeCommand.java
Patch:
@@ -93,7 +93,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
 
             try {
                 if (timestamp == 0) {
-                    timestamp = Long.valueOf(timeStampStr);
+                    timestamp = Long.parseLong(timeStampStr);
                 }
             } catch (NumberFormatException e) {
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/offset/ResetOffsetByTimeOldCommand.java
Patch:
@@ -81,7 +81,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
             String timeStampStr = commandLine.getOptionValue("s").trim();
             long timestamp = 0;
             try {
-                timestamp = Long.valueOf(timeStampStr);
+                timestamp = Long.parseLong(timeStampStr);
             } catch (NumberFormatException e) {
 
                 Date date = UtilAll.parseDate(timeStampStr, UtilAll.yyyy_MM_dd_HH_mm_ss_SSS);

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/client/ConsumerGroupInfo.java
Patch:
@@ -166,7 +166,7 @@ public boolean updateSubscription(final Set<SubscriptionData> subList) {
         for (SubscriptionData sub : subList) {
             SubscriptionData old = this.subscriptionTable.get(sub.getTopic());
             if (old == null) {
-                SubscriptionData prev = this.subscriptionTable.put(sub.getTopic(), sub);
+                SubscriptionData prev = this.subscriptionTable.putIfAbsent(sub.getTopic(), sub);
                 if (null == prev) {
                     updated = true;
                     log.info("subscription changed, add new topic, group: {} {}", this.groupName,

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/client/rebalance/RebalanceLockManager.java
Patch:
@@ -244,7 +244,7 @@ public void unlockBatch(final String group, final Set<MessageQueue> mqs, final S
         }
     }
 
-    class LockEntry {
+    static class LockEntry {
         private String clientId;
         private volatile long lastUpdateTimestamp = System.currentTimeMillis();
 

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/filtersrv/FilterServerManager.java
Patch:
@@ -148,7 +148,7 @@ public List<String> buildNewFilterServerList() {
         return addr;
     }
 
-    class FilterServerInfo {
+    static class FilterServerInfo {
         private String filterServerAddr;
         private long lastUpdateTimestamp;
 

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -932,9 +932,10 @@ private RemotingCommand queryCorrectionOffset(ChannelHandlerContext ctx, Remotin
                 this.brokerController.getConsumerOffsetManager().queryOffset(requestHeader.getTopic(), requestHeader.getCompareGroup());
 
         if (compareOffset != null && !compareOffset.isEmpty()) {
-            for (Integer queueId : compareOffset.keySet()) {
+            for(Map.Entry<Integer, Long> entry: compareOffset.entrySet()){
+                Integer queueId = entry.getKey();
                 correctionOffset.put(queueId,
-                        correctionOffset.get(queueId) > compareOffset.get(queueId) ? Long.MAX_VALUE : correctionOffset.get(queueId));
+                        correctionOffset.get(queueId) > entry.getValue() ? Long.MAX_VALUE : correctionOffset.get(queueId));
             }
         }
 

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/PullMessageProcessor.java
Patch:
@@ -379,7 +379,7 @@ public void operationComplete(ChannelFuture future) throws Exception {
                             pollingTimeMills = this.brokerController.getBrokerConfig().getShortPollingTimeMills();
                         }
 
-                        String topic = new String(requestHeader.getTopic());
+                        String topic = requestHeader.getTopic();
                         long offset = requestHeader.getQueueOffset();
                         int queueId = requestHeader.getQueueId();
                         PullRequest pullRequest = new PullRequest(request, channel, pollingTimeMills,

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/common/ThreadLocalIndex.java
Patch:
@@ -29,7 +29,7 @@ public ThreadLocalIndex(int value) {
     public int getAndIncrement() {
         Integer index = this.threadLocalIndex.get();
         if (null == index) {
-            index = new Integer(Math.abs(new Random().nextInt()));
+            index = Integer.valueOf(Math.abs(new Random().nextInt()));
             if (index < 0) index = 0;
             this.threadLocalIndex.set(index);
         }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/MQPullConsumerScheduleService.java
Patch:
@@ -69,6 +69,7 @@ public void putTask(String topic, Set<MessageQueue> mqNewSet) {
                 PullTaskImpl command = new PullTaskImpl(mq);
                 this.taskTable.put(mq, command);
                 this.scheduledThreadPoolExecutor.schedule(command, 0, TimeUnit.MILLISECONDS);
+
             }
         }
     }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ProcessQueue.java
Patch:
@@ -88,7 +88,7 @@ public void cleanExpiredMsg(DefaultMQPushConsumer pushConsumer) {
             try {
                 this.lockTreeMap.readLock().lockInterruptibly();
                 try {
-                    if (!msgTreeMap.isEmpty() && System.currentTimeMillis() - Long.valueOf(MessageAccessor.getConsumeStartTimeStamp(msgTreeMap.firstEntry().getValue())) > pushConsumer.getConsumeTimeout() * 60 * 1000) {
+                    if (!msgTreeMap.isEmpty() && System.currentTimeMillis() - Long.parseLong(MessageAccessor.getConsumeStartTimeStamp(msgTreeMap.firstEntry().getValue())) > pushConsumer.getConsumeTimeout() * 60 * 1000) {
                         msg = msgTreeMap.firstEntry().getValue();
                     } else {
 

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/protocol/route/BrokerData.java
Patch:
@@ -23,6 +23,7 @@
 import com.alibaba.rocketmq.common.MixAll;
 
 import java.util.HashMap;
+import java.util.Map;
 
 
 /**
@@ -37,8 +38,8 @@ public class BrokerData implements Comparable<BrokerData> {
     public String selectBrokerAddr() {
         String value = this.brokerAddrs.get(MixAll.MASTER_ID);
         if (null == value) {
-            for (Long key : this.brokerAddrs.keySet()) {
-                return this.brokerAddrs.get(key);
+            for (Map.Entry<Long, String> entry : this.brokerAddrs.entrySet()) {
+                return entry.getValue();
             }
         }
 

File: rocketmq-common/src/test/java/com/alibaba/rocketmq/common/UtilAllTest.java
Patch:
@@ -115,7 +115,7 @@ public void test_isBlank() {
         }
     }
 
-    class DemoConfig {
+    static class DemoConfig {
         private int demoWidth = 0;
         private int demoLength = 0;
         private boolean demoOK = false;

File: rocketmq-filtersrv/src/main/java/com/alibaba/rocketmq/filtersrv/filter/DynaCode.java
Patch:
@@ -122,7 +122,7 @@ public DynaCode(List<String> codeStrs) {
     public static Class<?> compileAndLoadClass(final String className, final String javaSource)
             throws Exception {
         String classSimpleName = FilterAPI.simpleClassName(className);
-        String javaCode = new String(javaSource);
+        String javaCode = javaSource;
 
         final String newClassSimpleName = classSimpleName + System.currentTimeMillis();
         String newJavaCode = javaCode.replaceAll(classSimpleName, newClassSimpleName);

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/common/RemotingHelper.java
Patch:
@@ -54,7 +54,7 @@ public static String exceptionSimpleDesc(final Throwable e) {
 
     public static SocketAddress string2SocketAddress(final String addr) {
         String[] s = addr.split(":");
-        InetSocketAddress isa = new InetSocketAddress(s[0], Integer.valueOf(s[1]));
+        InetSocketAddress isa = new InetSocketAddress(s[0], Integer.parseInt(s[1]));
         return isa;
     }
 

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/common/RemotingUtil.java
Patch:
@@ -148,7 +148,7 @@ public static String normalizeHostAddress(final InetAddress localHost) {
 
     public static SocketAddress string2SocketAddress(final String addr) {
         String[] s = addr.split(":");
-        InetSocketAddress isa = new InetSocketAddress(s[0], Integer.valueOf(s[1]));
+        InetSocketAddress isa = new InetSocketAddress(s[0], Integer.parseInt(s[1]));
         return isa;
     }
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/AllocateMapedFileService.java
Patch:
@@ -197,7 +197,7 @@ private boolean mmapOperation() {
         return true;
     }
 
-    class AllocateRequest implements Comparable<AllocateRequest> {
+    static class AllocateRequest implements Comparable<AllocateRequest> {
         // Full file path
         private String filePath;
         private int fileSize;

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/CommitLog.java
Patch:
@@ -838,7 +838,7 @@ public long getJointime() {
         }
     }
 
-    public class GroupCommitRequest {
+    public static class GroupCommitRequest {
         private final long nextOffset;
         private final CountDownLatch countDownLatch = new CountDownLatch(1);
         private volatile boolean flushOK = false;

File: rocketmq-store/src/test/java/com/alibaba/rocketmq/store/index/IndexFileTest.java
Patch:
@@ -30,8 +30,8 @@
 
 
 public class IndexFileTest {
-    private final int hashSlotNum = 100;
-    private final int indexNum = 400;
+    private static final int hashSlotNum = 100;
+    private static final int indexNum = 400;
 
 
     @Test

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -528,8 +528,8 @@ public void createOrUpdateOrderConf(String key, String value, boolean isCluster)
 
             StringBuilder newOrderConf = new StringBuilder();
             String splitor = "";
-            for (String tmp : orderConfMap.keySet()) {
-                newOrderConf.append(splitor).append(orderConfMap.get(tmp));
+            for (Map.Entry<String, String> entry : orderConfMap.entrySet()) {
+                newOrderConf.append(splitor).append(entry.getValue());
                 splitor = ";";
             }
             this.mqClientInstance.getMQClientAPIImpl().putKVConfigValue(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG, key,

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/broker/BrokerConsumeStatsSubCommad.java
Patch:
@@ -100,8 +100,9 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
                     "#Diff", //
                     "#LastTime");
             for (Map<String, List<ConsumeStats>> map : consumeStatsList.getConsumeStatsList()) {
-                for (String group : map.keySet()) {
-                    List<ConsumeStats> consumeStatsArray = map.get(group);
+                for (Map.Entry<String, List<ConsumeStats>> entry : map.entrySet()) {
+                    String group = entry.getKey();
+                    List<ConsumeStats> consumeStatsArray = entry.getValue();
                     for (ConsumeStats consumeStats : consumeStatsArray) {
                         List<MessageQueue> mqList = new LinkedList<MessageQueue>();
                         mqList.addAll(consumeStats.getOffsetTable().keySet());

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/cluster/ClusterListSubCommand.java
Patch:
@@ -241,7 +241,7 @@ private void printClusterBaseInfo(final DefaultMQAdminExt defaultMQAdminExt) thr
                         System.out.printf("%-16s  %-22s  %-4s  %-22s %-16s %19s %19s %10s\n",//
                                 clusterName,//
                                 brokerName,//
-                                next1.getKey().longValue(),//
+                                String.valueOf(next1.getKey()),//
                                 next1.getValue(),//
                                 version,//
                                 String.format("%9.2f(%s,%sms)", in, sendThreadPoolQueueSize, sendThreadPoolQueueHeadWaitTimeMills),//

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/message/PrintMessageSubCommand.java
Patch:
@@ -153,7 +153,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
     public static long timestampFormat(final String value) {
         long timestamp = 0;
         try {
-            timestamp = Long.valueOf(value);
+            timestamp = Long.parseLong(value);
         } catch (NumberFormatException e) {
 
             timestamp = UtilAll.parseDate(value, UtilAll.yyyy_MM_dd_HH_mm_ss_SSS).getTime();

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/offset/ResetOffsetByTimeCommand.java
Patch:
@@ -93,7 +93,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
 
             try {
                 if (timestamp == 0) {
-                    timestamp = Long.valueOf(timeStampStr);
+                    timestamp = Long.parseLong(timeStampStr);
                 }
             } catch (NumberFormatException e) {
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/offset/ResetOffsetByTimeOldCommand.java
Patch:
@@ -81,7 +81,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
             String timeStampStr = commandLine.getOptionValue("s").trim();
             long timestamp = 0;
             try {
-                timestamp = Long.valueOf(timeStampStr);
+                timestamp = Long.parseLong(timeStampStr);
             } catch (NumberFormatException e) {
 
                 Date date = UtilAll.parseDate(timeStampStr, UtilAll.yyyy_MM_dd_HH_mm_ss_SSS);

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/cluster/ClusterListSubCommand.java
Patch:
@@ -247,12 +247,12 @@ private void printClusterBaseInfo(final DefaultMQAdminExt defaultMQAdminExt) thr
                         double hour = 0.0;
                         double space = 0.0;
 
-                        if (earliestMessageTimeStamp != null) {
+                        if (earliestMessageTimeStamp != null && earliestMessageTimeStamp.length() > 0) {
                             long mills = System.currentTimeMillis() - Long.valueOf(earliestMessageTimeStamp);
                             hour = mills / 1000.0 / 60.0 / 60.0;
                         }
 
-                        if (commitLogDiskRatio != null) {
+                        if (commitLogDiskRatio != null && commitLogDiskRatio.length() > 0) {
                             space = Double.valueOf(commitLogDiskRatio);
                         }
 

File: rocketmq-broker/src/test/java/com/alibaba/rocketmq/broker/api/SendMessageTest.java
Patch:
@@ -73,7 +73,7 @@ public void test_sendMessage() throws Exception {
                 requestHeader.setProperties(MessageDecoder.messageProperties2String(msg.getProperties()));
 
                 SendResult result = client.sendMessage("127.0.0.1:10911", "brokerName", msg, requestHeader, 1000 * 5,
-                        CommunicationMode.SYNC, new SendMessageContext());
+                        CommunicationMode.SYNC, new SendMessageContext(), null);
                 System.out.println(i + "\t" + result);
             } catch (Exception e) {
                 e.printStackTrace();

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/DefaultMQPushConsumer.java
Patch:
@@ -132,7 +132,7 @@ public class DefaultMQPushConsumer extends ClientConfig implements MQPushConsume
 
     private int maxReconsumeTimes = 16;
     private long suspendCurrentQueueTimeMillis = 1000;
-    private long consumeTimeout = 2;
+    private long consumeTimeout = 15;
 
 
     public DefaultMQPushConsumer() {

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MQVersion.java
Patch:
@@ -21,7 +21,7 @@
  */
 public class MQVersion {
 
-    public static final int CurrentVersion = Version.V3_5_7_SNAPSHOT.ordinal();
+    public static final int CurrentVersion = Version.V3_5_8_SNAPSHOT.ordinal();
 
 
     public static String getVersionDesc(int value) {

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/constant/LoggerName.java
Patch:
@@ -36,4 +36,5 @@ public class LoggerName {
     public static final String RocketmqAuthorizeLoggerName = "RocketmqAuthorize";
     public static final String DuplicationLoggerName = "RocketmqDuplication";
     public static final String ProtectionLoggerName = "RocketmqProtection";
+    public static final String WaterMarkLoggerName = "RocketmqWaterMark";
 }

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/message/MessageClientIDSetter.java
Patch:
@@ -119,7 +119,7 @@ public static byte[] getIPFromID(String msgID) {
         return result;
     }
     
-    private static synchronized String createUniqID() {
+    public static synchronized String createUniqID() {
             long current = System.currentTimeMillis();
             if (current >= nextStartTime) {
                 setStartTime(current);

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/benchmark/Producer.java
Patch:
@@ -157,6 +157,7 @@ public void run() {
                             log.error("[BENCHMARK_PRODUCER] Send Exception", e);
                         } catch (MQBrokerException e) {
                             statsBenchmark.getReceiveResponseFailedCount().incrementAndGet();
+                            log.error("[BENCHMARK_PRODUCER] Send Exception", e);
                             try {
                                 Thread.sleep(3000);
                             } catch (InterruptedException e1) {

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyClientConfig.java
Patch:
@@ -40,7 +40,7 @@ public class NettyClientConfig {
     private int clientSocketSndBufSize = NettySystemConfig.socketSndbufSize;
     private int clientSocketRcvBufSize = NettySystemConfig.socketRcvbufSize;
     private boolean clientPooledByteBufAllocatorEnable = false;
-    private boolean clientCloseSocketIfTimeout = true;
+    private boolean clientCloseSocketIfTimeout = false;
 
     public boolean isClientCloseSocketIfTimeout() {
         return clientCloseSocketIfTimeout;

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRequestProcessor.java
Patch:
@@ -29,4 +29,5 @@
 public interface NettyRequestProcessor {
     RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand request)
             throws Exception;
+    boolean rejectRequest();
 }

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettySystemConfig.java
Patch:
@@ -36,7 +36,7 @@ public class NettySystemConfig {
     public static int socketRcvbufSize = //
             Integer.parseInt(System.getProperty(SystemPropertySocketRcvbufSize, "65535"));
     public static final int ClientAsyncSemaphoreValue = //
-            Integer.parseInt(System.getProperty(SystemPropertyClientAsyncSemaphoreValue, "2048"));
+            Integer.parseInt(System.getProperty(SystemPropertyClientAsyncSemaphoreValue, "65535"));
     public static final int ClientOnewaySemaphoreValue = //
-            Integer.parseInt(System.getProperty(SystemPropertyClientOnewaySemaphoreValue, "2048"));
+            Integer.parseInt(System.getProperty(SystemPropertyClientOnewaySemaphoreValue, "65535"));
 }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -117,7 +117,7 @@ public class MessageStoreConfig {
     private boolean debugLockEnable = false;
     private boolean duplicationEnable = false;
     private boolean diskFallRecorded = true;
-    private long osPageCacheBusyTimeOutMills = 2000;
+    private long osPageCacheBusyTimeOutMills = 1000;
     private int defaultQueryMaxNum = 32;
     
     public boolean isDebugLockEnable() {

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -37,7 +37,6 @@
 import com.alibaba.rocketmq.tools.command.offset.CloneGroupOffsetCommand;
 import com.alibaba.rocketmq.tools.command.offset.ResetOffsetByTimeCommand;
 import com.alibaba.rocketmq.tools.command.stats.StatsAllSubCommand;
-import com.alibaba.rocketmq.tools.command.stats.TpsStatsSubCommand;
 import com.alibaba.rocketmq.tools.command.topic.*;
 import com.alibaba.rocketmq.tools.github.SyncDocsToGithubSubCommand;
 import org.apache.commons.cli.CommandLine;
@@ -148,7 +147,6 @@ public static void initCommand() {
         initCommand(new ConsumerProgressSubCommand());
         initCommand(new ConsumerStatusSubCommand());
         initCommand(new CloneGroupOffsetCommand());
-        initCommand(new ConsumeOffsetRankSubCommand());
 
         initCommand(new ClusterListSubCommand());
         initCommand(new TopicListSubCommand());
@@ -165,7 +163,6 @@ public static void initCommand() {
 
         initCommand(new StartMonitoringSubCommand());
         initCommand(new StatsAllSubCommand());
-        initCommand(new TpsStatsSubCommand());
 
         initCommand(new SyncDocsToGithubSubCommand());
         initCommand(new AllocateMQSubCommand());

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/broker/SendMsgStatusCommand.java
Patch:
@@ -63,7 +63,7 @@ public Options buildCommandlineOptions(Options options) {
 
     @Override
     public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
-        final DefaultMQProducer producer = new DefaultMQProducer("PID_SMSC");
+        final DefaultMQProducer producer = new DefaultMQProducer("PID_SMSC",rpcHook);
         producer.setInstanceName("PID_SMSC_" + System.currentTimeMillis());
 
         try {

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/message/QueryMsgByOffsetSubCommand.java
Patch:
@@ -72,7 +72,7 @@ public Options buildCommandlineOptions(Options options) {
     @Override
     public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
         DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
-        DefaultMQPullConsumer defaultMQPullConsumer = new DefaultMQPullConsumer(MixAll.TOOLS_CONSUMER_GROUP);
+        DefaultMQPullConsumer defaultMQPullConsumer = new DefaultMQPullConsumer(MixAll.TOOLS_CONSUMER_GROUP,rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
         defaultMQPullConsumer.setInstanceName(Long.toString(System.currentTimeMillis()));

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/ConsumeQueue.java
Patch:
@@ -295,7 +295,7 @@ public long getLastOffset() {
     }
 
 
-    public boolean commit(final int flushLeastPages) {
+    public boolean flush(final int flushLeastPages) {
         return this.mappedFileQueue.flush(flushLeastPages);
     }
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -1558,7 +1558,7 @@ private void doFlush(int retryTimes) {
                 for (ConsumeQueue cq : maps.values()) {
                     boolean result = false;
                     for (int i = 0; i < retryTimes && !result; i++) {
-                        result = cq.commit(flushConsumeQueueLeastPages);
+                        result = cq.flush(flushConsumeQueueLeastPages);
                     }
                 }
             }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/AppendMessageCallback.java
Patch:
@@ -36,6 +36,6 @@ public interface AppendMessageCallback {
      *
      * @return How many bytes to write
      */
-    public AppendMessageResult doAppend(final long fileFromOffset, final ByteBuffer byteBuffer,
-                                        final int maxBlank, final MessageExtBrokerInner msg);
+    AppendMessageResult doAppend(final long fileFromOffset, final ByteBuffer byteBuffer,
+                                 final int maxBlank, final MessageExtBrokerInner msg);
 }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/CommitLog.java
Patch:
@@ -1056,8 +1056,8 @@ public AppendMessageResult doAppend(final long fileFromOffset, final ByteBuffer
             // PHY OFFSET
             long wroteOffset = fileFromOffset + byteBuffer.position();
 
-
-            String msgId = MessageDecoder.createMessageId(this.msgIdMemory, msgInner.getStoreHostBytes(), wroteOffset);
+            this.resetByteBuffer(hostHolder, 8);
+            String msgId = MessageDecoder.createMessageId(this.msgIdMemory, msgInner.getStoreHostBytes(hostHolder), wroteOffset);
 
             // Record ConsumeQueue information
             keyBuilder.setLength(0);

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/AppendMessageCallback.java
Patch:
@@ -37,5 +37,5 @@ public interface AppendMessageCallback {
      * @return How many bytes to write
      */
     public AppendMessageResult doAppend(final long fileFromOffset, final ByteBuffer byteBuffer,
-                                        final int maxBlank, final Object msg);
+                                        final int maxBlank, final MessageExtBrokerInner msg);
 }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/CommitLog.java
Patch:
@@ -1049,10 +1049,10 @@ public ByteBuffer getMsgStoreItemMemory() {
         }
 
 
-        public AppendMessageResult doAppend(final long fileFromOffset, final ByteBuffer byteBuffer, final int maxBlank, final Object msg) {
+        public AppendMessageResult doAppend(final long fileFromOffset, final ByteBuffer byteBuffer, final int maxBlank, final MessageExtBrokerInner msgInner) {
             long begin = System.currentTimeMillis();
             // STORETIMESTAMP + STOREHOSTADDRESS + OFFSET <br>
-            MessageExtBrokerInner msgInner = (MessageExtBrokerInner) msg;
+
             // PHY OFFSET
             long wroteOffset = fileFromOffset + byteBuffer.position();
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/MappedFile.java
Patch:
@@ -199,7 +199,7 @@ public FileChannel getFileChannel() {
         return fileChannel;
     }
 
-    public AppendMessageResult appendMessage(final Object msg, final AppendMessageCallback cb) {
+    public AppendMessageResult appendMessage(final MessageExtBrokerInner msg, final AppendMessageCallback cb) {
         assert msg != null;
         assert cb != null;
 

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/message/MessageDecoder.java
Patch:
@@ -53,7 +53,7 @@ public static String createMessageId(final ByteBuffer input, final ByteBuffer ad
         input.put(addr);
         input.putLong(offset);
 
-        return UtilAll.bytes2string(input.array());
+        return UtilAll.bytes2stringNew(input.array());
     }
 
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/MappedFile.java
Patch:
@@ -322,12 +322,12 @@ public int commit(final int commitLeastPages) {
                         try {
                             this.fileChannel.position(this.committedPosition.get());
                             this.fileChannel.write(byteBuffer);
+                            this.committedPosition.set(value);
                         } catch (IOException e) {
                             log.error("Error occurred when commit data to FileChannel.", e);
                         }
                     }
                 }
-                this.committedPosition.set(value);
                 this.release();
             } else {
                 log.warn("in commit, hold failed, commit offset = " + this.committedPosition.get());

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/MappedFileQueue.java
Patch:
@@ -312,7 +312,7 @@ public long getMinOffset() {
     public long getMaxOffset() {
         MappedFile mappedFile = getLastMappedFile();
         if (mappedFile != null) {
-            return mappedFile.getFileFromOffset() + mappedFile.getWrotePosition();
+            return mappedFile.getFileFromOffset() + mappedFile.getReadPosition();
         }
         return 0;
     }

File: rocketmq-store/src/test/java/com/alibaba/rocketmq/store/MappedFileTest.java
Patch:
@@ -54,7 +54,7 @@ public void test_write_read() {
             assertTrue(result);
             System.out.println("write OK");
 
-            SelectMappedBufferResult selectMappedBufferResult = mappedFile.selectMapedBuffer(0);
+            SelectMappedBufferResult selectMappedBufferResult = mappedFile.selectMappedBuffer(0);
             byte[] data = new byte[StoreMessage.length()];
             selectMappedBufferResult.getByteBuffer().get(data);
             String readString = new String(data);
@@ -88,7 +88,7 @@ public void test_jvm_crashed() {
             assertTrue(result);
             System.out.println("write OK");
 
-            SelectMappedBufferResult selectMappedBufferResult = mappedFile.selectMapedBuffer(0);
+            SelectMappedBufferResult selectMappedBufferResult = mappedFile.selectMappedBuffer(0);
             selectMappedBufferResult.release();
             mappedFile.shutdown(1000);
 

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/plugin/AbstractPluginMessageStore.java
Patch:
@@ -108,12 +108,12 @@ public MessageExt lookMessageByOffset(long commitLogOffset) {
     }
 
     @Override
-    public SelectMapedBufferResult selectOneMessageByOffset(long commitLogOffset) {
+    public SelectMappedBufferResult selectOneMessageByOffset(long commitLogOffset) {
         return next.selectOneMessageByOffset(commitLogOffset);
     }
 
     @Override
-    public SelectMapedBufferResult selectOneMessageByOffset(long commitLogOffset, int msgSize) {
+    public SelectMappedBufferResult selectOneMessageByOffset(long commitLogOffset, int msgSize) {
         return next.selectOneMessageByOffset(commitLogOffset, msgSize);
     }
 
@@ -153,7 +153,7 @@ public long getMessageTotalInQueue(String topic, int queueId) {
     }
 
     @Override
-    public SelectMapedBufferResult getCommitLogData(long offset) {
+    public SelectMappedBufferResult getCommitLogData(long offset) {
         return next.getCommitLogData(offset);
     }
 

File: rocketmq-broker/src/test/java/com/alibaba/rocketmq/broker/plugin/MockMessageStore.java
Patch:
@@ -108,14 +108,14 @@ public MessageExt lookMessageByOffset(long commitLogOffset) {
 
 
     @Override
-    public SelectMapedBufferResult selectOneMessageByOffset(long commitLogOffset) {
+    public SelectMappedBufferResult selectOneMessageByOffset(long commitLogOffset) {
 
         return null;
     }
 
 
     @Override
-    public SelectMapedBufferResult selectOneMessageByOffset(long commitLogOffset, int msgSize) {
+    public SelectMappedBufferResult selectOneMessageByOffset(long commitLogOffset, int msgSize) {
 
         return null;
     }
@@ -176,7 +176,7 @@ public long getMessageTotalInQueue(String topic, int queueId) {
 
 
     @Override
-    public SelectMapedBufferResult getCommitLogData(long offset) {
+    public SelectMappedBufferResult getCommitLogData(long offset) {
 
         return null;
     }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/SelectMappedBufferResult.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * @author shijia.wxr
  */
-public class SelectMapedBufferResult {
+public class SelectMappedBufferResult {
 
     private final long startOffset;
 
@@ -33,7 +33,7 @@ public class SelectMapedBufferResult {
     private MappedFile mappedFile;
 
 
-    public SelectMapedBufferResult(long startOffset, ByteBuffer byteBuffer, int size, MappedFile mappedFile) {
+    public SelectMappedBufferResult(long startOffset, ByteBuffer byteBuffer, int size, MappedFile mappedFile) {
         this.startOffset = startOffset;
         this.byteBuffer = byteBuffer;
         this.size = size;

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/TransientStorePool.java
Patch:
@@ -14,7 +14,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package com.alibaba.rocketmq.store;
 
 import com.alibaba.rocketmq.common.constant.LoggerName;

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/schedule/ScheduleMessageService.java
Patch:
@@ -256,7 +256,7 @@ public void executeOnTimeup() {
             long failScheduleOffset = offset;
 
             if (cq != null) {
-                SelectMapedBufferResult bufferCQ = cq.getIndexBuffer(this.offset);
+                SelectMappedBufferResult bufferCQ = cq.getIndexBuffer(this.offset);
                 if (bufferCQ != null) {
                     try {
                         long nextOffset = offset;

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/stats/BrokerStatsManager.java
Patch:
@@ -14,7 +14,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package com.alibaba.rocketmq.store.stats;
 
 import com.alibaba.rocketmq.common.ThreadFactoryImpl;

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/quickstart/Producer.java
Patch:
@@ -26,7 +26,6 @@
 public class Producer {
     public static void main(String[] args) throws MQClientException, InterruptedException {
         DefaultMQProducer producer = new DefaultMQProducer("please_rename_unique_group_name");
-
         producer.start();
 
         for (int i = 0; i < 1000; i++) {

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/StoreCheckpoint.java
Patch:
@@ -44,12 +44,12 @@ public class StoreCheckpoint {
 
     public StoreCheckpoint(final String scpPath) throws IOException {
         File file = new File(scpPath);
-        MapedFile.ensureDirOK(file.getParent());
+        MappedFile.ensureDirOK(file.getParent());
         boolean fileExists = file.exists();
 
         this.randomAccessFile = new RandomAccessFile(file, "rw");
         this.fileChannel = this.randomAccessFile.getChannel();
-        this.mappedByteBuffer = fileChannel.map(MapMode.READ_WRITE, 0, MapedFile.OS_PAGE_SIZE);
+        this.mappedByteBuffer = fileChannel.map(MapMode.READ_WRITE, 0, MappedFile.OS_PAGE_SIZE);
 
         if (fileExists) {
             log.info("store checkpoint file exists, " + scpPath);
@@ -73,7 +73,7 @@ public void shutdown() {
         this.flush();
 
         // unmap mappedByteBuffer
-        MapedFile.clean(this.mappedByteBuffer);
+        MappedFile.clean(this.mappedByteBuffer);
 
         try {
             this.fileChannel.close();

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/TransientStorePool.java
Patch:
@@ -74,7 +74,7 @@ public void returnBuffer(ByteBuffer byteBuffer) {
     public ByteBuffer borrowBuffer() {
         ByteBuffer buffer = availableBuffers.pollFirst();
         if (availableBuffers.size() < poolSize * 0.4) {
-            log.info("TransientStorePool only remain {} GB.", availableBuffers.size());
+            log.info("TransientStorePool only remain {} sheet.", availableBuffers.size());
         }
         return buffer;
     }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/MapedFile.java
Patch:
@@ -261,7 +261,7 @@ public int flush(final int flushLeastPages) {
         if (this.isAbleToFlush(flushLeastPages)) {
             long begin = System.currentTimeMillis();
             if (this.hold()) {
-                int value = this.wrotePostion.get();
+                int value = writeBuffer == null ? this.wrotePostion.get() : this.committedPosition.get();
 
                 if (writeBuffer != null) {
                     try {
@@ -277,7 +277,7 @@ public int flush(final int flushLeastPages) {
                 this.release();
             } else {
                 log.warn("in flush, hold failed, flush offset = " + this.flushedPosition.get());
-                this.flushedPosition.set(this.committedPosition.get());
+                this.flushedPosition.set(writeBuffer == null ? this.wrotePostion.get() : this.committedPosition.get());
             }
             log.info("flush cost : {}", System.currentTimeMillis() - begin);
         }
@@ -304,6 +304,7 @@ public int commit(final int commitLeastPages) {
                         byteBuffer.limit(value);
 
                         try {
+                            this.fileChannel.position(this.committedPosition.get());
                             this.fileChannel.write(byteBuffer);
                         } catch (IOException e) {
                             log.error("Error occurred when commit data to filechannel.", e);

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -318,7 +318,7 @@ public PutMessageResult putMessage(MessageExtBrokerInner msg) {
         PutMessageResult result = this.commitLog.putMessage(msg);
 
         long eclipseTime = this.getSystemClock().now() - beginTime;
-        if (eclipseTime > 1000) {
+        if (eclipseTime > 100) {
             log.warn("putMessage not in lock eclipse time(ms)={}, bodyLength={}", eclipseTime, msg.getBody().length);
         }
         this.storeStatsService.setPutMessageEntireTimeMax(eclipseTime);

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerController.java
Patch:
@@ -190,8 +190,8 @@ public boolean initialize() throws CloneNotSupportedException {
             fastConfig.setListenPort(nettyServerConfig.getListenPort() - 2);
             this.fastRemotingServer = new NettyRemotingServer(fastConfig, this.clientHousekeepingService);
             this.sendMessageExecutor = new BrokerFixedThreadPoolExecutor(//
-                    this.brokerConfig.getSendMessageThreadPoolNums(),//
-                    this.brokerConfig.getSendMessageThreadPoolNums(),//
+                    1,//
+                    1,//
                     1000 * 60,//
                     TimeUnit.MILLISECONDS,//
                     this.sendThreadPoolQueue,//

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/BrokerConfig.java
Patch:
@@ -52,6 +52,7 @@ public class BrokerConfig {
     private boolean autoCreateSubscriptionGroup = true;
     private String messageStorePlugIn = "";
 
+    @Deprecated
     private int sendMessageThreadPoolNums = 16 + Runtime.getRuntime().availableProcessors() * 4;
     private int pullMessageThreadPoolNums = 16 + Runtime.getRuntime().availableProcessors() * 2;
     private int adminBrokerThreadPoolNums = 16;
@@ -270,12 +271,12 @@ public void setBrokerIP2(String brokerIP2) {
         this.brokerIP2 = brokerIP2;
     }
 
-
+    @Deprecated
     public int getSendMessageThreadPoolNums() {
         return sendMessageThreadPoolNums;
     }
 
-
+    @Deprecated
     public void setSendMessageThreadPoolNums(int sendMessageThreadPoolNums) {
         this.sendMessageThreadPoolNums = sendMessageThreadPoolNums;
     }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/MapedFile.java
Patch:
@@ -452,7 +452,7 @@ public boolean destroy(final long intervalForcibly) {
     }
 
     public int getWrotePostion() {
-        return wrotePostion.get();
+        return writeBuffer != null ? committedPosition.get() : wrotePostion.get();
     }
 
     public void setWrotePostion(int pos) {

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -44,12 +44,12 @@ public class MessageStoreConfig {
     // CommitLog flush interval
     // flush data to disk
     @ImportantField
-    private int flushIntervalCommitLog = 100;
+    private int flushIntervalCommitLog = 500;
 
     // Only used if TransientStorePool enabled
-    // flush data to FileChannel
+    // commit data to FileChannel
     @ImportantField
-    private int commitIntervalCommitLog = 500;
+    private int commitIntervalCommitLog = 200;
 
     // Whether schedule flush,default is real-time
     @ImportantField

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/MapedFile.java
Patch:
@@ -286,7 +286,9 @@ public int commit(final int commitLeastPages) {
             if (this.hold()) {
                 // DirectMemory may be not pageAligned, so we back 1.x page size.
                 int value = this.wrotePostion.get() - this.wrotePostion.get() % OS_PAGE_SIZE - OS_PAGE_SIZE;
-                if (isFull()) {
+
+                //commitLeastPages=0 means must commit to FileChannel immediately
+                if (commitLeastPages == 0 || isFull()) {
                     value = this.wrotePostion.get();
                 }
 

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerController.java
Patch:
@@ -269,7 +269,7 @@ public void run() {
                 @Override
                 public void run() {
                     try {
-                        log.info("dispatch behind commit log {} bytes", BrokerController.this.getMessageStore().dispatchBehindBytes());
+                        log.info("dispatch behind flush log {} bytes", BrokerController.this.getMessageStore().dispatchBehindBytes());
                     } catch (Throwable e) {
                         log.error("schedule dispatchBehindBytes error.", e);
                     }

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/EndTransactionProcessor.java
Patch:
@@ -71,7 +71,7 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand
                 }
 
                 case MessageSysFlag.TransactionCommitType: {
-                    logTransaction.warn("check producer[{}] transaction state, the producer commit the message.\n"//
+                    logTransaction.warn("check producer[{}] transaction state, the producer flush the message.\n"//
                                     + "RequestHeader: {} Remark: {}",//
                             RemotingHelper.parseChannelRemoteAddr(ctx.channel()), //
                             requestHeader.toString(),//
@@ -139,7 +139,7 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand
 
             if (msgExt.getCommitLogOffset() != requestHeader.getCommitLogOffset()) {
                 response.setCode(ResponseCode.SYSTEM_ERROR);
-                response.setRemark("the commit log offset wrong");
+                response.setRemark("the flush log offset wrong");
                 return response;
             }
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/AppendMessageResult.java
Patch:
@@ -17,7 +17,7 @@
 package com.alibaba.rocketmq.store;
 
 /**
- * When write a message to the commit log, returns results
+ * When write a message to the flush log, returns results
  *
  * @author shijia.wxr
  */

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/AppendMessageStatus.java
Patch:
@@ -17,7 +17,7 @@
 package com.alibaba.rocketmq.store;
 
 /**
- * When write a message to the commit log, returns code
+ * When write a message to the flush log, returns code
  *
  * @author shijia.wxr
  *

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/TransientStorePool.java
Patch:
@@ -41,7 +41,7 @@ public class TransientStorePool {
     private final Deque<ByteBuffer> availableBuffers;
 
     public TransientStorePool(final MessageStoreConfig storeConfig) {
-        this.poolSize = storeConfig.getTransientStorePoolSizeInGB();
+        this.poolSize = storeConfig.getTransientStorePoolSize();
         this.fileSize = storeConfig.getMapedFileSizeCommitLog();
         this.availableBuffers = new LinkedBlockingDeque<ByteBuffer>();
 

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyClientConfig.java
Patch:
@@ -40,7 +40,7 @@ public class NettyClientConfig {
     private int clientSocketSndBufSize = NettySystemConfig.socketSndbufSize;
     private int clientSocketRcvBufSize = NettySystemConfig.socketRcvbufSize;
     private boolean clientPooledByteBufAllocatorEnable = false;
-    private boolean clientCloseSocketIfTimeout = true;
+    private boolean clientCloseSocketIfTimeout = false;
 
     public boolean isClientCloseSocketIfTimeout() {
         return clientCloseSocketIfTimeout;

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/broker/SendMsgStatusCommand.java
Patch:
@@ -63,7 +63,7 @@ public Options buildCommandlineOptions(Options options) {
 
     @Override
     public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
-        final DefaultMQProducer producer = new DefaultMQProducer("PID_SMSC");
+        final DefaultMQProducer producer = new DefaultMQProducer("PID_SMSC",rpcHook);
         producer.setInstanceName("PID_SMSC_" + System.currentTimeMillis());
 
         try {

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/message/QueryMsgByOffsetSubCommand.java
Patch:
@@ -72,7 +72,7 @@ public Options buildCommandlineOptions(Options options) {
     @Override
     public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
         DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
-        DefaultMQPullConsumer defaultMQPullConsumer = new DefaultMQPullConsumer(MixAll.TOOLS_CONSUMER_GROUP);
+        DefaultMQPullConsumer defaultMQPullConsumer = new DefaultMQPullConsumer(MixAll.TOOLS_CONSUMER_GROUP,rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
         defaultMQPullConsumer.setInstanceName(Long.toString(System.currentTimeMillis()));

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -1182,6 +1182,8 @@ private HashMap<String, String> prepareRuntimeInfo() {
 
         runtimeInfo.put("sendThreadPoolQueueHeadWaitTimeMills", String.valueOf(this.brokerController.headSlowTimeMills4SendThreadPoolQueue()));
         runtimeInfo.put("pullThreadPoolQueueHeadWaitTimeMills", String.valueOf(this.brokerController.headSlowTimeMills4PullThreadPoolQueue()));
+        runtimeInfo.put("earliestMessageTimeStamp", String.valueOf(this.brokerController.getMessageStore().getEarliestMessageTime()));
+        runtimeInfo.put("startAcceptSendRequestTimeStamp", String.valueOf(this.brokerController.getBrokerConfig().getStartAcceptSendRequestTimeStamp()));
 
 
         return runtimeInfo;

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/CommitLog.java
Patch:
@@ -665,7 +665,7 @@ public PutMessageResult putMessage(final MessageExtBrokerInner msg) {
      * occurs, it returns -1
      */
     public long pickupStoretimestamp(final long offset, final int size) {
-        if (offset > this.getMinOffset()) {
+        if (offset >= this.getMinOffset()) {
             SelectMapedBufferResult result = this.getMessage(offset, size);
             if (null != result) {
                 try {

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/MessageStore.java
Patch:
@@ -80,6 +80,7 @@ GetMessageResult getMessage(final String group, final String topic, final int qu
 
 
     long getEarliestMessageTime(final String topic, final int queueId);
+    long getEarliestMessageTime();
 
 
     long getMessageStoreTimeStamp(final String topic, final int queueId, final long offset);

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/cluster/ClusterListSubCommand.java
Patch:
@@ -237,7 +237,7 @@ private void printClusterBaseInfo(final DefaultMQAdminExt defaultMQAdminExt) thr
                         } catch (Exception e) {
                         }
 
-                        System.out.printf("%-16s  %-22s  %-4s  %-22s %-16s %-19s %-19s\n",//
+                        System.out.printf("%-16s  %-22s  %-4s  %-22s %-16s %19s %19s\n",//
                                 clusterName,//
                                 brokerName,//
                                 next1.getKey().longValue(),//

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/BrokerConfig.java
Patch:
@@ -65,8 +65,8 @@ public class BrokerConfig {
     private boolean rejectTransactionMessage = false;
     @ImportantField
     private boolean fetchNamesrvAddrByAddressServer = false;
-    private int sendThreadPoolQueueCapacity = 100000;
-    private int pullThreadPoolQueueCapacity = 100000;
+    private int sendThreadPoolQueueCapacity = 10000;
+    private int pullThreadPoolQueueCapacity = 10000;
 
     private int filterServerNums = 0;
 

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/latency/BrokerFastFailure.java
Patch:
@@ -45,7 +45,7 @@ private void cleanExpiredRequest() {
                     }
 
                     final RequestTask rt = castRunnable(runnable);
-                    rt.returnResponse(RemotingSysResponseCode.SYSTEM_BUSY, String.format("[PC_CLEAN_QUEUE]broker busy, start flow control for a while, period in queue: %sms", System.currentTimeMillis() - rt.getCreateTimestamp()));
+                    rt.returnResponse(RemotingSysResponseCode.SYSTEM_BUSY, String.format("[PCBUSY_CLEAN_QUEUE]broker busy, start flow control for a while, period in queue: %sms, size of queue: %d", System.currentTimeMillis() - rt.getCreateTimestamp(), this.brokerController.getSendThreadPoolQueue().size()));
                 } else {
                     break;
                 }
@@ -69,7 +69,7 @@ private void cleanExpiredRequest() {
                     if (behind >= this.brokerController.getBrokerConfig().getWaitTimeMillsInSendQueue()) {
                         if (this.brokerController.getSendThreadPoolQueue().remove(runnable)) {
                             rt.setStopRun(true);
-                            rt.returnResponse(RemotingSysResponseCode.SYSTEM_BUSY, String.format("[TIMEOUT_CLEAN_QUEUE]broker busy, start flow control for a while, period in queue: %sms", behind));
+                            rt.returnResponse(RemotingSysResponseCode.SYSTEM_BUSY, String.format("[TIMEOUT_CLEAN_QUEUE]broker busy, start flow control for a while, period in queue: %sms, size of queue: %d", behind, this.brokerController.getSendThreadPoolQueue().size()));
                         }
                     } else {
                         break;

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/BrokerConfig.java
Patch:
@@ -95,7 +95,7 @@ public class BrokerConfig {
     private boolean disableConsumeIfConsumerReadSlowly = false;
     private long consumerFallbehindThreshold = 1024 * 1024 * 1024 * 16;
 
-    private long waitTimeMillsInSendQueue = 600;
+    private long waitTimeMillsInSendQueue = 200;
 
     private long startAcceptSendRequestTimeStamp = 0L;
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/MessageStore.java
Patch:
@@ -128,4 +128,6 @@ QueryMessageResult queryMessage(final String topic, final String key, final int
     void setConfirmOffset(long phyOffset);
 
     boolean isOSPageCacheBusy();
+
+    long lockTimeMills();
 }

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerController.java
Patch:
@@ -415,14 +415,16 @@ public void protectBroker() {
         }
     }
 
-    public long headSlowTimeMills(BlockingQueue<Runnable> q){
+    public long headSlowTimeMills(BlockingQueue<Runnable> q) {
         long slowTimeMills = 0;
         final Runnable peek = q.peek();
         if (peek != null) {
             RequestTask rt = BrokerFastFailure.castRunnable(peek);
             slowTimeMills = this.messageStore.now() - rt.getCreateTimestamp();
         }
 
+        if (slowTimeMills < 0) slowTimeMills = 0;
+
         return slowTimeMills;
     }
 

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerController.java
Patch:
@@ -21,6 +21,7 @@
 import com.alibaba.rocketmq.broker.client.rebalance.RebalanceLockManager;
 import com.alibaba.rocketmq.broker.filtersrv.FilterServerManager;
 import com.alibaba.rocketmq.broker.latency.BrokerFastFailure;
+import com.alibaba.rocketmq.broker.latency.BrokerFixedThreadPoolExecutor;
 import com.alibaba.rocketmq.broker.longpolling.NotifyMessageArrivingListener;
 import com.alibaba.rocketmq.broker.longpolling.PullRequestHoldService;
 import com.alibaba.rocketmq.broker.mqtrace.ConsumeMessageHook;
@@ -188,15 +189,15 @@ public boolean initialize() throws CloneNotSupportedException {
             NettyServerConfig fastConfig = (NettyServerConfig) this.nettyServerConfig.clone();
             fastConfig.setListenPort(nettyServerConfig.getListenPort() - 2);
             this.fastRemotingServer = new NettyRemotingServer(fastConfig, this.clientHousekeepingService);
-            this.sendMessageExecutor = new ThreadPoolExecutor(//
+            this.sendMessageExecutor = new BrokerFixedThreadPoolExecutor(//
                     this.brokerConfig.getSendMessageThreadPoolNums(),//
                     this.brokerConfig.getSendMessageThreadPoolNums(),//
                     1000 * 60,//
                     TimeUnit.MILLISECONDS,//
                     this.sendThreadPoolQueue,//
                     new ThreadFactoryImpl("SendMessageThread_"));
 
-            this.pullMessageExecutor = new ThreadPoolExecutor(//
+            this.pullMessageExecutor = new BrokerFixedThreadPoolExecutor(//
                     this.brokerConfig.getPullMessageThreadPoolNums(),//
                     this.brokerConfig.getPullMessageThreadPoolNums(),//
                     1000 * 60,//

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerController.java
Patch:
@@ -418,7 +418,7 @@ public long headSlowTimeMills(BlockingQueue<Runnable> q){
         long slowTimeMills = 0;
         final Runnable peek = q.peek();
         if (peek != null) {
-            RequestTask rt = (RequestTask) peek;
+            RequestTask rt = BrokerFastFailure.castRunnable(peek);
             slowTimeMills = this.messageStore.now() - rt.getCreateTimestamp();
         }
 

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/benchmark/Producer.java
Patch:
@@ -157,6 +157,7 @@ public void run() {
                             log.error("[BENCHMARK_PRODUCER] Send Exception", e);
                         } catch (MQBrokerException e) {
                             statsBenchmark.getReceiveResponseFailedCount().incrementAndGet();
+                            log.error("[BENCHMARK_PRODUCER] Send Exception", e);
                             try {
                                 Thread.sleep(3000);
                             } catch (InterruptedException e1) {

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/latency/BrokerFastFailure.java
Patch:
@@ -55,7 +55,7 @@ private void cleanExpiredRequest() {
                     return;
                 }
                 final RequestTask rt = (RequestTask) runnable;
-                rt.returnResponse(RemotingSysResponseCode.SYSTEM_BUSY, "broker busy, return failure to client at once");
+                rt.returnResponse(RemotingSysResponseCode.SYSTEM_BUSY, String.format("[PC_CLEAN_QUEUE]broker busy, start flow control for a while, period in queue: %sms", System.currentTimeMillis() - rt.getCreateTimestamp()));
             } catch (Exception e) {
             }
         }

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -388,7 +388,7 @@ private RemotingCommand sendMessage(final ChannelHandlerContext ctx, //
                     break;
                 case OS_PAGECACHE_BUSY:
                     response.setCode(ResponseCode.SYSTEM_ERROR);
-                    response.setRemark("OS page cache busy, please try another machine");
+                    response.setRemark("[PC_SYNCHRONIZED]broker busy, start flow control for a while");
                     break;
                 case UNKNOWN_ERROR:
                     response.setCode(ResponseCode.SYSTEM_ERROR);

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/DefaultMQPushConsumer.java
Patch:
@@ -132,7 +132,7 @@ public class DefaultMQPushConsumer extends ClientConfig implements MQPushConsume
 
     private int maxReconsumeTimes = 16;
     private long suspendCurrentQueueTimeMillis = 1000;
-    private long consumeTimeout = 2;
+    private long consumeTimeout = 15;
 
 
     public DefaultMQPushConsumer() {

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerController.java
Patch:
@@ -771,8 +771,8 @@ public void setStoreHost(InetSocketAddress storeHost) {
 
     public void protectBroker() {
         if (this.brokerConfig.isDisableConsumeIfConsumerReadSlowly()) {
-            final Iterator<Map.Entry<String, MomentStatsItem>> it = this.brokerStatsManager.getMomentStatsItemSet().getStatsItemTable().entrySet().iterator();
-            while (it.hasNext()) {
+                final Iterator<Map.Entry<String, MomentStatsItem>> it = this.brokerStatsManager.getMomentStatsItemSetFallSize().getStatsItemTable().entrySet().iterator();
+                while (it.hasNext()) {
                 final Map.Entry<String, MomentStatsItem> next = it.next();
                 final long fallBehindBytes = next.getValue().getValue().get();
                 if (fallBehindBytes > this.brokerConfig.getConsumerFallbehindThreshold()) {

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRequestProcessor.java
Patch:
@@ -29,4 +29,5 @@
 public interface NettyRequestProcessor {
     RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand request)
             throws Exception;
+    boolean rejectRequest();
 }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -328,7 +328,7 @@ public PutMessageResult putMessage(MessageExtBrokerInner msg) {
     }
 
 
-    private boolean isOSPageCacheBusy() {
+    public boolean isOSPageCacheBusy() {
         long begin = this.getCommitLog().getBeginTimeInLock();
         long diff = this.systemClock.now() - begin;
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/MessageStore.java
Patch:
@@ -126,4 +126,6 @@ QueryMessageResult queryMessage(final String topic, final String key, final int
     long getConfirmOffset();
 
     void setConfirmOffset(long phyOffset);
+
+    boolean isOSPageCacheBusy();
 }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -117,7 +117,7 @@ public class MessageStoreConfig {
     private boolean debugLockEnable = false;
     private boolean duplicationEnable = false;
     private boolean diskFallRecorded = true;
-    private long osPageCacheBusyTimeOutMills = 2000;
+    private long osPageCacheBusyTimeOutMills = 1000;
     private int defaultQueryMaxNum = 32;
     
     public boolean isDebugLockEnable() {

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -670,6 +670,7 @@ private boolean isNeedUpdateTopicRouteInfo(final String topic) {
 
     public static TopicPublishInfo topicRouteData2TopicPublishInfo(final String topic, final TopicRouteData route) {
         TopicPublishInfo info = new TopicPublishInfo();
+        info.setTopicRouteData(route);
         if (route.getOrderTopicConf() != null && route.getOrderTopicConf().length() > 0) {
             String[] brokers = route.getOrderTopicConf().split(";");
             for (String broker : brokers) {

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/latency/LatencyFaultTolerance.java
Patch:
@@ -25,5 +25,7 @@ public interface LatencyFaultTolerance<T> {
 
     boolean isAvailable(final T name);
 
+    void remove(final T name);
+
     T pickOneAtLeast();
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/latency/MQFaultStrategy.java
Patch:
@@ -26,7 +26,7 @@
 public class MQFaultStrategy {
     private final LatencyFaultTolerance<String> latencyFaultTolerance = new LatencyFaultToleranceImpl();
 
-    private boolean sendLatencyFaultEnable = true;
+    private boolean sendLatencyFaultEnable = false;
 
     private long[] latencyMax =             {50L,   100L,   550L,       1000L,  2000L,      3000L,      15000L};
     private long[] notAvailableDuration =   {0L,    0L,     30000L,     60000L, 120000L,    180000L,    600000L};

File: rocketmq-broker/src/test/java/com/alibaba/rocketmq/broker/api/SendMessageTest.java
Patch:
@@ -73,7 +73,7 @@ public void test_sendMessage() throws Exception {
                 requestHeader.setProperties(MessageDecoder.messageProperties2String(msg.getProperties()));
 
                 SendResult result = client.sendMessage("127.0.0.1:10911", "brokerName", msg, requestHeader, 1000 * 5,
-                        CommunicationMode.SYNC, new SendMessageContext());
+                        CommunicationMode.SYNC, new SendMessageContext(), null);
                 System.out.println(i + "\t" + result);
             } catch (Exception e) {
                 e.printStackTrace();

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettySystemConfig.java
Patch:
@@ -36,7 +36,7 @@ public class NettySystemConfig {
     public static int socketRcvbufSize = //
             Integer.parseInt(System.getProperty(SystemPropertySocketRcvbufSize, "65535"));
     public static final int ClientAsyncSemaphoreValue = //
-            Integer.parseInt(System.getProperty(SystemPropertyClientAsyncSemaphoreValue, "2048"));
+            Integer.parseInt(System.getProperty(SystemPropertyClientAsyncSemaphoreValue, "65535"));
     public static final int ClientOnewaySemaphoreValue = //
-            Integer.parseInt(System.getProperty(SystemPropertyClientOnewaySemaphoreValue, "2048"));
+            Integer.parseInt(System.getProperty(SystemPropertyClientOnewaySemaphoreValue, "65535"));
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -417,7 +417,7 @@ private SendResult sendDefaultImpl(//
             MessageQueue mq = null;
             Exception exception = null;
             SendResult sendResult = null;
-            int timesTotal = 1 + this.defaultMQProducer.getRetryTimesWhenSendFailed();
+            int timesTotal = communicationMode == CommunicationMode.SYNC ? 1 + this.defaultMQProducer.getRetryTimesWhenSendFailed() : 1;
             int times = 0;
             String[] brokersSent = new String[timesTotal];
             for (; times < timesTotal; times++) {

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -653,7 +653,7 @@ private SendResult sendKernelImpl(final Message msg, //
                                 sendCallback, // 7
                                 topicPublishInfo, // 8
                                 this.mQClientFactory, // 9
-                                this.defaultMQProducer.getRetryTimesWhenSendFailed(), // 10
+                                this.defaultMQProducer.getRetryTimesWhenSendAsyncFailed(), // 10
                                 context);
                         break;
                     case ONEWAY:

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -357,7 +357,7 @@ private void onExceptionImpl(final String brokerName, //
                         timesTotal, curTimes, context);
             } catch (InterruptedException e1) {
                 onExceptionImpl(tmpmq.getBrokerName(), msg, timeoutMillis, request, sendCallback, topicPublishInfo, instance, timesTotal, curTimes, e1,
-                        context, true);
+                        context, false);
             } catch (RemotingException e1) {
                 onExceptionImpl(tmpmq.getBrokerName(), msg, timeoutMillis, request, sendCallback, topicPublishInfo, instance, timesTotal, curTimes, e1,
                         context, true);

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -233,13 +233,12 @@ public void scanResponseTable() {
             ResponseFuture rep = next.getValue();
 
             if ((rep.getBeginTimestamp() + rep.getTimeoutMillis() + 1000) <= System.currentTimeMillis()) {
+                rep.release();
                 it.remove();
                 try {
                     rep.executeInvokeCallback();
                 } catch (Throwable e) {
                     plog.warn("scanResponseTable, operationComplete Exception", e);
-                } finally {
-                    rep.release();
                 }
 
                 plog.warn("remove timeout request, " + rep);

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/latency/LatencyFaultToleranceImpl.java
Patch:
@@ -71,6 +71,8 @@ public String pickOneAtLeast() {
         }
 
         if (!tmpList.isEmpty()) {
+            Collections.shuffle(tmpList);
+
             Collections.sort(tmpList);
 
             final int half = tmpList.size() / 2;

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/latency/MQFaultStrategy.java
Patch:
@@ -28,8 +28,8 @@ public class MQFaultStrategy {
 
     private boolean sendLatencyFaultEnable = true;
 
-    private long[] latencyMax = {50L, 100L, 500L, 1000L, 2000L, 3000L};
-    private long[] notAvailableDuration = {0L, 0L, 30000L, 60000L, 120000L, 180000L};
+    private long[] latencyMax =             {50L,   100L,   550L,       1000L,  2000L,      3000L,      15000L};
+    private long[] notAvailableDuration =   {0L,    0L,     30000L,     60000L, 120000L,    180000L,    600000L};
 
     public long[] getNotAvailableDuration() {
         return notAvailableDuration;

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/out/BrokerOuterAPI.java
Patch:
@@ -36,6 +36,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -270,13 +271,13 @@ public ConsumerOffsetSerializeWrapper getAllConsumerOffset(final String addr) th
     }
 
     public String getAllDelayOffset(final String addr) throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException,
-            RemotingConnectException, MQBrokerException {
+            RemotingConnectException, MQBrokerException, UnsupportedEncodingException {
         RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_ALL_DELAY_OFFSET, null);
         RemotingCommand response = this.remotingClient.invokeSync(addr, request, 3000);
         assert response != null;
         switch (response.getCode()) {
             case ResponseCode.SUCCESS: {
-                return new String(response.getBody());
+                return new String(response.getBody(),MixAll.DEFAULT_CHARSET);
             }
             default:
                 break;

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -1054,7 +1054,7 @@ public Properties getBrokerConfig(final String addr, final long timeoutMillis)
         assert response != null;
         switch (response.getCode()) {
             case ResponseCode.SUCCESS: {
-                return MixAll.string2Properties(new String(response.getBody()));
+                return MixAll.string2Properties(new String(response.getBody(),MixAll.DEFAULT_CHARSET));
             }
             default:
                 break;

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MixAll.java
Patch:
@@ -156,7 +156,7 @@ public static final void string2File(final String str, final String fileName) th
 
 
     public static final void string2FileNotSafe(final String str, final String fileName) throws IOException {
-        File file = new File(fileName);
+        File file = new File(fileName,DEFAULT_CHARSET);
         File fileParent = file.getParentFile();
         if (fileParent != null) {
             fileParent.mkdirs();

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/utils/HttpTinyClient.java
Patch:
@@ -18,6 +18,7 @@
 package com.alibaba.rocketmq.common.utils;
 
 import com.alibaba.rocketmq.common.MQVersion;
+import com.alibaba.rocketmq.common.MixAll;
 
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
@@ -122,7 +123,7 @@ static public HttpResult httpPost(String url, List<String> headers, List<String>
             conn.setDoInput(true);
             setHeaders(conn, headers, encoding);
 
-            conn.getOutputStream().write(encodedContent.getBytes());
+            conn.getOutputStream().write(encodedContent.getBytes(MixAll.DEFAULT_CHARSET));
 
             int respCode = conn.getResponseCode();
             String resp = null;

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/utils/IOTinyUtils.java
Patch:
@@ -17,6 +17,8 @@
 
 package com.alibaba.rocketmq.common.utils;
 
+import com.alibaba.rocketmq.remoting.common.RemotingHelper;
+
 import java.io.*;
 import java.nio.channels.FileChannel;
 import java.util.ArrayList;
@@ -29,7 +31,7 @@
 public class IOTinyUtils {
 
     static public String toString(InputStream input, String encoding) throws IOException {
-        return (null == encoding) ? toString(new InputStreamReader(input)) : toString(new InputStreamReader(
+        return (null == encoding) ? toString(new InputStreamReader(input, RemotingHelper.DEFAULT_CHARSET)) : toString(new InputStreamReader(
                 input, encoding));
     }
 

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/filter/Producer.java
Patch:
@@ -20,6 +20,7 @@
 import com.alibaba.rocketmq.client.producer.DefaultMQProducer;
 import com.alibaba.rocketmq.client.producer.SendResult;
 import com.alibaba.rocketmq.common.message.Message;
+import com.alibaba.rocketmq.remoting.common.RemotingHelper;
 
 
 public class Producer {
@@ -32,7 +33,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
                 Message msg = new Message("TopicFilter7",// topic
                         "TagA",// tag
                         "OrderID001",// key
-                        ("Hello MetaQ").getBytes());// body
+                        ("Hello MetaQ").getBytes(RemotingHelper.DEFAULT_CHARSET));// body
 
                 msg.putUserProperty("SequenceId", String.valueOf(i));
 

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/operation/Producer.java
Patch:
@@ -20,6 +20,7 @@
 import com.alibaba.rocketmq.client.producer.DefaultMQProducer;
 import com.alibaba.rocketmq.client.producer.SendResult;
 import com.alibaba.rocketmq.common.message.Message;
+import com.alibaba.rocketmq.remoting.common.RemotingHelper;
 import org.apache.commons.cli.*;
 
 public class Producer {
@@ -44,7 +45,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
                             topic,// topic
                             tags,// tag
                             keys,// key
-                            ("Hello RocketMQ " + i).getBytes());// body
+                            ("Hello RocketMQ " + i).getBytes(RemotingHelper.DEFAULT_CHARSET));// body
                     SendResult sendResult = producer.send(msg);
 
                     System.out.printf("%-8d %s%n", i, sendResult);

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/quickstart/Producer.java
Patch:
@@ -22,6 +22,7 @@
 import com.alibaba.rocketmq.client.producer.LocalTransactionState;
 import com.alibaba.rocketmq.client.producer.SendResult;
 import com.alibaba.rocketmq.common.message.Message;
+import com.alibaba.rocketmq.remoting.common.RemotingHelper;
 
 public class Producer {
     public static void main(String[] args) throws MQClientException, InterruptedException {
@@ -33,7 +34,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
             try {
                 Message msg = new Message("TopicTest",// topic
                         "TagA",// tag
-                        ("Hello RocketMQ " + i).getBytes()// body
+                        ("Hello RocketMQ " + i).getBytes(RemotingHelper.DEFAULT_CHARSET)// body
                 );
                 SendResult sendResult = producer.send(msg);
                 LocalTransactionExecuter tranExecuter = new LocalTransactionExecuter() {

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/simple/AsyncProducer.java
Patch:
@@ -21,6 +21,7 @@
 import com.alibaba.rocketmq.client.producer.SendCallback;
 import com.alibaba.rocketmq.client.producer.SendResult;
 import com.alibaba.rocketmq.common.message.Message;
+import com.alibaba.rocketmq.remoting.common.RemotingHelper;
 
 
 public class AsyncProducer {
@@ -36,7 +37,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
                     Message msg = new Message("Jodie_topic_1023",// topic
                             "TagA",// tag
                             "OrderID188",// key
-                            ("Hello MetaQ").getBytes());// body
+                            ("Hello MetaQ").getBytes(RemotingHelper.DEFAULT_CHARSET));// body
                     producer.send(msg, createCallBack());
                 }
 

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/simple/Producer.java
Patch:
@@ -20,6 +20,7 @@
 import com.alibaba.rocketmq.client.producer.DefaultMQProducer;
 import com.alibaba.rocketmq.client.producer.SendResult;
 import com.alibaba.rocketmq.common.message.Message;
+import com.alibaba.rocketmq.remoting.common.RemotingHelper;
 
 
 public class Producer {
@@ -35,7 +36,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
                     Message msg = new Message("TopicTest",// topic
                             "TagA",// tag
                             "OrderID188",// key
-                            ("Hello MetaQ").getBytes());// body
+                            ("Hello MetaQ").getBytes(RemotingHelper.DEFAULT_CHARSET));// body
                     SendResult sendResult = producer.send(msg);
                     System.out.println(sendResult);
                 }

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/simple/TestProducer.java
Patch:
@@ -22,6 +22,7 @@
 import com.alibaba.rocketmq.client.producer.SendResult;
 import com.alibaba.rocketmq.common.message.Message;
 import com.alibaba.rocketmq.common.message.MessageExt;
+import com.alibaba.rocketmq.remoting.common.RemotingHelper;
 
 
 public class TestProducer {
@@ -37,7 +38,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
                     Message msg = new Message("TopicTest1",// topic
                             "TagA",// tag
                             "key113",// key
-                            ("Hello MetaQ").getBytes());// body
+                            ("Hello MetaQ").getBytes(RemotingHelper.DEFAULT_CHARSET));// body
                     SendResult sendResult = producer.send(msg);
                     System.out.println(sendResult);
 

File: rocketmq-filtersrv/src/main/java/com/alibaba/rocketmq/filtersrv/filter/DynaCode.java
Patch:
@@ -20,6 +20,7 @@
 import com.alibaba.rocketmq.common.UtilAll;
 import com.alibaba.rocketmq.common.constant.LoggerName;
 import com.alibaba.rocketmq.common.filter.FilterAPI;
+import com.alibaba.rocketmq.remoting.common.RemotingHelper;
 import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -228,7 +229,7 @@ private void compile(String[] srcFiles) throws Exception {
         }
         int resultCode = compiler.run(null, null, err, args);
         if (resultCode != 0) {
-            throw new Exception(err.toString());
+            throw new Exception(err.toString(RemotingHelper.DEFAULT_CHARSET));
         }
     }
 

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/common/RemotingHelper.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class RemotingHelper {
     public static final String RemotingLogName = "RocketmqRemoting";
-
+    public static final String DEFAULT_CHARSET = "UTF-8";
 
     public static String exceptionSimpleDesc(final Throwable e) {
         StringBuffer sb = new StringBuffer();

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/common/RemotingUtil.java
Patch:
@@ -37,6 +37,7 @@
  */
 public class RemotingUtil {
     public static final String OS_NAME = System.getProperty("os.name");
+
     private static final Logger log = LoggerFactory.getLogger(RemotingHelper.RemotingLogName);
     private static boolean isLinuxPlatform = false;
     private static boolean isWindowsPlatform = false;

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/protocol/RemotingSerializable.java
Patch:
@@ -52,7 +52,7 @@ public static <T> T fromJson(String json, Class<T> classOfT) {
     public byte[] encode() {
         final String json = this.toJson();
         if (json != null) {
-            return json.getBytes();
+            return json.getBytes(CHARSET_UTF8);
         }
         return null;
     }

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/cluster/CLusterSendMsgRTCommand.java
Patch:
@@ -18,6 +18,7 @@
 package com.alibaba.rocketmq.tools.command.cluster;
 
 import com.alibaba.rocketmq.client.producer.DefaultMQProducer;
+import com.alibaba.rocketmq.common.MixAll;
 import com.alibaba.rocketmq.common.message.Message;
 import com.alibaba.rocketmq.common.protocol.body.ClusterInfo;
 import com.alibaba.rocketmq.remoting.RPCHook;
@@ -137,7 +138,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
                     }
 
                     for (String brokerName : brokerNames) {
-                        Message msg = new Message(brokerName, getStringBySize(size).getBytes());
+                        Message msg = new Message(brokerName, getStringBySize(size).getBytes(MixAll.DEFAULT_CHARSET));
                         long start = 0;
                         long end = 0;
                         long elapsed = 0;

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/message/CheckMsgSendRTCommand.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.alibaba.rocketmq.client.producer.DefaultMQProducer;
 import com.alibaba.rocketmq.client.producer.MessageQueueSelector;
+import com.alibaba.rocketmq.common.MixAll;
 import com.alibaba.rocketmq.common.message.Message;
 import com.alibaba.rocketmq.common.message.MessageQueue;
 import com.alibaba.rocketmq.remoting.RPCHook;
@@ -74,7 +75,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
                     .getOptionValue('a').trim());
             long msgSize = !commandLine.hasOption('s') ? 128 : Long.parseLong(commandLine
                     .getOptionValue('s').trim());
-            Message msg = new Message(topic, getStringBySize(msgSize).getBytes());
+            Message msg = new Message(topic, getStringBySize(msgSize).getBytes(MixAll.DEFAULT_CHARSET));
 
             System.out.printf("%-32s  %-4s  %-20s    %s%n",//
                     "#Broker Name",//

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -930,7 +930,7 @@ private RemotingCommand queryCorrectionOffset(ChannelHandlerContext ctx, Remotin
             for(Map.Entry<Integer, Long> entry: compareOffset.entrySet()){
                 Integer queueId = entry.getKey();
                 correctionOffset.put(queueId,
-                        correctionOffset.get(queueId) > entry.getValue() ? Long.valueOf(Long.MAX_VALUE) : correctionOffset.get(queueId));
+                        correctionOffset.get(queueId) > entry.getValue() ? Long.MAX_VALUE : correctionOffset.get(queueId));
             }
         }
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/MQPullConsumerScheduleService.java
Patch:
@@ -67,8 +67,8 @@ public void putTask(String topic, Set<MessageQueue> mqNewSet) {
         for (MessageQueue mq : mqNewSet) {
             if (!this.taskTable.containsKey(mq)) {
                 PullTaskImpl command = new PullTaskImpl(mq);
+                this.taskTable.put(mq, command);
                 this.scheduledThreadPoolExecutor.schedule(command, 0, TimeUnit.MILLISECONDS);
-                this.taskTable.putIfAbsent(mq, command);
 
             }
         }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/CommitLog.java
Patch:
@@ -1067,9 +1067,10 @@ public AppendMessageResult doAppend(final long fileFromOffset, final ByteBuffer
                 //
 
                 // Here the length of the specially set maxBlank
+                final long beginTimeMills = CommitLog.this.defaultMessageStore.now();
                 byteBuffer.put(this.msgStoreItemMemory.array(), 0, maxBlank);
                 return new AppendMessageResult(AppendMessageStatus.END_OF_FILE, wroteOffset, maxBlank, msgId, msgInner.getStoreTimestamp(),
-                        queueOffset, 0);
+                        queueOffset, CommitLog.this.defaultMessageStore.now() - beginTimeMills);
             }
 
             // Initialization of storage space

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/CommitLog.java
Patch:
@@ -240,13 +240,13 @@ public DispatchRequest checkMessageAndReturnSize(java.nio.ByteBuffer byteBuffer,
             // 9 BORNTIMESTAMP
             long bornTimeStamp = byteBuffer.getLong();
 
-            // 10 BORNHOST（IP+PORT）
+            // 10
             ByteBuffer byteBuffer1 = byteBuffer.get(bytesContent, 0, 8);
 
             // 11 STORETIMESTAMP
             long storeTimestamp = byteBuffer.getLong();
 
-            // 12 STOREHOST（IP+PORT）
+            // 12
             ByteBuffer byteBuffer2 = byteBuffer.get(bytesContent, 0, 8);
 
             // 13 RECONSUMETIMES

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/CommitLog.java
Patch:
@@ -241,13 +241,13 @@ public DispatchRequest checkMessageAndReturnSize(java.nio.ByteBuffer byteBuffer,
             long bornTimeStamp = byteBuffer.getLong();
 
             // 10 BORNHOST（IP+PORT）
-            final ByteBuffer byteBuffer1 = byteBuffer.get(bytesContent, 0, 8);
+            ByteBuffer byteBuffer1 = byteBuffer.get(bytesContent, 0, 8);
 
             // 11 STORETIMESTAMP
             long storeTimestamp = byteBuffer.getLong();
 
             // 12 STOREHOST（IP+PORT）
-            final ByteBuffer byteBuffer2 = byteBuffer.get(bytesContent, 0, 8);
+            ByteBuffer byteBuffer2 = byteBuffer.get(bytesContent, 0, 8);
 
             // 13 RECONSUMETIMES
             int reconsumeTimes = byteBuffer.getInt();

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/CommitLog.java
Patch:
@@ -189,7 +189,9 @@ public DispatchRequest checkMessageAndReturnSize(java.nio.ByteBuffer byteBuffer,
 
     private void doNothingForDeadCode(final Object obj) {
         if (obj != null) {
-            log.warn(String.valueOf(obj.hashCode()));
+            if (log.isDebugEnabled()) {
+                log.debug(String.valueOf(obj.hashCode()));
+            }
         }
     }
 

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/constant/LoggerName.java
Patch:
@@ -36,4 +36,5 @@ public class LoggerName {
     public static final String RocketmqAuthorizeLoggerName = "RocketmqAuthorize";
     public static final String DuplicationLoggerName = "RocketmqDuplication";
     public static final String ProtectionLoggerName = "RocketmqProtection";
+    public static final String WaterMarkLoggerName = "RocketmqWaterMark";
 }

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/client/ConsumerGroupInfo.java
Patch:
@@ -166,7 +166,7 @@ public boolean updateSubscription(final Set<SubscriptionData> subList) {
         for (SubscriptionData sub : subList) {
             SubscriptionData old = this.subscriptionTable.get(sub.getTopic());
             if (old == null) {
-                SubscriptionData prev = this.subscriptionTable.put(sub.getTopic(), sub);
+                SubscriptionData prev = this.subscriptionTable.putIfAbsent(sub.getTopic(), sub);
                 if (null == prev) {
                     updated = true;
                     log.info("subscription changed, add new topic, group: {} {}", this.groupName,

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/client/rebalance/RebalanceLockManager.java
Patch:
@@ -244,7 +244,7 @@ public void unlockBatch(final String group, final Set<MessageQueue> mqs, final S
         }
     }
 
-    class LockEntry {
+    static class LockEntry {
         private String clientId;
         private volatile long lastUpdateTimestamp = System.currentTimeMillis();
 

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/filtersrv/FilterServerManager.java
Patch:
@@ -148,7 +148,7 @@ public List<String> buildNewFilterServerList() {
         return addr;
     }
 
-    class FilterServerInfo {
+    static class FilterServerInfo {
         private String filterServerAddr;
         private long lastUpdateTimestamp;
 

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -927,9 +927,10 @@ private RemotingCommand queryCorrectionOffset(ChannelHandlerContext ctx, Remotin
                 this.brokerController.getConsumerOffsetManager().queryOffset(requestHeader.getTopic(), requestHeader.getCompareGroup());
 
         if (compareOffset != null && !compareOffset.isEmpty()) {
-            for (Integer queueId : compareOffset.keySet()) {
+            for(Map.Entry<Integer, Long> entry: compareOffset.entrySet()){
+                Integer queueId = entry.getKey();
                 correctionOffset.put(queueId,
-                        correctionOffset.get(queueId) > compareOffset.get(queueId) ? Long.MAX_VALUE : correctionOffset.get(queueId));
+                        correctionOffset.get(queueId) > entry.getValue() ? Long.valueOf(Long.MAX_VALUE) : correctionOffset.get(queueId));
             }
         }
 

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/PullMessageProcessor.java
Patch:
@@ -374,7 +374,7 @@ public void operationComplete(ChannelFuture future) throws Exception {
                             pollingTimeMills = this.brokerController.getBrokerConfig().getShortPollingTimeMills();
                         }
 
-                        String topic = new String(requestHeader.getTopic());
+                        String topic = requestHeader.getTopic();
                         long offset = requestHeader.getQueueOffset();
                         int queueId = requestHeader.getQueueId();
                         PullRequest pullRequest = new PullRequest(request, channel, pollingTimeMills,

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/common/ThreadLocalIndex.java
Patch:
@@ -29,7 +29,7 @@ public ThreadLocalIndex(int value) {
     public int getAndIncrement() {
         Integer index = this.threadLocalIndex.get();
         if (null == index) {
-            index = new Integer(Math.abs(new Random().nextInt()));
+            index = Integer.valueOf(Math.abs(new Random().nextInt()));
             if (index < 0) index = 0;
             this.threadLocalIndex.set(index);
         }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/MQPullConsumerScheduleService.java
Patch:
@@ -67,8 +67,9 @@ public void putTask(String topic, Set<MessageQueue> mqNewSet) {
         for (MessageQueue mq : mqNewSet) {
             if (!this.taskTable.containsKey(mq)) {
                 PullTaskImpl command = new PullTaskImpl(mq);
-                this.taskTable.put(mq, command);
                 this.scheduledThreadPoolExecutor.schedule(command, 0, TimeUnit.MILLISECONDS);
+                this.taskTable.putIfAbsent(mq, command);
+
             }
         }
     }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ProcessQueue.java
Patch:
@@ -88,7 +88,7 @@ public void cleanExpiredMsg(DefaultMQPushConsumer pushConsumer) {
             try {
                 this.lockTreeMap.readLock().lockInterruptibly();
                 try {
-                    if (!msgTreeMap.isEmpty() && System.currentTimeMillis() - Long.valueOf(MessageAccessor.getConsumeStartTimeStamp(msgTreeMap.firstEntry().getValue())) > pushConsumer.getConsumeTimeout() * 60 * 1000) {
+                    if (!msgTreeMap.isEmpty() && System.currentTimeMillis() - Long.parseLong(MessageAccessor.getConsumeStartTimeStamp(msgTreeMap.firstEntry().getValue())) > pushConsumer.getConsumeTimeout() * 60 * 1000) {
                         msg = msgTreeMap.firstEntry().getValue();
                     } else {
 

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/protocol/route/BrokerData.java
Patch:
@@ -23,6 +23,7 @@
 import com.alibaba.rocketmq.common.MixAll;
 
 import java.util.HashMap;
+import java.util.Map;
 
 
 /**
@@ -37,8 +38,8 @@ public class BrokerData implements Comparable<BrokerData> {
     public String selectBrokerAddr() {
         String value = this.brokerAddrs.get(MixAll.MASTER_ID);
         if (null == value) {
-            for (Long key : this.brokerAddrs.keySet()) {
-                return this.brokerAddrs.get(key);
+            for (Map.Entry<Long, String> entry : this.brokerAddrs.entrySet()) {
+                return entry.getValue();
             }
         }
 

File: rocketmq-common/src/test/java/com/alibaba/rocketmq/common/UtilAllTest.java
Patch:
@@ -115,7 +115,7 @@ public void test_isBlank() {
         }
     }
 
-    class DemoConfig {
+    static class DemoConfig {
         private int demoWidth = 0;
         private int demoLength = 0;
         private boolean demoOK = false;

File: rocketmq-filtersrv/src/main/java/com/alibaba/rocketmq/filtersrv/filter/DynaCode.java
Patch:
@@ -122,7 +122,7 @@ public DynaCode(List<String> codeStrs) {
     public static Class<?> compileAndLoadClass(final String className, final String javaSource)
             throws Exception {
         String classSimpleName = FilterAPI.simpleClassName(className);
-        String javaCode = new String(javaSource);
+        String javaCode = javaSource;
 
         final String newClassSimpleName = classSimpleName + System.currentTimeMillis();
         String newJavaCode = javaCode.replaceAll(classSimpleName, newClassSimpleName);

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/common/RemotingHelper.java
Patch:
@@ -54,7 +54,7 @@ public static String exceptionSimpleDesc(final Throwable e) {
 
     public static SocketAddress string2SocketAddress(final String addr) {
         String[] s = addr.split(":");
-        InetSocketAddress isa = new InetSocketAddress(s[0], Integer.valueOf(s[1]));
+        InetSocketAddress isa = new InetSocketAddress(s[0], Integer.parseInt(s[1]));
         return isa;
     }
 

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/common/RemotingUtil.java
Patch:
@@ -148,7 +148,7 @@ public static String normalizeHostAddress(final InetAddress localHost) {
 
     public static SocketAddress string2SocketAddress(final String addr) {
         String[] s = addr.split(":");
-        InetSocketAddress isa = new InetSocketAddress(s[0], Integer.valueOf(s[1]));
+        InetSocketAddress isa = new InetSocketAddress(s[0], Integer.parseInt(s[1]));
         return isa;
     }
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/AllocateMapedFileService.java
Patch:
@@ -197,7 +197,7 @@ private boolean mmapOperation() {
         return true;
     }
 
-    class AllocateRequest implements Comparable<AllocateRequest> {
+    static class AllocateRequest implements Comparable<AllocateRequest> {
         // Full file path
         private String filePath;
         private int fileSize;

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/CommitLog.java
Patch:
@@ -822,7 +822,7 @@ public long getJointime() {
         }
     }
 
-    public class GroupCommitRequest {
+    public static class GroupCommitRequest {
         private final long nextOffset;
         private final CountDownLatch countDownLatch = new CountDownLatch(1);
         private volatile boolean flushOK = false;

File: rocketmq-store/src/test/java/com/alibaba/rocketmq/store/index/IndexFileTest.java
Patch:
@@ -30,8 +30,8 @@
 
 
 public class IndexFileTest {
-    private final int hashSlotNum = 100;
-    private final int indexNum = 400;
+    private static final int hashSlotNum = 100;
+    private static final int indexNum = 400;
 
 
     @Test

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -528,8 +528,8 @@ public void createOrUpdateOrderConf(String key, String value, boolean isCluster)
 
             StringBuilder newOrderConf = new StringBuilder();
             String splitor = "";
-            for (String tmp : orderConfMap.keySet()) {
-                newOrderConf.append(splitor).append(orderConfMap.get(tmp));
+            for (Map.Entry<String, String> entry : orderConfMap.entrySet()) {
+                newOrderConf.append(splitor).append(entry.getValue());
                 splitor = ";";
             }
             this.mqClientInstance.getMQClientAPIImpl().putKVConfigValue(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG, key,

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/broker/BrokerConsumeStatsSubCommad.java
Patch:
@@ -100,8 +100,9 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
                     "#Diff", //
                     "#LastTime");
             for (Map<String, List<ConsumeStats>> map : consumeStatsList.getConsumeStatsList()) {
-                for (String group : map.keySet()) {
-                    List<ConsumeStats> consumeStatsArray = map.get(group);
+                for (Map.Entry<String, List<ConsumeStats>> entry : map.entrySet()) {
+                    String group = entry.getKey();
+                    List<ConsumeStats> consumeStatsArray = entry.getValue();
                     for (ConsumeStats consumeStats : consumeStatsArray) {
                         List<MessageQueue> mqList = new LinkedList<MessageQueue>();
                         mqList.addAll(consumeStats.getOffsetTable().keySet());

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/cluster/ClusterListSubCommand.java
Patch:
@@ -247,7 +247,7 @@ private void printClusterBaseInfo(final DefaultMQAdminExt defaultMQAdminExt) thr
                         System.out.printf("%-16s  %-22s  %-4s  %-22s %-16s %11.2f%s %11.2f%s\n",//
                                 clusterName,//
                                 brokerName,//
-                                next1.getKey().longValue(),//
+                                String.valueOf(next1.getKey()),//
                                 next1.getValue(),//
                                 version,//
                                 in,//

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/message/PrintMessageSubCommand.java
Patch:
@@ -153,7 +153,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
     public static long timestampFormat(final String value) {
         long timestamp = 0;
         try {
-            timestamp = Long.valueOf(value);
+            timestamp = Long.parseLong(value);
         } catch (NumberFormatException e) {
 
             timestamp = UtilAll.parseDate(value, UtilAll.yyyy_MM_dd_HH_mm_ss_SSS).getTime();

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/offset/ResetOffsetByTimeCommand.java
Patch:
@@ -93,7 +93,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
 
             try {
                 if (timestamp == 0) {
-                    timestamp = Long.valueOf(timeStampStr);
+                    timestamp = Long.parseLong(timeStampStr);
                 }
             } catch (NumberFormatException e) {
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/offset/ResetOffsetByTimeOldCommand.java
Patch:
@@ -81,7 +81,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
             String timeStampStr = commandLine.getOptionValue("s").trim();
             long timestamp = 0;
             try {
-                timestamp = Long.valueOf(timeStampStr);
+                timestamp = Long.parseLong(timeStampStr);
             } catch (NumberFormatException e) {
 
                 Date date = UtilAll.parseDate(timeStampStr, UtilAll.yyyy_MM_dd_HH_mm_ss_SSS);

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/stats/TpsStatsSubCommand.java
Patch:
@@ -45,7 +45,7 @@ public class TpsStatsSubCommand implements SubCommand {
     private static final String GET_TPS = "GROUP_GET_NUMS";
     private static final String TLOG_DOMAIN = "http://110.75.84.129:9999";
 
-    class TpsDataInfo implements Comparable<TpsDataInfo> {
+    static class TpsDataInfo implements Comparable<TpsDataInfo> {
         private String topicName;
         private String groupName;
         private int tps = 0;

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -164,7 +164,6 @@ public static void initCommand() {
         initCommand(new CleanUnusedTopicCommand());
 
         initCommand(new StartMonitoringSubCommand());
-        initCommand(new CheckMsgSubCommand());
         initCommand(new StatsAllSubCommand());
         initCommand(new TpsStatsSubCommand());
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/CommitLog.java
Patch:
@@ -242,13 +242,13 @@ public DispatchRequest checkMessageAndReturnSize(java.nio.ByteBuffer byteBuffer,
             bornTimeStamp = bornTimeStamp + 0;
 
             // 10 BORNHOST（IP+PORT）
-            byteBuffer.get(bytesContent, 0, 8);
+            final ByteBuffer byteBuffer1 = byteBuffer.get(bytesContent, 0, 8);
 
             // 11 STORETIMESTAMP
             long storeTimestamp = byteBuffer.getLong();
 
             // 12 STOREHOST（IP+PORT）
-            byteBuffer.get(bytesContent, 0, 8);
+            final ByteBuffer byteBuffer2 = byteBuffer.get(bytesContent, 0, 8);
 
             // 13 RECONSUMETIMES
             int reconsumeTimes = byteBuffer.getInt();

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/PullMessageProcessor.java
Patch:
@@ -231,6 +231,8 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
                 else {
                     responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getBrokerId());
                 }
+            } else {
+                responseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);
             }
 
             switch (getMessageResult.getStatus()) {

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/DefaultMQPullConsumer.java
Patch:
@@ -24,7 +24,9 @@
 import com.alibaba.rocketmq.client.exception.MQClientException;
 import com.alibaba.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl;
 import com.alibaba.rocketmq.common.MixAll;
+import com.alibaba.rocketmq.common.message.MessageDecoder;
 import com.alibaba.rocketmq.common.message.MessageExt;
+import com.alibaba.rocketmq.common.message.MessageId;
 import com.alibaba.rocketmq.common.message.MessageQueue;
 import com.alibaba.rocketmq.common.protocol.heartbeat.MessageModel;
 import com.alibaba.rocketmq.remoting.RPCHook;
@@ -331,6 +333,7 @@ public Set<MessageQueue> fetchMessageQueuesInBalance(String topic) throws MQClie
     @Override
     public MessageExt viewMessage(String topic, String uniqKey) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
         try {
+            MessageDecoder.decodeMessageId(uniqKey);
             return this.viewMessage(uniqKey);
         } catch (Exception e) {
         }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/DefaultMQPushConsumer.java
Patch:
@@ -29,6 +29,7 @@
 import com.alibaba.rocketmq.common.MixAll;
 import com.alibaba.rocketmq.common.UtilAll;
 import com.alibaba.rocketmq.common.consumer.ConsumeFromWhere;
+import com.alibaba.rocketmq.common.message.MessageDecoder;
 import com.alibaba.rocketmq.common.message.MessageExt;
 import com.alibaba.rocketmq.common.message.MessageQueue;
 import com.alibaba.rocketmq.common.protocol.heartbeat.MessageModel;
@@ -206,6 +207,7 @@ public QueryResult queryMessage(String topic, String key, int maxNum, long begin
     @Override
     public MessageExt viewMessage(String topic, String msgId) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
         try {
+            MessageDecoder.decodeMessageId(msgId);
             return this.viewMessage(msgId);
         } catch (Exception e) {
         }

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/BrokerConfigSingleton.java
Patch:
@@ -25,14 +25,14 @@ public class BrokerConfigSingleton {
 
     public static BrokerConfig getBrokerConfig() {
         if (brokerConfig == null) {
-
+            throw new IllegalArgumentException("brokerConfig Cannot be null !");
         }
         return brokerConfig;
     }
 
     public static void setBrokerConfig(BrokerConfig brokerConfig) {
         if (!isInit.compareAndSet(false, true)) {
-
+            throw new IllegalArgumentException("broker config have inited !");
         }
         BrokerConfigSingleton.brokerConfig = brokerConfig;
     }

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/constant/LoggerName.java
Patch:
@@ -34,4 +34,5 @@ public class LoggerName {
     public static final String FlowControlLoggerName = "RocketmqFlowControl";
     public static final String RocketmqAuthorizeLoggerName = "RocketmqAuthorize";
     public static final String DuplicationLoggerName = "RocketmqDuplication";
+    public static final String ProtectionLoggerName = "RocketmqProtection";
 }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -457,7 +457,7 @@ public GetMessageResult getMessage(final String group, final String topic, final
 
                         if (diskFallRecorded) {
                             long fallBehind = maxOffsetPy - maxPhyOffsetPulling;
-                            brokerStatsManager.recordDiskFallBehind(group, topic, queueId, fallBehind);
+                            brokerStatsManager.recordDiskFallBehindSize(group, topic, queueId, fallBehind);
                         }
 
                         nextBeginOffset = offset + (i / ConsumeQueue.CQStoreUnitSize);

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/client/net/Broker2Client.java
Patch:
@@ -180,6 +180,7 @@ public RemotingCommand resetOffset(String topic, String group, long timeStamp, b
             }
 
             if (timeStampOffset < 0) {
+                log.warn("reset offset is invalid. topic={}, queueId={}, timeStampOffset={}", topic, i, timeStampOffset);
                 timeStampOffset = 0;
             }
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/offset/ResetOffsetByTimeCommand.java
Patch:
@@ -26,10 +26,9 @@
  */
 public class ResetOffsetByTimeCommand implements SubCommand {
     public static void main(String[] args) {
-        System.setProperty(MixAll.NAMESRV_ADDR_PROPERTY, "127.0.0.1:9876");
         ResetOffsetByTimeCommand cmd = new ResetOffsetByTimeCommand();
         Options options = ServerUtil.buildCommandlineOptions(new Options());
-        String[] subargs = new String[]{"-t qatest_TopicTest", "-g qatest_consumer", "-s 1389098416742", "-f true"};
+        String[] subargs = new String[]{"-t Jodie_rest_test", "-g CID_Jodie_rest_test", "-s -1", "-f true"};
         final CommandLine commandLine =
                 ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());
         cmd.execute(commandLine, options, null);

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/simple/Producer.java
Patch:
@@ -30,7 +30,6 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
          * 因为服务器会回查这个Group下的任意一个Producer
          */
         DefaultMQProducer producer = new DefaultMQProducer("ProducerGroupName");
-        producer.setNamesrvAddr("100.69.166.39:9876");
         /**
          * Producer对象在使用之前必须要调用start初始化，初始化一次即可<br>
          * 注意：切记不可以在每次发送消息时，都调用start方法

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/simple/Producer.java
Patch:
@@ -30,6 +30,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
          * 因为服务器会回查这个Group下的任意一个Producer
          */
         DefaultMQProducer producer = new DefaultMQProducer("ProducerGroupName");
+        producer.setNamesrvAddr("100.69.166.39:9876");
         /**
          * Producer对象在使用之前必须要调用start初始化，初始化一次即可<br>
          * 注意：切记不可以在每次发送消息时，都调用start方法

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/StoreStatsService.java
Patch:
@@ -563,7 +563,7 @@ private void printTps() {
                 sb.append(" ");
             }
 
-            log.info("TotalPut %d, PutMessageDistributeTime {}", totalPut, sb.toString());
+            log.info("TotalPut {}, PutMessageDistributeTime {}", totalPut, sb.toString());
         }
     }
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/StoreStatsService.java
Patch:
@@ -75,7 +75,7 @@ public class StoreStatsService extends ServiceThread {
     private final LinkedList<CallSnapshot> getTimesMissList = new LinkedList<CallSnapshot>();
     private final LinkedList<CallSnapshot> transferedMsgCountList = new LinkedList<CallSnapshot>();
     // putMessage，耗时分布
-    private volatile AtomicLong[] putMessageDistributeTime = new AtomicLong[7];
+    private volatile AtomicLong[] putMessageDistributeTime;
     // 启动时间
     private long messageStoreBootTimestamp = System.currentTimeMillis();
     // putMessage，写入整个消息耗时，含加锁竟争时间（单位毫秒）

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerController.java
Patch:
@@ -588,6 +588,9 @@ public synchronized void registerBrokerAll(final boolean checkOrderConfig, boole
         if(dataVersion.equals(topicConfigWrapper.getDataVersion())){
             ConcurrentHashMap<String, TopicConfig> topicConfigTable = new ConcurrentHashMap<String, TopicConfig>();
             topicConfigWrapper.setTopicConfigTable(topicConfigTable);
+        }else {
+            dataVersion.setTimestatmp(topicConfigWrapper.getDataVersion().getTimestatmp());
+            dataVersion.setCounter(topicConfigWrapper.getDataVersion().getCounter());
         }
 
         RegisterBrokerResult registerBrokerResult = this.brokerOuterAPI.registerBrokerAll(//
@@ -611,7 +614,6 @@ public synchronized void registerBrokerAll(final boolean checkOrderConfig, boole
             if (checkOrderConfig) {
                 this.getTopicConfigManager().updateOrderTopicConfig(registerBrokerResult.getKvTable());
             }
-            dataVersion = topicConfigWrapper.getDataVersion();
         }
     }
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -1037,7 +1037,7 @@ public void resetOffset(String topic, String group, Map<MessageQueue, Long> offs
             Iterator<MessageQueue> iterator = processQueueTable.keySet().iterator();
             processQueueTable = consumer.getRebalanceImpl().getProcessQueueTable();
             while (iterator.hasNext()) {
-                MessageQueue mq = itr.next();
+                MessageQueue mq = iterator.next();
                 if (topic.equals(mq.getTopic())) {
                     consumer.updateConsumeOffset(mq, offsetTable.get(mq));
                     consumer.getRebalanceImpl().removeUnnecessaryMessageQueue(mq, processQueueTable.get(mq));

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MQVersion.java
Patch:
@@ -22,7 +22,7 @@
  */
 public class MQVersion {
     // TODO 每次发布版本都要修改此处版本号
-    public static final int CurrentVersion = Version.V3_5_2_SNAPSHOT.ordinal();
+    public static final int CurrentVersion = Version.V3_5_3_SNAPSHOT.ordinal();
 
 
     public static String getVersionDesc(int value) {

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerController.java
Patch:
@@ -591,7 +591,8 @@ public synchronized void registerBrokerAll(final boolean checkOrderConfig, boole
                 this.getHAServerAddr(), //
                 topicConfigWrapper,//
                 this.filterServerManager.buildNewFilterServerList(),//
-                oneway);
+                oneway,//
+                this.brokerConfig.getRegisterBrokerTimeoutMills());
 
         if (registerBrokerResult != null) {
             if (this.updateMasterHAServerAddrPeriodically && registerBrokerResult.getHaServerAddr() != null) {

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyDecoder.java
Patch:
@@ -34,7 +34,7 @@
 public class NettyDecoder extends LengthFieldBasedFrameDecoder {
     private static final Logger log = LoggerFactory.getLogger(RemotingHelper.RemotingLogName);
     private static final int FRAME_MAX_LENGTH = //
-            Integer.parseInt(System.getProperty("com.rocketmq.remoting.frameMaxLength", "8388608"));
+            Integer.parseInt(System.getProperty("com.rocketmq.remoting.frameMaxLength", "16777216"));
 
 
     public NettyDecoder() {

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyClientConfig.java
Patch:
@@ -27,7 +27,7 @@ public class NettyClientConfig {
     private int clientCallbackExecutorThreads = Runtime.getRuntime().availableProcessors();
     private int clientOnewaySemaphoreValue = NettySystemConfig.ClientOnewaySemaphoreValue;
     private int clientAsyncSemaphoreValue = NettySystemConfig.ClientAsyncSemaphoreValue;
-    private long connectTimeoutMillis = 3000;
+    private int connectTimeoutMillis = 3000;
     private long channelNotActiveInterval = 1000 * 60;
 
     /**
@@ -61,12 +61,12 @@ public void setClientOnewaySemaphoreValue(int clientOnewaySemaphoreValue) {
     }
 
 
-    public long getConnectTimeoutMillis() {
+    public int getConnectTimeoutMillis() {
         return connectTimeoutMillis;
     }
 
 
-    public void setConnectTimeoutMillis(long connectTimeoutMillis) {
+    public void setConnectTimeoutMillis(int connectTimeoutMillis) {
         this.connectTimeoutMillis = connectTimeoutMillis;
     }
 

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -140,6 +140,8 @@ public Thread newThread(Runnable r) {
                 //
                 .option(ChannelOption.SO_KEEPALIVE, false)
                 //
+                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, nettyClientConfig.getConnectTimeoutMillis())
+                //
                 .option(ChannelOption.SO_SNDBUF, nettyClientConfig.getClientSocketSndBufSize())
                 //
                 .option(ChannelOption.SO_RCVBUF, nettyClientConfig.getClientSocketRcvBufSize())

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -352,7 +352,7 @@ public RemotingCommand invokeSync(String addr, final RemotingCommand request, lo
             }
         } else {
             this.closeChannel(addr, channel);
-            throw new RemotingConnectException(RemotingHelper.parseChannelRemoteAddr(channel));
+            throw new RemotingConnectException(addr);
         }
     }
 
@@ -500,7 +500,7 @@ public void invokeAsync(String addr, RemotingCommand request, long timeoutMillis
             }
         } else {
             this.closeChannel(addr, channel);
-            throw new RemotingConnectException(RemotingHelper.parseChannelRemoteAddr(channel));
+            throw new RemotingConnectException(addr);
         }
     }
 
@@ -526,7 +526,7 @@ public void invokeOneway(String addr, RemotingCommand request, long timeoutMilli
             }
         } else {
             this.closeChannel(addr, channel);
-            throw new RemotingConnectException(RemotingHelper.parseChannelRemoteAddr(channel));
+            throw new RemotingConnectException(addr);
         }
     }
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -592,7 +592,7 @@ private SendResult sendKernelImpl(final Message msg, //
                         context.setMsgType(MessageType.Trans_Msg_Half);
                     }
                     //此处为了不依赖ons的包,直接写上key的名称,可能存在风险
-                    if (msg.getProperty("__STARTDELIVERTIME") != null) {
+                    if (msg.getProperty("__STARTDELIVERTIME") != null || msg.getProperty(MessageConst.PROPERTY_DELAY_TIME_LEVEL) != null) {
                         context.setMsgType(MessageType.Delay_Msg);
                     }
                     this.executeSendMessageHookBefore(context);

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerStartup.java
Patch:
@@ -20,7 +20,6 @@
 import com.alibaba.rocketmq.common.BrokerConfig;
 import com.alibaba.rocketmq.common.MQVersion;
 import com.alibaba.rocketmq.common.MixAll;
-import com.alibaba.rocketmq.common.conflict.PackageConflictDetect;
 import com.alibaba.rocketmq.common.constant.LoggerName;
 import com.alibaba.rocketmq.remoting.common.RemotingUtil;
 import com.alibaba.rocketmq.remoting.netty.NettyClientConfig;
@@ -97,7 +96,7 @@ public static BrokerController createBrokerController(String[] args) {
 
         try {
             // 检测包冲突
-            PackageConflictDetect.detectFastjson();
+            //PackageConflictDetect.detectFastjson();
 
             // 解析命令行
             Options options = ServerUtil.buildCommandlineOptions(new Options());

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -31,7 +31,6 @@
 import com.alibaba.rocketmq.common.MixAll;
 import com.alibaba.rocketmq.common.ServiceState;
 import com.alibaba.rocketmq.common.UtilAll;
-import com.alibaba.rocketmq.common.conflict.PackageConflictDetect;
 import com.alibaba.rocketmq.common.constant.PermName;
 import com.alibaba.rocketmq.common.message.MessageExt;
 import com.alibaba.rocketmq.common.message.MessageQueue;
@@ -135,7 +134,6 @@ public MQClientInstance(ClientConfig clientConfig, int instanceIndex, String cli
     }
 
     public void start() throws MQClientException {
-        PackageConflictDetect.detectFastjson();
 
         synchronized (this) {
             switch (this.serviceState) {

File: rocketmq-filtersrv/src/main/java/com/alibaba/rocketmq/filtersrv/FiltersrvStartup.java
Patch:
@@ -19,7 +19,6 @@
 import ch.qos.logback.classic.joran.JoranConfigurator;
 import com.alibaba.rocketmq.common.MQVersion;
 import com.alibaba.rocketmq.common.MixAll;
-import com.alibaba.rocketmq.common.conflict.PackageConflictDetect;
 import com.alibaba.rocketmq.common.constant.LoggerName;
 import com.alibaba.rocketmq.remoting.netty.NettyServerConfig;
 import com.alibaba.rocketmq.remoting.netty.NettySystemConfig;
@@ -83,7 +82,7 @@ public static FiltersrvController createController(String[] args) {
 
         try {
             // 检测包冲突
-            PackageConflictDetect.detectFastjson();
+            //PackageConflictDetect.detectFastjson();
 
             // 解析命令行
             Options options = ServerUtil.buildCommandlineOptions(new Options());

File: rocketmq-namesrv/src/main/java/com/alibaba/rocketmq/namesrv/NamesrvStartup.java
Patch:
@@ -19,7 +19,6 @@
 import ch.qos.logback.classic.joran.JoranConfigurator;
 import com.alibaba.rocketmq.common.MQVersion;
 import com.alibaba.rocketmq.common.MixAll;
-import com.alibaba.rocketmq.common.conflict.PackageConflictDetect;
 import com.alibaba.rocketmq.common.constant.LoggerName;
 import com.alibaba.rocketmq.common.namesrv.NamesrvConfig;
 import com.alibaba.rocketmq.remoting.netty.NettyServerConfig;
@@ -69,7 +68,7 @@ public static NamesrvController main0(String[] args) {
 
         try {
             // 检测包冲突
-            PackageConflictDetect.detectFastjson();
+            //PackageConflictDetect.detectFastjson();
 
             // 解析命令行
             Options options = ServerUtil.buildCommandlineOptions(new Options());

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -20,7 +20,6 @@
 import ch.qos.logback.core.joran.spi.JoranException;
 import com.alibaba.rocketmq.common.MQVersion;
 import com.alibaba.rocketmq.common.MixAll;
-import com.alibaba.rocketmq.common.conflict.PackageConflictDetect;
 import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.remoting.protocol.RemotingCommand;
 import com.alibaba.rocketmq.srvutil.ServerUtil;
@@ -66,7 +65,7 @@ public static void main0(String[] args, RPCHook rpcHook) {
         System.setProperty(RemotingCommand.RemotingVersionKey, Integer.toString(MQVersion.CurrentVersion));
 
         // 检测包冲突
-        PackageConflictDetect.detectFastjson();
+        //PackageConflictDetect.detectFastjson();
 
         initCommand();
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/MapedFileQueue.java
Patch:
@@ -324,6 +324,7 @@ public boolean resetOffset(long offset) {
                 int where = (int) (offset % mapedFileLast.getFileSize());
                 mapedFileLast.setCommittedPosition(where);
                 mapedFileLast.setWrotePostion(where);
+                break;
             } else {
                 this.mapedFiles.remove(mapedFileLast);
             }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -798,10 +798,11 @@ public void queryMessage(//
                              final String addr, //
                              final QueryMessageRequestHeader requestHeader, //
                              final long timeoutMillis, //
-                             final InvokeCallback invokeCallback//
+                             final InvokeCallback invokeCallback,//
+                             final Boolean isUnqiueKey
     ) throws RemotingException, MQBrokerException, InterruptedException {
         RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.QUERY_MESSAGE, requestHeader);
-
+        request.addExtField(MixAll.UNIQUE_MSG_QUERY_FLAG, isUnqiueKey.toString());
         this.remotingClient.invokeAsync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr), request, timeoutMillis,
                 invokeCallback);
     }

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MixAll.java
Patch:
@@ -74,6 +74,7 @@ public class MixAll {
     // 为每个Consumer Group建立一个默认的Topic，前缀 + GroupName，用来保存重试多次都失败，接下来不再重试的消息
     public static final String DLQ_GROUP_TOPIC_PREFIX = "%DLQ%";
     public static final String SYSTEM_TOPIC_PREFIX = "rmq_sys_";
+    public static final String UNIQUE_MSG_QUERY_FLAG = "_UNIQUE_KEY_QUERY";
 
 
     public static String getRetryTopic(final String consumerGroup) {

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ProcessQueue.java
Patch:
@@ -100,6 +100,7 @@ public void cleanExpiredMsg(DefaultMQPushConsumer pushConsumer) {
             try {
                 // 过期的消息进入重试队列
                 pushConsumer.sendMessageBack(msg, 3);
+                log.info("send expire msg back. topic={}, msgId={}, storeHost={}, queueId={}, queueOffset={}", msg.getTopic(), msg.getMsgId(), msg.getStoreHost(), msg.getQueueId(), msg.getQueueOffset());
                 try {
                     this.lockTreeMap.writeLock().lockInterruptibly();
                     try {

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -195,13 +195,13 @@ public void run() {
                                 try {
                                     responseFuture.executeInvokeCallback();
                                 } catch (Throwable e) {
-                                    plog.warn("excute callback in executor exception, and callback throw", e);
+                                    plog.warn("execute callback in executor exception, and callback throw", e);
                                 }
                             }
                         });
                     } catch (Exception e) {
                         runInThisThread = true;
-                        plog.warn("excute callback in executor exception, maybe executor busy", e);
+                        plog.warn("execute callback in executor exception, maybe executor busy", e);
                     }
                 } else {
                     runInThisThread = true;

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -267,6 +267,8 @@ private RemotingCommand sendMessage(final ChannelHandlerContext ctx, //
 
         // 由于有直接返回的逻辑，所以必须要设置
         response.setOpaque(request.getOpaque());
+        //需要将region信息回传给客户端,只能放到协议头里
+        response.addExtField(MessageConst.PROPERTY_MSG_REGION,this.brokerController.getBrokerConfig().getRegionId());
 
         if (log.isDebugEnabled()) {
             log.debug("receive SendMessage request command, " + request);

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/common/ClientErrorCode.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.rocketmq.client;
+package com.alibaba.rocketmq.client.common;
 
 public class ClientErrorCode {
     public static final int ConnectBrokerException = 10001;

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.rocketmq.client.impl.producer;
 
-import com.alibaba.rocketmq.client.ClientErrorCode;
+import com.alibaba.rocketmq.client.common.ClientErrorCode;
 import com.alibaba.rocketmq.client.QueryResult;
 import com.alibaba.rocketmq.client.Validators;
 import com.alibaba.rocketmq.client.exception.MQBrokerException;

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/exception/MQClientException.java
Patch:
@@ -46,8 +46,9 @@ public int getResponseCode() {
         return responseCode;
     }
 
-    public void setResponseCode(final int responseCode) {
+    public MQClientException setResponseCode(final int responseCode) {
         this.responseCode = responseCode;
+        return this;
     }
 
     public String getErrorMessage() {

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/index/IndexService.java
Patch:
@@ -86,6 +86,8 @@ public boolean load(final boolean lastExitOK) {
                 } catch (IOException e) {
                     log.error("load file " + file + " error", e);
                     return false;
+                } catch (NumberFormatException e) {
+                    continue;
                 }
             }
         }

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/UtilAll.java
Patch:
@@ -563,13 +563,13 @@ public static byte[] getIP() {
             byte[] internalIP = null;
             while (allNetInterfaces.hasMoreElements()) {
                 NetworkInterface netInterface = (NetworkInterface) allNetInterfaces.nextElement();
-                System.out.println(netInterface.getName());
+            //    System.out.println(netInterface.getName());
                 Enumeration addresses = netInterface.getInetAddresses();                
                 while (addresses.hasMoreElements()) {
                     ip = (InetAddress) addresses.nextElement();
                     if (ip != null && ip instanceof Inet4Address) {
                         byte[] ipByte = ip.getAddress();
-                        System.out.println("get IP " + ipToIPv4Str(ipByte));
+                //        System.out.println("get IP " + ipToIPv4Str(ipByte));
                         //首先，必须能获得合法的IP字符串
                         if (ipByte.length == 4) {
                             //判断是否是正确IP                            

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -140,6 +140,7 @@ public static void initCommand() {
         initCommand(new QueryMsgByIdSubCommand());
         initCommand(new QueryMsgByKeySubCommand());
         initCommand(new QueryMsgByOffsetSubCommand());
+        initCommand(new QueryMsgByUniqueKeySubCommand());
         initCommand(new PrintMessageSubCommand());
         initCommand(new SendMsgStatusCommand());
         initCommand(new BrokerConsumeStatsSubCommad());

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MQVersion.java
Patch:
@@ -22,7 +22,7 @@
  */
 public class MQVersion {
     // TODO 每次发布版本都要修改此处版本号
-    public static final int CurrentVersion = Version.V3_4_9.ordinal();
+    public static final int CurrentVersion = Version.V3_5_1_SNAPSHOT.ordinal();
 
 
     public static String getVersionDesc(int value) {

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/index/IndexService.java
Patch:
@@ -233,8 +233,8 @@ public void buildIndex(DispatchRequest req) {
             switch (tranType) {
                 case MessageSysFlag.TransactionNotType:
                 case MessageSysFlag.TransactionPreparedType:
-                    break;
                 case MessageSysFlag.TransactionCommitType:
+                    break;
                 case MessageSysFlag.TransactionRollbackType:
                     return;
             }

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerController.java
Patch:
@@ -355,7 +355,6 @@ public void registerProcessor() {
          * ClientManageProcessor
          */
         ClientManageProcessor clientProcessor = new ClientManageProcessor(this);
-        clientProcessor.registerConsumeMessageHook(this.consumeMessageHookList);
         this.remotingServer.registerProcessor(RequestCode.HEART_BEAT, clientProcessor, this.clientManageExecutor);
         this.remotingServer.registerProcessor(RequestCode.UNREGISTER_CLIENT, clientProcessor, this.clientManageExecutor);
         this.remotingServer.registerProcessor(RequestCode.GET_CONSUMER_LIST_BY_GROUP, clientProcessor, this.clientManageExecutor);

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/mqtrace/ConsumeMessageHook.java
Patch:
@@ -16,11 +16,11 @@
 package com.alibaba.rocketmq.broker.mqtrace;
 
 public interface ConsumeMessageHook {
-    public String hookName();
+    String hookName();
 
 
-    public void consumeMessageBefore(final ConsumeMessageContext context);
+    void consumeMessageBefore(final ConsumeMessageContext context);
 
 
-    public void consumeMessageAfter(final ConsumeMessageContext context);
+    void consumeMessageAfter(final ConsumeMessageContext context);
 }

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/message/MessageConst.java
Patch:
@@ -53,6 +53,7 @@ public class MessageConst {
     public static final String PROPERTY_MQ2_FLAG = "MQ2_FLAG";
     public static final String PROPERTY_RECONSUME_TIME = "RECONSUME_TIME";
     public static final String PROPERTY_MAX_RECONSUME_TIMES = "MAX_RECONSUME_TIMES";
+    public static final String PROPERTY_CONSUME_START_TIMESTAMP = "CONSUME_START_TIME";
 
     public static final String KEY_SEPARATOR = " ";
 
@@ -78,5 +79,6 @@ public class MessageConst {
         systemKeySet.add(PROPERTY_MQ2_FLAG);
         systemKeySet.add(PROPERTY_RECONSUME_TIME);
         systemKeySet.add(PROPERTY_MAX_RECONSUME_TIMES);
+        systemKeySet.add(PROPERTY_CONSUME_START_TIMESTAMP);
     }
 }

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/longpolling/PullRequestHoldService.java
Patch:
@@ -77,7 +77,7 @@ public void run() {
         while (!this.isStoped()) {
             try {
                 if (this.brokerController.getBrokerConfig().isLongPollingEnable()) {
-                    this.waitForRunning(1000 * 30);
+                    this.waitForRunning(10 * 1000);
                 } else {
                     this.waitForRunning(this.brokerController.getBrokerConfig().getShortPollingTimeMills());
                 }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/PutMessageStatus.java
Patch:
@@ -30,5 +30,6 @@ public enum PutMessageStatus {
     CREATE_MAPEDFILE_FAILED,
     MESSAGE_ILLEGAL,
     PROPERTIES_SIZE_EXCEEDED,
+    OS_PAGECACHE_BUSY,
     UNKNOWN_ERROR,
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/listener/ConsumeOrderlyContext.java
Patch:
@@ -27,7 +27,7 @@
 public class ConsumeOrderlyContext {
     private final MessageQueue messageQueue;
     private boolean autoCommit = true;
-    private long suspendCurrentQueueTimeMillis = 1000;
+    private long suspendCurrentQueueTimeMillis = -1;
 
 
     public ConsumeOrderlyContext(MessageQueue messageQueue) {

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/MQAdmin.java
Patch:
@@ -106,7 +106,7 @@ void createTopic(String key, String newTopic, int queueNum, int topicSysFlag)
      * @throws RemotingException
      * @throws MQClientException
      */
-    MessageExt viewMessage(final String msgId) throws RemotingException, MQBrokerException,
+    MessageExt viewMessage(final String offsetMsgId) throws RemotingException, MQBrokerException,
             InterruptedException, MQClientException;
 
 
@@ -135,7 +135,7 @@ QueryResult queryMessage(final String topic, final String key, final int maxNum,
      * @throws InterruptedException
      * @throws MQClientException
      */
-    MessageExt queryMessageByUniqKey(String topic, String uniqKey) throws RemotingException, MQBrokerException, InterruptedException, MQClientException;        
+    MessageExt viewMessage(String topic, String msgId) throws RemotingException, MQBrokerException, InterruptedException, MQClientException;        
 
     
 }
\ No newline at end of file

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/DefaultMQPullConsumer.java
Patch:
@@ -143,9 +143,9 @@ public long earliestMsgStoreTime(MessageQueue mq) throws MQClientException {
 
 
     @Override
-    public MessageExt viewMessage(String msgId) throws RemotingException, MQBrokerException,
+    public MessageExt viewMessage(String offsetMsgId) throws RemotingException, MQBrokerException,
             InterruptedException, MQClientException {
-        return this.defaultMQPullConsumerImpl.viewMessage(msgId);
+        return this.defaultMQPullConsumerImpl.viewMessage(offsetMsgId);
     }
 
 
@@ -347,7 +347,7 @@ public Set<MessageQueue> fetchMessageQueuesInBalance(String topic) throws MQClie
     }
     
     @Override
-    public MessageExt queryMessageByUniqKey(String topic, String uniqKey) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
+    public MessageExt viewMessage(String topic, String uniqKey) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
         return this.defaultMQPullConsumerImpl.queryMessageByUniqKey(topic, uniqKey);
     }
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -1854,8 +1854,8 @@ public long flush() {
 
 
     @Override
-    public void resetWriteOffset(long phyOffset) {
-        throw new RuntimeException("unsupported method");
+    public boolean resetWriteOffset(long phyOffset) {
+        return this.commitLog.resetOffset(phyOffset);
     }
 
     @Override

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/MessageStore.java
Patch:
@@ -208,7 +208,7 @@ public Map<String, Long> getMessageIds(final String topic, int queueId, long min
     
     public long flush();
     
-    public void resetWriteOffset(long phyOffset);
+    public boolean resetWriteOffset(long phyOffset);
     
     public void setConfirmOffset(long phyOffset);
     

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/protocol/body/ConsumerRunningInfo.java
Patch:
@@ -212,7 +212,7 @@ public static boolean analyzeSubscription(final TreeMap<String/* clientId */, Co
             // todo: 兼容旧版本客户端
             String property = prev.getProperties().getProperty(ConsumerRunningInfo.PROP_CONSUMER_START_TIMESTAMP);
             if (property == null) {
-                property = (String) prev.getProperties().get(ConsumerRunningInfo.PROP_CONSUMER_START_TIMESTAMP);
+                property = String.valueOf(prev.getProperties().get(ConsumerRunningInfo.PROP_CONSUMER_START_TIMESTAMP));
             }
             startForAWhile = (System.currentTimeMillis() - Long.parseLong(property)) > (1000 * 60 * 2);
         }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/factory/MQClientInstance.java
Patch:
@@ -1224,7 +1224,7 @@ public ConsumerRunningInfo consumerRunningInfo(final String consumerGroup) {
         }
 
         consumerRunningInfo.getProperties().put(ConsumerRunningInfo.PROP_NAMESERVER_ADDR, nsAddr);
-        consumerRunningInfo.getProperties().put(ConsumerRunningInfo.PROP_CONSUME_TYPE, mqConsumerInner.consumeType());
+        consumerRunningInfo.getProperties().put(ConsumerRunningInfo.PROP_CONSUME_TYPE, mqConsumerInner.consumeType().name());
         consumerRunningInfo.getProperties().put(ConsumerRunningInfo.PROP_CLIENT_VERSION,
             MQVersion.getVersionDesc(MQVersion.CurrentVersion));
 

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -1094,7 +1094,8 @@ private RemotingCommand queryConsumeTimeSpan(ChannelHandlerContext ctx, Remoting
             timeSpan.setConsumeTimeStamp(consumeTime);
 
             // 在消息堆积的情况下,延迟时间 = 当前时间 - 下一条待消费的消息产生时间; 消息不堆积的情况下,延迟时间 = 0;
-            if (consumeTime < maxTime) {
+            long maxBrokerOffset = this.brokerController.getMessageStore().getMaxOffsetInQuque(requestHeader.getTopic(), i);
+            if (consumerOffset < maxBrokerOffset) {
                 long nextTime = this.brokerController.getMessageStore().getMessageStoreTimeStamp(topic, i, consumerOffset);
                 timeSpan.setDelayTime(System.currentTimeMillis() - nextTime);
             }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/stats/BrokerStatsManager.java
Patch:
@@ -53,7 +53,7 @@ public enum StatsType {
     public static final String COMMERCIAL_RCV_EPOLLS = "COMMERCIAL_RCV_EPOLLS";
 
     public static final String COMMERCIAL_SEND_SIZE = "COMMERCIAL_SEND_SIZE";
-    public static final String COMMERCIAL_RCV_SIZE = "COMMERCIAL_SEND_SIZE";
+    public static final String COMMERCIAL_RCV_SIZE = "COMMERCIAL_RCV_SIZE";
     public static final String COMMERCIAL_PERM_FAILURES = "COMMERCIAL_PERM_FAILURES";
     public static final String COMMERCIAL_OWNER = "Owner";
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/MQAdminImpl.java
Patch:
@@ -84,6 +84,7 @@ public void createTopic(String key, String newTopic, int queueNum, int topicSysF
             if (brokerDataList != null && !brokerDataList.isEmpty()) {
                 Collections.sort(brokerDataList);
 
+                boolean createOKAtLeastOnce = false;
                 MQClientException exception = null;
 
                 StringBuilder orderTopicString = new StringBuilder();
@@ -101,6 +102,7 @@ public void createTopic(String key, String newTopic, int queueNum, int topicSysF
                             try {
                                 this.mQClientFactory.getMQClientAPIImpl().createTopic(addr, key, topicConfig, timeoutMillis);
                                 createOK = true;
+                                createOKAtLeastOnce = true;
                                 break;
                             } catch (Exception e) {
                                 if (4 == i) {
@@ -118,7 +120,7 @@ public void createTopic(String key, String newTopic, int queueNum, int topicSysF
                     }
                 }
 
-                if (exception != null) {
+                if (exception != null && !createOKAtLeastOnce) {
                     throw exception;
                 }
             }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DefaultMessageFilter.java
Patch:
@@ -43,7 +43,7 @@ public boolean isMessageMatched(SubscriptionData subscriptionData, Long tagsCode
             return true;
         }
 
-        return subscriptionData.getCodeSet().contains(tagsCode);
+        return subscriptionData.getCodeSet().contains(tagsCode.intValue());
     }
 
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -694,6 +694,7 @@ private SendResult sendKernelImpl(final Message msg, //
                         timeout, // 5
                         communicationMode// 6
                     );
+                    break;
                 default:
                     assert false;
                     break;

File: rocketmq-namesrv/src/main/java/com/alibaba/rocketmq/namesrv/NamesrvStartup.java
Patch:
@@ -74,12 +74,12 @@ public static NamesrvController main0(String[] args) {
 
         // Socket发送缓冲区大小
         if (null == System.getProperty(NettySystemConfig.SystemPropertySocketSndbufSize)) {
-            NettySystemConfig.SocketSndbufSize = 2048;
+            NettySystemConfig.SocketSndbufSize = 4096;
         }
 
         // Socket接收缓冲区大小
         if (null == System.getProperty(NettySystemConfig.SystemPropertySocketRcvbufSize)) {
-            NettySystemConfig.SocketRcvbufSize = 1024;
+            NettySystemConfig.SocketRcvbufSize = 4096;
         }
 
         try {

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/quickstart/Producer.java
Patch:
@@ -47,7 +47,7 @@ public LocalTransactionState executeLocalTransactionBranch(Message msg, Object a
                         return null;
                     }
                 };
-       
+
                 //producer.sendMessageInTransaction(msg, tranExecuter, arg)
                 System.out.println(sendResult);
             } catch (Exception e) {

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/quickstart/Producer.java
Patch:
@@ -25,7 +25,6 @@
 
 /**
  * Producer，发送消息
- *
  */
 public class Producer {
     public static void main(String[] args) throws MQClientException, InterruptedException {
@@ -48,6 +47,7 @@ public LocalTransactionState executeLocalTransactionBranch(Message msg, Object a
                         return null;
                     }
                 };
+       
                 //producer.sendMessageInTransaction(msg, tranExecuter, arg)
                 System.out.println(sendResult);
             } catch (Exception e) {

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/stats/MomentStatsItem.java
Patch:
@@ -34,6 +34,8 @@ public void init() {
             public void run() {
                 try {
                     printAtMinutes();
+
+                    MomentStatsItem.this.value.set(0);
                 }
                 catch (Throwable e) {
                 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -984,7 +984,7 @@ public TransactionSendResult sendMessageInTransaction(final Message msg,
     }
 
 
-    private void endTransaction(//
+    public void endTransaction(//
             final SendResult sendResult, //
             final LocalTransactionState localTransactionState, //
             final Throwable localException) throws RemotingException, MQBrokerException,

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/config/MessageStoreConfig.java
Patch:
@@ -138,7 +138,7 @@ public class MessageStoreConfig {
     // slave 是否需要纠正位点
     private boolean offsetCheckInSlave = false;
     //
-    private boolean debugLockEnable = true;
+    private boolean debugLockEnable = false;
 
     public boolean isDebugLockEnable() {
         return debugLockEnable;

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/PullMessageProcessor.java
Patch:
@@ -402,7 +402,7 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
             case OFFSET_TOO_SMALL:
                 response.setCode(ResponseCode.PULL_OFFSET_MOVED);
                 log.info(
-                    "the request offset too small. group={}, topic={}, requestOffset{}, brokerMinOffset={}, clientIp={}",
+                    "the request offset too small. group={}, topic={}, requestOffset={}, brokerMinOffset={}, clientIp={}",
                     requestHeader.getConsumerGroup(), requestHeader.getTopic(),
                     requestHeader.getQueueOffset(), getMessageResult.getMinOffset(), channel.remoteAddress());
                 break;

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -1613,7 +1613,7 @@ else if (size == -1) {
                                 // 如果是备机模式，会很频繁走到这里。因为主备复制按照数据块来复制，会频繁出现半条消息达到
                                 // 如果是主机模式，消息一定是完整的。即使异常掉电或者kill -9 也会将半条消息纠错
                                 if(DefaultMessageStore.this.brokerConfig.getBrokerId() == MixAll.MASTER_ID){
-                                    log.error("the master dispatch message to consume queue error, COMMITLOG OFFSET: {}",this.reputFromOffset);
+                                    log.error("[BUG]the master dispatch message to consume queue error, COMMITLOG OFFSET: {}",this.reputFromOffset);
                                     // 一旦发生，强制跳到最新写入处
                                     this.reputFromOffset += (result.getSize() - readSize);
                                 }

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/simple/Producer.java
Patch:
@@ -30,7 +30,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
          * 因为服务器会回查这个Group下的任意一个Producer
          */
         DefaultMQProducer producer = new DefaultMQProducer("ProducerGroupName");
-
+        producer.setCreateTopicKey("test_longji");
         /**
          * Producer对象在使用之前必须要调用start初始化，初始化一次即可<br>
          * 注意：切记不可以在每次发送消息时，都调用start方法
@@ -46,7 +46,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
         for (int i = 0; i < 1; i++)
             try {
                 {
-                    Message msg = new Message("TopicTest1",// topic
+                    Message msg = new Message("TopicTest3",// topic
                         "TagA",// tag
                         "OrderID188",// key
                         ("Hello MetaQ").getBytes());// body

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/simple/PullConsumer.java
Patch:
@@ -37,7 +37,7 @@ public static void main(String[] args) throws MQClientException {
 
         consumer.start();
 
-        Set<MessageQueue> mqs = consumer.fetchSubscribeMessageQueues("TopicTest");
+        Set<MessageQueue> mqs = consumer.fetchSubscribeMessageQueues("TopicTest1");
         for (MessageQueue mq : mqs) {
             System.out.println("Consume from the queue: " + mq);
             SINGLE_MQ: while (true) {

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRemotingServer.java
Patch:
@@ -193,7 +193,6 @@ public void initChannel(SocketChannel ch) throws Exception {
                     });
 
         if (nettyServerConfig.isServerPooledByteBufAllocatorEnable()) {
-            // 这个选项有可能会占用大量堆外内存，暂时不使用。
             childHandler.childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT);
         }
 
@@ -210,7 +209,6 @@ public void initChannel(SocketChannel ch) throws Exception {
             this.nettyEventExecuter.start();
         }
 
-        // 每隔1秒扫描下异步调用超时情况
         this.timer.scheduleAtFixedRate(new TimerTask() {
 
             @Override

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/constant/LoggerName.java
Patch:
@@ -30,5 +30,6 @@ public class LoggerName {
     public static final String TransactionLoggerName = "RocketmqTransaction";
     public static final String RebalanceLockLoggerName = "RocketmqRebalanceLock";
     public static final String RocketmqStatsLoggerName = "RocketmqStats";
+    public static final String CommercialLoggerName = "RocketmqCommercial";
     public static final String RocketmqAuthorizeLoggerName = "RocketmqAuthorize";
 }

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -440,7 +440,7 @@ private RemotingCommand getConsumeStats(ChannelHandlerContext ctx, RemotingComma
                 consumeStats.getOffsetTable().put(mq, offsetWrapper);
             }
 
-            long consumeTps = (long) this.brokerController.getBrokerStatsManager().tpsGroupGetNums(requestHeader.getConsumerGroup(), topic);
+            double consumeTps = this.brokerController.getBrokerStatsManager().tpsGroupGetNums(requestHeader.getConsumerGroup(), topic);
 
             consumeTps += consumeStats.getConsumeTps();
             consumeStats.setConsumeTps(consumeTps);
@@ -1040,7 +1040,7 @@ private RemotingCommand queryConsumeTimeSpan(ChannelHandlerContext ctx, Remoting
             return response;
         }
 
-        Set<QueueTimeSpan> timeSpanSet = new HashSet<QueueTimeSpan>();
+        List<QueueTimeSpan> timeSpanSet = new ArrayList<QueueTimeSpan>();
         for (int i = 0; i < topicConfig.getWriteQueueNums(); i++) {
             QueueTimeSpan timeSpan = new QueueTimeSpan();
             MessageQueue mq = new MessageQueue();

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -1123,15 +1123,15 @@ public ConsumerStatsManager getConsumerStatsManager() {
     }
 
 
-    public Set<QueueTimeSpan> queryConsumeTimeSpan(final String topic) throws RemotingException,
+    public List<QueueTimeSpan> queryConsumeTimeSpan(final String topic) throws RemotingException,
             MQClientException, InterruptedException, MQBrokerException {
-        Set<QueueTimeSpan> queueTimeSpan = new HashSet<QueueTimeSpan>();
+        List<QueueTimeSpan> queueTimeSpan = new ArrayList<QueueTimeSpan>();
         TopicRouteData routeData =
                 this.mQClientFactory.getMQClientAPIImpl().getTopicRouteInfoFromNameServer(topic, 3000);
         for (BrokerData brokerData : routeData.getBrokerDatas()) {
             String addr = brokerData.selectBrokerAddr();
             queueTimeSpan.addAll(this.mQClientFactory.getMQClientAPIImpl().queryConsumeTimeSpan(addr, topic,
-                groupName(), 3000l));
+                    groupName(), 3000l));
         }
 
         return queueTimeSpan;

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MixAll.java
Patch:
@@ -74,6 +74,7 @@ public class MixAll {
     public static final String RETRY_GROUP_TOPIC_PREFIX = "%RETRY%";
     // 为每个Consumer Group建立一个默认的Topic，前缀 + GroupName，用来保存重试多次都失败，接下来不再重试的消息
     public static final String DLQ_GROUP_TOPIC_PREFIX = "%DLQ%";
+    public static final String SYSTEM_TOPIC_PREFIX = "rmq_sys_";
 
 
     public static String getRetryTopic(final String consumerGroup) {

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/admin/DefaultMQAdminExt.java
Patch:
@@ -353,7 +353,7 @@ public GroupList queryTopicConsumeByWho(String topic) throws InterruptedExceptio
 
 
     @Override
-    public Set<QueueTimeSpan> queryConsumeTimeSpan(final String topic, final String group)
+    public List<QueueTimeSpan> queryConsumeTimeSpan(final String topic, final String group)
             throws InterruptedException, MQBrokerException, RemotingException, MQClientException {
         return this.defaultMQAdminExtImpl.queryConsumeTimeSpan(topic, group);
     }

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/admin/MQAdminExt.java
Patch:
@@ -464,7 +464,7 @@ public GroupList queryTopicConsumeByWho(final String topic) throws RemotingConne
      * @throws RemotingException
      * @throws MQClientException
      */
-    public Set<QueueTimeSpan> queryConsumeTimeSpan(final String topic, final String group)
+    public List<QueueTimeSpan> queryConsumeTimeSpan(final String topic, final String group)
             throws InterruptedException, MQBrokerException, RemotingException, MQClientException;
 
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/admin/DefaultMQAdminExtImpl.java
Patch:
@@ -602,7 +602,7 @@ public Set<QueueTimeSpan> queryConsumeTimeSpan(final String topic, final String
                 spanSet.addAll(this.mqClientInstance.getMQClientAPIImpl().queryConsumeTimeSpan(addr, topic, group, 3000));
             }
         }
-        return null;
+        return spanSet;
     }
 
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -73,7 +73,7 @@ public ConsumeMessageOrderlyService(DefaultMQPushConsumerImpl defaultMQPushConsu
 
         this.defaultMQPushConsumer = this.defaultMQPushConsumerImpl.getDefaultMQPushConsumer();
         this.consumerGroup = this.defaultMQPushConsumer.getConsumerGroup();
-        this.consumeRequestQueue = new LinkedBlockingQueue<Runnable>();
+        this.consumeRequestQueue = new LinkedBlockingQueue<Runnable>(5000);
 
         this.consumeExecutor = new ThreadPoolExecutor(//
             this.defaultMQPushConsumer.getConsumeThreadMin(),//

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java
Patch:
@@ -67,7 +67,7 @@ public ConsumeMessageConcurrentlyService(DefaultMQPushConsumerImpl defaultMQPush
 
         this.defaultMQPushConsumer = this.defaultMQPushConsumerImpl.getDefaultMQPushConsumer();
         this.consumerGroup = this.defaultMQPushConsumer.getConsumerGroup();
-        this.consumeRequestQueue = new LinkedBlockingQueue<Runnable>();
+        this.consumeRequestQueue = new LinkedBlockingQueue<Runnable>(5000);
 
         this.consumeExecutor = new ThreadPoolExecutor(//
             this.defaultMQPushConsumer.getConsumeThreadMin(),//

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/ha/HAService.java
Patch:
@@ -298,7 +298,7 @@ private void doWaitTransfer() {
             if (!this.requestsRead.isEmpty()) {
                 for (GroupCommitRequest req : this.requestsRead) {
                     boolean transferOK = HAService.this.push2SlaveMaxOffset.get() >= req.getNextOffset();
-                    for (int i = 0; !transferOK && i < 5;) {
+                    for (int i = 0; !transferOK && i < 5; i++) {
                         this.notifyTransferObject.waitForRunning(1000);
                         transferOK = HAService.this.push2SlaveMaxOffset.get() >= req.getNextOffset();
                     }

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/github/SyncDocsToGithubSubCommand.java
Patch:
@@ -67,9 +67,7 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
         String password = commandLine.getOptionValue('p').trim();
 
         try {
-            System.setProperty("login", userName);
-            System.setProperty("password", password);
-            GitHub github = GitHub.connect();
+            GitHub github = GitHub.connectUsingPassword(userName, password);
             GHOrganization alibaba = github.getOrganization("Alibaba");
             GHRepository rep = alibaba.getRepository("RocketMQ");
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/github/SyncDocsToGithubSubCommand.java
Patch:
@@ -51,7 +51,6 @@ private static boolean syncIssue(final GHRepository rep, final int issueId, fina
         try {
             GHIssue issue = rep.getIssue(issueId);
             issue.setBody(body);
-            issue.close();
             return true;
         }
         catch (Exception e) {

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MixAll.java
Patch:
@@ -211,7 +211,7 @@ public static final String file2String(final URL url) {
     }
 
 
-    private static final String file2String(final File file) {
+    public static final String file2String(final File file) {
         if (file.exists()) {
             char[] data = new char[(int) file.length()];
             boolean result = false;

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -61,6 +61,7 @@
 import com.alibaba.rocketmq.tools.command.topic.TopicStatusSubCommand;
 import com.alibaba.rocketmq.tools.command.topic.UpdateOrderConfCommand;
 import com.alibaba.rocketmq.tools.command.topic.UpdateTopicSubCommand;
+import com.alibaba.rocketmq.tools.github.SyncDocsToGithubSubCommand;
 
 
 /**
@@ -110,6 +111,8 @@ public static void initCommand() {
         initCommand(new StartMonitoringSubCommand());
         initCommand(new CheckMsgSubCommand());
         initCommand(new StatsAllSubCommand());
+
+        initCommand(new SyncDocsToGithubSubCommand());
     }
 
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -611,6 +611,8 @@ private SendResult sendDefaultImpl(//
                         msg.getTopic(),//
                         Arrays.toString(brokersSent));
 
+            info += FAQUrl.suggestTodo(FAQUrl.SEND_MSG_FAILED);
+
             throw new MQClientException(info, exception);
         }
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/stats/StatsAllSubCommand.java
Patch:
@@ -164,7 +164,8 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
             boolean activeTopic = commandLine.hasOption('a');
 
             for (String topic : topicList.getTopicList()) {
-                if (topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
+                if (topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)
+                        || topic.startsWith(MixAll.DLQ_GROUP_TOPIC_PREFIX)) {
                     continue;
                 }
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/stats/BrokerStatsManager.java
Patch:
@@ -105,7 +105,7 @@ public void incBrokerPutNums() {
 
 
     public void incBrokerGetNums(final int incValue) {
-        this.statsTable.get(BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue()
+        this.statsTable.get(BROKER_GET_NUMS).getAndCreateStatsItem(this.clusterName).getValue()
             .addAndGet(incValue);
     }
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -1739,7 +1739,8 @@ private void doReput() {
                             if (size > 0) {
                                 DefaultMessageStore.this.putDispatchRequest(dispatchRequest);
 
-                                this.reputFromOffset = result.getStartOffset() + size;
+                                // FIXED BUG By shijia
+                                this.reputFromOffset += size;
                                 readSize += size;
                                 DefaultMessageStore.this.storeStatsService
                                     .getSinglePutMessageTopicTimesTotal(dispatchRequest.getTopic())

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/client/DefaultConsumerIdsChangeListener.java
Patch:
@@ -15,11 +15,12 @@
  */
 package com.alibaba.rocketmq.broker.client;
 
-import com.alibaba.rocketmq.broker.BrokerController;
 import io.netty.channel.Channel;
 
 import java.util.List;
 
+import com.alibaba.rocketmq.broker.BrokerController;
+
 
 /**
  * ConsumerId列表变化，通知所有Consumer

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/Validators.java
Patch:
@@ -1,15 +1,15 @@
 package com.alibaba.rocketmq.client;
 
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
 import com.alibaba.rocketmq.client.exception.MQClientException;
 import com.alibaba.rocketmq.client.producer.DefaultMQProducer;
 import com.alibaba.rocketmq.common.MixAll;
 import com.alibaba.rocketmq.common.UtilAll;
 import com.alibaba.rocketmq.common.message.Message;
 import com.alibaba.rocketmq.common.protocol.ResponseCode;
 
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
 
 /**
  * 有效性检查公用类。

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/producer/TopicPublishInfo.java
Patch:
@@ -15,12 +15,12 @@
  */
 package com.alibaba.rocketmq.client.impl.producer;
 
-import com.alibaba.rocketmq.common.message.MessageQueue;
-
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
 
+import com.alibaba.rocketmq.common.message.MessageQueue;
+
 
 /**
  * 发布Topic用到的路由信息

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/BrokerConfig.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.rocketmq.common;
 
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+
 import com.alibaba.rocketmq.common.annotation.ImportantField;
 import com.alibaba.rocketmq.common.constant.PermName;
 import com.alibaba.rocketmq.remoting.common.RemotingUtil;
 
-import java.net.InetAddress;
-import java.net.UnknownHostException;
-
 
 /**
  * 服务器配置

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/protocol/RequestCode.java
Patch:
@@ -167,4 +167,6 @@ public class RequestCode {
     // 克隆某一个组的消费进度到新的组
     public static final int CLONE_GROUP_OFFSET = 314;
 
+    // 查看Broker上的各种统计信息
+    public static final int VIEW_BROKER_STATS_DATA = 315;
 }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/MessageStore.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.rocketmq.store;
 
-import com.alibaba.rocketmq.common.message.MessageExt;
-import com.alibaba.rocketmq.common.protocol.heartbeat.SubscriptionData;
-
 import java.net.SocketAddress;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
 
+import com.alibaba.rocketmq.common.message.MessageExt;
+import com.alibaba.rocketmq.common.protocol.heartbeat.SubscriptionData;
+
 
 /**
  * 存储层对外提供的接口

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/RebalanceImpl.java
Patch:
@@ -527,5 +527,7 @@ public void destroy() {
             Entry<MessageQueue, ProcessQueue> next = it.next();
             next.getValue().setDroped(true);
         }
+
+        this.processQueueTable.clear();
     }
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -662,6 +662,7 @@ public void shutdown() {
             this.mQClientFactory.unregisterConsumer(this.defaultMQPushConsumer.getConsumerGroup());
             this.mQClientFactory.shutdown();
             log.info("the consumer [{}] shutdown OK", this.defaultMQPushConsumer.getConsumerGroup());
+            this.rebalanceImpl.destroy();
             this.serviceState = ServiceState.SHUTDOWN_ALREADY;
             break;
         case SHUTDOWN_ALREADY:

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java
Patch:
@@ -432,7 +432,7 @@ public ConsumeMessageDirectlyResult consumeMessageDirectly(MessageExt msg, Strin
             result.setConsumeResult(CMResult.CR_THROW_EXCEPTION);
             result.setRemark(RemotingHelper.exceptionSimpleDesc(e));
 
-            log.warn(String.format("consumeMessageDirectly exception: {} Group: {} Msgs: {} MQ: {}",//
+            log.warn(String.format("consumeMessageDirectly exception: %s Group: %s Msgs: %s MQ: %s",//
                 RemotingHelper.exceptionSimpleDesc(e),//
                 ConsumeMessageConcurrentlyService.this.consumerGroup,//
                 msgs,//

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -533,7 +533,7 @@ public ConsumeMessageDirectlyResult consumeMessageDirectly(MessageExt msg, Strin
             result.setConsumeResult(CMResult.CR_THROW_EXCEPTION);
             result.setRemark(RemotingHelper.exceptionSimpleDesc(e));
 
-            log.warn(String.format("consumeMessageDirectly exception: {} Group: {} Msgs: {} MQ: {}",//
+            log.warn(String.format("consumeMessageDirectly exception: %s Group: %s Msgs: %s MQ: %s",//
                 RemotingHelper.exceptionSimpleDesc(e),//
                 ConsumeMessageOrderlyService.this.consumerGroup,//
                 msgs,//

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java
Patch:
@@ -432,7 +432,7 @@ public ConsumeMessageDirectlyResult consumeMessageDirectly(MessageExt msg, Strin
             result.setConsumeResult(CMResult.CR_THROW_EXCEPTION);
             result.setRemark(RemotingHelper.exceptionSimpleDesc(e));
 
-            log.warn(String.format("consumeMessageDirectly exception: {} Group: {} Msgs: {} MQ: {}",//
+            log.warn(String.format("consumeMessageDirectly exception: %s Group: %s Msgs: %s MQ: %s",//
                 RemotingHelper.exceptionSimpleDesc(e),//
                 ConsumeMessageConcurrentlyService.this.consumerGroup,//
                 msgs,//

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -533,7 +533,7 @@ public ConsumeMessageDirectlyResult consumeMessageDirectly(MessageExt msg, Strin
             result.setConsumeResult(CMResult.CR_THROW_EXCEPTION);
             result.setRemark(RemotingHelper.exceptionSimpleDesc(e));
 
-            log.warn(String.format("consumeMessageDirectly exception: {} Group: {} Msgs: {} MQ: {}",//
+            log.warn(String.format("consumeMessageDirectly exception: %s Group: %s Msgs: %s MQ: %s",//
                 RemotingHelper.exceptionSimpleDesc(e),//
                 ConsumeMessageOrderlyService.this.consumerGroup,//
                 msgs,//

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerController.java
Patch:
@@ -334,6 +334,8 @@ public void registerProcessor() {
         sendProcessor.registerSendMessageHook(sendMessageHookList);
         this.remotingServer.registerProcessor(RequestCode.SEND_MESSAGE, sendProcessor,
             this.sendMessageExecutor);
+        this.remotingServer.registerProcessor(RequestCode.SEND_MESSAGE_V2, sendProcessor,
+            this.sendMessageExecutor);
         this.remotingServer.registerProcessor(RequestCode.CONSUMER_SEND_MSG_BACK, sendProcessor,
             this.sendMessageExecutor);
 

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/protocol/ResponseCode.java
Patch:
@@ -53,4 +53,7 @@ public class ResponseCode extends RemotingSysResponseCode {
 
     // Consumer不在线
     public static final int CONSUMER_NOT_ONLINE = 206;
+
+    // Consumer消费消息超时
+    public static final int CONSUME_MSG_TIMEOUT = 207;
 }

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/benchmark/Consumer.java
Patch:
@@ -85,7 +85,9 @@ public void run() {
             }
         }, 10000, 10000);
 
-        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("benchmark_consumer");
+        DefaultMQPushConsumer consumer =
+                new DefaultMQPushConsumer("benchmark_consumer_"
+                        + Long.toString(System.currentTimeMillis() % 100));
         consumer.setInstanceName(Long.toString(System.currentTimeMillis()));
 
         consumer.subscribe("BenchmarkTest", "*");

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/simple/Producer.java
Patch:
@@ -30,7 +30,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
          * 因为服务器会回查这个Group下的任意一个Producer
          */
         DefaultMQProducer producer = new DefaultMQProducer("ProducerGroupName");
-        producer.setNamesrvAddr("10.235.170.7:9877");
+        producer.setNamesrvAddr("10.235.169.73:9876");
         /**
          * Producer对象在使用之前必须要调用start初始化，初始化一次即可<br>
          * 注意：切记不可以在每次发送消息时，都调用start方法
@@ -43,7 +43,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
          * 例如消息写入Master成功，但是Slave不成功，这种情况消息属于成功，但是对于个别应用如果对消息可靠性要求极高，<br>
          * 需要对这种情况做处理。另外，消息可能会存在发送失败的情况，失败重试由应用来处理。
          */
-        for(int i = 0; i < 1000; i++)
+        for(int i = 0; i < 10; i++)
         try {
             {
                 Message msg = new Message("TopicTest1",// topic

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -111,7 +111,7 @@ public void run() {
             while (!this.isStoped()) {
                 try {
                     NettyEvent event = this.eventQueue.poll(3000, TimeUnit.MILLISECONDS);
-                    if (event != null) {
+                    if (event != null && listener != null) {
                         switch (event.getType()) {
                         case IDLE:
                             listener.onChannelIdle(event.getRemoteAddr(), event.getChannel());

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettySystemConfig.java
Patch:
@@ -20,10 +20,10 @@ public class NettySystemConfig {
     public static final String SystemPropertyClientAsyncSemaphoreValue = //
             "com.rocketmq.remoting.clientAsyncSemaphoreValue";
     public static int ClientAsyncSemaphoreValue = //
-            Integer.parseInt(System.getProperty(SystemPropertyClientAsyncSemaphoreValue, "128"));
+            Integer.parseInt(System.getProperty(SystemPropertyClientAsyncSemaphoreValue, "2048"));
 
     public static final String SystemPropertyClientOnewaySemaphoreValue = //
             "com.rocketmq.remoting.clientOnewaySemaphoreValue";
     public static int ClientOnewaySemaphoreValue = //
-            Integer.parseInt(System.getProperty(SystemPropertyClientOnewaySemaphoreValue, "256"));
+            Integer.parseInt(System.getProperty(SystemPropertyClientOnewaySemaphoreValue, "2048"));
 }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -546,7 +546,8 @@ else if (offset > maxOffset) {
 
                         nextBeginOffset = offset + (i / ConsumeQueue.CQStoreUnitSize);
 
-                        long diff = maxOffset - maxPhyOffsetPulling;
+                        // TODO 是否会影响性能，需要测试
+                        long diff = this.getMaxPhyOffset() - maxPhyOffsetPulling;
                         long memory =
                                 (long) (StoreUtil.TotalPhysicalMemorySize * (this.messageStoreConfig
                                     .getAccessMessageInMemoryMaxRatio() / 100.0));

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerController.java
Patch:
@@ -334,6 +334,8 @@ public void registerProcessor() {
         sendProcessor.registerSendMessageHook(sendMessageHookList);
         this.remotingServer.registerProcessor(RequestCode.SEND_MESSAGE, sendProcessor,
             this.sendMessageExecutor);
+        this.remotingServer.registerProcessor(RequestCode.SEND_MESSAGE_V2, sendProcessor,
+            this.sendMessageExecutor);
         this.remotingServer.registerProcessor(RequestCode.CONSUMER_SEND_MSG_BACK, sendProcessor,
             this.sendMessageExecutor);
 

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/protocol/ResponseCode.java
Patch:
@@ -53,4 +53,7 @@ public class ResponseCode extends RemotingSysResponseCode {
 
     // Consumer不在线
     public static final int CONSUMER_NOT_ONLINE = 206;
+
+    // Consumer消费消息超时
+    public static final int CONSUME_MSG_TIMEOUT = 207;
 }

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/benchmark/Consumer.java
Patch:
@@ -85,7 +85,9 @@ public void run() {
             }
         }, 10000, 10000);
 
-        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("benchmark_consumer");
+        DefaultMQPushConsumer consumer =
+                new DefaultMQPushConsumer("benchmark_consumer_"
+                        + Long.toString(System.currentTimeMillis() % 100));
         consumer.setInstanceName(Long.toString(System.currentTimeMillis()));
 
         consumer.subscribe("BenchmarkTest", "*");

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/simple/Producer.java
Patch:
@@ -30,7 +30,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
          * 因为服务器会回查这个Group下的任意一个Producer
          */
         DefaultMQProducer producer = new DefaultMQProducer("ProducerGroupName");
-        producer.setNamesrvAddr("10.235.170.7:9877");
+        producer.setNamesrvAddr("10.235.169.73:9876");
         /**
          * Producer对象在使用之前必须要调用start初始化，初始化一次即可<br>
          * 注意：切记不可以在每次发送消息时，都调用start方法
@@ -43,7 +43,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
          * 例如消息写入Master成功，但是Slave不成功，这种情况消息属于成功，但是对于个别应用如果对消息可靠性要求极高，<br>
          * 需要对这种情况做处理。另外，消息可能会存在发送失败的情况，失败重试由应用来处理。
          */
-        for(int i = 0; i < 1000; i++)
+        for(int i = 0; i < 10; i++)
         try {
             {
                 Message msg = new Message("TopicTest1",// topic

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -111,7 +111,7 @@ public void run() {
             while (!this.isStoped()) {
                 try {
                     NettyEvent event = this.eventQueue.poll(3000, TimeUnit.MILLISECONDS);
-                    if (event != null) {
+                    if (event != null && listener != null) {
                         switch (event.getType()) {
                         case IDLE:
                             listener.onChannelIdle(event.getRemoteAddr(), event.getChannel());

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettySystemConfig.java
Patch:
@@ -20,10 +20,10 @@ public class NettySystemConfig {
     public static final String SystemPropertyClientAsyncSemaphoreValue = //
             "com.rocketmq.remoting.clientAsyncSemaphoreValue";
     public static int ClientAsyncSemaphoreValue = //
-            Integer.parseInt(System.getProperty(SystemPropertyClientAsyncSemaphoreValue, "128"));
+            Integer.parseInt(System.getProperty(SystemPropertyClientAsyncSemaphoreValue, "2048"));
 
     public static final String SystemPropertyClientOnewaySemaphoreValue = //
             "com.rocketmq.remoting.clientOnewaySemaphoreValue";
     public static int ClientOnewaySemaphoreValue = //
-            Integer.parseInt(System.getProperty(SystemPropertyClientOnewaySemaphoreValue, "256"));
+            Integer.parseInt(System.getProperty(SystemPropertyClientOnewaySemaphoreValue, "2048"));
 }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -546,7 +546,8 @@ else if (offset > maxOffset) {
 
                         nextBeginOffset = offset + (i / ConsumeQueue.CQStoreUnitSize);
 
-                        long diff = maxOffset - maxPhyOffsetPulling;
+                        // TODO 是否会影响性能，需要测试
+                        long diff = this.getMaxPhyOffset() - maxPhyOffsetPulling;
                         long memory =
                                 (long) (StoreUtil.TotalPhysicalMemorySize * (this.messageStoreConfig
                                     .getAccessMessageInMemoryMaxRatio() / 100.0));

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -612,6 +612,7 @@ public void sendMessageBack(MessageExt msg, int delayLevel) throws RemotingExcep
             // 这里要删除无用的属性，防止服务器发生冲突。TODO
             MessageAccessor.setProperties(newMsg, msg.getProperties());
             MessageAccessor.putProperty(newMsg, MessageConst.PROPERTY_RETRY_TOPIC, msg.getTopic());
+            MessageAccessor.setReconsumeTime(newMsg, (msg.getReconsumeTimes() + 1) + "");
 
             this.mQClientFactory.getDefaultMQProducer().send(newMsg);
         }

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/message/MessageConst.java
Patch:
@@ -51,6 +51,7 @@ public class MessageConst {
     public static final String PROPERTY_TRANSFER_FLAG = "TRANSFER_FLAG";
     public static final String PROPERTY_CORRECTION_FLAG = "CORRECTION_FLAG";
     public static final String PROPERTY_MQ2_FLAG = "MQ2_FLAG";
+    public static final String PROPERTY_RECONSUME_TIME = "RECONSUME_TIME";
 
     public static final String KEY_SEPARATOR = " ";
 
@@ -72,5 +73,6 @@ public class MessageConst {
         systemKeySet.add(PROPERTY_TRANSFER_FLAG);
         systemKeySet.add(PROPERTY_CORRECTION_FLAG);
         systemKeySet.add(PROPERTY_MQ2_FLAG);
+        systemKeySet.add(PROPERTY_RECONSUME_TIME);
     }
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -612,6 +612,7 @@ public void sendMessageBack(MessageExt msg, int delayLevel) throws RemotingExcep
             // 这里要删除无用的属性，防止服务器发生冲突。TODO
             MessageAccessor.setProperties(newMsg, msg.getProperties());
             MessageAccessor.putProperty(newMsg, MessageConst.PROPERTY_RETRY_TOPIC, msg.getTopic());
+            MessageAccessor.setReconsumeTime(newMsg, (msg.getReconsumeTimes() + 1) + "");
 
             this.mQClientFactory.getDefaultMQProducer().send(newMsg);
         }

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/message/MessageConst.java
Patch:
@@ -51,6 +51,7 @@ public class MessageConst {
     public static final String PROPERTY_TRANSFER_FLAG = "TRANSFER_FLAG";
     public static final String PROPERTY_CORRECTION_FLAG = "CORRECTION_FLAG";
     public static final String PROPERTY_MQ2_FLAG = "MQ2_FLAG";
+    public static final String PROPERTY_RECONSUME_TIME = "RECONSUME_TIME";
 
     public static final String KEY_SEPARATOR = " ";
 
@@ -72,5 +73,6 @@ public class MessageConst {
         systemKeySet.add(PROPERTY_TRANSFER_FLAG);
         systemKeySet.add(PROPERTY_CORRECTION_FLAG);
         systemKeySet.add(PROPERTY_MQ2_FLAG);
+        systemKeySet.add(PROPERTY_RECONSUME_TIME);
     }
 }

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -409,7 +409,8 @@ private RemotingCommand sendMessage(final ChannelHandlerContext ctx, final Remot
         msgInner.setBornHost(ctx.channel().remoteAddress());
         msgInner.setStoreHost(this.getStoreHost());
 
-        msgInner.setReconsumeTimes(0);
+        msgInner.setReconsumeTimes(requestHeader.getReconsumeTimes() == null ? 0 : requestHeader
+            .getReconsumeTimes());
 
         // 检查事务消息
         if (this.brokerController.getBrokerConfig().isRejectTransactionMessage()) {

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -409,7 +409,8 @@ private RemotingCommand sendMessage(final ChannelHandlerContext ctx, final Remot
         msgInner.setBornHost(ctx.channel().remoteAddress());
         msgInner.setStoreHost(this.getStoreHost());
 
-        msgInner.setReconsumeTimes(0);
+        msgInner.setReconsumeTimes(requestHeader.getReconsumeTimes() == null ? 0 : requestHeader
+            .getReconsumeTimes());
 
         // 检查事务消息
         if (this.brokerController.getBrokerConfig().isRejectTransactionMessage()) {

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -546,7 +546,8 @@ else if (offset > maxOffset) {
 
                         nextBeginOffset = offset + (i / ConsumeQueue.CQStoreUnitSize);
 
-                        long diff = maxOffset - maxPhyOffsetPulling;
+                        // TODO 是否会影响性能，需要测试
+                        long diff = this.getMaxPhyOffset() - maxPhyOffsetPulling;
                         long memory =
                                 (long) (StoreUtil.TotalPhysicalMemorySize * (this.messageStoreConfig
                                     .getAccessMessageInMemoryMaxRatio() / 100.0));

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -546,7 +546,8 @@ else if (offset > maxOffset) {
 
                         nextBeginOffset = offset + (i / ConsumeQueue.CQStoreUnitSize);
 
-                        long diff = maxOffset - maxPhyOffsetPulling;
+                        // TODO 是否会影响性能，需要测试
+                        long diff = this.getMaxPhyOffset() - maxPhyOffsetPulling;
                         long memory =
                                 (long) (StoreUtil.TotalPhysicalMemorySize * (this.messageStoreConfig
                                     .getAccessMessageInMemoryMaxRatio() / 100.0));

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/broker/BrokerStatusSubCommand.java
Patch:
@@ -35,17 +35,17 @@
  * @author shijia.wxr<vintage.wang@gmail.com>
  * @since 2013-8-14
  */
-public class BrokerStatsSubCommand implements SubCommand {
+public class BrokerStatusSubCommand implements SubCommand {
 
     @Override
     public String commandName() {
-        return "brokerStats";
+        return "brokerStatus";
     }
 
 
     @Override
     public String commandDesc() {
-        return "Fetch broker runtime stats data";
+        return "Fetch broker runtime status data";
     }
 
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/topic/TopicStatusSubCommand.java
Patch:
@@ -38,17 +38,17 @@
  * @author shijia.wxr<vintage.wang@gmail.com>
  * @since 2013-8-3
  */
-public class TopicStatsSubCommand implements SubCommand {
+public class TopicStatusSubCommand implements SubCommand {
 
     @Override
     public String commandName() {
-        return "topicStats";
+        return "topicStatus";
     }
 
 
     @Override
     public String commandDesc() {
-        return "Examine topic stats info";
+        return "Examine topic Status info";
     }
 
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/monitor/MonitorListener.java
Patch:
@@ -1,5 +1,7 @@
 package com.alibaba.rocketmq.tools.monitor;
 
+import java.util.Map;
+
 import com.alibaba.rocketmq.common.protocol.body.ConsumerRunningInfo;
 
 
@@ -34,7 +36,7 @@ public interface MonitorListener {
     /**
      * 汇报Consumer内部运行数据结构
      */
-    public void reportConsumerRunningInfo(ConsumerRunningInfo consumerRunningInfo);
+    public void reportConsumerRunningInfo(Map<String/* clientId */, ConsumerRunningInfo> criTable);
 
 
     /**

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/broker/BrokerStatusSubCommand.java
Patch:
@@ -35,17 +35,17 @@
  * @author shijia.wxr<vintage.wang@gmail.com>
  * @since 2013-8-14
  */
-public class BrokerStatsSubCommand implements SubCommand {
+public class BrokerStatusSubCommand implements SubCommand {
 
     @Override
     public String commandName() {
-        return "brokerStats";
+        return "brokerStatus";
     }
 
 
     @Override
     public String commandDesc() {
-        return "Fetch broker runtime stats data";
+        return "Fetch broker runtime status data";
     }
 
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/topic/TopicStatusSubCommand.java
Patch:
@@ -38,17 +38,17 @@
  * @author shijia.wxr<vintage.wang@gmail.com>
  * @since 2013-8-3
  */
-public class TopicStatsSubCommand implements SubCommand {
+public class TopicStatusSubCommand implements SubCommand {
 
     @Override
     public String commandName() {
-        return "topicStats";
+        return "topicStatus";
     }
 
 
     @Override
     public String commandDesc() {
-        return "Examine topic stats info";
+        return "Examine topic Status info";
     }
 
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/monitor/MonitorListener.java
Patch:
@@ -1,5 +1,7 @@
 package com.alibaba.rocketmq.tools.monitor;
 
+import java.util.Map;
+
 import com.alibaba.rocketmq.common.protocol.body.ConsumerRunningInfo;
 
 
@@ -34,7 +36,7 @@ public interface MonitorListener {
     /**
      * 汇报Consumer内部运行数据结构
      */
-    public void reportConsumerRunningInfo(ConsumerRunningInfo consumerRunningInfo);
+    public void reportConsumerRunningInfo(Map<String/* clientId */, ConsumerRunningInfo> criTable);
 
 
     /**

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/constant/LoggerName.java
Patch:
@@ -30,4 +30,5 @@ public class LoggerName {
     public static final String TransactionLoggerName = "RocketmqTransaction";
     public static final String RebalanceLockLoggerName = "RocketmqRebalanceLock";
     public static final String RocketmqStatsLoggerName = "RocketmqStats";
+    public static final String RocketmqAuthorizeLoggerName = "RocketmqAuthorize";
 }

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/SubCommand.java
Patch:
@@ -18,6 +18,8 @@
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.Options;
 
+import com.alibaba.rocketmq.remoting.RPCHook;
+
 
 /**
  * 各个子命令的接口
@@ -35,5 +37,5 @@ public interface SubCommand {
     public Options buildCommandlineOptions(final Options options);
 
 
-    public void execute(final CommandLine commandLine, final Options options);
+    public void execute(final CommandLine commandLine, final Options options, RPCHook rpcHook);
 }

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/broker/BrokerStatsSubCommand.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.commons.cli.Options;
 
 import com.alibaba.rocketmq.common.protocol.body.KVTable;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -59,8 +60,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/broker/CleanExpiredCQSubCommand.java
Patch:
@@ -4,6 +4,7 @@
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
 
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -40,8 +41,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 
         try {

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/broker/UpdateBrokerConfigSubCommand.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
 
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.srvutil.ServerUtil;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.CommandUtil;
@@ -71,8 +72,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/cluster/ClusterListSubCommand.java
Patch:
@@ -28,6 +28,7 @@
 import com.alibaba.rocketmq.common.protocol.body.ClusterInfo;
 import com.alibaba.rocketmq.common.protocol.body.KVTable;
 import com.alibaba.rocketmq.common.protocol.route.BrokerData;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.remoting.exception.RemotingConnectException;
 import com.alibaba.rocketmq.remoting.exception.RemotingSendRequestException;
 import com.alibaba.rocketmq.remoting.exception.RemotingTimeoutException;
@@ -230,8 +231,8 @@ private void printClusterMoreStats(final DefaultMQAdminExt defaultMQAdminExt)
 
 
     @Override
-    public void execute(final CommandLine commandLine, final Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(final CommandLine commandLine, final Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/connection/ConsumerConnectionSubCommand.java
Patch:
@@ -26,6 +26,7 @@
 import com.alibaba.rocketmq.common.protocol.body.Connection;
 import com.alibaba.rocketmq.common.protocol.body.ConsumerConnection;
 import com.alibaba.rocketmq.common.protocol.heartbeat.SubscriptionData;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -61,8 +62,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/connection/ProducerConnectionSubCommand.java
Patch:
@@ -22,6 +22,7 @@
 import com.alibaba.rocketmq.common.MQVersion;
 import com.alibaba.rocketmq.common.protocol.body.Connection;
 import com.alibaba.rocketmq.common.protocol.body.ProducerConnection;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -62,8 +63,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/consumer/ConsumerProgressSubCommand.java
Patch:
@@ -35,6 +35,7 @@
 import com.alibaba.rocketmq.common.protocol.body.TopicList;
 import com.alibaba.rocketmq.common.protocol.heartbeat.ConsumeType;
 import com.alibaba.rocketmq.common.protocol.heartbeat.MessageModel;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -72,8 +73,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/consumer/DeleteSubscriptionGroupCommand.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.commons.cli.Options;
 
 import com.alibaba.rocketmq.common.MixAll;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.srvutil.ServerUtil;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.CommandUtil;
@@ -67,8 +68,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt adminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt adminExt = new DefaultMQAdminExt(rpcHook);
         adminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
         try {
             // groupName

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/consumer/UpdateSubGroupSubCommand.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.commons.cli.Options;
 
 import com.alibaba.rocketmq.common.subscription.SubscriptionGroupConfig;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.srvutil.ServerUtil;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.CommandUtil;
@@ -95,8 +96,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(final CommandLine commandLine, final Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(final CommandLine commandLine, final Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/message/PrintMessageSubCommand.java
Patch:
@@ -29,6 +29,7 @@
 import com.alibaba.rocketmq.common.UtilAll;
 import com.alibaba.rocketmq.common.message.MessageExt;
 import com.alibaba.rocketmq.common.message.MessageQueue;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
 
@@ -110,8 +111,8 @@ public static long timestampFormat(final String value) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQPullConsumer consumer = new DefaultMQPullConsumer(MixAll.TOOLS_CONSUMER_GROUP);
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQPullConsumer consumer = new DefaultMQPullConsumer(MixAll.TOOLS_CONSUMER_GROUP, rpcHook);
 
         try {
             String topic = commandLine.getOptionValue('t').trim();

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/message/QueryMsgByIdSubCommand.java
Patch:
@@ -28,6 +28,7 @@
 import com.alibaba.rocketmq.client.exception.MQClientException;
 import com.alibaba.rocketmq.common.UtilAll;
 import com.alibaba.rocketmq.common.message.MessageExt;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.remoting.common.RemotingHelper;
 import com.alibaba.rocketmq.remoting.exception.RemotingException;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
@@ -145,8 +146,8 @@ public static void queryById(final DefaultMQAdminExt admin, final String msgId)
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/message/QueryMsgByKeySubCommand.java
Patch:
@@ -22,6 +22,7 @@
 import com.alibaba.rocketmq.client.QueryResult;
 import com.alibaba.rocketmq.client.exception.MQClientException;
 import com.alibaba.rocketmq.common.message.MessageExt;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -76,8 +77,8 @@ void queryByKey(final DefaultMQAdminExt admin, final String topic, final String
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/message/QueryMsgByOffsetSubCommand.java
Patch:
@@ -23,6 +23,7 @@
 import com.alibaba.rocketmq.client.consumer.PullResult;
 import com.alibaba.rocketmq.common.MixAll;
 import com.alibaba.rocketmq.common.message.MessageQueue;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -70,8 +71,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         DefaultMQPullConsumer defaultMQPullConsumer = new DefaultMQPullConsumer(MixAll.TOOLS_CONSUMER_GROUP);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/namesrv/DeleteKvConfigCommand.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
 
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -56,8 +57,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
         try {
             // namespace

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/namesrv/DeleteProjectGroupCommand.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.commons.cli.Options;
 
 import com.alibaba.rocketmq.common.namesrv.NamesrvUtil;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.srvutil.ServerUtil;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
@@ -58,8 +59,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
         try {
             String namespace = NamesrvUtil.NAMESPACE_PROJECT_CONFIG;

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/namesrv/GetProjectGroupCommand.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.commons.cli.Options;
 
 import com.alibaba.rocketmq.common.UtilAll;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.srvutil.ServerUtil;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
@@ -58,8 +59,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
         try {
             if (commandLine.hasOption("i")) {

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/namesrv/UpdateKvConfigCommand.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
 
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -60,8 +61,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
         try {
             // namespace

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/namesrv/UpdateProjectGroupCommand.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.commons.cli.Options;
 
 import com.alibaba.rocketmq.common.namesrv.NamesrvUtil;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -57,8 +58,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
         try {
             String namespace = NamesrvUtil.NAMESPACE_PROJECT_CONFIG;

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/namesrv/WipeWritePermSubCommand.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
 
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -55,8 +56,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/offset/ResetOffsetByTimeOldCommand.java
Patch:
@@ -10,6 +10,7 @@
 import com.alibaba.rocketmq.client.exception.MQClientException;
 import com.alibaba.rocketmq.common.UtilAll;
 import com.alibaba.rocketmq.common.admin.RollbackStats;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.remoting.exception.RemotingException;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
@@ -90,8 +91,8 @@ public static void resetOffset(DefaultMQAdminExt defaultMQAdminExt, String consu
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
         try {
             String consumerGroup = commandLine.getOptionValue("g").trim();

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/topic/DeleteTopicSubCommand.java
Patch:
@@ -25,6 +25,7 @@
 
 import com.alibaba.rocketmq.client.exception.MQBrokerException;
 import com.alibaba.rocketmq.client.exception.MQClientException;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.remoting.exception.RemotingException;
 import com.alibaba.rocketmq.srvutil.ServerUtil;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
@@ -88,8 +89,8 @@ public static void deleteTopic(final DefaultMQAdminExt adminExt,//
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt adminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt adminExt = new DefaultMQAdminExt(rpcHook);
         adminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
         try {
             String topic = commandLine.getOptionValue('t').trim();

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/topic/TopicListSubCommand.java
Patch:
@@ -31,6 +31,7 @@
 import com.alibaba.rocketmq.common.protocol.body.TopicList;
 import com.alibaba.rocketmq.common.protocol.route.BrokerData;
 import com.alibaba.rocketmq.common.protocol.route.TopicRouteData;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.remoting.exception.RemotingException;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
@@ -88,8 +89,8 @@ private String findTopicBelongToWhichCluster(final String topic, final ClusterIn
 
 
     @Override
-    public void execute(final CommandLine commandLine, final Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(final CommandLine commandLine, final Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/topic/TopicRouteSubCommand.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.commons.cli.Options;
 
 import com.alibaba.rocketmq.common.protocol.route.TopicRouteData;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -55,8 +56,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(final CommandLine commandLine, final Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(final CommandLine commandLine, final Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/topic/TopicStatsSubCommand.java
Patch:
@@ -27,6 +27,7 @@
 import com.alibaba.rocketmq.common.admin.TopicOffset;
 import com.alibaba.rocketmq.common.admin.TopicStatsTable;
 import com.alibaba.rocketmq.common.message.MessageQueue;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -62,8 +63,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(final CommandLine commandLine, final Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(final CommandLine commandLine, final Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/topic/UpdateOrderConfCommand.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.alibaba.rocketmq.common.UtilAll;
 import com.alibaba.rocketmq.common.namesrv.NamesrvUtil;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.srvutil.ServerUtil;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
@@ -65,8 +66,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(final CommandLine commandLine, final Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(final CommandLine commandLine, final Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 
         try {

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/topic/UpdateTopicSubCommand.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.commons.cli.Options;
 
 import com.alibaba.rocketmq.common.TopicConfig;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.srvutil.ServerUtil;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.CommandUtil;
@@ -83,8 +84,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(final CommandLine commandLine, final Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(final CommandLine commandLine, final Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 
         try {

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/constant/LoggerName.java
Patch:
@@ -30,4 +30,5 @@ public class LoggerName {
     public static final String TransactionLoggerName = "RocketmqTransaction";
     public static final String RebalanceLockLoggerName = "RocketmqRebalanceLock";
     public static final String RocketmqStatsLoggerName = "RocketmqStats";
+    public static final String RocketmqAuthorizeLoggerName = "RocketmqAuthorize";
 }

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/SubCommand.java
Patch:
@@ -18,6 +18,8 @@
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.Options;
 
+import com.alibaba.rocketmq.remoting.RPCHook;
+
 
 /**
  * 各个子命令的接口
@@ -35,5 +37,5 @@ public interface SubCommand {
     public Options buildCommandlineOptions(final Options options);
 
 
-    public void execute(final CommandLine commandLine, final Options options);
+    public void execute(final CommandLine commandLine, final Options options, RPCHook rpcHook);
 }

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/broker/BrokerStatsSubCommand.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.commons.cli.Options;
 
 import com.alibaba.rocketmq.common.protocol.body.KVTable;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -59,8 +60,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/broker/CleanExpiredCQSubCommand.java
Patch:
@@ -4,6 +4,7 @@
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
 
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -40,8 +41,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 
         try {

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/broker/UpdateBrokerConfigSubCommand.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
 
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.srvutil.ServerUtil;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.CommandUtil;
@@ -71,8 +72,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/cluster/ClusterListSubCommand.java
Patch:
@@ -28,6 +28,7 @@
 import com.alibaba.rocketmq.common.protocol.body.ClusterInfo;
 import com.alibaba.rocketmq.common.protocol.body.KVTable;
 import com.alibaba.rocketmq.common.protocol.route.BrokerData;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.remoting.exception.RemotingConnectException;
 import com.alibaba.rocketmq.remoting.exception.RemotingSendRequestException;
 import com.alibaba.rocketmq.remoting.exception.RemotingTimeoutException;
@@ -230,8 +231,8 @@ private void printClusterMoreStats(final DefaultMQAdminExt defaultMQAdminExt)
 
 
     @Override
-    public void execute(final CommandLine commandLine, final Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(final CommandLine commandLine, final Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/connection/ConsumerConnectionSubCommand.java
Patch:
@@ -26,6 +26,7 @@
 import com.alibaba.rocketmq.common.protocol.body.Connection;
 import com.alibaba.rocketmq.common.protocol.body.ConsumerConnection;
 import com.alibaba.rocketmq.common.protocol.heartbeat.SubscriptionData;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -61,8 +62,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/connection/ProducerConnectionSubCommand.java
Patch:
@@ -22,6 +22,7 @@
 import com.alibaba.rocketmq.common.MQVersion;
 import com.alibaba.rocketmq.common.protocol.body.Connection;
 import com.alibaba.rocketmq.common.protocol.body.ProducerConnection;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -62,8 +63,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/consumer/ConsumerProgressSubCommand.java
Patch:
@@ -35,6 +35,7 @@
 import com.alibaba.rocketmq.common.protocol.body.TopicList;
 import com.alibaba.rocketmq.common.protocol.heartbeat.ConsumeType;
 import com.alibaba.rocketmq.common.protocol.heartbeat.MessageModel;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -72,8 +73,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/consumer/DeleteSubscriptionGroupCommand.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.commons.cli.Options;
 
 import com.alibaba.rocketmq.common.MixAll;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.srvutil.ServerUtil;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.CommandUtil;
@@ -67,8 +68,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt adminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt adminExt = new DefaultMQAdminExt(rpcHook);
         adminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
         try {
             // groupName

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/consumer/UpdateSubGroupSubCommand.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.commons.cli.Options;
 
 import com.alibaba.rocketmq.common.subscription.SubscriptionGroupConfig;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.srvutil.ServerUtil;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.CommandUtil;
@@ -95,8 +96,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(final CommandLine commandLine, final Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(final CommandLine commandLine, final Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/message/PrintMessageSubCommand.java
Patch:
@@ -29,6 +29,7 @@
 import com.alibaba.rocketmq.common.UtilAll;
 import com.alibaba.rocketmq.common.message.MessageExt;
 import com.alibaba.rocketmq.common.message.MessageQueue;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
 
@@ -110,8 +111,8 @@ public static long timestampFormat(final String value) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQPullConsumer consumer = new DefaultMQPullConsumer(MixAll.TOOLS_CONSUMER_GROUP);
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQPullConsumer consumer = new DefaultMQPullConsumer(MixAll.TOOLS_CONSUMER_GROUP, rpcHook);
 
         try {
             String topic = commandLine.getOptionValue('t').trim();

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/message/QueryMsgByIdSubCommand.java
Patch:
@@ -28,6 +28,7 @@
 import com.alibaba.rocketmq.client.exception.MQClientException;
 import com.alibaba.rocketmq.common.UtilAll;
 import com.alibaba.rocketmq.common.message.MessageExt;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.remoting.common.RemotingHelper;
 import com.alibaba.rocketmq.remoting.exception.RemotingException;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
@@ -145,8 +146,8 @@ public static void queryById(final DefaultMQAdminExt admin, final String msgId)
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/message/QueryMsgByKeySubCommand.java
Patch:
@@ -22,6 +22,7 @@
 import com.alibaba.rocketmq.client.QueryResult;
 import com.alibaba.rocketmq.client.exception.MQClientException;
 import com.alibaba.rocketmq.common.message.MessageExt;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -76,8 +77,8 @@ void queryByKey(final DefaultMQAdminExt admin, final String topic, final String
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/message/QueryMsgByOffsetSubCommand.java
Patch:
@@ -23,6 +23,7 @@
 import com.alibaba.rocketmq.client.consumer.PullResult;
 import com.alibaba.rocketmq.common.MixAll;
 import com.alibaba.rocketmq.common.message.MessageQueue;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -70,8 +71,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         DefaultMQPullConsumer defaultMQPullConsumer = new DefaultMQPullConsumer(MixAll.TOOLS_CONSUMER_GROUP);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/namesrv/DeleteKvConfigCommand.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
 
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -56,8 +57,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
         try {
             // namespace

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/namesrv/DeleteProjectGroupCommand.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.commons.cli.Options;
 
 import com.alibaba.rocketmq.common.namesrv.NamesrvUtil;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.srvutil.ServerUtil;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
@@ -58,8 +59,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
         try {
             String namespace = NamesrvUtil.NAMESPACE_PROJECT_CONFIG;

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/namesrv/GetProjectGroupCommand.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.commons.cli.Options;
 
 import com.alibaba.rocketmq.common.UtilAll;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.srvutil.ServerUtil;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
@@ -58,8 +59,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
         try {
             if (commandLine.hasOption("i")) {

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/namesrv/UpdateKvConfigCommand.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
 
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -60,8 +61,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
         try {
             // namespace

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/namesrv/UpdateProjectGroupCommand.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.commons.cli.Options;
 
 import com.alibaba.rocketmq.common.namesrv.NamesrvUtil;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -57,8 +58,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
         try {
             String namespace = NamesrvUtil.NAMESPACE_PROJECT_CONFIG;

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/namesrv/WipeWritePermSubCommand.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
 
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -55,8 +56,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/offset/ResetOffsetByTimeOldCommand.java
Patch:
@@ -10,6 +10,7 @@
 import com.alibaba.rocketmq.client.exception.MQClientException;
 import com.alibaba.rocketmq.common.UtilAll;
 import com.alibaba.rocketmq.common.admin.RollbackStats;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.remoting.exception.RemotingException;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
@@ -90,8 +91,8 @@ public static void resetOffset(DefaultMQAdminExt defaultMQAdminExt, String consu
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
         try {
             String consumerGroup = commandLine.getOptionValue("g").trim();

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/topic/DeleteTopicSubCommand.java
Patch:
@@ -25,6 +25,7 @@
 
 import com.alibaba.rocketmq.client.exception.MQBrokerException;
 import com.alibaba.rocketmq.client.exception.MQClientException;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.remoting.exception.RemotingException;
 import com.alibaba.rocketmq.srvutil.ServerUtil;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
@@ -88,8 +89,8 @@ public static void deleteTopic(final DefaultMQAdminExt adminExt,//
 
 
     @Override
-    public void execute(CommandLine commandLine, Options options) {
-        DefaultMQAdminExt adminExt = new DefaultMQAdminExt();
+    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt adminExt = new DefaultMQAdminExt(rpcHook);
         adminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
         try {
             String topic = commandLine.getOptionValue('t').trim();

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/topic/TopicListSubCommand.java
Patch:
@@ -31,6 +31,7 @@
 import com.alibaba.rocketmq.common.protocol.body.TopicList;
 import com.alibaba.rocketmq.common.protocol.route.BrokerData;
 import com.alibaba.rocketmq.common.protocol.route.TopicRouteData;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.remoting.exception.RemotingException;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
@@ -88,8 +89,8 @@ private String findTopicBelongToWhichCluster(final String topic, final ClusterIn
 
 
     @Override
-    public void execute(final CommandLine commandLine, final Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(final CommandLine commandLine, final Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/topic/TopicRouteSubCommand.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.commons.cli.Options;
 
 import com.alibaba.rocketmq.common.protocol.route.TopicRouteData;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -55,8 +56,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(final CommandLine commandLine, final Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(final CommandLine commandLine, final Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/topic/TopicStatsSubCommand.java
Patch:
@@ -27,6 +27,7 @@
 import com.alibaba.rocketmq.common.admin.TopicOffset;
 import com.alibaba.rocketmq.common.admin.TopicStatsTable;
 import com.alibaba.rocketmq.common.message.MessageQueue;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
 
@@ -62,8 +63,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(final CommandLine commandLine, final Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(final CommandLine commandLine, final Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
 
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/topic/UpdateOrderConfCommand.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.alibaba.rocketmq.common.UtilAll;
 import com.alibaba.rocketmq.common.namesrv.NamesrvUtil;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.srvutil.ServerUtil;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.SubCommand;
@@ -65,8 +66,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(final CommandLine commandLine, final Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(final CommandLine commandLine, final Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 
         try {

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/topic/UpdateTopicSubCommand.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.commons.cli.Options;
 
 import com.alibaba.rocketmq.common.TopicConfig;
+import com.alibaba.rocketmq.remoting.RPCHook;
 import com.alibaba.rocketmq.srvutil.ServerUtil;
 import com.alibaba.rocketmq.tools.admin.DefaultMQAdminExt;
 import com.alibaba.rocketmq.tools.command.CommandUtil;
@@ -83,8 +84,8 @@ public Options buildCommandlineOptions(Options options) {
 
 
     @Override
-    public void execute(final CommandLine commandLine, final Options options) {
-        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+    public void execute(final CommandLine commandLine, final Options options, RPCHook rpcHook) {
+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
         defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
 
         try {

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyClientConfig.java
Patch:
@@ -25,8 +25,8 @@ public class NettyClientConfig {
     // 处理Server Response/Request
     private int clientWorkerThreads = 4;
     private int clientCallbackExecutorThreads = Runtime.getRuntime().availableProcessors();
-    private int clientOnewaySemaphoreValue = 256;
-    private int clientAsyncSemaphoreValue = 128;
+    private int clientOnewaySemaphoreValue = NettySystemConfig.ClientOnewaySemaphoreValue;
+    private int clientAsyncSemaphoreValue = NettySystemConfig.ClientAsyncSemaphoreValue;
     private long connectTimeoutMillis = 3000;
     // channel超过1分钟不被访问 就关闭
     private long channelNotActiveInterval = 1000 * 60;
@@ -37,6 +37,7 @@ public class NettyClientConfig {
     private int clientSocketRcvBufSize = NettySystemConfig.SocketRcvbufSize;
     private boolean clientPooledByteBufAllocatorEnable = false;
 
+
     public int getClientWorkerThreads() {
         return clientWorkerThreads;
     }

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyClientConfig.java
Patch:
@@ -25,8 +25,8 @@ public class NettyClientConfig {
     // 处理Server Response/Request
     private int clientWorkerThreads = 4;
     private int clientCallbackExecutorThreads = Runtime.getRuntime().availableProcessors();
-    private int clientOnewaySemaphoreValue = 256;
-    private int clientAsyncSemaphoreValue = 128;
+    private int clientOnewaySemaphoreValue = NettySystemConfig.ClientOnewaySemaphoreValue;
+    private int clientAsyncSemaphoreValue = NettySystemConfig.ClientAsyncSemaphoreValue;
     private long connectTimeoutMillis = 3000;
     // channel超过1分钟不被访问 就关闭
     private long channelNotActiveInterval = 1000 * 60;
@@ -37,6 +37,7 @@ public class NettyClientConfig {
     private int clientSocketRcvBufSize = NettySystemConfig.SocketRcvbufSize;
     private boolean clientPooledByteBufAllocatorEnable = false;
 
+
     public int getClientWorkerThreads() {
         return clientWorkerThreads;
     }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/MQAdminImpl.java
Patch:
@@ -293,8 +293,8 @@ public QueryResult queryMessage(String topic, String key, int maxNum, long begin
                         requestHeader.setBeginTimestamp(begin);
                         requestHeader.setEndTimestamp(end);
 
-                        this.mQClientFactory.getMQClientAPIImpl().queryMessage(addr, requestHeader, 1000 * 5,
-                            new InvokeCallback() {
+                        this.mQClientFactory.getMQClientAPIImpl().queryMessage(addr, requestHeader,
+                            1000 * 15, new InvokeCallback() {
                                 @Override
                                 public void operationComplete(ResponseFuture responseFuture) {
                                     try {
@@ -345,7 +345,7 @@ public void operationComplete(ResponseFuture responseFuture) {
 
                 } // end of for
 
-                boolean ok = countDownLatch.await(1000 * 10, TimeUnit.MILLISECONDS);
+                boolean ok = countDownLatch.await(1000 * 20, TimeUnit.MILLISECONDS);
                 if (!ok) {
                     log.warn("queryMessage, maybe some broker failed");
                 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/MQAdminImpl.java
Patch:
@@ -293,8 +293,8 @@ public QueryResult queryMessage(String topic, String key, int maxNum, long begin
                         requestHeader.setBeginTimestamp(begin);
                         requestHeader.setEndTimestamp(end);
 
-                        this.mQClientFactory.getMQClientAPIImpl().queryMessage(addr, requestHeader, 1000 * 5,
-                            new InvokeCallback() {
+                        this.mQClientFactory.getMQClientAPIImpl().queryMessage(addr, requestHeader,
+                            1000 * 15, new InvokeCallback() {
                                 @Override
                                 public void operationComplete(ResponseFuture responseFuture) {
                                     try {
@@ -345,7 +345,7 @@ public void operationComplete(ResponseFuture responseFuture) {
 
                 } // end of for
 
-                boolean ok = countDownLatch.await(1000 * 10, TimeUnit.MILLISECONDS);
+                boolean ok = countDownLatch.await(1000 * 20, TimeUnit.MILLISECONDS);
                 if (!ok) {
                     log.warn("queryMessage, maybe some broker failed");
                 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -196,7 +196,9 @@ public void start(final boolean startFactory) throws MQClientException {
 
             this.checkConfig();
 
-            this.defaultMQProducer.changeInstanceNameToPID();
+            if (!this.defaultMQProducer.getProducerGroup().equals(MixAll.CLIENT_INNER_PRODUCER_GROUP)) {
+                this.defaultMQProducer.changeInstanceNameToPID();
+            }
 
             this.mQClientFactory =
                     MQClientManager.getInstance().getAndCreateMQClientInstance(this.defaultMQProducer);

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -196,7 +196,9 @@ public void start(final boolean startFactory) throws MQClientException {
 
             this.checkConfig();
 
-            this.defaultMQProducer.changeInstanceNameToPID();
+            if (!this.defaultMQProducer.getProducerGroup().equals(MixAll.CLIENT_INNER_PRODUCER_GROUP)) {
+                this.defaultMQProducer.changeInstanceNameToPID();
+            }
 
             this.mQClientFactory =
                     MQClientManager.getInstance().getAndCreateMQClientInstance(this.defaultMQProducer);

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/constant/LoggerName.java
Patch:
@@ -26,6 +26,7 @@ public class LoggerName {
     public static final String ToolsLoggerName = "RocketmqTools";
     public static final String CommonLoggerName = "RocketmqCommon";
     public static final String StoreLoggerName = "RocketmqStore";
+    public static final String StoreErrorLoggerName = "RocketmqStoreError";
     public static final String TransactionLoggerName = "RocketmqTransaction";
     public static final String RebalanceLockLoggerName = "RocketmqRebalanceLock";
     public static final String RocketmqStatsLoggerName = "RocketmqStats";

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/message/PrintMessageSubCommand.java
Patch:
@@ -36,7 +36,7 @@
  * 打印指定Topic的所有消息，某个时间区间，方便排查问题
  * 
  * @author shijia.wxr<vintage.wang@gmail.com>
- * @since 2013-8-12
+ * @since 2014-6-22
  */
 public class PrintMessageSubCommand implements SubCommand {
 

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/constant/LoggerName.java
Patch:
@@ -26,6 +26,7 @@ public class LoggerName {
     public static final String ToolsLoggerName = "RocketmqTools";
     public static final String CommonLoggerName = "RocketmqCommon";
     public static final String StoreLoggerName = "RocketmqStore";
+    public static final String StoreErrorLoggerName = "RocketmqStoreError";
     public static final String TransactionLoggerName = "RocketmqTransaction";
     public static final String RebalanceLockLoggerName = "RocketmqRebalanceLock";
     public static final String RocketmqStatsLoggerName = "RocketmqStats";

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/message/PrintMessageSubCommand.java
Patch:
@@ -36,7 +36,7 @@
  * 打印指定Topic的所有消息，某个时间区间，方便排查问题
  * 
  * @author shijia.wxr<vintage.wang@gmail.com>
- * @since 2013-8-12
+ * @since 2014-6-22
  */
 public class PrintMessageSubCommand implements SubCommand {
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/CommitLog.java
Patch:
@@ -336,7 +336,7 @@ public DispatchRequest checkMessageAndReturnSize(java.nio.ByteBuffer byteBuffer,
                 // 定时消息处理
                 {
                     String t = propertiesMap.get(MessageConst.PROPERTY_DELAY_TIME_LEVEL);
-                    if (t != null) {
+                    if (ScheduleMessageService.SCHEDULE_TOPIC.equals(topic) && t != null) {
                         int delayLevel = Integer.parseInt(t);
 
                         if (delayLevel > this.defaultMessageStore.getScheduleMessageService()

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/CommitLog.java
Patch:
@@ -336,7 +336,7 @@ public DispatchRequest checkMessageAndReturnSize(java.nio.ByteBuffer byteBuffer,
                 // 定时消息处理
                 {
                     String t = propertiesMap.get(MessageConst.PROPERTY_DELAY_TIME_LEVEL);
-                    if (t != null) {
+                    if (ScheduleMessageService.SCHEDULE_TOPIC.equals(topic) && t != null) {
                         int delayLevel = Integer.parseInt(t);
 
                         if (delayLevel > this.defaultMessageStore.getScheduleMessageService()

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -180,7 +180,7 @@ public void run() {
                 // 保证在Consumer集群，同一队列串行消费
                 if (MessageModel.BROADCASTING
                     .equals(ConsumeMessageOrderlyService.this.defaultMQPushConsumerImpl.messageModel())
-                        || this.processQueue.isLocked() || !this.processQueue.isLockExpired()) {
+                        || (this.processQueue.isLocked() && !this.processQueue.isLockExpired())) {
                     final long beginTime = System.currentTimeMillis();
                     for (boolean continueConsume = true; continueConsume;) {
                         if (this.processQueue.isDroped()) {

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -180,7 +180,7 @@ public void run() {
                 // 保证在Consumer集群，同一队列串行消费
                 if (MessageModel.BROADCASTING
                     .equals(ConsumeMessageOrderlyService.this.defaultMQPushConsumerImpl.messageModel())
-                        || this.processQueue.isLocked() || !this.processQueue.isLockExpired()) {
+                        || (this.processQueue.isLocked() && !this.processQueue.isLockExpired())) {
                     final long beginTime = System.currentTimeMillis();
                     for (boolean continueConsume = true; continueConsume;) {
                         if (this.processQueue.isDroped()) {

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -167,7 +167,7 @@ public void truncateDirtyLogicFiles(long phyOffet) {
      * @throws IOException
      */
     public boolean load() {
-        boolean result = false;
+        boolean result = true;
 
         try {
             boolean lastExitOK = !this.isTempFileExist();
@@ -180,7 +180,7 @@ public boolean load() {
             }
 
             // load Commit Log
-            result = this.commitLog.load();
+            result = result && this.commitLog.load();
 
             // load Consume Queue
             result = result && this.loadConsumeQueue();

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -167,7 +167,7 @@ public void truncateDirtyLogicFiles(long phyOffet) {
      * @throws IOException
      */
     public boolean load() {
-        boolean result = false;
+        boolean result = true;
 
         try {
             boolean lastExitOK = !this.isTempFileExist();
@@ -180,7 +180,7 @@ public boolean load() {
             }
 
             // load Commit Log
-            result = this.commitLog.load();
+            result = result && this.commitLog.load();
 
             // load Consume Queue
             result = result && this.loadConsumeQueue();

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerStartup.java
Patch:
@@ -173,7 +173,9 @@ else if (commandLine.hasOption('m')) {
                 }
                 catch (Exception e) {
                     System.out
-                        .printf("The Name Server Address[%s] is illegal, please set it as this, 127.0.0.1:9876;192.168.0.1:9876\n");
+                        .printf(
+                            "The Name Server Address[%s] is illegal, please set it as this, 127.0.0.1:9876;192.168.0.1:9876\n",
+                            namesrvAddr);
                     System.exit(-3);
                 }
             }

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/client/ConsumerGroupInfo.java
Patch:
@@ -97,7 +97,7 @@ public List<String> getAllClientId() {
 
 
     public void unregisterChannel(final ClientChannelInfo clientChannelInfo) {
-        ClientChannelInfo old = this.channelInfoTable.remove(clientChannelInfo.getChannel().hashCode());
+        ClientChannelInfo old = this.channelInfoTable.remove(clientChannelInfo.getChannel());
         if (old != null) {
             log.info("unregister a consumer[{}] from consumerGroupInfo {}", this.groupName, old.toString());
         }

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/client/net/Broker2Client.java
Patch:
@@ -197,7 +197,7 @@ public RemotingCommand resetOffset(String topic, String group, long timeStamp, b
         else {
             String errorInfo =
                     String.format(
-                        "Consumer not online, so can not reset offset, Group: {} Topic: {} Timestamp: {}",//
+                        "Consumer not online, so can not reset offset, Group: %s Topic: %s Timestamp: %d",//
                         requestHeader.getGroup(), //
                         requestHeader.getTopic(), //
                         requestHeader.getTimestamp());

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/MQPullConsumerScheduleService.java
Patch:
@@ -154,7 +154,7 @@ public void putTask(String topic, Set<MessageQueue> mqNewSet) {
 
         // 增加新的队列
         for (MessageQueue mq : mqNewSet) {
-            if (!this.taskTable.contains(mq)) {
+            if (!this.taskTable.containsKey(mq)) {
                 PullTaskImpl command = new PullTaskImpl(mq);
                 this.taskTable.put(mq, command);
                 this.scheduledThreadPoolExecutor.schedule(command, 0, TimeUnit.MILLISECONDS);

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerStartup.java
Patch:
@@ -173,7 +173,9 @@ else if (commandLine.hasOption('m')) {
                 }
                 catch (Exception e) {
                     System.out
-                        .printf("The Name Server Address[%s] is illegal, please set it as this, 127.0.0.1:9876;192.168.0.1:9876\n");
+                        .printf(
+                            "The Name Server Address[%s] is illegal, please set it as this, 127.0.0.1:9876;192.168.0.1:9876\n",
+                            namesrvAddr);
                     System.exit(-3);
                 }
             }

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/client/ConsumerGroupInfo.java
Patch:
@@ -97,7 +97,7 @@ public List<String> getAllClientId() {
 
 
     public void unregisterChannel(final ClientChannelInfo clientChannelInfo) {
-        ClientChannelInfo old = this.channelInfoTable.remove(clientChannelInfo.getChannel().hashCode());
+        ClientChannelInfo old = this.channelInfoTable.remove(clientChannelInfo.getChannel());
         if (old != null) {
             log.info("unregister a consumer[{}] from consumerGroupInfo {}", this.groupName, old.toString());
         }

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/client/net/Broker2Client.java
Patch:
@@ -197,7 +197,7 @@ public RemotingCommand resetOffset(String topic, String group, long timeStamp, b
         else {
             String errorInfo =
                     String.format(
-                        "Consumer not online, so can not reset offset, Group: {} Topic: {} Timestamp: {}",//
+                        "Consumer not online, so can not reset offset, Group: %s Topic: %s Timestamp: %d",//
                         requestHeader.getGroup(), //
                         requestHeader.getTopic(), //
                         requestHeader.getTimestamp());

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/MQPullConsumerScheduleService.java
Patch:
@@ -154,7 +154,7 @@ public void putTask(String topic, Set<MessageQueue> mqNewSet) {
 
         // 增加新的队列
         for (MessageQueue mq : mqNewSet) {
-            if (!this.taskTable.contains(mq)) {
+            if (!this.taskTable.containsKey(mq)) {
                 PullTaskImpl command = new PullTaskImpl(mq);
                 this.taskTable.put(mq, command);
                 this.scheduledThreadPoolExecutor.schedule(command, 0, TimeUnit.MILLISECONDS);

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/filtersrv/FilterServerManager.java
Patch:
@@ -102,7 +102,7 @@ private String buildStartCommand() {
                 config);
         }
         else {
-            return String.format("nohup sh %s/bin/mqfiltersrv %s &", //
+            return String.format("sh %s/bin/startfsrv.sh %s", //
                 this.brokerController.getBrokerConfig().getRocketmqHome(),//
                 config);
         }

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/filtersrv/FilterServerManager.java
Patch:
@@ -102,7 +102,7 @@ private String buildStartCommand() {
                 config);
         }
         else {
-            return String.format("nohup sh %s/bin/mqfiltersrv %s &", //
+            return String.format("sh %s/bin/startfsrv.sh %s", //
                 this.brokerController.getBrokerConfig().getRocketmqHome(),//
                 config);
         }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/schedule/ScheduleMessageService.java
Patch:
@@ -337,7 +337,7 @@ public void executeOnTimeup() {
                      * 这里直接纠正下一次定时任务的offset为当前定时任务队列的最小值
                      */
                     long cqMinOffset = cq.getMinOffsetInQuque();
-                    if (offset != cqMinOffset) {
+                    if (offset < cqMinOffset) {
                         failScheduleOffset = cqMinOffset;
                         log.error("schedule CQ offset invalid. offset=" + offset + ", cqMinOffset="
                                 + cqMinOffset + ", queueId=" + cq.getQueueId());

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/schedule/ScheduleMessageService.java
Patch:
@@ -337,7 +337,7 @@ public void executeOnTimeup() {
                      * 这里直接纠正下一次定时任务的offset为当前定时任务队列的最小值
                      */
                     long cqMinOffset = cq.getMinOffsetInQuque();
-                    if (offset != cqMinOffset) {
+                    if (offset < cqMinOffset) {
                         failScheduleOffset = cqMinOffset;
                         log.error("schedule CQ offset invalid. offset=" + offset + ", cqMinOffset="
                                 + cqMinOffset + ", queueId=" + cq.getQueueId());

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/ConfigManager.java
Patch:
@@ -50,7 +50,7 @@ public boolean load() {
         try {
             fileName = this.configFilePath();
             String jsonString = MixAll.file2String(fileName);
-            if (jsonString != null) {
+            if (jsonString != null && jsonString.length() > 0) {
                 this.decode(jsonString);
                 plog.info("load " + fileName + " OK");
                 return true;

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/ConfigManager.java
Patch:
@@ -50,7 +50,7 @@ public boolean load() {
         try {
             fileName = this.configFilePath();
             String jsonString = MixAll.file2String(fileName);
-            if (jsonString != null) {
+            if (jsonString != null && jsonString.length() > 0) {
                 this.decode(jsonString);
                 plog.info("load " + fileName + " OK");
                 return true;

File: rocketmq-filtersrv/src/main/java/com/alibaba/rocketmq/filtersrv/FiltersrvController.java
Patch:
@@ -27,6 +27,7 @@
 
 import com.alibaba.rocketmq.client.consumer.DefaultMQPullConsumer;
 import com.alibaba.rocketmq.common.MixAll;
+import com.alibaba.rocketmq.common.UtilAll;
 import com.alibaba.rocketmq.common.constant.LoggerName;
 import com.alibaba.rocketmq.common.protocol.header.filtersrv.RegisterFilterServerResponseHeader;
 import com.alibaba.rocketmq.filtersrv.filter.FilterClassManager;
@@ -117,6 +118,7 @@ public void run() {
             .getConsumerTimeoutMillisWhenSuspend() - 1000);
 
         this.defaultMQPullConsumer.setNamesrvAddr(this.filtersrvConfig.getNamesrvAddr());
+        this.defaultMQPullConsumer.setInstanceName(String.valueOf(UtilAll.getPid()));
 
         return true;
     }

File: rocketmq-filtersrv/src/main/java/com/alibaba/rocketmq/filtersrv/FiltersrvController.java
Patch:
@@ -27,6 +27,7 @@
 
 import com.alibaba.rocketmq.client.consumer.DefaultMQPullConsumer;
 import com.alibaba.rocketmq.common.MixAll;
+import com.alibaba.rocketmq.common.UtilAll;
 import com.alibaba.rocketmq.common.constant.LoggerName;
 import com.alibaba.rocketmq.common.protocol.header.filtersrv.RegisterFilterServerResponseHeader;
 import com.alibaba.rocketmq.filtersrv.filter.FilterClassManager;
@@ -117,6 +118,7 @@ public void run() {
             .getConsumerTimeoutMillisWhenSuspend() - 1000);
 
         this.defaultMQPullConsumer.setNamesrvAddr(this.filtersrvConfig.getNamesrvAddr());
+        this.defaultMQPullConsumer.setInstanceName(String.valueOf(UtilAll.getPid()));
 
         return true;
     }

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MQVersion.java
Patch:
@@ -22,7 +22,7 @@
  */
 public class MQVersion {
     // TODO 每次发布版本都要修改此处版本号
-    public static final int CurrentVersion = Version.V3_0_10_SNAPSHOT.ordinal();
+    public static final int CurrentVersion = Version.V3_0_9_BUGFIX.ordinal();
 
 
     public static String getVersionDesc(int value) {
@@ -70,6 +70,8 @@ public static enum Version {
         V3_0_8,
         V3_0_9_SNAPSHOT,
         V3_0_9,
+        V3_0_9_BUGFIX,
+        V3_0_10_DUMMY_SNAPSHOT,
         V3_0_10_SNAPSHOT,
         V3_0_10,
         V3_0_11_SNAPSHOT,

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MQVersion.java
Patch:
@@ -22,7 +22,7 @@
  */
 public class MQVersion {
     // TODO 每次发布版本都要修改此处版本号
-    public static final int CurrentVersion = Version.V3_0_10_SNAPSHOT.ordinal();
+    public static final int CurrentVersion = Version.V3_0_9_BUGFIX.ordinal();
 
 
     public static String getVersionDesc(int value) {
@@ -70,6 +70,8 @@ public static enum Version {
         V3_0_8,
         V3_0_9_SNAPSHOT,
         V3_0_9,
+        V3_0_9_BUGFIX,
+        V3_0_10_DUMMY_SNAPSHOT,
         V3_0_10_SNAPSHOT,
         V3_0_10,
         V3_0_11_SNAPSHOT,

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -100,7 +100,6 @@ public class MQAdminStartup {
         subCommandList.add(new GetConsumerStatusCommand());
 
         subCommandList.add(new UpdateOrderConfCommand());
-        subCommandList.add(new UpdateTopicSubCommand());
     }
 
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -100,7 +100,6 @@ public class MQAdminStartup {
         subCommandList.add(new GetConsumerStatusCommand());
 
         subCommandList.add(new UpdateOrderConfCommand());
-        subCommandList.add(new UpdateTopicSubCommand());
     }
 
 

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/UtilAll.java
Patch:
@@ -374,10 +374,10 @@ public static boolean isBlank(String str) {
             return true;
         }
         for (int i = 0; i < strLen; i++) {
-            if (Character.isWhitespace(str.charAt(i))) {
-                return true;
+            if ((Character.isWhitespace(str.charAt(i)) == false)) {
+                return false;
             }
         }
-        return false;
+        return true;
     }
 }

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/UtilAll.java
Patch:
@@ -374,10 +374,10 @@ public static boolean isBlank(String str) {
             return true;
         }
         for (int i = 0; i < strLen; i++) {
-            if (Character.isWhitespace(str.charAt(i))) {
-                return true;
+            if ((Character.isWhitespace(str.charAt(i)) == false)) {
+                return false;
             }
         }
-        return false;
+        return true;
     }
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/RebalancePullImpl.java
Patch:
@@ -73,8 +73,9 @@ public void messageQueueChanged(String topic, Set<MessageQueue> mqAll, Set<Messa
 
 
     @Override
-    public void removeUnnecessaryMessageQueue(MessageQueue mq, ProcessQueue pq) {
+    public boolean removeUnnecessaryMessageQueue(MessageQueue mq, ProcessQueue pq) {
         this.defaultMQPullConsumerImpl.getOffsetStore().persist(mq);
         this.defaultMQPullConsumerImpl.getOffsetStore().removeOffset(mq);
+        return true;
     }
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/RebalancePullImpl.java
Patch:
@@ -73,8 +73,9 @@ public void messageQueueChanged(String topic, Set<MessageQueue> mqAll, Set<Messa
 
 
     @Override
-    public void removeUnnecessaryMessageQueue(MessageQueue mq, ProcessQueue pq) {
+    public boolean removeUnnecessaryMessageQueue(MessageQueue mq, ProcessQueue pq) {
         this.defaultMQPullConsumerImpl.getOffsetStore().persist(mq);
         this.defaultMQPullConsumerImpl.getOffsetStore().removeOffset(mq);
+        return true;
     }
 }

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/client/ConsumerGroupInfo.java
Patch:
@@ -97,7 +97,7 @@ public List<String> getAllClientId() {
 
 
     public void unregisterChannel(final ClientChannelInfo clientChannelInfo) {
-        ClientChannelInfo old = this.channelInfoTable.remove(clientChannelInfo.getChannel().hashCode());
+        ClientChannelInfo old = this.channelInfoTable.remove(clientChannelInfo.getChannel());
         if (old != null) {
             log.info("unregister a consumer[{}] from consumerGroupInfo {}", this.groupName, old.toString());
         }

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -218,7 +218,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
     private static int initValueIndex() {
         Random r = new Random();
 
-        return Math.abs(r.nextInt()) % 999;
+        return Math.abs(r.nextInt() % 999) % 999;
     }
 
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/ha/HAService.java
Patch:
@@ -237,9 +237,10 @@ public void run() {
                                 log.warn("Unexpected ops in select " + k.readyOps());
                             }
                         }
+
+                        selected.clear();
                     }
 
-                    selected.clear();
                 }
                 catch (Exception e) {
                     log.error(this.getServiceName() + " service has exception.", e);

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/client/ConsumerGroupInfo.java
Patch:
@@ -97,7 +97,7 @@ public List<String> getAllClientId() {
 
 
     public void unregisterChannel(final ClientChannelInfo clientChannelInfo) {
-        ClientChannelInfo old = this.channelInfoTable.remove(clientChannelInfo.getChannel().hashCode());
+        ClientChannelInfo old = this.channelInfoTable.remove(clientChannelInfo.getChannel());
         if (old != null) {
             log.info("unregister a consumer[{}] from consumerGroupInfo {}", this.groupName, old.toString());
         }

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -218,7 +218,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
     private static int initValueIndex() {
         Random r = new Random();
 
-        return Math.abs(r.nextInt()) % 999;
+        return Math.abs(r.nextInt() % 999) % 999;
     }
 
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/ha/HAService.java
Patch:
@@ -237,9 +237,10 @@ public void run() {
                                 log.warn("Unexpected ops in select " + k.readyOps());
                             }
                         }
+
+                        selected.clear();
                     }
 
-                    selected.clear();
                 }
                 catch (Exception e) {
                     log.error(this.getServiceName() + " service has exception.", e);

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/DefaultMQPushConsumer.java
Patch:
@@ -85,7 +85,7 @@ public class DefaultMQPushConsumer extends ClientConfig implements MQPushConsume
     /**
      * 消费消息线程，最小数目
      */
-    private int consumeThreadMin = 10;
+    private int consumeThreadMin = 20;
     /**
      * 消费消息线程，最大数目
      */

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/stat/ConsumerStatManager.java
Patch:
@@ -80,7 +80,7 @@ public void logStatsPeriodically(final String group, final String clientId) {
                 tps *= 1000;
 
                 log.info(
-                    "Consumer, {} {}, ConsumeAvgRT: {} ConsumeMaxRT: {} TotalOKMsg: {} TotalFailedMsg: {} consumeTPS: {}",//
+                    "Consumer, {} {}, ConsumeAvgRT(ms): {} ConsumeMaxRT(ms): {} TotalOKMsg: {} TotalFailedMsg: {} consumeTPS: {}",//
                     group, //
                     clientId, //
                     avgRT, //
@@ -97,7 +97,7 @@ public void logStatsPeriodically(final String group, final String clientId) {
                         / //
                         (double) (last.getPullTimesTotal().get() - first.getPullTimesTotal().get());
 
-                log.info("Consumer, {} {}, PullAvgRT: {}  PullTimesTotal: {}",//
+                log.info("Consumer, {} {}, PullAvgRT(ms): {}  PullTimesTotal: {}",//
                     group, //
                     clientId, //
                     avgRT, //

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/DefaultMQPushConsumer.java
Patch:
@@ -85,7 +85,7 @@ public class DefaultMQPushConsumer extends ClientConfig implements MQPushConsume
     /**
      * 消费消息线程，最小数目
      */
-    private int consumeThreadMin = 10;
+    private int consumeThreadMin = 20;
     /**
      * 消费消息线程，最大数目
      */

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/stat/ConsumerStatManager.java
Patch:
@@ -80,7 +80,7 @@ public void logStatsPeriodically(final String group, final String clientId) {
                 tps *= 1000;
 
                 log.info(
-                    "Consumer, {} {}, ConsumeAvgRT: {} ConsumeMaxRT: {} TotalOKMsg: {} TotalFailedMsg: {} consumeTPS: {}",//
+                    "Consumer, {} {}, ConsumeAvgRT(ms): {} ConsumeMaxRT(ms): {} TotalOKMsg: {} TotalFailedMsg: {} consumeTPS: {}",//
                     group, //
                     clientId, //
                     avgRT, //
@@ -97,7 +97,7 @@ public void logStatsPeriodically(final String group, final String clientId) {
                         / //
                         (double) (last.getPullTimesTotal().get() - first.getPullTimesTotal().get());
 
-                log.info("Consumer, {} {}, PullAvgRT: {}  PullTimesTotal: {}",//
+                log.info("Consumer, {} {}, PullAvgRT(ms): {}  PullTimesTotal: {}",//
                     group, //
                     clientId, //
                     avgRT, //

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/client/ConsumerGroupInfo.java
Patch:
@@ -188,11 +188,11 @@ else if (sub.getSubVersion() > old.getSubVersion()) {
             }
 
             if (!exist) {
-                log.warn("subscription changed, group: {} remove topic {} {}", //
+                log.warn("subscription changed, group[{}] remove topic[{} {}], subList[{}]", //
                     this.groupName,//
                     oldTopic,//
-                    next.getValue().toString()//
-                );
+                    next.getValue().toString(),//
+                    subList);
 
                 it.remove();
                 updated = true;

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/client/ConsumerGroupInfo.java
Patch:
@@ -188,11 +188,11 @@ else if (sub.getSubVersion() > old.getSubVersion()) {
             }
 
             if (!exist) {
-                log.warn("subscription changed, group: {} remove topic {} {}", //
+                log.warn("subscription changed, group[{}] remove topic[{} {}], subList[{}]", //
                     this.groupName,//
                     oldTopic,//
-                    next.getValue().toString()//
-                );
+                    next.getValue().toString(),//
+                    subList);
 
                 it.remove();
                 updated = true;

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/index/IndexService.java
Patch:
@@ -318,7 +318,6 @@ public void buildIndex(Object[] req) {
 
         if (breakdown) {
             log.error("build index error, stop building index");
-            // TODO
         }
     }
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/index/IndexService.java
Patch:
@@ -318,7 +318,6 @@ public void buildIndex(Object[] req) {
 
         if (breakdown) {
             log.error("build index error, stop building index");
-            // TODO
         }
     }
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -337,7 +337,7 @@ public void pullMessage(final PullRequest pullRequest) {
             if (processQueue.getMaxSpan() > this.defaultMQPushConsumer.getConsumeConcurrentlyMaxSpan()) {
                 this.executePullRequestLater(pullRequest, PullTimeDelayMillsWhenFlowControl);
                 if ((flowControlTimes2++ % 3000) == 0) {
-                    log.warn("the queue's messages, span too long, so do flow control, {} {} {}", size,
+                    log.warn("the queue's messages, span too long, so do flow control, {} {} {}", processQueue.getMaxSpan(),
                         pullRequest, flowControlTimes2);
                 }
                 return;

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -337,7 +337,7 @@ public void pullMessage(final PullRequest pullRequest) {
             if (processQueue.getMaxSpan() > this.defaultMQPushConsumer.getConsumeConcurrentlyMaxSpan()) {
                 this.executePullRequestLater(pullRequest, PullTimeDelayMillsWhenFlowControl);
                 if ((flowControlTimes2++ % 3000) == 0) {
-                    log.warn("the queue's messages, span too long, so do flow control, {} {} {}", size,
+                    log.warn("the queue's messages, span too long, so do flow control, {} {} {}", processQueue.getMaxSpan(),
                         pullRequest, flowControlTimes2);
                 }
                 return;

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/store/RemoteBrokerOffsetStore.java
Patch:
@@ -122,8 +122,10 @@ else if (ReadOffsetType.READ_FROM_MEMORY == type) {
 
     @Override
     public void persistAll(Set<MessageQueue> mqs) {
-        final HashSet<MessageQueue> unusedMQ = new HashSet<MessageQueue>();
+        if (null == mqs || mqs.isEmpty())
+            return;
 
+        final HashSet<MessageQueue> unusedMQ = new HashSet<MessageQueue>();
         long times = this.storeTimesTotal.getAndIncrement();
 
         if (mqs != null && !mqs.isEmpty()) {

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/store/RemoteBrokerOffsetStore.java
Patch:
@@ -122,8 +122,10 @@ else if (ReadOffsetType.READ_FROM_MEMORY == type) {
 
     @Override
     public void persistAll(Set<MessageQueue> mqs) {
-        final HashSet<MessageQueue> unusedMQ = new HashSet<MessageQueue>();
+        if (null == mqs || mqs.isEmpty())
+            return;
 
+        final HashSet<MessageQueue> unusedMQ = new HashSet<MessageQueue>();
         long times = this.storeTimesTotal.getAndIncrement();
 
         if (mqs != null && !mqs.isEmpty()) {

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/MQHelper.java
Patch:
@@ -75,10 +75,10 @@ public static void resetOffsetByTimestamp(//
             throw e;
         }
         finally {
-            consumer.shutdown();
             if (mqs != null) {
                 consumer.getDefaultMQPullConsumerImpl().getOffsetStore().persistAll(mqs);
             }
+            consumer.shutdown();
         }
     }
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/store/LocalFileOffsetStore.java
Patch:
@@ -138,6 +138,9 @@ else if (ReadOffsetType.READ_FROM_MEMORY == type) {
 
     @Override
     public void persistAll(Set<MessageQueue> mqs) {
+        if (null == mqs || mqs.isEmpty())
+            return;
+        
         OffsetSerializeWrapper offsetSerializeWrapper = new OffsetSerializeWrapper();
         for (MessageQueue mq : this.offsetTable.keySet()) {
             if (mqs.contains(mq)) {

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/MQHelper.java
Patch:
@@ -75,10 +75,10 @@ public static void resetOffsetByTimestamp(//
             throw e;
         }
         finally {
-            consumer.shutdown();
             if (mqs != null) {
                 consumer.getDefaultMQPullConsumerImpl().getOffsetStore().persistAll(mqs);
             }
+            consumer.shutdown();
         }
     }
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/store/LocalFileOffsetStore.java
Patch:
@@ -138,6 +138,9 @@ else if (ReadOffsetType.READ_FROM_MEMORY == type) {
 
     @Override
     public void persistAll(Set<MessageQueue> mqs) {
+        if (null == mqs || mqs.isEmpty())
+            return;
+        
         OffsetSerializeWrapper offsetSerializeWrapper = new OffsetSerializeWrapper();
         for (MessageQueue mq : this.offsetTable.keySet()) {
             if (mqs.contains(mq)) {

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java
Patch:
@@ -167,6 +167,7 @@ public Set<SubscriptionData> subscriptions() {
             synchronized (topics) {
                 for (String t : topics) {
                     SubscriptionData ms = new SubscriptionData(t, SubscriptionData.SUB_ALL);
+                    ms.setSubVersion(0L);
                     result.add(ms);
                 }
             }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java
Patch:
@@ -167,6 +167,7 @@ public Set<SubscriptionData> subscriptions() {
             synchronized (topics) {
                 for (String t : topics) {
                     SubscriptionData ms = new SubscriptionData(t, SubscriptionData.SUB_ALL);
+                    ms.setSubVersion(0L);
                     result.add(ms);
                 }
             }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/factory/MQClientFactory.java
Patch:
@@ -613,7 +613,8 @@ public boolean updateTopicRouteInfoFromNameServer(final String topic, boolean is
                     }
                 }
                 catch (Exception e) {
-                    if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
+                    if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)
+                            && !topic.equals(MixAll.DEFAULT_TOPIC)) {
                         log.warn("updateTopicRouteInfoFromNameServer Exception", e);
                     }
                 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/factory/MQClientFactory.java
Patch:
@@ -613,7 +613,8 @@ public boolean updateTopicRouteInfoFromNameServer(final String topic, boolean is
                     }
                 }
                 catch (Exception e) {
-                    if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
+                    if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)
+                            && !topic.equals(MixAll.DEFAULT_TOPIC)) {
                         log.warn("updateTopicRouteInfoFromNameServer Exception", e);
                     }
                 }

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.rocketmq.tools.command.consumer.DeleteSubscriptionGroupCommand;
 import com.alibaba.rocketmq.tools.command.topic.*;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.Options;
@@ -61,6 +62,7 @@ public class MQAdminStartup {
         subCommandList.add(new QueryMessageSubCommand());
         subCommandList.add(new WipeWritePermSubCommand());
         subCommandList.add(new DeleteTopicSubCommand());
+        subCommandList.add(new DeleteSubscriptionGroupCommand());
     }
 
 

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.rocketmq.tools.command.consumer.DeleteSubscriptionGroupCommand;
 import com.alibaba.rocketmq.tools.command.topic.*;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.Options;
@@ -61,6 +62,7 @@ public class MQAdminStartup {
         subCommandList.add(new QueryMessageSubCommand());
         subCommandList.add(new WipeWritePermSubCommand());
         subCommandList.add(new DeleteTopicSubCommand());
+        subCommandList.add(new DeleteSubscriptionGroupCommand());
     }
 
 

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -78,7 +78,7 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand
         case UPDATE_AND_CREATE_TOPIC:
             return this.updateAndCreateTopic(ctx, request);
             // 删除Topic
-        case DELETE_TOPIC:
+        case DELETE_TOPIC_IN_BROKER:
             return this.deleteTopic(ctx, request);
             // 获取Topic配置
         case GET_ALL_TOPIC_CONFIG:

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/topic/TopicConfigManager.java
Patch:
@@ -271,6 +271,7 @@ public void deleteTopicConfig(final String topic) {
         TopicConfig old = this.topicConfigTable.remove(topic);
         if (old != null) {
             log.info("delete topic config OK, topic: " + old);
+	        this.dataVersion.nextVersion();
             this.persist();
         }
         else {

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/AdminBrokerProcessor.java
Patch:
@@ -78,7 +78,7 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand
         case UPDATE_AND_CREATE_TOPIC:
             return this.updateAndCreateTopic(ctx, request);
             // 删除Topic
-        case DELETE_TOPIC:
+        case DELETE_TOPIC_IN_BROKER:
             return this.deleteTopic(ctx, request);
             // 获取Topic配置
         case GET_ALL_TOPIC_CONFIG:

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/topic/TopicConfigManager.java
Patch:
@@ -271,6 +271,7 @@ public void deleteTopicConfig(final String topic) {
         TopicConfig old = this.topicConfigTable.remove(topic);
         if (old != null) {
             log.info("delete topic config OK, topic: " + old);
+	        this.dataVersion.nextVersion();
             this.persist();
         }
         else {

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/slave/SlaveSynchronize.java
Patch:
@@ -74,6 +74,7 @@ private void syncTopicConfig() {
 
                     this.brokerController.getTopicConfigManager().getDataVersion()
                         .assignNewOne(topicWrapper.getDataVersion());
+	                this.brokerController.getTopicConfigManager().getTopicConfigTable().clear();
                     this.brokerController.getTopicConfigManager().getTopicConfigTable()
                         .putAll(topicWrapper.getTopicConfigTable());
                     this.brokerController.getTopicConfigManager().persist();
@@ -96,6 +97,7 @@ private void syncConsumerOffset() {
                         this.brokerController.getBrokerOuterAPI().getAllConsumerOffset(masterAddrBak);
                 this.brokerController.getConsumerOffsetManager().getOffsetTable()
                     .putAll(offsetWrapper.getOffsetTable());
+	            this.brokerController.getConsumerOffsetManager().persist();
                 log.info("update slave consumer offset from master, {}", masterAddrBak);
             }
             catch (Exception e) {
@@ -138,6 +140,7 @@ private void syncSubscriptionGroupConfig() {
                             .getAllSubscriptionGroupConfig(masterAddrBak);
                 this.brokerController.getSubscriptionGroupManager().getSubscriptionGroupTable()
                     .putAll(subscriptionWrapper.getSubscriptionGroupTable());
+	            this.brokerController.getSubscriptionGroupManager().persist();
                 log.info("update slave Subscription Group from master, {}", masterAddrBak);
             }
             catch (Exception e) {

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/slave/SlaveSynchronize.java
Patch:
@@ -74,6 +74,7 @@ private void syncTopicConfig() {
 
                     this.brokerController.getTopicConfigManager().getDataVersion()
                         .assignNewOne(topicWrapper.getDataVersion());
+	                this.brokerController.getTopicConfigManager().getTopicConfigTable().clear();
                     this.brokerController.getTopicConfigManager().getTopicConfigTable()
                         .putAll(topicWrapper.getTopicConfigTable());
                     this.brokerController.getTopicConfigManager().persist();
@@ -96,6 +97,7 @@ private void syncConsumerOffset() {
                         this.brokerController.getBrokerOuterAPI().getAllConsumerOffset(masterAddrBak);
                 this.brokerController.getConsumerOffsetManager().getOffsetTable()
                     .putAll(offsetWrapper.getOffsetTable());
+	            this.brokerController.getConsumerOffsetManager().persist();
                 log.info("update slave consumer offset from master, {}", masterAddrBak);
             }
             catch (Exception e) {
@@ -138,6 +140,7 @@ private void syncSubscriptionGroupConfig() {
                             .getAllSubscriptionGroupConfig(masterAddrBak);
                 this.brokerController.getSubscriptionGroupManager().getSubscriptionGroupTable()
                     .putAll(subscriptionWrapper.getSubscriptionGroupTable());
+	            this.brokerController.getSubscriptionGroupManager().persist();
                 log.info("update slave Subscription Group from master, {}", masterAddrBak);
             }
             catch (Exception e) {

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/RebalancePullImpl.java
Patch:
@@ -75,5 +75,6 @@ public void messageQueueChanged(String topic, Set<MessageQueue> mqAll, Set<Messa
     @Override
     public void removeUnnecessaryMessageQueue(MessageQueue mq, ProcessQueue pq) {
         this.defaultMQPullConsumerImpl.getOffsetStore().persist(mq);
+        this.defaultMQPullConsumerImpl.getOffsetStore().removeOffset(mq);
     }
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/RebalancePushImpl.java
Patch:
@@ -126,7 +126,7 @@ public void messageQueueChanged(String topic, Set<MessageQueue> mqAll, Set<Messa
     @Override
     public void removeUnnecessaryMessageQueue(MessageQueue mq, ProcessQueue pq) {
         this.defaultMQPushConsumerImpl.getOffsetStore().persist(mq);
-
+        this.defaultMQPushConsumerImpl.getOffsetStore().removeOffset(mq);
         if (this.defaultMQPushConsumerImpl.isConsumeOrderly()) {
             this.unlock(mq, true);
         }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/RebalancePullImpl.java
Patch:
@@ -75,5 +75,6 @@ public void messageQueueChanged(String topic, Set<MessageQueue> mqAll, Set<Messa
     @Override
     public void removeUnnecessaryMessageQueue(MessageQueue mq, ProcessQueue pq) {
         this.defaultMQPullConsumerImpl.getOffsetStore().persist(mq);
+        this.defaultMQPullConsumerImpl.getOffsetStore().removeOffset(mq);
     }
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/RebalancePushImpl.java
Patch:
@@ -126,7 +126,7 @@ public void messageQueueChanged(String topic, Set<MessageQueue> mqAll, Set<Messa
     @Override
     public void removeUnnecessaryMessageQueue(MessageQueue mq, ProcessQueue pq) {
         this.defaultMQPushConsumerImpl.getOffsetStore().persist(mq);
-
+        this.defaultMQPushConsumerImpl.getOffsetStore().removeOffset(mq);
         if (this.defaultMQPushConsumerImpl.isConsumeOrderly()) {
             this.unlock(mq, true);
         }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -499,8 +499,7 @@ private TopicPublishInfo tryToFindTopicPublishInfo(final String topic) {
         if (null == topicPublishInfo || !topicPublishInfo.ok()) {
             this.topicPublishInfoTable.putIfAbsent(topic, new TopicPublishInfo());
             this.mQClientFactory.updateTopicRouteInfoFromNameServer(topic);
-            this.mQClientFactory.updateTopicRouteInfoFromNameServer(topic, true,
-                this.defaultMQProducer.getDefaultTopicQueueNums());
+            this.mQClientFactory.updateTopicRouteInfoFromNameServer(topic, true, this.defaultMQProducer);
             topicPublishInfo = this.topicPublishInfoTable.get(topic);
         }
 
@@ -522,7 +521,7 @@ private SendResult sendKernelImpl(final Message msg,//
             // TODO 此处可能对Name Server压力过大，需要调优
             this.mQClientFactory.updateTopicRouteInfoFromNameServer(mq.getTopic());
             this.mQClientFactory.updateTopicRouteInfoFromNameServer(mq.getTopic(), true,
-                this.defaultMQProducer.getDefaultTopicQueueNums());
+                this.defaultMQProducer);
             brokerAddr = this.mQClientFactory.findBrokerAddressInPublish(mq.getBrokerName());
         }
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -499,8 +499,7 @@ private TopicPublishInfo tryToFindTopicPublishInfo(final String topic) {
         if (null == topicPublishInfo || !topicPublishInfo.ok()) {
             this.topicPublishInfoTable.putIfAbsent(topic, new TopicPublishInfo());
             this.mQClientFactory.updateTopicRouteInfoFromNameServer(topic);
-            this.mQClientFactory.updateTopicRouteInfoFromNameServer(topic, true,
-                this.defaultMQProducer.getDefaultTopicQueueNums());
+            this.mQClientFactory.updateTopicRouteInfoFromNameServer(topic, true, this.defaultMQProducer);
             topicPublishInfo = this.topicPublishInfoTable.get(topic);
         }
 
@@ -522,7 +521,7 @@ private SendResult sendKernelImpl(final Message msg,//
             // TODO 此处可能对Name Server压力过大，需要调优
             this.mQClientFactory.updateTopicRouteInfoFromNameServer(mq.getTopic());
             this.mQClientFactory.updateTopicRouteInfoFromNameServer(mq.getTopic(), true,
-                this.defaultMQProducer.getDefaultTopicQueueNums());
+                this.defaultMQProducer);
             brokerAddr = this.mQClientFactory.findBrokerAddressInPublish(mq.getBrokerName());
         }
 

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerController.java
Patch:
@@ -276,7 +276,7 @@ public void run() {
                 this.brokerOuterAPI.updateNameServerAddressList(this.brokerConfig.getNamesrvAddr());
             }
             // 定时获取Name Server地址
-            else {
+            else if (this.brokerConfig.isFetchNamesrvAddrByAddressServer()) {
                 this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
 
                     @Override

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerController.java
Patch:
@@ -276,7 +276,7 @@ public void run() {
                 this.brokerOuterAPI.updateNameServerAddressList(this.brokerConfig.getNamesrvAddr());
             }
             // 定时获取Name Server地址
-            else {
+            else if (this.brokerConfig.isFetchNamesrvAddrByAddressServer()) {
                 this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
 
                     @Override

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -197,8 +197,8 @@ public void operationComplete(ChannelFuture future) throws Exception {
 
                         if (!cmd.isOnewayRPC()) {
                             final RemotingCommand response =
-                                    RemotingCommand.createResponseCommand(ResponseCode.SYSTEM_ERROR_VALUE,
-                                        e.toString() + ", " + e.getMessage());
+                                    RemotingCommand.createResponseCommand(ResponseCode.SYSTEM_ERROR_VALUE,//
+                                        RemotingHelper.exceptionSimpleDesc(e));
                             response.setOpaque(cmd.getOpaque());
                             ctx.writeAndFlush(response);
                         }

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -197,8 +197,8 @@ public void operationComplete(ChannelFuture future) throws Exception {
 
                         if (!cmd.isOnewayRPC()) {
                             final RemotingCommand response =
-                                    RemotingCommand.createResponseCommand(ResponseCode.SYSTEM_ERROR_VALUE,
-                                        e.toString() + ", " + e.getMessage());
+                                    RemotingCommand.createResponseCommand(ResponseCode.SYSTEM_ERROR_VALUE,//
+                                        RemotingHelper.exceptionSimpleDesc(e));
                             response.setOpaque(cmd.getOpaque());
                             ctx.writeAndFlush(response);
                         }

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -639,7 +639,7 @@ public long getEarliestMessageTime(String topic, int queueId) {
     public long getMessageStoreTimeStamp(String topic, int queueId, long offset) {
         ConsumeQueue logicQueue = this.findConsumeQueue(topic, queueId);
         if (logicQueue != null) {
-            SelectMapedBufferResult result = logicQueue.getIndexBuffer(offset / ConsumeQueue.CQStoreUnitSize);
+            SelectMapedBufferResult result = logicQueue.getIndexBuffer(offset);
             if (result != null) {
                 try {
                     final long phyOffset = result.getByteBuffer().getLong();

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DefaultMessageStore.java
Patch:
@@ -639,7 +639,7 @@ public long getEarliestMessageTime(String topic, int queueId) {
     public long getMessageStoreTimeStamp(String topic, int queueId, long offset) {
         ConsumeQueue logicQueue = this.findConsumeQueue(topic, queueId);
         if (logicQueue != null) {
-            SelectMapedBufferResult result = logicQueue.getIndexBuffer(offset / ConsumeQueue.CQStoreUnitSize);
+            SelectMapedBufferResult result = logicQueue.getIndexBuffer(offset);
             if (result != null) {
                 try {
                     final long phyOffset = result.getByteBuffer().getLong();

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -1062,7 +1062,7 @@ public int wipeWritePermOfBroker(final String namesrvAddr, String brokerName, fi
         RemotingCommand request =
                 RemotingCommand.createRequestCommand(MQRequestCode.WIPE_WRITE_PERM_OF_BROKER_VALUE,
                     requestHeader);
-        RemotingCommand response = this.remotingClient.invokeSync(null, request, timeoutMillis);
+        RemotingCommand response = this.remotingClient.invokeSync(namesrvAddr, request, timeoutMillis);
         assert response != null;
         switch (response.getCode()) {
         case ResponseCode.SUCCESS_VALUE: {

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -1062,7 +1062,7 @@ public int wipeWritePermOfBroker(final String namesrvAddr, String brokerName, fi
         RemotingCommand request =
                 RemotingCommand.createRequestCommand(MQRequestCode.WIPE_WRITE_PERM_OF_BROKER_VALUE,
                     requestHeader);
-        RemotingCommand response = this.remotingClient.invokeSync(null, request, timeoutMillis);
+        RemotingCommand response = this.remotingClient.invokeSync(namesrvAddr, request, timeoutMillis);
         assert response != null;
         switch (response.getCode()) {
         case ResponseCode.SUCCESS_VALUE: {

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/topic/TopicRouteSubCommand.java
Patch:
@@ -64,6 +64,7 @@ public void execute(final CommandLine commandLine, final Options options) {
         try {
             if (!commandLine.hasOption('t')) {
                 MixAll.printCommandLineHelp("mqadmin " + this.commandName(), options);
+                return;
             }
 
             defaultMQAdminExt.start();

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/topic/TopicRouteSubCommand.java
Patch:
@@ -64,6 +64,7 @@ public void execute(final CommandLine commandLine, final Options options) {
         try {
             if (!commandLine.hasOption('t')) {
                 MixAll.printCommandLineHelp("mqadmin " + this.commandName(), options);
+                return;
             }
 
             defaultMQAdminExt.start();

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/store/LocalFileOffsetStore.java
Patch:
@@ -112,6 +112,8 @@ public long readOffset(MessageQueue mq, boolean fromStore) {
                     this.updateOffset(mq, offset.get(), false);
                     return offset.get();
                 }
+            } else {
+	            return offset.get();
             }
         }
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/store/LocalFileOffsetStore.java
Patch:
@@ -112,6 +112,8 @@ public long readOffset(MessageQueue mq, boolean fromStore) {
                     this.updateOffset(mq, offset.get(), false);
                     return offset.get();
                 }
+            } else {
+	            return offset.get();
             }
         }
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/producer/DefaultMQProducer.java
Patch:
@@ -159,8 +159,9 @@ public void sendOneway(Message msg, MessageQueueSelector selector, Object arg) t
     }
 
 
-    public SendResult sendMessageInTransaction(Message msg, LocalTransactionExecuter tranExecuter)
-            throws MQClientException {
+    @Override
+    public TransactionSendResult sendMessageInTransaction(Message msg, LocalTransactionExecuter tranExecuter,
+            final Object arg) throws MQClientException {
         throw new NotImplementedException();
     }
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/producer/LocalTransactionExecuter.java
Patch:
@@ -25,5 +25,5 @@
  * @since 2013-7-25
  */
 public interface LocalTransactionExecuter {
-    public LocalTransactionState executeLocalTransactionBranch(final Message msg);
+    public LocalTransactionState executeLocalTransactionBranch(final Message msg, final Object arg);
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/producer/MQProducer.java
Patch:
@@ -211,6 +211,6 @@ public void sendOneway(final Message msg, final MessageQueueSelector selector, f
             throws MQClientException, RemotingException, InterruptedException;
 
 
-    public SendResult sendMessageInTransaction(final Message msg, final LocalTransactionExecuter tranExecuter)
-            throws MQClientException;
+    public TransactionSendResult sendMessageInTransaction(final Message msg,
+            final LocalTransactionExecuter tranExecuter, final Object arg) throws MQClientException;
 }

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/benchmark/TransactionProducer.java
Patch:
@@ -117,7 +117,8 @@ public void run() {
                         try {
                             // Thread.sleep(1000);
                             final long beginTimestamp = System.currentTimeMillis();
-                            SendResult sendResult = producer.sendMessageInTransaction(msg, tranExecuter);
+                            SendResult sendResult =
+                                    producer.sendMessageInTransaction(msg, tranExecuter, null);
                             if (sendResult != null) {
                                 statsBenchmark.getSendRequestSuccessCount().incrementAndGet();
                                 statsBenchmark.getReceiveResponseSuccessCount().incrementAndGet();
@@ -173,7 +174,7 @@ public TransactionExecuterBImpl(boolean ischeck) {
 
 
     @Override
-    public LocalTransactionState executeLocalTransactionBranch(Message msg) {
+    public LocalTransactionState executeLocalTransactionBranch(final Message msg, final Object arg) {
         if (ischeck) {
             return LocalTransactionState.UNKNOW;
         }

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/transaction/TransactionExecuterImpl.java
Patch:
@@ -33,7 +33,7 @@ public class TransactionExecuterImpl implements LocalTransactionExecuter {
 
 
     @Override
-    public LocalTransactionState executeLocalTransactionBranch(Message msg) {
+    public LocalTransactionState executeLocalTransactionBranch(final Message msg, final Object arg) {
         int value = transactionIndex.getAndIncrement();
 
         if (value == 0) {

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/transaction/TransactionProducer.java
Patch:
@@ -49,7 +49,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
                 Message msg =
                         new Message("TopicTest", tags[i % tags.length], "KEY" + i,
                             ("Hello RocketMQ " + i).getBytes());
-                SendResult sendResult = producer.sendMessageInTransaction(msg, tranExecuter);
+                SendResult sendResult = producer.sendMessageInTransaction(msg, tranExecuter, null);
                 System.out.println(sendResult);
 
                 Thread.sleep(10);

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/producer/DefaultMQProducer.java
Patch:
@@ -159,8 +159,9 @@ public void sendOneway(Message msg, MessageQueueSelector selector, Object arg) t
     }
 
 
-    public SendResult sendMessageInTransaction(Message msg, LocalTransactionExecuter tranExecuter)
-            throws MQClientException {
+    @Override
+    public TransactionSendResult sendMessageInTransaction(Message msg, LocalTransactionExecuter tranExecuter,
+            final Object arg) throws MQClientException {
         throw new NotImplementedException();
     }
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/producer/LocalTransactionExecuter.java
Patch:
@@ -25,5 +25,5 @@
  * @since 2013-7-25
  */
 public interface LocalTransactionExecuter {
-    public LocalTransactionState executeLocalTransactionBranch(final Message msg);
+    public LocalTransactionState executeLocalTransactionBranch(final Message msg, final Object arg);
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/producer/MQProducer.java
Patch:
@@ -211,6 +211,6 @@ public void sendOneway(final Message msg, final MessageQueueSelector selector, f
             throws MQClientException, RemotingException, InterruptedException;
 
 
-    public SendResult sendMessageInTransaction(final Message msg, final LocalTransactionExecuter tranExecuter)
-            throws MQClientException;
+    public TransactionSendResult sendMessageInTransaction(final Message msg,
+            final LocalTransactionExecuter tranExecuter, final Object arg) throws MQClientException;
 }

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/benchmark/TransactionProducer.java
Patch:
@@ -117,7 +117,8 @@ public void run() {
                         try {
                             // Thread.sleep(1000);
                             final long beginTimestamp = System.currentTimeMillis();
-                            SendResult sendResult = producer.sendMessageInTransaction(msg, tranExecuter);
+                            SendResult sendResult =
+                                    producer.sendMessageInTransaction(msg, tranExecuter, null);
                             if (sendResult != null) {
                                 statsBenchmark.getSendRequestSuccessCount().incrementAndGet();
                                 statsBenchmark.getReceiveResponseSuccessCount().incrementAndGet();
@@ -173,7 +174,7 @@ public TransactionExecuterBImpl(boolean ischeck) {
 
 
     @Override
-    public LocalTransactionState executeLocalTransactionBranch(Message msg) {
+    public LocalTransactionState executeLocalTransactionBranch(final Message msg, final Object arg) {
         if (ischeck) {
             return LocalTransactionState.UNKNOW;
         }

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/transaction/TransactionExecuterImpl.java
Patch:
@@ -33,7 +33,7 @@ public class TransactionExecuterImpl implements LocalTransactionExecuter {
 
 
     @Override
-    public LocalTransactionState executeLocalTransactionBranch(Message msg) {
+    public LocalTransactionState executeLocalTransactionBranch(final Message msg, final Object arg) {
         int value = transactionIndex.getAndIncrement();
 
         if (value == 0) {

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/transaction/TransactionProducer.java
Patch:
@@ -49,7 +49,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
                 Message msg =
                         new Message("TopicTest", tags[i % tags.length], "KEY" + i,
                             ("Hello RocketMQ " + i).getBytes());
-                SendResult sendResult = producer.sendMessageInTransaction(msg, tranExecuter);
+                SendResult sendResult = producer.sendMessageInTransaction(msg, tranExecuter, null);
                 System.out.println(sendResult);
 
                 Thread.sleep(10);

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/offset/ConsumerOffsetManager.java
Patch:
@@ -66,7 +66,7 @@ private static ConcurrentHashMap<String, ConcurrentHashMap<Integer, Long>> clone
                     Long offset = map.get(queueId);
                     Integer queueIdNew = new Integer(queueId.intValue());
                     Long offsetNew = new Long(offset.longValue());
-                    map.put(queueIdNew, offsetNew);
+                    mapNew.put(queueIdNew, offsetNew);
                 }
 
                 String topicgroupNew = new String(topicgroup);

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/offset/ConsumerOffsetManager.java
Patch:
@@ -66,7 +66,7 @@ private static ConcurrentHashMap<String, ConcurrentHashMap<Integer, Long>> clone
                     Long offset = map.get(queueId);
                     Integer queueIdNew = new Integer(queueId.intValue());
                     Long offsetNew = new Long(offset.longValue());
-                    map.put(queueIdNew, offsetNew);
+                    mapNew.put(queueIdNew, offsetNew);
                 }
 
                 String topicgroupNew = new String(topicgroup);

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/offset/ConsumerOffsetManager.java
Patch:
@@ -66,7 +66,7 @@ private static ConcurrentHashMap<String, ConcurrentHashMap<Integer, Long>> clone
                     Long offset = map.get(queueId);
                     Integer queueIdNew = new Integer(queueId.intValue());
                     Long offsetNew = new Long(offset.longValue());
-                    map.put(queueIdNew, offsetNew);
+                    mapNew.put(queueIdNew, offsetNew);
                 }
 
                 String topicgroupNew = new String(topicgroup);

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/offset/ConsumerOffsetManager.java
Patch:
@@ -66,7 +66,7 @@ private static ConcurrentHashMap<String, ConcurrentHashMap<Integer, Long>> clone
                     Long offset = map.get(queueId);
                     Integer queueIdNew = new Integer(queueId.intValue());
                     Long offsetNew = new Long(offset.longValue());
-                    map.put(queueIdNew, offsetNew);
+                    mapNew.put(queueIdNew, offsetNew);
                 }
 
                 String topicgroupNew = new String(topicgroup);

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/MQConsumerInner.java
Patch:
@@ -50,4 +50,7 @@ public interface MQConsumerInner {
 
 
     public void updateTopicSubscribeInfo(final String topic, final Set<MessageQueue> info);
+
+
+    public boolean isSubscribeTopicNeedUpdate(final String topic);
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/producer/MQProducerInner.java
Patch:
@@ -31,6 +31,9 @@ public interface MQProducerInner {
     public Set<String> getPublishTopicList();
 
 
+    public boolean isPublishTopicNeedUpdate(final String topic);
+
+
     public TransactionCheckListener checkListener();
 
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/MQConsumerInner.java
Patch:
@@ -50,4 +50,7 @@ public interface MQConsumerInner {
 
 
     public void updateTopicSubscribeInfo(final String topic, final Set<MessageQueue> info);
+
+
+    public boolean isSubscribeTopicNeedUpdate(final String topic);
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/producer/MQProducerInner.java
Patch:
@@ -31,6 +31,9 @@ public interface MQProducerInner {
     public Set<String> getPublishTopicList();
 
 
+    public boolean isPublishTopicNeedUpdate(final String topic);
+
+
     public TransactionCheckListener checkListener();
 
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -354,7 +354,7 @@ private PullResult processPullResponse(final RemotingCommand response) throws MQ
 
         return new PullResultExt(pullStatus, responseHeader.getNextBeginOffset(),
             responseHeader.getMinOffset(), responseHeader.getMaxOffset(), null,
-            responseHeader.getSuggestPullingFromSlave(), response.getBody());
+            responseHeader.getSuggestWhichBrokerId(), response.getBody());
     }
 
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/MQClientAPIImpl.java
Patch:
@@ -354,7 +354,7 @@ private PullResult processPullResponse(final RemotingCommand response) throws MQ
 
         return new PullResultExt(pullStatus, responseHeader.getNextBeginOffset(),
             responseHeader.getMinOffset(), responseHeader.getMaxOffset(), null,
-            responseHeader.getSuggestPullingFromSlave(), response.getBody());
+            responseHeader.getSuggestWhichBrokerId(), response.getBody());
     }
 
 

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/PullMessageProcessor.java
Patch:
@@ -72,7 +72,7 @@ public void run() {
                         response.setOpaque(request.getOpaque());
                         response.markResponseType();
                         try {
-                            channel.write(response).addListener(new ChannelFutureListener() {
+                            channel.writeAndFlush(response).addListener(new ChannelFutureListener() {
                                 @Override
                                 public void operationComplete(ChannelFuture future) throws Exception {
                                     if (!future.isSuccess()) {
@@ -301,7 +301,7 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
                     FileRegion fileRegion =
                             new ManyMessageTransfer(response.encodeHeader(getMessageResult
                                 .getBufferTotalSize()), getMessageResult);
-                    channel.write(fileRegion).addListener(new ChannelFutureListener() {
+                    channel.writeAndFlush(fileRegion).addListener(new ChannelFutureListener() {
                         @Override
                         public void operationComplete(ChannelFuture future) throws Exception {
                             getMessageResult.release();

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/QueryMessageProcessor.java
Patch:
@@ -101,7 +101,7 @@ public RemotingCommand queryMessage(ChannelHandlerContext ctx, RemotingCommand r
                 FileRegion fileRegion =
                         new QueryMessageTransfer(response.encodeHeader(queryMessageResult
                             .getBufferTotalSize()), queryMessageResult);
-                ctx.channel().write(fileRegion).addListener(new ChannelFutureListener() {
+                ctx.channel().writeAndFlush(fileRegion).addListener(new ChannelFutureListener() {
                     @Override
                     public void operationComplete(ChannelFuture future) throws Exception {
                         queryMessageResult.release();
@@ -144,7 +144,7 @@ public RemotingCommand viewMessageById(ChannelHandlerContext ctx, RemotingComman
                 FileRegion fileRegion =
                         new OneMessageTransfer(response.encodeHeader(selectMapedBufferResult.getSize()),
                             selectMapedBufferResult);
-                ctx.channel().write(fileRegion).addListener(new ChannelFutureListener() {
+                ctx.channel().writeAndFlush(fileRegion).addListener(new ChannelFutureListener() {
                     @Override
                     public void operationComplete(ChannelFuture future) throws Exception {
                         selectMapedBufferResult.release();

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -365,7 +365,7 @@ private RemotingCommand sendMessage(final ChannelHandlerContext ctx, final Remot
                 // ֱ�ӷ���
                 if (!request.isOnewayRPC()) {
                     try {
-                        ctx.write(response).addListener(new ChannelFutureListener() {
+                        ctx.writeAndFlush(response).addListener(new ChannelFutureListener() {
                             @Override
                             public void operationComplete(ChannelFuture future) throws Exception {
                                 if (!future.isSuccess()) {

File: rocketmq-remoting/src/test/java/com/alibaba/rocketmq/remoting/NettyRPCTest.java
Patch:
@@ -68,7 +68,7 @@ public void test_RPC_Sync() throws InterruptedException, RemotingConnectExceptio
             requestHeader.setCount(i);
             requestHeader.setMessageTitle("HelloMessageTitle");
             RemotingCommand request = RemotingCommand.createRequestCommand(0, requestHeader);
-            RemotingCommand response = client.invokeSync("127.0.0.1:8888", request, 1000 * 3);
+            RemotingCommand response = client.invokeSync("127.0.0.1:8888", request, 1000 * 3000);
             System.out.println("invoke result = " + response);
             assertTrue(response != null);
         }

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/PullMessageProcessor.java
Patch:
@@ -72,7 +72,7 @@ public void run() {
                         response.setOpaque(request.getOpaque());
                         response.markResponseType();
                         try {
-                            channel.write(response).addListener(new ChannelFutureListener() {
+                            channel.writeAndFlush(response).addListener(new ChannelFutureListener() {
                                 @Override
                                 public void operationComplete(ChannelFuture future) throws Exception {
                                     if (!future.isSuccess()) {
@@ -301,7 +301,7 @@ private RemotingCommand processRequest(final Channel channel, RemotingCommand re
                     FileRegion fileRegion =
                             new ManyMessageTransfer(response.encodeHeader(getMessageResult
                                 .getBufferTotalSize()), getMessageResult);
-                    channel.write(fileRegion).addListener(new ChannelFutureListener() {
+                    channel.writeAndFlush(fileRegion).addListener(new ChannelFutureListener() {
                         @Override
                         public void operationComplete(ChannelFuture future) throws Exception {
                             getMessageResult.release();

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/QueryMessageProcessor.java
Patch:
@@ -101,7 +101,7 @@ public RemotingCommand queryMessage(ChannelHandlerContext ctx, RemotingCommand r
                 FileRegion fileRegion =
                         new QueryMessageTransfer(response.encodeHeader(queryMessageResult
                             .getBufferTotalSize()), queryMessageResult);
-                ctx.channel().write(fileRegion).addListener(new ChannelFutureListener() {
+                ctx.channel().writeAndFlush(fileRegion).addListener(new ChannelFutureListener() {
                     @Override
                     public void operationComplete(ChannelFuture future) throws Exception {
                         queryMessageResult.release();
@@ -144,7 +144,7 @@ public RemotingCommand viewMessageById(ChannelHandlerContext ctx, RemotingComman
                 FileRegion fileRegion =
                         new OneMessageTransfer(response.encodeHeader(selectMapedBufferResult.getSize()),
                             selectMapedBufferResult);
-                ctx.channel().write(fileRegion).addListener(new ChannelFutureListener() {
+                ctx.channel().writeAndFlush(fileRegion).addListener(new ChannelFutureListener() {
                     @Override
                     public void operationComplete(ChannelFuture future) throws Exception {
                         selectMapedBufferResult.release();

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/SendMessageProcessor.java
Patch:
@@ -365,7 +365,7 @@ private RemotingCommand sendMessage(final ChannelHandlerContext ctx, final Remot
                 // ֱ�ӷ���
                 if (!request.isOnewayRPC()) {
                     try {
-                        ctx.write(response).addListener(new ChannelFutureListener() {
+                        ctx.writeAndFlush(response).addListener(new ChannelFutureListener() {
                             @Override
                             public void operationComplete(ChannelFuture future) throws Exception {
                                 if (!future.isSuccess()) {

File: rocketmq-remoting/src/test/java/com/alibaba/rocketmq/remoting/NettyRPCTest.java
Patch:
@@ -68,7 +68,7 @@ public void test_RPC_Sync() throws InterruptedException, RemotingConnectExceptio
             requestHeader.setCount(i);
             requestHeader.setMessageTitle("HelloMessageTitle");
             RemotingCommand request = RemotingCommand.createRequestCommand(0, requestHeader);
-            RemotingCommand response = client.invokeSync("127.0.0.1:8888", request, 1000 * 3);
+            RemotingCommand response = client.invokeSync("127.0.0.1:8888", request, 1000 * 3000);
             System.out.println("invoke result = " + response);
             assertTrue(response != null);
         }

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/message/MessageExt.java
Patch:
@@ -3,7 +3,6 @@
  */
 package com.alibaba.rocketmq.common.message;
 
-import java.io.Serializable;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.nio.ByteBuffer;
@@ -16,9 +15,10 @@
  * ��Ϣ��չ���ԣ��ڷ������ϲ����˶���
  * 
  * @author shijia.wxr<vintage.wang@gmail.com>
+ * @since 2013-7-18
  */
-public class MessageExt extends Message implements Serializable {
-    private static final long serialVersionUID = 8319216613151969646L;
+public class MessageExt extends Message {
+    private static final long serialVersionUID = 5720810158625748049L;
 
     // ����ID <PUT>
     private int queueId;

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/message/MessageExt.java
Patch:
@@ -3,7 +3,6 @@
  */
 package com.alibaba.rocketmq.common.message;
 
-import java.io.Serializable;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.nio.ByteBuffer;
@@ -16,9 +15,10 @@
  * ��Ϣ��չ���ԣ��ڷ������ϲ����˶���
  * 
  * @author shijia.wxr<vintage.wang@gmail.com>
+ * @since 2013-7-18
  */
-public class MessageExt extends Message implements Serializable {
-    private static final long serialVersionUID = 8319216613151969646L;
+public class MessageExt extends Message {
+    private static final long serialVersionUID = 5720810158625748049L;
 
     // ����ID <PUT>
     private int queueId;

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/benchmark/Producer.java
Patch:
@@ -43,6 +43,8 @@ public static void main(String[] args) throws MQClientException {
         final int threadCount = args.length >= 1 ? Integer.parseInt(args[0]) : 32;
         final int messageSize = args.length >= 2 ? Integer.parseInt(args[1]) : 1024 * 2;
 
+        System.out.printf("threadCount %d messageSize %d\n", threadCount, messageSize);
+
         final Message msg = buildMessage(messageSize);
 
         final ExecutorService sendThreadPool = Executors.newFixedThreadPool(threadCount);

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/benchmark/Producer.java
Patch:
@@ -43,6 +43,8 @@ public static void main(String[] args) throws MQClientException {
         final int threadCount = args.length >= 1 ? Integer.parseInt(args[0]) : 32;
         final int messageSize = args.length >= 2 ? Integer.parseInt(args[1]) : 1024 * 2;
 
+        System.out.printf("threadCount %d messageSize %d\n", threadCount, messageSize);
+
         final Message msg = buildMessage(messageSize);
 
         final ExecutorService sendThreadPool = Executors.newFixedThreadPool(threadCount);

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -505,7 +505,7 @@ private SendResult sendSelectImpl(//
      */
     private TopicPublishInfo tryToFindTopicPublishInfo(final String topic) {
         TopicPublishInfo topicPublishInfo = this.topicPublishInfoTable.get(topic);
-        if (null == topicPublishInfo) {
+        if (null == topicPublishInfo || !topicPublishInfo.ok()) {
             this.topicPublishInfoTable.putIfAbsent(topic, new TopicPublishInfo());
             this.mQClientFactory.updateTopicRouteInfoFromNameServer(topic);
             this.mQClientFactory.updateTopicRouteInfoFromNameServer(this.defaultMQProducer

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -505,7 +505,7 @@ private SendResult sendSelectImpl(//
      */
     private TopicPublishInfo tryToFindTopicPublishInfo(final String topic) {
         TopicPublishInfo topicPublishInfo = this.topicPublishInfoTable.get(topic);
-        if (null == topicPublishInfo) {
+        if (null == topicPublishInfo || !topicPublishInfo.ok()) {
             this.topicPublishInfoTable.putIfAbsent(topic, new TopicPublishInfo());
             this.mQClientFactory.updateTopicRouteInfoFromNameServer(topic);
             this.mQClientFactory.updateTopicRouteInfoFromNameServer(this.defaultMQProducer

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerStartup.java
Patch:
@@ -155,7 +155,7 @@ else if (commandLine.hasOption('m')) {
             JoranConfigurator configurator = new JoranConfigurator();
             configurator.setContext(lc);
             lc.reset();
-            configurator.doConfigure(brokerConfig.getRocketmqHome() + "/conf/log4j_broker.xml");
+            configurator.doConfigure(brokerConfig.getRocketmqHome() + "/conf/logback_broker.xml");
             final Logger log = LoggerFactory.getLogger(LoggerName.BrokerLoggerName);
 
             // ��ӡ��������

File: rocketmq-namesrv/src/main/java/com/alibaba/rocketmq/namesrv/NamesrvStartup.java
Patch:
@@ -95,7 +95,7 @@ public static void main(String[] args) {
             JoranConfigurator configurator = new JoranConfigurator();
             configurator.setContext(lc);
             lc.reset();
-            configurator.doConfigure(namesrvConfig.getRocketmqHome() + "/conf/log4j_namesrv.xml");
+            configurator.doConfigure(namesrvConfig.getRocketmqHome() + "/conf/logback_namesrv.xml");
             final Logger log = LoggerFactory.getLogger(LoggerName.NamesrvLoggerName);
 
             // ��ʼ��������ƶ���

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -88,7 +88,7 @@ private static void initLogback() throws JoranException {
         JoranConfigurator configurator = new JoranConfigurator();
         configurator.setContext(lc);
         lc.reset();
-        configurator.doConfigure(rocketmqHome + "/conf/log4j_tools.xml");
+        configurator.doConfigure(rocketmqHome + "/conf/logback_tools.xml");
     }
 
 

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerStartup.java
Patch:
@@ -155,7 +155,7 @@ else if (commandLine.hasOption('m')) {
             JoranConfigurator configurator = new JoranConfigurator();
             configurator.setContext(lc);
             lc.reset();
-            configurator.doConfigure(brokerConfig.getRocketmqHome() + "/conf/log4j_broker.xml");
+            configurator.doConfigure(brokerConfig.getRocketmqHome() + "/conf/logback_broker.xml");
             final Logger log = LoggerFactory.getLogger(LoggerName.BrokerLoggerName);
 
             // ��ӡ��������

File: rocketmq-namesrv/src/main/java/com/alibaba/rocketmq/namesrv/NamesrvStartup.java
Patch:
@@ -95,7 +95,7 @@ public static void main(String[] args) {
             JoranConfigurator configurator = new JoranConfigurator();
             configurator.setContext(lc);
             lc.reset();
-            configurator.doConfigure(namesrvConfig.getRocketmqHome() + "/conf/log4j_namesrv.xml");
+            configurator.doConfigure(namesrvConfig.getRocketmqHome() + "/conf/logback_namesrv.xml");
             final Logger log = LoggerFactory.getLogger(LoggerName.NamesrvLoggerName);
 
             // ��ʼ��������ƶ���

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/MQAdminStartup.java
Patch:
@@ -88,7 +88,7 @@ private static void initLogback() throws JoranException {
         JoranConfigurator configurator = new JoranConfigurator();
         configurator.setContext(lc);
         lc.reset();
-        configurator.doConfigure(rocketmqHome + "/conf/log4j_tools.xml");
+        configurator.doConfigure(rocketmqHome + "/conf/logback_tools.xml");
     }
 
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/factory/MQClientFactory.java
Patch:
@@ -150,6 +150,7 @@ public MQClientFactory(ClientConfig clientConfig, int factoryIndex, String clien
         this.rebalanceService = new RebalanceService(this);
 
         this.defaultMQProducer = new DefaultMQProducer(MixAll.CLIENT_INNER_PRODUCER_GROUP);
+        this.defaultMQProducer.resetClientConfig(clientConfig);
 
         log.info("created a new client fatory, FactoryIndex: {} ClinetID: {} {}",//
             this.factoryIndex, //

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/factory/MQClientFactory.java
Patch:
@@ -150,6 +150,7 @@ public MQClientFactory(ClientConfig clientConfig, int factoryIndex, String clien
         this.rebalanceService = new RebalanceService(this);
 
         this.defaultMQProducer = new DefaultMQProducer(MixAll.CLIENT_INNER_PRODUCER_GROUP);
+        this.defaultMQProducer.resetClientConfig(clientConfig);
 
         log.info("created a new client fatory, FactoryIndex: {} ClinetID: {} {}",//
             this.factoryIndex, //

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -109,6 +109,9 @@ public void run() {
                     NettyEvent event = this.eventQueue.poll(3000, TimeUnit.MILLISECONDS);
                     if (event != null) {
                         switch (event.getType()) {
+                        case IDLE:
+                            listener.onChannelIdle(event.getRemoteAddr(), event.getChannel());
+                            break;
                         case CLOSE:
                             listener.onChannelClose(event.getRemoteAddr(), event.getChannel());
                             break;

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRemotingAbstract.java
Patch:
@@ -109,6 +109,9 @@ public void run() {
                     NettyEvent event = this.eventQueue.poll(3000, TimeUnit.MILLISECONDS);
                     if (event != null) {
                         switch (event.getType()) {
+                        case IDLE:
+                            listener.onChannelIdle(event.getRemoteAddr(), event.getChannel());
+                            break;
                         case CLOSE:
                             listener.onChannelClose(event.getRemoteAddr(), event.getChannel());
                             break;

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ConsumeMessageService.java
Patch:
@@ -16,6 +16,9 @@ public interface ConsumeMessageService {
     public void shutdown();
 
 
+    public void updateCorePoolSize(int corePoolSize);
+
+
     public void submitConsumeRequest(//
             final List<MessageExt> msgs, //
             final ProcessQueue processQueue, //

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/RebalanceImpl.java
Patch:
@@ -243,6 +243,9 @@ public void lockAll() {
     }
 
 
+
+
+
     public void doRebalance() {
         Map<String, SubscriptionData> subTable = this.getSubscriptionInner();
         if (subTable != null) {

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ConsumeMessageService.java
Patch:
@@ -16,6 +16,9 @@ public interface ConsumeMessageService {
     public void shutdown();
 
 
+    public void updateCorePoolSize(int corePoolSize);
+
+
     public void submitConsumeRequest(//
             final List<MessageExt> msgs, //
             final ProcessQueue processQueue, //

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/RebalanceImpl.java
Patch:
@@ -243,6 +243,9 @@ public void lockAll() {
     }
 
 
+
+
+
     public void doRebalance() {
         Map<String, SubscriptionData> subTable = this.getSubscriptionInner();
         if (subTable != null) {

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/slave/SlaveSynchronize.java
Patch:
@@ -50,6 +50,9 @@ private void syncTopicConfig() {
                         this.brokerController.getBrokerOuterAPI().getAllTopicConfig(masterAddrBak);
                 if (!this.brokerController.getTopicConfigManager().getDataVersion()
                     .equals(topicWrapper.getDataVersion())) {
+
+                    this.brokerController.getTopicConfigManager().getDataVersion()
+                        .assignNewOne(topicWrapper.getDataVersion());
                     this.brokerController.getTopicConfigManager().getTopicConfigTable()
                         .putAll(topicWrapper.getTopicConfigTable());
                     this.brokerController.getTopicConfigManager().persist();

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/slave/SlaveSynchronize.java
Patch:
@@ -50,6 +50,9 @@ private void syncTopicConfig() {
                         this.brokerController.getBrokerOuterAPI().getAllTopicConfig(masterAddrBak);
                 if (!this.brokerController.getTopicConfigManager().getDataVersion()
                     .equals(topicWrapper.getDataVersion())) {
+
+                    this.brokerController.getTopicConfigManager().getDataVersion()
+                        .assignNewOne(topicWrapper.getDataVersion());
                     this.brokerController.getTopicConfigManager().getTopicConfigTable()
                         .putAll(topicWrapper.getTopicConfigTable());
                     this.brokerController.getTopicConfigManager().persist();

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/out/BrokerOuterAPI.java
Patch:
@@ -209,7 +209,7 @@ public void unregisterBrokerAll(//
     public TopicConfigSerializeWrapper getAllTopicConfig(final String addr) throws RemotingConnectException,
             RemotingSendRequestException, RemotingTimeoutException, InterruptedException, MQBrokerException {
         RemotingCommand request =
-                RemotingCommand.createRequestCommand(MQRequestCode.UNREGISTER_BROKER_VALUE, null);
+                RemotingCommand.createRequestCommand(MQRequestCode.GET_ALL_TOPIC_CONFIG_VALUE, null);
 
         RemotingCommand response = this.remotingClient.invokeSync(addr, request, 3000);
         assert response != null;

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/slave/SlaveSynchronize.java
Patch:
@@ -52,6 +52,7 @@ private void syncTopicConfig() {
                     .equals(topicWrapper.getDataVersion())) {
                     this.brokerController.getTopicConfigManager().getTopicConfigTable()
                         .putAll(topicWrapper.getTopicConfigTable());
+                    this.brokerController.getTopicConfigManager().persist();
 
                     log.info("update slave topic config from master, {}", masterAddrBak);
                 }

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/out/BrokerOuterAPI.java
Patch:
@@ -209,7 +209,7 @@ public void unregisterBrokerAll(//
     public TopicConfigSerializeWrapper getAllTopicConfig(final String addr) throws RemotingConnectException,
             RemotingSendRequestException, RemotingTimeoutException, InterruptedException, MQBrokerException {
         RemotingCommand request =
-                RemotingCommand.createRequestCommand(MQRequestCode.UNREGISTER_BROKER_VALUE, null);
+                RemotingCommand.createRequestCommand(MQRequestCode.GET_ALL_TOPIC_CONFIG_VALUE, null);
 
         RemotingCommand response = this.remotingClient.invokeSync(addr, request, 3000);
         assert response != null;

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/slave/SlaveSynchronize.java
Patch:
@@ -52,6 +52,7 @@ private void syncTopicConfig() {
                     .equals(topicWrapper.getDataVersion())) {
                     this.brokerController.getTopicConfigManager().getTopicConfigTable()
                         .putAll(topicWrapper.getTopicConfigTable());
+                    this.brokerController.getTopicConfigManager().persist();
 
                     log.info("update slave topic config from master, {}", masterAddrBak);
                 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/factory/MQClientFactory.java
Patch:
@@ -814,6 +814,9 @@ public boolean updateTopicRouteInfoFromNameServer(final String topic) {
                     this.lockNamesrv.unlock();
                 }
             }
+            else {
+                log.warn("updateTopicRouteInfoFromNameServer tryLock timeout {}ms", LockTimeoutMillis);
+            }
         }
         catch (InterruptedException e) {
             log.warn("updateTopicRouteInfoFromNameServer Exception", e);

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyDecoder.java
Patch:
@@ -41,6 +41,7 @@ public Object decode(ChannelHandlerContext ctx, ByteBuf in) throws Exception {
         }
         catch (Exception e) {
             log.error("decode exception, " + RemotingHelper.parseChannelRemoteAddr(ctx.channel()), e);
+            // ����رպ� ����pipeline�в����¼���ͨ�������close�¼����������ݽṹ
             RemotingUtil.closeChannel(ctx.channel());
         }
 

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyEncoder.java
Patch:
@@ -41,6 +41,7 @@ public void encode(ChannelHandlerContext ctx, RemotingCommand remotingCommand, B
             if (remotingCommand != null) {
                 log.error(remotingCommand.toString());
             }
+            // ����رպ� ����pipeline�в����¼���ͨ�������close�¼����������ݽṹ
             RemotingUtil.closeChannel(ctx.channel());
         }
     }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/factory/MQClientFactory.java
Patch:
@@ -814,6 +814,9 @@ public boolean updateTopicRouteInfoFromNameServer(final String topic) {
                     this.lockNamesrv.unlock();
                 }
             }
+            else {
+                log.warn("updateTopicRouteInfoFromNameServer tryLock timeout {}ms", LockTimeoutMillis);
+            }
         }
         catch (InterruptedException e) {
             log.warn("updateTopicRouteInfoFromNameServer Exception", e);

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyDecoder.java
Patch:
@@ -41,6 +41,7 @@ public Object decode(ChannelHandlerContext ctx, ByteBuf in) throws Exception {
         }
         catch (Exception e) {
             log.error("decode exception, " + RemotingHelper.parseChannelRemoteAddr(ctx.channel()), e);
+            // ����رպ� ����pipeline�в����¼���ͨ�������close�¼����������ݽṹ
             RemotingUtil.closeChannel(ctx.channel());
         }
 

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyEncoder.java
Patch:
@@ -41,6 +41,7 @@ public void encode(ChannelHandlerContext ctx, RemotingCommand remotingCommand, B
             if (remotingCommand != null) {
                 log.error(remotingCommand.toString());
             }
+            // ����رպ� ����pipeline�в����¼���ͨ�������close�¼����������ݽṹ
             RemotingUtil.closeChannel(ctx.channel());
         }
     }

File: rocketmq-remoting/src/test/java/com/alibaba/rocketmq/remoting/NettyRPCTest.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * @author shijia.wxr<vintage.wang@gmail.com>
- *
+ * 
  */
 public class NettyRPCTest {
     public static RemotingClient createRemotingClient() {

File: rocketmq-remoting/src/test/java/com/alibaba/rocketmq/remoting/NettyRPCTest.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * @author shijia.wxr<vintage.wang@gmail.com>
- *
+ * 
  */
 public class NettyRPCTest {
     public static RemotingClient createRemotingClient() {

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/factory/MQClientFactory.java
Patch:
@@ -806,7 +806,9 @@ public boolean updateTopicRouteInfoFromNameServer(final String topic) {
                     }
                 }
                 catch (Exception e) {
-                    log.warn("updateTopicRouteInfoFromNameServer Exception", e);
+                    if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
+                        log.warn("updateTopicRouteInfoFromNameServer Exception", e);
+                    }
                 }
                 finally {
                     this.lockNamesrv.unlock();

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/benchmark/Consumer.java
Patch:
@@ -89,7 +89,7 @@ public void run() {
 
         DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("benchmark_consumer");
 
-        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_MIN_OFFSET);
+        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET_AND_FROM_MIN_WHEN_BOOT_FIRST);
 
         consumer.subscribe("BenchmarkTest", "*");
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/factory/MQClientFactory.java
Patch:
@@ -806,7 +806,9 @@ public boolean updateTopicRouteInfoFromNameServer(final String topic) {
                     }
                 }
                 catch (Exception e) {
-                    log.warn("updateTopicRouteInfoFromNameServer Exception", e);
+                    if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
+                        log.warn("updateTopicRouteInfoFromNameServer Exception", e);
+                    }
                 }
                 finally {
                     this.lockNamesrv.unlock();

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/benchmark/Consumer.java
Patch:
@@ -89,7 +89,7 @@ public void run() {
 
         DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("benchmark_consumer");
 
-        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_MIN_OFFSET);
+        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET_AND_FROM_MIN_WHEN_BOOT_FIRST);
 
         consumer.subscribe("BenchmarkTest", "*");
 

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -422,14 +422,14 @@ private Channel createChannel(final String addr) throws InterruptedException {
                     if (!channel.isActive()) {
                         log.warn("connect {} in {}ms ok, but channel not active", addr,
                             this.nettyClientConfig.getConnectTimeoutMillis());
-                        channel.close().sync();
+                        channel.close();
                         return null;
                     }
                 }
                 else {
                     log.error("connect {} in {}ms timeout", addr,
                         this.nettyClientConfig.getConnectTimeoutMillis());
-                    channelFuture.channel().close().sync();
+                    channelFuture.channel().close();
                     return null;
                 }
 

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRemotingServer.java
Patch:
@@ -135,7 +135,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
                 if (evnet.state().equals(IdleState.ALL_IDLE)) {
                     log.warn("channel idle exception {}",
                         RemotingHelper.parseChannelRemoteAddr(ctx.channel()));
-                    ctx.channel().close().sync();
+                    ctx.channel().close();
                 }
             }
             ctx.fireUserEventTriggered(evt);

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -422,14 +422,14 @@ private Channel createChannel(final String addr) throws InterruptedException {
                     if (!channel.isActive()) {
                         log.warn("connect {} in {}ms ok, but channel not active", addr,
                             this.nettyClientConfig.getConnectTimeoutMillis());
-                        channel.close().sync();
+                        channel.close();
                         return null;
                     }
                 }
                 else {
                     log.error("connect {} in {}ms timeout", addr,
                         this.nettyClientConfig.getConnectTimeoutMillis());
-                    channelFuture.channel().close().sync();
+                    channelFuture.channel().close();
                     return null;
                 }
 

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRemotingServer.java
Patch:
@@ -135,7 +135,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
                 if (evnet.state().equals(IdleState.ALL_IDLE)) {
                     log.warn("channel idle exception {}",
                         RemotingHelper.parseChannelRemoteAddr(ctx.channel()));
-                    ctx.channel().close().sync();
+                    ctx.channel().close();
                 }
             }
             ctx.fireUserEventTriggered(evt);

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/protocol/RemotingCommand.java
Patch:
@@ -240,7 +240,7 @@ else if (type.equals("double")) {
                         if (null == value) {
                             Annotation annotation = field.getAnnotation(CFNotNull.class);
                             if (annotation != null) {
-                                throw new RemotingCommandException(name + " is null");
+                                throw new RemotingCommandException("the custom field <" + name + "> is null");
                             }
                         }
                     }

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/protocol/RemotingCommand.java
Patch:
@@ -240,7 +240,7 @@ else if (type.equals("double")) {
                         if (null == value) {
                             Annotation annotation = field.getAnnotation(CFNotNull.class);
                             if (annotation != null) {
-                                throw new RemotingCommandException(name + " is null");
+                                throw new RemotingCommandException("the custom field <" + name + "> is null");
                             }
                         }
                     }

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MixAll.java
Patch:
@@ -52,7 +52,8 @@ public class MixAll {
     public static final String NAMESRV_ADDR_ENV = "NAMESRV_ADDR";
     public static final String NAMESRV_ADDR_PROPERTY = "rocketmq.namesrv.addr";
 
-    public static final String WS_DOMAIN_NAME = "jmenv.tbsite.net";
+    public static final String WS_DOMAIN_NAME = System.getProperty("rocketmq.namesrv.domain",
+        "jmenv.tbsite.net");
     // http://jmenv.tbsite.net:8080/rocketmq/nsaddr
     public static final String WS_ADDR = "http://" + WS_DOMAIN_NAME + ":8080/rocketmq/nsaddr";
     public static final String DEFAULT_TOPIC = "TBW102";

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MixAll.java
Patch:
@@ -52,7 +52,8 @@ public class MixAll {
     public static final String NAMESRV_ADDR_ENV = "NAMESRV_ADDR";
     public static final String NAMESRV_ADDR_PROPERTY = "rocketmq.namesrv.addr";
 
-    public static final String WS_DOMAIN_NAME = "jmenv.tbsite.net";
+    public static final String WS_DOMAIN_NAME = System.getProperty("rocketmq.namesrv.domain",
+        "jmenv.tbsite.net");
     // http://jmenv.tbsite.net:8080/rocketmq/nsaddr
     public static final String WS_ADDR = "http://" + WS_DOMAIN_NAME + ":8080/rocketmq/nsaddr";
     public static final String DEFAULT_TOPIC = "TBW102";

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/store/OffsetStore.java
Patch:
@@ -31,4 +31,7 @@ public interface OffsetStore {
      * �־û�ȫ�����ѽ��ȣ����ܳ־û����ػ���Զ��Broker
      */
     public void persistAll(final Set<MessageQueue> mqs);
+
+
+    public void persist(final MessageQueue mq);
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/RebalancePullImpl.java
Patch:
@@ -59,7 +59,6 @@ public void messageQueueChanged(String topic, Set<MessageQueue> mqAll, Set<Messa
 
     @Override
     public void removeUnnecessaryMessageQueue(MessageQueue mq, ProcessQueue pq) {
-        // TODO Auto-generated method stub
-
+        this.defaultMQPullConsumerImpl.getOffsetStore().persist(mq);
     }
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/store/OffsetStore.java
Patch:
@@ -31,4 +31,7 @@ public interface OffsetStore {
      * �־û�ȫ�����ѽ��ȣ����ܳ־û����ػ���Զ��Broker
      */
     public void persistAll(final Set<MessageQueue> mqs);
+
+
+    public void persist(final MessageQueue mq);
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/RebalancePullImpl.java
Patch:
@@ -59,7 +59,6 @@ public void messageQueueChanged(String topic, Set<MessageQueue> mqAll, Set<Messa
 
     @Override
     public void removeUnnecessaryMessageQueue(MessageQueue mq, ProcessQueue pq) {
-        // TODO Auto-generated method stub
-
+        this.defaultMQPullConsumerImpl.getOffsetStore().persist(mq);
     }
 }

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/annotation/CFNotNull.java
Patch:
@@ -28,7 +28,7 @@
  * @author shijia.wxr<vintage.wang@gmail.com>
  */
 @Documented
-@Retention(RetentionPolicy.CLASS)
+@Retention(RetentionPolicy.RUNTIME)
 @Target({ ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.LOCAL_VARIABLE })
 public @interface CFNotNull {
 }

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/annotation/CFNullable.java
Patch:
@@ -28,7 +28,7 @@
  * @author shijia.wxr<vintage.wang@gmail.com>
  */
 @Documented
-@Retention(RetentionPolicy.CLASS)
+@Retention(RetentionPolicy.RUNTIME)
 @Target({ ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.LOCAL_VARIABLE })
 public @interface CFNullable {
 }

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/annotation/CFNotNull.java
Patch:
@@ -28,7 +28,7 @@
  * @author shijia.wxr<vintage.wang@gmail.com>
  */
 @Documented
-@Retention(RetentionPolicy.CLASS)
+@Retention(RetentionPolicy.RUNTIME)
 @Target({ ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.LOCAL_VARIABLE })
 public @interface CFNotNull {
 }

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/annotation/CFNullable.java
Patch:
@@ -28,7 +28,7 @@
  * @author shijia.wxr<vintage.wang@gmail.com>
  */
 @Documented
-@Retention(RetentionPolicy.CLASS)
+@Retention(RetentionPolicy.RUNTIME)
 @Target({ ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.LOCAL_VARIABLE })
 public @interface CFNullable {
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ProcessQueue.java
Patch:
@@ -30,6 +30,7 @@ public class ProcessQueue {
     private final Logger log = ClientLogger.getLog();
     private final ReadWriteLock lockTreeMap = new ReentrantReadWriteLock();
     private final TreeMap<Long, MessageExt> msgTreeMap = new TreeMap<Long, MessageExt>();
+    private volatile long queueOffsetMax = 0L;
     private final AtomicLong msgCount = new AtomicLong();
 
     // ��ǰQ�Ƿ�rebalance����
@@ -64,6 +65,7 @@ public boolean putMessage(final List<MessageExt> msgs) {
             try {
                 for (MessageExt msg : msgs) {
                     msgTreeMap.put(msg.getQueueOffset(), msg);
+                    this.queueOffsetMax = msg.getQueueOffset();
                 }
                 msgCount.addAndGet(msgs.size());
 
@@ -120,7 +122,7 @@ public long removeMessage(final List<MessageExt> msgs) {
             this.lockTreeMap.writeLock().lockInterruptibly();
             try {
                 if (!msgTreeMap.isEmpty()) {
-                    result = msgTreeMap.lastKey() + 1;
+                    result = this.queueOffsetMax + 1;
                     for (MessageExt msg : msgs) {
                         msgTreeMap.remove(msg.getQueueOffset());
                     }

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/simple/Producer.java
Patch:
@@ -24,7 +24,7 @@ public static void main(String[] args) {
 
             String[] tags = new String[] { "TagA", "TagB", "TagC", "TagD", "TagE" };
 
-            for (int i = 0; i < 1000; i++) {
+            for (int i = 0; i < 100; i++) {
                 Message msg =
                         new Message("TopicTest", tags[i % tags.length], "KEY" + i,
                             ("Hello RocketMQ " + i).getBytes());

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/simple/PushConsumer.java
Patch:
@@ -25,11 +25,11 @@
 public class PushConsumer {
 
     public static void main(String[] args) throws InterruptedException, MQClientException {
-        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("example_consumer_group4");
+        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("example_consumer_group7");
 
         consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET_AND_FROM_MIN_WHEN_BOOT_FIRST);
 
-        consumer.subscribe("TopicTest", "TagA || TagC || TagD");
+        consumer.subscribe("TopicTest", "*");
 
         consumer.registerMessageListener(new MessageListenerConcurrently() {
             AtomicLong consumeTimes = new AtomicLong(0);
@@ -41,7 +41,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
                 System.out.println("Receive New Messages: " + msgs);
                 // ģ������ʧ�����
                 if ((this.consumeTimes.getAndIncrement() % 2) == 0) {
-                    return ConsumeConcurrentlyStatus.RECONSUME_LATER;
+                    return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
                 }
 
                 return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ProcessQueue.java
Patch:
@@ -30,6 +30,7 @@ public class ProcessQueue {
     private final Logger log = ClientLogger.getLog();
     private final ReadWriteLock lockTreeMap = new ReentrantReadWriteLock();
     private final TreeMap<Long, MessageExt> msgTreeMap = new TreeMap<Long, MessageExt>();
+    private volatile long queueOffsetMax = 0L;
     private final AtomicLong msgCount = new AtomicLong();
 
     // ��ǰQ�Ƿ�rebalance����
@@ -64,6 +65,7 @@ public boolean putMessage(final List<MessageExt> msgs) {
             try {
                 for (MessageExt msg : msgs) {
                     msgTreeMap.put(msg.getQueueOffset(), msg);
+                    this.queueOffsetMax = msg.getQueueOffset();
                 }
                 msgCount.addAndGet(msgs.size());
 
@@ -120,7 +122,7 @@ public long removeMessage(final List<MessageExt> msgs) {
             this.lockTreeMap.writeLock().lockInterruptibly();
             try {
                 if (!msgTreeMap.isEmpty()) {
-                    result = msgTreeMap.lastKey() + 1;
+                    result = this.queueOffsetMax + 1;
                     for (MessageExt msg : msgs) {
                         msgTreeMap.remove(msg.getQueueOffset());
                     }

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/simple/Producer.java
Patch:
@@ -24,7 +24,7 @@ public static void main(String[] args) {
 
             String[] tags = new String[] { "TagA", "TagB", "TagC", "TagD", "TagE" };
 
-            for (int i = 0; i < 1000; i++) {
+            for (int i = 0; i < 100; i++) {
                 Message msg =
                         new Message("TopicTest", tags[i % tags.length], "KEY" + i,
                             ("Hello RocketMQ " + i).getBytes());

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/simple/PushConsumer.java
Patch:
@@ -25,11 +25,11 @@
 public class PushConsumer {
 
     public static void main(String[] args) throws InterruptedException, MQClientException {
-        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("example_consumer_group4");
+        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("example_consumer_group7");
 
         consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET_AND_FROM_MIN_WHEN_BOOT_FIRST);
 
-        consumer.subscribe("TopicTest", "TagA || TagC || TagD");
+        consumer.subscribe("TopicTest", "*");
 
         consumer.registerMessageListener(new MessageListenerConcurrently() {
             AtomicLong consumeTimes = new AtomicLong(0);
@@ -41,7 +41,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,
                 System.out.println("Receive New Messages: " + msgs);
                 // ģ������ʧ�����
                 if ((this.consumeTimes.getAndIncrement() % 2) == 0) {
-                    return ConsumeConcurrentlyStatus.RECONSUME_LATER;
+                    return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
                 }
 
                 return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/store/OffsetStore.java
Patch:
@@ -18,7 +18,7 @@ public interface OffsetStore {
     /**
      * �������ѽ��ȣ��洢���ڴ�
      */
-    public void updateOffset(final MessageQueue mq, final long offset);
+    public void updateOffset(final MessageQueue mq, final long offset, final boolean increaseOnly);
 
 
     /**

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java
Patch:
@@ -238,8 +238,9 @@ public void processConsumeResult(//
         }
 
         long offset = consumeRequest.getProcessQueue().removeMessage(consumeRequest.getMsgs());
-        if (offset > 0) {
-            this.defaultMQPushConsumerImpl.updateConsumeOffset(consumeRequest.getMessageQueue(), offset);
+        if (offset >= 0) {
+            this.defaultMQPushConsumerImpl.getOffsetStore().updateOffset(consumeRequest.getMessageQueue(),
+                offset, true);
         }
     }
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -305,8 +305,8 @@ public boolean processConsumeResult(//
         }
 
         if (commitOffset >= 0) {
-            this.defaultMQPushConsumerImpl
-                .updateConsumeOffset(consumeRequest.getMessageQueue(), commitOffset);
+            this.defaultMQPushConsumerImpl.getOffsetStore().updateOffset(consumeRequest.getMessageQueue(),
+                commitOffset, false);
         }
 
         return continueConsume;

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java
Patch:
@@ -482,7 +482,7 @@ public void start() throws MQClientException {
 
     public void updateConsumeOffset(MessageQueue mq, long offset) throws MQClientException {
         this.makeSureStateOK();
-        this.offsetStore.updateOffset(mq, offset);
+        this.offsetStore.updateOffset(mq, offset, false);
     }
 
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -489,7 +489,7 @@ else if (pullRequest.getNextOffset() > pullResult.getMaxOffset()) {
                         }
 
                         DefaultMQPushConsumerImpl.this.offsetStore.updateOffset(
-                            pullRequest.getMessageQueue(), pullRequest.getNextOffset());
+                            pullRequest.getMessageQueue(), pullRequest.getNextOffset(), false);
 
                         log.warn("fix the pull request offset, {}", pullRequest);
                         DefaultMQPushConsumerImpl.this.executePullRequestImmediately(pullRequest);
@@ -713,7 +713,7 @@ public void unsubscribe(String topic) {
 
 
     public void updateConsumeOffset(MessageQueue mq, long offset) {
-        this.offsetStore.updateOffset(mq, offset);
+        this.offsetStore.updateOffset(mq, offset, false);
     }
 
 

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/simple/PushConsumer.java
Patch:
@@ -27,9 +27,7 @@ public class PushConsumer {
     public static void main(String[] args) throws InterruptedException, MQClientException {
         DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("example_consumer_group4");
 
-        consumer.setMessageModel(MessageModel.BROADCASTING);
-
-        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_MIN_OFFSET);
+        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET_AND_FROM_MIN_WHEN_BOOT_FIRST);
 
         consumer.subscribe("TopicTest", "TagA || TagC || TagD");
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/store/OffsetStore.java
Patch:
@@ -18,7 +18,7 @@ public interface OffsetStore {
     /**
      * �������ѽ��ȣ��洢���ڴ�
      */
-    public void updateOffset(final MessageQueue mq, final long offset);
+    public void updateOffset(final MessageQueue mq, final long offset, final boolean increaseOnly);
 
 
     /**

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java
Patch:
@@ -238,8 +238,9 @@ public void processConsumeResult(//
         }
 
         long offset = consumeRequest.getProcessQueue().removeMessage(consumeRequest.getMsgs());
-        if (offset > 0) {
-            this.defaultMQPushConsumerImpl.updateConsumeOffset(consumeRequest.getMessageQueue(), offset);
+        if (offset >= 0) {
+            this.defaultMQPushConsumerImpl.getOffsetStore().updateOffset(consumeRequest.getMessageQueue(),
+                offset, true);
         }
     }
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java
Patch:
@@ -305,8 +305,8 @@ public boolean processConsumeResult(//
         }
 
         if (commitOffset >= 0) {
-            this.defaultMQPushConsumerImpl
-                .updateConsumeOffset(consumeRequest.getMessageQueue(), commitOffset);
+            this.defaultMQPushConsumerImpl.getOffsetStore().updateOffset(consumeRequest.getMessageQueue(),
+                commitOffset, false);
         }
 
         return continueConsume;

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java
Patch:
@@ -482,7 +482,7 @@ public void start() throws MQClientException {
 
     public void updateConsumeOffset(MessageQueue mq, long offset) throws MQClientException {
         this.makeSureStateOK();
-        this.offsetStore.updateOffset(mq, offset);
+        this.offsetStore.updateOffset(mq, offset, false);
     }
 
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -489,7 +489,7 @@ else if (pullRequest.getNextOffset() > pullResult.getMaxOffset()) {
                         }
 
                         DefaultMQPushConsumerImpl.this.offsetStore.updateOffset(
-                            pullRequest.getMessageQueue(), pullRequest.getNextOffset());
+                            pullRequest.getMessageQueue(), pullRequest.getNextOffset(), false);
 
                         log.warn("fix the pull request offset, {}", pullRequest);
                         DefaultMQPushConsumerImpl.this.executePullRequestImmediately(pullRequest);
@@ -713,7 +713,7 @@ public void unsubscribe(String topic) {
 
 
     public void updateConsumeOffset(MessageQueue mq, long offset) {
-        this.offsetStore.updateOffset(mq, offset);
+        this.offsetStore.updateOffset(mq, offset, false);
     }
 
 

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/simple/PushConsumer.java
Patch:
@@ -27,9 +27,7 @@ public class PushConsumer {
     public static void main(String[] args) throws InterruptedException, MQClientException {
         DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("example_consumer_group4");
 
-        consumer.setMessageModel(MessageModel.BROADCASTING);
-
-        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_MIN_OFFSET);
+        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET_AND_FROM_MIN_WHEN_BOOT_FIRST);
 
         consumer.subscribe("TopicTest", "TagA || TagC || TagD");
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -572,12 +572,12 @@ public void shutdown() {
         case CREATE_JUST:
             break;
         case RUNNING:
-            this.serviceState = ServiceState.SHUTDOWN_ALREADY;
             this.consumeMessageService.shutdown();
             this.persistConsumerOffset();
             this.mQClientFactory.unregisterConsumer(this.defaultMQPushConsumer.getConsumerGroup());
             this.mQClientFactory.shutdown();
             log.info("the consumer [{}] shutdown OK", this.defaultMQPushConsumer.getConsumerGroup());
+            this.serviceState = ServiceState.SHUTDOWN_ALREADY;
             break;
         case SHUTDOWN_ALREADY:
             break;

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -151,10 +151,10 @@ public void shutdown() {
         case CREATE_JUST:
             break;
         case RUNNING:
-            this.serviceState = ServiceState.SHUTDOWN_ALREADY;
             this.mQClientFactory.unregisterProducer(this.defaultMQProducer.getProducerGroup());
             this.mQClientFactory.shutdown();
             log.info("the producer [{}] shutdown OK", this.defaultMQProducer.getProducerGroup());
+            this.serviceState = ServiceState.SHUTDOWN_ALREADY;
             break;
         case SHUTDOWN_ALREADY:
             break;

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -572,12 +572,12 @@ public void shutdown() {
         case CREATE_JUST:
             break;
         case RUNNING:
-            this.serviceState = ServiceState.SHUTDOWN_ALREADY;
             this.consumeMessageService.shutdown();
             this.persistConsumerOffset();
             this.mQClientFactory.unregisterConsumer(this.defaultMQPushConsumer.getConsumerGroup());
             this.mQClientFactory.shutdown();
             log.info("the consumer [{}] shutdown OK", this.defaultMQPushConsumer.getConsumerGroup());
+            this.serviceState = ServiceState.SHUTDOWN_ALREADY;
             break;
         case SHUTDOWN_ALREADY:
             break;

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/producer/DefaultMQProducerImpl.java
Patch:
@@ -151,10 +151,10 @@ public void shutdown() {
         case CREATE_JUST:
             break;
         case RUNNING:
-            this.serviceState = ServiceState.SHUTDOWN_ALREADY;
             this.mQClientFactory.unregisterProducer(this.defaultMQProducer.getProducerGroup());
             this.mQClientFactory.shutdown();
             log.info("the producer [{}] shutdown OK", this.defaultMQProducer.getProducerGroup());
+            this.serviceState = ServiceState.SHUTDOWN_ALREADY;
             break;
         case SHUTDOWN_ALREADY:
             break;

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/store/RemoteBrokerOffsetStore.java
Patch:
@@ -125,11 +125,11 @@ public long readOffset(MessageQueue mq, boolean fromStore) {
                 }
                 // ��ǰ�������ڷ�����û�ж�Ӧ��Offset
                 catch (MQBrokerException e) {
-                    log.warn("fetchConsumeOffsetFromBroker exception, " + mq, e);
                     return -1;
                 }
                 // ����ͨ�Ŵ���
                 catch (Exception e) {
+                    log.warn("fetchConsumeOffsetFromBroker exception, " + mq, e);
                     return -2;
                 }
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/store/RemoteBrokerOffsetStore.java
Patch:
@@ -125,11 +125,11 @@ public long readOffset(MessageQueue mq, boolean fromStore) {
                 }
                 // ��ǰ�������ڷ�����û�ж�Ӧ��Offset
                 catch (MQBrokerException e) {
-                    log.warn("fetchConsumeOffsetFromBroker exception, " + mq, e);
                     return -1;
                 }
                 // ����ͨ�Ŵ���
                 catch (Exception e) {
+                    log.warn("fetchConsumeOffsetFromBroker exception, " + mq, e);
                     return -2;
                 }
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/PullMessageService.java
Patch:
@@ -89,6 +89,8 @@ public void run() {
                     this.pullMessage(pullRequest);
                 }
             }
+            catch (InterruptedException e) {
+            }
             catch (Exception e) {
                 log.error("Pull Message Service Run Method exception", e);
             }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/PullMessageService.java
Patch:
@@ -89,6 +89,8 @@ public void run() {
                     this.pullMessage(pullRequest);
                 }
             }
+            catch (InterruptedException e) {
+            }
             catch (Exception e) {
                 log.error("Pull Message Service Run Method exception", e);
             }

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/ClientManageProcessor.java
Patch:
@@ -161,8 +161,8 @@ public RemotingCommand heartBeat(ChannelHandlerContext ctx, RemotingCommand requ
 
             log.debug("registerConsumer {} {} CHANGED: {}",//
                 data.toString(),//
-                changed,//
-                RemotingHelper.parseChannelRemoteAddr(ctx.channel())//
+                RemotingHelper.parseChannelRemoteAddr(ctx.channel()),//
+                changed//
             );
         }
 

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/ClientManageProcessor.java
Patch:
@@ -161,8 +161,8 @@ public RemotingCommand heartBeat(ChannelHandlerContext ctx, RemotingCommand requ
 
             log.debug("registerConsumer {} {} CHANGED: {}",//
                 data.toString(),//
-                changed,//
-                RemotingHelper.parseChannelRemoteAddr(ctx.channel())//
+                RemotingHelper.parseChannelRemoteAddr(ctx.channel()),//
+                changed//
             );
         }
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -147,7 +147,7 @@ else if (this.defaultMQPushConsumer.getMessageListener() instanceof MessageListe
 
         this.updateTopicSubscribeInfoWhenSubscriptionChanged();
 
-        this.mQClientFactory.sendHeartbeatToAllBroker();
+        this.mQClientFactory.sendHeartbeatToAllBrokerWithLock();
 
         this.mQClientFactory.rebalanceImmediately();
     }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/factory/MQClientFactory.java
Patch:
@@ -379,7 +379,7 @@ private HeartbeatData prepareHeartbeatData() {
     }
 
 
-    private void sendHeartbeatToAllBrokerWithLock() {
+    public void sendHeartbeatToAllBrokerWithLock() {
         if (this.lockHeartbeat.tryLock()) {
             try {
                 this.sendHeartbeatToAllBroker();
@@ -397,7 +397,7 @@ private void sendHeartbeatToAllBrokerWithLock() {
     }
 
 
-    public void sendHeartbeatToAllBroker() {
+    private void sendHeartbeatToAllBroker() {
         final HeartbeatData heartbeatData = this.prepareHeartbeatData();
         final boolean producerEmpty = heartbeatData.getProducerDataSet().isEmpty();
         final boolean consumerEmpty = heartbeatData.getConsumerDataSet().isEmpty();

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
Patch:
@@ -147,7 +147,7 @@ else if (this.defaultMQPushConsumer.getMessageListener() instanceof MessageListe
 
         this.updateTopicSubscribeInfoWhenSubscriptionChanged();
 
-        this.mQClientFactory.sendHeartbeatToAllBroker();
+        this.mQClientFactory.sendHeartbeatToAllBrokerWithLock();
 
         this.mQClientFactory.rebalanceImmediately();
     }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/factory/MQClientFactory.java
Patch:
@@ -379,7 +379,7 @@ private HeartbeatData prepareHeartbeatData() {
     }
 
 
-    private void sendHeartbeatToAllBrokerWithLock() {
+    public void sendHeartbeatToAllBrokerWithLock() {
         if (this.lockHeartbeat.tryLock()) {
             try {
                 this.sendHeartbeatToAllBroker();
@@ -397,7 +397,7 @@ private void sendHeartbeatToAllBrokerWithLock() {
     }
 
 
-    public void sendHeartbeatToAllBroker() {
+    private void sendHeartbeatToAllBroker() {
         final HeartbeatData heartbeatData = this.prepareHeartbeatData();
         final boolean producerEmpty = heartbeatData.getProducerDataSet().isEmpty();
         final boolean consumerEmpty = heartbeatData.getConsumerDataSet().isEmpty();

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/MQConsumerInner.java
Patch:
@@ -27,5 +27,5 @@ public interface MQConsumerInner {
     public Set<SubscriptionData> getMQSubscriptions();
 
 
-    public void uploadConsumerOffsetsToBroker();
+    public void persistConsumerOffset();
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/MQConsumerInner.java
Patch:
@@ -27,5 +27,5 @@ public interface MQConsumerInner {
     public Set<SubscriptionData> getMQSubscriptions();
 
 
-    public void uploadConsumerOffsetsToBroker();
+    public void persistConsumerOffset();
 }

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/DefaultMQPushConsumer.java
Patch:
@@ -23,7 +23,8 @@
 
 
 /**
- * ������Broker Push��Ϣ��Consumer��ʽ����ʵ����Ȼ��Consumer�ڲ���̨��Broker Pull��Ϣ
+ * ������Broker Push��Ϣ��Consumer��ʽ����ʵ����Ȼ��Consumer�ڲ���̨��Broker Pull��Ϣ<br>
+ * ���ó���ѯ��ʽ����Ϣ��ʵʱ��ͬpush��ʽһ�£��Ҳ�����ν������Ϣ����Brokerѹ������
  * 
  * @author shijia.wxr<vintage.wang@gmail.com>
  * 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/DefaultMQPushConsumer.java
Patch:
@@ -23,7 +23,8 @@
 
 
 /**
- * ������Broker Push��Ϣ��Consumer��ʽ����ʵ����Ȼ��Consumer�ڲ���̨��Broker Pull��Ϣ
+ * ������Broker Push��Ϣ��Consumer��ʽ����ʵ����Ȼ��Consumer�ڲ���̨��Broker Pull��Ϣ<br>
+ * ���ó���ѯ��ʽ����Ϣ��ʵʱ��ͬpush��ʽһ�£��Ҳ�����ν������Ϣ����Brokerѹ������
  * 
  * @author shijia.wxr<vintage.wang@gmail.com>
  * 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/factory/MQClientFactory.java
Patch:
@@ -37,6 +37,7 @@
 import com.alibaba.rocketmq.common.MixAll;
 import com.alibaba.rocketmq.common.MessageQueue;
 import com.alibaba.rocketmq.common.ServiceState;
+import com.alibaba.rocketmq.common.help.FAQUrl;
 import com.alibaba.rocketmq.common.protocol.heartbeat.ConsumerData;
 import com.alibaba.rocketmq.common.protocol.heartbeat.HeartbeatData;
 import com.alibaba.rocketmq.common.protocol.heartbeat.ProducerData;
@@ -140,8 +141,8 @@ private void makesureInstanceNameIsOnly(final String instanceName) throws MQClie
             this.datagramSocket = new DatagramSocket(udpPort);
         }
         catch (SocketException e) {
-            throw new MQClientException(
-                "instance name is a duplicate one[" + udpPort + "], please set a new name", e);
+            throw new MQClientException("instance name is a duplicate one[" + udpPort
+                    + "], please set a new name\n" + FAQUrl.CLIENT_INSTACNCE_NAME_DUPLICATE_URL, e);
         }
     }
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/factory/MQClientFactory.java
Patch:
@@ -37,6 +37,7 @@
 import com.alibaba.rocketmq.common.MixAll;
 import com.alibaba.rocketmq.common.MessageQueue;
 import com.alibaba.rocketmq.common.ServiceState;
+import com.alibaba.rocketmq.common.help.FAQUrl;
 import com.alibaba.rocketmq.common.protocol.heartbeat.ConsumerData;
 import com.alibaba.rocketmq.common.protocol.heartbeat.HeartbeatData;
 import com.alibaba.rocketmq.common.protocol.heartbeat.ProducerData;
@@ -140,8 +141,8 @@ private void makesureInstanceNameIsOnly(final String instanceName) throws MQClie
             this.datagramSocket = new DatagramSocket(udpPort);
         }
         catch (SocketException e) {
-            throw new MQClientException(
-                "instance name is a duplicate one[" + udpPort + "], please set a new name", e);
+            throw new MQClientException("instance name is a duplicate one[" + udpPort
+                    + "], please set a new name\n" + FAQUrl.CLIENT_INSTACNCE_NAME_DUPLICATE_URL, e);
         }
     }
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/MQClientConfig.java
Patch:
@@ -20,7 +20,7 @@ public class MQClientConfig {
     private String logFileName = defaultClientLogFileName();
     private String logLevel = "INFO";
     private String clientIP = RemotingUtil.getLocalAddress();
-    private String instanceName = System.getProperty("rocketmq.client.id", "DEFAULT");
+    private String instanceName = System.getProperty("rocketmq.client.name", "DEFAULT");
     private int clientCallbackExecutorThreads = 5;
     private int pollNameServerInteval = 1000 * 30;
     private int heartbeatBrokerInterval = 1000 * 30;

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/producer/TransactionCheckListener.java
Patch:
@@ -10,7 +10,6 @@
  * �������ص�Producer����鱾�������֧�ɹ�����ʧ��
  * 
  * @author shijia.wxr<vintage.wang@gmail.com>
- * 
  */
 public interface TransactionCheckListener {
     public LocalTransactionState checkLocalTransactionState(final MessageExt msg);

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/MQClientConfig.java
Patch:
@@ -20,7 +20,7 @@ public class MQClientConfig {
     private String logFileName = defaultClientLogFileName();
     private String logLevel = "INFO";
     private String clientIP = RemotingUtil.getLocalAddress();
-    private String instanceName = System.getProperty("rocketmq.client.id", "DEFAULT");
+    private String instanceName = System.getProperty("rocketmq.client.name", "DEFAULT");
     private int clientCallbackExecutorThreads = 5;
     private int pollNameServerInteval = 1000 * 30;
     private int heartbeatBrokerInterval = 1000 * 30;

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/producer/TransactionCheckListener.java
Patch:
@@ -10,7 +10,6 @@
  * �������ص�Producer����鱾�������֧�ɹ�����ʧ��
  * 
  * @author shijia.wxr<vintage.wang@gmail.com>
- * 
  */
 public interface TransactionCheckListener {
     public LocalTransactionState checkLocalTransactionState(final MessageExt msg);

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/MQClientConfig.java
Patch:
@@ -20,7 +20,7 @@ public class MQClientConfig {
     private String logFileName = defaultClientLogFileName();
     private String logLevel = "INFO";
     private String clientIP = RemotingUtil.getLocalAddress();
-    private String instanceName = "DEFAULT";
+    private String instanceName = System.getProperty("rocketmq.client.id", "DEFAULT");
     private int clientCallbackExecutorThreads = 5;
     private int pollNameServerInteval = 1000 * 30;
     private int heartbeatBrokerInterval = 1000 * 30;

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/MQClientConfig.java
Patch:
@@ -20,7 +20,7 @@ public class MQClientConfig {
     private String logFileName = defaultClientLogFileName();
     private String logLevel = "INFO";
     private String clientIP = RemotingUtil.getLocalAddress();
-    private String instanceName = "DEFAULT";
+    private String instanceName = System.getProperty("rocketmq.client.id", "DEFAULT");
     private int clientCallbackExecutorThreads = 5;
     private int pollNameServerInteval = 1000 * 30;
     private int heartbeatBrokerInterval = 1000 * 30;

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/factory/MQClientFactory.java
Patch:
@@ -123,7 +123,7 @@ public MQClientFactory(MQClientConfig mQClientConfig, int factoryIndex) {
 
         this.mQAdminImpl = new MQAdminImpl(this);
 
-        log.info("created a new client fatory, ", this.factoryIndex);
+        log.info("created a new client fatory, FactoryIndex: {} ClinetID: {}", this.factoryIndex, this.clientId);
     }
 
 
@@ -141,7 +141,7 @@ private void makesureInstanceNameIsOnly(final String instanceName) throws MQClie
             this.datagramSocket = new DatagramSocket(udpPort);
         }
         catch (SocketException e) {
-            throw new MQClientException("instance name is a duplicate one, please set a new name", null);
+            throw new MQClientException("instance name is a duplicate one, please set a new name", e);
         }
     }
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/factory/MQClientFactory.java
Patch:
@@ -123,7 +123,7 @@ public MQClientFactory(MQClientConfig mQClientConfig, int factoryIndex) {
 
         this.mQAdminImpl = new MQAdminImpl(this);
 
-        log.info("created a new client fatory, ", this.factoryIndex);
+        log.info("created a new client fatory, FactoryIndex: {} ClinetID: {}", this.factoryIndex, this.clientId);
     }
 
 
@@ -141,7 +141,7 @@ private void makesureInstanceNameIsOnly(final String instanceName) throws MQClie
             this.datagramSocket = new DatagramSocket(udpPort);
         }
         catch (SocketException e) {
-            throw new MQClientException("instance name is a duplicate one, please set a new name", null);
+            throw new MQClientException("instance name is a duplicate one, please set a new name", e);
         }
     }
 

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/ClientRemotingProcessor.java
Patch:
@@ -64,6 +64,7 @@ private void processTransactionState(//
         thisHeader.setCommitLogOffset(requestHeader.getCommitLogOffset());
         thisHeader.setProducerGroup(producerGroup);
         thisHeader.setTranStateTableOffset(requestHeader.getTranStateTableOffset());
+        thisHeader.setFromTransactionCheck(true);
         switch (localTransactionState) {
         case COMMIT_MESSAGE:
             thisHeader.setCommitOrRollback(MessageSysFlag.TransactionCommitType);

File: rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/ClientRemotingProcessor.java
Patch:
@@ -64,6 +64,7 @@ private void processTransactionState(//
         thisHeader.setCommitLogOffset(requestHeader.getCommitLogOffset());
         thisHeader.setProducerGroup(producerGroup);
         thisHeader.setTranStateTableOffset(requestHeader.getTranStateTableOffset());
+        thisHeader.setFromTransactionCheck(true);
         switch (localTransactionState) {
         case COMMIT_MESSAGE:
             thisHeader.setCommitOrRollback(MessageSysFlag.TransactionCommitType);

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -418,7 +418,7 @@ private Channel createChannel(final String addr) throws InterruptedException {
                     }
                 }
                 else {
-                    log.error("connect {} in {}ms timeout", addr, this.nettyClientConfig.getConnectTimeoutMillis()); channel.close().sync();
+                    log.error("connect {} in {}ms timeout", addr, this.nettyClientConfig.getConnectTimeoutMillis()); 
                     channel.close().sync();
                     return null;
                 }

File: rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRemotingClient.java
Patch:
@@ -418,7 +418,7 @@ private Channel createChannel(final String addr) throws InterruptedException {
                     }
                 }
                 else {
-                    log.error("connect {} in {}ms timeout", addr, this.nettyClientConfig.getConnectTimeoutMillis()); channel.close().sync();
+                    log.error("connect {} in {}ms timeout", addr, this.nettyClientConfig.getConnectTimeoutMillis()); 
                     channel.close().sync();
                     return null;
                 }

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/transaction/TransactionProducer.java
Patch:
@@ -24,7 +24,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
 
         String[] tags = new String[] { "TagA", "TagB", "TagC", "TagD", "TagE" };
         TransactionExecuterImpl tranExecuter = new TransactionExecuterImpl();
-        for (int i = 0; i < 100; i++) {
+        for (int i = 0; i < 1000; i++) {
             try {
                 Message msg =
                         new Message("TopicTest", tags[i % tags.length], "KEY" + i,

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/transaction/TransactionProducer.java
Patch:
@@ -24,7 +24,7 @@ public static void main(String[] args) throws MQClientException, InterruptedExce
 
         String[] tags = new String[] { "TagA", "TagB", "TagC", "TagD", "TagE" };
         TransactionExecuterImpl tranExecuter = new TransactionExecuterImpl();
-        for (int i = 0; i < 100; i++) {
+        for (int i = 0; i < 1000; i++) {
             try {
                 Message msg =
                         new Message("TopicTest", tags[i % tags.length], "KEY" + i,

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/transaction/TransactionCheckListenerImpl.java
Patch:
@@ -8,7 +8,7 @@
 
 
 public class TransactionCheckListenerImpl implements TransactionCheckListener {
-    private AtomicInteger transactionIndex = new AtomicInteger(1);
+    private AtomicInteger transactionIndex = new AtomicInteger(0);
 
 
     @Override
@@ -19,10 +19,10 @@ public LocalTransactionState checkLocalTransactionState(MessageExt msg) {
         if (value == 0) {
             throw new RuntimeException("Could not find db");
         }
-        else if ((value % 2) == 0) {
+        else if ((value % 5) == 0) {
             return LocalTransactionState.ROLLBACK_MESSAGE;
         }
-        else if ((value % 3) == 0) {
+        else if ((value % 4) == 0) {
             return LocalTransactionState.COMMIT_MESSAGE;
         }
 

File: rocketmq-example/src/main/java/com/alibaba/rocketmq/example/transaction/TransactionCheckListenerImpl.java
Patch:
@@ -8,7 +8,7 @@
 
 
 public class TransactionCheckListenerImpl implements TransactionCheckListener {
-    private AtomicInteger transactionIndex = new AtomicInteger(1);
+    private AtomicInteger transactionIndex = new AtomicInteger(0);
 
 
     @Override
@@ -19,10 +19,10 @@ public LocalTransactionState checkLocalTransactionState(MessageExt msg) {
         if (value == 0) {
             throw new RuntimeException("Could not find db");
         }
-        else if ((value % 2) == 0) {
+        else if ((value % 5) == 0) {
             return LocalTransactionState.ROLLBACK_MESSAGE;
         }
-        else if ((value % 3) == 0) {
+        else if ((value % 4) == 0) {
             return LocalTransactionState.COMMIT_MESSAGE;
         }
 

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/CommitLog.java
Patch:
@@ -709,7 +709,7 @@ public DispatchRequest checkMessageAndReturnSize(java.nio.ByteBuffer byteBuffer,
                 sysFlag,// 9
                 0L,// 10
                 preparedTransactionOffset,// 11
-                ""// 12
+                null// 12
             );
         }
         catch (BufferUnderflowException e) {

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DispatchRequest.java
Patch:
@@ -43,6 +43,9 @@ public DispatchRequest(//
             final long tranStateTableOffset,// 10
             final long preparedTransactionOffset,// 11
             final String producerGroup// 12
+                                      // ���producerGroupΪ�գ���ʾ��recover���̣����Բ�����
+                                      // Transaction state
+                                      // table
     ) {
         this.topic = topic;
         this.queueId = queueId;

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/MQAdminStartup.java
Patch:
@@ -23,10 +23,10 @@ public class MQAdminStartup {
 
 
     private static void printHelp() {
-        System.out.println("The most commonly used mqadmin commands are:\n");
+        System.out.println("The most commonly used mqadmin commands are:");
 
         for (SubCommand cmd : subCommandList) {
-            System.out.printf("   %-16s %s\n", cmd.commandName(), cmd.commandDesc());
+            System.out.printf("   %-12s %s\n", cmd.commandName(), cmd.commandDesc());
         }
 
         System.out.println("\nSee 'mqadmin help <command>' for more information on a specific command.");

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/CommitLog.java
Patch:
@@ -709,7 +709,7 @@ public DispatchRequest checkMessageAndReturnSize(java.nio.ByteBuffer byteBuffer,
                 sysFlag,// 9
                 0L,// 10
                 preparedTransactionOffset,// 11
-                ""// 12
+                null// 12
             );
         }
         catch (BufferUnderflowException e) {

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DispatchRequest.java
Patch:
@@ -43,6 +43,9 @@ public DispatchRequest(//
             final long tranStateTableOffset,// 10
             final long preparedTransactionOffset,// 11
             final String producerGroup// 12
+                                      // ���producerGroupΪ�գ���ʾ��recover���̣����Բ�����
+                                      // Transaction state
+                                      // table
     ) {
         this.topic = topic;
         this.queueId = queueId;

File: rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/MQAdminStartup.java
Patch:
@@ -23,10 +23,10 @@ public class MQAdminStartup {
 
 
     private static void printHelp() {
-        System.out.println("The most commonly used mqadmin commands are:\n");
+        System.out.println("The most commonly used mqadmin commands are:");
 
         for (SubCommand cmd : subCommandList) {
-            System.out.printf("   %-16s %s\n", cmd.commandName(), cmd.commandDesc());
+            System.out.printf("   %-12s %s\n", cmd.commandName(), cmd.commandDesc());
         }
 
         System.out.println("\nSee 'mqadmin help <command>' for more information on a specific command.");

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MixAll.java
Patch:
@@ -53,8 +53,8 @@ public class MixAll {
 
     public static final String ROCKETMQ_HOME_ENV = "ROCKETMQ_HOME";
     public static final String WS_DOMAIN_NAME = "diamondserver.tbsite.net";
-    // http://diamondserver.tbsite.net:8080/metaq/nsaddr
-    public static final String WS_ADDR = "http://" + WS_DOMAIN_NAME + ":8080/metaq/nsaddr";
+    // http://diamondserver.tbsite.net:8080/rocketmq/nsaddr
+    public static final String WS_ADDR = "http://" + WS_DOMAIN_NAME + ":8080/rocketmq/nsaddr";
     public static final String DEFAULT_TOPIC = "TBW102";
     public static final String DEFAULT_PRODUCER_GROUP = "DEFAULT_PRODUCER";
     public static final String DEFAULT_CONSUMER_GROUP = "DEFAULT_CONSUMER";

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MixAll.java
Patch:
@@ -53,8 +53,8 @@ public class MixAll {
 
     public static final String ROCKETMQ_HOME_ENV = "ROCKETMQ_HOME";
     public static final String WS_DOMAIN_NAME = "diamondserver.tbsite.net";
-    // http://diamondserver.tbsite.net:8080/metaq/nsaddr
-    public static final String WS_ADDR = "http://" + WS_DOMAIN_NAME + ":8080/metaq/nsaddr";
+    // http://diamondserver.tbsite.net:8080/rocketmq/nsaddr
+    public static final String WS_ADDR = "http://" + WS_DOMAIN_NAME + ":8080/rocketmq/nsaddr";
     public static final String DEFAULT_TOPIC = "TBW102";
     public static final String DEFAULT_PRODUCER_GROUP = "DEFAULT_PRODUCER";
     public static final String DEFAULT_CONSUMER_GROUP = "DEFAULT_CONSUMER";

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MixAll.java
Patch:
@@ -65,6 +65,7 @@ public class MixAll {
     public static final String ToolsLoggerName = "RocketmqTools";
     public static final String CommonLoggerName = "RocketmqCommon";
     public static final String StoreLoggerName = "RocketmqStore";
+    public static final String TransactionLoggerName = "RocketmqTransaction";
     public static final long TotalPhysicalMemorySize = getTotalPhysicalMemorySize();
     public static final List<String> LocalInetAddrs = getLocalInetAddress();
     public static final String Localhost = localhost();

File: rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MixAll.java
Patch:
@@ -65,6 +65,7 @@ public class MixAll {
     public static final String ToolsLoggerName = "RocketmqTools";
     public static final String CommonLoggerName = "RocketmqCommon";
     public static final String StoreLoggerName = "RocketmqStore";
+    public static final String TransactionLoggerName = "RocketmqTransaction";
     public static final long TotalPhysicalMemorySize = getTotalPhysicalMemorySize();
     public static final List<String> LocalInetAddrs = getLocalInetAddress();
     public static final String Localhost = localhost();

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerController.java
Patch:
@@ -281,7 +281,7 @@ public void registerProcessor() {
         NettyRequestProcessor clientProcessor = new ClientManageProcessor(this);
         this.remotingServer.registerProcessor(MQProtos.MQRequestCode.HEART_BEAT_VALUE, clientProcessor,
             this.adminBrokerExecutor);
-        this.remotingServer.registerProcessor(MQProtos.MQRequestCode.UNREGISTER_CLIENT_VALUE, queryProcessor,
+        this.remotingServer.registerProcessor(MQProtos.MQRequestCode.UNREGISTER_CLIENT_VALUE, clientProcessor,
             this.adminBrokerExecutor);
 
         this.remotingServer.registerProcessor(MQProtos.MQRequestCode.END_TRANSACTION_VALUE,

File: rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/BrokerController.java
Patch:
@@ -281,7 +281,7 @@ public void registerProcessor() {
         NettyRequestProcessor clientProcessor = new ClientManageProcessor(this);
         this.remotingServer.registerProcessor(MQProtos.MQRequestCode.HEART_BEAT_VALUE, clientProcessor,
             this.adminBrokerExecutor);
-        this.remotingServer.registerProcessor(MQProtos.MQRequestCode.UNREGISTER_CLIENT_VALUE, queryProcessor,
+        this.remotingServer.registerProcessor(MQProtos.MQRequestCode.UNREGISTER_CLIENT_VALUE, clientProcessor,
             this.adminBrokerExecutor);
 
         this.remotingServer.registerProcessor(MQProtos.MQRequestCode.END_TRANSACTION_VALUE,

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/MapedFileQueue.java
Patch:
@@ -132,6 +132,9 @@ public boolean load() {
      * ˢ�̽�������˶���
      */
     public long howMuchFallBehind() {
+        if (this.mapedFiles.isEmpty())
+            return 0;
+
         long committed = this.committedWhere;
         if (committed != 0) {
             MapedFile mapedFile = this.getLastMapedFile();

File: rocketmq-store/src/main/java/com/alibaba/rocketmq/store/MapedFileQueue.java
Patch:
@@ -132,6 +132,9 @@ public boolean load() {
      * ˢ�̽�������˶���
      */
     public long howMuchFallBehind() {
+        if (this.mapedFiles.isEmpty())
+            return 0;
+
         long committed = this.committedWhere;
         if (committed != 0) {
             MapedFile mapedFile = this.getLastMapedFile();

