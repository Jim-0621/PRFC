File: sample/src/main/java/com/github/chrisbanes/photoview/sample/ActivityTransitionToActivity.java
Patch:
@@ -1,8 +1,9 @@
 package com.github.chrisbanes.photoview.sample;
 
 import android.os.Bundle;
-import android.support.annotation.Nullable;
-import android.support.v7.app.AppCompatActivity;
+
+import androidx.annotation.Nullable;
+import androidx.appcompat.app.AppCompatActivity;
 
 /**
  * Activity that gets transitioned to

File: sample/src/main/java/com/github/chrisbanes/photoview/sample/HackyDrawerLayout.java
Patch:
@@ -1,9 +1,10 @@
 package com.github.chrisbanes.photoview.sample;
 
 import android.content.Context;
-import android.support.v4.widget.DrawerLayout;
 import android.view.MotionEvent;
 
+import androidx.drawerlayout.widget.DrawerLayout;
+
 /**
  * Hacky fix for Issue #4 and
  * http://code.google.com/p/android/issues/detail?id=18990

File: sample/src/main/java/com/github/chrisbanes/photoview/sample/HackyViewPager.java
Patch:
@@ -1,10 +1,11 @@
 package com.github.chrisbanes.photoview.sample;
 
 import android.content.Context;
-import android.support.v4.view.ViewPager;
 import android.util.AttributeSet;
 import android.view.MotionEvent;
 
+import androidx.viewpager.widget.ViewPager;
+
 /**
  * Hacky fix for Issue #4 and
  * http://code.google.com/p/android/issues/detail?id=18990

File: sample/src/main/java/com/github/chrisbanes/photoview/sample/ImageAdapter.java
Patch:
@@ -1,9 +1,10 @@
 package com.github.chrisbanes.photoview.sample;
 
-import android.support.v7.widget.RecyclerView;
 import android.view.View;
 import android.view.ViewGroup;
 
+import androidx.recyclerview.widget.RecyclerView;
+
 /**
  * Image adapter
  */

File: sample/src/main/java/com/github/chrisbanes/photoview/sample/ImageViewHolder.java
Patch:
@@ -1,11 +1,12 @@
 package com.github.chrisbanes.photoview.sample;
 
-import android.support.v7.widget.RecyclerView;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.TextView;
 
+import androidx.recyclerview.widget.RecyclerView;
+
 /**
  * Image in recyclerview
  */

File: sample/src/main/java/com/github/chrisbanes/photoview/sample/ImmersiveActivity.java
Patch:
@@ -2,8 +2,6 @@
 
 import android.os.Build;
 import android.os.Bundle;
-import android.support.annotation.Nullable;
-import android.support.v7.app.AppCompatActivity;
 import android.util.Log;
 import android.view.View;
 import android.widget.ImageView;
@@ -12,12 +10,14 @@
 import com.github.chrisbanes.photoview.PhotoView;
 import com.squareup.picasso.Picasso;
 
+import androidx.annotation.Nullable;
+import androidx.appcompat.app.AppCompatActivity;
+
 import static android.R.attr.uiOptions;
 
 /**
  * Shows immersive image viewer
  */
-
 public class ImmersiveActivity extends AppCompatActivity {
 
     @Override

File: sample/src/main/java/com/github/chrisbanes/photoview/sample/PicassoSampleActivity.java
Patch:
@@ -1,11 +1,11 @@
 package com.github.chrisbanes.photoview.sample;
 
 import android.os.Bundle;
-import android.support.v7.app.AppCompatActivity;
 
 import com.github.chrisbanes.photoview.PhotoView;
 import com.squareup.picasso.Picasso;
 
+import androidx.appcompat.app.AppCompatActivity;
 
 public class PicassoSampleActivity extends AppCompatActivity {
 

File: photoview/src/main/java/com/github/chrisbanes/photoview/PhotoViewAttacher.java
Patch:
@@ -137,7 +137,7 @@ public void onFling(float startX, float startY, float velocityX, float velocityY
 
         @Override
         public void onScale(float scaleFactor, float focusX, float focusY) {
-            if ((getScale() < mMaxScale || scaleFactor < 1f) && (getScale() > mMinScale || scaleFactor > 1f)) {
+            if (getScale() < mMaxScale || scaleFactor < 1f) {
                 if (mScaleChangeListener != null) {
                     mScaleChangeListener.onScaleChange(scaleFactor, focusX, focusY);
                 }

File: photoview/src/main/java/com/github/chrisbanes/photoview/PhotoViewAttacher.java
Patch:
@@ -181,7 +181,7 @@ public boolean onFling(MotionEvent e1, MotionEvent e2,
                     }
 
                     if (e1.getPointerCount() > SINGLE_TOUCH
-                            || e1.getPointerCount() > SINGLE_TOUCH) {
+                            || e2.getPointerCount() > SINGLE_TOUCH) {
                         return false;
                     }
 

File: photoview/src/main/java/com/github/chrisbanes/photoview/PhotoViewAttacher.java
Patch:
@@ -181,7 +181,7 @@ public boolean onFling(MotionEvent e1, MotionEvent e2,
                     }
 
                     if (e1.getPointerCount() > SINGLE_TOUCH
-                            || e1.getPointerCount() > SINGLE_TOUCH) {
+                            || e2.getPointerCount() > SINGLE_TOUCH) {
                         return false;
                     }
 

File: photoview/src/main/java/com/github/chrisbanes/photoview/PhotoViewAttacher.java
Patch:
@@ -290,8 +290,7 @@ public boolean setDisplayMatrix(Matrix finalMatrix) {
         }
 
         mSuppMatrix.set(finalMatrix);
-        setImageViewMatrix(getDrawMatrix());
-        checkMatrixBounds();
+        checkAndDisplayMatrix();
 
         return true;
     }

File: photoview/src/main/java/com/github/chrisbanes/photoview/PhotoViewAttacher.java
Patch:
@@ -851,7 +851,7 @@ public void run() {
                 final int newY = mScroller.getCurrY();
 
                 mSuppMatrix.postTranslate(mCurrentX - newX, mCurrentY - newY);
-                setImageViewMatrix(getDrawMatrix());
+                checkAndDisplayMatrix();
 
                 mCurrentX = newX;
                 mCurrentY = newY;

File: photoview/src/main/java/com/github/chrisbanes/photoview/PhotoViewAttacher.java
Patch:
@@ -277,7 +277,7 @@ public void onDrag(float dx, float dy) {
         mSuppMatrix.postTranslate(dx, dy);
         checkAndDisplayMatrix();
 
-        /**
+        /*
          * Here we decide whether to let the ImageView's parent to start taking
          * over the touch event.
          *

File: sample/src/main/java/uk/co/senab/photoview/sample/SimpleSampleActivity.java
Patch:
@@ -154,6 +154,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
                     mAttacher.setDisplayMatrix(mCurrentDisplayMatrix);
                 return true;
             case R.id.menu_matrix_capture:
+                mCurrentDisplayMatrix = new Matrix();
                 mAttacher.getDisplayMatrix(mCurrentDisplayMatrix);
                 return true;
             case R.id.extract_visible_bitmap:

File: library/src/main/java/uk/co/senab/photoview/PhotoView.java
Patch:
@@ -255,6 +255,7 @@ public void setOnSingleFlingListener(PhotoViewAttacher.OnSingleFlingListener onS
     @Override
     protected void onDetachedFromWindow() {
         mAttacher.cleanup();
+        mAttacher = null;
         super.onDetachedFromWindow();
     }
 

File: library/src/main/java/uk/co/senab/photoview/PhotoViewAttacher.java
Patch:
@@ -758,7 +758,7 @@ private void checkImageViewScaleType() {
         if (null != imageView && !(imageView instanceof IPhotoView)) {
             if (!ScaleType.MATRIX.equals(imageView.getScaleType())) {
                 throw new IllegalStateException(
-                        "The ImageView's ScaleType has been changed since attaching a PhotoViewAttacher");
+                        "The ImageView's ScaleType has been changed since attaching a PhotoViewAttacher. You should call setScaleType on the PhotoViewAttacher instead of on the ImageView"  );
             }
         }
     }

File: sample/src/main/java/uk/co/senab/photoview/sample/LauncherActivity.java
Patch:
@@ -48,7 +48,7 @@ protected void onListItemClick(ListView l, View v, int position, long id) {
                 c = RotationSampleActivity.class;
                 break;
             case 3:
-                c = AUILSampleActivity.class;
+                c = PicassoSampleActivity.class;
                 break;
         }
 

File: sample/src/main/java/uk/co/senab/photoview/sample/PicassoSampleActivity.java
Patch:
@@ -7,7 +7,7 @@
 
 import uk.co.senab.photoview.PhotoView;
 
-public class AUILSampleActivity extends AppCompatActivity {
+public class PicassoSampleActivity extends AppCompatActivity {
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {

File: library/src/main/java/uk/co/senab/photoview/IPhotoView.java
Patch:
@@ -116,7 +116,6 @@ public interface IPhotoView {
 
     /**
      * Return the current scale type in use by the ImageView.
-     * Â     *
      *
      * @return current ImageView.ScaleType
      */

File: library/src/main/java/uk/co/senab/photoview/PhotoView.java
Patch:
@@ -50,7 +50,9 @@ public PhotoView(Context context, AttributeSet attr, int defStyle) {
     }
 
     protected void init() {
-        mAttacher = new PhotoViewAttacher(this);
+        if (null == mAttacher || null == mAttacher.getImageView()) {
+            mAttacher = new PhotoViewAttacher(this);
+        }
 
         if (null != mPendingScaleType) {
             setScaleType(mPendingScaleType);

File: library/src/main/java/uk/co/senab/photoview/gestures/GestureDetector.java
Patch:
@@ -23,6 +23,8 @@ public interface GestureDetector {
 
     public boolean isScaling();
 
+    public boolean isDragging();
+
     public void setOnGestureListener(OnGestureListener listener);
 
 }

File: library/src/main/java/uk/co/senab/photoview/gestures/GestureDetector.java
Patch:
@@ -23,6 +23,8 @@ public interface GestureDetector {
 
     public boolean isScaling();
 
+    public boolean isDragging();
+
     public void setOnGestureListener(OnGestureListener listener);
 
 }

File: library/src/main/java/uk/co/senab/photoview/PhotoView.java
Patch:
@@ -84,7 +84,7 @@ public RectF getDisplayRect() {
 
     @Override
     public Matrix getDisplayMatrix() {
-        return mAttacher.getDrawMatrix();
+        return mAttacher.getDisplayMatrix();
     }
 
     @Override

File: library/src/main/java/uk/co/senab/photoview/PhotoViewAttacher.java
Patch:
@@ -369,7 +369,7 @@ public void onDrag(float dx, float dy) {
          * the edge, aka 'overscrolling', let the parent take over).
          */
         ViewParent parent = imageView.getParent();
-        if (mAllowParentInterceptOnEdge) {
+        if (mAllowParentInterceptOnEdge && !mScaleDragDetector.isScaling()) {
             if (mScrollEdge == EDGE_BOTH
                     || (mScrollEdge == EDGE_LEFT && dx >= 1f)
                     || (mScrollEdge == EDGE_RIGHT && dx <= -1f)) {

File: library/src/main/java/uk/co/senab/photoview/PhotoViewAttacher.java
Patch:
@@ -143,7 +143,6 @@ private static void setImageViewScaleTypeMatrix(ImageView imageView) {
     private FlingRunnable mCurrentFlingRunnable;
     private int mScrollEdge = EDGE_BOTH;
 
-    private boolean mRotationDetectionEnabled = false;
     private boolean mZoomEnabled;
     private ScaleType mScaleType = ScaleType.FIT_CENTER;
 

File: sample/src/main/java/uk/co/senab/photoview/sample/SimpleSampleActivity.java
Patch:
@@ -42,7 +42,7 @@
 
 public class SimpleSampleActivity extends Activity {
 
-    static final String PHOTO_TAP_TOAST_STRING = "Photo Tap! X: %.2f %% Y:%.2f %%";
+    static final String PHOTO_TAP_TOAST_STRING = "Photo Tap! X: %.2f %% Y:%.2f %% ID: %d";
     static final String SCALE_TOAST_STRING = "Scaled to: %.2ff";
 
     private TextView mCurrMatrixTv;
@@ -181,7 +181,7 @@ public void onPhotoTap(View view, float x, float y) {
             float xPercentage = x * 100f;
             float yPercentage = y * 100f;
 
-            showToast(String.format(PHOTO_TAP_TOAST_STRING, xPercentage, yPercentage));
+            showToast(String.format(PHOTO_TAP_TOAST_STRING, xPercentage, yPercentage, view == null ? 0 : view.getId()));
         }
     }
 

File: library/src/uk/co/senab/photoview/PhotoViewAttacher.java
Patch:
@@ -477,7 +477,7 @@ public final boolean onTouch(View v, MotionEvent ev) {
                 handled = true;
             }
 
-            if (!handled && null != parent) {
+            if (!handled && null != parent && !mAllowParentInterceptOnEdge) {
                 parent.requestDisallowInterceptTouchEvent(false);
             }
 

File: library/src/uk/co/senab/photoview/scrollerproxy/GingerScroller.java
Patch:
@@ -22,7 +22,7 @@
 @TargetApi(9)
 public class GingerScroller extends ScrollerProxy {
 
-    protected OverScroller mScroller;
+    protected final OverScroller mScroller;
     private boolean mFirstScroll = false;
 
     public GingerScroller(Context context) {

File: library/src/uk/co/senab/photoview/scrollerproxy/PreGingerScroller.java
Patch:
@@ -20,7 +20,7 @@
 
 public class PreGingerScroller extends ScrollerProxy {
 
-    private Scroller mScroller;
+    private final Scroller mScroller;
 
     public PreGingerScroller(Context context) {
         mScroller = new Scroller(context);

File: sample/src/uk/co/senab/photoview/sample/RotationSampleActivity.java
Patch:
@@ -27,7 +27,7 @@ public class RotationSampleActivity extends Activity {
 
     private PhotoView photo;
     private float currentRotation = 0;
-    private Handler handler = new Handler();
+    private final Handler handler = new Handler();
     private boolean rotating = false;
 
     @Override

File: sample/src/uk/co/senab/photoview/sample/ViewPagerActivity.java
Patch:
@@ -39,7 +39,7 @@ public void onCreate(Bundle savedInstanceState) {
 
 	static class SamplePagerAdapter extends PagerAdapter {
 
-		private static int[] sDrawables = { R.drawable.wallpaper, R.drawable.wallpaper, R.drawable.wallpaper,
+		private static final int[] sDrawables = { R.drawable.wallpaper, R.drawable.wallpaper, R.drawable.wallpaper,
 				R.drawable.wallpaper, R.drawable.wallpaper, R.drawable.wallpaper };
 
 		@Override

File: library/src/uk/co/senab/photoview/PhotoViewAttacher.java
Patch:
@@ -303,7 +303,7 @@ public float getMaxScale() {
 
     @Override
     public final float getScale() {
-        return FloatMath.sqrt(FloatMath.pow(getValue(mSuppMatrix, Matrix.MSCALE_X), 2) + FloatMath.pow(getValue(mSuppMatrix, Matrix.MSKEW_Y), 2));
+        return FloatMath.sqrt((float) Math.pow(getValue(mSuppMatrix, Matrix.MSCALE_X), 2) + (float) Math.pow(getValue(mSuppMatrix, Matrix.MSKEW_Y), 2));
     }
 
     @Override

File: library/src/uk/co/senab/photoview/PhotoViewAttacher.java
Patch:
@@ -20,6 +20,7 @@
 import android.graphics.Matrix.ScaleToFit;
 import android.graphics.RectF;
 import android.graphics.drawable.Drawable;
+import android.util.FloatMath;
 import android.util.Log;
 import android.view.GestureDetector;
 import android.view.MotionEvent;
@@ -302,7 +303,7 @@ public float getMaxScale() {
 
     @Override
     public final float getScale() {
-        return getValue(mSuppMatrix, Matrix.MSCALE_X);
+        return FloatMath.sqrt(FloatMath.pow(getValue(mSuppMatrix, Matrix.MSCALE_X), 2) + FloatMath.pow(getValue(mSuppMatrix, Matrix.MSKEW_Y), 2));
     }
 
     @Override

File: library/src/uk/co/senab/photoview/PhotoViewAttacher.java
Patch:
@@ -35,10 +35,10 @@
 public class PhotoViewAttacher implements IPhotoView, View.OnTouchListener, VersionedGestureDetector.OnGestureListener,
         GestureDetector.OnDoubleTapListener, ViewTreeObserver.OnGlobalLayoutListener {
 
-    static final String LOG_TAG = "PhotoViewAttacher";
+    private static final String LOG_TAG = "PhotoViewAttacher";
 
     // let debug flag be dynamic, but still Proguard can be used to remove from release builds
-    static final boolean DEBUG = Log.isLoggable(LOG_TAG, Log.DEBUG);
+    private static final boolean DEBUG = Log.isLoggable(LOG_TAG, Log.DEBUG);
 
     static final int EDGE_NONE = -1;
     static final int EDGE_LEFT = 0;

File: library/src/uk/co/senab/photoview/PhotoViewAttacher.java
Patch:
@@ -491,7 +491,7 @@ public void setScale(float scale) {
 
     @Override
     public void setScale(float scale, boolean animate) {
-        ImageView imageView = mImageView.get();
+        ImageView imageView = getImageView();
 
         if (null != imageView) {
             setScale(scale, imageView.getX() / 2, imageView.getY() / 2, animate);

File: library/src/uk/co/senab/photoview/PhotoViewAttacher.java
Patch:
@@ -223,8 +223,7 @@ public final ImageView getImageView() {
 		// If we don't have an ImageView, call cleanup()
 		if (null == imageView) {
 			cleanup();
-			throw new IllegalStateException(
-					"ImageView no longer exists. You should not use this PhotoViewAttacher any more.");
+			Log.i(LOG_TAG, "ImageView no longer exists. You should not use this PhotoViewAttacher any more.");
 		}
 
 		return imageView;

File: library/src/uk/co/senab/photoview/PhotoViewAttacher.java
Patch:
@@ -176,8 +176,8 @@ public final boolean canZoom() {
 	 */
 	@SuppressWarnings("deprecation")
 	public final void cleanup() {
-		if (null != mViewTreeObserver && mViewTreeObserver.isAlive()) {
-			mViewTreeObserver.removeGlobalOnLayoutListener(this);
+		if (null != mImageView) {
+			mImageView.get().getViewTreeObserver().removeGlobalOnLayoutListener(this);
 		}
 		mViewTreeObserver = null;
 

File: library/src/uk/co/senab/photoview/PhotoViewAttacher.java
Patch:
@@ -35,8 +35,10 @@
 public class PhotoViewAttacher implements View.OnTouchListener, VersionedGestureDetector.OnGestureListener,
 		GestureDetector.OnDoubleTapListener, ViewTreeObserver.OnGlobalLayoutListener {
 
-	static final boolean DEBUG = true;
 	static final String LOG_TAG = "PhotoViewAttacher";
+	
+	// let debug flag be dynamic, but still Proguard can be used to remove from release builds
+	static final boolean DEBUG = Log.isLoggable(LOG_TAG, Log.DEBUG);
 
 	static final int EDGE_NONE = -1;
 	static final int EDGE_LEFT = 0;

File: library/src/uk/co/senab/photoview/VersionedGestureDetector.java
Patch:
@@ -161,7 +161,7 @@ public boolean onTouchEvent(MotionEvent ev) {
 				}
 			}
 
-			return mIsDragging;
+			return true;
 		}
 	}
 

File: library/src/uk/co/senab/photoview/PhotoView.java
Patch:
@@ -17,14 +17,12 @@
 
 import uk.co.senab.photoview.PhotoViewAttacher.OnMatrixChangedListener;
 import uk.co.senab.photoview.PhotoViewAttacher.OnPhotoTapListener;
-import android.annotation.TargetApi;
 import android.content.Context;
 import android.graphics.RectF;
 import android.graphics.drawable.Drawable;
 import android.util.AttributeSet;
 import android.widget.ImageView;
 
-@TargetApi(9)
 public class PhotoView extends ImageView {
 
 	private final PhotoViewAttacher mAttacher;

File: library/src/uk/co/senab/photoview/VersionedGestureDetector.java
Patch:
@@ -34,11 +34,11 @@ public static VersionedGestureDetector newInstance(Context context, OnGestureLis
 		final int sdkVersion = Build.VERSION.SDK_INT;
 		VersionedGestureDetector detector = null;
 
-		if (sdkVersion < 5) {
-			detector = new CupcakeDetector(context);
-		} else if (sdkVersion < Build.VERSION_CODES.ECLAIR) {
+		if (sdkVersion < Build.VERSION_CODES.ECLAIR) {
 			detector = new CupcakeDetector(context);
 		} else if (sdkVersion < Build.VERSION_CODES.FROYO) {
+			detector = new EclairDetector(context);
+		} else {
 			detector = new FroyoDetector(context);
 		}
 

