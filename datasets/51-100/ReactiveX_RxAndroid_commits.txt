File: sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java
Patch:
@@ -19,7 +19,7 @@
 import android.util.Log;
 import android.view.View;
 import io.reactivex.Observable;
-import io.reactivex.ObservableConsumable;
+import io.reactivex.ObservableSource;
 import io.reactivex.android.schedulers.AndroidSchedulers;
 import io.reactivex.observers.AsyncObserver;
 import io.reactivex.schedulers.Schedulers;
@@ -60,8 +60,8 @@ void onRunSchedulerExampleButtonClicked() {
     }
 
     static Observable<String> sampleObservable() {
-        return Observable.defer(new Callable<ObservableConsumable<? extends String>>() {
-          @Override public ObservableConsumable<? extends String> call() throws Exception {
+        return Observable.defer(new Callable<ObservableSource<? extends String>>() {
+          @Override public ObservableSource<? extends String> call() throws Exception {
                 // Do some long running operation
                 SystemClock.sleep(5000);
                 return Observable.just("one", "two", "three", "four", "five");

File: sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java
Patch:
@@ -19,7 +19,7 @@
 import android.util.Log;
 import android.view.View;
 import io.reactivex.Observable;
-import io.reactivex.ObservableConsumable;
+import io.reactivex.ObservableSource;
 import io.reactivex.android.schedulers.AndroidSchedulers;
 import io.reactivex.observers.AsyncObserver;
 import io.reactivex.schedulers.Schedulers;
@@ -60,8 +60,8 @@ void onRunSchedulerExampleButtonClicked() {
     }
 
     static Observable<String> sampleObservable() {
-        return Observable.defer(new Callable<ObservableConsumable<? extends String>>() {
-          @Override public ObservableConsumable<? extends String> call() throws Exception {
+        return Observable.defer(new Callable<ObservableSource<? extends String>>() {
+          @Override public ObservableSource<? extends String> call() throws Exception {
                 // Do some long running operation
                 SystemClock.sleep(5000);
                 return Observable.just("one", "two", "three", "four", "five");

File: rxandroid/src/main/java/rx/android/MainThreadSubscription.java
Patch:
@@ -36,7 +36,7 @@
  *
  *   // TODO set up behavior
  *
- *   subscriber.add(new MainThreadSubscriber() {
+ *   subscriber.add(new MainThreadSubscription() {
  *     &#064;Override public void onUnsubscribe() {
  *       // TODO undo behavior
  *     }

File: rxandroid/src/main/java/rx/android/MainThreadSubscription.java
Patch:
@@ -36,7 +36,7 @@
  *
  *   // TODO set up behavior
  *
- *   subscriber.add(new MainThreadSubscriber() {
+ *   subscriber.add(new MainThreadSubscription() {
  *     &#064;Override public void onUnsubscribe() {
  *       // TODO undo behavior
  *     }

File: rxandroid/src/main/java/rx/android/content/ContentObservable.java
Patch:
@@ -28,7 +28,7 @@ private ContentObservable() {
     }
 
     /**
-     * Create Observable that wraps BroadcastReceiver and emmit received intents.
+     * Create Observable that wraps BroadcastReceiver and emits received intents.
      *
      * @param filter Selects the Intent broadcasts to be received.
      */
@@ -37,7 +37,7 @@ public static Observable<Intent> fromBroadcast(Context context, IntentFilter fil
     }
 
     /**
-     * Create Observable that wraps BroadcastReceiver and emmit received intents.
+     * Create Observable that wraps BroadcastReceiver and emits received intents.
      *
      * @param filter Selects the Intent broadcasts to be received.
      * @param broadcastPermission String naming a permissions that a
@@ -52,7 +52,7 @@ public static Observable<Intent> fromBroadcast(Context context, IntentFilter fil
 
     /**
      * Create Observable that wraps BroadcastReceiver and connects to LocalBroadcastManager
-     * to emmit received intents.
+     * to emit received intents.
      *
      * @param filter Selects the Intent broadcasts to be received.
      */

File: rxandroid/src/main/java/rx/android/content/ContentObservable.java
Patch:
@@ -28,7 +28,7 @@ private ContentObservable() {
     }
 
     /**
-     * Create Observable that wraps BroadcastReceiver and emmit received intents.
+     * Create Observable that wraps BroadcastReceiver and emits received intents.
      *
      * @param filter Selects the Intent broadcasts to be received.
      */
@@ -37,7 +37,7 @@ public static Observable<Intent> fromBroadcast(Context context, IntentFilter fil
     }
 
     /**
-     * Create Observable that wraps BroadcastReceiver and emmit received intents.
+     * Create Observable that wraps BroadcastReceiver and emits received intents.
      *
      * @param filter Selects the Intent broadcasts to be received.
      * @param broadcastPermission String naming a permissions that a
@@ -52,7 +52,7 @@ public static Observable<Intent> fromBroadcast(Context context, IntentFilter fil
 
     /**
      * Create Observable that wraps BroadcastReceiver and connects to LocalBroadcastManager
-     * to emmit received intents.
+     * to emit received intents.
      *
      * @param filter Selects the Intent broadcasts to be received.
      */

File: rxandroid/src/test/java/rx/android/TestUtil.java
Patch:
@@ -29,7 +29,7 @@ private TestUtil() {
         throw new AssertionError("No instances");
     }
 
-    static public final String STRING_EXPECTATION = "Hello";
+    public static final String STRING_EXPECTATION = "Hello";
 
     public static View createView() {
         return new View(Robolectric.application);

File: rxandroid/src/test/java/rx/android/TestUtil.java
Patch:
@@ -29,7 +29,7 @@ private TestUtil() {
         throw new AssertionError("No instances");
     }
 
-    static public final String STRING_EXPECTATION = "Hello";
+    public static final String STRING_EXPECTATION = "Hello";
 
     public static View createView() {
         return new View(Robolectric.application);

File: rxandroid/src/main/java/rx/android/view/OnSubscribeViewClick.java
Patch:
@@ -43,7 +43,7 @@ public void call(final Subscriber<? super OnClickEvent> observer) {
         final View.OnClickListener listener = new View.OnClickListener() {
             @Override
             public void onClick(final View clicked) {
-                observer.onNext(new OnClickEvent(view));
+                observer.onNext(OnClickEvent.create(view));
             }
         };
 
@@ -55,7 +55,7 @@ public void call() {
         });
 
         if (emitInitialValue) {
-            observer.onNext(new OnClickEvent(view));
+            observer.onNext(OnClickEvent.create(view));
         }
 
         composite.addOnClickListener(listener);

File: rxandroid/src/main/java/rx/android/widget/OnSubscribeAdapterViewOnItemClick.java
Patch:
@@ -45,7 +45,7 @@ public void call(final Subscriber<? super OnItemClickEvent> observer) {
         final AbsListView.OnItemClickListener listener = new AdapterView.OnItemClickListener() {
             @Override
             public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-                observer.onNext(new OnItemClickEvent(parent, view, position, id));
+                observer.onNext(OnItemClickEvent.create(parent, view, position, id));
             }
         };
 

File: rxandroid/src/main/java/rx/android/widget/OnSubscribeCompoundButtonInput.java
Patch:
@@ -45,7 +45,7 @@ public void call(final Subscriber<? super OnCheckedChangeEvent> observer) {
         final CompoundButton.OnCheckedChangeListener listener = new CompoundButton.OnCheckedChangeListener() {
             @Override
             public void onCheckedChanged(final CompoundButton view, final boolean checked) {
-                observer.onNext(new OnCheckedChangeEvent(button, checked));
+                observer.onNext(OnCheckedChangeEvent.create(button, checked));
             }
         };
 
@@ -57,7 +57,7 @@ public void call() {
         });
 
         if (emitInitialValue) {
-            observer.onNext(new OnCheckedChangeEvent(button));
+            observer.onNext(OnCheckedChangeEvent.create(button));
         }
 
         composite.addOnCheckedChangeListener(listener);

File: rxandroid/src/main/java/rx/android/widget/OnSubscribeListViewScroll.java
Patch:
@@ -50,7 +50,7 @@ public void onScrollStateChanged(AbsListView view, int scrollState) {
 
             @Override
             public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
-                OnListViewScrollEvent event = new OnListViewScrollEvent(view, this.currentScrollState, firstVisibleItem,
+                OnListViewScrollEvent event = OnListViewScrollEvent.create(view, this.currentScrollState, firstVisibleItem,
                     visibleItemCount, totalItemCount);
                 observer.onNext(event);
             }

File: rxandroid/src/main/java/rx/android/widget/OnSubscribeTextViewInput.java
Patch:
@@ -38,7 +38,7 @@ public void call(final Subscriber<? super OnTextChangeEvent> observer) {
         final TextWatcher watcher = new SimpleTextWatcher() {
             @Override
             public void afterTextChanged(final Editable editable) {
-                observer.onNext(new OnTextChangeEvent(input));
+                observer.onNext(OnTextChangeEvent.create(input));
             }
         };
 
@@ -50,7 +50,7 @@ public void call() {
         });
 
         if (emitInitialValue) {
-            observer.onNext(new OnTextChangeEvent(input));
+            observer.onNext(OnTextChangeEvent.create(input));
         }
 
         input.addTextChangedListener(watcher);

File: rxandroid/src/test/java/rx/android/view/OperatorViewClickTest.java
Patch:
@@ -37,7 +37,7 @@
 @RunWith(RobolectricTestRunner.class)
 public class OperatorViewClickTest {
     private static OnClickEvent mkMockedEvent(final View view) {
-        return refEq(new OnClickEvent(view));
+        return refEq(OnClickEvent.create(view));
     }
 
     @Test

File: rxandroid/src/test/java/rx/android/widget/OperatorCompoundButtonInputTest.java
Patch:
@@ -32,7 +32,7 @@
 @RunWith(RobolectricTestRunner.class)
 public class OperatorCompoundButtonInputTest {
     private static OnCheckedChangeEvent mkMockedEvent(final CompoundButton button, final boolean value) {
-        return refEq(new OnCheckedChangeEvent(button, value));
+        return refEq(OnCheckedChangeEvent.create(button, value));
     }
 
     private static CompoundButton mkCompoundButton(final boolean value) {

File: rxandroid/src/test/java/rx/android/widget/OperatorTextViewInputTest.java
Patch:
@@ -43,11 +43,11 @@ public boolean matches(final Object argument) {
 
                 final OnTextChangeEvent event = (OnTextChangeEvent) argument;
 
-                if (event.view != view) {
+                if (event.view() != view) {
                     return false;
                 }
 
-                return TextUtils.equals(event.text, text);
+                return TextUtils.equals(event.text(), text);
             }
         });
     }

File: sample-app/src/main/java/rx/android/samples/ListFragmentActivity.java
Patch:
@@ -64,12 +64,12 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
                 .subscribe(new Action1<OnListViewScrollEvent>() {
                     @Override
                     public void call(OnListViewScrollEvent event) {
-                        if (event.totalItemCount == 0) {
+                        if (event.totalItemCount() == 0) {
                             return;
                         }
 
                         int progress =
-                            (int) ((100.0 * (event.firstVisibleItem + event.visibleItemCount)) / event.totalItemCount);
+                            (int) ((100.0 * (event.firstVisibleItem() + event.visibleItemCount())) / event.totalItemCount());
                         progressBar.setProgress(progress);
                     }
                 });

File: rxandroid/src/main/java/rx/android/AndroidSubscriptions.java
Patch:
@@ -22,9 +22,8 @@
 import android.os.Looper;
 
 public final class AndroidSubscriptions {
-
     private AndroidSubscriptions() {
-        // no instance
+        throw new AssertionError("No instances");
     }
 
     /**

File: rxandroid/src/main/java/rx/android/lifecycle/LifecycleObservable.java
Patch:
@@ -21,7 +21,7 @@
 public class LifecycleObservable {
 
     private LifecycleObservable() {
-        throw new AssertionError("LifeCycleObservable cannot be instantiated.");
+        throw new AssertionError("No instances");
     }
 
     /**

File: rxandroid/src/main/java/rx/android/widget/WidgetObservable.java
Patch:
@@ -10,6 +10,7 @@
 
 public final class WidgetObservable {
     private WidgetObservable() {
+        throw new AssertionError("No instances");
     }
 
     public static Observable<OnTextChangeEvent> text(final TextView input) {

File: rxandroid/src/main/java/rx/android/AndroidSubscriptions.java
Patch:
@@ -22,9 +22,8 @@
 import android.os.Looper;
 
 public final class AndroidSubscriptions {
-
     private AndroidSubscriptions() {
-        // no instance
+        throw new AssertionError("No instances");
     }
 
     /**

File: rxandroid/src/main/java/rx/android/lifecycle/LifecycleObservable.java
Patch:
@@ -21,7 +21,7 @@
 public class LifecycleObservable {
 
     private LifecycleObservable() {
-        throw new AssertionError("LifeCycleObservable cannot be instantiated.");
+        throw new AssertionError("No instances");
     }
 
     /**

File: rxandroid/src/main/java/rx/android/widget/WidgetObservable.java
Patch:
@@ -10,6 +10,7 @@
 
 public final class WidgetObservable {
     private WidgetObservable() {
+        throw new AssertionError("No instances");
     }
 
     public static Observable<OnTextChangeEvent> text(final TextView input) {

File: rxandroid/src/main/java/rx/android/view/OnSubscribeViewClick.java
Patch:
@@ -43,7 +43,7 @@ public void call(final Subscriber<? super OnClickEvent> observer) {
         final View.OnClickListener listener = new View.OnClickListener() {
             @Override
             public void onClick(final View clicked) {
-                observer.onNext(new OnClickEvent(view));
+                observer.onNext(OnClickEvent.create(view));
             }
         };
 
@@ -55,7 +55,7 @@ public void call() {
         });
 
         if (emitInitialValue) {
-            observer.onNext(new OnClickEvent(view));
+            observer.onNext(OnClickEvent.create(view));
         }
 
         composite.addOnClickListener(listener);

File: rxandroid/src/main/java/rx/android/widget/OnSubscribeAdapterViewOnItemClick.java
Patch:
@@ -45,7 +45,7 @@ public void call(final Subscriber<? super OnItemClickEvent> observer) {
         final AbsListView.OnItemClickListener listener = new AdapterView.OnItemClickListener() {
             @Override
             public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-                observer.onNext(new OnItemClickEvent(parent, view, position, id));
+                observer.onNext(OnItemClickEvent.create(parent, view, position, id));
             }
         };
 

File: rxandroid/src/main/java/rx/android/widget/OnSubscribeCompoundButtonInput.java
Patch:
@@ -45,7 +45,7 @@ public void call(final Subscriber<? super OnCheckedChangeEvent> observer) {
         final CompoundButton.OnCheckedChangeListener listener = new CompoundButton.OnCheckedChangeListener() {
             @Override
             public void onCheckedChanged(final CompoundButton view, final boolean checked) {
-                observer.onNext(new OnCheckedChangeEvent(button, checked));
+                observer.onNext(OnCheckedChangeEvent.create(button, checked));
             }
         };
 
@@ -57,7 +57,7 @@ public void call() {
         });
 
         if (emitInitialValue) {
-            observer.onNext(new OnCheckedChangeEvent(button));
+            observer.onNext(OnCheckedChangeEvent.create(button));
         }
 
         composite.addOnCheckedChangeListener(listener);

File: rxandroid/src/main/java/rx/android/widget/OnSubscribeListViewScroll.java
Patch:
@@ -50,7 +50,7 @@ public void onScrollStateChanged(AbsListView view, int scrollState) {
 
             @Override
             public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
-                OnListViewScrollEvent event = new OnListViewScrollEvent(view, this.currentScrollState, firstVisibleItem,
+                OnListViewScrollEvent event = OnListViewScrollEvent.create(view, this.currentScrollState, firstVisibleItem,
                     visibleItemCount, totalItemCount);
                 observer.onNext(event);
             }

File: rxandroid/src/main/java/rx/android/widget/OnSubscribeTextViewInput.java
Patch:
@@ -38,7 +38,7 @@ public void call(final Subscriber<? super OnTextChangeEvent> observer) {
         final TextWatcher watcher = new SimpleTextWatcher() {
             @Override
             public void afterTextChanged(final Editable editable) {
-                observer.onNext(new OnTextChangeEvent(input));
+                observer.onNext(OnTextChangeEvent.create(input));
             }
         };
 
@@ -50,7 +50,7 @@ public void call() {
         });
 
         if (emitInitialValue) {
-            observer.onNext(new OnTextChangeEvent(input));
+            observer.onNext(OnTextChangeEvent.create(input));
         }
 
         input.addTextChangedListener(watcher);

File: rxandroid/src/test/java/rx/android/view/OperatorViewClickTest.java
Patch:
@@ -37,7 +37,7 @@
 @RunWith(RobolectricTestRunner.class)
 public class OperatorViewClickTest {
     private static OnClickEvent mkMockedEvent(final View view) {
-        return refEq(new OnClickEvent(view));
+        return refEq(OnClickEvent.create(view));
     }
 
     @Test

File: rxandroid/src/test/java/rx/android/widget/OperatorCompoundButtonInputTest.java
Patch:
@@ -32,7 +32,7 @@
 @RunWith(RobolectricTestRunner.class)
 public class OperatorCompoundButtonInputTest {
     private static OnCheckedChangeEvent mkMockedEvent(final CompoundButton button, final boolean value) {
-        return refEq(new OnCheckedChangeEvent(button, value));
+        return refEq(OnCheckedChangeEvent.create(button, value));
     }
 
     private static CompoundButton mkCompoundButton(final boolean value) {

File: rxandroid/src/test/java/rx/android/widget/OperatorTextViewInputTest.java
Patch:
@@ -43,11 +43,11 @@ public boolean matches(final Object argument) {
 
                 final OnTextChangeEvent event = (OnTextChangeEvent) argument;
 
-                if (event.view != view) {
+                if (event.view() != view) {
                     return false;
                 }
 
-                return TextUtils.equals(event.text, text);
+                return TextUtils.equals(event.text(), text);
             }
         });
     }

File: sample-app/src/main/java/rx/android/samples/ListFragmentActivity.java
Patch:
@@ -64,12 +64,12 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
                 .subscribe(new Action1<OnListViewScrollEvent>() {
                     @Override
                     public void call(OnListViewScrollEvent event) {
-                        if (event.totalItemCount == 0) {
+                        if (event.totalItemCount() == 0) {
                             return;
                         }
 
                         int progress =
-                            (int) ((100.0 * (event.firstVisibleItem + event.visibleItemCount)) / event.totalItemCount);
+                            (int) ((100.0 * (event.firstVisibleItem() + event.visibleItemCount())) / event.totalItemCount());
                         progressBar.setProgress(progress);
                     }
                 });

File: rxandroid/src/main/java/rx/android/content/ContentObservable.java
Patch:
@@ -65,7 +65,7 @@ public Boolean call(android.support.v4.app.Fragment fragment) {
      */
     public static <T> Observable<T> bindActivity(Activity activity, Observable<T> source) {
         Assertions.assertUiThread();
-        return source.lift(new OperatorConditionalBinding<T, Activity>(activity, ACTIVITY_VALIDATOR)).observeOn(mainThread());
+        return source.observeOn(mainThread()).lift(new OperatorConditionalBinding<T, Activity>(activity, ACTIVITY_VALIDATOR));
     }
 
     /**

File: rxandroid/src/main/java/rx/android/view/OnSubscribeViewDetachedFromWindowFirst.java
Patch:
@@ -20,7 +20,6 @@
 import rx.Subscription;
 
 /**
- * An internal class that is used from #{@link rx.android.view.ViewObservable#bindView}.
  * This emits an event when the given #{@code View} is detached from the window for the first time.
  */
 final class OnSubscribeViewDetachedFromWindowFirst implements Observable.OnSubscribe<View> {
@@ -40,7 +39,7 @@ public void call(final Subscriber<? super View> subscriber) {
     // This could be split into a couple of anonymous classes.
     // We pack it into one for the sake of memory efficiency.
     private static class SubscriptionAdapter implements View.OnAttachStateChangeListener,
-        Subscription {
+            Subscription {
         private Subscriber<? super View> subscriber;
         private View view;
 

File: rxandroid/src/test/java/rx/android/view/OnSubscribeViewDetachedFromWindowFirstTest.java
Patch:
@@ -15,8 +15,7 @@
 
 import android.view.View;
 
-import junit.framework.Assert;
-
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;

File: rxandroid/src/main/java/rx/android/content/ContentObservable.java
Patch:
@@ -65,7 +65,7 @@ public Boolean call(android.support.v4.app.Fragment fragment) {
      */
     public static <T> Observable<T> bindActivity(Activity activity, Observable<T> source) {
         Assertions.assertUiThread();
-        return source.lift(new OperatorConditionalBinding<T, Activity>(activity, ACTIVITY_VALIDATOR)).observeOn(mainThread());
+        return source.observeOn(mainThread()).lift(new OperatorConditionalBinding<T, Activity>(activity, ACTIVITY_VALIDATOR));
     }
 
     /**

File: src/main/java/rx/android/operators/OperatorConditionalBinding.java
Patch:
@@ -16,7 +16,7 @@
 import rx.Observable;
 import rx.Subscriber;
 import rx.functions.Func1;
-import rx.functions.Functions;
+import rx.internal.util.UtilityFunctions;
 
 import android.util.Log;
 
@@ -44,7 +44,7 @@ public OperatorConditionalBinding(R bound, Func1<? super R, Boolean> predicate)
 
     public OperatorConditionalBinding(R bound) {
         boundRef = bound;
-        this.predicate = Functions.alwaysTrue();
+        this.predicate = UtilityFunctions.alwaysTrue();
     }
 
     @Override

File: src/test/java/rx/android/operators/OperatorConditionalBindingTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.robolectric.RobolectricTestRunner;
 import rx.Subscriber;
 import rx.functions.Func1;
-import rx.functions.Functions;
+import rx.internal.util.UtilityFunctions;
 import rx.observers.TestSubscriber;
 
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -65,7 +65,7 @@ public Boolean call(Object o) {
     @Test
     public void shouldUnsubscribeFromSourceSequenceWhenPredicateFailsToPass() {
         OperatorConditionalBinding<String, Object> op = new OperatorConditionalBinding<String, Object>(
-                new Object(), Functions.alwaysFalse());
+                new Object(), UtilityFunctions.alwaysFalse());
 
         Subscriber<? super String> sub = op.call(subscriber);
         sub.onNext("one");

File: src/main/java/rx/android/operators/OperatorConditionalBinding.java
Patch:
@@ -16,7 +16,7 @@
 import rx.Observable;
 import rx.Subscriber;
 import rx.functions.Func1;
-import rx.functions.Functions;
+import rx.internal.util.UtilityFunctions;
 
 import android.util.Log;
 
@@ -44,7 +44,7 @@ public OperatorConditionalBinding(R bound, Func1<? super R, Boolean> predicate)
 
     public OperatorConditionalBinding(R bound) {
         boundRef = bound;
-        this.predicate = Functions.alwaysTrue();
+        this.predicate = UtilityFunctions.alwaysTrue();
     }
 
     @Override

File: src/test/java/rx/android/operators/OperatorConditionalBindingTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.robolectric.RobolectricTestRunner;
 import rx.Subscriber;
 import rx.functions.Func1;
-import rx.functions.Functions;
+import rx.internal.util.UtilityFunctions;
 import rx.observers.TestSubscriber;
 
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -65,7 +65,7 @@ public Boolean call(Object o) {
     @Test
     public void shouldUnsubscribeFromSourceSequenceWhenPredicateFailsToPass() {
         OperatorConditionalBinding<String, Object> op = new OperatorConditionalBinding<String, Object>(
-                new Object(), Functions.alwaysFalse());
+                new Object(), UtilityFunctions.alwaysFalse());
 
         Subscriber<? super String> sub = op.call(subscriber);
         sub.onNext("one");

File: src/main/java/rx/android/subscriptions/AndroidSubscriptions.java
Patch:
@@ -30,10 +30,10 @@ private AndroidSubscriptions() {
     }
 
     /**
-     * Create an Subscription that always runs <code>unsubscribe</code> in the UI thread.
+     * Create a {@link Subscription} that always runs <code>unsubscribe</code> in the UI thread.
      * 
      * @param unsubscribe
-     * @return an Subscription that always runs <code>unsubscribe</code> in the UI thread.
+     * @return a {@link Subscription} that always runs <code>unsubscribe</code> in the UI thread.
      */
     public static Subscription unsubscribeInUiThread(final Action0 unsubscribe) {
         return Subscriptions.create(new Action0() {

File: src/main/java/rx/android/subscriptions/AndroidSubscriptions.java
Patch:
@@ -30,10 +30,10 @@ private AndroidSubscriptions() {
     }
 
     /**
-     * Create an Subscription that always runs <code>unsubscribe</code> in the UI thread.
+     * Create a {@link Subscription} that always runs <code>unsubscribe</code> in the UI thread.
      * 
      * @param unsubscribe
-     * @return an Subscription that always runs <code>unsubscribe</code> in the UI thread.
+     * @return a {@link Subscription} that always runs <code>unsubscribe</code> in the UI thread.
      */
     public static Subscription unsubscribeInUiThread(final Action0 unsubscribe) {
         return Subscriptions.create(new Action0() {

File: src/main/java/rx/operators/OperatorBroadcastRegister.java
Patch:
@@ -24,8 +24,8 @@
 import rx.Observable;
 import rx.Subscriber;
 import rx.Subscription;
-import rx.android.subscriptions.AndroidSubscriptions;
 import rx.functions.Action0;
+import rx.subscriptions.Subscriptions;
 
 public class OperatorBroadcastRegister implements Observable.OnSubscribe<Intent> {
 
@@ -50,7 +50,7 @@ public void onReceive(Context context, Intent intent) {
             }
         };
 
-        final Subscription subscription = AndroidSubscriptions.unsubscribeInUiThread(new Action0() {
+        final Subscription subscription = Subscriptions.create(new Action0() {
             @Override
             public void call() {
                 context.unregisterReceiver(broadcastReceiver);

File: src/main/java/rx/operators/OperatorLocalBroadcastRegister.java
Patch:
@@ -26,6 +26,7 @@
 import rx.Subscription;
 import rx.android.subscriptions.AndroidSubscriptions;
 import rx.functions.Action0;
+import rx.subscriptions.Subscriptions;
 
 public class OperatorLocalBroadcastRegister implements Observable.OnSubscribe<Intent> {
 
@@ -47,7 +48,7 @@ public void onReceive(Context context, Intent intent) {
             }
         };
 
-        final Subscription subscription = AndroidSubscriptions.unsubscribeInUiThread(new Action0() {
+        final Subscription subscription = Subscriptions.create(new Action0() {
             @Override
             public void call() {
                 localBroadcastManager.unregisterReceiver(broadcastReceiver);

File: src/test/java/rx/android/operators/OperatorLocalBroadcastRegisterTest.java
Patch:
@@ -42,7 +42,6 @@
 public class OperatorLocalBroadcastRegisterTest {
 
     @Test
-    @SuppressWarnings("unchecked")
     public void testLocalBroadcast() {
         String action = "TEST_ACTION";
         IntentFilter intentFilter = new IntentFilter(action);
@@ -64,6 +63,7 @@ public void testLocalBroadcast() {
         inOrder.verify(observer, times(1)).onNext(intent);
 
         subscription.unsubscribe();
+        localBroadcastManager.sendBroadcast(intent);
         inOrder.verify(observer, never()).onNext(any(Intent.class));
 
         inOrder.verify(observer, never()).onError(any(Throwable.class));

File: src/main/java/rx/android/concurrency/AndroidSchedulers.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2013 Netflix, Inc.
+ * Copyright 2014 Netflix, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/rx/android/concurrency/HandlerThreadScheduler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2013 Netflix, Inc.
+ * Copyright 2014 Netflix, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/rx/android/observables/AndroidObservable.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2013 Netflix, Inc.
+ * Copyright 2014 Netflix, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/rx/android/observables/ViewObservable.java
Patch:
@@ -27,7 +27,7 @@
 public class ViewObservable {
 
     public static <T extends View> Observable<T> clicks(final T view, final boolean emitInitialValue) {
-        return Observable.create(new OperatorViewClick(view, emitInitialValue));
+        return Observable.create(new OperatorViewClick<T>(view, emitInitialValue));
     }
 
     public static Observable<String> input(final EditText input, final boolean emitInitialValue) {

File: src/main/java/rx/android/schedulers/AndroidSchedulers.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2013 Netflix, Inc.
+ * Copyright 2014 Netflix, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/rx/android/schedulers/HandlerThreadScheduler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2013 Netflix, Inc.
+ * Copyright 2014 Netflix, Inc.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/rx/operators/OperatorObserveFromAndroidComponent.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2013 Netflix, Inc.
+ * Copyright 2014 Netflix, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/rx/android/observables/AndroidObservableTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2013 Netflix, Inc.
+ * Copyright 2014 Netflix, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/rx/android/operators/OperatorObserveFromAndroidComponentTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2013 Netflix, Inc.
+ * Copyright 2014 Netflix, Inc.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/rx/android/schedulers/HandlerThreadSchedulerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2013 Netflix, Inc.
+ * Copyright 2014 Netflix, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/rx/android/schedulers/HandlerThreadScheduler.java
Patch:
@@ -43,11 +43,11 @@ public HandlerThreadScheduler(Handler handler) {
     }
 
     @Override
-    public Inner createInner() {
+    public Worker createWorker() {
         return new InnerHandlerThreadScheduler(handler);
     }
     
-    private static class InnerHandlerThreadScheduler extends Inner {
+    private static class InnerHandlerThreadScheduler extends Worker {
 
         private final Handler handler;
         private BooleanSubscription innerSubscription = new BooleanSubscription();

File: src/main/java/rx/android/subscriptions/AndroidSubscriptions.java
Patch:
@@ -15,7 +15,7 @@
  */
 package rx.android.subscriptions;
 
-import rx.Scheduler.Inner;
+import rx.Scheduler.Worker;
 import rx.Subscription;
 import rx.android.schedulers.AndroidSchedulers;
 import rx.functions.Action0;
@@ -42,7 +42,7 @@ public void call() {
                 if (Looper.getMainLooper() == Looper.myLooper()) {
                     unsubscribe.call();
                 } else {
-                    final Inner inner = AndroidSchedulers.mainThread().createInner();
+                    final Worker inner = AndroidSchedulers.mainThread().createWorker();
                     inner.schedule(new Action0() {
                         @Override
                         public void call() {

File: src/test/java/rx/android/schedulers/HandlerThreadSchedulerTest.java
Patch:
@@ -29,7 +29,7 @@
 import org.robolectric.annotation.Config;
 
 import rx.Scheduler;
-import rx.Scheduler.Inner;
+import rx.Scheduler.Worker;
 import rx.functions.Action0;
 import rx.functions.Action1;
 import android.os.Handler;
@@ -45,7 +45,7 @@ public void shouldScheduleImmediateActionOnHandlerThread() {
         final Action0 action = mock(Action0.class);
 
         Scheduler scheduler = new HandlerThreadScheduler(handler);
-        Inner inner = scheduler.createInner();
+        Worker inner = scheduler.createWorker();
         inner.schedule(action);
 
         // verify that we post to the given Handler
@@ -64,7 +64,7 @@ public void shouldScheduleDelayedActionOnHandlerThread() {
         final Action0 action = mock(Action0.class);
 
         Scheduler scheduler = new HandlerThreadScheduler(handler);
-        Inner inner = scheduler.createInner();
+        Worker inner = scheduler.createWorker();
         inner.schedule(action, 1L, TimeUnit.SECONDS);
 
         // verify that we post to the given Handler

File: src/main/java/rx/android/schedulers/HandlerThreadScheduler.java
Patch:
@@ -43,7 +43,7 @@ public HandlerThreadScheduler(Handler handler) {
     }
 
     @Override
-    public Inner inner() {
+    public Inner createInner() {
         return new InnerHandlerThreadScheduler(handler);
     }
     

File: src/main/java/rx/android/subscriptions/AndroidSubscriptions.java
Patch:
@@ -42,7 +42,7 @@ public void call() {
                 if (Looper.getMainLooper() == Looper.myLooper()) {
                     unsubscribe.call();
                 } else {
-                    final Inner inner = AndroidSchedulers.mainThread().inner();
+                    final Inner inner = AndroidSchedulers.mainThread().createInner();
                     inner.schedule(new Action0() {
                         @Override
                         public void call() {

File: src/test/java/rx/android/schedulers/HandlerThreadSchedulerTest.java
Patch:
@@ -45,7 +45,7 @@ public void shouldScheduleImmediateActionOnHandlerThread() {
         final Action0 action = mock(Action0.class);
 
         Scheduler scheduler = new HandlerThreadScheduler(handler);
-        Inner inner = scheduler.inner();
+        Inner inner = scheduler.createInner();
         inner.schedule(action);
 
         // verify that we post to the given Handler
@@ -64,7 +64,7 @@ public void shouldScheduleDelayedActionOnHandlerThread() {
         final Action0 action = mock(Action0.class);
 
         Scheduler scheduler = new HandlerThreadScheduler(handler);
-        Inner inner = scheduler.inner();
+        Inner inner = scheduler.createInner();
         inner.schedule(action, 1L, TimeUnit.SECONDS);
 
         // verify that we post to the given Handler

File: src/main/java/rx/android/observables/ViewObservable.java
Patch:
@@ -26,7 +26,7 @@
 
 public class ViewObservable {
 
-    public static Observable<View> clicks(final View view, final boolean emitInitialValue) {
+    public static <T extends View> Observable<T> clicks(final T view, final boolean emitInitialValue) {
         return Observable.create(new OperatorViewClick(view, emitInitialValue));
     }
 

File: src/main/java/rx/android/observables/ViewObservable.java
Patch:
@@ -26,7 +26,7 @@
 
 public class ViewObservable {
 
-    public static Observable<View> clicks(final View view, final boolean emitInitialValue) {
+    public static <T extends View> Observable<T> clicks(final T view, final boolean emitInitialValue) {
         return Observable.create(new OperatorViewClick(view, emitInitialValue));
     }
 

File: src/main/java/rx/android/observables/AndroidObservable.java
Patch:
@@ -59,6 +59,7 @@ private AndroidObservable() {}
      * @return a new observable sequence that will emit notifications on the main UI thread
      */
     public static <T> Observable<T> fromActivity(Activity activity, Observable<T> sourceObservable) {
+        Assertions.assertUiThread();
         return OperatorObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, activity);
     }
 
@@ -87,6 +88,7 @@ public static <T> Observable<T> fromActivity(Activity activity, Observable<T> so
      * @return a new observable sequence that will emit notifications on the main UI thread
      */
     public static <T> Observable<T> fromFragment(Object fragment, Observable<T> sourceObservable) {
+        Assertions.assertUiThread();
         if (USES_SUPPORT_FRAGMENTS && fragment instanceof android.support.v4.app.Fragment) {
             return OperatorObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, (android.support.v4.app.Fragment) fragment);
         } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB && fragment instanceof Fragment) {

File: src/main/java/rx/operators/OperatorCompoundButtonInput.java
Patch:
@@ -23,7 +23,7 @@
 import rx.Observable;
 import rx.Subscriber;
 import rx.Subscription;
-import rx.android.observables.ViewObservable;
+import rx.android.observables.Assertions;
 import rx.android.subscriptions.AndroidSubscriptions;
 import rx.functions.Action0;
 import android.view.View;
@@ -40,7 +40,7 @@ public OperatorCompoundButtonInput(final CompoundButton button, final boolean em
 
     @Override
     public void call(final Subscriber<? super Boolean> observer) {
-        ViewObservable.assertUiThread();
+        Assertions.assertUiThread();
         final CompositeOnCheckedChangeListener composite = CachedListeners.getFromViewOrCreate(button);
 
         final CompoundButton.OnCheckedChangeListener listener = new CompoundButton.OnCheckedChangeListener() {

File: src/main/java/rx/operators/OperatorEditTextInput.java
Patch:
@@ -18,7 +18,7 @@
 import rx.Observable;
 import rx.Subscriber;
 import rx.Subscription;
-import rx.android.observables.ViewObservable;
+import rx.android.observables.Assertions;
 import rx.android.subscriptions.AndroidSubscriptions;
 import rx.functions.Action0;
 import android.text.Editable;
@@ -36,7 +36,7 @@ public OperatorEditTextInput(final EditText input, final boolean emitInitialValu
 
     @Override
     public void call(final Subscriber<? super String> observer) {
-        ViewObservable.assertUiThread();
+        Assertions.assertUiThread();
         final TextWatcher watcher = new SimpleTextWatcher() {
             @Override
             public void afterTextChanged(final Editable editable) {

File: src/main/java/rx/operators/OperatorViewClick.java
Patch:
@@ -23,7 +23,7 @@
 import rx.Observable;
 import rx.Subscriber;
 import rx.Subscription;
-import rx.android.observables.ViewObservable;
+import rx.android.observables.Assertions;
 import rx.android.subscriptions.AndroidSubscriptions;
 import rx.functions.Action0;
 import android.view.View;
@@ -39,7 +39,7 @@ public OperatorViewClick(final View view, final boolean emitInitialValue) {
 
     @Override
     public void call(final Subscriber<? super View> observer) {
-        ViewObservable.assertUiThread();
+        Assertions.assertUiThread();
         final CompositeOnClickListener composite = CachedListeners.getFromViewOrCreate(view);
 
         final View.OnClickListener listener = new View.OnClickListener() {

