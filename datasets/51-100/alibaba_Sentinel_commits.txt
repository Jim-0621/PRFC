File: sentinel-demo/sentinel-demo-annotation-spring-aop/src/main/java/com/alibaba/csp/sentinel/demo/annotation/aop/service/TestService.java
Patch:
@@ -24,5 +24,7 @@ public interface TestService {
 
     String hello(long s);
 
+    String hello(String s);
+
     String helloAnother(String name);
 }

File: sentinel-adapter/sentinel-apache-dubbo-adapter/src/test/java/com/alibaba/csp/sentinel/BaseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2024 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,6 +15,7 @@
  */
 package com.alibaba.csp.sentinel;
 
+import com.alibaba.csp.sentinel.adapter.dubbo.AbstractTimeBasedTest;
 import com.alibaba.csp.sentinel.adapter.dubbo.config.DubboAdapterGlobalConfig;
 import com.alibaba.csp.sentinel.adapter.dubbo.fallback.DefaultDubboFallback;
 import com.alibaba.csp.sentinel.config.SentinelConfig;
@@ -37,7 +38,7 @@
  * @author cdfive
  * @author lianglin
  */
-public class BaseTest {
+public class BaseTest extends AbstractTimeBasedTest {
 
 
     /**

File: sentinel-adapter/sentinel-apache-dubbo3-adapter/src/test/java/com/alibaba/csp/sentinel/BaseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2024 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,6 +15,7 @@
  */
 package com.alibaba.csp.sentinel;
 
+import com.alibaba.csp.sentinel.adapter.dubbo3.AbstractTimeBasedTest;
 import com.alibaba.csp.sentinel.adapter.dubbo3.config.DubboAdapterGlobalConfig;
 import com.alibaba.csp.sentinel.adapter.dubbo3.fallback.DefaultDubboFallback;
 import com.alibaba.csp.sentinel.config.SentinelConfig;
@@ -37,7 +38,7 @@
  * @author cdfive
  * @author lianglin
  */
-public class BaseTest {
+public class BaseTest extends AbstractTimeBasedTest {
 
 
     /**

File: sentinel-demo/sentinel-demo-quarkus/src/main/java/com/alibaba/csp/sentinel/demo/quarkus/GreetingResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2020 Alibaba Group Holding Ltd.
+ * Copyright 1999-2024 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,7 +37,7 @@ public class GreetingResource {
     @Path("/txt")
     @Produces(MediaType.TEXT_PLAIN)
     public String hello() throws InterruptedException {
-        TimeUnit.MILLISECONDS.sleep(500);
+        TimeUnit.MILLISECONDS.sleep(300);
         return "hello";
     }
 

File: sentinel-extension/sentinel-parameter-flow-control/src/test/java/com/alibaba/csp/sentinel/slots/block/flow/param/ParamFlowCheckerTest.java
Patch:
@@ -31,6 +31,7 @@
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
+import java.util.concurrent.atomic.AtomicReference;
 
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -158,7 +159,7 @@ public void testPassLocalCheckForCollection() throws InterruptedException {
         ParameterMetric metric = new ParameterMetric();
         ParameterMetricStorage.getMetricsMap().put(resourceWrapper.getName(), metric);
         metric.getRuleTimeCounterMap().put(rule, new ConcurrentLinkedHashMapWrapper<Object, AtomicLong>(4000));
-        metric.getRuleTokenCounterMap().put(rule, new ConcurrentLinkedHashMapWrapper<Object, AtomicLong>(4000));
+        metric.getRuleTokenCounterMap().put(rule, new ConcurrentLinkedHashMapWrapper<>(4000));
 
         assertTrue(ParamFlowChecker.passCheck(resourceWrapper, rule, 1, list));
         assertFalse(ParamFlowChecker.passCheck(resourceWrapper, rule, 1, list));
@@ -215,7 +216,7 @@ public Object paramFlowKey() {
         ParameterMetric metric = new ParameterMetric();
         ParameterMetricStorage.getMetricsMap().put(resourceWrapper.getName(), metric);
         metric.getRuleTimeCounterMap().put(rule, new ConcurrentLinkedHashMapWrapper<Object, AtomicLong>(4000));
-        metric.getRuleTokenCounterMap().put(rule, new ConcurrentLinkedHashMapWrapper<Object, AtomicLong>(4000));
+        metric.getRuleTokenCounterMap().put(rule, new ConcurrentLinkedHashMapWrapper<>(4000));
 
         assertTrue(ParamFlowChecker.passCheck(resourceWrapper, rule, 1, args));
         assertFalse(ParamFlowChecker.passCheck(resourceWrapper, rule, 1, args));

File: sentinel-extension/sentinel-parameter-flow-control/src/test/java/com/alibaba/csp/sentinel/slots/block/flow/param/ParamFlowSlotTest.java
Patch:
@@ -24,8 +24,8 @@
 import static org.mockito.Mockito.when;
 
 import java.util.Collections;
-import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
+import java.util.concurrent.atomic.AtomicReference;
 
 import org.junit.After;
 import org.junit.Before;
@@ -100,9 +100,9 @@ public void testEntryWhenParamFlowExists() throws Throwable {
         ParameterMetric metric = mock(ParameterMetric.class);
 
         CacheMap<Object, AtomicLong> map = new ConcurrentLinkedHashMapWrapper<>(4000);
-        CacheMap<Object, AtomicLong> map2 = new ConcurrentLinkedHashMapWrapper<>(4000);
+        CacheMap<Object, AtomicReference<TokenUpdateStatus>> map2 = new ConcurrentLinkedHashMapWrapper<>(4000);
         when(metric.getRuleTimeCounter(rule)).thenReturn(map);
-        when(metric.getRuleTokenCounter(rule)).thenReturn(map2);
+        when(metric.getRuleStampedTokenCounter(rule)).thenReturn(map2);
         map.put(argToGo, new AtomicLong(TimeUtil.currentTimeMillis()));
 
         // Insert the mock metric to control pass or block.

File: sentinel-adapter/sentinel-apache-httpclient-adapter/src/test/java/com/alibaba/csp/sentinel/adapter/apache/httpclient/SentinelApacheHttpClientTest.java
Patch:
@@ -46,7 +46,7 @@
 @SpringBootTest(classes = TestApplication.class,
         webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT,
         properties = {
-                "server.port=8084"
+                "server.port=8184"
         })
 public class SentinelApacheHttpClientTest {
 

File: sentinel-extension/sentinel-datasource-etcd/src/main/java/com/alibaba/csp/sentinel/datasource/etcd/EtcdDataSource.java
Patch:
@@ -88,7 +88,8 @@ private void initWatcher() {
                 WatchEvent.EventType eventType = watchEvent.getEventType();
                 if (eventType == WatchEvent.EventType.PUT) {
                     try {
-                        T newValue = loadConfig();
+                        String newValueJson = watchEvent.getKeyValue().getValue().toString(charset);
+                        T newValue = parser.convert(newValueJson);
                         getProperty().updateValue(newValue);
                     } catch (Exception e) {
                         RecordLog.warn("[EtcdDataSource] Failed to update config", e);

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/logger/LogSlot.java
Patch:
@@ -38,12 +38,11 @@ public void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode
             fireEntry(context, resourceWrapper, obj, count, prioritized, args);
         } catch (BlockException e) {
             EagleEyeLogUtil.log(resourceWrapper.getName(), e.getClass().getSimpleName(), e.getRuleLimitApp(),
-                context.getOrigin(), e.getRule().getId(), count);
+                context.getOrigin(), e.getRule() != null ? e.getRule().getId() : null, count);
             throw e;
         } catch (Throwable e) {
             RecordLog.warn("Unexpected entry exception", e);
         }
-
     }
 
     @Override

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/eagleeye/EagleEye.java
Patch:
@@ -198,7 +198,7 @@ static public StatLoggerBuilder statLoggerBuilder(String loggerName) {
         return new StatLoggerBuilder(loggerName);
     }
 
-    static void setEagelEyeSelfAppender(EagleEyeAppender appender) {
+    static void setEagleEyeSelfAppender(EagleEyeAppender appender) {
         selfAppender = appender;
     }
 

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/Constants.java
Patch:
@@ -80,6 +80,7 @@ public final class Constants {
     public static final int ORDER_AUTHORITY_SLOT = -6000;
     public static final int ORDER_SYSTEM_SLOT = -5000;
     public static final int ORDER_FLOW_SLOT = -2000;
+    public static final int ORDER_DEFAULT_CIRCUIT_BREAKER_SLOT = -1500;
     public static final int ORDER_DEGRADE_SLOT = -1000;
 
     private Constants() {}

File: sentinel-core/src/test/java/com/alibaba/csp/sentinel/slots/DefaultSlotChainBuilderTest.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.csp.sentinel.slotchain.AbstractLinkedProcessorSlot;
 import com.alibaba.csp.sentinel.slotchain.ProcessorSlotChain;
 import com.alibaba.csp.sentinel.slots.block.authority.AuthoritySlot;
-import com.alibaba.csp.sentinel.slots.block.degrade.DefaultDegradeSlot;
+import com.alibaba.csp.sentinel.slots.block.degrade.DefaultCircuitBreakerSlot;
 import com.alibaba.csp.sentinel.slots.block.degrade.DegradeSlot;
 import com.alibaba.csp.sentinel.slots.block.flow.FlowSlot;
 import com.alibaba.csp.sentinel.slots.clusterbuilder.ClusterBuilderSlot;
@@ -69,10 +69,10 @@ public void testBuild() {
         assertTrue(next instanceof FlowSlot);
 
         next = next.getNext();
-        assertTrue(next instanceof DegradeSlot);
+        assertTrue(next instanceof DefaultCircuitBreakerSlot);
 
         next = next.getNext();
-        assertTrue(next instanceof DefaultDegradeSlot);
+        assertTrue(next instanceof DegradeSlot);
 
         next = next.getNext();
         assertNull(next);

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/spi/SpiLoader.java
Patch:
@@ -505,7 +505,7 @@ private void closeResources(Closeable... closeables) {
             try {
                 closeable.close();
             } catch (Exception e) {
-                if (firstException != null) {
+                if (firstException == null) {
                     firstException = e;
                 }
             }

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/statistic/base/LeapArray.java
Patch:
@@ -127,7 +127,7 @@ public WindowWrap<T> currentWindow(long timeMillis) {
          *
          * (1) Bucket is absent, then just create a new bucket and CAS update to circular array.
          * (2) Bucket is up-to-date, then just return the bucket.
-         * (3) Bucket is deprecated, then reset current bucket and clean all deprecated buckets.
+         * (3) Bucket is deprecated, then reset current bucket.
          */
         while (true) {
             WindowWrap<T> old = array.get(idx);

File: sentinel-adapter/sentinel-api-gateway-adapter-common/src/main/java/com/alibaba/csp/sentinel/adapter/gateway/common/rule/GatewayRuleManager.java
Patch:
@@ -119,7 +119,7 @@ public static boolean isValidRule(GatewayFlowRule rule) {
                 || rule.getGrade() < 0 || rule.getCount() < 0 || rule.getBurst() < 0 || rule.getControlBehavior() < 0) {
             return false;
         }
-        if (rule.getGrade() == RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER
+        if (rule.getControlBehavior() == RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER
                 && rule.getMaxQueueingTimeoutMs() < 0) {
             return false;
         }

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/statistic/StatisticSlot.java
Patch:
@@ -148,7 +148,8 @@ public void exit(Context context, ResourceWrapper resourceWrapper, int count, Ob
             handler.onExit(context, resourceWrapper, count, args);
         }
 
-        fireExit(context, resourceWrapper, count);
+        // fix bug https://github.com/alibaba/Sentinel/issues/2374
+        fireExit(context, resourceWrapper, count, args);
     }
 
     private void recordCompleteFor(Node node, int batchCount, long rt, Throwable error) {

File: sentinel-dashboard/src/main/java/com/alibaba/csp/sentinel/dashboard/client/SentinelApiClient.java
Patch:
@@ -163,7 +163,7 @@ protected boolean isSupportPost(String app, String ip, int port) {
     }
     
     /**
-     * Check wheter target instance (identified by tuple of app-ip:port)
+     * Check whether target instance (identified by tuple of app-ip:port)
      * supports the form of "xxxxx; xx=xx" in "Content-Type" header.
      * 
      * @param app target app name

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/system/SystemRuleManager.java
Patch:
@@ -287,7 +287,7 @@ public static void loadSystemConf(SystemRule rule) {
      * @param resourceWrapper the resource.
      * @throws BlockException when any system rule's threshold is exceeded.
      */
-    public static void checkSystem(ResourceWrapper resourceWrapper) throws BlockException {
+    public static void checkSystem(ResourceWrapper resourceWrapper, int count) throws BlockException {
         if (resourceWrapper == null) {
             return;
         }
@@ -302,8 +302,8 @@ public static void checkSystem(ResourceWrapper resourceWrapper) throws BlockExce
         }
 
         // total qps
-        double currentQps = Constants.ENTRY_NODE == null ? 0.0 : Constants.ENTRY_NODE.successQps();
-        if (currentQps > qps) {
+        double currentQps = Constants.ENTRY_NODE == null ? 0.0 : Constants.ENTRY_NODE.passQps();
+        if (currentQps + count > qps) {
             throw new SystemBlockException(resourceWrapper.getName(), "qps");
         }
 

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/system/SystemSlot.java
Patch:
@@ -35,7 +35,7 @@ public class SystemSlot extends AbstractLinkedProcessorSlot<DefaultNode> {
     @Override
     public void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, int count,
                       boolean prioritized, Object... args) throws Throwable {
-        SystemRuleManager.checkSystem(resourceWrapper);
+        SystemRuleManager.checkSystem(resourceWrapper, count);
         fireEntry(context, resourceWrapper, node, count, prioritized, args);
     }
 

File: sentinel-core/src/test/java/com/alibaba/csp/sentinel/slots/system/SystemRuleManagerTest.java
Patch:
@@ -92,7 +92,8 @@ public void testCheckMaxCpuUsageNotBBR() throws Exception {
 
         boolean blocked = false;
         try {
-            SystemRuleManager.checkSystem(new StringResourceWrapper("testCheckMaxCpuUsageNotBBR", EntryType.IN));
+            StringResourceWrapper resourceWrapper = new StringResourceWrapper("testCheckMaxCpuUsageNotBBR", EntryType.IN);
+            SystemRuleManager.checkSystem(resourceWrapper, 1);
         } catch (BlockException ex) {
             blocked = true;
         }

File: sentinel-dashboard/src/main/java/com/alibaba/csp/sentinel/dashboard/metric/MetricFetcher.java
Patch:
@@ -268,7 +268,7 @@ private void doFetchAppMetric(final String app) {
         lastFetchMs = lastFetchMs / 1000 * 1000;
         long endTime = lastFetchMs + FETCH_INTERVAL_SECOND * 1000;
         if (endTime > now - 1000 * 2) {
-            // to near
+            // too near
             return;
         }
         // update last_fetch in advance.

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/SphO.java
Patch:
@@ -31,7 +31,7 @@
  * Conceptually, physical or logical resource that need protection should be
  * surrounded by an entry. The requests to this resource will be blocked if any
  * criteria is met, eg. when any {@link Rule}'s threshold is exceeded. Once blocked,
- * {@link SphO}#enter() will return false.
+ * {@link SphO}#entry() will return false.
  *
  * <p>
  * To configure the criteria, we can use <code>XXXRuleManager.loadRules()</code> to add rules. eg.

File: sentinel-dashboard/src/main/java/com/alibaba/csp/sentinel/dashboard/client/SentinelApiClient.java
Patch:
@@ -503,7 +503,7 @@ public CompletableFuture<List<ParamFlowRuleEntity>> fetchParamFlowRulesOfMachine
             AssertUtil.isTrue(port > 0, "Bad machine port");
             return fetchItemsAsync(ip, port, GET_PARAM_RULE_PATH, null, ParamFlowRule.class)
                 .thenApply(rules -> rules.stream()
-                    .map(e -> ParamFlowRuleEntity.fromAuthorityRule(app, ip, port, e))
+                    .map(e -> ParamFlowRuleEntity.fromParamFlowRule(app, ip, port, e))
                     .collect(Collectors.toList())
                 );
         } catch (Exception e) {

File: sentinel-dashboard/src/main/java/com/alibaba/csp/sentinel/dashboard/datasource/entity/rule/ParamFlowRuleEntity.java
Patch:
@@ -38,7 +38,7 @@ public ParamFlowRuleEntity(ParamFlowRule rule) {
         this.rule = rule;
     }
 
-    public static ParamFlowRuleEntity fromAuthorityRule(String app, String ip, Integer port, ParamFlowRule rule) {
+    public static ParamFlowRuleEntity fromParamFlowRule(String app, String ip, Integer port, ParamFlowRule rule) {
         ParamFlowRuleEntity entity = new ParamFlowRuleEntity(rule);
         entity.setApp(app);
         entity.setIp(ip);

File: sentinel-demo/sentinel-demo-nacos-datasource/src/main/java/com/alibaba/csp/sentinel/demo/datasource/nacos/NacosConfigSender.java
Patch:
@@ -26,8 +26,8 @@
 public class NacosConfigSender {
 
     public static void main(String[] args) throws Exception {
-        final String remoteAddress = "localhost";
-        final String groupId = "Sentinel:Demo";
+        final String remoteAddress = "localhost:8848";
+        final String groupId = "Sentinel_Demo";
         final String dataId = "com.alibaba.csp.sentinel.demo.flow.rule";
         final String rule = "[\n"
             + "  {\n"

File: sentinel-demo/sentinel-demo-nacos-datasource/src/main/java/com/alibaba/csp/sentinel/demo/datasource/nacos/NacosDataSourceDemo.java
Patch:
@@ -37,9 +37,9 @@ public class NacosDataSourceDemo {
 
     private static final String KEY = "TestResource";
     // nacos server ip
-    private static final String remoteAddress = "localhost";
+    private static final String remoteAddress = "localhost:8848";
     // nacos group
-    private static final String groupId = "Sentinel:Demo";
+    private static final String groupId = "Sentinel_Demo";
     // nacos dataId
     private static final String dataId = "com.alibaba.csp.sentinel.demo.flow.rule";
     // if change to true, should be config NACOS_NAMESPACE_ID

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/node/metric/MetricTimerListener.java
Patch:
@@ -62,9 +62,7 @@ private void aggregate(Map<Long, List<MetricNode>> maps, Map<Long, MetricNode> m
             MetricNode metricNode = entry.getValue();
             metricNode.setResource(node.getName());
             metricNode.setClassification(node.getResourceType());
-            if (maps.get(time) == null) {
-                maps.put(time, new ArrayList<MetricNode>());
-            }
+            maps.computeIfAbsent(time, k -> new ArrayList<MetricNode>());
             List<MetricNode> nodes = maps.get(time);
             nodes.add(entry.getValue());
         }

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/FlowRuleManager.java
Patch:
@@ -77,7 +77,7 @@ public class FlowRuleManager {
     private static void startMetricTimerListener() {
         long flushInterval = SentinelConfig.metricLogFlushIntervalSec();
         if (flushInterval <= 0) {
-            RecordLog.info("[FlowRuleManager] The MetricTimerListener is'n started. If you want to start it, "
+            RecordLog.info("[FlowRuleManager] The MetricTimerListener isn't started. If you want to start it, "
                     + "please change the value(current: {}) of config({}) more than 0 to start it.", flushInterval,
                     SentinelConfig.METRIC_FLUSH_INTERVAL);
             return;

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/node/StatisticNode.java
Patch:
@@ -90,7 +90,7 @@
 public class StatisticNode implements Node {
 
     /**
-     * Holds statistics of the recent {@code INTERVAL} seconds. The {@code INTERVAL} is divided into time spans
+     * Holds statistics of the recent {@code INTERVAL} milliseconds. The {@code INTERVAL} is divided into time spans
      * by given {@code sampleCount}.
      */
     private transient volatile Metric rollingCounterInSecond = new ArrayMetric(SampleCountProperty.SAMPLE_COUNT,

File: sentinel-demo/sentinel-demo-rocketmq/src/main/java/com/alibaba/csp/sentinel/demo/rocketmq/Constants.java
Patch:
@@ -19,6 +19,7 @@ public final class Constants {
 
     public static final String TEST_GROUP_NAME = "sentinel-group";
     public static final String TEST_TOPIC_NAME = "SentinelTopicTest";
+    public static final String TEST_NAMESRV_ADDR = "127.0.0.1:9876";
 
     private Constants() {}
 }

File: sentinel-adapter/sentinel-api-gateway-adapter-common/src/main/java/com/alibaba/csp/sentinel/adapter/gateway/common/api/GatewayApiDefinitionManager.java
Patch:
@@ -27,7 +27,7 @@
 import com.alibaba.csp.sentinel.property.PropertyListener;
 import com.alibaba.csp.sentinel.property.SentinelProperty;
 import com.alibaba.csp.sentinel.util.AssertUtil;
-import com.alibaba.csp.sentinel.util.SpiLoader;
+import com.alibaba.csp.sentinel.spi.SpiLoader;
 import com.alibaba.csp.sentinel.util.StringUtil;
 
 /**
@@ -59,7 +59,7 @@ public final class GatewayApiDefinitionManager {
     }
 
     private static void initializeApiChangeObserverSpi() {
-        List<ApiDefinitionChangeObserver> listeners = SpiLoader.loadInstanceList(ApiDefinitionChangeObserver.class);
+        List<ApiDefinitionChangeObserver> listeners = SpiLoader.of(ApiDefinitionChangeObserver.class).loadInstanceList();
         for (ApiDefinitionChangeObserver e : listeners) {
             API_CHANGE_OBSERVERS.put(e.getClass().getCanonicalName(), e);
             RecordLog.info("[GatewayApiDefinitionManager] ApiDefinitionChangeObserver added: {}"

File: sentinel-adapter/sentinel-api-gateway-adapter-common/src/main/java/com/alibaba/csp/sentinel/adapter/gateway/common/slot/GatewayFlowSlot.java
Patch:
@@ -27,13 +27,13 @@
 import com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowException;
 import com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowRule;
 import com.alibaba.csp.sentinel.slots.block.flow.param.ParameterMetricStorage;
-import com.alibaba.csp.sentinel.spi.SpiOrder;
+import com.alibaba.csp.sentinel.spi.Spi;
 
 /**
  * @author Eric Zhao
  * @since 1.6.1
  */
-@SpiOrder(-4000)
+@Spi(order = -4000)
 public class GatewayFlowSlot extends AbstractLinkedProcessorSlot<DefaultNode> {
 
     @Override

File: sentinel-adapter/sentinel-api-gateway-adapter-common/src/main/java/com/alibaba/csp/sentinel/adapter/gateway/common/slot/GatewaySlotChainBuilder.java
Patch:
@@ -21,8 +21,9 @@
  * @author Eric Zhao
  * @since 1.6.1
  *
- * @deprecated since 1.7.2, we can use @SpiOrder(-4000) to adjust the order of {@link GatewayFlowSlot},
+ * @deprecated since 1.7.2, we can use @Spi(order = -4000) to adjust the order of {@link GatewayFlowSlot},
  * this class is reserved for compatibility with older versions.
+ *
  * @see GatewayFlowSlot
  * @see DefaultSlotChainBuilder
  */

File: sentinel-cluster/sentinel-cluster-client-default/src/main/java/com/alibaba/csp/sentinel/cluster/client/codec/ClientEntityCodecProvider.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.csp.sentinel.cluster.client.codec;
 
-import com.alibaba.csp.sentinel.util.SpiLoader;
+import com.alibaba.csp.sentinel.spi.SpiLoader;
 import com.alibaba.csp.sentinel.cluster.codec.request.RequestEntityWriter;
 import com.alibaba.csp.sentinel.cluster.codec.response.ResponseEntityDecoder;
 import com.alibaba.csp.sentinel.log.RecordLog;
@@ -34,15 +34,15 @@ public final class ClientEntityCodecProvider {
     }
 
     private static void resolveInstance() {
-        RequestEntityWriter writer = SpiLoader.loadFirstInstance(RequestEntityWriter.class);
+        RequestEntityWriter writer = SpiLoader.of(RequestEntityWriter.class).loadFirstInstance();
         if (writer == null) {
             RecordLog.warn("[ClientEntityCodecProvider] No existing request entity writer, resolve failed");
         } else {
             requestEntityWriter = writer;
             RecordLog.info("[ClientEntityCodecProvider] Request entity writer resolved: {}",
                 requestEntityWriter.getClass().getCanonicalName());
         }
-        ResponseEntityDecoder decoder = SpiLoader.loadFirstInstance(ResponseEntityDecoder.class);
+        ResponseEntityDecoder decoder = SpiLoader.of(ResponseEntityDecoder.class).loadFirstInstance();
         if (decoder == null) {
             RecordLog.warn("[ClientEntityCodecProvider] No existing response entity decoder, resolve failed");
         } else {

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/DefaultTokenService.java
Patch:
@@ -22,6 +22,7 @@
 import com.alibaba.csp.sentinel.cluster.flow.rule.ClusterParamFlowRuleManager;
 import com.alibaba.csp.sentinel.slots.block.flow.FlowRule;
 import com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowRule;
+import com.alibaba.csp.sentinel.spi.Spi;
 
 import java.util.Collection;
 
@@ -31,6 +32,7 @@
  * @author Eric Zhao
  * @since 1.4.0
  */
+@Spi(isDefault = true)
 public class DefaultTokenService implements TokenService {
 
     @Override

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/TokenServiceProvider.java
Patch:
@@ -16,9 +16,8 @@
 package com.alibaba.csp.sentinel.cluster.server;
 
 import com.alibaba.csp.sentinel.cluster.TokenService;
-import com.alibaba.csp.sentinel.cluster.flow.DefaultTokenService;
 import com.alibaba.csp.sentinel.log.RecordLog;
-import com.alibaba.csp.sentinel.util.SpiLoader;
+import com.alibaba.csp.sentinel.spi.SpiLoader;
 
 /**
  * @author Eric Zhao
@@ -37,7 +36,7 @@ public static TokenService getService() {
     }
 
     private static void resolveTokenServiceSpi() {
-        service = SpiLoader.loadFirstInstanceOrDefault(TokenService.class, DefaultTokenService.class);
+        service = SpiLoader.of(TokenService.class).loadFirstInstanceOrDefault();
         if (service != null) {
             RecordLog.info("[TokenServiceProvider] Global token service resolved: "
                 + service.getClass().getCanonicalName());

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/codec/ServerEntityCodecProvider.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.csp.sentinel.cluster.codec.request.RequestEntityDecoder;
 import com.alibaba.csp.sentinel.cluster.codec.response.ResponseEntityWriter;
 import com.alibaba.csp.sentinel.log.RecordLog;
-import com.alibaba.csp.sentinel.util.SpiLoader;
+import com.alibaba.csp.sentinel.spi.SpiLoader;
 
 /**
  * @author Eric Zhao
@@ -34,15 +34,15 @@ public final class ServerEntityCodecProvider {
     }
 
     private static void resolveInstance() {
-        ResponseEntityWriter writer = SpiLoader.loadFirstInstance(ResponseEntityWriter.class);
+        ResponseEntityWriter writer = SpiLoader.of(ResponseEntityWriter.class).loadFirstInstance();
         if (writer == null) {
             RecordLog.warn("[ServerEntityCodecProvider] No existing response entity writer, resolve failed");
         } else {
             responseEntityWriter = writer;
             RecordLog.info("[ServerEntityCodecProvider] Response entity writer resolved: {}",
                 responseEntityWriter.getClass().getCanonicalName());
         }
-        RequestEntityDecoder decoder = SpiLoader.loadFirstInstance(RequestEntityDecoder.class);
+        RequestEntityDecoder decoder = SpiLoader.of(RequestEntityDecoder.class).loadFirstInstance();
         if (decoder == null) {
             RecordLog.warn("[ServerEntityCodecProvider] No existing request entity decoder, resolve failed");
         } else {

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/cluster/client/TokenClientProvider.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.csp.sentinel.cluster.client;
 
 import com.alibaba.csp.sentinel.log.RecordLog;
-import com.alibaba.csp.sentinel.util.SpiLoader;
+import com.alibaba.csp.sentinel.spi.SpiLoader;
 
 /**
  * Provider for a universal {@link ClusterTokenClient} instance.
@@ -38,7 +38,7 @@ public static ClusterTokenClient getClient() {
     }
 
     private static void resolveTokenClientInstance() {
-        ClusterTokenClient resolvedClient = SpiLoader.loadFirstInstance(ClusterTokenClient.class);
+        ClusterTokenClient resolvedClient = SpiLoader.of(ClusterTokenClient.class).loadFirstInstance();
         if (resolvedClient == null) {
             RecordLog.info(
                 "[TokenClientProvider] No existing cluster token client, cluster client mode will not be activated");

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/cluster/server/EmbeddedClusterTokenServerProvider.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.csp.sentinel.cluster.server;
 
 import com.alibaba.csp.sentinel.log.RecordLog;
-import com.alibaba.csp.sentinel.util.SpiLoader;
+import com.alibaba.csp.sentinel.spi.SpiLoader;
 
 /**
  * @author Eric Zhao
@@ -31,7 +31,7 @@ public final class EmbeddedClusterTokenServerProvider {
     }
 
     private static void resolveInstance() {
-        EmbeddedClusterTokenServer s = SpiLoader.loadFirstInstance(EmbeddedClusterTokenServer.class);
+        EmbeddedClusterTokenServer s = SpiLoader.of(EmbeddedClusterTokenServer.class).loadFirstInstance();
         if (s == null) {
             RecordLog.warn("[EmbeddedClusterTokenServerProvider] No existing cluster token server, cluster server mode will not be activated");
         } else {

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/init/InitExecutor.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import com.alibaba.csp.sentinel.log.RecordLog;
-import com.alibaba.csp.sentinel.spi.ServiceLoaderUtil;
+import com.alibaba.csp.sentinel.spi.SpiLoader;
 
 /**
  * Load registered init functions and execute in order.
@@ -43,9 +43,9 @@ public static void doInit() {
             return;
         }
         try {
-            ServiceLoader<InitFunc> loader = ServiceLoaderUtil.getServiceLoader(InitFunc.class);
+            List<InitFunc> initFuncs = SpiLoader.of(InitFunc.class).loadInstanceListSorted();
             List<OrderWrapper> initList = new ArrayList<OrderWrapper>();
-            for (InitFunc initFunc : loader) {
+            for (InitFunc initFunc : initFuncs) {
                 RecordLog.info("[InitExecutor] Found init func: {}", initFunc.getClass().getCanonicalName());
                 insertSorted(initList, initFunc);
             }

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/metric/extension/MetricExtensionProvider.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.List;
 
 import com.alibaba.csp.sentinel.log.RecordLog;
-import com.alibaba.csp.sentinel.util.SpiLoader;
+import com.alibaba.csp.sentinel.spi.SpiLoader;
 
 /**
  * Get all {@link MetricExtension} via SPI.
@@ -35,7 +35,7 @@ public class MetricExtensionProvider {
     }
 
     private static void resolveInstance() {
-        List<MetricExtension> extensions = SpiLoader.loadInstanceList(MetricExtension.class);
+        List<MetricExtension> extensions = SpiLoader.of(MetricExtension.class).loadInstanceList();
 
         if (extensions.isEmpty()) {
             RecordLog.info("[MetricExtensionProvider] No existing MetricExtension found");

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slotchain/SlotChainProvider.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.alibaba.csp.sentinel.log.RecordLog;
 import com.alibaba.csp.sentinel.slots.DefaultSlotChainBuilder;
-import com.alibaba.csp.sentinel.util.SpiLoader;
+import com.alibaba.csp.sentinel.spi.SpiLoader;
 
 /**
  * A provider for creating slot chains via resolved slot chain builder SPI.
@@ -41,7 +41,7 @@ public static ProcessorSlotChain newSlotChain() {
         }
 
         // Resolve the slot chain builder SPI.
-        slotChainBuilder = SpiLoader.loadFirstInstanceOrDefault(SlotChainBuilder.class, DefaultSlotChainBuilder.class);
+        slotChainBuilder = SpiLoader.of(SlotChainBuilder.class).loadFirstInstanceOrDefault();
 
         if (slotChainBuilder == null) {
             // Should not go through here.

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/authority/AuthoritySlot.java
Patch:
@@ -18,20 +18,21 @@
 import java.util.Map;
 import java.util.Set;
 
+import com.alibaba.csp.sentinel.Constants;
 import com.alibaba.csp.sentinel.context.Context;
 import com.alibaba.csp.sentinel.node.DefaultNode;
 import com.alibaba.csp.sentinel.slotchain.AbstractLinkedProcessorSlot;
 import com.alibaba.csp.sentinel.slotchain.ProcessorSlot;
 import com.alibaba.csp.sentinel.slotchain.ResourceWrapper;
-import com.alibaba.csp.sentinel.spi.SpiOrder;
+import com.alibaba.csp.sentinel.spi.Spi;
 
 /**
  * A {@link ProcessorSlot} that dedicates to {@link AuthorityRule} checking.
  *
  * @author leyou
  * @author Eric Zhao
  */
-@SpiOrder(-6000)
+@Spi(order = Constants.ORDER_AUTHORITY_SLOT)
 public class AuthoritySlot extends AbstractLinkedProcessorSlot<DefaultNode> {
 
     @Override

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeSlot.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.util.List;
 
+import com.alibaba.csp.sentinel.Constants;
 import com.alibaba.csp.sentinel.Entry;
 import com.alibaba.csp.sentinel.context.Context;
 import com.alibaba.csp.sentinel.node.DefaultNode;
@@ -25,15 +26,15 @@
 import com.alibaba.csp.sentinel.slotchain.ResourceWrapper;
 import com.alibaba.csp.sentinel.slots.block.BlockException;
 import com.alibaba.csp.sentinel.slots.block.degrade.circuitbreaker.CircuitBreaker;
-import com.alibaba.csp.sentinel.spi.SpiOrder;
+import com.alibaba.csp.sentinel.spi.Spi;
 
 /**
  * A {@link ProcessorSlot} dedicates to circuit breaking.
  *
  * @author Carpenter Lee
  * @author Eric Zhao
  */
-@SpiOrder(-1000)
+@Spi(order = Constants.ORDER_DEGRADE_SLOT)
 public class DegradeSlot extends AbstractLinkedProcessorSlot<DefaultNode> {
 
     @Override

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/FlowSlot.java
Patch:
@@ -15,12 +15,13 @@
  */
 package com.alibaba.csp.sentinel.slots.block.flow;
 
+import com.alibaba.csp.sentinel.Constants;
 import com.alibaba.csp.sentinel.context.Context;
 import com.alibaba.csp.sentinel.node.DefaultNode;
 import com.alibaba.csp.sentinel.slotchain.AbstractLinkedProcessorSlot;
 import com.alibaba.csp.sentinel.slotchain.ResourceWrapper;
 import com.alibaba.csp.sentinel.slots.block.BlockException;
-import com.alibaba.csp.sentinel.spi.SpiOrder;
+import com.alibaba.csp.sentinel.spi.Spi;
 import com.alibaba.csp.sentinel.util.AssertUtil;
 import com.alibaba.csp.sentinel.util.function.Function;
 
@@ -137,7 +138,7 @@
  * @author jialiang.linjl
  * @author Eric Zhao
  */
-@SpiOrder(-2000)
+@Spi(order = Constants.ORDER_FLOW_SLOT)
 public class FlowSlot extends AbstractLinkedProcessorSlot<DefaultNode> {
 
     private final FlowRuleChecker checker;

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/clusterbuilder/ClusterBuilderSlot.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import com.alibaba.csp.sentinel.Constants;
 import com.alibaba.csp.sentinel.EntryType;
 import com.alibaba.csp.sentinel.context.Context;
 import com.alibaba.csp.sentinel.context.ContextUtil;
@@ -30,7 +31,7 @@
 import com.alibaba.csp.sentinel.slotchain.ProcessorSlotChain;
 import com.alibaba.csp.sentinel.slotchain.ResourceWrapper;
 import com.alibaba.csp.sentinel.slotchain.StringResourceWrapper;
-import com.alibaba.csp.sentinel.spi.SpiOrder;
+import com.alibaba.csp.sentinel.spi.Spi;
 
 /**
  * <p>
@@ -45,7 +46,7 @@
  *
  * @author jialiang.linjl
  */
-@SpiOrder(-9000)
+@Spi(isSingleton = false, order = Constants.ORDER_CLUSTER_BUILDER_SLOT)
 public class ClusterBuilderSlot extends AbstractLinkedProcessorSlot<DefaultNode> {
 
     /**

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/logger/LogSlot.java
Patch:
@@ -15,19 +15,20 @@
  */
 package com.alibaba.csp.sentinel.slots.logger;
 
+import com.alibaba.csp.sentinel.Constants;
 import com.alibaba.csp.sentinel.log.RecordLog;
 import com.alibaba.csp.sentinel.context.Context;
 import com.alibaba.csp.sentinel.node.DefaultNode;
 import com.alibaba.csp.sentinel.slotchain.AbstractLinkedProcessorSlot;
 import com.alibaba.csp.sentinel.slotchain.ResourceWrapper;
 import com.alibaba.csp.sentinel.slots.block.BlockException;
-import com.alibaba.csp.sentinel.spi.SpiOrder;
+import com.alibaba.csp.sentinel.spi.Spi;
 
 /**
  * A {@link com.alibaba.csp.sentinel.slotchain.ProcessorSlot} that is response for logging block exceptions
  * to provide concrete logs for troubleshooting.
  */
-@SpiOrder(-8000)
+@Spi(order = Constants.ORDER_LOG_SLOT)
 public class LogSlot extends AbstractLinkedProcessorSlot<DefaultNode> {
 
     @Override

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/nodeselector/NodeSelectorSlot.java
Patch:
@@ -15,14 +15,15 @@
  */
 package com.alibaba.csp.sentinel.slots.nodeselector;
 
+import com.alibaba.csp.sentinel.Constants;
 import com.alibaba.csp.sentinel.context.Context;
 import com.alibaba.csp.sentinel.context.ContextUtil;
 import com.alibaba.csp.sentinel.node.ClusterNode;
 import com.alibaba.csp.sentinel.node.DefaultNode;
 import com.alibaba.csp.sentinel.node.EntranceNode;
 import com.alibaba.csp.sentinel.slotchain.AbstractLinkedProcessorSlot;
 import com.alibaba.csp.sentinel.slotchain.ResourceWrapper;
-import com.alibaba.csp.sentinel.spi.SpiOrder;
+import com.alibaba.csp.sentinel.spi.Spi;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -123,7 +124,7 @@
  * @see EntranceNode
  * @see ContextUtil
  */
-@SpiOrder(-10000)
+@Spi(isSingleton = false, order = Constants.ORDER_NODE_SELECTOR_SLOT)
 public class NodeSelectorSlot extends AbstractLinkedProcessorSlot<Object> {
 
     /**

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/statistic/StatisticSlot.java
Patch:
@@ -21,7 +21,7 @@
 import com.alibaba.csp.sentinel.slotchain.ProcessorSlotEntryCallback;
 import com.alibaba.csp.sentinel.slotchain.ProcessorSlotExitCallback;
 import com.alibaba.csp.sentinel.slots.block.flow.PriorityWaitException;
-import com.alibaba.csp.sentinel.spi.SpiOrder;
+import com.alibaba.csp.sentinel.spi.Spi;
 import com.alibaba.csp.sentinel.util.TimeUtil;
 import com.alibaba.csp.sentinel.Constants;
 import com.alibaba.csp.sentinel.EntryType;
@@ -48,7 +48,7 @@
  * @author jialiang.linjl
  * @author Eric Zhao
  */
-@SpiOrder(-7000)
+@Spi(order = Constants.ORDER_STATISTIC_SLOT)
 public class StatisticSlot extends AbstractLinkedProcessorSlot<DefaultNode> {
 
     @Override

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/system/SystemSlot.java
Patch:
@@ -15,20 +15,21 @@
  */
 package com.alibaba.csp.sentinel.slots.system;
 
+import com.alibaba.csp.sentinel.Constants;
 import com.alibaba.csp.sentinel.context.Context;
 import com.alibaba.csp.sentinel.node.DefaultNode;
 import com.alibaba.csp.sentinel.slotchain.AbstractLinkedProcessorSlot;
 import com.alibaba.csp.sentinel.slotchain.ProcessorSlot;
 import com.alibaba.csp.sentinel.slotchain.ResourceWrapper;
-import com.alibaba.csp.sentinel.spi.SpiOrder;
+import com.alibaba.csp.sentinel.spi.Spi;
 
 /**
  * A {@link ProcessorSlot} that dedicates to {@link SystemRule} checking.
  *
  * @author jialiang.linjl
  * @author leyou
  */
-@SpiOrder(-5000)
+@Spi(order = Constants.ORDER_SYSTEM_SLOT)
 public class SystemSlot extends AbstractLinkedProcessorSlot<DefaultNode> {
 
     @Override

File: sentinel-demo/sentinel-demo-slot-chain-spi/src/main/java/com/alibaba/csp/sentinel/demo/slot/DemoSlot.java
Patch:
@@ -19,14 +19,14 @@
 import com.alibaba.csp.sentinel.node.DefaultNode;
 import com.alibaba.csp.sentinel.slotchain.AbstractLinkedProcessorSlot;
 import com.alibaba.csp.sentinel.slotchain.ResourceWrapper;
-import com.alibaba.csp.sentinel.spi.SpiOrder;
+import com.alibaba.csp.sentinel.spi.Spi;
 
 /**
  * An example slot that records current context and entry resource.
  *
  * @author Eric Zhao
  */
-@SpiOrder(-3500)
+@Spi(order = -3500)
 public class DemoSlot extends AbstractLinkedProcessorSlot<DefaultNode> {
 
     @Override

File: sentinel-extension/sentinel-parameter-flow-control/src/main/java/com/alibaba/csp/sentinel/slots/HotParamSlotChainBuilder.java
Patch:
@@ -21,8 +21,9 @@
  * @author Eric Zhao
  * @since 0.2.0
  *
- * @deprecated since 1.7.2, we can use @SpiOrder(-3000) to adjust the order of {@link ParamFlowSlot},
+ * @deprecated since 1.7.2, we can use @Spi(order = -3000) to adjust the order of {@link ParamFlowSlot},
  * this class is reserved for compatibility with older versions.
+ *
  * @see ParamFlowSlot
  * @see DefaultSlotChainBuilder
  */

File: sentinel-extension/sentinel-parameter-flow-control/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/param/ParamFlowSlot.java
Patch:
@@ -20,7 +20,7 @@
 import com.alibaba.csp.sentinel.slotchain.AbstractLinkedProcessorSlot;
 import com.alibaba.csp.sentinel.slotchain.ResourceWrapper;
 import com.alibaba.csp.sentinel.slots.block.BlockException;
-import com.alibaba.csp.sentinel.spi.SpiOrder;
+import com.alibaba.csp.sentinel.spi.Spi;
 
 import java.util.List;
 
@@ -31,7 +31,7 @@
  * @author Eric Zhao
  * @since 0.2.0
  */
-@SpiOrder(-3000)
+@Spi(order = -3000)
 public class ParamFlowSlot extends AbstractLinkedProcessorSlot<DefaultNode> {
 
     @Override

File: sentinel-transport/sentinel-transport-common/src/main/java/com/alibaba/csp/sentinel/command/CommandCenterProvider.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.alibaba.csp.sentinel.log.RecordLog;
 import com.alibaba.csp.sentinel.transport.CommandCenter;
-import com.alibaba.csp.sentinel.util.SpiLoader;
+import com.alibaba.csp.sentinel.spi.SpiLoader;
 
 /**
  * Provider for a universal {@link CommandCenter} instance.
@@ -34,7 +34,7 @@ public final class CommandCenterProvider {
     }
 
     private static void resolveInstance() {
-        CommandCenter resolveCommandCenter = SpiLoader.loadHighestPriorityInstance(CommandCenter.class);
+        CommandCenter resolveCommandCenter = SpiLoader.of(CommandCenter.class).loadHighestPriorityInstance();
 
         if (resolveCommandCenter == null) {
             RecordLog.warn("[CommandCenterProvider] WARN: No existing CommandCenter found");

File: sentinel-transport/sentinel-transport-common/src/main/java/com/alibaba/csp/sentinel/heartbeat/HeartbeatSenderProvider.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.alibaba.csp.sentinel.log.RecordLog;
 import com.alibaba.csp.sentinel.transport.HeartbeatSender;
-import com.alibaba.csp.sentinel.util.SpiLoader;
+import com.alibaba.csp.sentinel.spi.SpiLoader;
 
 /**
  * @author Eric Zhao
@@ -32,7 +32,7 @@ public final class HeartbeatSenderProvider {
     }
 
     private static void resolveInstance() {
-        HeartbeatSender resolved = SpiLoader.loadHighestPriorityInstance(HeartbeatSender.class);
+        HeartbeatSender resolved = SpiLoader.of(HeartbeatSender.class).loadHighestPriorityInstance();
         if (resolved == null) {
             RecordLog.warn("[HeartbeatSenderProvider] WARN: No existing HeartbeatSender found");
         } else {

File: sentinel-transport/sentinel-transport-netty-http/src/main/java/com/alibaba/csp/sentinel/transport/command/NettyHttpCommandCenter.java
Patch:
@@ -22,7 +22,7 @@
 import com.alibaba.csp.sentinel.command.CommandHandler;
 import com.alibaba.csp.sentinel.command.CommandHandlerProvider;
 import com.alibaba.csp.sentinel.concurrent.NamedThreadFactory;
-import com.alibaba.csp.sentinel.spi.SpiOrder;
+import com.alibaba.csp.sentinel.spi.Spi;
 import com.alibaba.csp.sentinel.transport.command.netty.HttpServer;
 import com.alibaba.csp.sentinel.log.RecordLog;
 import com.alibaba.csp.sentinel.transport.CommandCenter;
@@ -32,7 +32,7 @@
  *
  * @author Eric Zhao
  */
-@SpiOrder(SpiOrder.LOWEST_PRECEDENCE - 100)
+@Spi(order = Spi.ORDER_LOWEST - 100)
 public class NettyHttpCommandCenter implements CommandCenter {
 
     private final HttpServer server = new HttpServer();

File: sentinel-transport/sentinel-transport-netty-http/src/main/java/com/alibaba/csp/sentinel/transport/heartbeat/HttpHeartbeatSender.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.csp.sentinel.Constants;
 import com.alibaba.csp.sentinel.config.SentinelConfig;
 import com.alibaba.csp.sentinel.log.RecordLog;
-import com.alibaba.csp.sentinel.spi.SpiOrder;
+import com.alibaba.csp.sentinel.spi.Spi;
 import com.alibaba.csp.sentinel.transport.HeartbeatSender;
 import com.alibaba.csp.sentinel.transport.config.TransportConfig;
 import com.alibaba.csp.sentinel.transport.endpoint.Protocol;
@@ -42,7 +42,7 @@
  * @author Carpenter Lee
  * @author Leo Li
  */
-@SpiOrder(SpiOrder.LOWEST_PRECEDENCE - 100)
+@Spi(order = Spi.ORDER_LOWEST - 100)
 public class HttpHeartbeatSender implements HeartbeatSender {
 
     private final CloseableHttpClient client;

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/FlowRuleComparator.java
Patch:
@@ -28,7 +28,7 @@ public class FlowRuleComparator implements Comparator<FlowRule> {
 
     @Override
     public int compare(FlowRule o1, FlowRule o2) {
-        // Clustered mode will be on the top.
+        // the FlowRule in Clustered mode will be put at the end.
         if (o1.isClusterMode() && !o2.isClusterMode()) {
             return 1;
         }

File: sentinel-core/src/test/java/com/alibaba/csp/sentinel/TracerTest.java
Patch:
@@ -17,12 +17,14 @@ public class TracerTest extends Tracer {
     public void setUp() {
         ContextTestUtil.cleanUpContext();
         ContextTestUtil.resetContextMap();
+        Tracer.exceptionPredicate = null;
     }
 
     @After
     public void tearDown() {
         ContextTestUtil.cleanUpContext();
         ContextTestUtil.resetContextMap();
+        Tracer.exceptionPredicate = null;
     }
 
     @Test

File: sentinel-adapter/sentinel-dubbo-adapter/src/test/java/com/alibaba/csp/sentinel/adapter/dubbo/fallback/DubboFallbackRegistryTest.java
Patch:
@@ -23,7 +23,6 @@
 import com.alibaba.dubbo.rpc.Invoker;
 import com.alibaba.dubbo.rpc.Result;
 import com.alibaba.dubbo.rpc.RpcResult;
-
 import org.junit.Assert;
 import org.junit.Test;
 

File: sentinel-core/src/test/java/com/alibaba/csp/sentinel/slots/block/flow/FlowSlotTest.java
Patch:
@@ -29,7 +29,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.*;
 import static org.mockito.Mockito.*;
 
 /**

File: sentinel-adapter/sentinel-api-gateway-adapter-common/src/main/java/com/alibaba/csp/sentinel/adapter/gateway/common/command/UpdateGatewayRuleCommandHandler.java
Patch:
@@ -51,7 +51,7 @@ public CommandResponse<String> handle(CommandRequest request) {
             return CommandResponse.ofFailure(e, "decode gateway rule data error");
         }
 
-        RecordLog.info(String.format("[API Server] Receiving rule change (type: gateway rule): %s", data));
+        RecordLog.info("[API Server] Receiving rule change (type: gateway rule): {}", data);
 
         String result = SUCCESS_MSG;
 	    Set<GatewayFlowRule> flowRules = JSON.parseObject(data, new TypeReference<Set<GatewayFlowRule>>() {
@@ -93,4 +93,4 @@ public synchronized static void setWritableDataSource(WritableDataSource<Set<Gat
 
     private static final String SUCCESS_MSG = "success";
     private static final String WRITE_DS_FAILURE_MSG = "partial success (write data source failed)";
-}
\ No newline at end of file
+}

File: sentinel-adapter/sentinel-api-gateway-adapter-common/src/main/java/com/alibaba/csp/sentinel/adapter/gateway/common/rule/GatewayRuleManager.java
Patch:
@@ -149,13 +149,13 @@ private static final class GatewayRulePropertyListener implements PropertyListen
         @Override
         public void configUpdate(Set<GatewayFlowRule> conf) {
             applyGatewayRuleInternal(conf);
-            RecordLog.info("[GatewayRuleManager] Gateway flow rules received: " + GATEWAY_RULE_MAP);
+            RecordLog.info("[GatewayRuleManager] Gateway flow rules received: {}", GATEWAY_RULE_MAP);
         }
 
         @Override
         public void configLoad(Set<GatewayFlowRule> conf) {
             applyGatewayRuleInternal(conf);
-            RecordLog.info("[GatewayRuleManager] Gateway flow rules loaded: " + GATEWAY_RULE_MAP);
+            RecordLog.info("[GatewayRuleManager] Gateway flow rules loaded: {}", GATEWAY_RULE_MAP);
         }
 
         private int getIdxInternal(Map<String, Integer> idxMap, String resourceName) {
@@ -271,7 +271,7 @@ private void applyToConvertedParamMap(Set<ParamFlowRule> paramFlowRules) {
             CONVERTED_PARAM_RULE_MAP.clear();
             CONVERTED_PARAM_RULE_MAP.putAll(newRuleMap);
 
-            RecordLog.info("[GatewayRuleManager] Converted internal param rules: " + CONVERTED_PARAM_RULE_MAP);
+            RecordLog.info("[GatewayRuleManager] Converted internal param rules: {}", CONVERTED_PARAM_RULE_MAP);
         }
     }
 }

File: sentinel-cluster/sentinel-cluster-client-default/src/main/java/com/alibaba/csp/sentinel/cluster/client/DefaultClusterTokenClient.java
Patch:
@@ -79,7 +79,7 @@ private void initNewConnection() {
         try {
             this.transportClient = new NettyTransportClient(host, port);
             this.serverDescriptor = new TokenServerDescriptor(host, port);
-            RecordLog.info("[DefaultClusterTokenClient] New client created: " + serverDescriptor);
+            RecordLog.info("[DefaultClusterTokenClient] New client created: {}", serverDescriptor);
         } catch (Exception ex) {
             RecordLog.warn("[DefaultClusterTokenClient] Failed to initialize new token client", ex);
         }
@@ -97,7 +97,7 @@ private void changeServer(/*@Valid*/ ClusterClientAssignConfig config) {
             this.transportClient = new NettyTransportClient(config.getServerHost(), config.getServerPort());
             this.serverDescriptor = new TokenServerDescriptor(config.getServerHost(), config.getServerPort());
             startClientIfScheduled();
-            RecordLog.info("[DefaultClusterTokenClient] New client created: " + serverDescriptor);
+            RecordLog.info("[DefaultClusterTokenClient] New client created: {}", serverDescriptor);
         } catch (Exception ex) {
             RecordLog.warn("[DefaultClusterTokenClient] Failed to change remote token server", ex);
         }

File: sentinel-cluster/sentinel-cluster-client-default/src/main/java/com/alibaba/csp/sentinel/cluster/client/NettyTransportClient.java
Patch:
@@ -126,8 +126,7 @@ public void operationComplete(ChannelFuture future) {
                     } else {
                         failConnectedTime.set(0);
                         channel = future.channel();
-                        RecordLog.info(
-                            "[NettyTransportClient] Successfully connect to server <" + host + ":" + port + ">");
+                        RecordLog.info("[NettyTransportClient] Successfully connect to server <{}:{}>", host, port);
                     }
                 }
             });
@@ -144,7 +143,7 @@ public void run() {
                 @Override
                 public void run() {
                     if (shouldRetry.get()) {
-                        RecordLog.info("[NettyTransportClient] Reconnecting to server <" + host + ":" + port + ">");
+                        RecordLog.info("[NettyTransportClient] Reconnecting to server <{}:{}>", host, port);
                         try {
                             startInternal();
                         } catch (Exception e) {

File: sentinel-cluster/sentinel-cluster-client-default/src/main/java/com/alibaba/csp/sentinel/cluster/client/config/ClusterClientConfigManager.java
Patch:
@@ -131,7 +131,7 @@ private synchronized void applyConfig(ClusterClientAssignConfig config) {
                 return;
             }
 
-            RecordLog.info("[ClusterClientConfigManager] Assign to new target token server: " + config);
+            RecordLog.info("[ClusterClientConfigManager] Assign to new target token server: {}", config);
 
             updateServerAssignment(config);
         }
@@ -156,11 +156,11 @@ public void configUpdate(ClusterClientConfig config) {
         private synchronized void applyConfig(ClusterClientConfig config) {
             if (!isValidClientConfig(config)) {
                 RecordLog.warn(
-                    "[ClusterClientConfigManager] Invalid cluster client config, ignoring: " + config);
+                    "[ClusterClientConfigManager] Invalid cluster client config, ignoring: {}", config);
                 return;
             }
 
-            RecordLog.info("[ClusterClientConfigManager] Updating to new client config: " + config);
+            RecordLog.info("[ClusterClientConfigManager] Updating to new client config: {}", config);
 
             updateClientConfigChange(config);
         }

File: sentinel-cluster/sentinel-cluster-client-default/src/main/java/com/alibaba/csp/sentinel/cluster/client/handler/TokenClientHandler.java
Patch:
@@ -48,7 +48,7 @@ public TokenClientHandler(AtomicInteger currentState, Runnable disconnectCallbac
     public void channelActive(ChannelHandlerContext ctx) throws Exception {
         currentState.set(ClientConstants.CLIENT_STATUS_STARTED);
         fireClientPing(ctx);
-        RecordLog.info("[TokenClientHandler] Client handler active, remote address: " + getRemoteAddress(ctx));
+        RecordLog.info("[TokenClientHandler] Client handler active, remote address: {}", getRemoteAddress(ctx));
     }
 
     @Override
@@ -90,12 +90,12 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws E
 
     @Override
     public void channelInactive(ChannelHandlerContext ctx) throws Exception {
-        RecordLog.info("[TokenClientHandler] Client handler inactive, remote address: " + getRemoteAddress(ctx));
+        RecordLog.info("[TokenClientHandler] Client handler inactive, remote address: {}", getRemoteAddress(ctx));
     }
 
     @Override
     public void channelUnregistered(ChannelHandlerContext ctx) throws Exception {
-        RecordLog.info("[TokenClientHandler] Client channel unregistered, remote address: " + getRemoteAddress(ctx));
+        RecordLog.info("[TokenClientHandler] Client channel unregistered, remote address: {}", getRemoteAddress(ctx));
         currentState.set(ClientConstants.CLIENT_STATUS_OFF);
 
         disconnectCallback.run();

File: sentinel-cluster/sentinel-cluster-client-default/src/main/java/com/alibaba/csp/sentinel/command/handler/ModifyClusterClientConfigHandler.java
Patch:
@@ -44,7 +44,7 @@ public CommandResponse<String> handle(CommandRequest request) {
         }
         try {
             data = URLDecoder.decode(data, "utf-8");
-            RecordLog.info("[ModifyClusterClientConfigHandler] Receiving cluster client config: " + data);
+            RecordLog.info("[ModifyClusterClientConfigHandler] Receiving cluster client config: {}", data);
             ClusterClientStateEntity entity = JSON.parseObject(data, ClusterClientStateEntity.class);
 
             ClusterClientConfigManager.applyNewConfig(entity.toClientConfig());

File: sentinel-cluster/sentinel-cluster-common-default/src/main/java/com/alibaba/csp/sentinel/cluster/registry/ConfigSupplierRegistry.java
Patch:
@@ -52,8 +52,8 @@ public static Supplier<String> getNamespaceSupplier() {
     public static void setNamespaceSupplier(Supplier<String> namespaceSupplier) {
         AssertUtil.notNull(namespaceSupplier, "namespaceSupplier cannot be null");
         ConfigSupplierRegistry.namespaceSupplier = namespaceSupplier;
-        RecordLog.info("[ConfigSupplierRegistry] New namespace supplier provided, current supplied: "
-            + namespaceSupplier.get());
+        RecordLog.info("[ConfigSupplierRegistry] New namespace supplier provided, current supplied: {}",
+            namespaceSupplier.get());
     }
 
     private ConfigSupplierRegistry() {}

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/statistic/concurrent/expire/RegularExpireStrategy.java
Patch:
@@ -97,7 +97,7 @@ private void clearToken() {
         for (int i = 0; i < executeCount && i < keyList.size(); i++) {
             // time out execution exit
             if (System.currentTimeMillis() - start > executeDuration) {
-                RecordLog.info("[RegularExpireStrategy] End the process of expired token detection because of execute time is more than executeDuration:", executeDuration);
+                RecordLog.info("[RegularExpireStrategy] End the process of expired token detection because of execute time is more than executeDuration: {}", executeDuration);
                 break;
             }
             Long key = keyList.get(i);

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/NettyTransportServer.java
Patch:
@@ -118,7 +118,7 @@ public void operationComplete(ChannelFuture future) {
                         RecordLog.info("[NettyTransportServer] Failed to start token server when retrying", e);
                     }
                 } else {
-                    RecordLog.info("[NettyTransportServer] Token server started success at port " + port);
+                    RecordLog.info("[NettyTransportServer] Token server started success at port {}", port);
                     currentState.compareAndSet(SERVER_STATUS_STARTING, SERVER_STATUS_STARTED);
                 }
             }

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/command/handler/ModifyClusterServerFlowConfigHandler.java
Patch:
@@ -46,7 +46,7 @@ public CommandResponse<String> handle(CommandRequest request) {
             data = URLDecoder.decode(data, "utf-8");
 
             if (StringUtil.isEmpty(namespace)) {
-                RecordLog.info("[ModifyClusterServerFlowConfigHandler] Receiving cluster server global flow config: " + data);
+                RecordLog.info("[ModifyClusterServerFlowConfigHandler] Receiving cluster server global flow config: {}", data);
                 ServerFlowConfig config = JSON.parseObject(data, ServerFlowConfig.class);
                 if (!ClusterServerConfigManager.isValidFlowConfig(config)) {
                     CommandResponse.ofFailure(new IllegalArgumentException("Bad flow config"));

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/command/handler/ModifyServerNamespaceSetHandler.java
Patch:
@@ -44,7 +44,7 @@ public CommandResponse<String> handle(CommandRequest request) {
         }
         try {
             data = URLDecoder.decode(data, "utf-8");
-            RecordLog.info("[ModifyServerNamespaceSetHandler] Receiving cluster server namespace set: " + data);
+            RecordLog.info("[ModifyServerNamespaceSetHandler] Receiving cluster server namespace set: {}", data);
             Set<String> set = JSON.parseObject(data, new TypeReference<Set<String>>() {});
             ClusterServerConfigManager.loadServerNamespaceSet(set);
             return CommandResponse.ofSuccess("success");

File: sentinel-cluster/sentinel-cluster-server-envoy-rls/src/main/java/com/alibaba/csp/sentinel/cluster/server/envoy/rls/rule/EnvoyRlsRuleManager.java
Patch:
@@ -91,7 +91,7 @@ public synchronized void configUpdate(List<EnvoyRlsRule> conf) {
 
             RULE_MAP.clear();
             RULE_MAP.putAll(ruleMap);
-            RecordLog.info("[EnvoyRlsRuleManager] Envoy RLS rules loaded: " + flowRules);
+            RecordLog.info("[EnvoyRlsRuleManager] Envoy RLS rules loaded: {}", flowRules);
 
             // Use the "default" namespace.
             ClusterFlowRuleManager.loadRules(ServerConstants.DEFAULT_NAMESPACE, flowRules);

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/cluster/client/TokenClientProvider.java
Patch:
@@ -44,8 +44,8 @@ private static void resolveTokenClientInstance() {
                 "[TokenClientProvider] No existing cluster token client, cluster client mode will not be activated");
         } else {
             client = resolvedClient;
-            RecordLog.info(
-                "[TokenClientProvider] Cluster token client resolved: " + client.getClass().getCanonicalName());
+            RecordLog.info("[TokenClientProvider] Cluster token client resolved: {}",
+                client.getClass().getCanonicalName());
         }
     }
 

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/cluster/server/EmbeddedClusterTokenServerProvider.java
Patch:
@@ -36,7 +36,8 @@ private static void resolveInstance() {
             RecordLog.warn("[EmbeddedClusterTokenServerProvider] No existing cluster token server, cluster server mode will not be activated");
         } else {
             server = s;
-            RecordLog.info("[EmbeddedClusterTokenServerProvider] Cluster token server resolved: " + server.getClass().getCanonicalName());
+            RecordLog.info("[EmbeddedClusterTokenServerProvider] Cluster token server resolved: {}",
+                server.getClass().getCanonicalName());
         }
     }
 

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/config/SentinelConfig.java
Patch:
@@ -68,7 +68,7 @@ public final class SentinelConfig {
             loadProps();
             resolveAppName();
             resolveAppType();
-            RecordLog.info("[SentinelConfig] Application type resolved: " + appType);
+            RecordLog.info("[SentinelConfig] Application type resolved: {}", appType);
         } catch (Throwable ex) {
             RecordLog.warn("[SentinelConfig] Failed to initialize", ex);
             ex.printStackTrace();

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/config/SentinelConfigLoader.java
Patch:
@@ -62,7 +62,7 @@ private static void load() {
 
         Properties p = ConfigUtil.loadProperties(fileName);
         if (p != null && !p.isEmpty()) {
-            RecordLog.info("[SentinelConfigLoader] Loading Sentinel config from " + fileName);
+            RecordLog.info("[SentinelConfigLoader] Loading Sentinel config from {}", fileName);
             properties.putAll(p);
         }
 

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/init/InitExecutor.java
Patch:
@@ -46,13 +46,13 @@ public static void doInit() {
             ServiceLoader<InitFunc> loader = ServiceLoaderUtil.getServiceLoader(InitFunc.class);
             List<OrderWrapper> initList = new ArrayList<OrderWrapper>();
             for (InitFunc initFunc : loader) {
-                RecordLog.info("[InitExecutor] Found init func: " + initFunc.getClass().getCanonicalName());
+                RecordLog.info("[InitExecutor] Found init func: {}", initFunc.getClass().getCanonicalName());
                 insertSorted(initList, initFunc);
             }
             for (OrderWrapper w : initList) {
                 w.func.init();
-                RecordLog.info(String.format("[InitExecutor] Executing %s with order %d",
-                    w.func.getClass().getCanonicalName(), w.order));
+                RecordLog.info("[InitExecutor] Executing {} with order {}",
+                    w.func.getClass().getCanonicalName(), w.order);
             }
         } catch (Exception ex) {
             RecordLog.warn("[InitExecutor] WARN: Initialization failed", ex);

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/metric/extension/MetricExtensionProvider.java
Patch:
@@ -41,7 +41,7 @@ private static void resolveInstance() {
             RecordLog.info("[MetricExtensionProvider] No existing MetricExtension found");
         } else {
             metricExtensions.addAll(extensions);
-            RecordLog.info("[MetricExtensionProvider] MetricExtension resolved, size=" + extensions.size());
+            RecordLog.info("[MetricExtensionProvider] MetricExtension resolved, size={}", extensions.size());
         }
     }
 

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/node/IntervalProperty.java
Patch:
@@ -62,7 +62,7 @@ public static void updateInterval(int newInterval) {
             INTERVAL = newInterval;
             ClusterBuilderSlot.resetClusterNodes();
         }
-        RecordLog.info("[IntervalProperty] INTERVAL updated to: " + INTERVAL);
+        RecordLog.info("[IntervalProperty] INTERVAL updated to: {}", INTERVAL);
     }
 
 }

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/node/OccupyTimeoutProperty.java
Patch:
@@ -67,13 +67,13 @@ public static void updateTimeout(int newInterval) {
             return;
         }
         if (newInterval > IntervalProperty.INTERVAL) {
-            RecordLog.warn("[OccupyTimeoutProperty] Illegal timeout value will be ignored: " + occupyTimeout
-                + ", should <= " + IntervalProperty.INTERVAL);
+            RecordLog.warn("[OccupyTimeoutProperty] Illegal timeout value will be ignored: {}, should <= {}",
+                occupyTimeout, IntervalProperty.INTERVAL);
             return;
         }
         if (newInterval != occupyTimeout) {
             occupyTimeout = newInterval;
         }
-        RecordLog.info("[OccupyTimeoutProperty] occupyTimeout updated to: " + occupyTimeout);
+        RecordLog.info("[OccupyTimeoutProperty] occupyTimeout updated to: {}", occupyTimeout);
     }
 }

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/node/SampleCountProperty.java
Patch:
@@ -60,6 +60,6 @@ public static void updateSampleCount(int newSampleCount) {
             SAMPLE_COUNT = newSampleCount;
             ClusterBuilderSlot.resetClusterNodes();
         }
-        RecordLog.info("SAMPLE_COUNT updated to: " + SAMPLE_COUNT);
+        RecordLog.info("SAMPLE_COUNT updated to: {}", SAMPLE_COUNT);
     }
 }

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/property/DynamicSentinelProperty.java
Patch:
@@ -50,7 +50,7 @@ public boolean updateValue(T newValue) {
         if (isEqual(value, newValue)) {
             return false;
         }
-        RecordLog.info("[DynamicSentinelProperty] Config will be updated to: " + newValue);
+        RecordLog.info("[DynamicSentinelProperty] Config will be updated to: {}", newValue);
 
         value = newValue;
         for (PropertyListener<T> listener : listeners) {

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slotchain/SlotChainProvider.java
Patch:
@@ -48,8 +48,8 @@ public static ProcessorSlotChain newSlotChain() {
             RecordLog.warn("[SlotChainProvider] Wrong state when resolving slot chain builder, using default");
             slotChainBuilder = new DefaultSlotChainBuilder();
         } else {
-            RecordLog.info("[SlotChainProvider] Global slot chain builder resolved: "
-                + slotChainBuilder.getClass().getCanonicalName());
+            RecordLog.info("[SlotChainProvider] Global slot chain builder resolved: {}",
+                slotChainBuilder.getClass().getCanonicalName());
         }
         return slotChainBuilder.build();
     }

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/FlowRuleManager.java
Patch:
@@ -133,7 +133,7 @@ public void configUpdate(List<FlowRule> value) {
                 flowRules.clear();
                 flowRules.putAll(rules);
             }
-            RecordLog.info("[FlowRuleManager] Flow rules received: " + flowRules);
+            RecordLog.info("[FlowRuleManager] Flow rules received: {}", flowRules);
         }
 
         @Override
@@ -143,7 +143,7 @@ public void configLoad(List<FlowRule> conf) {
                 flowRules.clear();
                 flowRules.putAll(rules);
             }
-            RecordLog.info("[FlowRuleManager] Flow rules loaded: " + flowRules);
+            RecordLog.info("[FlowRuleManager] Flow rules loaded: {}", flowRules);
         }
     }
 

File: sentinel-extension/sentinel-datasource-apollo/src/main/java/com/alibaba/csp/sentinel/datasource/apollo/ApolloDataSource.java
Patch:
@@ -53,7 +53,7 @@ public ApolloDataSource(String namespaceName, String ruleKey, String defaultRule
 
         initialize();
 
-        RecordLog.info(String.format("Initialized rule for namespace: %s, rule key: %s", namespaceName, ruleKey));
+        RecordLog.info("Initialized rule for namespace: {}, rule key: {}", namespaceName, ruleKey);
     }
 
     private void initialize() {
@@ -80,7 +80,7 @@ public void onChange(ConfigChangeEvent changeEvent) {
                 ConfigChange change = changeEvent.getChange(ruleKey);
                 //change is never null because the listener will only notify for this key
                 if (change != null) {
-                    RecordLog.info("[ApolloDataSource] Received config changes: " + change.toString());
+                    RecordLog.info("[ApolloDataSource] Received config changes: {}", change);
                 }
                 loadAndUpdateRules();
             }

File: sentinel-extension/sentinel-datasource-extension/src/main/java/com/alibaba/csp/sentinel/datasource/FileWritableDataSource.java
Patch:
@@ -73,7 +73,7 @@ public void write(T value) throws Exception {
                 outputStream = new FileOutputStream(file);
                 byte[] bytesArray = convertResult.getBytes(charset);
 
-                RecordLog.info(String.format("[FileWritableDataSource] Writing to file %s: %s", file.toString(), convertResult));
+                RecordLog.info("[FileWritableDataSource] Writing to file {}: {}", file, convertResult);
                 outputStream.write(bytesArray);
                 outputStream.flush();
             } finally {

File: sentinel-extension/sentinel-datasource-nacos/src/main/java/com/alibaba/csp/sentinel/datasource/nacos/NacosDataSource.java
Patch:
@@ -99,8 +99,8 @@ public Executor getExecutor() {
 
             @Override
             public void receiveConfigInfo(final String configInfo) {
-                RecordLog.info(String.format("[NacosDataSource] New property value received for (properties: %s) (dataId: %s, groupId: %s): %s",
-                    properties, dataId, groupId, configInfo));
+                RecordLog.info("[NacosDataSource] New property value received for (properties: {}) (dataId: {}, groupId: {}): {}",
+                    properties, dataId, groupId, configInfo);
                 T newValue = NacosDataSource.this.parser.convert(configInfo);
                 // Update the new value to the property.
                 getProperty().updateValue(newValue);

File: sentinel-extension/sentinel-datasource-redis/src/main/java/com/alibaba/csp/sentinel/datasource/redis/RedisDataSource.java
Patch:
@@ -172,7 +172,7 @@ private class DelegatingRedisPubSubListener extends RedisPubSubAdapter<String, S
 
         @Override
         public void message(String channel, String message) {
-            RecordLog.info(String.format("[RedisDataSource] New property value received for channel %s: %s", channel, message));
+            RecordLog.info("[RedisDataSource] New property value received for channel {}: {}", channel, message);
             getProperty().updateValue(parser.convert(message));
         }
     }

File: sentinel-extension/sentinel-datasource-zookeeper/src/main/java/com/alibaba/csp/sentinel/datasource/zookeeper/ZookeeperDataSource.java
Patch:
@@ -110,8 +110,8 @@ public void nodeChanged() {
 
                     try {
                         T newValue = loadConfig();
-                        RecordLog.info(String.format("[ZookeeperDataSource] New property value received for (%s, %s): %s",
-                                serverAddr, path, newValue));
+                        RecordLog.info("[ZookeeperDataSource] New property value received for ({}, {}): {}",
+                            serverAddr, path, newValue);
                         // Update the new value to the property.
                         getProperty().updateValue(newValue);
                     } catch (Exception ex) {

File: sentinel-extension/sentinel-parameter-flow-control/src/main/java/com/alibaba/csp/sentinel/command/handler/ModifyParamFlowRulesCommandHandler.java
Patch:
@@ -51,7 +51,7 @@ public CommandResponse<String> handle(CommandRequest request) {
             return CommandResponse.ofFailure(e, "decode rule data error");
         }
 
-        RecordLog.info(String.format("[API Server] Receiving rule change (type:parameter flow rule): %s", data));
+        RecordLog.info("[API Server] Receiving rule change (type:parameter flow rule): {}", data);
 
         String result = SUCCESS_MSG;
         List<ParamFlowRule> flowRules = JSONArray.parseArray(data, ParamFlowRule.class);

File: sentinel-extension/sentinel-parameter-flow-control/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/param/ParamFlowRuleManager.java
Patch:
@@ -105,7 +105,7 @@ public void configUpdate(List<ParamFlowRule> list) {
                 PARAM_FLOW_RULES.clear();
                 PARAM_FLOW_RULES.putAll(rules);
             }
-            RecordLog.info("[ParamFlowRuleManager] Parameter flow rules received: " + PARAM_FLOW_RULES);
+            RecordLog.info("[ParamFlowRuleManager] Parameter flow rules received: {}", PARAM_FLOW_RULES);
         }
 
         @Override
@@ -115,7 +115,7 @@ public void configLoad(List<ParamFlowRule> list) {
                 PARAM_FLOW_RULES.clear();
                 PARAM_FLOW_RULES.putAll(rules);
             }
-            RecordLog.info("[ParamFlowRuleManager] Parameter flow rules received: " + PARAM_FLOW_RULES);
+            RecordLog.info("[ParamFlowRuleManager] Parameter flow rules received: {}", PARAM_FLOW_RULES);
         }
 
         private Map<String, List<ParamFlowRule>> aggregateAndPrepareParamRules(List<ParamFlowRule> list) {

File: sentinel-extension/sentinel-parameter-flow-control/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/param/ParameterMetricStorage.java
Patch:
@@ -54,7 +54,7 @@ public static void initParamMetricsFor(ResourceWrapper resourceWrapper, /*@Valid
                 if ((metric = metricsMap.get(resourceName)) == null) {
                     metric = new ParameterMetric();
                     metricsMap.put(resourceWrapper.getName(), metric);
-                    RecordLog.info("[ParameterMetricStorage] Creating parameter metric for: " + resourceWrapper.getName());
+                    RecordLog.info("[ParameterMetricStorage] Creating parameter metric for: {}", resourceWrapper.getName());
                 }
             }
         }
@@ -80,7 +80,7 @@ public static void clearParamMetricForResource(String resourceName) {
             return;
         }
         metricsMap.remove(resourceName);
-        RecordLog.info("[ParameterMetricStorage] Clearing parameter metric for: " + resourceName);
+        RecordLog.info("[ParameterMetricStorage] Clearing parameter metric for: {}", resourceName);
     }
 
     static Map<String, ParameterMetric> getMetricsMap() {

File: sentinel-transport/sentinel-transport-common/src/main/java/com/alibaba/csp/sentinel/command/CommandCenterProvider.java
Patch:
@@ -40,7 +40,7 @@ private static void resolveInstance() {
             RecordLog.warn("[CommandCenterProvider] WARN: No existing CommandCenter found");
         } else {
             commandCenter = resolveCommandCenter;
-            RecordLog.info("[CommandCenterProvider] CommandCenter resolved: " + resolveCommandCenter.getClass()
+            RecordLog.info("[CommandCenterProvider] CommandCenter resolved: {}", resolveCommandCenter.getClass()
                 .getCanonicalName());
         }
     }

File: sentinel-transport/sentinel-transport-common/src/main/java/com/alibaba/csp/sentinel/command/handler/cluster/ModifyClusterModeCommandHandler.java
Patch:
@@ -41,7 +41,7 @@ public CommandResponse<String> handle(CommandRequest request) {
             if (mode == ClusterStateManager.CLUSTER_SERVER && !isClusterServerSpiAvailable()) {
                 return CommandResponse.ofFailure(new IllegalStateException("token server mode not available: no SPI found"));
             }
-            RecordLog.info("[ModifyClusterModeCommandHandler] Modifying cluster mode to: " + mode);
+            RecordLog.info("[ModifyClusterModeCommandHandler] Modifying cluster mode to: {}", mode);
 
             ClusterStateManager.applyState(mode);
             return CommandResponse.ofSuccess("success");

File: sentinel-transport/sentinel-transport-common/src/main/java/com/alibaba/csp/sentinel/heartbeat/HeartbeatSenderProvider.java
Patch:
@@ -37,7 +37,7 @@ private static void resolveInstance() {
             RecordLog.warn("[HeartbeatSenderProvider] WARN: No existing HeartbeatSender found");
         } else {
             heartbeatSender = resolved;
-            RecordLog.info("[HeartbeatSenderProvider] HeartbeatSender activated: " + resolved.getClass()
+            RecordLog.info("[HeartbeatSenderProvider] HeartbeatSender activated: {}", resolved.getClass()
                 .getCanonicalName());
         }
     }

File: sentinel-transport/sentinel-transport-netty-http/src/main/java/com/alibaba/csp/sentinel/transport/heartbeat/HttpHeartbeatSender.java
Patch:
@@ -67,8 +67,7 @@ public HttpHeartbeatSender() {
         } else {
             consoleHost = dashboardList.get(0).r1;
             consolePort = dashboardList.get(0).r2;
-            RecordLog.info(
-                "[NettyHttpHeartbeatSender] Dashboard address parsed: <" + consoleHost + ':' + consolePort + ">");
+            RecordLog.info("[NettyHttpHeartbeatSender] Dashboard address parsed: <{}:{}>", consoleHost, consolePort);
         }
     }
 

File: sentinel-transport/sentinel-transport-simple-http/src/main/java/com/alibaba/csp/sentinel/transport/heartbeat/SimpleHttpHeartbeatSender.java
Patch:
@@ -52,7 +52,7 @@ public SimpleHttpHeartbeatSender() {
         if (newAddrs.isEmpty()) {
             RecordLog.warn("[SimpleHttpHeartbeatSender] Dashboard server address not configured or not available");
         } else {
-            RecordLog.info("[SimpleHttpHeartbeatSender] Default console address list retrieved: " + newAddrs);
+            RecordLog.info("[SimpleHttpHeartbeatSender] Default console address list retrieved: {}", newAddrs);
         }
         this.addressList = newAddrs;
     }

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/CtSph.java
Patch:
@@ -181,7 +181,7 @@ public Entry entry(ResourceWrapper resourceWrapper, int count, Object... args) t
      * be created if the resource doesn't relate one.
      *
      * <p>Same resource({@link ResourceWrapper#equals(Object)}) will share the same
-     * {@link ProcessorSlotChain} globally, no matter in witch {@link Context}.<p/>
+     * {@link ProcessorSlotChain} globally, no matter in which {@link Context}.<p/>
      *
      * <p>
      * Note that total {@link ProcessorSlot} count must not exceed {@link Constants#MAX_SLOT_CHAIN_SIZE},

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/clusterbuilder/ClusterBuilderSlot.java
Patch:
@@ -51,7 +51,7 @@ public class ClusterBuilderSlot extends AbstractLinkedProcessorSlot<DefaultNode>
     /**
      * <p>
      * Remember that same resource({@link ResourceWrapper#equals(Object)}) will share
-     * the same {@link ProcessorSlotChain} globally, no matter in witch context. So if
+     * the same {@link ProcessorSlotChain} globally, no matter in which context. So if
      * code goes into {@link #entry(Context, ResourceWrapper, DefaultNode, int, boolean, Object...)},
      * the resource name must be same but context name may not.
      * </p>

File: sentinel-transport/sentinel-transport-netty-http/src/main/java/com/alibaba/csp/sentinel/transport/command/codec/Encoder.java
Patch:
@@ -47,7 +47,7 @@ public interface Encoder<R> {
      * Encode the given object into a byte array with the default charset.
      *
      * @param r the object to encode
-     * @return the encoded byte buffer, witch is already flipped.
+     * @return the encoded byte buffer, which is already flipped.
      * @throws Exception error occurs when encoding the object (e.g. IO fails)
      */
     byte[] encode(R r) throws Exception;

File: sentinel-core/src/test/java/com/alibaba/csp/sentinel/slots/block/degrade/CircuitBreakingIntegrationTest.java
Patch:
@@ -188,14 +188,14 @@ private void verifyState(List<CircuitBreaker> breakers, int target) {
     }
     
     @Test
-    public void testMultipleHalfOpenedBreaders() throws Exception {
+    public void testMultipleHalfOpenedBreakers() throws Exception {
         CircuitBreakerStateChangeObserver observer = mock(CircuitBreakerStateChangeObserver.class);
         setCurrentMillis(System.currentTimeMillis() / 1000 * 1000);
         int retryTimeoutSec = 2;
         int maxRt = 50;
         int statIntervalMs = 20000;
         int minRequestAmount = 1;
-        String res = "CircuitBreakingIntegrationTest_testMultipleHalfOpenedBreaders";
+        String res = "CircuitBreakingIntegrationTest_testMultipleHalfOpenedBreakers";
         EventObserverRegistry.getInstance().addStateChangeObserver(res, observer);
         // initial two rules
         DegradeRuleManager.loadRules(Arrays.asList(

File: sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/BaseSentinelDubboFilter.java
Patch:
@@ -21,11 +21,10 @@
 import org.apache.dubbo.rpc.Invoker;
 
 /**
- * Base Class of the {@link SentinelDubboProviderFilter} and {@link SentinelDubboConsumerFilter}.
+ * Base class of the {@link SentinelDubboProviderFilter} and {@link SentinelDubboConsumerFilter}.
  *
  * @author Zechao Zheng
  */
-
 public abstract class BaseSentinelDubboFilter implements Filter {
 
 

File: sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboProviderFilter.java
Patch:
@@ -20,6 +20,7 @@
 import com.alibaba.csp.sentinel.context.ContextUtil;
 import com.alibaba.csp.sentinel.log.RecordLog;
 import com.alibaba.csp.sentinel.slots.block.BlockException;
+
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
@@ -74,7 +75,8 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
             // at entrance of invocation chain only (for inbound traffic).
             ContextUtil.enter(methodResourceName, origin);
             interfaceEntry = SphU.entry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.IN);
-            methodEntry = SphU.entry(methodResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.IN, invocation.getArguments());
+            methodEntry = SphU.entry(methodResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.IN,
+                invocation.getArguments());
             Result result = invoker.invoke(invocation);
             if (result.hasException()) {
                 Tracer.traceEntry(result.getException(), interfaceEntry);
@@ -98,6 +100,5 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
         }
     }
 
-
 }
 

File: sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/fallback/DefaultDubboFallback.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.csp.sentinel.adapter.dubbo.fallback;
 
 import com.alibaba.csp.sentinel.slots.block.BlockException;
-import com.alibaba.csp.sentinel.slots.block.SentinelRpcException;
+
 import org.apache.dubbo.rpc.AsyncRpcResult;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
@@ -30,6 +30,6 @@ public class DefaultDubboFallback implements DubboFallback {
     @Override
     public Result handle(Invoker<?> invoker, Invocation invocation, BlockException ex) {
         // Just wrap the exception.
-        return AsyncRpcResult.newDefaultAsyncResult(null, new SentinelRpcException(ex), invocation);
+        return AsyncRpcResult.newDefaultAsyncResult(ex.toRuntimeException(), invocation);
     }
 }

File: sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/BaseSentinelDubboFilter.java
Patch:
@@ -36,15 +36,15 @@ public abstract class BaseSentinelDubboFilter implements Filter {
      * @param invocation
      * @return
      */
-    abstract String getMethodName(Invoker invoker, Invocation invocation);
+    abstract String getMethodName(Invoker invoker, Invocation invocation, String prefix);
 
     /**
      * Get interface name of dubbo rpc
      *
      * @param invoker
      * @return
      */
-    abstract String getInterfaceName(Invoker invoker);
+    abstract String getInterfaceName(Invoker invoker, String prefix);
 
 
 }

File: sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/fallback/DefaultDubboFallback.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.alibaba.csp.sentinel.slots.block.BlockException;
 import com.alibaba.csp.sentinel.slots.block.SentinelRpcException;
-
+import org.apache.dubbo.rpc.AsyncRpcResult;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
 import org.apache.dubbo.rpc.Result;
@@ -29,7 +29,7 @@ public class DefaultDubboFallback implements DubboFallback {
 
     @Override
     public Result handle(Invoker<?> invoker, Invocation invocation, BlockException ex) {
-        // Just wrap and throw the exception.
-        throw new SentinelRpcException(ex);
+        // Just wrap the exception.
+        return AsyncRpcResult.newDefaultAsyncResult(null, new SentinelRpcException(ex), invocation);
     }
 }

File: sentinel-adapter/sentinel-apache-dubbo-adapter/src/test/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboProviderFilterTest.java
Patch:
@@ -102,7 +102,7 @@ private void verifyInvocationStructure(String originApplication, Invoker invoker
         assertNotNull(context);
 
         // As ContextUtil.enter(resourceName, application) in SentinelDubboProviderFilter
-        String methodResourceName = filter.getMethodName(invoker, invocation);
+        String methodResourceName = filter.getMethodName(invoker, invocation, null);
         assertEquals(methodResourceName, context.getName());
         assertEquals(originApplication, context.getOrigin());
 
@@ -117,7 +117,7 @@ private void verifyInvocationStructure(String originApplication, Invoker invoker
         DefaultNode interfaceNode = (DefaultNode) childList.iterator().next();
         ResourceWrapper interfaceResource = interfaceNode.getId();
 
-        assertEquals(filter.getInterfaceName(invoker), interfaceResource.getName());
+        assertEquals(filter.getInterfaceName(invoker, null), interfaceResource.getName());
         assertSame(EntryType.IN, interfaceResource.getEntryType());
 
         // As SphU.entry(resourceName, EntryType.IN, 1, invocation.getArguments());

File: sentinel-demo/sentinel-demo-apache-dubbo/src/main/java/com/alibaba/csp/sentinel/demo/apache/dubbo/FooConsumerExceptionDegradeBootstrap.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.csp.sentinel.demo.apache.dubbo;
 
-import com.alibaba.csp.sentinel.adapter.dubbo.fallback.DubboFallbackRegistry;
+import com.alibaba.csp.sentinel.adapter.dubbo.config.DubboAdapterGlobalConfig;
 import com.alibaba.csp.sentinel.demo.apache.dubbo.consumer.ConsumerConfiguration;
 import com.alibaba.csp.sentinel.demo.apache.dubbo.consumer.FooServiceConsumer;
 import com.alibaba.csp.sentinel.slots.block.RuleConstant;
@@ -102,7 +102,7 @@ public static void main(String[] args) throws InterruptedException, ExecutionExc
     }
 
     public static void registryCustomFallback() {
-        DubboFallbackRegistry.setConsumerFallback(
+        DubboAdapterGlobalConfig.setConsumerFallback(
                 (invoker, invocation, ex) -> AsyncRpcResult.newDefaultAsyncResult("fallback", invocation));
 
     }

File: sentinel-adapter/sentinel-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/fallback/DefaultDubboFallback.java
Patch:
@@ -20,6 +20,7 @@
 import com.alibaba.dubbo.rpc.Invocation;
 import com.alibaba.dubbo.rpc.Invoker;
 import com.alibaba.dubbo.rpc.Result;
+import com.alibaba.dubbo.rpc.RpcResult;
 
 /**
  * @author Eric Zhao
@@ -28,7 +29,7 @@ public class DefaultDubboFallback implements DubboFallback {
 
     @Override
     public Result handle(Invoker<?> invoker, Invocation invocation, BlockException ex) {
-        // Just wrap and throw the exception.
-        throw new SentinelRpcException(ex);
+        // Just wrap the exception.
+        return new RpcResult(new SentinelRpcException(ex));
     }
 }

File: sentinel-adapter/sentinel-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/origin/DefaultDubboOriginParser.java
Patch:
@@ -20,9 +20,10 @@
 import com.alibaba.dubbo.rpc.Invoker;
 
 /**
- * Default Dubbo origin parse.
+ * Default Dubbo origin parser.
  *
  * @author tiecheng
+ * @since 1.8.0
  */
 public class DefaultDubboOriginParser implements DubboOriginParser {
 

File: sentinel-adapter/sentinel-dubbo-adapter/src/test/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboConsumerFilterTest.java
Patch:
@@ -85,7 +85,7 @@ private void verifyInvocationStructure(Invoker invoker, Invocation invocation) {
         // As not call ContextUtil.enter(resourceName, application) in SentinelDubboConsumerFilter, use default context
         // In actual project, a consumer is usually also a provider, the context will be created by SentinelDubboProviderFilter
         // If consumer is on the top of Dubbo RPC invocation chain, use default context
-        String resourceName = filter.getResourceName(invoker, invocation);
+        String resourceName = filter.getMethodResourceName(invoker, invocation);
         assertEquals(Constants.CONTEXT_DEFAULT_NAME, context.getName());
         assertEquals("", context.getOrigin());
 

File: sentinel-adapter/sentinel-dubbo-adapter/src/test/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboProviderFilterTest.java
Patch:
@@ -85,7 +85,7 @@ private void verifyInvocationStructure(String originApplication, Invoker invoker
         assertNotNull(context);
 
         // As ContextUtil.enter(resourceName, application) in SentinelDubboProviderFilter
-        String resourceName = filter.getResourceName(invoker, invocation);
+        String resourceName = filter.getMethodResourceName(invoker, invocation);
         assertEquals(resourceName, context.getName());
         assertEquals(originApplication, context.getOrigin());
 

File: sentinel-cluster/sentinel-cluster-client-default/src/main/java/com/alibaba/csp/sentinel/cluster/client/codec/data/FlowRequestDataWriter.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * +-------------------+--------------+----------------+---------------+------------------+
- * | RequestID(8 byte) | Type(1 byte) | FlowID(4 byte) | Count(4 byte) | PriorityFlag (1) |
+ * | RequestID(8 byte) | Type(1 byte) | FlowID(8 byte) | Count(4 byte) | PriorityFlag (1) |
  * +-------------------+--------------+----------------+---------------+------------------+
  *
  * @author Eric Zhao

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/codec/data/FlowRequestDataDecoder.java
Patch:
@@ -25,7 +25,7 @@
  * Decoder for {@link FlowRequestData} from {@code ByteBuf} stream. The layout:
  * </p>
  * <pre>
- * | flow ID (4) | count (4) | priority flag (1) |
+ * | flow ID (8) | count (4) | priority flag (1) |
  * </pre>
  *
  * @author Eric Zhao

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/annotation/SentinelResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2020 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,9 +23,10 @@
  * The annotation indicates a definition of Sentinel resource.
  *
  * @author Eric Zhao
+ * @author zhaoyuguang
  * @since 0.1.1
  */
-@Target(ElementType.METHOD)
+@Target({ElementType.METHOD, ElementType.TYPE})
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
 public @interface SentinelResource {

File: sentinel-core/src/test/java/com/alibaba/csp/sentinel/metric/extension/callback/MetricExitCallbackTest.java
Patch:
@@ -55,7 +55,7 @@ public void onExit() {
 
         int deltaMs = 100;
         when(entry.getError()).thenReturn(null);
-        when(entry.getCreateTime()).thenReturn(curMillis - deltaMs);
+        when(entry.getCreateTimestamp()).thenReturn(curMillis - deltaMs);
         when(context.getCurEntry()).thenReturn(entry);
         exitCallback.onExit(context, resourceWrapper, count, args);
         Assert.assertEquals(prevRt + deltaMs, extension.rt);

File: sentinel-extension/sentinel-parameter-flow-control/src/main/java/com/alibaba/csp/sentinel/slots/statistic/ParamFlowStatisticExitCallback.java
Patch:
@@ -29,7 +29,7 @@ public class ParamFlowStatisticExitCallback implements ProcessorSlotExitCallback
 
     @Override
     public void onExit(Context context, ResourceWrapper resourceWrapper, int count, Object... args) {
-        if (context.getCurEntry().getError() == null) {
+        if (context.getCurEntry().getBlockError() == null) {
             ParameterMetric parameterMetric = ParameterMetricStorage.getParamMetric(resourceWrapper);
 
             if (parameterMetric != null) {

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/context/ContextUtil.java
Patch:
@@ -127,8 +127,8 @@ protected static Context trueEnter(String name, String origin) {
                     setNullContext();
                     return NULL_CONTEXT;
                 } else {
+                    LOCK.lock();
                     try {
-                        LOCK.lock();
                         node = contextNameNodeMap.get(name);
                         if (node == null) {
                             if (contextNameNodeMap.size() > Constants.MAX_CONTEXT_NAME_SIZE) {

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/node/ClusterNode.java
Patch:
@@ -101,8 +101,8 @@ public int getResourceType() {
     public Node getOrCreateOriginNode(String origin) {
         StatisticNode statisticNode = originCountMap.get(origin);
         if (statisticNode == null) {
+            lock.lock();
             try {
-                lock.lock();
                 statisticNode = originCountMap.get(origin);
                 if (statisticNode == null) {
                     // The node is absent, create a new node for the origin.

File: sentinel-adapter/sentinel-spring-cloud-gateway-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/gateway/sc/ServerWebExchangeItemParser.java
Patch:
@@ -55,7 +55,7 @@ public String getUrlParam(ServerWebExchange exchange, String paramName) {
 
     @Override
     public String getCookieValue(ServerWebExchange exchange, String cookieName) {
-        return Optional.ofNullable(exchange.getResponse().getCookies().getFirst(cookieName))
+        return Optional.ofNullable(exchange.getRequest().getCookies().getFirst(cookieName))
             .map(HttpCookie::getValue)
             .orElse(null);
     }

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/jul/BaseJulLogger.java
Patch:
@@ -90,7 +90,9 @@ protected Handler makeLoggingHandler(String logName, Logger heliumRecordLog) {
         if (handler != null) {
             disableOtherHandlers(heliumRecordLog, handler);
         }
-        heliumRecordLog.setLevel(Level.ALL);
+
+        // Set log level to INFO by default
+        heliumRecordLog.setLevel(Level.INFO);
         return handler;
     }
 

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/DefaultSlotChainBuilder.java
Patch:
@@ -38,7 +38,7 @@ public ProcessorSlotChain build() {
         ProcessorSlotChain chain = new DefaultProcessorSlotChain();
 
         // Note: the instances of ProcessorSlot should be different, since they are not stateless.
-        List<ProcessorSlot> sortedSlotList = SpiLoader.loadDifferentInstanceListSorted(ProcessorSlot.class);
+        List<ProcessorSlot> sortedSlotList = SpiLoader.loadPrototypeInstanceListSorted(ProcessorSlot.class);
         for (ProcessorSlot slot : sortedSlotList) {
             if (!(slot instanceof AbstractLinkedProcessorSlot)) {
                 RecordLog.warn("The ProcessorSlot(" + slot.getClass().getCanonicalName() + ") is not an instance of AbstractLinkedProcessorSlot, can't be added into ProcessorSlotChain");

File: sentinel-adapter/sentinel-api-gateway-adapter-common/src/main/java/com/alibaba/csp/sentinel/adapter/gateway/common/slot/GatewayFlowSlot.java
Patch:
@@ -27,11 +27,13 @@
 import com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowException;
 import com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowRule;
 import com.alibaba.csp.sentinel.slots.block.flow.param.ParameterMetricStorage;
+import com.alibaba.csp.sentinel.spi.SpiOrder;
 
 /**
  * @author Eric Zhao
  * @since 1.6.1
  */
+@SpiOrder(-4000)
 public class GatewayFlowSlot extends AbstractLinkedProcessorSlot<DefaultNode> {
 
     @Override

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/authority/AuthoritySlot.java
Patch:
@@ -23,13 +23,15 @@
 import com.alibaba.csp.sentinel.slotchain.AbstractLinkedProcessorSlot;
 import com.alibaba.csp.sentinel.slotchain.ProcessorSlot;
 import com.alibaba.csp.sentinel.slotchain.ResourceWrapper;
+import com.alibaba.csp.sentinel.spi.SpiOrder;
 
 /**
  * A {@link ProcessorSlot} that dedicates to {@link AuthorityRule} checking.
  *
  * @author leyou
  * @author Eric Zhao
  */
+@SpiOrder(-6000)
 public class AuthoritySlot extends AbstractLinkedProcessorSlot<DefaultNode> {
 
     @Override

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeSlot.java
Patch:
@@ -20,12 +20,14 @@
 import com.alibaba.csp.sentinel.slotchain.AbstractLinkedProcessorSlot;
 import com.alibaba.csp.sentinel.slotchain.ProcessorSlot;
 import com.alibaba.csp.sentinel.slotchain.ResourceWrapper;
+import com.alibaba.csp.sentinel.spi.SpiOrder;
 
 /**
  * A {@link ProcessorSlot} dedicates to {@link DegradeRule} checking.
  *
  * @author leyou
  */
+@SpiOrder(-1000)
 public class DegradeSlot extends AbstractLinkedProcessorSlot<DefaultNode> {
 
     @Override

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/clusterbuilder/ClusterBuilderSlot.java
Patch:
@@ -30,6 +30,7 @@
 import com.alibaba.csp.sentinel.slotchain.ProcessorSlotChain;
 import com.alibaba.csp.sentinel.slotchain.ResourceWrapper;
 import com.alibaba.csp.sentinel.slotchain.StringResourceWrapper;
+import com.alibaba.csp.sentinel.spi.SpiOrder;
 
 /**
  * <p>
@@ -44,6 +45,7 @@
  *
  * @author jialiang.linjl
  */
+@SpiOrder(-9000)
 public class ClusterBuilderSlot extends AbstractLinkedProcessorSlot<DefaultNode> {
 
     /**

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/logger/LogSlot.java
Patch:
@@ -21,11 +21,13 @@
 import com.alibaba.csp.sentinel.slotchain.AbstractLinkedProcessorSlot;
 import com.alibaba.csp.sentinel.slotchain.ResourceWrapper;
 import com.alibaba.csp.sentinel.slots.block.BlockException;
+import com.alibaba.csp.sentinel.spi.SpiOrder;
 
 /**
  * A {@link com.alibaba.csp.sentinel.slotchain.ProcessorSlot} that is response for logging block exceptions
  * to provide concrete logs for troubleshooting.
  */
+@SpiOrder(-8000)
 public class LogSlot extends AbstractLinkedProcessorSlot<DefaultNode> {
 
     @Override

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/nodeselector/NodeSelectorSlot.java
Patch:
@@ -22,6 +22,7 @@
 import com.alibaba.csp.sentinel.node.EntranceNode;
 import com.alibaba.csp.sentinel.slotchain.AbstractLinkedProcessorSlot;
 import com.alibaba.csp.sentinel.slotchain.ResourceWrapper;
+import com.alibaba.csp.sentinel.spi.SpiOrder;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -122,6 +123,7 @@
  * @see EntranceNode
  * @see ContextUtil
  */
+@SpiOrder(-10000)
 public class NodeSelectorSlot extends AbstractLinkedProcessorSlot<Object> {
 
     /**

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/statistic/StatisticSlot.java
Patch:
@@ -21,6 +21,7 @@
 import com.alibaba.csp.sentinel.slotchain.ProcessorSlotEntryCallback;
 import com.alibaba.csp.sentinel.slotchain.ProcessorSlotExitCallback;
 import com.alibaba.csp.sentinel.slots.block.flow.PriorityWaitException;
+import com.alibaba.csp.sentinel.spi.SpiOrder;
 import com.alibaba.csp.sentinel.util.TimeUtil;
 import com.alibaba.csp.sentinel.Constants;
 import com.alibaba.csp.sentinel.EntryType;
@@ -47,6 +48,7 @@
  * @author jialiang.linjl
  * @author Eric Zhao
  */
+@SpiOrder(-7000)
 public class StatisticSlot extends AbstractLinkedProcessorSlot<DefaultNode> {
 
     @Override

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/system/SystemSlot.java
Patch:
@@ -20,13 +20,15 @@
 import com.alibaba.csp.sentinel.slotchain.AbstractLinkedProcessorSlot;
 import com.alibaba.csp.sentinel.slotchain.ProcessorSlot;
 import com.alibaba.csp.sentinel.slotchain.ResourceWrapper;
+import com.alibaba.csp.sentinel.spi.SpiOrder;
 
 /**
  * A {@link ProcessorSlot} that dedicates to {@link SystemRule} checking.
  *
  * @author jialiang.linjl
  * @author leyou
  */
+@SpiOrder(-5000)
 public class SystemSlot extends AbstractLinkedProcessorSlot<DefaultNode> {
 
     @Override

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/eagleeye/FastDateFormat.java
Patch:
@@ -75,7 +75,7 @@ String formatWithoutMs(long timestamp) {
 
     private SimpleDateFormat createSimpleDateFormat() {
         SimpleDateFormat fmt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
-        fmt.setTimeZone(TimeZone.getTimeZone("GMT+8:00"));
+        fmt.setTimeZone(TimeZone.getDefault());
         return fmt;
     }
 }

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/jul/ConsoleHandler.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.csp.sentinel.log;
+package com.alibaba.csp.sentinel.log.jul;
 
 import java.io.UnsupportedEncodingException;
 import java.util.logging.*;

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/jul/CspFormatter.java
Patch:
@@ -10,7 +10,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  */
-package com.alibaba.csp.sentinel.log;
+package com.alibaba.csp.sentinel.log.jul;
 
 import java.io.PrintWriter;
 import java.io.StringWriter;

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/jul/DateFileLogHandler.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.csp.sentinel.log;
+package com.alibaba.csp.sentinel.log.jul;
 
 import java.io.File;
 import java.io.IOException;

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/jul/Level.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.csp.sentinel.log;
+package com.alibaba.csp.sentinel.log.jul;
 
 /**
- * Logging levels
+ * JUL logging levels.
+ *
  * @author xue8
  */
 public class Level extends java.util.logging.Level {

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/util/SpiLoader.java
Patch:
@@ -114,7 +114,7 @@ public static <T> T loadHighestPriorityInstance(Class<T> clazz) {
             SpiOrderWrapper<T> w = null;
             for (T spi : serviceLoader) {
                 int order = SpiOrderResolver.resolveOrder(spi);
-                RecordLog.info("[SpiLoader] Found {0} SPI: {1} with order " + order, clazz.getSimpleName(),
+                RecordLog.info("[SpiLoader] Found {} SPI: {} with order " + order, clazz.getSimpleName(),
                     spi.getClass().getCanonicalName());
                 if (w == null || order < w.order) {
                     w = new SpiOrderWrapper<>(order, spi);
@@ -181,7 +181,7 @@ public static <T> List<T> loadInstanceListSorted(Class<T> clazz) {
                 int order = SpiOrderResolver.resolveOrder(spi);
                 // Since SPI is lazy initialized in ServiceLoader, we use online sort algorithm here.
                 SpiOrderResolver.insertSorted(orderWrappers, spi, order);
-                RecordLog.info("[SpiLoader] Found {0} SPI: {1} with order " + order, clazz.getSimpleName(),
+                RecordLog.info("[SpiLoader] Found {} SPI: {} with order " + order, clazz.getSimpleName(),
                     spi.getClass().getCanonicalName());
             }
             List<T> list = new ArrayList<>();

File: sentinel-core/src/test/java/com/alibaba/csp/sentinel/RecordLogTest.java
Patch:
@@ -54,7 +54,7 @@ public void testChangeLogBase() {
         System.setProperty(LogBase.LOG_DIR, newLogBase);
 
         RecordLog.info("testChangeLogBase");
-        String logFileName = RecordLog.getLogBaseDir();
+        String logFileName = LogBase.getLogBaseDir();
         Assert.assertTrue(newLogBase.equals(logFileName));
         File[] files = new File(logFileName).listFiles();
         assertTrue(files != null && files.length > 0);
@@ -65,7 +65,7 @@ public void testChangeLogBase() {
 
     @Test
     public void testLogBaseDir() {
-        assertTrue(RecordLog.getLogBaseDir().startsWith(System.getProperty("user.home")));
+        assertTrue(LogBase.getLogBaseDir().startsWith(System.getProperty("user.home")));
     }
 
     public void testLogNameNotUsePid() {

File: sentinel-core/src/test/java/com/alibaba/csp/sentinel/slots/logger/EagleEyeLogUtilTest.java
Patch:
@@ -21,7 +21,7 @@ public class EagleEyeLogUtilTest {
     public void testWriteLog() throws Exception {
         EagleEyeLogUtil.log("resourceName", "BlockException", "app1", "origin", 1);
 
-        final File file = new File(RecordLog.getLogBaseDir() + EagleEyeLogUtil.FILE_NAME);
+        final File file = new File(LogBase.getLogBaseDir() + EagleEyeLogUtil.FILE_NAME);
         await().timeout(2, TimeUnit.SECONDS)
             .until(new Callable<File>() {
                 @Override
@@ -42,7 +42,7 @@ public void testChangeLogBase() throws Exception {
         EagleEyeLogUtil.log("resourceName", "BlockException", "app1", "origin", 1);
 
 
-        final File file = new File(RecordLog.getLogBaseDir() + EagleEyeLogUtil.FILE_NAME);
+        final File file = new File(LogBase.getLogBaseDir() + EagleEyeLogUtil.FILE_NAME);
         await().timeout(2, TimeUnit.SECONDS)
                 .until(new Callable<File>() {
                     @Override
@@ -51,7 +51,7 @@ public File call() throws Exception {
                     }
                 }, FileMatchers.anExistingFile());
         Assert.assertTrue(file.getAbsolutePath().startsWith(newLogBase));
-        deleteLogDir(new File(RecordLog.getLogBaseDir()));
+        deleteLogDir(new File(LogBase.getLogBaseDir()));
     }
 
     private void deleteLogDir(File logDirFile) {

File: sentinel-adapter/sentinel-apache-dubbo-adapter/src/test/java/com/alibaba/csp/sentinel/adapter/dubbo/DubboAppContextFilterTest.java
Patch:
@@ -70,6 +70,6 @@ public void testInvokeNullApplicationKey() {
         verify(invoker).invoke(invocation);
 
         String application = RpcContext.getContext().getAttachment(DubboUtils.SENTINEL_DUBBO_APPLICATION_KEY);
-        assertNull(application);
+        assertEquals(application, "");
     }
 }

File: sentinel-adapter/sentinel-apache-dubbo-adapter/src/test/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboConsumerFilterTest.java
Patch:
@@ -227,7 +227,7 @@ public Result requestGo(boolean exception, Invocation currentInvocation) {
     }
 
     public Result responseBack(Result result) {
-        filter.listener().onResponse(result, invoker, invocation);
+        filter.listener().onMessage(result, invoker, invocation);
         return result;
     }
 
@@ -265,7 +265,7 @@ public void testInvokeSync() {
         filter.invoke(invoker, invocation);
         verify(invoker).invoke(invocation);
 
-        filter.listener().onResponse(result, invoker, invocation);
+        filter.listener().onMessage(result, invoker, invocation);
         Context context = ContextUtil.getContext();
         assertNull(context);
     }

File: sentinel-adapter/sentinel-apache-dubbo-adapter/src/test/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboProviderFilterTest.java
Patch:
@@ -89,7 +89,7 @@ public void testInvoke() {
         filter.invoke(invoker, invocation);
         verify(invoker).invoke(invocation);
 
-        filter.listener().onResponse(result, invoker, invocation);
+        filter.listener().onMessage(result, invoker, invocation);
         Context context = ContextUtil.getContext();
         assertNull(context);
     }

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/context/Context.java
Patch:
@@ -109,7 +109,7 @@ public String getName() {
     }
 
     public Node getCurNode() {
-        return curEntry.getCurNode();
+        return curEntry == null ? null : curEntry.getCurNode();
     }
 
     public Context setCurNode(Node node) {

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/node/StatisticNode.java
Patch:
@@ -213,7 +213,8 @@ public double successQps() {
 
     @Override
     public double maxSuccessQps() {
-        return rollingCounterInSecond.maxSuccess() * rollingCounterInSecond.getSampleCount();
+        return (double) rollingCounterInSecond.maxSuccess() * rollingCounterInSecond.getSampleCount()
+                / rollingCounterInSecond.getWindowIntervalInSec();
     }
 
     @Override

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/LogBase.java
Patch:
@@ -95,7 +95,7 @@ private static void loadProperties() {
 
 
         logBaseDir = properties.getProperty(LOG_DIR) == null ? logBaseDir : properties.getProperty(LOG_DIR);
-        addSeparator(logBaseDir);
+        logBaseDir = addSeparator(logBaseDir);
         File dir = new File(logBaseDir);
         if (!dir.exists()) {
             if (!dir.mkdirs()) {

File: sentinel-dashboard/src/main/java/com/alibaba/csp/sentinel/dashboard/client/SentinelApiClient.java
Patch:
@@ -393,7 +393,7 @@ public List<NodeVo> fetchResourceOfMachine(String ip, int port, String type) {
      * @return
      */
     public List<NodeVo> fetchClusterNodeOfMachine(String ip, int port, boolean includeZero) {
-        String type = "noZero";
+        String type = "notZero";
         if (includeZero) {
             type = "zero";
         }

File: sentinel-cluster/sentinel-cluster-server-envoy-rls/src/main/java/com/alibaba/csp/sentinel/cluster/server/envoy/rls/rule/EnvoySentinelRuleConverter.java
Patch:
@@ -69,7 +69,7 @@ public static long generateFlowId(String key) {
             return -1L;
         }
         // Add offset to avoid negative ID.
-        return Integer.MAX_VALUE + key.hashCode();
+        return (long) Integer.MAX_VALUE + key.hashCode();
     }
 
     public static String generateKey(String domain, EnvoyRlsRule.ResourceDescriptor descriptor) {

File: sentinel-adapter/sentinel-web-servlet/src/test/java/com/alibaba/csp/sentinel/adapter/servletmethod/CommonFilterMethodTest.java
Patch:
@@ -41,6 +41,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
 
 /**
+ * @author zhaoyuguang
  * @author Roger Law
  */
 @RunWith(SpringRunner.class)
@@ -107,7 +108,7 @@ private void testCommonBlockAndRedirectBlockPage(String url, ClusterNode cnGet,
         configureRulesFor(GET + ":" + url, 0);
         // The request will be blocked and response is default block message.
         this.mvc.perform(get(url).accept(MediaType.TEXT_PLAIN))
-                .andExpect(status().isOk())
+                .andExpect(status().isTooManyRequests())
                 .andExpect(content().string(FilterUtil.DEFAULT_BLOCK_MSG));
         assertEquals(1, cnGet.blockQps(), 0.01);
 

File: sentinel-adapter/sentinel-reactor-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/reactor/SentinelReactorSubscriber.java
Patch:
@@ -155,7 +155,7 @@ protected void hookOnError(Throwable t) {
 
     @Override
     protected void hookOnCancel() {
-
+        tryCompleteEntry();
     }
 
     private boolean tryCompleteEntry() {

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/FlowRuleUtil.java
Patch:
@@ -195,7 +195,7 @@ private static boolean checkClusterField(/*@NonNull*/ FlowRule rule) {
         if (!isWindowConfigValid(clusterConfig.getSampleCount(), clusterConfig.getWindowIntervalMs())) {
             return false;
         }
-        switch (rule.getStrategy()) {
+        switch (clusterConfig.getStrategy()) {
             case ClusterRuleConstant.FLOW_CLUSTER_STRATEGY_NORMAL:
                 return true;
             default:

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slotchain/MethodResourceWrapper.java
Patch:
@@ -47,7 +47,7 @@ public Method getMethod() {
 
     @Override
     public String getShowName() {
-        return IdUtil.truncate(this.name);
+        return name;
     }
 
     @Override

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/DefaultSlotChainBuilder.java
Patch:
@@ -42,8 +42,8 @@ public ProcessorSlotChain build() {
         chain.addLast(new ClusterBuilderSlot());
         chain.addLast(new LogSlot());
         chain.addLast(new StatisticSlot());
-        chain.addLast(new SystemSlot());
         chain.addLast(new AuthoritySlot());
+        chain.addLast(new SystemSlot());
         chain.addLast(new FlowSlot());
         chain.addLast(new DegradeSlot());
 

File: sentinel-dashboard/src/main/java/com/alibaba/csp/sentinel/dashboard/filter/AuthFilter.java
Patch:
@@ -75,10 +75,10 @@ public void init(FilterConfig filterConfig) throws ServletException {
     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
         HttpServletRequest httpRequest = (HttpServletRequest) request;
 
-        String requestURI = httpRequest.getRequestURI();
+        String servletPath = httpRequest.getServletPath();
 
         // Exclude the urls which needn't auth
-        if (authFilterExcludeUrls.contains(requestURI)) {
+        if (authFilterExcludeUrls.contains(servletPath)) {
             chain.doFilter(request, response);
             return;
         }
@@ -94,7 +94,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
                 authFilterExcludeUrlSuffix = URL_SUFFIX_DOT + authFilterExcludeUrlSuffix;
             }
 
-            if (requestURI.endsWith(authFilterExcludeUrlSuffix)) {
+            if (servletPath.endsWith(authFilterExcludeUrlSuffix)) {
                 chain.doFilter(request, response);
                 return;
             }

File: sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboProviderFilter.java
Patch:
@@ -19,11 +19,11 @@
 import com.alibaba.csp.sentinel.EntryType;
 import com.alibaba.csp.sentinel.SphU;
 import com.alibaba.csp.sentinel.Tracer;
+import com.alibaba.csp.sentinel.adapter.dubbo.config.DubboConfig;
 import com.alibaba.csp.sentinel.adapter.dubbo.fallback.DubboFallbackRegistry;
 import com.alibaba.csp.sentinel.context.ContextUtil;
 import com.alibaba.csp.sentinel.log.RecordLog;
 import com.alibaba.csp.sentinel.slots.block.BlockException;
-
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.rpc.Filter;
 import org.apache.dubbo.rpc.Invocation;
@@ -34,7 +34,7 @@
 /**
  * <p>Apache Dubbo service provider filter that enables integration with Sentinel. Auto activated by default.</p>
  * <p>Note: this only works for Apache Dubbo 2.7.x or above version.</p>
- *
+ * <p>
  * If you want to disable the provider filter, you can configure:
  * <pre>
  * &lt;dubbo:provider filter="-sentinel.dubbo.provider.filter"/&gt;
@@ -58,7 +58,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
         Entry interfaceEntry = null;
         Entry methodEntry = null;
         try {
-            String resourceName = DubboUtils.getResourceName(invoker, invocation);
+            String resourceName = DubboUtils.getResourceName(invoker, invocation, DubboConfig.getDubboProviderPrefix());
             String interfaceName = invoker.getInterface().getName();
             // Only need to create entrance context at provider side, as context will take effect
             // at entrance of invocation chain only (for inbound traffic).

File: sentinel-adapter/sentinel-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboConsumerFilter.java
Patch:
@@ -19,8 +19,8 @@
 import com.alibaba.csp.sentinel.EntryType;
 import com.alibaba.csp.sentinel.SphU;
 import com.alibaba.csp.sentinel.Tracer;
+import com.alibaba.csp.sentinel.adapter.dubbo.config.DubboConfig;
 import com.alibaba.csp.sentinel.adapter.dubbo.fallback.DubboFallbackRegistry;
-import com.alibaba.csp.sentinel.context.ContextUtil;
 import com.alibaba.csp.sentinel.log.RecordLog;
 import com.alibaba.csp.sentinel.slots.block.BlockException;
 import com.alibaba.dubbo.common.extension.Activate;
@@ -53,7 +53,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
         Entry interfaceEntry = null;
         Entry methodEntry = null;
         try {
-            String resourceName = getResourceName(invoker, invocation);
+            String resourceName = getResourceName(invoker, invocation, DubboConfig.getDubboConsumerPrefix());
             interfaceEntry = SphU.entry(invoker.getInterface().getName(), EntryType.OUT);
             methodEntry = SphU.entry(resourceName, EntryType.OUT);
 

File: sentinel-adapter/sentinel-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboProviderFilter.java
Patch:
@@ -19,11 +19,11 @@
 import com.alibaba.csp.sentinel.EntryType;
 import com.alibaba.csp.sentinel.SphU;
 import com.alibaba.csp.sentinel.Tracer;
+import com.alibaba.csp.sentinel.adapter.dubbo.config.DubboConfig;
 import com.alibaba.csp.sentinel.adapter.dubbo.fallback.DubboFallbackRegistry;
 import com.alibaba.csp.sentinel.context.ContextUtil;
 import com.alibaba.csp.sentinel.log.RecordLog;
 import com.alibaba.csp.sentinel.slots.block.BlockException;
-import com.alibaba.csp.sentinel.slots.block.SentinelRpcException;
 import com.alibaba.dubbo.common.extension.Activate;
 import com.alibaba.dubbo.rpc.Filter;
 import com.alibaba.dubbo.rpc.Invocation;
@@ -57,7 +57,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
         Entry interfaceEntry = null;
         Entry methodEntry = null;
         try {
-            String resourceName = getResourceName(invoker, invocation);
+            String resourceName = getResourceName(invoker, invocation, DubboConfig.getDubboProviderPrefix());
             String interfaceName = invoker.getInterface().getName();
             ContextUtil.enter(resourceName, application);
             interfaceEntry = SphU.entry(interfaceName, EntryType.IN);

File: sentinel-adapter/sentinel-grpc-adapter/src/test/java/com/alibaba/csp/sentinel/adapter/grpc/GrpcTestServer.java
Patch:
@@ -19,6 +19,7 @@
 import io.grpc.ServerBuilder;
 
 import java.io.IOException;
+import java.util.concurrent.Executors;
 
 class GrpcTestServer {
 

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/ClusterFlowChecker.java
Patch:
@@ -64,7 +64,7 @@ static TokenResult acquireClusterToken(/*@Valid*/ FlowRule rule, int acquireCoun
             return new TokenResult(TokenResultStatus.FAIL);
         }
 
-        double latestQps = metric.getAvg(ClusterFlowEvent.PASS_REQUEST);
+        double latestQps = metric.getAvg(ClusterFlowEvent.PASS);
         double globalThreshold = calcGlobalThreshold(rule) * ClusterServerConfigManager.getExceedCount();
         double nextRemaining = globalThreshold - latestQps - acquireCount;
 

File: sentinel-core/src/test/java/com/alibaba/csp/sentinel/util/ConfigUtilTest.java
Patch:
@@ -49,7 +49,7 @@ public void testLoadProperties() throws IOException {
             }
             BufferedWriter out = new BufferedWriter(new FileWriter(file));
             out.write(LOG_OUTPUT_TYPE + "=" + logOutputType);
-            out.write("\n");
+            out.write(System.getProperty("line.separator"));
             out.write(LOG_DIR + "=" + dir);
             out.flush();
             out.close();

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/CspFormatter.java
Patch:
@@ -28,7 +28,7 @@ class CspFormatter extends Formatter {
     private final ThreadLocal<SimpleDateFormat> dateFormatThreadLocal = new ThreadLocal<SimpleDateFormat>() {
         @Override
         public SimpleDateFormat initialValue() {
-            return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
+            return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
         }
     };
 
@@ -37,6 +37,7 @@ public String format(LogRecord record) {
         final DateFormat df = dateFormatThreadLocal.get();
         StringBuilder builder = new StringBuilder(1000);
         builder.append(df.format(new Date(record.getMillis()))).append(" ");
+        builder.append(record.getLevel().getName()).append(" ");
         builder.append(formatMessage(record));
 
         String throwable = "";

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/codec/data/PingResponseDataWriter.java
Patch:
@@ -31,6 +31,6 @@ public void writeTo(Integer entity, ByteBuf target) {
         if (entity == null || target == null) {
             return;
         }
-        target.writeByte(entity);
+        target.writeInt(entity);
     }
 }

File: sentinel-extension/sentinel-parameter-flow-control/src/test/java/com/alibaba/csp/sentinel/slots/block/flow/param/ParamFlowCheckerTest.java
Patch:
@@ -160,7 +160,7 @@ public void testPassLocalCheckForCollection() throws InterruptedException {
         ParameterMetric metric = new ParameterMetric();
         ParameterMetricStorage.getMetricsMap().put(resourceWrapper.getName(), metric);
         metric.getRuleTimeCounterMap().put(rule, new ConcurrentLinkedHashMapWrapper<Object, AtomicLong>(4000));
-        metric.getRuleTokenCounterMap().put(rule, new ConcurrentLinkedHashMapWrapper<Object, AtomicInteger>(4000));
+        metric.getRuleTokenCounterMap().put(rule, new ConcurrentLinkedHashMapWrapper<Object, AtomicLong>(4000));
 
         assertTrue(ParamFlowChecker.passCheck(resourceWrapper, rule, 1, list));
         assertFalse(ParamFlowChecker.passCheck(resourceWrapper, rule, 1, list));

File: sentinel-extension/sentinel-parameter-flow-control/src/test/java/com/alibaba/csp/sentinel/slots/block/flow/param/ParamFlowSlotTest.java
Patch:
@@ -99,8 +99,8 @@ public void testEntryWhenParamFlowExists() throws Throwable {
 
         ParameterMetric metric = mock(ParameterMetric.class);
 
-        CacheMap<Object, AtomicLong> map = new ConcurrentLinkedHashMapWrapper<Object, AtomicLong>(4000);
-        CacheMap<Object, AtomicInteger> map2 = new ConcurrentLinkedHashMapWrapper<Object, AtomicInteger>(4000);
+        CacheMap<Object, AtomicLong> map = new ConcurrentLinkedHashMapWrapper<>(4000);
+        CacheMap<Object, AtomicLong> map2 = new ConcurrentLinkedHashMapWrapper<>(4000);
         when(metric.getRuleTimeCounter(rule)).thenReturn(map);
         when(metric.getRuleTokenCounter(rule)).thenReturn(map2);
         map.put(argToGo, new AtomicLong(TimeUtil.currentTimeMillis()));

File: sentinel-transport/sentinel-transport-simple-http/src/main/java/com/alibaba/csp/sentinel/transport/heartbeat/SimpleHttpHeartbeatSender.java
Patch:
@@ -100,7 +100,7 @@ private List<InetSocketAddress> getDefaultConsoleIps() {
         try {
             String ipsStr = TransportConfig.getConsoleServer();
             if (StringUtil.isEmpty(ipsStr)) {
-                RecordLog.warn("[NettyHttpHeartbeatSender] Dashboard server address not configured");
+                RecordLog.warn("[SimpleHttpHeartbeatSender] Dashboard server address not configured");
                 return newAddrs;
             }
 

File: sentinel-adapter/sentinel-api-gateway-adapter-common/src/main/java/com/alibaba/csp/sentinel/adapter/gateway/common/param/GatewayParamParser.java
Patch:
@@ -62,10 +62,10 @@ public Object[] parseParameterFor(String resource, T request, Predicate<GatewayF
                 hasNonParamRule = true;
             }
         }
-        if (gatewayRules.isEmpty()) {
+        if (!hasNonParamRule && gatewayRules.isEmpty()) {
             return new Object[0];
         }
-        if (predSet.size() != 1 || predSet.contains(false)) {
+        if (predSet.size() > 1 || predSet.contains(false)) {
             return new Object[0];
         }
         int size = hasNonParamRule ? gatewayRules.size() + 1 : gatewayRules.size();

File: sentinel-adapter/sentinel-spring-cloud-gateway-adapter/src/test/java/com/alibaba/csp/sentinel/adapter/gateway/sc/SpringCloudGatewayParamParserTest.java
Patch:
@@ -67,7 +67,7 @@ public void testParseParametersNoParamItem() {
 
         Object[] params = paramParser.parseParameterFor(routeId1, exchange,
             e -> e.getResourceMode() == 0);
-        assertThat(params.length).isZero();
+        assertThat(params.length).isEqualTo(1);
     }
 
     @Test

File: sentinel-dashboard/src/test/java/com/alibaba/csp/sentinel/dashboard/rule/zookeeper/FlowRuleZookeeperProvider.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-@Component("flowRuleZookeeperPublisher")
+@Component("flowRuleZookeeperProvider")
 public class FlowRuleZookeeperProvider implements DynamicRuleProvider<List<FlowRuleEntity>> {
 
     @Autowired

File: sentinel-adapter/sentinel-reactor-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/reactor/SentinelReactorSubscriber.java
Patch:
@@ -160,7 +160,7 @@ protected void hookOnCancel() {
 
     private boolean tryCompleteEntry() {
         if (currentEntry != null && entryExited.compareAndSet(false, true)) {
-            currentEntry.exit();
+            currentEntry.exit(1, entryConfig.getArgs());
             return true;
         }
         return false;

File: sentinel-adapter/sentinel-zuul-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/gateway/zuul/filters/SentinelZuulPreFilter.java
Patch:
@@ -133,6 +133,8 @@ public Object run() throws ZuulException {
             // Set fallback response.
             ctx.setResponseBody(blockResponse.toString());
             ctx.setResponseStatusCode(blockResponse.getCode());
+            // Set Response ContentType
+            ctx.getResponse().setContentType("application/json; charset=utf-8");
         } finally {
             // We don't exit the entry here. We need to exit the entries in post filter to record Rt correctly.
             // So here the entries will be carried in the request context.

File: sentinel-demo/sentinel-demo-zuul-gateway/src/main/java/com/alibaba/csp/sentinel/demo/zuul/gateway/ZuulConfig.java
Patch:
@@ -43,4 +43,4 @@ public ZuulFilter sentinelZuulPostFilter() {
     public ZuulFilter sentinelZuulErrorFilter() {
         return new SentinelZuulErrorFilter(-1);
     }
-}
+}
\ No newline at end of file

File: sentinel-dashboard/src/test/java/com/alibaba/csp/sentinel/dashboard/rule/zookeeper/FlowRuleZookeeperPublisher.java
Patch:
@@ -44,7 +44,7 @@ public void publish(String app, List<FlowRuleEntity> rules) throws Exception {
         if (stat == null) {
             zkClient.create().creatingParentContainersIfNeeded().withMode(CreateMode.PERSISTENT).forPath(path, null);
         }
-        byte[] data = CollectionUtils.isEmpty(rules) ? "".getBytes() : converter.convert(rules).getBytes();
+        byte[] data = CollectionUtils.isEmpty(rules) ? "[]".getBytes() : converter.convert(rules).getBytes();
         zkClient.setData().forPath(path, data);
     }
 }
\ No newline at end of file

File: sentinel-dashboard/src/main/java/com/alibaba/csp/sentinel/dashboard/controller/SystemController.java
Patch:
@@ -78,7 +78,7 @@ Result<List<SystemRuleEntity>> queryMachineRules(HttpServletRequest request, Str
         }
     }
 
-    private int countNotNullAndNotNegtive(Number... values) {
+    private int countNotNullAndNotNegative(Number... values) {
         int notNullCount = 0;
         for (int i = 0; i < values.length; i++) {
             if (values[i] != null && values[i].doubleValue() >= 0) {
@@ -103,7 +103,7 @@ Result<?> add(HttpServletRequest request,
         if (port == null) {
             return Result.ofFail(-1, "port can't be null");
         }
-        int notNullCount = countNotNullAndNotNegtive(avgLoad, avgRt, maxThread, qps);
+        int notNullCount = countNotNullAndNotNegative(avgLoad, avgRt, maxThread, qps);
         if (notNullCount != 1) {
             return Result.ofFail(-1, "only one of [avgLoad, avgRt, maxThread, qps] "
                 + "value must be set >= 0, but " + notNullCount + " values get");

File: sentinel-demo/sentinel-demo-annotation-spring-aop/src/main/java/com/alibaba/csp/sentinel/demo/annotation/aop/service/TestService.java
Patch:
@@ -23,4 +23,6 @@ public interface TestService {
     void test();
 
     String hello(long s);
+
+    String helloAnother(String name);
 }

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/Constants.java
Patch:
@@ -64,4 +64,6 @@ public final class Constants {
      * The global switch for Sentinel.
      */
     public static volatile boolean ON = true;
+
+    private Constants() {}
 }

File: sentinel-dashboard/src/main/java/com/alibaba/csp/sentinel/dashboard/datasource/entity/rule/DegradeRuleEntity.java
Patch:
@@ -145,7 +145,8 @@ public void setGmtModified(Date gmtModified) {
         this.gmtModified = gmtModified;
     }
 
-    public DegradeRule toDegradeRule() {
+    @Override
+    public DegradeRule toRule() {
         DegradeRule rule = new DegradeRule();
         rule.setResource(resource);
         rule.setLimitApp(limitApp);

File: sentinel-dashboard/src/main/java/com/alibaba/csp/sentinel/dashboard/datasource/entity/rule/FlowRuleEntity.java
Patch:
@@ -223,7 +223,8 @@ public void setGmtModified(Date gmtModified) {
         this.gmtModified = gmtModified;
     }
 
-    public FlowRule toFlowRule() {
+    @Override
+    public FlowRule toRule() {
         FlowRule flowRule = new FlowRule();
         flowRule.setCount(this.count);
         flowRule.setGrade(this.grade);

File: sentinel-dashboard/src/main/java/com/alibaba/csp/sentinel/dashboard/datasource/entity/rule/SystemRuleEntity.java
Patch:
@@ -135,7 +135,8 @@ public void setGmtModified(Date gmtModified) {
         this.gmtModified = gmtModified;
     }
 
-    public SystemRule toSystemRule() {
+    @Override
+    public SystemRule toRule() {
         SystemRule rule = new SystemRule();
         rule.setHighestSystemLoad(avgLoad);
         rule.setAvgRt(avgRt);

File: sentinel-adapter/sentinel-reactor-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/reactor/SentinelReactorSubscriber.java
Patch:
@@ -88,7 +88,7 @@ private void entryWhenSubscribed() {
             ContextUtil.enter(sentinelContextConfig.getContextName(), sentinelContextConfig.getOrigin());
         }
         try {
-            AsyncEntry entry = SphU.asyncEntry(entryConfig.getResourceName());
+            AsyncEntry entry = SphU.asyncEntry(entryConfig.getResourceName(), entryConfig.getEntryType());
             this.currentEntry = entry;
             actual.onSubscribe(this);
         } catch (BlockException ex) {

File: sentinel-dashboard/src/main/java/com/alibaba/csp/sentinel/dashboard/metric/MetricFetcher.java
Patch:
@@ -195,6 +195,7 @@ private void fetchOnce(String app, long startTime, long endTime, int maxWaitSeco
         for (final MachineInfo machine : machines) {
             // auto remove
             if (machine.isDead()) {
+                latch.countDown();
                 appManagement.getDetailApp(app).removeMachine(machine.getIp(), machine.getPort());
                 logger.info("Dead machine removed: {}:{} of {}", machine.getIp(), machine.getPort(), app);
                 continue;

File: sentinel-extension/sentinel-annotation-aspectj/src/main/java/com/alibaba/csp/sentinel/annotation/aspectj/SentinelResourceAspect.java
Patch:
@@ -62,7 +62,7 @@ public Object invokeResourceWithSentinel(ProceedingJoinPoint pjp) throws Throwab
             throw ex;
         } finally {
             if (entry != null) {
-                entry.exit();
+                entry.exit(1, pjp.getArgs());
             }
         }
     }

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/Constants.java
Patch:
@@ -41,7 +41,7 @@ public final class Constants {
     public final static String TOTAL_IN_RESOURCE_NAME = "__total_inbound_traffic__";
 
     public final static DefaultNode ROOT = new EntranceNode(new StringResourceWrapper(ROOT_ID, EntryType.IN),
-        Env.nodeBuilder.buildClusterNode());
+        new ClusterNode());
 
     /**
      * Statistics for {@link SystemRule} checking.

File: sentinel-cluster/sentinel-cluster-client-default/src/main/java/com/alibaba/csp/sentinel/cluster/client/NettyTransportClient.java
Patch:
@@ -60,6 +60,7 @@
  */
 public class NettyTransportClient implements ClusterTransportClient {
 
+    @SuppressWarnings("PMD.ThreadPoolCreationRule")
     private static final ScheduledExecutorService SCHEDULER = Executors.newScheduledThreadPool(1,
         new NamedThreadFactory("sentinel-cluster-transport-client-scheduler"));
 

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/connection/ConnectionPool.java
Patch:
@@ -38,6 +38,7 @@
  */
 public class ConnectionPool {
 
+    @SuppressWarnings("PMD.ThreadPoolCreationRule")
     private static final ScheduledExecutorService TIMER = Executors.newScheduledThreadPool(2);
 
     /**

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeRule.java
Patch:
@@ -57,6 +57,7 @@ public class DegradeRule extends AbstractRule {
 
     private static final int RT_MAX_EXCEED_N = 5;
 
+    @SuppressWarnings("PMD.ThreadPoolCreationRule")
     private static ScheduledExecutorService pool = Executors.newScheduledThreadPool(
         Runtime.getRuntime().availableProcessors(), new NamedThreadFactory("sentinel-degrade-reset-task", true));
 

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/FlowRuleManager.java
Patch:
@@ -51,6 +51,7 @@ public class FlowRuleManager {
     private static final FlowPropertyListener LISTENER = new FlowPropertyListener();
     private static SentinelProperty<List<FlowRule>> currentProperty = new DynamicSentinelProperty<List<FlowRule>>();
 
+    @SuppressWarnings("PMD.ThreadPoolCreationRule")
     private static final ScheduledExecutorService SCHEDULER = Executors.newScheduledThreadPool(1,
         new NamedThreadFactory("sentinel-metrics-record-task", true));
 

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/system/SystemRuleManager.java
Patch:
@@ -88,6 +88,7 @@ public class SystemRuleManager {
     private final static SystemPropertyListener listener = new SystemPropertyListener();
     private static SentinelProperty<List<SystemRule>> currentProperty = new DynamicSentinelProperty<List<SystemRule>>();
 
+    @SuppressWarnings("PMD.ThreadPoolCreationRule")
     private final static ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1,
         new NamedThreadFactory("sentinel-system-status-record-task", true));
 

File: sentinel-dashboard/src/main/java/com/alibaba/csp/sentinel/dashboard/metric/MetricFetcher.java
Patch:
@@ -84,6 +84,8 @@ public class MetricFetcher {
     private AppManagement appManagement;
 
     private CloseableHttpAsyncClient httpclient;
+
+    @SuppressWarnings("PMD.ThreadPoolCreationRule")
     private ScheduledExecutorService fetchScheduleService = Executors.newScheduledThreadPool(1,
         new NamedThreadFactory("sentinel-dashboard-metrics-fetch-task"));
     private ExecutorService fetchService;

File: sentinel-demo/sentinel-demo-dubbo/src/main/java/com/alibaba/csp/sentinel/demo/dubbo/demo2/FooConsumerBootstrap.java
Patch:
@@ -48,6 +48,7 @@ public class FooConsumerBootstrap {
     private static final String RES_KEY = "com.alibaba.csp.sentinel.demo.dubbo.FooService:sayHello(java.lang.String)";
     private static final String INTERFACE_RES_KEY = "com.alibaba.csp.sentinel.demo.dubbo.FooService";
 
+    @SuppressWarnings("PMD.ThreadPoolCreationRule")
     private static final ExecutorService pool = Executors.newFixedThreadPool(10,
         new NamedThreadFactory("dubbo-consumer-pool"));
 

File: sentinel-demo/sentinel-demo-rocketmq/src/main/java/com/alibaba/csp/sentinel/demo/rocketmq/PullConsumerDemo.java
Patch:
@@ -44,6 +44,7 @@ public class PullConsumerDemo {
 
     private static final Map<MessageQueue, Long> OFFSET_TABLE = new HashMap<MessageQueue, Long>();
 
+    @SuppressWarnings("PMD.ThreadPoolCreationRule")
     private static final ExecutorService pool = Executors.newFixedThreadPool(32);
 
     private static final AtomicLong SUCCESS_COUNT = new AtomicLong(0);

File: sentinel-demo/sentinel-demo-spring-webflux/src/main/java/com/alibaba/csp/sentinel/demo/spring/webflux/service/FooService.java
Patch:
@@ -31,6 +31,7 @@
 @Service
 public class FooService {
 
+    @SuppressWarnings("PMD.ThreadPoolCreationRule")
     private final ExecutorService pool = Executors.newFixedThreadPool(8);
     private final Scheduler scheduler = Schedulers.fromExecutor(pool);
 

File: sentinel-extension/sentinel-datasource-extension/src/main/java/com/alibaba/csp/sentinel/datasource/AutoRefreshDataSource.java
Patch:
@@ -48,6 +48,7 @@ public AutoRefreshDataSource(Converter<S, T> configParser, final long recommendR
         startTimerService();
     }
 
+    @SuppressWarnings("PMD.ThreadPoolCreationRule")
     private void startTimerService() {
         service = Executors.newScheduledThreadPool(1,
             new NamedThreadFactory("sentinel-datasource-auto-refresh-task", true));

File: sentinel-transport/sentinel-transport-common/src/main/java/com/alibaba/csp/sentinel/transport/init/HeartbeatSenderInitFunc.java
Patch:
@@ -35,6 +35,7 @@
  */
 public class HeartbeatSenderInitFunc implements InitFunc {
 
+    @SuppressWarnings("PMD.ThreadPoolCreationRule")
     private static ScheduledExecutorService pool = Executors.newScheduledThreadPool(2,
         new NamedThreadFactory("sentinel-heartbeat-send-task", true));
 

File: sentinel-transport/sentinel-transport-netty-http/src/main/java/com/alibaba/csp/sentinel/transport/command/NettyHttpCommandCenter.java
Patch:
@@ -35,6 +35,7 @@ public class NettyHttpCommandCenter implements CommandCenter {
 
     private final HttpServer server = new HttpServer();
 
+    @SuppressWarnings("PMD.ThreadPoolCreationRule")
     private final ExecutorService pool = Executors.newSingleThreadExecutor(
         new NamedThreadFactory("sentinel-netty-command-center-executor"));
 

File: sentinel-transport/sentinel-transport-simple-http/src/main/java/com/alibaba/csp/sentinel/transport/command/SimpleHttpCommandCenter.java
Patch:
@@ -55,6 +55,7 @@ public class SimpleHttpCommandCenter implements CommandCenter {
     @SuppressWarnings("rawtypes")
     private static final Map<String, CommandHandler> handlerMap = new ConcurrentHashMap<String, CommandHandler>();
 
+    @SuppressWarnings("PMD.ThreadPoolCreationRule")
     private ExecutorService executor = Executors.newSingleThreadExecutor(
         new NamedThreadFactory("sentinel-command-center-executor"));
     private ExecutorService bizExecutor;

File: sentinel-transport/sentinel-transport-netty-http/src/main/java/com/alibaba/csp/sentinel/transport/heartbeat/HttpHeartbeatSender.java
Patch:
@@ -65,7 +65,7 @@ public HttpHeartbeatSender() {
         }
     }
 
-    private List<Tuple2<String, Integer>> parseDashboardList() {
+    protected static List<Tuple2<String, Integer>> parseDashboardList() {
         List<Tuple2<String, Integer>> list = new ArrayList<Tuple2<String, Integer>>();
         try {
             String ipsStr = TransportConfig.getConsoleServer();
@@ -86,7 +86,7 @@ private List<Tuple2<String, Integer>> parseDashboardList() {
                     continue;
                 }
                 String[] ipPort = ipPortStr.trim().split(":");
-                int port = 8080;
+                int port = 80;
                 if (ipPort.length > 1) {
                     port = Integer.parseInt(ipPort[1].trim());
                 }

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/statistic/metric/ClusterMetricLeapArray.java
Patch:
@@ -40,7 +40,7 @@ public ClusterMetricLeapArray(int sampleCount, int intervalInMs) {
     }
 
     @Override
-    public ClusterMetricBucket newEmptyBucket() {
+    public ClusterMetricBucket newEmptyBucket(long timeMillis) {
         return new ClusterMetricBucket();
     }
 

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/statistic/metric/ClusterParameterLeapArray.java
Patch:
@@ -37,7 +37,7 @@ public ClusterParameterLeapArray(int sampleCount, int intervalInMs, int maxCapac
     }
 
     @Override
-    public CacheMap<Object, C> newEmptyBucket() {
+    public CacheMap<Object, C> newEmptyBucket(long timeMillis) {
         return new ConcurrentLinkedHashMapWrapper<>(maxCapacity);
     }
 
@@ -48,5 +48,4 @@ protected WindowWrap<CacheMap<Object, C>> resetWindowTo(WindowWrap<CacheMap<Obje
         return w;
     }
 
-
 }

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/node/Node.java
Patch:
@@ -28,7 +28,7 @@
  * @author leyou
  * @author Eric Zhao
  */
-public interface Node extends DebugSupport {
+public interface Node extends OccupySupport, DebugSupport {
 
     /**
      * Get incoming request per minute ({@code pass + block}).

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/FlowRuleChecker.java
Patch:
@@ -61,7 +61,7 @@ private static boolean passLocalCheck(FlowRule rule, Context context, DefaultNod
             return true;
         }
 
-        return rule.getRater().canPass(selectedNode, acquireCount);
+        return rule.getRater().canPass(selectedNode, acquireCount, prioritized);
     }
 
     static Node selectReferenceNode(FlowRule rule, Context context, DefaultNode node) {

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/statistic/base/UnaryLeapArray.java
Patch:
@@ -25,7 +25,7 @@ public UnaryLeapArray(int sampleCount, int intervalInMs) {
     }
 
     @Override
-    public LongAdder newEmptyBucket() {
+    public LongAdder newEmptyBucket(long time) {
         return new LongAdder();
     }
 

File: sentinel-core/src/test/java/com/alibaba/csp/sentinel/slots/statistic/base/LeapArrayTest.java
Patch:
@@ -35,7 +35,7 @@ public void testGetValidHead() {
         int sampleCount = intervalInMs / windowLengthInMs;
         LeapArray<AtomicInteger> leapArray = new LeapArray<AtomicInteger>(sampleCount, intervalInMs) {
             @Override
-            public AtomicInteger newEmptyBucket() {
+            public AtomicInteger newEmptyBucket(long time) {
                 return new AtomicInteger(0);
             }
 

File: sentinel-extension/sentinel-parameter-flow-control/src/main/java/com/alibaba/csp/sentinel/slots/statistic/metric/HotParameterLeapArray.java
Patch:
@@ -42,7 +42,7 @@ public HotParameterLeapArray(int sampleCount, int intervalInMs) {
     }
 
     @Override
-    public ParamMapBucket newEmptyBucket() {
+    public ParamMapBucket newEmptyBucket(long timeMillis) {
         return new ParamMapBucket();
     }
 

File: sentinel-adapter/sentinel-reactor-adapter/src/test/java/com/alibaba/csp/sentinel/adapter/reactor/FluxSentinelOperatorTestIntegrationTest.java
Patch:
@@ -45,7 +45,7 @@ public void testEmitFluxError() {
 
         ClusterNode cn = ClusterBuilderSlot.getClusterNode(resourceName);
         assertNotNull(cn);
-        assertEquals(1, cn.passQps());
+        assertEquals(1, cn.passQps(), 0.01);
         assertEquals(1, cn.totalException());
     }
 

File: sentinel-adapter/sentinel-spring-webflux-adapter/src/test/java/com/alibaba/csp/sentinel/adapter/spring/webflux/SentinelWebFluxIntegrationTest.java
Patch:
@@ -68,7 +68,7 @@ public void testWebFluxFilterBasic() throws Exception {
 
         ClusterNode cn = ClusterBuilderSlot.getClusterNode(url);
         assertNotNull(cn);
-        assertEquals(1, cn.passQps());
+        assertEquals(1, cn.passQps(), 0.01);
     }
 
     @Test
@@ -94,7 +94,7 @@ public void testCustomizedUrlCleaner() throws Exception {
             .expectBody(String.class).isEqualTo("Hello 2");
 
         ClusterNode cn = ClusterBuilderSlot.getClusterNode(fooPrefix + "*");
-        assertEquals(2, cn.passQps());
+        assertEquals(2, cn.passQps(), 0.01);
         assertNull(ClusterBuilderSlot.getClusterNode(url1));
         assertNull(ClusterBuilderSlot.getClusterNode(url2));
 

File: sentinel-adapter/sentinel-web-servlet/src/test/java/com/alibaba/csp/sentinel/adapter/servlet/CommonFilterTest.java
Patch:
@@ -83,7 +83,7 @@ public void testCommonFilterMiscellaneous() throws Exception {
 
         ClusterNode cn = ClusterBuilderSlot.getClusterNode(url);
         assertNotNull(cn);
-        assertEquals(1, cn.passQps());
+        assertEquals(1, cn.passQps(), 0.01);
 
         testCommonBlockAndRedirectBlockPage(url, cn);
 
@@ -99,7 +99,7 @@ private void testCommonBlockAndRedirectBlockPage(String url, ClusterNode cn) thr
         this.mvc.perform(get(url).accept(MediaType.TEXT_PLAIN))
             .andExpect(status().isOk())
             .andExpect(content().string(FilterUtil.DEFAULT_BLOCK_MSG));
-        assertEquals(1, cn.blockQps());
+        assertEquals(1, cn.blockQps(), 0.01);
 
         // Test for redirect.
         String redirectUrl = "http://some-location.com";
@@ -132,7 +132,7 @@ public String clean(String originUrl) {
             .andExpect(status().isOk())
             .andExpect(content().string("Hello 2"));
         ClusterNode cn = ClusterBuilderSlot.getClusterNode(fooPrefix + "*");
-        assertEquals(2, cn.passQps());
+        assertEquals(2, cn.passQps(), 0.01);
         assertNull(ClusterBuilderSlot.getClusterNode(url1));
         assertNull(ClusterBuilderSlot.getClusterNode(url2));
 

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/node/DefaultNode.java
Patch:
@@ -48,7 +48,7 @@ public class DefaultNode extends StatisticNode {
     /**
      * The list of all child nodes.
      */
-    private volatile Set<Node> childList = new HashSet<Node>();
+    private volatile Set<Node> childList = new HashSet<>();
 
     /**
      * Associated cluster node.
@@ -85,7 +85,7 @@ public void addChild(Node node) {
         if (!childList.contains(node)) {
             synchronized (this) {
                 if (!childList.contains(node)) {
-                    Set<Node> newSet = new HashSet<Node>(childList.size() + 1);
+                    Set<Node> newSet = new HashSet<>(childList.size() + 1);
                     newSet.addAll(childList);
                     newSet.add(node);
                     childList = newSet;
@@ -99,7 +99,7 @@ public void addChild(Node node) {
      * Reset the child node list.
      */
     public void removeChildList() {
-        this.childList = new HashSet<Node>();
+        this.childList = new HashSet<>();
     }
 
     public Set<Node> getChildList() {

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeRule.java
Patch:
@@ -184,7 +184,7 @@ public boolean passCheck(Context context, DefaultNode node, int acquireCount, Ob
         } else if (grade == RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO) {
             double exception = clusterNode.exceptionQps();
             double success = clusterNode.successQps();
-            long total = clusterNode.totalQps();
+            double total = clusterNode.totalQps();
             // if total qps less than RT_MAX_EXCEED_N, pass.
             if (total < RT_MAX_EXCEED_N) {
                 return true;

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/controller/WarmUpController.java
Patch:
@@ -112,9 +112,9 @@ public boolean canPass(Node node, int acquireCount) {
 
     @Override
     public boolean canPass(Node node, int acquireCount, boolean prioritized) {
-        long passQps = node.passQps();
+        long passQps = (long) node.passQps();
 
-        long previousQps = node.previousPassQps();
+        long previousQps = (long) node.previousPassQps();
         syncToken(previousQps);
 
         // 开始计算它的斜率

File: sentinel-core/src/test/java/com/alibaba/csp/sentinel/node/ClusterNodeTest.java
Patch:
@@ -139,18 +139,18 @@ public void testTraceException() {
         // test count<=0, no exceptionQps added
         clusterNode.trace(exception, 0);
         clusterNode.trace(exception, -1);
-        assertEquals(0, clusterNode.exceptionQps());
+        assertEquals(0, clusterNode.exceptionQps(), 0.01);
         assertEquals(0, clusterNode.totalException());
 
         // test count=1, not BlockException, 1 exceptionQps added
         clusterNode.trace(exception, 1);
-        assertEquals(1, clusterNode.exceptionQps());
+        assertEquals(1, clusterNode.exceptionQps(), 0.01);
         assertEquals(1, clusterNode.totalException());
 
         // test count=1, BlockException, no exceptionQps added
         FlowException flowException = new FlowException("flow");
         clusterNode.trace(flowException, 1);
-        assertEquals(1, clusterNode.exceptionQps());
+        assertEquals(1, clusterNode.exceptionQps(), 0.01);
         assertEquals(1, clusterNode.totalException());
     }
 }

File: sentinel-core/src/test/java/com/alibaba/csp/sentinel/slots/block/flow/controller/DefaultControllerTest.java
Patch:
@@ -16,7 +16,7 @@ public class DefaultControllerTest {
 
     @Test
     public void testCanPassForQps() {
-        long threshold = 10;
+        double threshold = 10;
         TrafficShapingController controller = new DefaultController(threshold, RuleConstant.FLOW_GRADE_QPS);
         Node node = mock(Node.class);
         when(node.passQps()).thenReturn(threshold - 1)

File: sentinel-dashboard/src/main/java/com/alibaba/csp/sentinel/dashboard/controller/AppController.java
Patch:
@@ -77,7 +77,7 @@ public Result<List<MachineInfoVo>> getMachinesByApp(@PathVariable("app") String
         return Result.ofSuccess(MachineInfoVo.fromMachineInfoList(list));
     }
     
-    @GetMapping(value = "/{app}/machine/remove.json")
+    @RequestMapping(value = "/{app}/machine/remove.json")
     public Result<String> removeMachineById(
             @PathVariable("app") String app,
             @RequestParam(name = "ip") String ip,

File: sentinel-core/src/test/java/com/alibaba/csp/sentinel/AsyncEntryIntegrationTest.java
Patch:
@@ -59,7 +59,7 @@ public void run() {
                         @Override
                         public void run() {
                             try {
-                                TimeUnit.SECONDS.sleep(2);
+                                TimeUnit.MILLISECONDS.sleep(500);
                                 anotherSyncInAsync();
                                 System.out.println("Async result: 666");
                             } catch (InterruptedException e) {
@@ -178,7 +178,7 @@ public void testAsyncEntryUnderSyncEntry() throws Exception {
         }
 
         // we keep the original timeout of 15 seconds although the test should
-        // complete in less than 6 seconds
+        // complete in less than 3 seconds
         await().timeout(15, TimeUnit.SECONDS)
             .until(new Callable<DefaultNode>() {
                 @Override
@@ -249,7 +249,7 @@ private void invoke(final String arg, final Consumer<String> handler) {
             @Override
             public void run() {
                 try {
-                    TimeUnit.SECONDS.sleep(3);
+                    TimeUnit.MILLISECONDS.sleep(1000);
                     String resp = arg + ": " + System.currentTimeMillis();
                     handler.accept(resp);
 

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/command/handler/FetchClusterServerInfoCommandHandler.java
Patch:
@@ -43,7 +43,7 @@ public CommandResponse<String> handle(CommandRequest request) {
         JSONArray connectionGroups = new JSONArray();
         Set<String> namespaceSet = ClusterServerConfigManager.getNamespaceSet();
         for (String namespace : namespaceSet) {
-            ConnectionGroup group = ConnectionManager.getConnectionGroup(namespace);
+            ConnectionGroup group = ConnectionManager.getOrCreateConnectionGroup(namespace);
             if (group != null) {
                 connectionGroups.add(group);
             }

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/connection/ConnectionManager.java
Patch:
@@ -55,7 +55,7 @@ public static ConnectionGroup getOrCreateGroup(String namespace) {
         ConnectionGroup group = CONN_MAP.get(namespace);
         if (group == null) {
             synchronized (CREATE_LOCK) {
-                if (CONN_MAP.get(namespace) == null) {
+                if ((group = CONN_MAP.get(namespace)) == null) {
                     group = new ConnectionGroup(namespace);
                     CONN_MAP.put(namespace, group);
                 }

File: sentinel-extension/sentinel-parameter-flow-control/src/main/java/com/alibaba/csp/sentinel/init/ParamFlowStatisticSlotCallbackInit.java
Patch:
@@ -16,6 +16,7 @@
 package com.alibaba.csp.sentinel.init;
 
 import com.alibaba.csp.sentinel.slots.statistic.ParamFlowStatisticEntryCallback;
+import com.alibaba.csp.sentinel.slots.statistic.ParamFlowStatisticExitCallback;
 import com.alibaba.csp.sentinel.slots.statistic.StatisticSlotCallbackRegistry;
 
 /**
@@ -31,5 +32,7 @@ public class ParamFlowStatisticSlotCallbackInit implements InitFunc {
     public void init() {
         StatisticSlotCallbackRegistry.addEntryCallback(ParamFlowStatisticEntryCallback.class.getName(),
             new ParamFlowStatisticEntryCallback());
+        StatisticSlotCallbackRegistry.addExitCallback(ParamFlowStatisticExitCallback.class.getName(),
+            new ParamFlowStatisticExitCallback());
     }
 }

File: sentinel-extension/sentinel-parameter-flow-control/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/param/ParamFlowRule.java
Patch:
@@ -41,7 +41,7 @@ public ParamFlowRule(String resourceName) {
     }
 
     /**
-     * The threshold type of flow control (1: QPS).
+     * The threshold type of flow control (0: thread count, 1: QPS).
      */
     private int grade = RuleConstant.FLOW_GRADE_QPS;
 

File: sentinel-extension/sentinel-parameter-flow-control/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/param/ParamFlowRuleUtil.java
Patch:
@@ -31,7 +31,7 @@ public final class ParamFlowRuleUtil {
 
     public static boolean isValidRule(ParamFlowRule rule) {
         return rule != null && !StringUtil.isBlank(rule.getResource()) && rule.getCount() >= 0
-            && rule.getParamIdx() != null && rule.getParamIdx() >= 0 && checkCluster(rule);
+            && rule.getGrade() >= 0 && rule.getParamIdx() != null && rule.getParamIdx() >= 0 && checkCluster(rule);
     }
 
     private static boolean checkCluster(/*@PreChecked*/ ParamFlowRule rule) {

File: sentinel-extension/sentinel-parameter-flow-control/src/main/java/com/alibaba/csp/sentinel/slots/statistic/ParamFlowStatisticEntryCallback.java
Patch:
@@ -37,6 +37,7 @@ public void onPass(Context context, ResourceWrapper resourceWrapper, DefaultNode
 
         if (parameterMetric != null) {
             parameterMetric.addPass(count, args);
+            parameterMetric.addThreadCount(args);
         }
     }
 

File: sentinel-extension/sentinel-parameter-flow-control/src/test/java/com/alibaba/csp/sentinel/slots/block/flow/param/ParamFlowRuleManagerTest.java
Patch:
@@ -79,7 +79,7 @@ public void testLoadHotParamRulesAndGet() {
         ParamFlowRule ruleC = new ParamFlowRule(resA)
             .setCount(8)
             .setParamIdx(1)
-            .setGrade(RuleConstant.FLOW_GRADE_QPS);
+            .setGrade(RuleConstant.FLOW_GRADE_THREAD);
         // Rule D is for resource B.
         ParamFlowRule ruleD = new ParamFlowRule(resB)
             .setCount(9)

File: sentinel-extension/sentinel-parameter-flow-control/src/test/java/com/alibaba/csp/sentinel/slots/block/flow/param/ParamFlowSlotTest.java
Patch:
@@ -97,6 +97,7 @@ public void testInitParamMetrics() {
         ParameterMetric metric = ParamFlowSlot.getParamMetric(resourceWrapper);
         assertNotNull(metric);
         assertNotNull(metric.getRollingParameters().get(index));
+        assertNotNull(metric.getThreadCountMap().get(index));
 
         // Duplicate init.
         paramFlowSlot.initHotParamMetricsFor(resourceWrapper, index);

File: sentinel-core/src/test/java/com/alibaba/csp/sentinel/base/metric/MetricsLeapArrayTest.java
Patch:
@@ -203,7 +203,7 @@ public void testListWindowsNewBucket() throws Exception {
         windowWraps.add(leapArray.currentWindow(time));
         windowWraps.add(leapArray.currentWindow(time + windowLengthInMs));
 
-        Thread.sleep(intervalInSec * 1000 + windowLengthInMs * 3);
+        Thread.sleep(intervalInMs + windowLengthInMs * 3);
 
         List<WindowWrap<MetricBucket>> list = leapArray.list();
         for (WindowWrap<MetricBucket> wrap : list) {

File: sentinel-core/src/test/java/com/alibaba/csp/sentinel/slots/block/flow/controller/WarmUpControllerTest.java
Patch:
@@ -23,7 +23,6 @@
 import org.junit.Test;
 
 import com.alibaba.csp.sentinel.node.Node;
-import com.alibaba.csp.sentinel.slots.block.flow.controller.WarmUpController;
 
 /**
  * @author jialiang.linjl
@@ -49,7 +48,7 @@ public void testWarmUp() throws InterruptedException {
         when(node.previousPassQps()).thenReturn(10L);
 
         for (int i = 0; i < 100; i++) {
-            Thread.sleep(1000);
+            Thread.sleep(100);
             warmupController.canPass(node, 1);
         }
         when(node.passQps()).thenReturn(8L);

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/nodeselector/NodeSelectorSlot.java
Patch:
@@ -33,7 +33,7 @@
  * <ol>
  * <li>adding a new {@link DefaultNode} if needed as the last child in the context.
  * The context's last node is the current node or the parent node of the context. </li>
- * <li>setting itself to the the context current node.</li>
+ * <li>setting itself to the context current node.</li>
  * </ol>
  * </p>
  *

File: sentinel-dashboard/src/main/java/com/taobao/csp/sentinel/dashboard/discovery/MachineDiscovery.java
Patch:
@@ -21,7 +21,7 @@
 public interface MachineDiscovery {
 
     long MAX_CLIENT_LIVE_TIME_MS = 1000 * 60 * 5;
-    String UNKNOWN_APP_NAME = "UNKNOWN";
+    String UNKNOWN_APP_NAME = "CLUSTER_NOT_STARTED";
 
     List<String> getAppNames();
 

File: sentinel-dashboard/src/main/java/com/taobao/csp/sentinel/dashboard/domain/cluster/config/ServerTransportConfig.java
Patch:
@@ -21,7 +21,7 @@
  */
 public class ServerTransportConfig {
 
-    public static final int DEFAULT_PORT = 8730;
+    public static final int DEFAULT_PORT = 18730;
     public static final int DEFAULT_IDLE_SECONDS = 600;
 
     private Integer port;

File: sentinel-dashboard/src/main/java/com/taobao/csp/sentinel/dashboard/domain/cluster/request/ClusterClientModifyRequest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.taobao.csp.sentinel.dashboard.domain.cluster;
+package com.taobao.csp.sentinel.dashboard.domain.cluster.request;
 
 import com.taobao.csp.sentinel.dashboard.domain.cluster.config.ClusterClientConfig;
 

File: sentinel-dashboard/src/main/java/com/taobao/csp/sentinel/dashboard/domain/cluster/request/ClusterModifyRequest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.taobao.csp.sentinel.dashboard.domain.cluster;
+package com.taobao.csp.sentinel.dashboard.domain.cluster.request;
 
 /**
  * @author Eric Zhao

File: sentinel-dashboard/src/main/java/com/taobao/csp/sentinel/dashboard/domain/cluster/request/ClusterServerModifyRequest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.taobao.csp.sentinel.dashboard.domain.cluster;
+package com.taobao.csp.sentinel.dashboard.domain.cluster.request;
 
 import java.util.Set;
 

File: sentinel-dashboard/src/main/java/com/taobao/csp/sentinel/dashboard/domain/cluster/state/ClusterStateSimpleEntity.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.taobao.csp.sentinel.dashboard.domain.cluster;
+package com.taobao.csp.sentinel.dashboard.domain.cluster.state;
 
 /**
  * @author Eric Zhao

File: sentinel-dashboard/src/main/java/com/taobao/csp/sentinel/dashboard/domain/cluster/state/ClusterUniversalStateVO.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.taobao.csp.sentinel.dashboard.domain.cluster;
+package com.taobao.csp.sentinel.dashboard.domain.cluster.state;
 
 /**
  * @author Eric Zhao

File: sentinel-dashboard/src/main/java/com/taobao/csp/sentinel/dashboard/rule/FlowRuleApiProvider.java
Patch:
@@ -25,7 +25,7 @@
 import com.taobao.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;
 import com.taobao.csp.sentinel.dashboard.discovery.AppManagement;
 import com.taobao.csp.sentinel.dashboard.discovery.MachineInfo;
-import com.taobao.csp.sentinel.dashboard.util.MachineUtil;
+import com.taobao.csp.sentinel.dashboard.util.MachineUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
@@ -47,7 +47,7 @@ public List<FlowRuleEntity> getRules(String appName) throws Exception {
         }
         List<MachineInfo> list = appManagement.getDetailApp(appName).getMachines()
             .stream()
-            .filter(MachineUtil::isMachineHealth)
+            .filter(MachineUtils::isMachineHealth)
             .sorted((e1, e2) -> {
                 if (e1.getTimestamp().before(e2.getTimestamp())) {
                     return 1;

File: sentinel-dashboard/src/main/java/com/taobao/csp/sentinel/dashboard/rule/FlowRuleApiPublisher.java
Patch:
@@ -24,7 +24,7 @@
 import com.taobao.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;
 import com.taobao.csp.sentinel.dashboard.discovery.AppManagement;
 import com.taobao.csp.sentinel.dashboard.discovery.MachineInfo;
-import com.taobao.csp.sentinel.dashboard.util.MachineUtil;
+import com.taobao.csp.sentinel.dashboard.util.MachineUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
@@ -51,7 +51,7 @@ public void publish(String app, List<FlowRuleEntity> rules) throws Exception {
         Set<MachineInfo> set = appManagement.getDetailApp(app).getMachines();
 
         for (MachineInfo machine : set) {
-            if (!MachineUtil.isMachineHealth(machine)) {
+            if (!MachineUtils.isMachineHealth(machine)) {
                 continue;
             }
             // TODO: parse the results

File: sentinel-dashboard/src/main/java/com/taobao/csp/sentinel/dashboard/view/FlowControllerV1.java
Patch:
@@ -134,6 +134,8 @@ public Result<FlowRuleEntity> apiAddFlowRule(@RequestBody FlowRuleEntity entity)
         Date date = new Date();
         entity.setGmtCreate(date);
         entity.setGmtModified(date);
+        entity.setLimitApp(entity.getLimitApp().trim());
+        entity.setResource(entity.getResource().trim());
         try {
             entity = repository.save(entity);
         } catch (Throwable throwable) {
@@ -224,7 +226,7 @@ public Result<FlowRuleEntity> updateIfNotNull(Long id, String app,
     }
 
     @DeleteMapping("/delete.json")
-    Result<?> delete(Long id) {
+    public Result<Long> delete(Long id) {
         if (id == null) {
             return Result.ofFail(-1, "id can't be null");
         }

File: sentinel-dashboard/src/main/java/com/taobao/csp/sentinel/dashboard/view/FlowControllerV2.java
Patch:
@@ -137,6 +137,8 @@ public Result<FlowRuleEntity> apiAddFlowRule(@RequestBody FlowRuleEntity entity)
         Date date = new Date();
         entity.setGmtCreate(date);
         entity.setGmtModified(date);
+        entity.setLimitApp(entity.getLimitApp().trim());
+        entity.setResource(entity.getResource().trim());
         try {
             entity = repository.save(entity);
             publishRules(entity.getApp());

File: sentinel-dashboard/src/test/java/com/taobao/csp/sentinel/dashboard/rule/nacos/NacosConfigUtil.java
Patch:
@@ -25,6 +25,7 @@ public final class NacosConfigUtil {
     
     public static final String FLOW_DATA_ID_POSTFIX = "-flow-rules";
     public static final String PARAM_FLOW_DATA_ID_POSTFIX = "-param-rules";
+    public static final String CLUSTER_MAP_DATA_ID_POSTFIX = "-cluster-map";
 
     /**
      * cc for `cluster-client`

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/NettyTransportServer.java
Patch:
@@ -53,7 +53,7 @@ public class NettyTransportServer implements ClusterTokenServer {
     private static final int DEFAULT_EVENT_LOOP_THREADS = Math.max(1,
         SystemPropertyUtil.getInt("io.netty.eventLoopThreads", Runtime.getRuntime().availableProcessors() * 2));
     private static final int MAX_RETRY_TIMES = 3;
-    private static final int RETRY_SLEEP_MS = 1000;
+    private static final int RETRY_SLEEP_MS = 2000;
 
     private final int port;
 
@@ -103,7 +103,7 @@ public void initChannel(SocketChannel ch) throws Exception {
             @Override
             public void operationComplete(ChannelFuture future) {
                 if (future.cause() != null) {
-                    RecordLog.info("[NettyTransportServer] Token server start failed (port=" + port + ")",
+                    RecordLog.info("[NettyTransportServer] Token server start failed (port=" + port + "), failedTimes: " + failedTimes.get(),
                         future.cause());
                     currentState.compareAndSet(SERVER_STATUS_STARTING, SERVER_STATUS_OFF);
                     int failCount = failedTimes.incrementAndGet();

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/config/ServerTransportConfig.java
Patch:
@@ -15,20 +15,21 @@
  */
 package com.alibaba.csp.sentinel.cluster.server.config;
 
+import com.alibaba.csp.sentinel.cluster.ClusterConstants;
+
 /**
  * @author Eric Zhao
  * @since 1.4.0
  */
 public class ServerTransportConfig {
 
-    public static final int DEFAULT_PORT = 8730;
     public static final int DEFAULT_IDLE_SECONDS = 600;
 
     private int port;
     private int idleSeconds;
 
     public ServerTransportConfig() {
-        this(DEFAULT_PORT, DEFAULT_IDLE_SECONDS);
+        this(ClusterConstants.DEFAULT_CLUSTER_SERVER_PORT, DEFAULT_IDLE_SECONDS);
     }
 
     public ServerTransportConfig(int port, int idleSeconds) {

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/SphO.java
Patch:
@@ -31,7 +31,7 @@
  * Conceptually, physical or logical resource that need protection should be
  * surrounded by an entry. The requests to this resource will be blocked if any
  * criteria is met, eg. when any {@link Rule}'s threshold is exceeded. Once blocked,
- * {@link SphU}#enter() will return false.
+ * {@link SphO}#enter() will return false.
  *
  * <p>
  * To configure the criteria, we can use <code>XXXRuleManager.loadRules()</code> to add rules. eg.

File: sentinel-dashboard/src/main/java/com/taobao/csp/sentinel/dashboard/rule/FlowRuleApiPublisher.java
Patch:
@@ -45,7 +45,7 @@ public void publish(String app, List<FlowRuleEntity> rules) throws Exception {
         if (StringUtil.isBlank(app)) {
             return;
         }
-        if (rules == null || rules.isEmpty()) {
+        if (rules == null) {
             return;
         }
         Set<MachineInfo> set = appManagement.getDetailApp(app).getMachines();

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/node/metric/MetricSearcher.java
Patch:
@@ -134,7 +134,7 @@ public synchronized List<MetricNode> findByTimeAndResource(long beginTimeMs, lon
                     MetricWriter.formIndexFileName(fileName), offsetInIndex);
             offsetInIndex = 0;
             if (offset != -1) {
-                return metricsReader.readMetricsByEndTime(fileNames, i, offset, endTimeMs, identity);
+                return metricsReader.readMetricsByEndTime(fileNames, i, offset, beginTimeMs, endTimeMs, identity);
             }
         }
         return null;

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/ClusterRuleConstant.java
Patch:
@@ -22,7 +22,7 @@
 public final class ClusterRuleConstant {
 
     public static final int FLOW_CLUSTER_STRATEGY_NORMAL = 0;
-    public static final int FLOW_CLUSTER_STRATEGY_REF = 1;
+    public static final int FLOW_CLUSTER_STRATEGY_BORROW_REF = 1;
 
     public static final int FLOW_THRESHOLD_AVG_LOCAL = 0;
     public static final int FLOW_THRESHOLD_GLOBAL = 1;

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/FlowRuleUtil.java
Patch:
@@ -189,10 +189,8 @@ private static boolean checkClusterField(/*@NonNull*/ FlowRule rule) {
         switch (rule.getStrategy()) {
             case ClusterRuleConstant.FLOW_CLUSTER_STRATEGY_NORMAL:
                 return true;
-            case ClusterRuleConstant.FLOW_CLUSTER_STRATEGY_REF:
-                return validClusterRuleId(clusterConfig.getRefFlowId());
             default:
-                return true;
+                return false;
         }
     }
 

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/statistic/metric/ArrayMetric.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.alibaba.csp.sentinel.Constants;
 import com.alibaba.csp.sentinel.node.metric.MetricNode;
-import com.alibaba.csp.sentinel.slots.statistic.base.MetricBucket;
+import com.alibaba.csp.sentinel.slots.statistic.data.MetricBucket;
 import com.alibaba.csp.sentinel.slots.statistic.base.WindowWrap;
 
 /**

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/statistic/metric/Metric.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.List;
 
 import com.alibaba.csp.sentinel.node.metric.MetricNode;
-import com.alibaba.csp.sentinel.slots.statistic.base.MetricBucket;
+import com.alibaba.csp.sentinel.slots.statistic.data.MetricBucket;
 
 /**
  * Represents a basic structure recording invocation metrics of protected resources.

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/statistic/metric/MetricsLeapArray.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.csp.sentinel.slots.statistic.metric;
 
 import com.alibaba.csp.sentinel.slots.statistic.base.LeapArray;
-import com.alibaba.csp.sentinel.slots.statistic.base.MetricBucket;
+import com.alibaba.csp.sentinel.slots.statistic.data.MetricBucket;
 import com.alibaba.csp.sentinel.slots.statistic.base.WindowWrap;
 
 /**

File: sentinel-core/src/test/java/com/alibaba/csp/sentinel/base/metric/ArrayMetricTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.junit.Test;
 
-import com.alibaba.csp.sentinel.slots.statistic.base.MetricBucket;
+import com.alibaba.csp.sentinel.slots.statistic.data.MetricBucket;
 import com.alibaba.csp.sentinel.slots.statistic.base.WindowWrap;
 import com.alibaba.csp.sentinel.slots.statistic.metric.ArrayMetric;
 import com.alibaba.csp.sentinel.slots.statistic.metric.MetricsLeapArray;

File: sentinel-core/src/test/java/com/alibaba/csp/sentinel/base/metric/MetricsLeapArrayTest.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Set;
 import java.util.concurrent.CountDownLatch;
 
-import com.alibaba.csp.sentinel.slots.statistic.base.MetricBucket;
+import com.alibaba.csp.sentinel.slots.statistic.data.MetricBucket;
 import com.alibaba.csp.sentinel.util.TimeUtil;
 import com.alibaba.csp.sentinel.slots.statistic.base.WindowWrap;
 import com.alibaba.csp.sentinel.slots.statistic.metric.MetricsLeapArray;

File: sentinel-cluster/sentinel-cluster-client-default/src/main/java/com/alibaba/csp/sentinel/cluster/client/config/ClusterClientConfigManager.java
Patch:
@@ -104,6 +104,7 @@ private synchronized void applyConfig(ClusterClientConfig config) {
     public static boolean isValidConfig(ClusterClientConfig config) {
         return config != null && StringUtil.isNotBlank(config.getServerHost())
             && config.getServerPort() > 0
+            && config.getServerPort() <= 65535
             && config.getRequestTimeout() > 0;
     }
 

File: sentinel-cluster/sentinel-cluster-client-default/src/main/java/com/alibaba/csp/sentinel/cluster/client/handler/TokenClientHandler.java
Patch:
@@ -45,14 +45,13 @@ public TokenClientHandler(AtomicInteger currentState, Runnable disconnectCallbac
 
     @Override
     public void channelActive(ChannelHandlerContext ctx) throws Exception {
-        currentState.compareAndSet(ClientConstants.CLIENT_STATUS_PENDING, ClientConstants.CLIENT_STATUS_STARTED);
+        currentState.set(ClientConstants.CLIENT_STATUS_STARTED);
         fireClientPing(ctx);
         RecordLog.info("[TokenClientHandler] Client handler active, remote address: " + ctx.channel().remoteAddress());
     }
 
     @Override
     public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
-        System.out.println(String.format("[%s] Client message recv: %s", System.currentTimeMillis(), msg)); // TODO: remove here
         if (msg instanceof ClusterResponse) {
             ClusterResponse<?> response = (ClusterResponse) msg;
 
@@ -96,7 +95,7 @@ public void channelInactive(ChannelHandlerContext ctx) throws Exception {
     @Override
     public void channelUnregistered(ChannelHandlerContext ctx) throws Exception {
         RecordLog.info("[TokenClientHandler] Client channel unregistered, remote address: " + ctx.channel().remoteAddress());
-        currentState.compareAndSet(ClientConstants.CLIENT_STATUS_STARTED, ClientConstants.CLIENT_STATUS_OFF);
+        currentState.set(ClientConstants.CLIENT_STATUS_OFF);
         disconnectCallback.run();
     }
 

File: sentinel-cluster/sentinel-cluster-client-default/src/main/java/com/alibaba/csp/sentinel/command/handler/ModifyClusterClientConfigHandler.java
Patch:
@@ -46,7 +46,7 @@ public CommandResponse<String> handle(CommandRequest request) {
             ClusterClientConfig clusterClientConfig = JSON.parseObject(data, ClusterClientConfig.class);
             ClusterClientConfigManager.applyNewConfig(clusterClientConfig);
 
-            return CommandResponse.ofSuccess("ok");
+            return CommandResponse.ofSuccess("success");
         } catch (Exception e) {
             RecordLog.warn("[ModifyClusterClientConfigHandler] Decode client cluster config error", e);
             return CommandResponse.ofFailure(e, "decode client cluster config error");

File: sentinel-cluster/sentinel-cluster-server-default/src/test/java/com/alibaba/csp/sentinel/cluster/flow/ClusterFlowCheckerTest.java
Patch:
@@ -32,10 +32,9 @@
  * @author Eric Zhao
  * @since 1.4.0
  */
-@Ignore
 public class ClusterFlowCheckerTest {
 
-    @Test
+    //@Test
     public void testAcquireClusterTokenOccupyPass() {
         long flowId = 98765L;
         final int threshold = 5;

File: sentinel-transport/sentinel-transport-common/src/main/java/com/alibaba/csp/sentinel/command/handler/cluster/FetchClusterModeCommandHandler.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.csp.sentinel.command.handler;
+package com.alibaba.csp.sentinel.command.handler.cluster;
 
 import com.alibaba.csp.sentinel.cluster.ClusterStateManager;
 import com.alibaba.csp.sentinel.cluster.client.TokenClientProvider;

File: sentinel-transport/sentinel-transport-common/src/main/java/com/alibaba/csp/sentinel/command/handler/cluster/ModifyClusterModeCommandHandler.java
Patch:
@@ -13,13 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.csp.sentinel.command.handler;
+package com.alibaba.csp.sentinel.command.handler.cluster;
 
 import com.alibaba.csp.sentinel.cluster.ClusterStateManager;
 import com.alibaba.csp.sentinel.command.CommandHandler;
 import com.alibaba.csp.sentinel.command.CommandRequest;
 import com.alibaba.csp.sentinel.command.CommandResponse;
 import com.alibaba.csp.sentinel.command.annotation.CommandMapping;
+import com.alibaba.csp.sentinel.log.RecordLog;
 
 /**
  * @author Eric Zhao
@@ -32,6 +33,7 @@ public class ModifyClusterModeCommandHandler implements CommandHandler<String> {
     public CommandResponse<String> handle(CommandRequest request) {
         try {
             int mode = Integer.valueOf(request.getParam("mode"));
+            RecordLog.info("[ModifyClusterModeCommandHandler] Modifying cluster mode to: " + mode);
             if (ClusterStateManager.applyState(mode)) {
                 return CommandResponse.ofSuccess("success");
             } else {

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/statistic/data/ClusterMetricBucket.java
Patch:
@@ -19,6 +19,7 @@
 
 /**
  * @author Eric Zhao
+ * @since 1.4.0
  */
 public class ClusterMetricBucket {
 

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/TokenServiceProvider.java
Patch:
@@ -52,6 +52,7 @@ private static void resolveTokenServiceSpi() {
         }
 
         if (hasOther) {
+            // Pick the first.
             service = list.get(0);
         } else {
             // No custom token service, using default.

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/codec/DefaultRequestEntityDecoder.java
Patch:
@@ -54,7 +54,6 @@ public ClusterRequest decode(ByteBuf source) {
             if (source.readableBytes() == 0) {
                 data = null;
             } else {
-                // TODO: handle decode error here.
                 data = dataDecoder.decode(source);
             }
 

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/codec/data/FlowRequestDataDecoder.java
Patch:
@@ -44,7 +44,6 @@ public FlowRequestData decode(ByteBuf source) {
             }
             return requestData;
         }
-        // TODO: handle null here.
         return null;
     }
 }

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/codec/data/ParamFlowRequestDataDecoder.java
Patch:
@@ -25,7 +25,9 @@
 import io.netty.buffer.ByteBuf;
 
 /**
+ * @author jialiang.linjl
  * @author Eric Zhao
+ * @since 1.4.0
  */
 public class ParamFlowRequestDataDecoder implements EntityDecoder<ByteBuf, ParamFlowRequestData> {
 
@@ -38,7 +40,6 @@ public ParamFlowRequestData decode(ByteBuf source) {
 
             int amount = source.readInt();
             if (amount > 0) {
-                // TODO: should check rules exist here?
                 List<Object> params = new ArrayList<>(amount);
                 for (int i = 0; i < amount; i++) {
                     decodeParam(source, params);
@@ -48,7 +49,6 @@ public ParamFlowRequestData decode(ByteBuf source) {
                 return requestData;
             }
         }
-        // TODO: handle null here.
         return null;
     }
 

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/codec/netty/NettyRequestDecoder.java
Patch:
@@ -36,7 +36,6 @@ public class NettyRequestDecoder extends ByteToMessageDecoder {
     protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {
         RequestEntityDecoder<ByteBuf, Request> requestDecoder = ServerEntityCodecProvider.getRequestEntityDecoder();
         if (requestDecoder == null) {
-            // TODO: may need to throw exception?
             RecordLog.warn("[NettyRequestDecoder] Cannot resolve the global request entity decoder, "
                 + "dropping the request");
             return;

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/connection/Connection.java
Patch:
@@ -20,6 +20,7 @@
 /**
  * @author xuyue
  * @author Eric Zhao
+ * @since 1.4.0
  */
 public interface Connection extends AutoCloseable {
 

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/connection/NettyConnection.java
Patch:
@@ -22,6 +22,7 @@
 
 /**
  * @author xuyue
+ * @since 1.4.0
  */
 public class NettyConnection implements Connection {
 

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/processor/FlowRequestProcessor.java
Patch:
@@ -15,8 +15,10 @@
  */
 package com.alibaba.csp.sentinel.cluster.server.processor;
 
+import com.alibaba.csp.sentinel.cluster.ClusterConstants;
 import com.alibaba.csp.sentinel.cluster.TokenResult;
 import com.alibaba.csp.sentinel.cluster.TokenService;
+import com.alibaba.csp.sentinel.cluster.annotation.RequestType;
 import com.alibaba.csp.sentinel.cluster.request.ClusterRequest;
 import com.alibaba.csp.sentinel.cluster.request.data.FlowRequestData;
 import com.alibaba.csp.sentinel.cluster.response.ClusterResponse;
@@ -27,6 +29,7 @@
  * @author Eric Zhao
  * @since 1.4.0
  */
+@RequestType(ClusterConstants.MSG_TYPE_FLOW)
 public class FlowRequestProcessor implements RequestProcessor<FlowRequestData, FlowTokenResponseData> {
 
     @Override

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/processor/ParamFlowRequestProcessor.java
Patch:
@@ -17,8 +17,10 @@
 
 import java.util.Collection;
 
+import com.alibaba.csp.sentinel.cluster.ClusterConstants;
 import com.alibaba.csp.sentinel.cluster.TokenResult;
 import com.alibaba.csp.sentinel.cluster.TokenService;
+import com.alibaba.csp.sentinel.cluster.annotation.RequestType;
 import com.alibaba.csp.sentinel.cluster.request.ClusterRequest;
 import com.alibaba.csp.sentinel.cluster.request.data.ParamFlowRequestData;
 import com.alibaba.csp.sentinel.cluster.response.ClusterResponse;
@@ -29,6 +31,7 @@
  * @author Eric Zhao
  * @since 1.4.0
  */
+@RequestType(ClusterConstants.MSG_TYPE_PARAM_FLOW)
 public class ParamFlowRequestProcessor implements RequestProcessor<ParamFlowRequestData, FlowTokenResponseData> {
 
     @Override

File: sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/server/util/ClusterRuleUtil.java
Patch:
@@ -17,6 +17,7 @@
 
 /**
  * @author Eric Zhao
+ * @since 1.4.0
  */
 public final class ClusterRuleUtil {
 

File: sentinel-cluster/sentinel-cluster-client-default/src/main/java/com/alibaba/csp/sentinel/cluster/client/codec/DefaultRequestEntityWriter.java
Patch:
@@ -37,8 +37,8 @@ public void writeTo(ClusterRequest request, ByteBuf target) {
 
         if (requestDataWriter == null) {
             // TODO: may need to throw exception?
-            RecordLog.warn(
-                "[NettyRequestEncoder] Cannot find matching request writer for type <{0}>, dropping the request", type);
+            RecordLog.warn("[DefaultRequestEntityWriter] Cannot find matching request writer for type <{0}>,"
+                + " dropping the request", type);
             return;
         }
         // Write head part of request.

File: sentinel-cluster/sentinel-cluster-client-default/src/main/java/com/alibaba/csp/sentinel/cluster/client/codec/netty/NettyRequestEncoder.java
Patch:
@@ -27,6 +27,7 @@
 
 /**
  * @author Eric Zhao
+ * @since 1.4.0
  */
 public class NettyRequestEncoder extends MessageToByteEncoder<ClusterRequest> {
 

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/cluster/ClusterTokenClient.java
Patch:
@@ -26,7 +26,7 @@ public interface ClusterTokenClient extends TokenService {
     /**
      * Get descriptor of current token server.
      *
-     * @return current token server
+     * @return current token server if connected, otherwise null
      */
     TokenServerDescriptor currentServer();
 }
\ No newline at end of file

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/cluster/TokenService.java
Patch:
@@ -33,7 +33,7 @@ public interface TokenService {
      * @param prioritized whether the request is prioritized
      * @return result of the token request
      */
-    TokenResult requestToken(Integer ruleId, int acquireCount, boolean prioritized);
+    TokenResult requestToken(Long ruleId, int acquireCount, boolean prioritized);
 
     /**
      * Request tokens for a specific parameter from remote token server.
@@ -43,5 +43,5 @@ public interface TokenService {
      * @param params parameter list
      * @return result of the token request
      */
-    TokenResult requestParamToken(Integer ruleId, int acquireCount, Collection<Object> params);
+    TokenResult requestParamToken(Long ruleId, int acquireCount, Collection<Object> params);
 }

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/FlowRuleUtil.java
Patch:
@@ -155,7 +155,7 @@ private static TrafficShapingController generateRater(/*@Valid*/ FlowRule rule)
      * @param id flow ID to check
      * @return true if valid, otherwise false
      */
-    public static boolean validClusterRuleId(Integer id) {
+    public static boolean validClusterRuleId(Long id) {
         return id != null && id > 0;
     }
 

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/node/Node.java
Patch:
@@ -26,6 +26,7 @@
  * @author qinan.qn
  * @author leyou
  * @author Eric Zhao
+ * @author leitao
  */
 public interface Node {
 
@@ -147,7 +148,7 @@ public interface Node {
     void increaseThreadNum();
 
     /**
-     * Increase current thread count.
+     * Decrease current thread count.
      */
     void decreaseThreadNum();
 

File: sentinel-adapter/sentinel-web-servlet/src/test/java/com/alibaba/csp/sentinel/adapter/servlet/CommonFilterTest.java
Patch:
@@ -171,6 +171,6 @@ public String parseOrigin(HttpServletRequest request) {
     @After
     public void cleanUp() {
         FlowRuleManager.loadRules(null);
-        ClusterBuilderSlot.getClusterNodeMap().clear();
+        ClusterBuilderSlot.resetClusterNodes();
     }
 }

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/cluster/TokenService.java
Patch:
@@ -33,7 +33,7 @@ public interface TokenService {
      * @param prioritized whether the request is prioritized
      * @return result of the token request
      */
-    TokenResult requestToken(Integer ruleId, int acquireCount, boolean prioritized);
+    TokenResult requestToken(Long ruleId, int acquireCount, boolean prioritized);
 
     /**
      * Request tokens for a specific parameter from remote token server.
@@ -43,5 +43,5 @@ public interface TokenService {
      * @param params parameter list
      * @return result of the token request
      */
-    TokenResult requestParamToken(Integer ruleId, int acquireCount, Collection<Object> params);
+    TokenResult requestParamToken(Long ruleId, int acquireCount, Collection<Object> params);
 }

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/FlowRuleUtil.java
Patch:
@@ -155,7 +155,7 @@ private static TrafficShapingController generateRater(/*@Valid*/ FlowRule rule)
      * @param id flow ID to check
      * @return true if valid, otherwise false
      */
-    public static boolean validClusterRuleId(Integer id) {
+    public static boolean validClusterRuleId(Long id) {
         return id != null && id > 0;
     }
 

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/authority/AuthorityRuleManager.java
Patch:
@@ -151,6 +151,7 @@ static Map<String, List<AuthorityRule>> getAuthorityRules() {
     }
 
     static boolean isValidRule(AuthorityRule rule) {
-        return rule != null && !StringUtil.isBlank(rule.getResource());
+        return rule != null && !StringUtil.isBlank(rule.getResource())
+            && rule.getStrategy() >= 0 && StringUtil.isNotBlank(rule.getLimitApp());
     }
 }

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/annotation/SentinelResource.java
Patch:
@@ -37,7 +37,7 @@
     /**
      * @return name of the Sentinel resource
      */
-    String value();
+    String value() default "";;
 
     /**
      * @return the entry type (inbound or outbound), outbound by default

File: sentinel-demo/sentinel-demo-basic/src/main/java/com/alibaba/csp/sentinel/demo/flow/FlowThreadDemo.java
Patch:
@@ -46,8 +46,8 @@ public class FlowThreadDemo {
 
     public static void main(String[] args) throws Exception {
         System.out.println(
-            "MethodA will call methodB. After running for a while, methodB becomes slow, "
-                + "which make methodA also becomes slow ");
+            "MethodA will call methodB. After running for a while, methodB becomes fast, "
+                + "which make methodA also become fast ");
         tick();
         initFlowRule();
 

File: sentinel-transport/sentinel-transport-netty-http/src/main/java/com/alibaba/csp/sentinel/transport/command/netty/HttpServerHandler.java
Patch:
@@ -178,7 +178,9 @@ private CommandRequest parseRequest(FullHttpRequest request) {
         if (request.content().readableBytes() <= 0) {
             serverRequest.setBody(null);
         } else {
-            serverRequest.setBody(request.content().array());
+            byte[] body = new byte[request.content().readableBytes()];
+            request.content().getBytes(0, body);
+            serverRequest.setBody(body);
         }
         return serverRequest;
     }

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/LogBase.java
Patch:
@@ -96,7 +96,7 @@ protected static Handler makeLogger(String logName, Logger heliumRecordLog) {
         String fileName = LogBase.getLogBaseDir() + logName + ".pid" + PidUtil.getPid();
         Handler handler = null;
         try {
-            handler = new DateFileLogHandler(fileName + ".%d", 1024 * 1024 * 200, 1, true);
+            handler = new DateFileLogHandler(fileName + ".%d", 1024 * 1024 * 200, 4, true);
             handler.setFormatter(formatter);
             handler.setEncoding(LOG_CHARSET);
         } catch (IOException e) {

File: sentinel-adapter/sentinel-grpc-adapter/src/test/java/com/alibaba/csp/sentinel/adapter/grpc/SentinelGrpcClientInterceptorTest.java
Patch:
@@ -66,14 +66,14 @@ public void testGrpcClientInterceptor() throws Exception {
         ClusterNode clusterNode = ClusterBuilderSlot.getClusterNode(resourceName, EntryType.OUT);
         assertNotNull(clusterNode);
 
-        assertEquals((total - threshold) / 2, clusterNode.blockedRequest());
+        assertEquals((total - threshold) / 2, clusterNode.blockRequest());
         assertEquals(total / 2, clusterNode.totalRequest());
 
         long totalQps = clusterNode.totalQps();
         long passQps = clusterNode.passQps();
-        long blockedQps = clusterNode.blockedQps();
+        long blockQps = clusterNode.blockQps();
         assertEquals(total, totalQps);
-        assertEquals(total - threshold, blockedQps);
+        assertEquals(total - threshold, blockQps);
         assertEquals(threshold, passQps);
 
         server.stop();

File: sentinel-adapter/sentinel-grpc-adapter/src/test/java/com/alibaba/csp/sentinel/adapter/grpc/SentinelGrpcServerInterceptorTest.java
Patch:
@@ -68,14 +68,14 @@ public void testGrpcServerInterceptor() throws Exception {
         ClusterNode clusterNode = ClusterBuilderSlot.getClusterNode(resourceName, EntryType.IN);
         assertNotNull(clusterNode);
 
-        assertEquals((total - threshold) / 2, clusterNode.blockedRequest());
+        assertEquals((total - threshold) / 2, clusterNode.blockRequest());
         assertEquals(total / 2, clusterNode.totalRequest());
 
         long totalQps = clusterNode.totalQps();
         long passQps = clusterNode.passQps();
-        long blockedQps = clusterNode.blockedQps();
+        long blockQps = clusterNode.blockQps();
         assertEquals(total, totalQps);
-        assertEquals(total - threshold, blockedQps);
+        assertEquals(total - threshold, blockQps);
         assertEquals(threshold, passQps);
 
         server.stop();

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/statistic/StatisticSlot.java
Patch:
@@ -72,13 +72,13 @@ public void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode
             context.getCurEntry().setError(e);
 
             // Add block count.
-            node.increaseBlockedQps();
+            node.increaseBlockQps();
             if (context.getCurEntry().getOriginNode() != null) {
-                context.getCurEntry().getOriginNode().increaseBlockedQps();
+                context.getCurEntry().getOriginNode().increaseBlockQps();
             }
 
             if (resourceWrapper.getType() == EntryType.IN) {
-                Constants.ENTRY_NODE.increaseBlockedQps();
+                Constants.ENTRY_NODE.increaseBlockQps();
             }
 
             for (ProcessorSlotEntryCallback<DefaultNode> handler : StatisticSlotCallbackRegistry.getEntryCallbacks()) {

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/statistic/metric/ArrayMetric.java
Patch:
@@ -144,9 +144,9 @@ public List<MetricNode> details() {
                 continue;
             }
             MetricNode node = new MetricNode();
-            node.setBlockedQps(window.value().block());
-            node.setException(window.value().exception());
-            node.setPassedQps(window.value().pass());
+            node.setBlockQps(window.value().block());
+            node.setExceptionQps(window.value().exception());
+            node.setPassQps(window.value().pass());
             long passQps = window.value().success();
             node.setSuccessQps(passQps);
             if (passQps != 0) {

File: sentinel-transport/sentinel-transport-common/src/main/java/com/alibaba/csp/sentinel/command/handler/FetchClusterNodeHumanCommandHandler.java
Patch:
@@ -71,8 +71,8 @@ public CommandResponse<String> handle(CommandRequest request) {
                 int lenNum = (int)Math.ceil((double)id.length() / nameLength) - 1;
 
                 sb.append(String.format(format, i + 1, lenNum == 0 ? id : id.substring(0, nameLength),
-                    node.curThreadNum(), node.passQps(), node.blockedQps(), node.successQps(), node.totalQps(),
-                    node.avgRt(), node.totalRequest() - node.blockedRequest(), node.blockedRequest(),
+                    node.curThreadNum(), node.passQps(), node.blockQps(), node.successQps(), node.totalQps(),
+                    node.avgRt(), node.totalRequest() - node.blockRequest(), node.blockRequest(),
                     node.totalRequest(), node.exceptionQps())).append("\n");
                 for (int j = 1; j <= lenNum; ++j) {
                     int start = nameLength * j;

File: sentinel-transport/sentinel-transport-common/src/main/java/com/alibaba/csp/sentinel/command/handler/FetchSystemStatusCommandHandler.java
Patch:
@@ -38,7 +38,7 @@ public CommandResponse<String> handle(CommandRequest request) {
 
         systemStatus.put("rqps", Constants.ENTRY_NODE.successQps());
         systemStatus.put("qps", Constants.ENTRY_NODE.passQps());
-        systemStatus.put("b", Constants.ENTRY_NODE.blockedQps());
+        systemStatus.put("b", Constants.ENTRY_NODE.blockQps());
         systemStatus.put("r", Constants.ENTRY_NODE.avgRt());
         systemStatus.put("t", Constants.ENTRY_NODE.curThreadNum());
 

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slotchain/ProcessorSlot.java
Patch:
@@ -34,7 +34,7 @@ public interface ProcessorSlot<T> {
      * @param param           Generics parameter, usually is a {@link com.alibaba.csp.sentinel.node.Node}
      * @param count           tokens needed
      * @param args            parameters of the original call
-     * @throws Throwable
+     * @throws Throwable blocked exception or unexpected error
      */
     void entry(Context context, ResourceWrapper resourceWrapper, T param, int count, Object... args)
         throws Throwable;
@@ -44,10 +44,10 @@ void entry(Context context, ResourceWrapper resourceWrapper, T param, int count,
      *
      * @param context         current {@link Context}
      * @param resourceWrapper current resource
-     * @param obj
+     * @param obj             relevant object (e.g. Node)
      * @param count           tokens needed
      * @param args            parameters of the original call
-     * @throws Throwable
+     * @throws Throwable blocked exception or unexpected error
      */
     void fireEntry(Context context, ResourceWrapper resourceWrapper, Object obj, int count, Object... args)
         throws Throwable;

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/CtEntry.java
Patch:
@@ -89,8 +89,9 @@ protected void exitForContext(Context context, int count, Object... args) throws
                 }
                 if (parent == null) {
                     // Default context (auto entered) will be exited automatically.
-                    // Note: NullContext won't be exited automatically.
-                    ContextUtil.exit();
+                    if (ContextUtil.isDefaultContext(context)) {
+                        ContextUtil.exit();
+                    }
                 }
                 // Clean the reference of context in current entry to avoid duplicate exit.
                 clearEntryContext();

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/Constants.java
Patch:
@@ -31,7 +31,7 @@ public class Constants {
     public final static int MAX_CONTEXT_NAME_SIZE = 2000;
     public final static int MAX_SLOT_CHAIN_SIZE = 6000;
     public final static String ROOT_ID = "machine-root";
-    public final static String CONTEXT_DEFAULT_NAME = "default_context_name";
+    public final static String CONTEXT_DEFAULT_NAME = "sentinel_default_context";
 
     public final static DefaultNode ROOT = new EntranceNode(new StringResourceWrapper(ROOT_ID, EntryType.IN),
         Env.nodeBuilder.buildClusterNode());

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/context/NullContext.java
Patch:
@@ -27,7 +27,6 @@
 public class NullContext extends Context {
 
     public NullContext() {
-        super(null, null);
+        super(null, "null_context_internal");
     }
-
 }

File: sentinel-dashboard/src/main/java/com/taobao/csp/sentinel/dashboard/metric/MetricFetcher.java
Patch:
@@ -40,7 +40,7 @@
 import com.taobao.csp.sentinel.dashboard.datasource.entity.MetricEntity;
 import com.taobao.csp.sentinel.dashboard.discovery.AppManagement;
 import com.taobao.csp.sentinel.dashboard.discovery.MachineInfo;
-import com.taobao.csp.sentinel.dashboard.inmem.InMemMetricStore;
+import com.taobao.csp.sentinel.dashboard.repository.metric.MetricsRepository;
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.concurrent.FutureCallback;
@@ -78,7 +78,7 @@ public class MetricFetcher {
     private Map<String, AtomicLong> appLastFetchTime = new ConcurrentHashMap<>();
 
     @Autowired
-    private InMemMetricStore metricStore;
+    private MetricsRepository<MetricEntity> metricStore;
     @Autowired
     private AppManagement appManagement;
 

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeRule.java
Patch:
@@ -153,7 +153,6 @@ public int hashCode() {
 
     @Override
     public boolean passCheck(Context context, DefaultNode node, int acquireCount, Object... args) {
-
         if (cut) {
             return false;
         }
@@ -184,8 +183,8 @@ public boolean passCheck(Context context, DefaultNode node, int acquireCount, Ob
             }
 
             double realSuccess = success - exception;
-            if (realSuccess <= 0) {
-                return exception < RT_MAX_EXCEED_N;
+            if (realSuccess <= 0 && exception < RT_MAX_EXCEED_N) {
+                return true;
             }
 
             if (exception / success < count) {

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeRule.java
Patch:
@@ -183,11 +183,12 @@ public boolean passCheck(Context context, DefaultNode node, int acquireCount, Ob
                 return true;
             }
 
-            if (success == 0) {
+            double realSuccess = success - exception;
+            if (realSuccess <= 0) {
                 return exception < RT_MAX_EXCEED_N;
             }
 
-            if (exception / (success + exception) < count) {
+            if (exception / success < count) {
                 return true;
             }
         }

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/node/metric/MetricSearcher.java
Patch:
@@ -131,7 +131,7 @@ public synchronized List<MetricNode> findByTimeAndResource(long beginTimeMs, lon
         for (; i < fileNames.size(); i++) {
             String fileName = fileNames.get(i);
             long offset = findOffset(beginTimeMs, fileName,
-                fileName + MetricWriter.METRIC_FILE_INDEX_SUFFIX, offsetInIndex);
+                    MetricWriter.formIndexFileName(fileName), offsetInIndex);
             offsetInIndex = 0;
             if (offset != -1) {
                 return metricsReader.readMetricsByEndTime(fileNames, i, offset, endTimeMs, identity);

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/statistic/metric/ArrayMetric.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.csp.sentinel.Constants;
 import com.alibaba.csp.sentinel.node.metric.MetricNode;
 import com.alibaba.csp.sentinel.slots.statistic.base.Window;
 import com.alibaba.csp.sentinel.slots.statistic.base.WindowWrap;
@@ -117,7 +118,7 @@ public long rt() {
     @Override
     public long minRt() {
         data.currentWindow();
-        long rt = 4900;
+        long rt = Constants.TIME_DROP_VALVE;
         List<Window> list = data.values();
         for (Window window : list) {
             if (window.minRt() < rt) {

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/RuleConstant.java
Patch:
@@ -27,8 +27,8 @@ public class RuleConstant {
     public static final int DEGRADE_GRADE_RT = 0;
     public static final int DEGRADE_GRADE_EXCEPTION = 1;
 
-    public static final int WHILE = 0;
-    public static final int BLACK = 1;
+    public static final int AUTHORITY_WHITE = 0;
+    public static final int AUTHORITY_BLACK = 1;
 
     public static final int STRATEGY_DIRECT = 0;
     public static final int STRATEGY_RELATE = 1;

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/authority/AuthorityRule.java
Patch:
@@ -82,11 +82,11 @@ public boolean passCheck(Context context, DefaultNode node, int count, Object...
             contain = exactlyMatch;
         }
 
-        if (strategy == RuleConstant.BLACK && contain) {
+        if (strategy == RuleConstant.AUTHORITY_BLACK && contain) {
             return false;
         }
 
-        if (strategy == RuleConstant.WHILE && !contain) {
+        if (strategy == RuleConstant.AUTHORITY_WHITE && !contain) {
             return false;
         }
 

File: sentinel-adapter/sentinel-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboConsumerFilter.java
Patch:
@@ -19,10 +19,10 @@
 import com.alibaba.csp.sentinel.EntryType;
 import com.alibaba.csp.sentinel.SphU;
 import com.alibaba.csp.sentinel.Tracer;
+import com.alibaba.csp.sentinel.adapter.dubbo.fallback.DubboFallbackRegistry;
 import com.alibaba.csp.sentinel.context.ContextUtil;
 import com.alibaba.csp.sentinel.log.RecordLog;
 import com.alibaba.csp.sentinel.slots.block.BlockException;
-import com.alibaba.csp.sentinel.slots.block.SentinelRpcException;
 import com.alibaba.dubbo.common.extension.Activate;
 import com.alibaba.dubbo.rpc.Filter;
 import com.alibaba.dubbo.rpc.Invocation;
@@ -39,6 +39,7 @@
  * </pre>
  *
  * @author leyou
+ * @author Eric Zhao
  */
 @Activate(group = "consumer")
 public class SentinelDubboConsumerFilter extends AbstractDubboFilter implements Filter {
@@ -58,7 +59,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
             methodEntry = SphU.entry(resourceName, EntryType.OUT);
             return invoker.invoke(invocation);
         } catch (BlockException e) {
-            throw new SentinelRpcException(e);
+            return DubboFallbackRegistry.getConsumerFallback().handle(invoker, invocation, e);
         } catch (RpcException e) {
             Tracer.trace(e);
             throw e;

File: sentinel-adapter/sentinel-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboProviderFilter.java
Patch:
@@ -19,6 +19,7 @@
 import com.alibaba.csp.sentinel.EntryType;
 import com.alibaba.csp.sentinel.SphU;
 import com.alibaba.csp.sentinel.Tracer;
+import com.alibaba.csp.sentinel.adapter.dubbo.fallback.DubboFallbackRegistry;
 import com.alibaba.csp.sentinel.context.ContextUtil;
 import com.alibaba.csp.sentinel.log.RecordLog;
 import com.alibaba.csp.sentinel.slots.block.BlockException;
@@ -39,6 +40,7 @@
  * </pre>
  *
  * @author leyou
+ * @author Eric Zhao
  */
 @Activate(group = "provider")
 public class SentinelDubboProviderFilter extends AbstractDubboFilter implements Filter {
@@ -63,7 +65,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
 
             return invoker.invoke(invocation);
         } catch (BlockException e) {
-            throw new SentinelRpcException(e);
+            return DubboFallbackRegistry.getProviderFallback().handle(invoker, invocation, e);
         } catch (RpcException e) {
             Tracer.trace(e);
             throw e;

File: sentinel-demo/sentinel-demo-dubbo/src/main/java/com/alibaba/csp/sentinel/demo/dubbo/demo1/FooProviderBootstrap.java
Patch:
@@ -40,9 +40,11 @@ public class FooProviderBootstrap {
     private static final String INTERFACE_RES_KEY = "com.alibaba.csp.sentinel.demo.dubbo.FooService";
 
     public static void main(String[] args) {
-        initFlowRule();
+        // Users don't need to manually call this method.
         InitExecutor.doInit();
 
+        initFlowRule();
+
         AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
         context.register(ProviderConfiguration.class);
         context.refresh();

File: sentinel-demo/sentinel-demo-dubbo/src/main/java/com/alibaba/csp/sentinel/demo/dubbo/demo2/FooProviderBootstrap.java
Patch:
@@ -32,6 +32,7 @@
 public class FooProviderBootstrap {
 
     public static void main(String[] args) {
+        // Users don't need to manually call this method.
         InitExecutor.doInit();
 
         AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();

File: sentinel-transport/sentinel-transport-simple-http/src/main/java/com/alibaba/csp/sentinel/transport/command/SimpleHttpCommandCenter.java
Patch:
@@ -124,9 +124,7 @@ public void run() {
                     }
                 }
 
-                if (success) {
-                    tmpPort = port;
-                } else {
+                if (!success) {
                     tmpPort = PORT_UNINITIALIZED;
                 }
                 TransportConfig.setRuntimePort(tmpPort);

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeRule.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 
+import com.alibaba.csp.sentinel.concurrent.NamedThreadFactory;
 import com.alibaba.csp.sentinel.context.Context;
 import com.alibaba.csp.sentinel.node.ClusterNode;
 import com.alibaba.csp.sentinel.node.DefaultNode;
@@ -56,7 +57,7 @@ public class DegradeRule extends AbstractRule {
     private static final int RT_MAX_EXCEED_N = 5;
 
     private static ScheduledExecutorService pool = Executors.newScheduledThreadPool(
-        Runtime.getRuntime().availableProcessors());
+        Runtime.getRuntime().availableProcessors(), new NamedThreadFactory("sentinel-degrade-reset-task", true));
 
     /**
      * RT threshold or exception ratio threshold count.

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/FlowRuleManager.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 
+import com.alibaba.csp.sentinel.concurrent.NamedThreadFactory;
 import com.alibaba.csp.sentinel.log.RecordLog;
 import com.alibaba.csp.sentinel.util.StringUtil;
 import com.alibaba.csp.sentinel.context.Context;
@@ -54,7 +55,8 @@
 public class FlowRuleManager {
 
     private static final Map<String, List<FlowRule>> flowRules = new ConcurrentHashMap<String, List<FlowRule>>();
-    private final static ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
+    private final static ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1,
+        new NamedThreadFactory("sentinel-metrics-record-task", true));
     private final static FlowPropertyListener listener = new FlowPropertyListener();
     private static SentinelProperty<List<FlowRule>> currentProperty = new DynamicSentinelProperty<List<FlowRule>>();
 

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/system/SystemRuleManager.java
Patch:
@@ -24,6 +24,7 @@
 
 import com.alibaba.csp.sentinel.Constants;
 import com.alibaba.csp.sentinel.EntryType;
+import com.alibaba.csp.sentinel.concurrent.NamedThreadFactory;
 import com.alibaba.csp.sentinel.log.RecordLog;
 import com.alibaba.csp.sentinel.property.DynamicSentinelProperty;
 import com.alibaba.csp.sentinel.property.SentinelProperty;
@@ -82,7 +83,8 @@ public class SystemRuleManager {
     private final static SystemPropertyListener listener = new SystemPropertyListener();
     private static SentinelProperty<List<SystemRule>> currentProperty = new DynamicSentinelProperty<List<SystemRule>>();
 
-    private final static ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
+    private final static ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1,
+        new NamedThreadFactory("sentinel-system-status-record-task", true));
 
     static {
         checkSystemStatus.set(false);

File: sentinel-extension/sentinel-datasource-extension/src/main/java/com/alibaba/csp/sentinel/datasource/AutoRefreshDataSource.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 
+import com.alibaba.csp.sentinel.concurrent.NamedThreadFactory;
 import com.alibaba.csp.sentinel.log.RecordLog;
 
 /**
@@ -48,7 +49,8 @@ public AutoRefreshDataSource(ConfigParser<S, T> configParser, final long recomme
     }
 
     private void startTimerService() {
-        service = Executors.newScheduledThreadPool(1);
+        service = Executors.newScheduledThreadPool(1,
+            new NamedThreadFactory("sentinel-datasource-auto-refresh-task", true));
         service.scheduleAtFixedRate(new Runnable() {
             @Override
             public void run() {

File: sentinel-transport/sentinel-transport-common/src/main/java/com/alibaba/csp/sentinel/transport/init/HeartbeatSenderInitFunc.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 
+import com.alibaba.csp.sentinel.concurrent.NamedThreadFactory;
 import com.alibaba.csp.sentinel.init.InitFunc;
 import com.alibaba.csp.sentinel.log.RecordLog;
 import com.alibaba.csp.sentinel.transport.HeartbeatSender;
@@ -33,7 +34,8 @@
  */
 public class HeartbeatSenderInitFunc implements InitFunc {
 
-    private static ScheduledExecutorService pool = Executors.newScheduledThreadPool(2);
+    private static ScheduledExecutorService pool = Executors.newScheduledThreadPool(2,
+        new NamedThreadFactory("sentinel-heartbeat-send-task", true));
 
     @Override
     public void init() throws Exception {

File: sentinel-transport/sentinel-transport-netty-http/src/main/java/com/alibaba/csp/sentinel/transport/command/NettyHttpCommandCenter.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.alibaba.csp.sentinel.command.CommandHandler;
 import com.alibaba.csp.sentinel.command.CommandHandlerProvider;
+import com.alibaba.csp.sentinel.concurrent.NamedThreadFactory;
 import com.alibaba.csp.sentinel.transport.command.netty.HttpServer;
 import com.alibaba.csp.sentinel.log.RecordLog;
 import com.alibaba.csp.sentinel.transport.CommandCenter;
@@ -34,7 +35,8 @@ public class NettyHttpCommandCenter implements CommandCenter {
 
     private final HttpServer server = new HttpServer();
 
-    private final ExecutorService pool = Executors.newSingleThreadExecutor();
+    private final ExecutorService pool = Executors.newSingleThreadExecutor(
+        new NamedThreadFactory("sentinel-netty-command-center-executor"));
 
     @Override
     public void start() throws Exception {

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/authority/AuthorityRuleManager.java
Patch:
@@ -124,7 +124,7 @@ private Map<String, List<AuthorityRule>> loadAuthorityConf(List<AuthorityRule> l
             Map<String, List<AuthorityRule>> newRuleMap = new ConcurrentHashMap<String, List<AuthorityRule>>();
             for (AuthorityRule rule : list) {
                 if (StringUtil.isBlank(rule.getLimitApp())) {
-                    rule.setLimitApp(FlowRule.DEFAULT);
+                    rule.setLimitApp(FlowRule.LIMIT_APP_DEFAULT);
                 }
 
                 String identity = rule.getResource();

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeRuleManager.java
Patch:
@@ -143,7 +143,7 @@ private Map<String, List<DegradeRule>> loadDegradeConf(List<DegradeRule> list) {
 
             for (DegradeRule rule : list) {
                 if (StringUtil.isBlank(rule.getLimitApp())) {
-                    rule.setLimitApp(FlowRule.DEFAULT);
+                    rule.setLimitApp(FlowRule.LIMIT_APP_DEFAULT);
                 }
 
                 String identity = rule.getResource();

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/FlowRuleComparator.java
Patch:
@@ -30,9 +30,9 @@ public int compare(FlowRule o1, FlowRule o2) {
             return 0;
         }
 
-        if (FlowRule.DEFAULT.equals(o1.getLimitApp())) {
+        if (FlowRule.LIMIT_APP_DEFAULT.equals(o1.getLimitApp())) {
             return 1;
-        } else if (FlowRule.DEFAULT.equals(o2.getLimitApp())) {
+        } else if (FlowRule.LIMIT_APP_DEFAULT.equals(o2.getLimitApp())) {
             return -1;
         } else {
             return 0;

File: sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/FlowRuleManager.java
Patch:
@@ -111,7 +111,7 @@ private static Map<String, List<FlowRule>> loadFlowConf(List<FlowRule> list) {
 
         for (FlowRule rule : list) {
             if (StringUtil.isBlank(rule.getLimitApp())) {
-                rule.setLimitApp(FlowRule.DEFAULT);
+                rule.setLimitApp(FlowRule.LIMIT_APP_DEFAULT);
             }
 
             Controller rater = new DefaultController(rule.getCount(), rule.getGrade());

