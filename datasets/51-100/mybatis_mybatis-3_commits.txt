File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2024 the original author or authors.
+ *    Copyright 2009-2025 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -466,5 +466,4 @@ private Class<?> resolveParameterJavaType(Class<?> resultType, String property,
     }
     return javaType;
   }
-
 }

File: src/main/java/org/apache/ibatis/builder/ResultMappingConstructorResolver.java
Patch:
@@ -156,7 +156,7 @@ private boolean verifyPropertyNaming(Set<String> constructorArgsByName) {
     // either specify all names and (optional random order), or type info.
     if (!allMappingsHavePropertyNames && !constructorArgsByName.isEmpty()) {
       throw new BuilderException("Error in result map '" + resultMapId
-          + "'. We do not support partially specifying a property name. Either specify all property names, or none.");
+          + "'. We do not support partially specifying a property name nor duplicates. Either specify all property names, or none.");
     }
 
     return allMappingsHavePropertyNames;

File: src/test/java/org/apache/ibatis/submitted/auto_type_from_non_ambiguous_constructor/Mapper1.java
Patch:
@@ -26,11 +26,11 @@ public interface Mapper1 {
   String SELECT_SQL = "select a.id, a.name, a.type from account a where a.id = #{id}";
   String SELECT_WITH_DOB_SQL = "select id, name, type, date '2025-01-05' dob from account where id = #{id}";
 
-  @ConstructorArgs({ @Arg(column = "id"), @Arg(column = "name"), @Arg(column = "type")})
+  @ConstructorArgs({ @Arg(column = "id"), @Arg(column = "name"), @Arg(column = "type") })
   @Select(SELECT_SQL)
   Account getAccountJavaTypesMissing(long id);
 
-  @ConstructorArgs({ @Arg(column = "id"), @Arg(column = "name", javaType = String.class), @Arg(column = "type")})
+  @ConstructorArgs({ @Arg(column = "id"), @Arg(column = "name", javaType = String.class), @Arg(column = "type") })
   @Select(SELECT_SQL)
   Account3 getAccountPartialTypesProvided(long id);
 

File: src/test/java/org/apache/ibatis/binding/BindingTest.java
Patch:
@@ -623,7 +623,7 @@ void shouldCacheMapperMethod() throws Exception {
   void shouldGetBlogsWithAuthorsAndPosts() {
     try (SqlSession session = sqlSessionFactory.openSession()) {
       BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
-      List<Blog> blogs = mapper.selectBlogsWithAutorAndPosts();
+      List<Blog> blogs = mapper.selectBlogsWithAuthorAndPosts();
       assertEquals(2, blogs.size());
       assertTrue(blogs.get(0) instanceof Proxy);
       assertEquals(101, blogs.get(0).getAuthor().getId());
@@ -640,7 +640,7 @@ void shouldGetBlogsWithAuthorsAndPosts() {
   void shouldGetBlogsWithAuthorsAndPostsEagerly() {
     try (SqlSession session = sqlSessionFactory.openSession()) {
       BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
-      List<Blog> blogs = mapper.selectBlogsWithAutorAndPostsEagerly();
+      List<Blog> blogs = mapper.selectBlogsWithAuthorAndPostsEagerly();
       assertEquals(2, blogs.size());
       assertFalse(blogs.get(0) instanceof Factory);
       assertEquals(101, blogs.get(0).getAuthor().getId());

File: src/test/java/org/apache/ibatis/binding/BoundBlogMapper.java
Patch:
@@ -251,7 +251,7 @@ Blog selectBlogWithAParamNamedValue(@Param("column") String column, @Param("id")
       @Result(property = "posts", column = "id", many = @Many(select = "selectPostsById"))
   })
   // @formatter:on
-  List<Blog> selectBlogsWithAutorAndPosts();
+  List<Blog> selectBlogsWithAuthorAndPosts();
 
   // @formatter:off
   @Select({
@@ -263,6 +263,6 @@ Blog selectBlogWithAParamNamedValue(@Param("column") String column, @Param("id")
       @Result(property = "posts", column = "id", many = @Many(select = "selectPostsById", fetchType = FetchType.EAGER))
   })
   // @formatter:on
-  List<Blog> selectBlogsWithAutorAndPostsEagerly();
+  List<Blog> selectBlogsWithAuthorAndPostsEagerly();
 
 }

File: src/test/java/org/apache/ibatis/executor/loader/CglibProxyTest.java
Patch:
@@ -71,7 +71,7 @@ void shouldLetCallALoadedProperty() {
   }
 
   @Test
-  void shouldSerizalizeADeserlizaliedProxy() throws Exception {
+  void shouldSerializeADeserializedProxy() throws Exception {
     Object proxy = ((CglibProxyFactory) proxyFactory).createDeserializationProxy(author, new HashMap<>(),
         new DefaultObjectFactory(), new ArrayList<>(), new ArrayList<>());
     Author author2 = (Author) deserialize(serialize((Serializable) proxy));

File: src/test/java/org/apache/ibatis/executor/loader/JavassistProxyTest.java
Patch:
@@ -69,7 +69,7 @@ void shouldLetCallALoadedProperty() {
   }
 
   @Test
-  void shouldSerizalizeADeserlizaliedProxy() throws Exception {
+  void shouldSerializeADeserializedProxy() throws Exception {
     Object proxy = ((JavassistProxyFactory) proxyFactory).createDeserializationProxy(author, new HashMap<>(),
         new DefaultObjectFactory(), new ArrayList<>(), new ArrayList<>());
     Author author2 = (Author) deserialize(serialize((Serializable) proxy));

File: src/test/java/org/apache/ibatis/executor/loader/SerializableProxyTest.java
Patch:
@@ -110,7 +110,7 @@ void shouldSerializeAProxyForABeanWithoutDefaultConstructorAndUnloadedProperties
   }
 
   @Test
-  void shouldSerizaliceAFullLoadedObjectToOriginalClass() throws Exception {
+  void shouldSerializeAFullLoadedObjectToOriginalClass() throws Exception {
     Object proxy = proxyFactory.createProxy(author, new ResultLoaderMap(), new Configuration(),
         new DefaultObjectFactory(), new ArrayList<>(), new ArrayList<>());
     Object proxy2 = deserialize(serialize((Serializable) proxy));

File: src/test/java/org/apache/ibatis/io/ExternalResourcesTest.java
Patch:
@@ -91,7 +91,7 @@ void getConfiguredTemplate() {
       templateName = ExternalResources.getConfiguredTemplate(tempFile.getAbsolutePath(), "new_command.template");
       assertEquals("templates/col_new_template_migration.sql", templateName);
     } catch (Exception e) {
-      fail("Test failed with execption: " + e.getMessage());
+      fail("Test failed with exception: " + e.getMessage());
     }
   }
 

File: src/test/java/org/apache/ibatis/jdbc/ScriptRunnerTest.java
Patch:
@@ -113,7 +113,7 @@ void shouldReturnWarningIfEndOfLineTerminatorNotFound() throws Exception {
   }
 
   @Test
-  void commentAferStatementDelimiterShouldNotCauseRunnerFail() throws Exception {
+  void commentAfterStatementDelimiterShouldNotCauseRunnerFail() throws Exception {
     DataSource ds = createUnpooledDataSource(JPETSTORE_PROPERTIES);
     String resource = "org/apache/ibatis/jdbc/ScriptCommentAfterEOLTerminator.sql";
     try (Connection conn = ds.getConnection(); Reader reader = Resources.getResourceAsReader(resource)) {

File: src/test/java/org/apache/ibatis/mapping/ResultMappingTest.java
Patch:
@@ -36,7 +36,7 @@ void shouldThrowErrorWhenBothResultMapAndNestedSelectAreSet() {
 
   // Issue 4: column is mandatory on nested queries
   @Test
-  void shouldFailWithAMissingColumnInNetstedSelect() {
+  void shouldFailWithAMissingColumnInNestedSelect() {
     Assertions.assertThrows(IllegalStateException.class,
         () -> new ResultMapping.Builder(configuration, "prop").nestedQueryId("nested query ID").build());
   }

File: src/test/java/org/apache/ibatis/submitted/automapping/AutomappingTest.java
Patch:
@@ -55,7 +55,7 @@ void shouldGetAUser() {
   }
 
   @Test
-  void shouldGetAUserWhithPhoneNumber() {
+  void shouldGetAUserWithPhoneNumber() {
     sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.NONE);
     try (SqlSession sqlSession = sqlSessionFactory.openSession()) {
       Mapper mapper = sqlSession.getMapper(Mapper.class);

File: src/test/java/org/apache/ibatis/submitted/force_flush_on_select/ForceFlushOnSelectTest.java
Patch:
@@ -118,7 +118,7 @@ void updateShouldFlushLocalCache() {
   }
 
   @Test
-  void selectShouldFlushLocalCacheIfFlushLocalCacheAtferEachStatementIsTrue() throws SQLException {
+  void selectShouldFlushLocalCacheIfFlushLocalCacheAfterEachStatementIsTrue() throws SQLException {
     sqlSessionFactory.getConfiguration().setLocalCacheScope(LocalCacheScope.STATEMENT);
     try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.SIMPLE)) {
       PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);

File: src/test/java/org/apache/ibatis/submitted/lazy_properties/LazyPropertiesTest.java
Patch:
@@ -155,16 +155,16 @@ void verifyCustomLazyLoadTriggerMethods() {
 
   @Test
   void shouldInvokingSetterInvalidateLazyLoading_Javassist() {
-    shoulInvokingSetterInvalidateLazyLoading(new JavassistProxyFactory());
+    shouldInvokingSetterInvalidateLazyLoading(new JavassistProxyFactory());
   }
 
   @Tag("RequireIllegalAccess")
   @Test
   void shouldInvokingSetterInvalidateLazyLoading_Cglib() {
-    shoulInvokingSetterInvalidateLazyLoading(new CglibProxyFactory());
+    shouldInvokingSetterInvalidateLazyLoading(new CglibProxyFactory());
   }
 
-  private void shoulInvokingSetterInvalidateLazyLoading(ProxyFactory proxyFactory) {
+  private void shouldInvokingSetterInvalidateLazyLoading(ProxyFactory proxyFactory) {
     Configuration config = sqlSessionFactory.getConfiguration();
     config.setProxyFactory(proxyFactory);
     config.setAggressiveLazyLoading(false);

File: src/test/java/org/apache/ibatis/submitted/result_handler/ResultHandlerTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
-class ResulthandlerTest {
+class ResultHandlerTest {
 
   private static SqlSessionFactory sqlSessionFactory;
 

File: src/test/java/org/apache/ibatis/type/SqlTimestampTypeHandlerTest.java
Patch:
@@ -25,7 +25,7 @@
 
 import org.junit.jupiter.api.Test;
 
-class SqlTimetampTypeHandlerTest extends BaseTypeHandlerTest {
+class SqlTimestampTypeHandlerTest extends BaseTypeHandlerTest {
 
   private static final TypeHandler<Timestamp> TYPE_HANDLER = new SqlTimestampTypeHandler();
   private static final Timestamp SQL_TIME = new Timestamp(new Date().getTime());

File: src/test/java/org/apache/ibatis/binding/BindingTest.java
Patch:
@@ -623,7 +623,7 @@ void shouldCacheMapperMethod() throws Exception {
   void shouldGetBlogsWithAuthorsAndPosts() {
     try (SqlSession session = sqlSessionFactory.openSession()) {
       BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
-      List<Blog> blogs = mapper.selectBlogsWithAutorAndPosts();
+      List<Blog> blogs = mapper.selectBlogsWithAuthorAndPosts();
       assertEquals(2, blogs.size());
       assertTrue(blogs.get(0) instanceof Proxy);
       assertEquals(101, blogs.get(0).getAuthor().getId());
@@ -640,7 +640,7 @@ void shouldGetBlogsWithAuthorsAndPosts() {
   void shouldGetBlogsWithAuthorsAndPostsEagerly() {
     try (SqlSession session = sqlSessionFactory.openSession()) {
       BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
-      List<Blog> blogs = mapper.selectBlogsWithAutorAndPostsEagerly();
+      List<Blog> blogs = mapper.selectBlogsWithAuthorAndPostsEagerly();
       assertEquals(2, blogs.size());
       assertFalse(blogs.get(0) instanceof Factory);
       assertEquals(101, blogs.get(0).getAuthor().getId());

File: src/test/java/org/apache/ibatis/binding/BoundBlogMapper.java
Patch:
@@ -251,7 +251,7 @@ Blog selectBlogWithAParamNamedValue(@Param("column") String column, @Param("id")
       @Result(property = "posts", column = "id", many = @Many(select = "selectPostsById"))
   })
   // @formatter:on
-  List<Blog> selectBlogsWithAutorAndPosts();
+  List<Blog> selectBlogsWithAuthorAndPosts();
 
   // @formatter:off
   @Select({
@@ -263,6 +263,6 @@ Blog selectBlogWithAParamNamedValue(@Param("column") String column, @Param("id")
       @Result(property = "posts", column = "id", many = @Many(select = "selectPostsById", fetchType = FetchType.EAGER))
   })
   // @formatter:on
-  List<Blog> selectBlogsWithAutorAndPostsEagerly();
+  List<Blog> selectBlogsWithAuthorAndPostsEagerly();
 
 }

File: src/test/java/org/apache/ibatis/executor/loader/CglibProxyTest.java
Patch:
@@ -71,7 +71,7 @@ void shouldLetCallALoadedProperty() {
   }
 
   @Test
-  void shouldSerizalizeADeserlizaliedProxy() throws Exception {
+  void shouldSerializeADeserializedProxy() throws Exception {
     Object proxy = ((CglibProxyFactory) proxyFactory).createDeserializationProxy(author, new HashMap<>(),
         new DefaultObjectFactory(), new ArrayList<>(), new ArrayList<>());
     Author author2 = (Author) deserialize(serialize((Serializable) proxy));

File: src/test/java/org/apache/ibatis/executor/loader/JavassistProxyTest.java
Patch:
@@ -69,7 +69,7 @@ void shouldLetCallALoadedProperty() {
   }
 
   @Test
-  void shouldSerizalizeADeserlizaliedProxy() throws Exception {
+  void shouldSerializeADeserializedProxy() throws Exception {
     Object proxy = ((JavassistProxyFactory) proxyFactory).createDeserializationProxy(author, new HashMap<>(),
         new DefaultObjectFactory(), new ArrayList<>(), new ArrayList<>());
     Author author2 = (Author) deserialize(serialize((Serializable) proxy));

File: src/test/java/org/apache/ibatis/executor/loader/SerializableProxyTest.java
Patch:
@@ -110,7 +110,7 @@ void shouldSerializeAProxyForABeanWithoutDefaultConstructorAndUnloadedProperties
   }
 
   @Test
-  void shouldSerizaliceAFullLoadedObjectToOriginalClass() throws Exception {
+  void shouldSerializeAFullLoadedObjectToOriginalClass() throws Exception {
     Object proxy = proxyFactory.createProxy(author, new ResultLoaderMap(), new Configuration(),
         new DefaultObjectFactory(), new ArrayList<>(), new ArrayList<>());
     Object proxy2 = deserialize(serialize((Serializable) proxy));

File: src/test/java/org/apache/ibatis/io/ExternalResourcesTest.java
Patch:
@@ -91,7 +91,7 @@ void getConfiguredTemplate() {
       templateName = ExternalResources.getConfiguredTemplate(tempFile.getAbsolutePath(), "new_command.template");
       assertEquals("templates/col_new_template_migration.sql", templateName);
     } catch (Exception e) {
-      fail("Test failed with execption: " + e.getMessage());
+      fail("Test failed with exception: " + e.getMessage());
     }
   }
 

File: src/test/java/org/apache/ibatis/jdbc/ScriptRunnerTest.java
Patch:
@@ -113,7 +113,7 @@ void shouldReturnWarningIfEndOfLineTerminatorNotFound() throws Exception {
   }
 
   @Test
-  void commentAferStatementDelimiterShouldNotCauseRunnerFail() throws Exception {
+  void commentAfterStatementDelimiterShouldNotCauseRunnerFail() throws Exception {
     DataSource ds = createUnpooledDataSource(JPETSTORE_PROPERTIES);
     String resource = "org/apache/ibatis/jdbc/ScriptCommentAfterEOLTerminator.sql";
     try (Connection conn = ds.getConnection(); Reader reader = Resources.getResourceAsReader(resource)) {

File: src/test/java/org/apache/ibatis/mapping/ResultMappingTest.java
Patch:
@@ -36,7 +36,7 @@ void shouldThrowErrorWhenBothResultMapAndNestedSelectAreSet() {
 
   // Issue 4: column is mandatory on nested queries
   @Test
-  void shouldFailWithAMissingColumnInNetstedSelect() {
+  void shouldFailWithAMissingColumnInNestedSelect() {
     Assertions.assertThrows(IllegalStateException.class,
         () -> new ResultMapping.Builder(configuration, "prop").nestedQueryId("nested query ID").build());
   }

File: src/test/java/org/apache/ibatis/submitted/automapping/AutomappingTest.java
Patch:
@@ -55,7 +55,7 @@ void shouldGetAUser() {
   }
 
   @Test
-  void shouldGetAUserWhithPhoneNumber() {
+  void shouldGetAUserWithPhoneNumber() {
     sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.NONE);
     try (SqlSession sqlSession = sqlSessionFactory.openSession()) {
       Mapper mapper = sqlSession.getMapper(Mapper.class);

File: src/test/java/org/apache/ibatis/submitted/force_flush_on_select/ForceFlushOnSelectTest.java
Patch:
@@ -118,7 +118,7 @@ void updateShouldFlushLocalCache() {
   }
 
   @Test
-  void selectShouldFlushLocalCacheIfFlushLocalCacheAtferEachStatementIsTrue() throws SQLException {
+  void selectShouldFlushLocalCacheIfFlushLocalCacheAfterEachStatementIsTrue() throws SQLException {
     sqlSessionFactory.getConfiguration().setLocalCacheScope(LocalCacheScope.STATEMENT);
     try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.SIMPLE)) {
       PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);

File: src/test/java/org/apache/ibatis/submitted/lazy_properties/LazyPropertiesTest.java
Patch:
@@ -155,16 +155,16 @@ void verifyCustomLazyLoadTriggerMethods() {
 
   @Test
   void shouldInvokingSetterInvalidateLazyLoading_Javassist() {
-    shoulInvokingSetterInvalidateLazyLoading(new JavassistProxyFactory());
+    shouldInvokingSetterInvalidateLazyLoading(new JavassistProxyFactory());
   }
 
   @Tag("RequireIllegalAccess")
   @Test
   void shouldInvokingSetterInvalidateLazyLoading_Cglib() {
-    shoulInvokingSetterInvalidateLazyLoading(new CglibProxyFactory());
+    shouldInvokingSetterInvalidateLazyLoading(new CglibProxyFactory());
   }
 
-  private void shoulInvokingSetterInvalidateLazyLoading(ProxyFactory proxyFactory) {
+  private void shouldInvokingSetterInvalidateLazyLoading(ProxyFactory proxyFactory) {
     Configuration config = sqlSessionFactory.getConfiguration();
     config.setProxyFactory(proxyFactory);
     config.setAggressiveLazyLoading(false);

File: src/test/java/org/apache/ibatis/submitted/result_handler/ResultHandlerTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
-class ResulthandlerTest {
+class ResultHandlerTest {
 
   private static SqlSessionFactory sqlSessionFactory;
 

File: src/test/java/org/apache/ibatis/type/SqlTimestampTypeHandlerTest.java
Patch:
@@ -25,7 +25,7 @@
 
 import org.junit.jupiter.api.Test;
 
-class SqlTimetampTypeHandlerTest extends BaseTypeHandlerTest {
+class SqlTimestampTypeHandlerTest extends BaseTypeHandlerTest {
 
   private static final TypeHandler<Timestamp> TYPE_HANDLER = new SqlTimestampTypeHandler();
   private static final Timestamp SQL_TIME = new Timestamp(new Date().getTime());

File: src/test/java/org/apache/ibatis/jdbc/ScriptRunnerTest.java
Patch:
@@ -113,7 +113,7 @@ void shouldReturnWarningIfEndOfLineTerminatorNotFound() throws Exception {
   }
 
   @Test
-  void commentAferStatementDelimiterShouldNotCauseRunnerFail() throws Exception {
+  void commentAfterStatementDelimiterShouldNotCauseRunnerFail() throws Exception {
     DataSource ds = createUnpooledDataSource(JPETSTORE_PROPERTIES);
     String resource = "org/apache/ibatis/jdbc/ScriptCommentAfterEOLTerminator.sql";
     try (Connection conn = ds.getConnection(); Reader reader = Resources.getResourceAsReader(resource)) {

File: src/test/java/org/apache/ibatis/submitted/force_flush_on_select/ForceFlushOnSelectTest.java
Patch:
@@ -118,7 +118,7 @@ void updateShouldFlushLocalCache() {
   }
 
   @Test
-  void selectShouldFlushLocalCacheIfFlushLocalCacheAtferEachStatementIsTrue() throws SQLException {
+  void selectShouldFlushLocalCacheIfFlushLocalCacheAfterEachStatementIsTrue() throws SQLException {
     sqlSessionFactory.getConfiguration().setLocalCacheScope(LocalCacheScope.STATEMENT);
     try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.SIMPLE)) {
       PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);

File: src/main/java/org/apache/ibatis/mapping/ResultMap.java
Patch:
@@ -115,7 +115,7 @@ public ResultMap build() {
           // #101
           Class<?> javaType = resultMapping.getJavaType();
           resultMap.hasResultMapsUsingConstructorCollection = resultMap.hasResultMapsUsingConstructorCollection
-              || (resultMapping.getNestedQueryId() == null && javaType != null
+              || (resultMapping.getNestedQueryId() == null && resultMapping.getTypeHandler() == null && javaType != null
                   && resultMap.configuration.getObjectFactory().isCollection(javaType));
         } else {
           resultMap.propertyResultMappings.add(resultMapping);

File: src/test/java/org/apache/ibatis/submitted/collection_in_constructor/Mapper.java
Patch:
@@ -41,4 +41,5 @@ public interface Mapper {
 
   List<Container1> getContainers();
 
+  List<Store10> getStores10();
 }

File: src/main/java/org/apache/ibatis/mapping/ResultMap.java
Patch:
@@ -117,7 +117,7 @@ public ResultMap build() {
           // #101
           Class<?> javaType = resultMapping.getJavaType();
           resultMap.hasResultMapsUsingConstructorCollection = resultMap.hasResultMapsUsingConstructorCollection
-              || (resultMapping.getNestedQueryId() == null && javaType != null
+              || (resultMapping.getNestedQueryId() == null && resultMapping.getTypeHandler() == null && javaType != null
                   && resultMap.configuration.getObjectFactory().isCollection(javaType));
 
           if (resultMapping.getProperty() != null) {

File: src/test/java/org/apache/ibatis/mapping/ResultMappingTest.java
Patch:
@@ -20,6 +20,7 @@
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
 import org.apache.ibatis.session.Configuration;
+import org.apache.ibatis.type.JdbcType;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
@@ -55,7 +56,7 @@ void shouldFailIfSizeOfColumnsAndForeignColumnsDontMatch() {
 
   @Test
   void shouldNestedCursorNotRequireForeignColumns() {
-    assertNotNull(new ResultMapping.Builder(configuration, "books").resultSet(ResultMapping.NESTED_CURSOR)
+    assertNotNull(new ResultMapping.Builder(configuration, "books").jdbcType(JdbcType.CURSOR)
         .nestedResultMapId("bookRM").column("books").build());
   }
 

File: src/test/java/org/apache/ibatis/submitted/oracle_cursor/Mapper.java
Patch:
@@ -31,6 +31,8 @@ public interface Mapper {
 
   List<Author> selectNestedCursor_Callable();
 
+  List<Author> selectNestedCursor_Automap();
+
   List<Author2> selectNestedCursorOfStrings();
 
   List<Book2> selectNestedCursorAssociation();

File: src/main/java/org/apache/ibatis/mapping/ResultMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2024 the original author or authors.
+ *    Copyright 2009-2025 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -116,7 +116,7 @@ public ResultMap build() {
           // #101
           Class<?> javaType = resultMapping.getJavaType();
           resultMap.hasResultMapsUsingConstructorCollection = resultMap.hasResultMapsUsingConstructorCollection
-              || (resultMapping.getNestedQueryId() == null && javaType != null
+              || (resultMapping.getNestedQueryId() == null && resultMapping.getTypeHandler() == null && javaType != null
                   && resultMap.configuration.getObjectFactory().isCollection(javaType));
 
           if (resultMapping.getProperty() != null) {

File: src/test/java/org/apache/ibatis/submitted/collection_in_constructor/Mapper.java
Patch:
@@ -41,4 +41,5 @@ public interface Mapper {
 
   List<Container1> getContainers();
 
+  List<Store10> getStores10();
 }

File: src/test/java/org/apache/ibatis/submitted/collection_in_constructor/Mapper.java
Patch:
@@ -41,4 +41,5 @@ public interface Mapper {
 
   List<Container1> getContainers();
 
+  List<Store10> getStores10();
 }

File: src/main/java/org/apache/ibatis/mapping/ResultMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2024 the original author or authors.
+ *    Copyright 2009-2025 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -116,7 +116,7 @@ public ResultMap build() {
           // #101
           Class<?> javaType = resultMapping.getJavaType();
           resultMap.hasResultMapsUsingConstructorCollection = resultMap.hasResultMapsUsingConstructorCollection
-              || (resultMapping.getNestedQueryId() == null && javaType != null
+              || (resultMapping.getNestedQueryId() == null && resultMapping.getTypeHandler() == null && javaType != null
                   && resultMap.configuration.getObjectFactory().isCollection(javaType));
 
           if (resultMapping.getProperty() != null) {

File: src/test/java/org/apache/ibatis/submitted/oracle_cursor/Book.java
Patch:
@@ -14,7 +14,7 @@
  *    limitations under the License.
  */
 
-package org.apache.ibatis.submitted.oracle_implicit_cursor;
+package org.apache.ibatis.submitted.oracle_cursor;
 
 import java.util.Objects;
 

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2024 the original author or authors.
+ *    Copyright 2009-2025 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -235,7 +235,7 @@ private Configuration getConfiguration() {
               + FACTORY_METHOD + "] is not static.");
         }
 
-        if (!factoryMethod.isAccessible()) {
+        if (!factoryMethod.canAccess(null)) {
           configurationObject = AccessController.doPrivileged((PrivilegedExceptionAction<Object>) () -> {
             try {
               factoryMethod.setAccessible(true);

File: src/main/java/org/apache/ibatis/scripting/xmltags/OgnlMemberAccess.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2024 the original author or authors.
+ *    Copyright 2009-2025 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,7 +48,7 @@ public Object setup(OgnlContext context, Object target, Member member, String pr
     Object result = null;
     if (isAccessible(context, target, member, propertyName)) {
       AccessibleObject accessible = (AccessibleObject) member;
-      if (!accessible.isAccessible()) {
+      if (!accessible.canAccess(target)) {
         result = Boolean.FALSE;
         accessible.setAccessible(true);
       }

File: src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomObjectFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2024 the original author or authors.
+ *    Copyright 2009-2025 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,13 +48,13 @@ private <T> T instantiateClass(Class<T> type, List<Class<?>> constructorArgTypes
       Constructor<T> constructor;
       if (constructorArgTypes == null || constructorArgs == null) {
         constructor = type.getDeclaredConstructor();
-        if (!constructor.isAccessible()) {
+        if (!constructor.canAccess(null)) {
           constructor.setAccessible(true);
         }
         return constructor.newInstance();
       }
       constructor = type.getDeclaredConstructor(constructorArgTypes.toArray(new Class[constructorArgTypes.size()]));
-      if (!constructor.isAccessible()) {
+      if (!constructor.canAccess(null)) {
         constructor.setAccessible(true);
       }
       return constructor.newInstance(constructorArgs.toArray(new Object[constructorArgs.size()]));

File: src/test/java/org/apache/ibatis/testcontainers/MysqlContainer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2024 the original author or authors.
+ *    Copyright 2009-2025 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@ public final class MysqlContainer {
 
   private static MySQLContainer<?> initContainer() {
     @SuppressWarnings("resource")
-    MySQLContainer<?> container = new MySQLContainer<>().withDatabaseName(DB_NAME).withUsername(USERNAME)
+    MySQLContainer<?> container = new MySQLContainer<>("mysql").withDatabaseName(DB_NAME).withUsername(USERNAME)
         .withPassword(PASSWORD).withUrlParam("useSSL", "false");
     container.start();
     return container;

File: src/test/java/org/apache/ibatis/testcontainers/PgContainer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2024 the original author or authors.
+ *    Copyright 2009-2025 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -31,8 +31,8 @@ public final class PgContainer {
 
   private static PostgreSQLContainer<?> initContainer() {
     @SuppressWarnings("resource")
-    PostgreSQLContainer<?> container = new PostgreSQLContainer<>().withDatabaseName(DB_NAME).withUsername(USERNAME)
-        .withPassword(PASSWORD);
+    PostgreSQLContainer<?> container = new PostgreSQLContainer<>("postgres").withDatabaseName(DB_NAME)
+        .withUsername(USERNAME).withPassword(PASSWORD);
     container.start();
     return container;
   }

File: src/main/java/org/apache/ibatis/annotations/AutomapConstructor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,6 @@
 
 /**
  * The marker annotation that indicate a constructor for automatic mapping.
- *
  * <p>
  * <b>How to use:</b>
  *
@@ -47,6 +46,7 @@
  * </pre>
  *
  * @author Tim Chen
+ *
  * @since 3.4.3
  */
 @Documented

File: src/main/java/org/apache/ibatis/annotations/Case.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -28,6 +28,7 @@
  * @see Arg
  * @see Results
  * @see ConstructorArgs
+ *
  * @author Clinton Begin
  */
 @Documented

File: src/main/java/org/apache/ibatis/annotations/Flush.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,6 @@
 
 /**
  * The maker annotation that invoke a flush statements via Mapper interface.
- *
  * <p>
  * <b>How to use:</b>
  *
@@ -35,6 +34,7 @@
  * </pre>
  *
  * @since 3.3.0
+ *
  * @author Kazuki Shimizu
  */
 @Documented

File: src/main/java/org/apache/ibatis/annotations/Lang.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,6 @@
 
 /**
  * The annotation that specify a {@link LanguageDriver} to use.
- *
  * <p>
  * <b>How to use:</b>
  *

File: src/main/java/org/apache/ibatis/annotations/MapKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,6 @@
 
 /**
  * The annotation that specify the property name(or column name) for a key value of {@link java.util.Map}.
- *
  * <p>
  * <b>How to use:</b>
  *

File: src/main/java/org/apache/ibatis/annotations/Mapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,7 +24,6 @@
 
 /**
  * Marker interface for MyBatis mappers.
- *
  * <p>
  * <b>How to use:</b>
  *

File: src/main/java/org/apache/ibatis/annotations/Param.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,6 @@
 
 /**
  * The annotation that specify the parameter name.
- *
  * <p>
  * <b>How to use:</b>
  *

File: src/main/java/org/apache/ibatis/annotations/Property.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,7 +24,9 @@
  * The annotation that inject a property value.
  *
  * @since 3.4.2
+ *
  * @author Kazuki Shimizu
+ *
  * @see CacheNamespace
  */
 @Documented

File: src/main/java/org/apache/ibatis/annotations/Result.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,6 +30,7 @@
  * The annotation that specify a mapping definition for the property.
  *
  * @see Results
+ *
  * @author Clinton Begin
  */
 @Documented

File: src/main/java/org/apache/ibatis/annotations/ResultMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,6 @@
 
 /**
  * The annotation that specify result map names to use.
- *
  * <p>
  * <b>How to use:</b><br>
  * Mapper interface:
@@ -39,7 +38,9 @@
  *   User selectByEmail(String email);
  * }
  * </pre>
+ *
  * Mapper XML:
+ *
  * <pre>{@code
  * <mapper namespace="com.example.mapper.UserMapper">
  *   <resultMap id="userMap" type="com.example.model.User">

File: src/main/java/org/apache/ibatis/annotations/Results.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,6 @@
 
 /**
  * The annotation that be grouping mapping definitions for property.
- *
  * <p>
  * <b>How to use:</b>
  *

File: src/main/java/org/apache/ibatis/binding/BindingException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,6 @@ public class BindingException extends PersistenceException {
   private static final long serialVersionUID = 4300802238789381562L;
 
   public BindingException() {
-    super();
   }
 
   public BindingException(String message) {

File: src/main/java/org/apache/ibatis/builder/BuilderException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,6 @@ public class BuilderException extends PersistenceException {
   private static final long serialVersionUID = -3885164021020443281L;
 
   public BuilderException() {
-    super();
   }
 
   public BuilderException(String message) {

File: src/main/java/org/apache/ibatis/builder/CacheRefResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -32,4 +32,4 @@ public CacheRefResolver(MapperBuilderAssistant assistant, String cacheRefNamespa
   public Cache resolveCacheRef() {
     return assistant.useCacheRef(cacheRefNamespace);
   }
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/builder/IncompleteElementException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -22,7 +22,6 @@ public class IncompleteElementException extends BuilderException {
   private static final long serialVersionUID = -3697292286890900315L;
 
   public IncompleteElementException() {
-    super();
   }
 
   public IncompleteElementException(String message, Throwable cause) {

File: src/main/java/org/apache/ibatis/builder/InitializingObject.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -19,6 +19,7 @@
  * Interface that indicate to provide an initialization method.
  *
  * @since 3.4.2
+ *
  * @author Kazuki Shimizu
  */
 public interface InitializingObject {
@@ -27,7 +28,6 @@ public interface InitializingObject {
    * Initialize an instance.
    * <p>
    * This method will be invoked after it has set all properties.
-   * </p>
    *
    * @throws Exception
    *           in the event of misconfiguration (such as failure to set an essential property) or if initialization

File: src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/annotation/MethodResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -33,4 +33,4 @@ public void resolve() {
     annotationBuilder.parseStatement(method);
   }
 
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -21,6 +21,7 @@
  * The context object for sql provider method.
  *
  * @author Kazuki Shimizu
+ *
  * @since 3.4.5
  */
 public final class ProviderContext {
@@ -67,6 +68,7 @@ public Method getMapperMethod() {
    * Get a database id that provided from {@link org.apache.ibatis.mapping.DatabaseIdProvider}.
    *
    * @return A database id
+   *
    * @since 3.5.1
    */
   public String getDatabaseId() {

File: src/main/java/org/apache/ibatis/builder/annotation/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * Parses annotions to create a Configuration.
+ * Parses annotations to create a Configuration.
  */
 package org.apache.ibatis.builder.annotation;

File: src/main/java/org/apache/ibatis/cache/CacheException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,6 @@ public class CacheException extends PersistenceException {
   private static final long serialVersionUID = -193202262468464650L;
 
   public CacheException() {
-    super();
   }
 
   public CacheException(String message) {

File: src/main/java/org/apache/ibatis/cache/NullCacheKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,6 +17,7 @@
 
 /**
  * @author Clinton Begin
+ *
  * @deprecated Since 3.5.3, This class never used and will be removed future version.
  */
 @Deprecated
@@ -25,7 +26,6 @@ public final class NullCacheKey extends CacheKey {
   private static final long serialVersionUID = 3704229911977019465L;
 
   public NullCacheKey() {
-    super();
   }
 
   @Override

File: src/main/java/org/apache/ibatis/cache/decorators/FifoCache.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -64,6 +64,7 @@ public Object getObject(Object key) {
 
   @Override
   public Object removeObject(Object key) {
+    keyList.remove(key);
     return delegate.removeObject(key);
   }
 

File: src/main/java/org/apache/ibatis/cache/decorators/LoggingCache.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -26,8 +26,8 @@ public class LoggingCache implements Cache {
 
   private final Log log;
   private final Cache delegate;
-  protected int requests = 0;
-  protected int hits = 0;
+  protected int requests;
+  protected int hits;
 
   public LoggingCache(Cache delegate) {
     this.delegate = delegate;

File: src/main/java/org/apache/ibatis/cache/decorators/LruCache.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -75,6 +75,7 @@ public Object getObject(Object key) {
 
   @Override
   public Object removeObject(Object key) {
+    keyMap.remove(key);
     return delegate.removeObject(key);
   }
 

File: src/main/java/org/apache/ibatis/cache/impl/PerpetualCache.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/datasource/DataSourceException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,6 @@ public class DataSourceException extends PersistenceException {
   private static final long serialVersionUID = -5251396250407091334L;
 
   public DataSourceException() {
-    super();
   }
 
   public DataSourceException(String message) {

File: src/main/java/org/apache/ibatis/datasource/DataSourceFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSourceFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/exceptions/IbatisException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,7 +24,6 @@ public class IbatisException extends RuntimeException {
   private static final long serialVersionUID = 3880206998166270511L;
 
   public IbatisException() {
-    super();
   }
 
   public IbatisException(String message) {

File: src/main/java/org/apache/ibatis/exceptions/PersistenceException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,7 +24,6 @@ public class PersistenceException extends IbatisException {
   private static final long serialVersionUID = -7537395265357977271L;
 
   public PersistenceException() {
-    super();
   }
 
   public PersistenceException(String message) {

File: src/main/java/org/apache/ibatis/exceptions/TooManyResultsException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,6 @@ public class TooManyResultsException extends PersistenceException {
   private static final long serialVersionUID = 8935197089745865786L;
 
   public TooManyResultsException() {
-    super();
   }
 
   public TooManyResultsException(String message) {

File: src/main/java/org/apache/ibatis/executor/BatchResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -32,7 +32,6 @@ public class BatchResult {
   private int[] updateCounts;
 
   public BatchResult(MappedStatement mappedStatement, String sql) {
-    super();
     this.mappedStatement = mappedStatement;
     this.sql = sql;
     this.parameterObjects = new ArrayList<>();

File: src/main/java/org/apache/ibatis/executor/ExecutorException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,6 @@ public class ExecutorException extends PersistenceException {
   private static final long serialVersionUID = 4060977051977364820L;
 
   public ExecutorException() {
-    super();
   }
 
   public ExecutorException(String message) {

File: src/main/java/org/apache/ibatis/executor/loader/ProxyFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,6 +30,7 @@ default void setProperties(Properties properties) {
     // NOP
   }
 
-  Object createProxy(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs);
+  Object createProxy(Object target, ResultLoaderMap lazyLoader, Configuration configuration,
+      ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs);
 
 }

File: src/main/java/org/apache/ibatis/executor/result/DefaultMapResultHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -36,7 +36,8 @@ public class DefaultMapResultHandler<K, V> implements ResultHandler<V> {
   private final ReflectorFactory reflectorFactory;
 
   @SuppressWarnings("unchecked")
-  public DefaultMapResultHandler(String mapKey, ObjectFactory objectFactory, ObjectWrapperFactory objectWrapperFactory, ReflectorFactory reflectorFactory) {
+  public DefaultMapResultHandler(String mapKey, ObjectFactory objectFactory, ObjectWrapperFactory objectWrapperFactory,
+      ReflectorFactory reflectorFactory) {
     this.objectFactory = objectFactory;
     this.objectWrapperFactory = objectWrapperFactory;
     this.reflectorFactory = reflectorFactory;

File: src/main/java/org/apache/ibatis/executor/statement/RoutingStatementHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -36,7 +36,8 @@ public class RoutingStatementHandler implements StatementHandler {
 
   private final StatementHandler delegate;
 
-  public RoutingStatementHandler(Executor executor, MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) {
+  public RoutingStatementHandler(Executor executor, MappedStatement ms, Object parameter, RowBounds rowBounds,
+      ResultHandler resultHandler, BoundSql boundSql) {
 
     switch (ms.getStatementType()) {
       case STATEMENT:

File: src/main/java/org/apache/ibatis/io/SerialFilterChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/jdbc/RuntimeSqlException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,6 @@ public class RuntimeSqlException extends RuntimeException {
   private static final long serialVersionUID = 5224696788505678598L;
 
   public RuntimeSqlException() {
-    super();
   }
 
   public RuntimeSqlException(String message) {

File: src/main/java/org/apache/ibatis/lang/UsesJava7.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -22,9 +22,7 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>
  * Indicates that the element uses Java 7 API.
- * </p>
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)

File: src/main/java/org/apache/ibatis/lang/UsesJava8.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -22,9 +22,7 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>
  * Indicates that the element uses Java 8 API.
- * </p>
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)

File: src/main/java/org/apache/ibatis/logging/LogException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,6 @@ public class LogException extends PersistenceException {
   private static final long serialVersionUID = 1022924004852350942L;
 
   public LogException() {
-    super();
   }
 
   public LogException(String message) {

File: src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -34,7 +34,6 @@
  *
  * @author Clinton Begin
  * @author Eduardo Macarron
- *
  */
 public final class ResultSetLogger extends BaseJdbcLogger implements InvocationHandler {
 
@@ -127,12 +126,13 @@ private void printColumnValues(int columnCount) {
    *          the statement log
    * @param queryStack
    *          the query stack
+   *
    * @return the ResultSet with logging
    */
   public static ResultSet newInstance(ResultSet rs, Log statementLog, int queryStack) {
     InvocationHandler handler = new ResultSetLogger(rs, statementLog, queryStack);
     ClassLoader cl = ResultSet.class.getClassLoader();
-    return (ResultSet) Proxy.newProxyInstance(cl, new Class[]{ResultSet.class}, handler);
+    return (ResultSet) Proxy.newProxyInstance(cl, new Class[] { ResultSet.class }, handler);
   }
 
   /**

File: src/main/java/org/apache/ibatis/logging/log4j/Log4jImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -21,6 +21,7 @@
 
 /**
  * @author Eduardo Macarron
+ *
  * @deprecated Since 3.5.9 - See https://github.com/mybatis/mybatis-3/issues/1223. This class will remove future.
  */
 @Deprecated

File: src/main/java/org/apache/ibatis/logging/log4j/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -15,6 +15,7 @@
  */
 /**
  * logger using Log4J feature.
+ *
  * @deprecated Since 3.5.9 - See https://github.com/mybatis/mybatis-3/issues/1223. This package will remove future.
  */
 package org.apache.ibatis.logging.log4j;

File: src/main/java/org/apache/ibatis/logging/slf4j/Slf4jImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -35,7 +35,8 @@ public Slf4jImpl(String clazz) {
     if (logger instanceof LocationAwareLogger) {
       try {
         // check for slf4j >= 1.6 method signature
-        logger.getClass().getMethod("log", Marker.class, String.class, int.class, String.class, Object[].class, Throwable.class);
+        logger.getClass().getMethod("log", Marker.class, String.class, int.class, String.class, Object[].class,
+            Throwable.class);
         log = new Slf4jLocationAwareLoggerImpl((LocationAwareLogger) logger);
         return;
       } catch (SecurityException | NoSuchMethodException e) {

File: src/main/java/org/apache/ibatis/mapping/Discriminator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -32,7 +32,7 @@ public class Discriminator {
   }
 
   public static class Builder {
-    private Discriminator discriminator = new Discriminator();
+    private final Discriminator discriminator = new Discriminator();
 
     public Builder(Configuration configuration, ResultMapping resultMapping, Map<String, String> discriminatorMap) {
       discriminator.resultMapping = resultMapping;
@@ -43,7 +43,7 @@ public Discriminator build() {
       assert discriminator.resultMapping != null;
       assert discriminator.discriminatorMap != null;
       assert !discriminator.discriminatorMap.isEmpty();
-      //lock down map
+      // lock down map
       discriminator.discriminatorMap = Collections.unmodifiableMap(discriminator.discriminatorMap);
       return discriminator;
     }

File: src/main/java/org/apache/ibatis/mapping/ParameterMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -33,7 +33,7 @@ private ParameterMap() {
   }
 
   public static class Builder {
-    private ParameterMap parameterMap = new ParameterMap();
+    private final ParameterMap parameterMap = new ParameterMap();
 
     public Builder(Configuration configuration, String id, Class<?> type, List<ParameterMapping> parameterMappings) {
       parameterMap.id = id;
@@ -46,7 +46,7 @@ public Class<?> type() {
     }
 
     public ParameterMap build() {
-      //lock down collections
+      // lock down collections
       parameterMap.parameterMappings = Collections.unmodifiableList(parameterMap.parameterMappings);
       return parameterMap;
     }

File: src/main/java/org/apache/ibatis/mapping/SqlSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -16,8 +16,8 @@
 package org.apache.ibatis.mapping;
 
 /**
- * Represents the content of a mapped statement read from an XML file or an annotation.
- * It creates the SQL that will be passed to the database out of the input parameter received from the user.
+ * Represents the content of a mapped statement read from an XML file or an annotation. It creates the SQL that will be
+ * passed to the database out of the input parameter received from the user.
  *
  * @author Clinton Begin
  */

File: src/main/java/org/apache/ibatis/parsing/ParsingException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,7 +24,6 @@ public class ParsingException extends PersistenceException {
   private static final long serialVersionUID = -176685891441325943L;
 
   public ParsingException() {
-    super();
   }
 
   public ParsingException(String message) {

File: src/main/java/org/apache/ibatis/parsing/TokenHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -21,4 +21,3 @@
 public interface TokenHandler {
   String handleToken(String content);
 }
-

File: src/main/java/org/apache/ibatis/plugin/PluginException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,6 @@ public class PluginException extends PersistenceException {
   private static final long serialVersionUID = 8548771664564998595L;
 
   public PluginException() {
-    super();
   }
 
   public PluginException(String message) {

File: src/main/java/org/apache/ibatis/plugin/Signature.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,6 +24,7 @@
  * The annotation that indicate the method signature.
  *
  * @see Intercepts
+ *
  * @author Clinton Begin
  */
 @Documented
@@ -46,6 +47,7 @@
 
   /**
    * Returns java types for method argument.
+   *
    * @return java types for method argument
    */
   Class<?>[] args();

File: src/main/java/org/apache/ibatis/reflection/DefaultReflectorFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -42,9 +42,8 @@ public Reflector findForClass(Class<?> type) {
     if (classCacheEnabled) {
       // synchronized (type) removed see issue #461
       return MapUtil.computeIfAbsent(reflectorMap, type, Reflector::new);
-    } else {
-      return new Reflector(type);
     }
+    return new Reflector(type);
   }
 
 }

File: src/main/java/org/apache/ibatis/reflection/Jdk.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,6 +24,7 @@ public class Jdk {
 
   /**
    * <code>true</code> if <code>java.lang.reflect.Parameter</code> is available.
+   *
    * @deprecated Since 3.5.0, Will remove this field at feature(next major version up)
    */
   @Deprecated
@@ -75,6 +76,5 @@ public class Jdk {
   }
 
   private Jdk() {
-    super();
   }
 }

File: src/main/java/org/apache/ibatis/reflection/OptionalUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -28,6 +28,5 @@ public static Object ofNullable(Object value) {
   }
 
   private OptionalUtil() {
-    super();
   }
 }

File: src/main/java/org/apache/ibatis/reflection/ParamNameUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -37,6 +37,5 @@ private static List<String> getParameterNames(Executable executable) {
   }
 
   private ParamNameUtil() {
-    super();
   }
 }

File: src/main/java/org/apache/ibatis/reflection/ReflectionException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,6 @@ public class ReflectionException extends PersistenceException {
   private static final long serialVersionUID = 7642570221267566591L;
 
   public ReflectionException() {
-    super();
   }
 
   public ReflectionException(String message) {

File: src/main/java/org/apache/ibatis/reflection/ReflectorFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -22,4 +22,4 @@ public interface ReflectorFactory {
   void setClassCacheEnabled(boolean classCacheEnabled);
 
   Reflector findForClass(Class<?> type);
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/reflection/invoker/GetFieldInvoker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -37,9 +37,8 @@ public Object invoke(Object target, Object[] args) throws IllegalAccessException
       if (Reflector.canControlMemberAccessible()) {
         field.setAccessible(true);
         return field.get(target);
-      } else {
-        throw e;
       }
+      throw e;
     }
   }
 

File: src/main/java/org/apache/ibatis/reflection/invoker/MethodInvoker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,9 +46,8 @@ public Object invoke(Object target, Object[] args) throws IllegalAccessException
       if (Reflector.canControlMemberAccessible()) {
         method.setAccessible(true);
         return method.invoke(target, args);
-      } else {
-        throw e;
       }
+      throw e;
     }
   }
 

File: src/main/java/org/apache/ibatis/reflection/property/PropertyTokenizer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -71,6 +71,7 @@ public PropertyTokenizer next() {
 
   @Override
   public void remove() {
-    throw new UnsupportedOperationException("Remove is not supported, as it has no meaning in the context of properties.");
+    throw new UnsupportedOperationException(
+        "Remove is not supported, as it has no meaning in the context of properties.");
   }
 }

File: src/main/java/org/apache/ibatis/reflection/wrapper/DefaultObjectWrapperFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,7 +30,8 @@ public boolean hasWrapperFor(Object object) {
 
   @Override
   public ObjectWrapper getWrapperFor(MetaObject metaObject, Object object) {
-    throw new ReflectionException("The DefaultObjectWrapperFactory should never be called to provide an ObjectWrapper.");
+    throw new ReflectionException(
+        "The DefaultObjectWrapperFactory should never be called to provide an ObjectWrapper.");
   }
 
 }

File: src/main/java/org/apache/ibatis/scripting/ScriptingException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,6 @@ public class ScriptingException extends PersistenceException {
   private static final long serialVersionUID = 7642570221267566591L;
 
   public ScriptingException() {
-    super();
   }
 
   public ScriptingException(String message) {

File: src/main/java/org/apache/ibatis/scripting/defaults/RawSqlSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -34,6 +34,7 @@
  * Static SqlSource. It is faster than {@link DynamicSqlSource} because mappings are calculated during startup.
  *
  * @since 3.2.0
+ *
  * @author Eduardo Macarron
  */
 public class RawSqlSource implements SqlSource {

File: src/main/java/org/apache/ibatis/scripting/xmltags/IfSqlNode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2025 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -19,14 +19,13 @@
  * @author Clinton Begin
  */
 public class IfSqlNode implements SqlNode {
-  private final ExpressionEvaluator evaluator;
+  private final ExpressionEvaluator evaluator = ExpressionEvaluator.INSTANCE;
   private final String test;
   private final SqlNode contents;
 
   public IfSqlNode(SqlNode contents, String test) {
     this.test = test;
     this.contents = contents;
-    this.evaluator = new ExpressionEvaluator();
   }
 
   @Override

File: src/main/java/org/apache/ibatis/scripting/xmltags/OgnlCache.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -19,6 +19,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 import ognl.Ognl;
+import ognl.OgnlContext;
 import ognl.OgnlException;
 
 import org.apache.ibatis.builder.BuilderException;
@@ -42,7 +43,7 @@ private OgnlCache() {
 
   public static Object getValue(String expression, Object root) {
     try {
-      Map context = Ognl.createDefaultContext(root, MEMBER_ACCESS, CLASS_RESOLVER, null);
+      OgnlContext context = Ognl.createDefaultContext(root, MEMBER_ACCESS, CLASS_RESOLVER, null);
       return Ognl.getValue(parseExpression(expression), context, root);
     } catch (OgnlException e) {
       throw new BuilderException("Error evaluating expression '" + expression + "'. Cause: " + e, e);

File: src/main/java/org/apache/ibatis/scripting/xmltags/SetSqlNode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@ public class SetSqlNode extends TrimSqlNode {
 
   private static final List<String> COMMA = Collections.singletonList(",");
 
-  public SetSqlNode(Configuration configuration,SqlNode contents) {
+  public SetSqlNode(Configuration configuration, SqlNode contents) {
     super(configuration, contents, "SET", COMMA, null, COMMA);
   }
 

File: src/main/java/org/apache/ibatis/scripting/xmltags/StaticTextSqlNode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -31,4 +31,4 @@ public boolean apply(DynamicContext context) {
     return true;
   }
 
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/scripting/xmltags/TextSqlNode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -49,7 +49,7 @@ private GenericTokenParser createParser(TokenHandler handler) {
 
   private static class BindingTokenParser implements TokenHandler {
 
-    private DynamicContext context;
+    private final DynamicContext context;
 
     public BindingTokenParser(DynamicContext context) {
       this.context = context;

File: src/main/java/org/apache/ibatis/scripting/xmltags/WhereSqlNode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,8 @@
  */
 public class WhereSqlNode extends TrimSqlNode {
 
-  private static List<String> prefixList = Arrays.asList("AND ","OR ","AND\n", "OR\n", "AND\r", "OR\r", "AND\t", "OR\t");
+  private static final List<String> prefixList = Arrays.asList("AND ", "OR ", "AND\n", "OR\n", "AND\r", "OR\r", "AND\t",
+      "OR\t");
 
   public WhereSqlNode(Configuration configuration, SqlNode contents) {
     super(configuration, contents, "WHERE", prefixList, null, null);

File: src/main/java/org/apache/ibatis/session/LocalCacheScope.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -19,5 +19,5 @@
  * @author Eduardo Macarron
  */
 public enum LocalCacheScope {
-  SESSION,STATEMENT
+  SESSION, STATEMENT
 }

File: src/main/java/org/apache/ibatis/session/SqlSessionException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,6 @@ public class SqlSessionException extends PersistenceException {
   private static final long serialVersionUID = 3833184690240265047L;
 
   public SqlSessionException() {
-    super();
   }
 
   public SqlSessionException(String message) {

File: src/main/java/org/apache/ibatis/transaction/TransactionException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,6 @@ public class TransactionException extends PersistenceException {
   private static final long serialVersionUID = -433589569461084605L;
 
   public TransactionException() {
-    super();
   }
 
   public TransactionException(String message) {

File: src/main/java/org/apache/ibatis/transaction/jdbc/JdbcTransactionFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/transaction/managed/ManagedTransactionFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -53,7 +53,7 @@ public Transaction newTransaction(Connection conn) {
   @Override
   public Transaction newTransaction(DataSource ds, TransactionIsolationLevel level, boolean autoCommit) {
     // Silently ignores autocommit and isolation level, as managed transactions are entirely
-    // controlled by an external manager.  It's silently ignored so that
+    // controlled by an external manager. It's silently ignored so that
     // code remains portable between managed and unmanaged configurations.
     return new ManagedTransaction(ds, level, closeConnection);
   }

File: src/main/java/org/apache/ibatis/type/Alias.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,15 +23,16 @@
 
 /**
  * The annotation that specify alias name.
- *
  * <p>
  * <b>How to use:</b>
+ *
  * <pre>
  * &#064;Alias("Email")
  * public class UserEmail {
  *   // ...
  * }
  * </pre>
+ *
  * @author Clinton Begin
  */
 @Documented

File: src/main/java/org/apache/ibatis/type/ArrayTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -73,7 +73,6 @@ public class ArrayTypeHandler extends BaseTypeHandler<Object> {
   }
 
   public ArrayTypeHandler() {
-    super();
   }
 
   @Override

File: src/main/java/org/apache/ibatis/type/BigIntegerTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -28,7 +28,8 @@
 public class BigIntegerTypeHandler extends BaseTypeHandler<BigInteger> {
 
   @Override
-  public void setNonNullParameter(PreparedStatement ps, int i, BigInteger parameter, JdbcType jdbcType) throws SQLException {
+  public void setNonNullParameter(PreparedStatement ps, int i, BigInteger parameter, JdbcType jdbcType)
+      throws SQLException {
     ps.setBigDecimal(i, new BigDecimal(parameter));
   }
 

File: src/main/java/org/apache/ibatis/type/ByteObjectArrayTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -26,7 +26,8 @@
 public class ByteObjectArrayTypeHandler extends BaseTypeHandler<Byte[]> {
 
   @Override
-  public void setNonNullParameter(PreparedStatement ps, int i, Byte[] parameter, JdbcType jdbcType) throws SQLException {
+  public void setNonNullParameter(PreparedStatement ps, int i, Byte[] parameter, JdbcType jdbcType)
+      throws SQLException {
     ps.setBytes(i, ByteArrayUtils.convertToPrimitiveArray(parameter));
   }
 

File: src/main/java/org/apache/ibatis/type/EnumOrdinalTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -75,7 +75,8 @@ private E toOrdinalEnum(int ordinal) {
     try {
       return enums[ordinal];
     } catch (Exception ex) {
-      throw new IllegalArgumentException("Cannot convert " + ordinal + " to " + type.getSimpleName() + " by ordinal value.", ex);
+      throw new IllegalArgumentException(
+          "Cannot convert " + ordinal + " to " + type.getSimpleName() + " by ordinal value.", ex);
     }
   }
 }

File: src/main/java/org/apache/ibatis/type/EnumTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -60,4 +60,4 @@ public E getNullableResult(CallableStatement cs, int columnIndex) throws SQLExce
     String s = cs.getString(columnIndex);
     return s == null ? null : Enum.valueOf(type, s);
   }
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/type/JapaneseDateTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -27,13 +27,14 @@
  * Type Handler for {@link JapaneseDate}.
  *
  * @since 3.4.5
+ *
  * @author Kazuki Shimizu
  */
 public class JapaneseDateTypeHandler extends BaseTypeHandler<JapaneseDate> {
 
   @Override
   public void setNonNullParameter(PreparedStatement ps, int i, JapaneseDate parameter, JdbcType jdbcType)
-          throws SQLException {
+      throws SQLException {
     ps.setDate(i, Date.valueOf(LocalDate.ofEpochDay(parameter.toEpochDay())));
   }
 

File: src/main/java/org/apache/ibatis/type/LocalDateTimeTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,13 +23,14 @@
 
 /**
  * @since 3.4.5
+ *
  * @author Tomas Rohovsky
  */
 public class LocalDateTimeTypeHandler extends BaseTypeHandler<LocalDateTime> {
 
   @Override
   public void setNonNullParameter(PreparedStatement ps, int i, LocalDateTime parameter, JdbcType jdbcType)
-          throws SQLException {
+      throws SQLException {
     ps.setObject(i, parameter);
   }
 

File: src/main/java/org/apache/ibatis/type/LocalDateTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,13 +23,14 @@
 
 /**
  * @since 3.4.5
+ *
  * @author Tomas Rohovsky
  */
 public class LocalDateTypeHandler extends BaseTypeHandler<LocalDate> {
 
   @Override
   public void setNonNullParameter(PreparedStatement ps, int i, LocalDate parameter, JdbcType jdbcType)
-          throws SQLException {
+      throws SQLException {
     ps.setObject(i, parameter);
   }
 

File: src/main/java/org/apache/ibatis/type/LocalTimeTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,13 +23,14 @@
 
 /**
  * @since 3.4.5
+ *
  * @author Tomas Rohovsky
  */
 public class LocalTimeTypeHandler extends BaseTypeHandler<LocalTime> {
 
   @Override
   public void setNonNullParameter(PreparedStatement ps, int i, LocalTime parameter, JdbcType jdbcType)
-          throws SQLException {
+      throws SQLException {
     ps.setObject(i, parameter);
   }
 

File: src/main/java/org/apache/ibatis/type/MappedTypes.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,15 +23,16 @@
 
 /**
  * The annotation that specify java types to map {@link TypeHandler}.
- *
  * <p>
  * <b>How to use:</b>
+ *
  * <pre>
  * &#064;MappedTypes(String.class)
  * public class StringTrimmingTypeHandler implements TypeHandler&lt;String&gt; {
  *   // ...
  * }
  * </pre>
+ *
  * @author Eduardo Macarron
  */
 @Documented

File: src/main/java/org/apache/ibatis/type/MonthTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -22,8 +22,8 @@
 import java.time.Month;
 
 /**
- *
  * @since 3.4.5
+ *
  * @author Björn Raupach
  */
 public class MonthTypeHandler extends BaseTypeHandler<Month> {

File: src/main/java/org/apache/ibatis/type/OffsetDateTimeTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,13 +23,14 @@
 
 /**
  * @since 3.4.5
+ *
  * @author Tomas Rohovsky
  */
 public class OffsetDateTimeTypeHandler extends BaseTypeHandler<OffsetDateTime> {
 
   @Override
   public void setNonNullParameter(PreparedStatement ps, int i, OffsetDateTime parameter, JdbcType jdbcType)
-          throws SQLException {
+      throws SQLException {
     ps.setObject(i, parameter);
   }
 

File: src/main/java/org/apache/ibatis/type/OffsetTimeTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,13 +23,14 @@
 
 /**
  * @since 3.4.5
+ *
  * @author Tomas Rohovsky
  */
 public class OffsetTimeTypeHandler extends BaseTypeHandler<OffsetTime> {
 
   @Override
   public void setNonNullParameter(PreparedStatement ps, int i, OffsetTime parameter, JdbcType jdbcType)
-          throws SQLException {
+      throws SQLException {
     ps.setObject(i, parameter);
   }
 

File: src/main/java/org/apache/ibatis/type/SimpleTypeRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -50,7 +50,6 @@ private SimpleTypeRegistry() {
 
   /*
    * Tells us if the class passed in is a known common type
-   *
    * @param clazz The class to check
    * @return True if the class is known
    */

File: src/main/java/org/apache/ibatis/type/SqlxmlTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,6 +25,7 @@
  * Convert <code>String</code> to/from <code>SQLXML</code>.
  *
  * @since 3.5.0
+ *
  * @author Iwao AVE!
  */
 public class SqlxmlTypeHandler extends BaseTypeHandler<String> {

File: src/main/java/org/apache/ibatis/type/TypeException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,6 @@ public class TypeException extends PersistenceException {
   private static final long serialVersionUID = 8614420898975117130L;
 
   public TypeException() {
-    super();
   }
 
   public TypeException(String message) {

File: src/main/java/org/apache/ibatis/type/TypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -34,7 +34,9 @@ public interface TypeHandler<T> {
    *          the rs
    * @param columnName
    *          Column name, when configuration <code>useColumnLabel</code> is <code>false</code>
+   *
    * @return the result
+   *
    * @throws SQLException
    *           the SQL exception
    */

File: src/main/java/org/apache/ibatis/annotations/Select.java
Patch:
@@ -26,7 +26,6 @@
  * The annotation that specify an SQL for retrieving record(s).
  * <p>
  * <b>How to use:</b>
- * <p>
  * <ul>
  * <li>Simple:
  *

File: src/main/java/org/apache/ibatis/annotations/SelectKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2023 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -55,7 +55,6 @@
    * Returns property names that holds a key value.
    * <p>
    * If you specify multiple property, please separate using comma(',').
-   * </p>
    *
    * @return property names that separate with comma(',')
    */
@@ -65,7 +64,6 @@
    * Returns column names that retrieves a key value.
    * <p>
    * If you specify multiple column, please separate using comma(',').
-   * </p>
    *
    * @return column names that separate with comma(',')
    */

File: src/main/java/org/apache/ibatis/builder/InitializingObject.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2023 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -28,7 +28,6 @@ public interface InitializingObject {
    * Initialize an instance.
    * <p>
    * This method will be invoked after it has set all properties.
-   * </p>
    *
    * @throws Exception
    *           in the event of misconfiguration (such as failure to set an essential property) or if initialization

File: src/main/java/org/apache/ibatis/executor/statement/StatementUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2023 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -35,7 +35,6 @@ private StatementUtil() {
    * Apply a transaction timeout.
    * <p>
    * Update a query timeout to apply a transaction timeout.
-   * </p>
    *
    * @param statement
    *          a target statement

File: src/main/java/org/apache/ibatis/lang/UsesJava7.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -22,9 +22,7 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>
  * Indicates that the element uses Java 7 API.
- * </p>
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)

File: src/main/java/org/apache/ibatis/lang/UsesJava8.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -22,9 +22,7 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>
  * Indicates that the element uses Java 8 API.
- * </p>
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)

File: src/main/java/org/apache/ibatis/parsing/PropertyParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2023 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,7 +29,6 @@ public class PropertyParser {
    * <p>
    * The default value is {@code false} (indicate disable a default value on placeholder) If you specify the
    * {@code true}, you can specify key and default value on placeholder (e.g. {@code ${db.username:postgres}}).
-   * </p>
    *
    * @since 3.4.2
    */
@@ -39,7 +38,6 @@ public class PropertyParser {
    * The special property key that specify a separator for key and default value on placeholder.
    * <p>
    * The default separator is {@code ":"}.
-   * </p>
    *
    * @since 3.4.2
    */

File: src/main/java/org/apache/ibatis/type/BaseTypeHandler.java
Patch:
@@ -29,7 +29,6 @@
  * Important: Since 3.5.0, This class never call the {@link ResultSet#wasNull()} and {@link CallableStatement#wasNull()}
  * method for handling the SQL {@code NULL} value. In other words, {@code null} value handling should be performed on
  * subclass.
- * </p>
  *
  * @author Clinton Begin
  * @author Simone Tripodi

File: src/main/java/org/apache/ibatis/annotations/Options.java
Patch:
@@ -110,7 +110,6 @@ enum FlushCachePolicy {
    * Returns property names that holds a key value.
    * <p>
    * If you specify multiple property, please separate using comma(',').
-   * </p>
    *
    * @return property names that separate with comma(',')
    */
@@ -120,7 +119,6 @@ enum FlushCachePolicy {
    * Returns column names that retrieves a key value.
    * <p>
    * If you specify multiple column, please separate using comma(',').
-   * </p>
    *
    * @return column names that separate with comma(',')
    */
@@ -130,7 +128,6 @@ enum FlushCachePolicy {
    * Returns result set names.
    * <p>
    * If you specify multiple result set, please separate using comma(',').
-   * </p>
    *
    * @return result set names that separate with comma(',')
    */

File: src/main/java/org/apache/ibatis/annotations/Select.java
Patch:
@@ -26,7 +26,6 @@
  * The annotation that specify an SQL for retrieving record(s).
  * <p>
  * <b>How to use:</b>
- * <p>
  * <ul>
  * <li>Simple:
  *

File: src/main/java/org/apache/ibatis/annotations/SelectKey.java
Patch:
@@ -55,7 +55,6 @@
    * Returns property names that holds a key value.
    * <p>
    * If you specify multiple property, please separate using comma(',').
-   * </p>
    *
    * @return property names that separate with comma(',')
    */
@@ -65,7 +64,6 @@
    * Returns column names that retrieves a key value.
    * <p>
    * If you specify multiple column, please separate using comma(',').
-   * </p>
    *
    * @return column names that separate with comma(',')
    */

File: src/main/java/org/apache/ibatis/builder/InitializingObject.java
Patch:
@@ -28,7 +28,6 @@ public interface InitializingObject {
    * Initialize an instance.
    * <p>
    * This method will be invoked after it has set all properties.
-   * </p>
    *
    * @throws Exception
    *           in the event of misconfiguration (such as failure to set an essential property) or if initialization

File: src/main/java/org/apache/ibatis/executor/statement/StatementUtil.java
Patch:
@@ -35,7 +35,6 @@ private StatementUtil() {
    * Apply a transaction timeout.
    * <p>
    * Update a query timeout to apply a transaction timeout.
-   * </p>
    *
    * @param statement
    *          a target statement

File: src/main/java/org/apache/ibatis/lang/UsesJava7.java
Patch:
@@ -22,9 +22,7 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>
  * Indicates that the element uses Java 7 API.
- * </p>
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)

File: src/main/java/org/apache/ibatis/lang/UsesJava8.java
Patch:
@@ -22,9 +22,7 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>
  * Indicates that the element uses Java 8 API.
- * </p>
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)

File: src/main/java/org/apache/ibatis/parsing/PropertyParser.java
Patch:
@@ -29,7 +29,6 @@ public class PropertyParser {
    * <p>
    * The default value is {@code false} (indicate disable a default value on placeholder) If you specify the
    * {@code true}, you can specify key and default value on placeholder (e.g. {@code ${db.username:postgres}}).
-   * </p>
    *
    * @since 3.4.2
    */
@@ -39,7 +38,6 @@ public class PropertyParser {
    * The special property key that specify a separator for key and default value on placeholder.
    * <p>
    * The default separator is {@code ":"}.
-   * </p>
    *
    * @since 3.4.2
    */

File: src/main/java/org/apache/ibatis/type/BaseTypeHandler.java
Patch:
@@ -29,7 +29,6 @@
  * Important: Since 3.5.0, This class never call the {@link ResultSet#wasNull()} and {@link CallableStatement#wasNull()}
  * method for handling the SQL {@code NULL} value. In other words, {@code null} value handling should be performed on
  * subclass.
- * </p>
  *
  * @author Clinton Begin
  * @author Simone Tripodi

File: src/main/java/org/apache/ibatis/datasource/jndi/JndiDataSourceFactory.java
Patch:
@@ -66,16 +66,15 @@ public DataSource getDataSource() {
   }
 
   private static Properties getEnvProperties(Properties allProps) {
-    final String PREFIX = ENV_PREFIX;
     Properties contextProperties = null;
     for (Entry<Object, Object> entry : allProps.entrySet()) {
       String key = (String) entry.getKey();
       String value = (String) entry.getValue();
-      if (key.startsWith(PREFIX)) {
+      if (key.startsWith(ENV_PREFIX)) {
         if (contextProperties == null) {
           contextProperties = new Properties();
         }
-        contextProperties.put(key.substring(PREFIX.length()), value);
+        contextProperties.put(key.substring(ENV_PREFIX.length()), value);
       }
     }
     return contextProperties;

File: src/test/java/org/apache/ibatis/autoconstructor/ExtensiveSubject.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2023 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -53,6 +53,6 @@ public ExtensiveSubject(final byte aByte, final short aShort, final char aChar,
   }
 
   public enum TestEnum {
-    AVALUE, BVALUE, CVALUE;
+    AVALUE, BVALUE, CVALUE
   }
 }

File: src/main/java/org/apache/ibatis/datasource/jndi/JndiDataSourceFactory.java
Patch:
@@ -66,16 +66,15 @@ public DataSource getDataSource() {
   }
 
   private static Properties getEnvProperties(Properties allProps) {
-    final String PREFIX = ENV_PREFIX;
     Properties contextProperties = null;
     for (Entry<Object, Object> entry : allProps.entrySet()) {
       String key = (String) entry.getKey();
       String value = (String) entry.getValue();
-      if (key.startsWith(PREFIX)) {
+      if (key.startsWith(ENV_PREFIX)) {
         if (contextProperties == null) {
           contextProperties = new Properties();
         }
-        contextProperties.put(key.substring(PREFIX.length()), value);
+        contextProperties.put(key.substring(ENV_PREFIX.length()), value);
       }
     }
     return contextProperties;

File: src/main/java/org/apache/ibatis/scripting/xmltags/XMLScriptBuilder.java
Patch:
@@ -80,6 +80,9 @@ protected MixedSqlNode parseDynamicTags(XNode node) {
       XNode child = node.newXNode(children.item(i));
       if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {
         String data = child.getStringBody("");
+        if (data.trim().isEmpty()) {
+          continue;
+        }
         TextSqlNode textSqlNode = new TextSqlNode(data);
         if (textSqlNode.isDynamic()) {
           contents.add(textSqlNode);

File: src/test/java/org/apache/ibatis/submitted/cursor_simple/CursorSimpleTest.java
Patch:
@@ -31,9 +31,11 @@
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.MethodOrderer;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.TestMethodOrder;
 
+@TestMethodOrder(MethodOrderer.MethodName.class)
 class CursorSimpleTest {
 
   private static SqlSessionFactory sqlSessionFactory;
@@ -130,8 +132,6 @@ void cursorClosedOnSessionClose() {
     Assertions.assertFalse(usersCursor.isConsumed());
   }
 
-  // TODO 12/28/2024 JWL Unstable test
-  @Disabled
   @Test
   void cursorWithRowBound() {
     try (SqlSession sqlSession = sqlSessionFactory.openSession()) {

File: src/test/java/org/apache/ibatis/type/TypeAliasRegistryTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package org.apache.ibatis.type;
 
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNull;
-import static org.junit.jupiter.api.Assertions.assertThatThrownBy;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
 import java.math.BigDecimal;

File: src/main/java/org/apache/ibatis/type/DateOnlyTypeHandler.java
Patch:
@@ -46,7 +46,7 @@ public Date getNullableResult(CallableStatement cs, int columnIndex) throws SQLE
     return toDate(cs.getDate(columnIndex));
   }
 
-  private Date toDate(Date date) {
+  private Date toDate(java.sql.Date date) {
     return date == null ? null : new Date(date.getTime());
   }
 

File: src/test/java/org/apache/ibatis/immutable/ImmutableConstructorTest.java
Patch:
@@ -143,9 +143,9 @@ void shouldSelectBlogWithPostsButNoCommentsOrTags() {
   void shouldFailToSelectBlogWithMissingConstructorForPostComments() {
     try (SqlSession session = sqlSessionFactory.openSession()) {
       ImmutableBlogMapper mapper = session.getMapper(ImmutableBlogMapper.class);
-      assertThatThrownBy(() -> mapper.retrieveAllBlogsWithMissingConstructor()).isInstanceOf(PersistenceException.class)
+      assertThatThrownBy(mapper::retrieveAllBlogsWithMissingConstructor).isInstanceOf(PersistenceException.class)
           .hasCauseInstanceOf(ReflectionException.class).hasMessageContaining(
-              "Error resolving constructor for class org.apache.ibatis.domain.blog.immutable.ImmutablePost with invalid types");
+              "Error instantiating class org.apache.ibatis.domain.blog.immutable.ImmutablePost with invalid types");
     }
   }
 }

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -784,11 +784,10 @@ private boolean applyColumnOrderBasedConstructorAutomapping(ResultSetWrapper rsw
       List<Object> constructorArgs, Constructor<?> constructor, boolean foundValues) throws SQLException {
     Class<?>[] parameterTypes = constructor.getParameterTypes();
 
-    // constructor parameter is allowed to be less than or equal to the number of result set columns, but not greater than
     if (parameterTypes.length > rsw.getClassNames().size()) {
       throw new ExecutorException(MessageFormat.format(
-          "Column order based constructor auto-mapping of ''{0}'' failed. Because result set type is ''{1}''.",
-          constructor, rsw.getClassNames()));
+          "Constructor auto-mapping of ''{0}'' failed. The constructor takes ''{1}'' arguments, but there are only ''{2}'' columns in the result set.",
+          constructor, parameterTypes.length, rsw.getClassNames().size()));
     }
 
     for (int i = 0; i < parameterTypes.length; i++) {

File: src/main/java/org/apache/ibatis/annotations/Select.java
Patch:
@@ -44,7 +44,7 @@
  * public interface UserMapper {
  *   @Select({ "<script>", "select * from users", "where name = #{name}",
  *       "<if test=\"age != null\"> age = #{age} </if>", "</script>" })
- *   User select(@NotNull String name, @Nullable Intger age);
+ *   User select(@NotNull String name, @Nullable Integer age);
  * }
  * }</pre>
  *

File: src/main/java/org/apache/ibatis/builder/annotation/package-info.java
Patch:
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * Parses annotions to create a Configuration.
+ * Parses annotations to create a Configuration.
  */
 package org.apache.ibatis.builder.annotation;

File: src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java
Patch:
@@ -102,7 +102,7 @@ protected String objectValueString(Object value) {
       try {
         return ArrayUtil.toString(((Array) value).getArray());
       } catch (SQLException e) {
-        // Intentialy fall through to return value.toString()
+        // Intentionally fall through to return value.toString()
       }
     }
     return value.toString();

File: src/main/java/org/apache/ibatis/annotations/Select.java
Patch:
@@ -44,7 +44,7 @@
  * public interface UserMapper {
  *   @Select({ "<script>", "select * from users", "where name = #{name}",
  *       "<if test=\"age != null\"> age = #{age} </if>", "</script>" })
- *   User select(@NotNull String name, @Nullable Intger age);
+ *   User select(@NotNull String name, @Nullable Integer age);
  * }
  * }</pre>
  *

File: src/main/java/org/apache/ibatis/builder/annotation/package-info.java
Patch:
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * Parses annotions to create a Configuration.
+ * Parses annotations to create a Configuration.
  */
 package org.apache.ibatis.builder.annotation;

File: src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java
Patch:
@@ -102,7 +102,7 @@ protected String objectValueString(Object value) {
       try {
         return ArrayUtil.toString(((Array) value).getArray());
       } catch (SQLException e) {
-        // Intentialy fall through to return value.toString()
+        // Intentionally fall through to return value.toString()
       }
     }
     return value.toString();

File: src/test/java/org/apache/ibatis/submitted/collection_injection/immutable/ImmutableHouseMapper.java
Patch:
@@ -23,4 +23,5 @@ public interface ImmutableHouseMapper {
 
   ImmutableHouse getHouse(int it);
 
+  HousePortfolio getHousePortfolio(int id);
 }

File: src/test/java/org/apache/ibatis/submitted/collection_in_constructor/Store4.java
Patch:
@@ -24,7 +24,7 @@ public class Store4 {
   private final List<Isle> isles;
 
   // Using different arg order than the <constructor> definition
-  // to ensure the builder is used
+  // to ensure the builder is used, see CollectionInConstructorObjectFactory.create
   Store4(List<Isle> isles, Integer id) {
     super();
     this.isles = isles;

File: src/test/java/org/apache/ibatis/transaction/TransactionBase.java
Patch:
@@ -25,7 +25,7 @@
  * @see Transaction
  */
 @ExtendWith(MockitoExtension.class)
-public abstract class BaseTransactionTest {
+public abstract class TransactionBase {
 
 	public abstract void shouldGetConnection() throws SQLException;
 

File: src/test/java/org/apache/ibatis/transaction/TransactionFactoryBase.java
Patch:
@@ -26,7 +26,7 @@
  * @see TransactionFactory
  */
 @ExtendWith(MockitoExtension.class)
-public abstract class BaseTransactionFactoryTest {
+public abstract class TransactionFactoryBase {
 
 	public abstract void shouldSetProperties() throws Exception;
 

File: src/test/java/org/apache/ibatis/transaction/jdbc/JdbcTransactionFactoryUnitTest.java
Patch:
@@ -18,7 +18,7 @@
 import org.apache.ibatis.session.TransactionIsolationLevel;
 import org.apache.ibatis.transaction.Transaction;
 import org.apache.ibatis.transaction.TransactionFactory;
-import org.apache.ibatis.transaction.BaseTransactionFactoryTest;
+import org.apache.ibatis.transaction.TransactionFactoryBase;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mock;
@@ -36,7 +36,7 @@
  * @author <a href="1181963012mw@gmail.com">mawen12</a>
  * @see JdbcTransactionFactory
  */
-class JdbcTransactionFactoryUnitTest extends BaseTransactionFactoryTest {
+class JdbcTransactionFactoryUnitTest extends TransactionFactoryBase {
 
 	@Mock
 	private Properties properties;

File: src/test/java/org/apache/ibatis/transaction/jdbc/JdbcTransactionWithConnectionTest.java
Patch:
@@ -16,7 +16,7 @@
 package org.apache.ibatis.transaction.jdbc;
 
 import org.apache.ibatis.transaction.Transaction;
-import org.apache.ibatis.transaction.BaseTransactionTest;
+import org.apache.ibatis.transaction.TransactionBase;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mock;
@@ -32,7 +32,7 @@
  * @author <a href="1181963012mw@gmail.com">mawen12</a>
  * @see JdbcTransaction
  */
-class JdbcTransactionWithConnectionTest extends BaseTransactionTest {
+class JdbcTransactionWithConnectionTest extends TransactionBase {
 
 	@Mock
 	private Connection connection;

File: src/test/java/org/apache/ibatis/transaction/jdbc/JdbcTransactionWithDataSourceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.apache.ibatis.session.TransactionIsolationLevel;
 import org.apache.ibatis.transaction.Transaction;
-import org.apache.ibatis.transaction.BaseTransactionTest;
+import org.apache.ibatis.transaction.TransactionBase;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mock;
 
@@ -34,7 +34,7 @@
  * @author <a href="1181963012mw@gmail.com">mawen12</a>
  * @see JdbcTransaction
  */
-class JdbcTransactionWithDataSourceTest extends BaseTransactionTest {
+class JdbcTransactionWithDataSourceTest extends TransactionBase {
 
 	@Mock
 	private DataSource dataSource;

File: src/test/java/org/apache/ibatis/transaction/managed/ManagedTransactionFactoryUnitTest.java
Patch:
@@ -18,7 +18,7 @@
 import org.apache.ibatis.session.TransactionIsolationLevel;
 import org.apache.ibatis.transaction.Transaction;
 import org.apache.ibatis.transaction.TransactionFactory;
-import org.apache.ibatis.transaction.BaseTransactionFactoryTest;
+import org.apache.ibatis.transaction.TransactionFactoryBase;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mock;
@@ -36,7 +36,7 @@
  * @author <a href="1181963012mw@gmail.com">mawen12</a>
  * @see ManagedTransactionFactory
  */
-class ManagedTransactionFactoryUnitTest extends BaseTransactionFactoryTest {
+class ManagedTransactionFactoryUnitTest extends TransactionFactoryBase {
 
 	@Mock
 	private Properties properties;

File: src/test/java/org/apache/ibatis/transaction/managed/ManagedTransactionWithConnectionTest.java
Patch:
@@ -16,7 +16,7 @@
 package org.apache.ibatis.transaction.managed;
 
 import org.apache.ibatis.transaction.Transaction;
-import org.apache.ibatis.transaction.BaseTransactionTest;
+import org.apache.ibatis.transaction.TransactionBase;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mock;
@@ -33,7 +33,7 @@
  * @author <a href="1181963012mw@gmail.com">mawen12</a>
  * @see ManagedTransaction
  */
-class ManagedTransactionWithConnectionTest extends BaseTransactionTest {
+class ManagedTransactionWithConnectionTest extends TransactionBase {
 
 	@Mock
 	private Connection connection;

File: src/test/java/org/apache/ibatis/transaction/managed/ManagedTransactionWithDataSourceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.apache.ibatis.session.TransactionIsolationLevel;
 import org.apache.ibatis.transaction.Transaction;
-import org.apache.ibatis.transaction.BaseTransactionTest;
+import org.apache.ibatis.transaction.TransactionBase;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mock;
@@ -34,7 +34,7 @@
  * @author <a href="1181963012mw@gmail.com">mawen12</a>
  * @see ManagedTransaction
  */
-class ManagedTransactionWithDataSourceTest extends BaseTransactionTest {
+class ManagedTransactionWithDataSourceTest extends TransactionBase {
 
 	@Mock
 	private DataSource dataSource;

File: src/test/java/org/apache/ibatis/scripting/xmltags/ForEachSqlNodeTest.java
Patch:
@@ -69,9 +69,9 @@ public void shouldApply() throws Exception {
 
     List<String> allKeyValues = bindKeyCaptor.getAllValues();
     List<Object> allValValues = bindValueCaptor.getAllValues();
-    assertEquals(Arrays.asList("index", "__frch__index_0", "item", "__frch__item_0",
-      "index", "__frch__index_0", "item", "__frch__item_0",
-      "index", "__frch__index_0", "item", "__frch__item_0"), allKeyValues);
+    assertEquals(Arrays.asList("index", "__frch_index_0", "item", "__frch_item_0",
+      "index", "__frch_index_0", "item", "__frch_item_0",
+      "index", "__frch_index_0", "item", "__frch_item_0"), allKeyValues);
     assertEquals(Arrays.asList(0, 0, "a", "a",
       1, 1, "b", "b",
       2, 2, "c", "c"), allValValues);

File: src/test/java/org/apache/ibatis/scripting/xmltags/IfSqlNodeTest.java
Patch:
@@ -68,6 +68,6 @@ public void shouldAppendNone() {
     boolean result = sqlNode.apply(context);
 
     assertFalse(result);
-    verify(context).appendSql("");
+    verify(context, never()).appendSql(TEXT);
   }
 }

File: src/main/java/org/apache/ibatis/io/VFS.java
Patch:
@@ -36,12 +36,12 @@ public abstract class VFS {
   private static final Log log = LogFactory.getLog(VFS.class);
 
   /** The built-in implementations. */
-  public static final Class<?>[] IMPLEMENTATIONS = { JBoss6VFS.class, DefaultVFS.class };
+  private static final Class<?>[] IMPLEMENTATIONS = { JBoss6VFS.class, DefaultVFS.class };
 
   /**
    * The list to which implementations are added by {@link #addImplClass(Class)}.
    */
-  public static final List<Class<? extends VFS>> USER_IMPLEMENTATIONS = new ArrayList<>();
+  private static final List<Class<? extends VFS>> USER_IMPLEMENTATIONS = new ArrayList<>();
 
   /** Singleton instance holder. */
   private static class VFSHolder {

File: src/main/java/org/apache/ibatis/parsing/XPathParser.java
Patch:
@@ -237,7 +237,7 @@ private Document createDocument(InputSource inputSource) {
       factory.setIgnoringComments(true);
       factory.setIgnoringElementContentWhitespace(false);
       factory.setCoalescing(false);
-      factory.setExpandEntityReferences(true);
+      factory.setExpandEntityReferences(false);
 
       DocumentBuilder builder = factory.newDocumentBuilder();
       builder.setEntityResolver(entityResolver);

File: src/main/java/org/apache/ibatis/io/VFS.java
Patch:
@@ -145,7 +145,7 @@ protected static Method getMethod(Class<?> clazz, String methodName, Class<?>...
       log.error("Security exception looking for method " + clazz.getName() + "." + methodName + ".  Cause: " + e);
       return null;
     } catch (NoSuchMethodException e) {
-      log.error("Method not found " + clazz.getName() + "." + methodName + "." + methodName + ".  Cause: " + e);
+      log.error("Method not found " + clazz.getName() + "." + methodName + ".  Cause: " + e);
       return null;
     }
   }

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2023 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -267,7 +267,6 @@ private void settingsElement(Properties props) {
     configuration.setProxyFactory((ProxyFactory) createInstance(props.getProperty("proxyFactory")));
     configuration.setLazyLoadingEnabled(booleanValueOf(props.getProperty("lazyLoadingEnabled"), false));
     configuration.setAggressiveLazyLoading(booleanValueOf(props.getProperty("aggressiveLazyLoading"), false));
-    configuration.setMultipleResultSetsEnabled(booleanValueOf(props.getProperty("multipleResultSetsEnabled"), true));
     configuration.setUseColumnLabel(booleanValueOf(props.getProperty("useColumnLabel"), true));
     configuration.setUseGeneratedKeys(booleanValueOf(props.getProperty("useGeneratedKeys"), false));
     configuration.setDefaultExecutorType(ExecutorType.valueOf(props.getProperty("defaultExecutorType", "SIMPLE")));

File: src/test/java/org/apache/ibatis/builder/XmlConfigBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2023 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -86,7 +86,6 @@ void shouldSuccessfullyLoadMinimalXMLConfigFile() throws Exception {
       assertThat(config.getProxyFactory()).isInstanceOf(JavassistProxyFactory.class);
       assertThat(config.isLazyLoadingEnabled()).isFalse();
       assertThat(config.isAggressiveLazyLoading()).isFalse();
-      assertThat(config.isMultipleResultSetsEnabled()).isTrue();
       assertThat(config.isUseColumnLabel()).isTrue();
       assertThat(config.isUseGeneratedKeys()).isFalse();
       assertThat(config.getDefaultExecutorType()).isEqualTo(ExecutorType.SIMPLE);
@@ -193,7 +192,6 @@ void shouldSuccessfullyLoadXMLConfigFile() throws Exception {
       assertThat(config.getProxyFactory()).isInstanceOf(CglibProxyFactory.class);
       assertThat(config.isLazyLoadingEnabled()).isTrue();
       assertThat(config.isAggressiveLazyLoading()).isTrue();
-      assertThat(config.isMultipleResultSetsEnabled()).isFalse();
       assertThat(config.isUseColumnLabel()).isFalse();
       assertThat(config.isUseGeneratedKeys()).isTrue();
       assertThat(config.getDefaultExecutorType()).isEqualTo(ExecutorType.BATCH);

File: src/test/java/org/apache/ibatis/builder/xsd/XmlConfigBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2023 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -75,7 +75,6 @@ void shouldSuccessfullyLoadMinimalXMLConfigFile() throws Exception {
       assertTrue(config.getProxyFactory() instanceof JavassistProxyFactory);
       assertFalse(config.isLazyLoadingEnabled());
       assertFalse(config.isAggressiveLazyLoading());
-      assertTrue(config.isMultipleResultSetsEnabled());
       assertTrue(config.isUseColumnLabel());
       assertFalse(config.isUseGeneratedKeys());
       assertEquals(ExecutorType.SIMPLE, config.getDefaultExecutorType());
@@ -114,7 +113,6 @@ void shouldSuccessfullyLoadXMLConfigFile() throws Exception {
       assertTrue(config.getProxyFactory() instanceof CglibProxyFactory);
       assertTrue(config.isLazyLoadingEnabled());
       assertTrue(config.isAggressiveLazyLoading());
-      assertFalse(config.isMultipleResultSetsEnabled());
       assertFalse(config.isUseColumnLabel());
       assertTrue(config.isUseGeneratedKeys());
       assertEquals(ExecutorType.BATCH, config.getDefaultExecutorType());

File: src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2023 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -62,7 +62,6 @@ static void setup() throws Exception {
     config = new Configuration();
     config.setLazyLoadingEnabled(true);
     config.setUseGeneratedKeys(false);
-    config.setMultipleResultSetsEnabled(true);
     config.setUseColumnLabel(true);
     config.setDefaultStatementTimeout(5000);
     config.setDefaultFetchSize(100);

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSession.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2023 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2023 the original author or authors.
+ *    Copyright 2009-2024 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -206,7 +206,8 @@ private static Type scanSuperTypes(TypeVariable<?> typeVar, Type srcType, Class<
       if (declaringClass == parentAsClass) {
         for (int i = 0; i < parentTypeVars.length; i++) {
           if (typeVar.equals(parentTypeVars[i])) {
-            return parentAsType.getActualTypeArguments()[i];
+            Type actualType = parentAsType.getActualTypeArguments()[i];
+            return actualType instanceof TypeVariable<?> ? Object.class : actualType;
           }
         }
       }

File: src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java
Patch:
@@ -206,6 +206,9 @@ private static Type scanSuperTypes(TypeVariable<?> typeVar, Type srcType, Class<
       if (declaringClass == parentAsClass) {
         for (int i = 0; i < parentTypeVars.length; i++) {
           if (typeVar.equals(parentTypeVars[i])) {
+            if (parentAsType.getActualTypeArguments()[i] instanceof TypeVariable<?>) {
+              return Object.class;
+            }
             return parentAsType.getActualTypeArguments()[i];
           }
         }

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -782,8 +782,9 @@ private Object applyConstructorAutomapping(ResultSetWrapper rsw, ResultMap resul
 
   private boolean applyColumnOrderBasedConstructorAutomapping(ResultSetWrapper rsw, List<Class<?>> constructorArgTypes,
       List<Object> constructorArgs, Constructor<?> constructor, boolean foundValues) throws SQLException {
-    for (int i = 0; i < constructor.getParameterTypes().length; i++) {
-      Class<?> parameterType = constructor.getParameterTypes()[i];
+    Class<?>[] parameterTypes = constructor.getParameterTypes();
+    for (int i = 0; i < parameterTypes.length; i++) {
+      Class<?> parameterType = parameterTypes[i];
       String columnName = rsw.getColumnNames().get(i);
       TypeHandler<?> typeHandler = rsw.getTypeHandler(parameterType, columnName);
       Object value = typeHandler.getResult(rsw.getResultSet(), columnName);

File: src/test/java/org/apache/ibatis/submitted/localtime/LocalTimeTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.io.Reader;
 import java.time.LocalTime;
+import java.util.TimeZone;
 
 import org.apache.ibatis.BaseDataTest;
 import org.apache.ibatis.io.Resources;
@@ -52,6 +53,7 @@ void shouldSelectLocalTimeWithNanoseconds() {
 
   @Test
   void shouldInsertLocalTimeWithNanoseconds() {
+    TimeZone.setDefault(TimeZone.getTimeZone("GMT"));
     LocalTime t = LocalTime.of(11, 22, 33, 123456789);
     try (SqlSession sqlSession = sqlSessionFactory.openSession()) {
       Mapper mapper = sqlSession.getMapper(Mapper.class);

File: src/test/java/org/apache/ibatis/submitted/timestamp_with_timezone/TimestampWithTimezoneTypeHandlerTest.java
Patch:
@@ -52,8 +52,7 @@ void shouldSelectOffsetDateTime() {
       Record record = mapper.selectById(1);
       assertEquals(OffsetDateTime.of(2018, 1, 2, 11, 22, 33, 123456000, ZoneOffset.ofHoursMinutes(1, 23)),
           record.getOdt());
-      // HSQLDB 2.4.1 truncates nano seconds.
-      assertEquals(OffsetTime.of(11, 22, 33, 0, ZoneOffset.ofHoursMinutes(1, 23)), record.getOt());
+      assertEquals(OffsetTime.of(11, 22, 33, 123456000, ZoneOffset.ofHoursMinutes(1, 23)), record.getOt());
     }
   }
 

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -245,7 +245,7 @@ private ResultSetWrapper getFirstResultSet(Statement stmt) throws SQLException {
     ResultSet rs = stmt.getResultSet();
     while (rs == null) {
       // move forward to get the first resultset in case the driver
-      // doesn't return the resultset as the first result (HSQLDB 2.1)
+      // doesn't return the resultset as the first result (HSQLDB)
       if (stmt.getMoreResults()) {
         rs = stmt.getResultSet();
       } else if (stmt.getUpdateCount() == -1) {
@@ -261,7 +261,7 @@ private ResultSetWrapper getNextResultSet(Statement stmt) {
     try {
       if (stmt.getConnection().getMetaData().supportsMultipleResultSets()) {
         // Crazy Standard JDBC way of determining if there are more results
-        // DO NOT try to 'imporove' the condition even if IDE tells you to!
+        // DO NOT try to 'improve' the condition even if IDE tells you to!
         // It's important that getUpdateCount() is called here.
         if (!(!stmt.getMoreResults() && stmt.getUpdateCount() == -1)) {
           ResultSet rs = stmt.getResultSet();

File: src/test/java/org/apache/ibatis/io/ResolverUtilTest.java
Patch:
@@ -69,7 +69,7 @@ void setClassLoader() {
   @Test
   void findImplementationsWithNullPackageName() {
     ResolverUtil<VFS> resolverUtil = new ResolverUtil<>();
-    resolverUtil.findImplementations(VFS.class, null);
+    resolverUtil.findImplementations(VFS.class, (String[]) null);
     assertEquals(resolverUtil.getClasses().size(), 0);
   }
 
@@ -88,7 +88,7 @@ void findImplementations() {
   @Test
   void findAnnotatedWithNullPackageName() {
     ResolverUtil<Object> resolverUtil = new ResolverUtil<>();
-    resolverUtil.findAnnotated(CacheNamespace.class, null);
+    resolverUtil.findAnnotated(CacheNamespace.class, (String[]) null);
     assertEquals(resolverUtil.getClasses().size(), 0);
   }
 

File: src/test/java/org/apache/ibatis/submitted/timestamp_with_timezone/TimestampWithTimezoneTypeHandlerTest.java
Patch:
@@ -76,7 +76,7 @@ void shouldInsertOffsetDateTime() {
     }
   }
 
-  @Disabled("HSQLDB 2.4.1 does not support this.")
+  @Disabled("HSQLDB does not support this.")
   @Test
   void shouldInsertOffsetTime() {
     OffsetTime ot = OffsetTime.of(11, 22, 33, 123456000, ZoneOffset.ofHoursMinutes(1, 23));

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -261,7 +261,7 @@ private ResultSetWrapper getNextResultSet(Statement stmt) {
     try {
       if (stmt.getConnection().getMetaData().supportsMultipleResultSets()) {
         // Crazy Standard JDBC way of determining if there are more results
-        // DO NOT try to 'imporove' the condition even if IDE tells you to!
+        // DO NOT try to 'improve' the condition even if IDE tells you to!
         // It's important that getUpdateCount() is called here.
         if (!(!stmt.getMoreResults() && stmt.getUpdateCount() == -1)) {
           ResultSet rs = stmt.getResultSet();

File: src/test/java/org/apache/ibatis/io/ResolverUtilTest.java
Patch:
@@ -69,7 +69,7 @@ void setClassLoader() {
   @Test
   void findImplementationsWithNullPackageName() {
     ResolverUtil<VFS> resolverUtil = new ResolverUtil<>();
-    resolverUtil.findImplementations(VFS.class, null);
+    resolverUtil.findImplementations(VFS.class, (String[]) null);
     assertEquals(resolverUtil.getClasses().size(), 0);
   }
 
@@ -88,7 +88,7 @@ void findImplementations() {
   @Test
   void findAnnotatedWithNullPackageName() {
     ResolverUtil<Object> resolverUtil = new ResolverUtil<>();
-    resolverUtil.findAnnotated(CacheNamespace.class, null);
+    resolverUtil.findAnnotated(CacheNamespace.class, (String[]) null);
     assertEquals(resolverUtil.getClasses().size(), 0);
   }
 

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -480,7 +480,7 @@ private boolean shouldApplyAutomaticMappings(ResultMap resultMap, boolean isNest
 
   private boolean applyPropertyMappings(ResultSetWrapper rsw, ResultMap resultMap, MetaObject metaObject,
       ResultLoaderMap lazyLoader, String columnPrefix) throws SQLException {
-    final List<String> mappedColumnNames = rsw.getMappedColumnNames(resultMap, columnPrefix);
+    final Set<String> mappedColumnNames = rsw.getMappedColumnNames(resultMap, columnPrefix);
     boolean foundValues = false;
     final List<ResultMapping> propertyMappings = resultMap.getPropertyResultMappings();
     for (ResultMapping propertyMapping : propertyMappings) {
@@ -1174,7 +1174,7 @@ private void createRowKeyForMappedProperties(ResultMap resultMap, ResultSetWrapp
       if (resultMapping.isSimple()) {
         final String column = prependPrefix(resultMapping.getColumn(), columnPrefix);
         final TypeHandler<?> th = resultMapping.getTypeHandler();
-        List<String> mappedColumnNames = rsw.getMappedColumnNames(resultMap, columnPrefix);
+        Set<String> mappedColumnNames = rsw.getMappedColumnNames(resultMap, columnPrefix);
         // Issue #114
         if (column != null && mappedColumnNames.contains(column.toUpperCase(Locale.ENGLISH))) {
           final Object value = th.getResult(rsw.getResultSet(), column);

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -480,7 +480,7 @@ private boolean shouldApplyAutomaticMappings(ResultMap resultMap, boolean isNest
 
   private boolean applyPropertyMappings(ResultSetWrapper rsw, ResultMap resultMap, MetaObject metaObject,
       ResultLoaderMap lazyLoader, String columnPrefix) throws SQLException {
-    final List<String> mappedColumnNames = rsw.getMappedColumnNames(resultMap, columnPrefix);
+    final Set<String> mappedColumnNames = rsw.getMappedColumnNames(resultMap, columnPrefix);
     boolean foundValues = false;
     final List<ResultMapping> propertyMappings = resultMap.getPropertyResultMappings();
     for (ResultMapping propertyMapping : propertyMappings) {
@@ -1174,7 +1174,7 @@ private void createRowKeyForMappedProperties(ResultMap resultMap, ResultSetWrapp
       if (resultMapping.isSimple()) {
         final String column = prependPrefix(resultMapping.getColumn(), columnPrefix);
         final TypeHandler<?> th = resultMapping.getTypeHandler();
-        List<String> mappedColumnNames = rsw.getMappedColumnNames(resultMap, columnPrefix);
+        Set<String> mappedColumnNames = rsw.getMappedColumnNames(resultMap, columnPrefix);
         // Issue #114
         if (column != null && mappedColumnNames.contains(column.toUpperCase(Locale.ENGLISH))) {
           final Object value = th.getResult(rsw.getResultSet(), column);

File: src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java
Patch:
@@ -248,7 +248,7 @@ private void executeStatement(String command) throws SQLException {
       }
       try {
         boolean hasResults = statement.execute(sql);
-        // DO NOT try to 'imporove' the condition even if IDE tells you to!
+        // DO NOT try to 'improve' the condition even if IDE tells you to!
         // It's important that getUpdateCount() is called here.
         while (!(!hasResults && statement.getUpdateCount() == -1)) {
           checkWarnings(statement);

File: src/main/java/org/apache/ibatis/cache/decorators/LruCache.java
Patch:
@@ -75,6 +75,7 @@ public Object getObject(Object key) {
 
   @Override
   public Object removeObject(Object key) {
+    keyMap.remove(key);
     return delegate.removeObject(key);
   }
 

File: src/main/java/org/apache/ibatis/cache/decorators/LruCache.java
Patch:
@@ -75,6 +75,7 @@ public Object getObject(Object key) {
 
   @Override
   public Object removeObject(Object key) {
+    keyMap.remove(key);
     return delegate.removeObject(key);
   }
 

File: src/test/java/org/apache/ibatis/scripting/defaults/DefaultParameterHandlerTest.java
Patch:
@@ -19,9 +19,9 @@
 import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 import java.sql.PreparedStatement;
 import java.sql.SQLException;

File: src/main/java/org/apache/ibatis/builder/annotation/package-info.java
Patch:
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * Parses annotions to create a Configuration.
+ * Parses annotations to create a Configuration.
  */
 package org.apache.ibatis.builder.annotation;

File: src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java
Patch:
@@ -248,7 +248,7 @@ private void executeStatement(String command) throws SQLException {
       }
       try {
         boolean hasResults = statement.execute(sql);
-        // DO NOT try to 'imporove' the condition even if IDE tells you to!
+        // DO NOT try to 'improve' the condition even if IDE tells you to!
         // It's important that getUpdateCount() is called here.
         while (!(!hasResults && statement.getUpdateCount() == -1)) {
           checkWarnings(statement);

File: src/test/java/org/apache/ibatis/binding/BindingTest.java
Patch:
@@ -626,7 +626,7 @@ void shouldCacheMapperMethod() throws Exception {
   void shouldGetBlogsWithAuthorsAndPosts() {
     try (SqlSession session = sqlSessionFactory.openSession()) {
       BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
-      List<Blog> blogs = mapper.selectBlogsWithAutorAndPosts();
+      List<Blog> blogs = mapper.selectBlogsWithAuthorAndPosts();
       assertEquals(2, blogs.size());
       assertTrue(blogs.get(0) instanceof Proxy);
       assertEquals(101, blogs.get(0).getAuthor().getId());
@@ -643,7 +643,7 @@ void shouldGetBlogsWithAuthorsAndPosts() {
   void shouldGetBlogsWithAuthorsAndPostsEagerly() {
     try (SqlSession session = sqlSessionFactory.openSession()) {
       BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
-      List<Blog> blogs = mapper.selectBlogsWithAutorAndPostsEagerly();
+      List<Blog> blogs = mapper.selectBlogsWithAuthorAndPostsEagerly();
       assertEquals(2, blogs.size());
       assertFalse(blogs.get(0) instanceof Factory);
       assertEquals(101, blogs.get(0).getAuthor().getId());

File: src/test/java/org/apache/ibatis/binding/BoundBlogMapper.java
Patch:
@@ -253,7 +253,7 @@ Blog selectBlogWithAParamNamedValue(@Param("column") String column, @Param("id")
       @Result(property = "posts", column = "id", many = @Many(select = "selectPostsById"))
   })
   // @formatter:on
-  List<Blog> selectBlogsWithAutorAndPosts();
+  List<Blog> selectBlogsWithAuthorAndPosts();
 
   // @formatter:off
   @Select({
@@ -265,6 +265,6 @@ Blog selectBlogWithAParamNamedValue(@Param("column") String column, @Param("id")
       @Result(property = "posts", column = "id", many = @Many(select = "selectPostsById", fetchType = FetchType.EAGER))
   })
   // @formatter:on
-  List<Blog> selectBlogsWithAutorAndPostsEagerly();
+  List<Blog> selectBlogsWithAuthorAndPostsEagerly();
 
 }

File: src/test/java/org/apache/ibatis/executor/loader/CglibProxyTest.java
Patch:
@@ -71,7 +71,7 @@ void shouldLetCallALoadedProperty() {
   }
 
   @Test
-  void shouldSerizalizeADeserlizaliedProxy() throws Exception {
+  void shouldSerializeADeserializedProxy() throws Exception {
     Object proxy = ((CglibProxyFactory) proxyFactory).createDeserializationProxy(author, new HashMap<>(),
         new DefaultObjectFactory(), new ArrayList<>(), new ArrayList<>());
     Author author2 = (Author) deserialize(serialize((Serializable) proxy));

File: src/test/java/org/apache/ibatis/executor/loader/JavassistProxyTest.java
Patch:
@@ -69,7 +69,7 @@ void shouldLetCallALoadedProperty() {
   }
 
   @Test
-  void shouldSerizalizeADeserlizaliedProxy() throws Exception {
+  void shouldSerializeADeserializedProxy() throws Exception {
     Object proxy = ((JavassistProxyFactory) proxyFactory).createDeserializationProxy(author, new HashMap<>(),
         new DefaultObjectFactory(), new ArrayList<>(), new ArrayList<>());
     Author author2 = (Author) deserialize(serialize((Serializable) proxy));

File: src/test/java/org/apache/ibatis/executor/loader/SerializableProxyTest.java
Patch:
@@ -110,7 +110,7 @@ void shouldSerializeAProxyForABeanWithoutDefaultConstructorAndUnloadedProperties
   }
 
   @Test
-  void shouldSerizaliceAFullLoadedObjectToOriginalClass() throws Exception {
+  void shouldSerializeAFullLoadedObjectToOriginalClass() throws Exception {
     Object proxy = proxyFactory.createProxy(author, new ResultLoaderMap(), new Configuration(),
         new DefaultObjectFactory(), new ArrayList<>(), new ArrayList<>());
     Object proxy2 = deserialize(serialize((Serializable) proxy));

File: src/test/java/org/apache/ibatis/io/ExternalResourcesTest.java
Patch:
@@ -91,7 +91,7 @@ void testGetConfiguredTemplate() {
       templateName = ExternalResources.getConfiguredTemplate(tempFile.getAbsolutePath(), "new_command.template");
       assertEquals("templates/col_new_template_migration.sql", templateName);
     } catch (Exception e) {
-      fail("Test failed with execption: " + e.getMessage());
+      fail("Test failed with exception: " + e.getMessage());
     }
   }
 

File: src/test/java/org/apache/ibatis/jdbc/ScriptRunnerTest.java
Patch:
@@ -115,7 +115,7 @@ void shouldReturnWarningIfEndOfLineTerminatorNotFound() throws Exception {
   }
 
   @Test
-  void commentAferStatementDelimiterShouldNotCauseRunnerFail() throws Exception {
+  void commentAfterStatementDelimiterShouldNotCauseRunnerFail() throws Exception {
     DataSource ds = createUnpooledDataSource(JPETSTORE_PROPERTIES);
     String resource = "org/apache/ibatis/jdbc/ScriptCommentAfterEOLTerminator.sql";
     try (Connection conn = ds.getConnection(); Reader reader = Resources.getResourceAsReader(resource)) {
@@ -185,7 +185,7 @@ void testLogging() throws Exception {
   }
 
   @Test
-  void testLoggingFullScipt() throws Exception {
+  void testLoggingFullScript() throws Exception {
     DataSource ds = createUnpooledDataSource(JPETSTORE_PROPERTIES);
     try (Connection conn = ds.getConnection()) {
       ScriptRunner runner = new ScriptRunner(conn);

File: src/test/java/org/apache/ibatis/mapping/ResultMappingTest.java
Patch:
@@ -38,7 +38,7 @@ void shouldThrowErrorWhenBothResultMapAndNestedSelectAreSet() {
 
   // Issue 4: column is mandatory on nested queries
   @Test
-  void shouldFailWithAMissingColumnInNetstedSelect() {
+  void shouldFailWithAMissingColumnInNestedSelect() {
     Assertions.assertThrows(IllegalStateException.class,
         () -> new ResultMapping.Builder(configuration, "prop").nestedQueryId("nested query ID").build());
   }

File: src/test/java/org/apache/ibatis/submitted/automapping/AutomappingTest.java
Patch:
@@ -55,7 +55,7 @@ void shouldGetAUser() {
   }
 
   @Test
-  void shouldGetAUserWhithPhoneNumber() {
+  void shouldGetAUserWithPhoneNumber() {
     sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.NONE);
     try (SqlSession sqlSession = sqlSessionFactory.openSession()) {
       Mapper mapper = sqlSession.getMapper(Mapper.class);

File: src/test/java/org/apache/ibatis/submitted/force_flush_on_select/ForceFlushOnSelectTest.java
Patch:
@@ -118,7 +118,7 @@ void testUpdateShouldFlushLocalCache() {
   }
 
   @Test
-  void testSelectShouldFlushLocalCacheIfFlushLocalCacheAtferEachStatementIsTrue() throws SQLException {
+  void testSelectShouldFlushLocalCacheIfFlushLocalCacheAfterEachStatementIsTrue() throws SQLException {
     sqlSessionFactory.getConfiguration().setLocalCacheScope(LocalCacheScope.STATEMENT);
     try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.SIMPLE)) {
       PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);

File: src/test/java/org/apache/ibatis/submitted/lazy_properties/LazyPropertiesTest.java
Patch:
@@ -155,16 +155,16 @@ void verifyCustomLazyLoadTriggerMethods() {
 
   @Test
   void shouldInvokingSetterInvalidateLazyLoading_Javassist() {
-    shoulInvokingSetterInvalidateLazyLoading(new JavassistProxyFactory());
+    shouldInvokingSetterInvalidateLazyLoading(new JavassistProxyFactory());
   }
 
   @Tag("RequireIllegalAccess")
   @Test
   void shouldInvokingSetterInvalidateLazyLoading_Cglib() {
-    shoulInvokingSetterInvalidateLazyLoading(new CglibProxyFactory());
+    shouldInvokingSetterInvalidateLazyLoading(new CglibProxyFactory());
   }
 
-  private void shoulInvokingSetterInvalidateLazyLoading(ProxyFactory proxyFactory) {
+  private void shouldInvokingSetterInvalidateLazyLoading(ProxyFactory proxyFactory) {
     Configuration config = sqlSessionFactory.getConfiguration();
     config.setProxyFactory(proxyFactory);
     config.setAggressiveLazyLoading(false);

File: src/test/java/org/apache/ibatis/submitted/result_handler/ResultHandlerTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
-class ResulthandlerTest {
+class ResultHandlerTest {
 
   private static SqlSessionFactory sqlSessionFactory;
 

File: src/test/java/org/apache/ibatis/type/SqlTimestampTypeHandlerTest.java
Patch:
@@ -25,7 +25,7 @@
 
 import org.junit.jupiter.api.Test;
 
-class SqlTimetampTypeHandlerTest extends BaseTypeHandlerTest {
+class SqlTimestampTypeHandlerTest extends BaseTypeHandlerTest {
 
   private static final TypeHandler<Timestamp> TYPE_HANDLER = new SqlTimestampTypeHandler();
   private static final java.sql.Timestamp SQL_TIME = new java.sql.Timestamp(new Date().getTime());

File: src/main/java/org/apache/ibatis/binding/MapperRegistry.java
Patch:
@@ -17,9 +17,9 @@
 
 import java.util.Collection;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.ibatis.builder.annotation.MapperAnnotationBuilder;
 import org.apache.ibatis.io.ResolverUtil;
@@ -34,7 +34,7 @@
 public class MapperRegistry {
 
   private final Configuration config;
-  private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
+  private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new ConcurrentHashMap<>();
 
   public MapperRegistry(Configuration config) {
     this.config = config;

File: src/main/java/org/apache/ibatis/binding/MapperRegistry.java
Patch:
@@ -17,9 +17,9 @@
 
 import java.util.Collection;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.ibatis.builder.annotation.MapperAnnotationBuilder;
 import org.apache.ibatis.io.ResolverUtil;
@@ -34,7 +34,7 @@
 public class MapperRegistry {
 
   private final Configuration config;
-  private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
+  private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new ConcurrentHashMap<>();
 
   public MapperRegistry(Configuration config) {
     this.config = config;

File: src/main/java/org/apache/ibatis/mapping/ResultMap.java
Patch:
@@ -128,8 +128,8 @@ public ResultMap build() {
         final List<String> actualArgNames = argNamesOfMatchingConstructor(constructorArgNames);
         if (actualArgNames == null) {
           throw new BuilderException("Error in result map '" + resultMap.id + "'. Failed to find a constructor in '"
-              + resultMap.getType().getName() + "' by arg names " + constructorArgNames
-              + ". There might be more info in debug log.");
+              + resultMap.getType().getName() + "' with arg names " + constructorArgNames
+              + ". Note that 'javaType' is required when there is no writable property with the same name ('name' is optional, BTW). There might be more info in debug log.");
         }
         resultMap.constructorResultMappings.sort((o1, o2) -> {
           int paramIdx1 = actualArgNames.indexOf(o1.getProperty());

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -437,7 +437,7 @@ private Class<?> resolveResultJavaType(Class<?> resultType, String property, Cla
     if (javaType == null && property != null) {
       try {
         MetaClass metaResultType = MetaClass.forClass(resultType, configuration.getReflectorFactory());
-        javaType = metaResultType.getGetterType(property);
+        javaType = metaResultType.getSetterType(property);
       } catch (Exception e) {
         // ignore, following null check statement will deal with the situation
       }

File: src/main/java/org/apache/ibatis/mapping/ResultMap.java
Patch:
@@ -128,8 +128,8 @@ public ResultMap build() {
         final List<String> actualArgNames = argNamesOfMatchingConstructor(constructorArgNames);
         if (actualArgNames == null) {
           throw new BuilderException("Error in result map '" + resultMap.id + "'. Failed to find a constructor in '"
-              + resultMap.getType().getName() + "' with arg names " + constructorArgNames
-              + ". Note that 'javaType' is required when there is no readable property with the same name ('name' is optional, BTW). There might be more info in debug log.");
+              + resultMap.getType().getName() + "' by arg names " + constructorArgNames
+              + ". There might be more info in debug log.");
         }
         resultMap.constructorResultMappings.sort((o1, o2) -> {
           int paramIdx1 = actualArgNames.indexOf(o1.getProperty());

File: src/main/java/org/apache/ibatis/annotations/SelectProvider.java
Patch:
@@ -72,14 +72,14 @@
    */
   Class<?> type() default void.class;
 
+  // @formatter:off
   /**
    * Specify a method for providing an SQL.
    * <p>
    * Since 3.5.1, this attribute can omit.
    * <p>
    * If this attribute omit, the MyBatis will call a method that decide by following rules.
    *
-   * <pre>
    * <ul>
    *   <li>
    *     If class that specified the {@link #type()} attribute implements the
@@ -93,10 +93,10 @@
    *     specified type.
    *   </li>
    * </ul>
-   * </pre>
    *
    * @return a method name of method for providing an SQL
    */
+  // @formatter:on
   String method() default "";
 
   /**

File: src/main/java/org/apache/ibatis/annotations/UpdateProvider.java
Patch:
@@ -73,13 +73,13 @@
    */
   Class<?> type() default void.class;
 
+  // @formatter:off
   /**
    * Specify a method for providing an SQL.
    * <p>
    * Since 3.5.1, this attribute can omit. If this attribute omit, the MyBatis will call a method that decide by
    * following rules.
    *
-   * <pre>
    * <ul>
    *   <li>
    *     If class that specified the {@link #type()} attribute implements the
@@ -92,10 +92,10 @@
    *     the MyBatis will search and use a fallback method that named <code>provideSql</code> from specified type
    *   </li>
    * </ul>
-   * </pre>
    *
    * @return a method name of method for providing an SQL
    */
+  // @formatter:on
   String method() default "";
 
   /**

File: src/main/java/org/apache/ibatis/cache/decorators/LruCache.java
Patch:
@@ -47,7 +47,7 @@ public int getSize() {
   }
 
   public void setSize(final int size) {
-    keyMap = new LinkedHashMap<>(size, .75F, true) {
+    keyMap = new LinkedHashMap<Object, Object>(size, .75F, true) {
       private static final long serialVersionUID = 4267176411845948333L;
 
       @Override

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java
Patch:
@@ -29,7 +29,7 @@
 class PooledConnection implements InvocationHandler {
 
   private static final String CLOSE = "close";
-  private static final Class<?>[] IFACES = new Class<?>[] { Connection.class };
+  private static final Class<?>[] IFACES = { Connection.class };
 
   private final int hashCode;
   private final PooledDataSource dataSource;

File: src/main/java/org/apache/ibatis/executor/loader/AbstractSerialStateHolder.java
Patch:
@@ -42,7 +42,7 @@ public abstract class AbstractSerialStateHolder implements Externalizable {
 
   private static final long serialVersionUID = 8940388717901644661L;
   private static final ThreadLocal<ObjectOutputStream> stream = new ThreadLocal<>();
-  private byte[] userBeanBytes = new byte[0];
+  private byte[] userBeanBytes = {};
   private Object userBean;
   private Map<String, ResultLoaderMap.LoadPair> unloadedProperties;
   private ObjectFactory objectFactory;

File: src/main/java/org/apache/ibatis/reflection/wrapper/BaseWrapper.java
Patch:
@@ -27,7 +27,7 @@
  */
 public abstract class BaseWrapper implements ObjectWrapper {
 
-  protected static final Object[] NO_ARGUMENTS = new Object[0];
+  protected static final Object[] NO_ARGUMENTS = {};
   protected final MetaObject metaObject;
 
   protected BaseWrapper(MetaObject metaObject) {

File: src/main/java/org/apache/ibatis/io/Resources.java
Patch:
@@ -39,7 +39,7 @@ public class Resources {
    */
   private static Charset charset;
 
-  Resources() {
+  private Resources() {
   }
 
   /**

File: src/main/java/org/apache/ibatis/io/VFS.java
Patch:
@@ -76,6 +76,9 @@ static VFS createVFS() {
 
       return vfs;
     }
+
+    private VFSHolder() {
+    }
   }
 
   /**

File: src/main/java/org/apache/ibatis/reflection/ArrayUtil.java
Patch:
@@ -152,4 +152,7 @@ public static String toString(Object obj) {
     }
   }
 
+  private ArrayUtil() {
+  }
+
 }

File: src/test/java/org/apache/ibatis/builder/XmlConfigBuilderTest.java
Patch:
@@ -339,6 +339,9 @@ static class MySqlProvider {
     public static String provideSql() {
       return "SELECT 1";
     }
+
+    private MySqlProvider() {
+    }
   }
 
   @Test

File: src/test/java/org/apache/ibatis/databases/blog/StoredProcedures.java
Patch:
@@ -56,4 +56,7 @@ public static void selectAuthorViaOutParams(int id, String[] username, String[]
       bio[0] = rs.getString("bio");
     }
   }
+
+  private StoredProcedures() {
+  }
 }

File: src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java
Patch:
@@ -682,4 +682,7 @@ static MappedStatement prepareInsertAuthorMappedStatementWithBeforeAutoKey(final
             }).build()).cache(authorCache).keyGenerator(new SelectKeyGenerator(kms, true)).keyProperty("id").build();
   }
 
+  private ExecutorTestHelper() {
+  }
+
 }

File: src/test/java/org/apache/ibatis/reflection/ArrayUtilTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -21,7 +21,7 @@
 
 import org.junit.jupiter.api.Test;
 
-class ArrayUtilTest extends ArrayUtil {
+class ArrayUtilTest {
 
   @Test
   void testHashCode() {

File: src/test/java/org/apache/ibatis/submitted/dynsql/CustomUtil.java
Patch:
@@ -19,4 +19,7 @@ public class CustomUtil {
   public static String esc(final String s) {
     return s.replace("'", "''");
   }
+
+  private CustomUtil() {
+  }
 }

File: src/main/java/org/apache/ibatis/builder/CacheRefResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -32,4 +32,4 @@ public CacheRefResolver(MapperBuilderAssistant assistant, String cacheRefNamespa
   public Cache resolveCacheRef() {
     return assistant.useCacheRef(cacheRefNamespace);
   }
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/builder/annotation/MethodResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -33,4 +33,4 @@ public void resolve() {
     annotationBuilder.parseStatement(method);
   }
 
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/reflection/ReflectorFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -22,4 +22,4 @@ public interface ReflectorFactory {
   void setClassCacheEnabled(boolean classCacheEnabled);
 
   Reflector findForClass(Class<?> type);
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/scripting/xmltags/StaticTextSqlNode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -31,4 +31,4 @@ public boolean apply(DynamicContext context) {
     return true;
   }
 
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/type/BlobTypeHandler.java
Patch:
@@ -63,4 +63,4 @@ public byte[] getNullableResult(CallableStatement cs, int columnIndex) throws SQ
     }
     return returnValue;
   }
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/type/EnumTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -60,4 +60,4 @@ public E getNullableResult(CallableStatement cs, int columnIndex) throws SQLExce
     String s = cs.getString(columnIndex);
     return s == null ? null : Enum.valueOf(type, s);
   }
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/type/NClobTypeHandler.java
Patch:
@@ -56,4 +56,4 @@ private String toString(Clob clob) throws SQLException {
     return clob == null ? null : clob.getSubString(1, (int) clob.length());
   }
 
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/binding/WrongMapperTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,4 +29,4 @@ void shouldFailForBothOneAndMany() {
     });
   }
 
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/domain/blog/Author.java
Patch:
@@ -132,4 +132,4 @@ public int hashCode() {
   public String toString() {
     return "Author : " + id + " : " + username + " : " + email;
   }
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/executor/CachingBatchExecutorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,4 +29,4 @@ protected Executor createExecutor(Transaction transaction) {
     return new CachingExecutor(new BatchExecutor(config, transaction));
   }
 
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/executor/CachingReuseExecutorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,4 +29,4 @@ protected Executor createExecutor(Transaction transaction) {
     return new CachingExecutor(new ReuseExecutor(config, transaction));
   }
 
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable.java
Patch:
@@ -143,4 +143,4 @@ public void setActive(boolean active) {
     this.active = active;
   }
 
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTableMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -28,4 +28,4 @@ public interface AwfulTableMapper {
   int updateByPrimaryKeySelective(AwfulTable record);
 
   int updateByPrimaryKey(AwfulTable record);
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/submitted/bringrags/SimpleChildObject.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -32,4 +32,4 @@ public SimpleObject getSimpleObject() {
     return parentSimpleObject;
   }
 
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/submitted/multidb/MultiDbMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -27,4 +27,4 @@ public interface MultiDbMapper {
   void insert(User user);
 
   void insert2(User user);
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/submitted/multidb/User.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -40,4 +40,4 @@ public String getName() {
   public void setName(String name) {
     this.name = name;
   }
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/submitted/permissions/Resource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -37,4 +37,4 @@ public List<Principal> getPrincipals() {
   public void setPrincipals(List<Principal> principals) {
     this.Principals = principals;
   }
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/submitted/resultmapwithassociationstest/Address.java
Patch:
@@ -28,4 +28,4 @@ public int getId() {
   public void setId(final int id) {
     this.id = id;
   }
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/submitted/resultmapwithassociationstest/Mapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -19,4 +19,4 @@
 
 public interface Mapper {
   List<Person> findAll();
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/submitted/resultmapwithassociationstest/Person.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -36,4 +36,4 @@ public List<Address> getAddresses() {
   public void setAddresses(final List<Address> addresses) {
     this.addresses = addresses;
   }
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/type/ByteArrayTypeHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -72,4 +72,4 @@ public void shouldGetResultNullFromCallableStatement() throws Exception {
     // Unnecessary
   }
 
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/type/ObjectTypeHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -75,4 +75,4 @@ public void shouldGetResultNullFromCallableStatement() throws Exception {
     assertNull(TYPE_HANDLER.getResult(cs, 1));
   }
 
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/type/StringTypeHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -72,4 +72,4 @@ public void shouldGetResultNullFromCallableStatement() throws Exception {
     // Unnecessary
   }
 
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/builder/CacheRefResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -32,4 +32,4 @@ public CacheRefResolver(MapperBuilderAssistant assistant, String cacheRefNamespa
   public Cache resolveCacheRef() {
     return assistant.useCacheRef(cacheRefNamespace);
   }
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/builder/annotation/MethodResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -33,4 +33,4 @@ public void resolve() {
     annotationBuilder.parseStatement(method);
   }
 
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/reflection/ReflectorFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -22,4 +22,4 @@ public interface ReflectorFactory {
   void setClassCacheEnabled(boolean classCacheEnabled);
 
   Reflector findForClass(Class<?> type);
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/scripting/xmltags/StaticTextSqlNode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -31,4 +31,4 @@ public boolean apply(DynamicContext context) {
     return true;
   }
 
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/type/BlobTypeHandler.java
Patch:
@@ -63,4 +63,4 @@ public byte[] getNullableResult(CallableStatement cs, int columnIndex) throws SQ
     }
     return returnValue;
   }
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/type/EnumTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -60,4 +60,4 @@ public E getNullableResult(CallableStatement cs, int columnIndex) throws SQLExce
     String s = cs.getString(columnIndex);
     return s == null ? null : Enum.valueOf(type, s);
   }
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/type/NClobTypeHandler.java
Patch:
@@ -56,4 +56,4 @@ private String toString(Clob clob) throws SQLException {
     return clob == null ? null : clob.getSubString(1, (int) clob.length());
   }
 
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/binding/WrongMapperTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,4 +29,4 @@ void shouldFailForBothOneAndMany() {
     });
   }
 
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/domain/blog/Author.java
Patch:
@@ -132,4 +132,4 @@ public int hashCode() {
   public String toString() {
     return "Author : " + id + " : " + username + " : " + email;
   }
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/executor/CachingBatchExecutorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,4 +29,4 @@ protected Executor createExecutor(Transaction transaction) {
     return new CachingExecutor(new BatchExecutor(config, transaction));
   }
 
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/executor/CachingReuseExecutorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,4 +29,4 @@ protected Executor createExecutor(Transaction transaction) {
     return new CachingExecutor(new ReuseExecutor(config, transaction));
   }
 
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTable.java
Patch:
@@ -143,4 +143,4 @@ public void setActive(boolean active) {
     this.active = active;
   }
 
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTableMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -28,4 +28,4 @@ public interface AwfulTableMapper {
   int updateByPrimaryKeySelective(AwfulTable record);
 
   int updateByPrimaryKey(AwfulTable record);
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/submitted/bringrags/SimpleChildObject.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -32,4 +32,4 @@ public SimpleObject getSimpleObject() {
     return parentSimpleObject;
   }
 
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/submitted/multidb/MultiDbMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -27,4 +27,4 @@ public interface MultiDbMapper {
   void insert(User user);
 
   void insert2(User user);
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/submitted/multidb/User.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -40,4 +40,4 @@ public String getName() {
   public void setName(String name) {
     this.name = name;
   }
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/submitted/permissions/Resource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -37,4 +37,4 @@ public List<Principal> getPrincipals() {
   public void setPrincipals(List<Principal> principals) {
     this.Principals = principals;
   }
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/submitted/resultmapwithassociationstest/Address.java
Patch:
@@ -28,4 +28,4 @@ public int getId() {
   public void setId(final int id) {
     this.id = id;
   }
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/submitted/resultmapwithassociationstest/Mapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -19,4 +19,4 @@
 
 public interface Mapper {
   List<Person> findAll();
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/submitted/resultmapwithassociationstest/Person.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -36,4 +36,4 @@ public List<Address> getAddresses() {
   public void setAddresses(final List<Address> addresses) {
     this.addresses = addresses;
   }
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/type/ByteArrayTypeHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -72,4 +72,4 @@ public void shouldGetResultNullFromCallableStatement() throws Exception {
     // Unnecessary
   }
 
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/type/ObjectTypeHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -75,4 +75,4 @@ public void shouldGetResultNullFromCallableStatement() throws Exception {
     assertNull(TYPE_HANDLER.getResult(cs, 1));
   }
 
-}
\ No newline at end of file
+}

File: src/test/java/org/apache/ibatis/type/StringTypeHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -72,4 +72,4 @@ public void shouldGetResultNullFromCallableStatement() throws Exception {
     // Unnecessary
   }
 
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -437,7 +437,7 @@ private Class<?> resolveResultJavaType(Class<?> resultType, String property, Cla
     if (javaType == null && property != null) {
       try {
         MetaClass metaResultType = MetaClass.forClass(resultType, configuration.getReflectorFactory());
-        javaType = metaResultType.getSetterType(property);
+        javaType = metaResultType.getGetterType(property);
       } catch (Exception e) {
         // ignore, following null check statement will deal with the situation
       }

File: src/main/java/org/apache/ibatis/mapping/ResultMap.java
Patch:
@@ -128,8 +128,8 @@ public ResultMap build() {
         final List<String> actualArgNames = argNamesOfMatchingConstructor(constructorArgNames);
         if (actualArgNames == null) {
           throw new BuilderException("Error in result map '" + resultMap.id + "'. Failed to find a constructor in '"
-              + resultMap.getType().getName() + "' by arg names " + constructorArgNames
-              + ". There might be more info in debug log.");
+              + resultMap.getType().getName() + "' with arg names " + constructorArgNames
+              + ". Note that 'javaType' is required when there is no readable property with the same name ('name' is optional, BTW). There might be more info in debug log.");
         }
         resultMap.constructorResultMappings.sort((o1, o2) -> {
           int paramIdx1 = actualArgNames.indexOf(o1.getProperty());

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -437,7 +437,7 @@ private Class<?> resolveResultJavaType(Class<?> resultType, String property, Cla
     if (javaType == null && property != null) {
       try {
         MetaClass metaResultType = MetaClass.forClass(resultType, configuration.getReflectorFactory());
-        javaType = metaResultType.getSetterType(property);
+        javaType = metaResultType.getGetterType(property);
       } catch (Exception e) {
         // ignore, following null check statement will deal with the situation
       }

File: src/main/java/org/apache/ibatis/mapping/ResultMap.java
Patch:
@@ -128,8 +128,8 @@ public ResultMap build() {
         final List<String> actualArgNames = argNamesOfMatchingConstructor(constructorArgNames);
         if (actualArgNames == null) {
           throw new BuilderException("Error in result map '" + resultMap.id + "'. Failed to find a constructor in '"
-              + resultMap.getType().getName() + "' by arg names " + constructorArgNames
-              + ". There might be more info in debug log.");
+              + resultMap.getType().getName() + "' with arg names " + constructorArgNames
+              + ". Note that 'javaType' is required when there is no readable property with the same name ('name' is optional, BTW). There might be more info in debug log.");
         }
         resultMap.constructorResultMappings.sort((o1, o2) -> {
           int paramIdx1 = actualArgNames.indexOf(o1.getProperty());

File: src/test/java/org/apache/ibatis/domain/misc/RichType.java
Patch:
@@ -28,9 +28,9 @@ public class RichType {
 
   private String richProperty;
 
-  private Map richMap = new HashMap();
+  private Map richMap = new HashMap<>();
 
-  private List richList = new ArrayList() {
+  private List richList = new ArrayList<>() {
     {
       add("bar");
     }

File: src/test/java/org/apache/ibatis/domain/misc/RichType.java
Patch:
@@ -28,9 +28,9 @@ public class RichType {
 
   private String richProperty;
 
-  private Map richMap = new HashMap();
+  private Map richMap = new HashMap<>();
 
-  private List richList = new ArrayList() {
+  private List richList = new ArrayList<>() {
     {
       add("bar");
     }

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2022 the original author or authors.
+ *    Copyright 2009-2023 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -294,7 +294,7 @@ private void cleanUpAfterHandlingResultSet() {
   private void validateResultMapsCount(ResultSetWrapper rsw, int resultMapCount) {
     if (rsw != null && resultMapCount < 1) {
       throw new ExecutorException("A query was run and no Result Maps were found for the Mapped Statement '" + mappedStatement.getId()
-          + "'.  It's likely that neither a Result Type nor a Result Map was specified.");
+          + "'. 'resultType' or 'resultMap' must be specified when there is no corresponding method.");
     }
   }
 

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -208,7 +208,9 @@ public CacheKey createCacheKey(MappedStatement ms, Object parameterObject, RowBo
       if (parameterMapping.getMode() != ParameterMode.OUT) {
         Object value;
         String propertyName = parameterMapping.getProperty();
-        if (boundSql.hasAdditionalParameter(propertyName)) {
+        if (parameterMapping.hasValue()) {
+          value = parameterMapping.getValue();
+        } else if (boundSql.hasAdditionalParameter(propertyName)) {
           value = boundSql.getAdditionalParameter(propertyName);
         } else if (parameterObject == null) {
           value = null;

File: src/main/java/org/apache/ibatis/scripting/xmltags/StaticTextSqlNode.java
Patch:
@@ -27,7 +27,7 @@ public StaticTextSqlNode(String text) {
 
   @Override
   public boolean apply(DynamicContext context) {
-    context.appendSql(text);
+    context.appendSql(context.parseParam(text));
     return true;
   }
 

File: src/main/java/org/apache/ibatis/io/DefaultVFS.java
Patch:
@@ -26,6 +26,7 @@
 import java.net.URL;
 import java.net.URLEncoder;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.FileSystemException;
 import java.nio.file.InvalidPathException;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -107,8 +108,8 @@ public List<String> list(URL url, String path) throws IOException {
                   break;
                 }
               }
-            } catch (InvalidPathException e) {
-              // #1974
+            } catch (InvalidPathException | FileSystemException e) {
+              // #1974 #2598
               lines.clear();
             }
             if (!lines.isEmpty()) {

File: src/main/java/org/apache/ibatis/reflection/ParamNameResolver.java
Patch:
@@ -125,7 +125,7 @@ public Object getNamedParams(Object[] args) {
       return null;
     } else if (!hasParamAnnotation && paramCount == 1) {
       Object value = args[names.firstKey()];
-      return wrapToMapIfCollection(value, useActualParamName ? names.get(0) : null);
+      return wrapToMapIfCollection(value, useActualParamName ? names.get(names.firstKey()) : null);
     } else {
       final Map<String, Object> param = new ParamMap<>();
       int i = 0;

File: src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java
Patch:
@@ -66,7 +66,7 @@ public Object createDeserializationProxy(Object target, Map<String, ResultLoader
     return EnhancedDeserializationProxyImpl.createProxy(target, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);
   }
 
-  static Object crateProxy(Class<?> type, Callback callback, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
+  static Object createStaticProxy(Class<?> type, Callback callback, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
     LogHolder.log.warn("CglibProxyFactory is deprecated. Use another proxy factory implementation.");
     Enhancer enhancer = new Enhancer();
     enhancer.setCallback(callback);
@@ -116,7 +116,7 @@ private EnhancedResultObjectProxyImpl(Class<?> type, ResultLoaderMap lazyLoader,
     public static Object createProxy(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
       final Class<?> type = target.getClass();
       EnhancedResultObjectProxyImpl callback = new EnhancedResultObjectProxyImpl(type, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);
-      Object enhanced = crateProxy(type, callback, constructorArgTypes, constructorArgs);
+      Object enhanced = createStaticProxy(type, callback, constructorArgTypes, constructorArgs);
       PropertyCopier.copyBeanProperties(type, target, enhanced);
       return enhanced;
     }
@@ -173,7 +173,7 @@ public static Object createProxy(Object target, Map<String, ResultLoaderMap.Load
             List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
       final Class<?> type = target.getClass();
       EnhancedDeserializationProxyImpl callback = new EnhancedDeserializationProxyImpl(type, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);
-      Object enhanced = crateProxy(type, callback, constructorArgTypes, constructorArgs);
+      Object enhanced = createStaticProxy(type, callback, constructorArgTypes, constructorArgs);
       PropertyCopier.copyBeanProperties(type, target, enhanced);
       return enhanced;
     }

File: src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java
Patch:
@@ -63,7 +63,7 @@ public Object createDeserializationProxy(Object target, Map<String, ResultLoader
     return EnhancedDeserializationProxyImpl.createProxy(target, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);
   }
 
-  static Object crateProxy(Class<?> type, MethodHandler callback, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
+  static Object createStaticProxy(Class<?> type, MethodHandler callback, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
 
     ProxyFactory enhancer = new ProxyFactory();
     enhancer.setSuperclass(type);
@@ -115,7 +115,7 @@ private EnhancedResultObjectProxyImpl(Class<?> type, ResultLoaderMap lazyLoader,
     public static Object createProxy(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
       final Class<?> type = target.getClass();
       EnhancedResultObjectProxyImpl callback = new EnhancedResultObjectProxyImpl(type, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);
-      Object enhanced = crateProxy(type, callback, constructorArgTypes, constructorArgs);
+      Object enhanced = createStaticProxy(type, callback, constructorArgTypes, constructorArgs);
       PropertyCopier.copyBeanProperties(type, target, enhanced);
       return enhanced;
     }
@@ -172,7 +172,7 @@ public static Object createProxy(Object target, Map<String, ResultLoaderMap.Load
             List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
       final Class<?> type = target.getClass();
       EnhancedDeserializationProxyImpl callback = new EnhancedDeserializationProxyImpl(type, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);
-      Object enhanced = crateProxy(type, callback, constructorArgTypes, constructorArgs);
+      Object enhanced = createStaticProxy(type, callback, constructorArgTypes, constructorArgs);
       PropertyCopier.copyBeanProperties(type, target, enhanced);
       return enhanced;
     }

File: src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java
Patch:
@@ -66,7 +66,7 @@ public Object createDeserializationProxy(Object target, Map<String, ResultLoader
     return EnhancedDeserializationProxyImpl.createProxy(target, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);
   }
 
-  static Object crateProxy(Class<?> type, Callback callback, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
+  static Object createStaticProxy(Class<?> type, Callback callback, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
     LogHolder.log.warn("CglibProxyFactory is deprecated. Use another proxy factory implementation.");
     Enhancer enhancer = new Enhancer();
     enhancer.setCallback(callback);
@@ -116,7 +116,7 @@ private EnhancedResultObjectProxyImpl(Class<?> type, ResultLoaderMap lazyLoader,
     public static Object createProxy(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
       final Class<?> type = target.getClass();
       EnhancedResultObjectProxyImpl callback = new EnhancedResultObjectProxyImpl(type, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);
-      Object enhanced = crateProxy(type, callback, constructorArgTypes, constructorArgs);
+      Object enhanced = createStaticProxy(type, callback, constructorArgTypes, constructorArgs);
       PropertyCopier.copyBeanProperties(type, target, enhanced);
       return enhanced;
     }
@@ -173,7 +173,7 @@ public static Object createProxy(Object target, Map<String, ResultLoaderMap.Load
             List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
       final Class<?> type = target.getClass();
       EnhancedDeserializationProxyImpl callback = new EnhancedDeserializationProxyImpl(type, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);
-      Object enhanced = crateProxy(type, callback, constructorArgTypes, constructorArgs);
+      Object enhanced = createStaticProxy(type, callback, constructorArgTypes, constructorArgs);
       PropertyCopier.copyBeanProperties(type, target, enhanced);
       return enhanced;
     }

File: src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java
Patch:
@@ -63,7 +63,7 @@ public Object createDeserializationProxy(Object target, Map<String, ResultLoader
     return EnhancedDeserializationProxyImpl.createProxy(target, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);
   }
 
-  static Object crateProxy(Class<?> type, MethodHandler callback, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
+  static Object createStaticProxy(Class<?> type, MethodHandler callback, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
 
     ProxyFactory enhancer = new ProxyFactory();
     enhancer.setSuperclass(type);
@@ -115,7 +115,7 @@ private EnhancedResultObjectProxyImpl(Class<?> type, ResultLoaderMap lazyLoader,
     public static Object createProxy(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
       final Class<?> type = target.getClass();
       EnhancedResultObjectProxyImpl callback = new EnhancedResultObjectProxyImpl(type, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);
-      Object enhanced = crateProxy(type, callback, constructorArgTypes, constructorArgs);
+      Object enhanced = createStaticProxy(type, callback, constructorArgTypes, constructorArgs);
       PropertyCopier.copyBeanProperties(type, target, enhanced);
       return enhanced;
     }
@@ -172,7 +172,7 @@ public static Object createProxy(Object target, Map<String, ResultLoaderMap.Load
             List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
       final Class<?> type = target.getClass();
       EnhancedDeserializationProxyImpl callback = new EnhancedDeserializationProxyImpl(type, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);
-      Object enhanced = crateProxy(type, callback, constructorArgTypes, constructorArgs);
+      Object enhanced = createStaticProxy(type, callback, constructorArgTypes, constructorArgs);
       PropertyCopier.copyBeanProperties(type, target, enhanced);
       return enhanced;
     }

File: .mvn/wrapper/MavenWrapperDownloader.java
Patch:
@@ -7,7 +7,7 @@
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
- *  http://www.apache.org/licenses/LICENSE-2.0
+ *  https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an

File: src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java
Patch:
@@ -236,7 +236,7 @@ private synchronized void initializeDriver() throws SQLException {
           driverType = Resources.classForName(driver);
         }
         // DriverManager requires the driver to be loaded via the system ClassLoader.
-        // http://www.kfu.com/~nsayer/Java/dyn-jdbc.html
+        // https://www.kfu.com/~nsayer/Java/dyn-jdbc.html
         Driver driverInstance = (Driver) driverType.getDeclaredConstructor().newInstance();
         DriverManager.registerDriver(new DriverProxy(driverInstance));
         registeredDrivers.put(driver, driverInstance);

File: src/test/java/org/apache/ibatis/submitted/arg_name_based_constructor_automapping/Mapper.java
Patch:
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.arg_name_baesd_constructor_automapping;
+package org.apache.ibatis.submitted.arg_name_based_constructor_automapping;
 
 import org.apache.ibatis.annotations.Select;
 

File: src/test/java/org/apache/ibatis/submitted/arg_name_based_constructor_automapping/Task.java
Patch:
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.arg_name_baesd_constructor_automapping;
+package org.apache.ibatis.submitted.arg_name_based_constructor_automapping;
 
 import org.apache.ibatis.annotations.Param;
 

File: src/test/java/org/apache/ibatis/submitted/arg_name_based_constructor_automapping/User.java
Patch:
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.arg_name_baesd_constructor_automapping;
+package org.apache.ibatis.submitted.arg_name_based_constructor_automapping;
 
 public class User {
 

File: src/test/java/org/apache/ibatis/submitted/arg_name_based_constructor_automapping/User2.java
Patch:
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.arg_name_baesd_constructor_automapping;
+package org.apache.ibatis.submitted.arg_name_based_constructor_automapping;
 
 import org.apache.ibatis.annotations.Param;
 

File: src/test/java/org/apache/ibatis/submitted/arg_name_based_constructor_automapping/Mapper.java
Patch:
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.arg_name_baesd_constructor_automapping;
+package org.apache.ibatis.submitted.arg_name_based_constructor_automapping;
 
 import org.apache.ibatis.annotations.Select;
 

File: src/test/java/org/apache/ibatis/submitted/arg_name_based_constructor_automapping/Task.java
Patch:
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.arg_name_baesd_constructor_automapping;
+package org.apache.ibatis.submitted.arg_name_based_constructor_automapping;
 
 import org.apache.ibatis.annotations.Param;
 

File: src/test/java/org/apache/ibatis/submitted/arg_name_based_constructor_automapping/User.java
Patch:
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.arg_name_baesd_constructor_automapping;
+package org.apache.ibatis.submitted.arg_name_based_constructor_automapping;
 
 public class User {
 

File: src/test/java/org/apache/ibatis/submitted/arg_name_based_constructor_automapping/User2.java
Patch:
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.arg_name_baesd_constructor_automapping;
+package org.apache.ibatis.submitted.arg_name_based_constructor_automapping;
 
 import org.apache.ibatis.annotations.Param;
 

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -750,7 +750,9 @@ private Object applyConstructorAutomapping(ResultSetWrapper rsw, ResultMap resul
       foundValues = applyColumnOrderBasedConstructorAutomapping(rsw, constructorArgTypes, constructorArgs, constructor,
           foundValues);
     }
-    return foundValues ? objectFactory.create(resultType, constructorArgTypes, constructorArgs) : null;
+    return foundValues || configuration.isReturnInstanceForEmptyRow()
+        ? objectFactory.create(resultType, constructorArgTypes, constructorArgs)
+        : null;
   }
 
   private boolean applyColumnOrderBasedConstructorAutomapping(ResultSetWrapper rsw, List<Class<?>> constructorArgTypes,

File: src/test/java/org/apache/ibatis/submitted/empty_row/Mapper.java
Patch:
@@ -56,4 +56,7 @@ public interface Mapper {
       "left join child c on c.parent_id = p.id",
       "left join pet e on e.parent_id = p.id", "where p.id = #{id}" })
   Parent getTwoCollections(Integer id);
+
+  @Select("select col1, col2 from parent where id = #{id}")
+  ImmutableParent selectImmutable(Integer id);
 }

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -698,7 +698,7 @@ public Executor newExecutor(Transaction transaction) {
 
   public Executor newExecutor(Transaction transaction, ExecutorType executorType) {
     executorType = executorType == null ? defaultExecutorType : executorType;
-    executorType = executorType == null ? ExecutorType.SIMPLE : executorType;
+//    executorType = executorType == null ? ExecutorType.SIMPLE : executorType;
     Executor executor;
     if (ExecutorType.BATCH == executorType) {
       executor = new BatchExecutor(this, transaction);

File: src/test/java/org/apache/ibatis/reflection/ReflectorTest.java
Patch:
@@ -174,7 +174,7 @@ static class Child extends Parent<String> {
   }
 
   @Test
-  void shouldResoleveReadonlySetterWithOverload() {
+  void shouldResolveReadonlySetterWithOverload() {
     class BeanClass implements BeanInterface<String> {
       @Override
       public void setId(String id) {

File: src/test/java/org/apache/ibatis/reflection/ReflectorTest.java
Patch:
@@ -174,7 +174,7 @@ static class Child extends Parent<String> {
   }
 
   @Test
-  void shouldResoleveReadonlySetterWithOverload() {
+  void shouldResolveReadonlySetterWithOverload() {
     class BeanClass implements BeanInterface<String> {
       @Override
       public void setId(String id) {

File: src/main/java/org/apache/ibatis/cursor/Cursor.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * Cursor contract to handle fetching items lazily using an Iterator.
- * Cursors are a perfect fit to handle millions of items queries that would not normally fits in memory.
+ * Cursors are a perfect fit to handle millions of items queries that would not normally fit in memory.
  * If you use collections in resultMaps then cursor SQL queries must be ordered (resultOrdered="true")
  * using the id columns of the resultMap.
  *

File: src/main/java/org/apache/ibatis/executor/BatchExecutorException.java
Patch:
@@ -60,7 +60,7 @@ public BatchUpdateException getBatchUpdateException() {
    * in the list for each successful sub-executor executed before the failing
    * executor.
    *
-   * @return the previously successful executor results (may be an empty list
+   * @return the previously successful executor results (maybe an empty list
    *         if no executor has executed successfully)
    */
   public List<BatchResult> getSuccessfulBatchResults() {

File: src/main/java/org/apache/ibatis/io/JBoss6VFS.java
Patch:
@@ -125,7 +125,7 @@ protected static <T> T checkNotNull(T object) {
   }
 
   /**
-   * Verifies that the return type of a method is what it is expected to be. If it is not, then
+   * Verifies that the return type of method is what it is expected to be. If it is not, then
    * this VFS is marked as invalid for the current environment.
    *
    * @param method The method whose return type is to be checked.

File: src/main/java/org/apache/ibatis/mapping/BoundSql.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * An actual SQL String got from an {@link SqlSource} after having processed any dynamic content.
- * The SQL may have SQL placeholders "?" and an list (ordered) of an parameter mappings
+ * The SQL may have SQL placeholders "?" and a list (ordered) of a parameter mappings
  * with the additional information for each parameter (at least the property name of the input object to read
  * the value from).
  * <p>

File: src/test/java/org/apache/ibatis/submitted/ognlstatic/OgnlStaticTest.java
Patch:
@@ -52,7 +52,7 @@ static void setUp() throws Exception {
    * <p>
    * DEBUG [main] - ==> Parameters: 1(Integer), 1(Integer)
    * <p>
-   * There are two parameter mappings but DefaulParameterHandler maps them both to input paremeter (integer)
+   * There are two parameter mappings but DefaultParameterHandler maps them both to input parameter (integer)
    */
   @Test // see issue #448
   void shouldGetAUserStatic() {

File: src/main/java/org/apache/ibatis/session/SqlSessionManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2021 the original author or authors.
+ *    Copyright 2009-2022 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -333,7 +333,7 @@ public void close() {
     try {
       sqlSession.close();
     } finally {
-      localSqlSession.set(null);
+      localSqlSession.remove();
     }
   }
 

File: src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/Mapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2021 the original author or authors.
+ *    Copyright 2009-2022 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -33,4 +33,6 @@ public interface Mapper {
 
   @Select("select name user_name, id user_id from users where id = #{id}")
   User2 selectUserIdAndUserNameUnderscore(Integer id);
+
+  Task selectTask(Integer id);
 }

File: src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/User.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2021 the original author or authors.
+ *    Copyright 2009-2022 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/User2.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2021 the original author or authors.
+ *    Copyright 2009-2022 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/session/SqlSessionManager.java
Patch:
@@ -333,7 +333,7 @@ public void close() {
     try {
       sqlSession.close();
     } finally {
-      localSqlSession.set(null);
+      localSqlSession.remove();
     }
   }
 

File: src/test/java/org/apache/ibatis/type/BooleanTypeHandlerTest.java
Patch:
@@ -74,6 +74,7 @@ public void shouldGetResultFromCallableStatement() throws Exception {
   }
 
   @Override
+  @Test
   public void shouldGetResultNullFromCallableStatement() throws Exception {
     when(cs.getBoolean(1)).thenReturn(false);
     when(cs.wasNull()).thenReturn(true);

File: src/main/java/org/apache/ibatis/logging/log4j/Log4jImpl.java
Patch:
@@ -21,7 +21,9 @@
 
 /**
  * @author Eduardo Macarron
+ * @deprecated Since 3.5.9 - See https://github.com/mybatis/mybatis-3/issues/1223. This class will remove future.
  */
+@Deprecated
 public class Log4jImpl implements Log {
 
   private static final String FQCN = Log4jImpl.class.getName();

File: src/main/java/org/apache/ibatis/logging/log4j/package-info.java
Patch:
@@ -15,5 +15,6 @@
  */
 /**
  * logger using Log4J feature.
+ * @deprecated Since 3.5.9 - See https://github.com/mybatis/mybatis-3/issues/1223. This package will remove future.
  */
 package org.apache.ibatis.logging.log4j;

File: src/main/java/org/apache/ibatis/type/CharacterTypeHandler.java
Patch:
@@ -33,7 +33,7 @@ public void setNonNullParameter(PreparedStatement ps, int i, Character parameter
   @Override
   public Character getNullableResult(ResultSet rs, String columnName) throws SQLException {
     String columnValue = rs.getString(columnName);
-    if (columnValue != null) {
+    if (columnValue != null && !columnValue.isEmpty()) {
       return columnValue.charAt(0);
     } else {
       return null;
@@ -43,7 +43,7 @@ public Character getNullableResult(ResultSet rs, String columnName) throws SQLEx
   @Override
   public Character getNullableResult(ResultSet rs, int columnIndex) throws SQLException {
     String columnValue = rs.getString(columnIndex);
-    if (columnValue != null) {
+    if (columnValue != null && !columnValue.isEmpty()) {
       return columnValue.charAt(0);
     } else {
       return null;
@@ -53,7 +53,7 @@ public Character getNullableResult(ResultSet rs, int columnIndex) throws SQLExce
   @Override
   public Character getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {
     String columnValue = cs.getString(columnIndex);
-    if (columnValue != null) {
+    if (columnValue != null && !columnValue.isEmpty()) {
       return columnValue.charAt(0);
     } else {
       return null;

File: src/main/java/org/apache/ibatis/type/CharacterTypeHandler.java
Patch:
@@ -33,7 +33,7 @@ public void setNonNullParameter(PreparedStatement ps, int i, Character parameter
   @Override
   public Character getNullableResult(ResultSet rs, String columnName) throws SQLException {
     String columnValue = rs.getString(columnName);
-    if (columnValue != null && columnValue != "") {
+    if (columnValue != null && !columnValue.isEmpty()) {
       return columnValue.charAt(0);
     } else {
       return null;
@@ -43,7 +43,7 @@ public Character getNullableResult(ResultSet rs, String columnName) throws SQLEx
   @Override
   public Character getNullableResult(ResultSet rs, int columnIndex) throws SQLException {
     String columnValue = rs.getString(columnIndex);
-    if (columnValue != null && columnValue != "") {
+    if (columnValue != null && !columnValue.isEmpty()) {
       return columnValue.charAt(0);
     } else {
       return null;
@@ -53,7 +53,7 @@ public Character getNullableResult(ResultSet rs, int columnIndex) throws SQLExce
   @Override
   public Character getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {
     String columnValue = cs.getString(columnIndex);
-    if (columnValue != null && columnValue != "") {
+    if (columnValue != null && !columnValue.isEmpty()) {
       return columnValue.charAt(0);
     } else {
       return null;

File: src/main/java/org/apache/ibatis/type/CharacterTypeHandler.java
Patch:
@@ -33,7 +33,7 @@ public void setNonNullParameter(PreparedStatement ps, int i, Character parameter
   @Override
   public Character getNullableResult(ResultSet rs, String columnName) throws SQLException {
     String columnValue = rs.getString(columnName);
-    if (columnValue != null) {
+    if (columnValue != null && columnValue != "") {
       return columnValue.charAt(0);
     } else {
       return null;
@@ -43,7 +43,7 @@ public Character getNullableResult(ResultSet rs, String columnName) throws SQLEx
   @Override
   public Character getNullableResult(ResultSet rs, int columnIndex) throws SQLException {
     String columnValue = rs.getString(columnIndex);
-    if (columnValue != null) {
+    if (columnValue != null && columnValue != "") {
       return columnValue.charAt(0);
     } else {
       return null;
@@ -53,7 +53,7 @@ public Character getNullableResult(ResultSet rs, int columnIndex) throws SQLExce
   @Override
   public Character getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {
     String columnValue = cs.getString(columnIndex);
-    if (columnValue != null) {
+    if (columnValue != null && columnValue != "") {
       return columnValue.charAt(0);
     } else {
       return null;

File: src/main/java/org/apache/ibatis/util/MapUtil.java
Patch:
@@ -32,7 +32,7 @@ public static <K, V> V computeIfAbsent(Map<K, V> map, K key, Function<K, V> mapp
     if (value != null) {
       return value;
     }
-    return map.computeIfAbsent(key, mappingFunction::apply);
+    return map.computeIfAbsent(key, mappingFunction);
   }
 
   /**

File: src/main/java/org/apache/ibatis/util/MapUtil.java
Patch:
@@ -32,7 +32,7 @@ public static <K, V> V computeIfAbsent(Map<K, V> map, K key, Function<K, V> mapp
     if (value != null) {
       return value;
     }
-    return map.computeIfAbsent(key, mappingFunction::apply);
+    return map.computeIfAbsent(key, mappingFunction);
   }
 
   /**

File: src/main/java/org/apache/ibatis/annotations/Arg.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/AutomapConstructor.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/CacheNamespace.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/CacheNamespaceRef.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/Case.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/ConstructorArgs.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/Delete.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/DeleteProvider.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/Flush.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/Insert.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/InsertProvider.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/Lang.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/Many.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/MapKey.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/Mapper.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/One.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/Options.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/Param.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/Property.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/Result.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/ResultMap.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/ResultType.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/Results.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/Select.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/SelectKey.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/SelectProvider.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/TypeDiscriminator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/Update.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/UpdateProvider.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/binding/BindingException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/binding/MapperProxyFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/binding/MapperRegistry.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/binding/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/BaseBuilder.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/BuilderException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/CacheRefResolver.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/IncompleteElementException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/InitializingObject.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/ParameterExpression.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/ResultMapResolver.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/StaticSqlSource.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2017 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/annotation/MethodResolver.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2017 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderContext.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderMethodResolver.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/annotation/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/xml/XMLIncludeTransformer.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperEntityResolver.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/xml/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cache/Cache.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cache/CacheException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cache/CacheKey.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cache/NullCacheKey.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cache/decorators/BlockingCache.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@
  * It sets a lock over a cache key when the element is not found in cache.
  * This way, other threads will wait until this element is filled instead of hitting the database.
  *
- * <p>By its nature, this implementation can cause deadlock when used incorrecly.
+ * <p>By its nature, this implementation can cause deadlock when used incorrectly.
  *
  * @author Eduardo Macarron
  *

File: src/main/java/org/apache/ibatis/cache/decorators/FifoCache.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cache/decorators/LoggingCache.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cache/decorators/LruCache.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cache/decorators/ScheduledCache.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cache/decorators/SerializedCache.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cache/decorators/SoftCache.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cache/decorators/SynchronizedCache.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cache/decorators/TransactionalCache.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cache/decorators/WeakCache.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cache/decorators/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cache/impl/PerpetualCache.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cache/impl/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cache/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cursor/Cursor.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cursor/defaults/DefaultCursor.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cursor/defaults/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cursor/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/datasource/DataSourceException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/datasource/DataSourceFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/datasource/jndi/JndiDataSourceFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/datasource/jndi/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/datasource/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/datasource/pooled/PoolState.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -84,7 +84,7 @@ public synchronized int getActiveConnectionCount() {
   @Override
   public synchronized String toString() {
     StringBuilder builder = new StringBuilder();
-    builder.append("\n===CONFINGURATION==============================================");
+    builder.append("\n===CONFIGURATION==============================================");
     builder.append("\n jdbcDriver                     ").append(dataSource.getDriver());
     builder.append("\n jdbcUrl                        ").append(dataSource.getUrl());
     builder.append("\n jdbcUsername                   ").append(dataSource.getUsername());

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSourceFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/datasource/pooled/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSourceFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/datasource/unpooled/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/exceptions/ExceptionFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/exceptions/IbatisException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/exceptions/PersistenceException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/exceptions/TooManyResultsException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/exceptions/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/BatchExecutorException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/BatchResult.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/CachingExecutor.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/ErrorContext.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/ExecutionPlaceholder.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/Executor.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/ExecutorException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/ResultExtractor.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/ReuseExecutor.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/SimpleExecutor.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/keygen/KeyGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/keygen/NoKeyGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/keygen/SelectKeyGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/keygen/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/loader/AbstractEnhancedDeserializationProxy.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/loader/AbstractSerialStateHolder.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/loader/CglibProxyFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/loader/JavassistProxyFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/loader/ProxyFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoader.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/loader/WriteReplaceInterface.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/loader/cglib/CglibSerialStateHolder.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/loader/cglib/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistSerialStateHolder.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/loader/javassist/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/loader/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/parameter/ParameterHandler.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/parameter/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/result/DefaultMapResultHandler.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/result/DefaultResultContext.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/result/DefaultResultHandler.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/result/ResultMapException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/result/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/resultset/ResultSetHandler.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/resultset/ResultSetWrapper.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/resultset/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/statement/BaseStatementHandler.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2016 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/statement/CallableStatementHandler.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/statement/PreparedStatementHandler.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/statement/RoutingStatementHandler.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/statement/SimpleStatementHandler.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/statement/StatementHandler.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2016 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/statement/StatementUtil.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/statement/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/io/ClassLoaderWrapper.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/io/ExternalResources.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/io/JBoss6VFS.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/io/ResolverUtil.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/io/Resources.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/io/SerialFilterChecker.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -13,7 +13,6 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-
 package org.apache.ibatis.io;
 
 import java.security.Security;

File: src/main/java/org/apache/ibatis/io/VFS.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/io/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/jdbc/RuntimeSqlException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/jdbc/SQL.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/jdbc/SelectBuilder.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/jdbc/SqlRunner.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/jdbc/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/lang/UsesJava7.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2017 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/lang/UsesJava8.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2017 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/lang/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/Log.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/LogException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/LogFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/commons/JakartaCommonsLoggingImpl.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2017 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/commons/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/jdbc/ConnectionLogger.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/jdbc/PreparedStatementLogger.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/jdbc/StatementLogger.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/jdbc/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/jdk14/Jdk14LoggingImpl.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2017 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/jdk14/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/log4j/Log4jImpl.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/log4j/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/log4j2/Log4j2AbstractLoggerImpl.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/log4j2/Log4j2Impl.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2017 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/log4j2/Log4j2LoggerImpl.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/log4j2/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/nologging/NoLoggingImpl.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/nologging/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/slf4j/Slf4jImpl.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLocationAwareLoggerImpl.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLoggerImpl.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2017 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/slf4j/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/stdout/StdOutImpl.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/stdout/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/mapping/BoundSql.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/mapping/CacheBuilder.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/mapping/DatabaseIdProvider.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/mapping/DefaultDatabaseIdProvider.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/mapping/Discriminator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/mapping/Environment.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/mapping/FetchType.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/mapping/MappedStatement.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/mapping/ParameterMap.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/mapping/ParameterMapping.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/mapping/ParameterMode.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/mapping/ResultFlag.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/mapping/ResultMap.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/mapping/ResultMapping.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/mapping/ResultSetType.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/mapping/SqlCommandType.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/mapping/SqlSource.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/mapping/StatementType.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/mapping/VendorDatabaseIdProvider.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/mapping/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/parsing/GenericTokenParser.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/parsing/ParsingException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/parsing/PropertyParser.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2016 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/parsing/TokenHandler.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/parsing/XNode.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/parsing/XPathParser.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/parsing/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/plugin/Interceptor.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/plugin/InterceptorChain.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/plugin/Intercepts.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/plugin/Invocation.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2017 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/plugin/PluginException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/plugin/Signature.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/plugin/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/ArrayUtil.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/ExceptionUtil.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/Jdk.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/MetaClass.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/MetaObject.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/OptionalUtil.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -13,7 +13,6 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-
 package org.apache.ibatis.reflection;
 
 import java.util.Optional;

File: src/main/java/org/apache/ibatis/reflection/ParamNameResolver.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/ParamNameUtil.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/ReflectionException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/ReflectorFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/SystemMetaObject.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@ public final class SystemMetaObject {
 
   public static final ObjectFactory DEFAULT_OBJECT_FACTORY = new DefaultObjectFactory();
   public static final ObjectWrapperFactory DEFAULT_OBJECT_WRAPPER_FACTORY = new DefaultObjectWrapperFactory();
-  public static final MetaObject NULL_META_OBJECT = MetaObject.forObject(NullObject.class, DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY, new DefaultReflectorFactory());
+  public static final MetaObject NULL_META_OBJECT = MetaObject.forObject(new NullObject(), DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY, new DefaultReflectorFactory());
 
   private SystemMetaObject() {
     // Prevent Instantiation of Static Class

File: src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/factory/DefaultObjectFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/factory/ObjectFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/factory/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/invoker/AmbiguousMethodInvoker.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -13,7 +13,6 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-
 package org.apache.ibatis.reflection.invoker;
 
 import java.lang.reflect.InvocationTargetException;

File: src/main/java/org/apache/ibatis/reflection/invoker/GetFieldInvoker.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/invoker/Invoker.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/invoker/MethodInvoker.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/invoker/SetFieldInvoker.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/invoker/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/property/PropertyCopier.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/property/PropertyNamer.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/property/PropertyTokenizer.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2017 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/property/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/wrapper/BaseWrapper.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/wrapper/BeanWrapper.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2017 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/wrapper/CollectionWrapper.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2017 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/wrapper/DefaultObjectWrapperFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/wrapper/MapWrapper.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/wrapper/ObjectWrapper.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/wrapper/ObjectWrapperFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2016 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/wrapper/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/scripting/LanguageDriver.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/scripting/ScriptingException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/scripting/defaults/DefaultParameterHandler.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/scripting/defaults/RawLanguageDriver.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/scripting/defaults/RawSqlSource.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/scripting/defaults/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/scripting/package-info.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/scripting/xmltags/ChooseSqlNode.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2017 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/scripting/xmltags/DynamicContext.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/scripting/xmltags/DynamicSqlSource.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/scripting/xmltags/ExpressionEvaluator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/scripting/xmltags/ForEachSqlNode.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/scripting/xmltags/IfSqlNode.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2017 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/scripting/xmltags/MixedSqlNode.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2019 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/scripting/xmltags/OgnlCache.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/scripting/xmltags/OgnlClassResolver.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/scripting/xmltags/OgnlMemberAccess.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2020 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/scripting/xmltags/SetSqlNode.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2018 the original author or authors.
+/*
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/type/BaseTypeHandler.java
Patch:
@@ -114,7 +114,7 @@ public T getResult(CallableStatement cs, int columnIndex) throws SQLException {
    * @param rs
    *          the rs
    * @param columnName
-   *          Colunm name, when configuration <code>useColumnLabel</code> is <code>false</code>
+   *          Column name, when configuration <code>useColumnLabel</code> is <code>false</code>
    * @return the nullable result
    * @throws SQLException
    *           the SQL exception

File: src/test/java/org/apache/ibatis/builder/XmlMapperBuilderTest.java
Patch:
@@ -205,7 +205,7 @@ void shouldFailedLoadXMLMapperFile() throws Exception {
 //  }
 
    @Test
-   void erorrResultMapLocation() throws Exception {
+   void errorResultMapLocation() throws Exception {
      Configuration configuration = new Configuration();
      String resource = "org/apache/ibatis/builder/ProblemResultMapper.xml";
      try (InputStream inputStream = Resources.getResourceAsStream(resource)) {

File: src/test/java/org/apache/ibatis/type/TypeHandlerRegistryTest.java
Patch:
@@ -126,7 +126,7 @@ public List<URI> getNullableResult(CallableStatement cs, int columnIndex) {
   }
 
   @Test
-  void shouldBindHandlersToWrapersAndPrimitivesIndividually() {
+  void shouldBindHandlersToWrappersAndPrimitivesIndividually() {
     typeHandlerRegistry.register(Integer.class, DateTypeHandler.class);
     assertSame(IntegerTypeHandler.class, typeHandlerRegistry.getTypeHandler(int.class).getClass());
     typeHandlerRegistry.register(Integer.class, IntegerTypeHandler.class);
@@ -227,7 +227,7 @@ enum TestEnum {
   }
 
   @Test
-  void shouldAutoRegisterEnutmTypeInMultiThreadEnvironment() throws Exception {
+  void shouldAutoRegisterEnumTypeInMultiThreadEnvironment() throws Exception {
     // gh-1820
     ExecutorService executorService = Executors.newCachedThreadPool();
     try {

File: src/test/java/org/apache/ibatis/type/TypeHandlerRegistryTest.java
Patch:
@@ -126,7 +126,7 @@ public List<URI> getNullableResult(CallableStatement cs, int columnIndex) {
   }
 
   @Test
-  void shouldBindHandlersToWrapersAndPrimitivesIndividually() {
+  void shouldBindHandlersToWrappersAndPrimitivesIndividually() {
     typeHandlerRegistry.register(Integer.class, DateTypeHandler.class);
     assertSame(IntegerTypeHandler.class, typeHandlerRegistry.getTypeHandler(int.class).getClass());
     typeHandlerRegistry.register(Integer.class, IntegerTypeHandler.class);
@@ -227,7 +227,7 @@ enum TestEnum {
   }
 
   @Test
-  void shouldAutoRegisterEnutmTypeInMultiThreadEnvironment() throws Exception {
+  void shouldAutoRegisterEnumTypeInMultiThreadEnvironment() throws Exception {
     // gh-1820
     ExecutorService executorService = Executors.newCachedThreadPool();
     try {

File: src/main/java/org/apache/ibatis/reflection/SystemMetaObject.java
Patch:
@@ -27,7 +27,7 @@ public final class SystemMetaObject {
 
   public static final ObjectFactory DEFAULT_OBJECT_FACTORY = new DefaultObjectFactory();
   public static final ObjectWrapperFactory DEFAULT_OBJECT_WRAPPER_FACTORY = new DefaultObjectWrapperFactory();
-  public static final MetaObject NULL_META_OBJECT = MetaObject.forObject(NullObject.class, DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY, new DefaultReflectorFactory());
+  public static final MetaObject NULL_META_OBJECT = MetaObject.forObject(new NullObject(), DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY, new DefaultReflectorFactory());
 
   private SystemMetaObject() {
     // Prevent Instantiation of Static Class

File: src/main/java/org/apache/ibatis/reflection/SystemMetaObject.java
Patch:
@@ -27,7 +27,7 @@ public final class SystemMetaObject {
 
   public static final ObjectFactory DEFAULT_OBJECT_FACTORY = new DefaultObjectFactory();
   public static final ObjectWrapperFactory DEFAULT_OBJECT_WRAPPER_FACTORY = new DefaultObjectWrapperFactory();
-  public static final MetaObject NULL_META_OBJECT = MetaObject.forObject(NullObject.class, DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY, new DefaultReflectorFactory());
+  public static final MetaObject NULL_META_OBJECT = MetaObject.forObject(new NullObject(), DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY, new DefaultReflectorFactory());
 
   private SystemMetaObject() {
     // Prevent Instantiation of Static Class

File: src/main/java/org/apache/ibatis/type/TypeHandler.java
Patch:
@@ -33,7 +33,7 @@ public interface TypeHandler<T> {
    * @param rs
    *          the rs
    * @param columnName
-   *          Colunm name, when configuration <code>useColumnLabel</code> is <code>false</code>
+   *          Column name, when configuration <code>useColumnLabel</code> is <code>false</code>
    * @return the result
    * @throws SQLException
    *           the SQL exception

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -279,7 +279,7 @@ private Map<JdbcType, TypeHandler<?>> getJdbcHandlerMapForEnumInterfaces(Class<?
         jdbcHandlerMap = getJdbcHandlerMapForEnumInterfaces(iface, enumClazz);
       }
       if (jdbcHandlerMap != null) {
-        // Found a type handler regsiterd to a super interface
+        // Found a type handler registered to a super interface
         HashMap<JdbcType, TypeHandler<?>> newMap = new HashMap<>();
         for (Entry<JdbcType, TypeHandler<?>> entry : jdbcHandlerMap.entrySet()) {
           // Create a type handler instance with enum type as a constructor arg

File: src/main/java/org/apache/ibatis/type/TypeHandler.java
Patch:
@@ -33,7 +33,7 @@ public interface TypeHandler<T> {
    * @param rs
    *          the rs
    * @param columnName
-   *          Colunm name, when configuration <code>useColumnLabel</code> is <code>false</code>
+   *          Column name, when configuration <code>useColumnLabel</code> is <code>false</code>
    * @return the result
    * @throws SQLException
    *           the SQL exception

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -279,7 +279,7 @@ private Map<JdbcType, TypeHandler<?>> getJdbcHandlerMapForEnumInterfaces(Class<?
         jdbcHandlerMap = getJdbcHandlerMapForEnumInterfaces(iface, enumClazz);
       }
       if (jdbcHandlerMap != null) {
-        // Found a type handler regsiterd to a super interface
+        // Found a type handler registered to a super interface
         HashMap<JdbcType, TypeHandler<?>> newMap = new HashMap<>();
         for (Entry<JdbcType, TypeHandler<?>> entry : jdbcHandlerMap.entrySet()) {
           // Create a type handler instance with enum type as a constructor arg

File: src/main/java/org/apache/ibatis/annotations/Arg.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/AutomapConstructor.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/CacheNamespace.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/CacheNamespaceRef.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/Case.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/ConstructorArgs.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/Delete.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/DeleteProvider.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/Flush.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/Insert.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/InsertProvider.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/Lang.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/Many.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/MapKey.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/Mapper.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/One.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/Options.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/Param.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/Property.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/Result.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/ResultMap.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/ResultType.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/Results.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/Select.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/SelectKey.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/SelectProvider.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/TypeDiscriminator.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/Update.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/UpdateProvider.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/annotations/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/binding/BindingException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/binding/MapperProxy.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/binding/MapperProxyFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/binding/MapperRegistry.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/binding/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/BaseBuilder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/BuilderException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/CacheRefResolver.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/IncompleteElementException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/InitializingObject.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/ParameterExpression.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/ResultMapResolver.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/StaticSqlSource.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/annotation/MethodResolver.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderContext.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderMethodResolver.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/annotation/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/xml/XMLIncludeTransformer.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperEntityResolver.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/xml/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cache/Cache.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cache/CacheException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cache/CacheKey.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cache/NullCacheKey.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cache/TransactionalCacheManager.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cache/decorators/BlockingCache.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cache/decorators/FifoCache.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cache/decorators/LoggingCache.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cache/decorators/LruCache.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cache/decorators/ScheduledCache.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cache/decorators/SerializedCache.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cache/decorators/SoftCache.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cache/decorators/SynchronizedCache.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cache/decorators/TransactionalCache.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cache/decorators/WeakCache.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cache/decorators/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cache/impl/PerpetualCache.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cache/impl/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cache/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cursor/Cursor.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cursor/defaults/DefaultCursor.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cursor/defaults/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cursor/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/datasource/DataSourceException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/datasource/DataSourceFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/datasource/jndi/JndiDataSourceFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/datasource/jndi/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/datasource/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/datasource/pooled/PoolState.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSourceFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/datasource/pooled/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSourceFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/datasource/unpooled/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/exceptions/ExceptionFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/exceptions/IbatisException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/exceptions/PersistenceException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/exceptions/TooManyResultsException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/exceptions/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/BatchExecutorException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/BatchResult.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/CachingExecutor.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/ErrorContext.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/ExecutionPlaceholder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/Executor.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/ExecutorException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/ResultExtractor.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/ReuseExecutor.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/SimpleExecutor.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/keygen/Jdbc3KeyGenerator.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/keygen/KeyGenerator.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/keygen/NoKeyGenerator.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/keygen/SelectKeyGenerator.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/keygen/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/loader/AbstractEnhancedDeserializationProxy.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/loader/AbstractSerialStateHolder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/loader/CglibProxyFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/loader/JavassistProxyFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/loader/ProxyFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoader.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/loader/WriteReplaceInterface.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/loader/cglib/CglibSerialStateHolder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/loader/cglib/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistSerialStateHolder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/loader/javassist/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/loader/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/parameter/ParameterHandler.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/parameter/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/result/DefaultMapResultHandler.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/result/DefaultResultContext.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/result/DefaultResultHandler.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/result/ResultMapException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/result/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/resultset/ResultSetHandler.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/resultset/ResultSetWrapper.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/resultset/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/statement/BaseStatementHandler.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2016 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/statement/CallableStatementHandler.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/statement/PreparedStatementHandler.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/statement/RoutingStatementHandler.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/statement/SimpleStatementHandler.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/statement/StatementHandler.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2016 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/statement/StatementUtil.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/executor/statement/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/io/ClassLoaderWrapper.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/io/DefaultVFS.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/io/ExternalResources.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/io/JBoss6VFS.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/io/ResolverUtil.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/io/Resources.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/io/SerialFilterChecker.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
@@ -13,7 +13,6 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-
 package org.apache.ibatis.io;
 
 import java.security.Security;

File: src/main/java/org/apache/ibatis/io/VFS.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/io/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/jdbc/Null.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/jdbc/RuntimeSqlException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/jdbc/SQL.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/jdbc/SelectBuilder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/jdbc/SqlRunner.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/jdbc/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/lang/UsesJava7.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/lang/UsesJava8.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/lang/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/Log.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/LogException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/LogFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/commons/JakartaCommonsLoggingImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/commons/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/jdbc/ConnectionLogger.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/jdbc/PreparedStatementLogger.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/jdbc/StatementLogger.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/jdbc/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/jdk14/Jdk14LoggingImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/jdk14/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/log4j/Log4jImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/log4j/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/log4j2/Log4j2AbstractLoggerImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/log4j2/Log4j2Impl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/log4j2/Log4j2LoggerImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/log4j2/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/nologging/NoLoggingImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/nologging/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/slf4j/Slf4jImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLocationAwareLoggerImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLoggerImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/slf4j/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/stdout/StdOutImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/logging/stdout/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/mapping/BoundSql.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/mapping/CacheBuilder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/mapping/DatabaseIdProvider.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/mapping/DefaultDatabaseIdProvider.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/mapping/Discriminator.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/mapping/Environment.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/mapping/FetchType.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/mapping/MappedStatement.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/mapping/ParameterMap.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/mapping/ParameterMapping.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/mapping/ParameterMode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/mapping/ResultFlag.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/mapping/ResultMap.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/mapping/ResultMapping.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/mapping/ResultSetType.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/mapping/SqlCommandType.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/mapping/SqlSource.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/mapping/StatementType.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/mapping/VendorDatabaseIdProvider.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/mapping/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/parsing/GenericTokenParser.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/parsing/ParsingException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/parsing/PropertyParser.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2016 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/parsing/TokenHandler.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/parsing/XNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/parsing/XPathParser.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/parsing/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/plugin/Interceptor.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/plugin/InterceptorChain.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/plugin/Intercepts.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/plugin/Invocation.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/plugin/Plugin.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/plugin/PluginException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/plugin/Signature.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/plugin/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/ArrayUtil.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/DefaultReflectorFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/ExceptionUtil.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/Jdk.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/MetaClass.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/MetaObject.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/OptionalUtil.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
@@ -13,7 +13,6 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-
 package org.apache.ibatis.reflection;
 
 import java.util.Optional;

File: src/main/java/org/apache/ibatis/reflection/ParamNameResolver.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/ParamNameUtil.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/ReflectionException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/Reflector.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/ReflectorFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/SystemMetaObject.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/factory/DefaultObjectFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/factory/ObjectFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/factory/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/invoker/AmbiguousMethodInvoker.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
@@ -13,7 +13,6 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-
 package org.apache.ibatis.reflection.invoker;
 
 import java.lang.reflect.InvocationTargetException;

File: src/main/java/org/apache/ibatis/reflection/invoker/GetFieldInvoker.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/invoker/Invoker.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/invoker/MethodInvoker.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/invoker/SetFieldInvoker.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/invoker/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/property/PropertyCopier.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/property/PropertyNamer.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/property/PropertyTokenizer.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/property/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/wrapper/BaseWrapper.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/wrapper/BeanWrapper.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/wrapper/CollectionWrapper.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/wrapper/DefaultObjectWrapperFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/wrapper/MapWrapper.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/wrapper/ObjectWrapper.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/wrapper/ObjectWrapperFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2016 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/reflection/wrapper/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/LanguageDriver.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/LanguageDriverRegistry.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/ScriptingException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/defaults/DefaultParameterHandler.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/defaults/RawLanguageDriver.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/defaults/RawSqlSource.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/defaults/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/package-info.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/xmltags/ChooseSqlNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/xmltags/DynamicContext.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/xmltags/DynamicSqlSource.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/xmltags/ExpressionEvaluator.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/xmltags/ForEachSqlNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/xmltags/IfSqlNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/xmltags/MixedSqlNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/xmltags/OgnlCache.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/xmltags/OgnlClassResolver.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/xmltags/OgnlMemberAccess.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/xmltags/SetSqlNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/xmltags/SqlNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/xmltags/StaticTextSqlNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/xmltags/TextSqlNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/xmltags/TrimSqlNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/xmltags/VarDeclSqlNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/xmltags/WhereSqlNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/xmltags/XMLLanguageDriver.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/scripting/xmltags/XMLScriptBuilder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/cache/TransactionalCacheManager.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2019 the original author or authors.
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -19,6 +19,7 @@
 import java.util.Map;
 
 import org.apache.ibatis.cache.decorators.TransactionalCache;
+import org.apache.ibatis.util.MapUtil;
 
 /**
  * @author Clinton Begin
@@ -52,7 +53,7 @@ public void rollback() {
   }
 
   private TransactionalCache getTransactionalCache(Cache cache) {
-    return transactionalCaches.computeIfAbsent(cache, TransactionalCache::new);
+    return MapUtil.computeIfAbsent(transactionalCaches, cache, TransactionalCache::new);
   }
 
 }

File: src/main/java/org/apache/ibatis/executor/keygen/Jdbc3KeyGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2020 the original author or authors.
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -42,6 +42,7 @@
 import org.apache.ibatis.type.JdbcType;
 import org.apache.ibatis.type.TypeHandler;
 import org.apache.ibatis.type.TypeHandlerRegistry;
+import org.apache.ibatis.util.MapUtil;
 
 /**
  * @author Clinton Begin
@@ -156,7 +157,7 @@ private void assignKeysToParamMap(Configuration configuration, ResultSet rs, Res
     for (int i = 0; i < keyProperties.length; i++) {
       Entry<String, KeyAssigner> entry = getAssignerForParamMap(configuration, rsmd, i + 1, paramMap, keyProperties[i],
           keyProperties, true);
-      Entry<Iterator<?>, List<KeyAssigner>> iteratorPair = assignerMap.computeIfAbsent(entry.getKey(),
+      Entry<Iterator<?>, List<KeyAssigner>> iteratorPair = MapUtil.computeIfAbsent(assignerMap, entry.getKey(),
           k -> entry(collectionize(paramMap.get(k)).iterator(), new ArrayList<>()));
       iteratorPair.getValue().add(entry.getValue());
     }

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2020 the original author or authors.
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -61,6 +61,7 @@
 import org.apache.ibatis.type.JdbcType;
 import org.apache.ibatis.type.TypeHandler;
 import org.apache.ibatis.type.TypeHandlerRegistry;
+import org.apache.ibatis.util.MapUtil;
 
 /**
  * @author Clinton Begin
@@ -589,7 +590,7 @@ private void addPendingChildRelation(ResultSet rs, MetaObject metaResultObject,
     PendingRelation deferLoad = new PendingRelation();
     deferLoad.metaObject = metaResultObject;
     deferLoad.propertyMapping = parentMapping;
-    List<PendingRelation> relations = pendingRelations.computeIfAbsent(cacheKey, k -> new ArrayList<>());
+    List<PendingRelation> relations = MapUtil.computeIfAbsent(pendingRelations, cacheKey, k -> new ArrayList<>());
     // issue #255
     relations.add(deferLoad);
     ResultMapping previous = nextResultMaps.get(parentMapping.getResultSet());

File: src/main/java/org/apache/ibatis/plugin/Plugin.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2020 the original author or authors.
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,6 +24,7 @@
 import java.util.Set;
 
 import org.apache.ibatis.reflection.ExceptionUtil;
+import org.apache.ibatis.util.MapUtil;
 
 /**
  * @author Clinton Begin
@@ -75,7 +76,7 @@ private static Map<Class<?>, Set<Method>> getSignatureMap(Interceptor intercepto
     Signature[] sigs = interceptsAnnotation.value();
     Map<Class<?>, Set<Method>> signatureMap = new HashMap<>();
     for (Signature sig : sigs) {
-      Set<Method> methods = signatureMap.computeIfAbsent(sig.type(), k -> new HashSet<>());
+      Set<Method> methods = MapUtil.computeIfAbsent(signatureMap, sig.type(), k -> new HashSet<>());
       try {
         Method method = sig.type().getMethod(sig.method(), sig.args());
         methods.add(method);

File: src/main/java/org/apache/ibatis/reflection/Reflector.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2020 the original author or authors.
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -40,6 +40,7 @@
 import org.apache.ibatis.reflection.invoker.MethodInvoker;
 import org.apache.ibatis.reflection.invoker.SetFieldInvoker;
 import org.apache.ibatis.reflection.property.PropertyNamer;
+import org.apache.ibatis.util.MapUtil;
 
 /**
  * This class represents a cached set of class definition information that
@@ -143,7 +144,7 @@ private void addSetMethods(Class<?> clazz) {
 
   private void addMethodConflict(Map<String, List<Method>> conflictingMethods, String name, Method method) {
     if (isValidPropertyName(name)) {
-      List<Method> list = conflictingMethods.computeIfAbsent(name, k -> new ArrayList<>());
+      List<Method> list = MapUtil.computeIfAbsent(conflictingMethods, name, k -> new ArrayList<>());
       list.add(method);
     }
   }

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -269,6 +269,7 @@ private void settingsElement(Properties props) {
     configuration.setLogPrefix(props.getProperty("logPrefix"));
     configuration.setConfigurationFactory(resolveClass(props.getProperty("configurationFactory")));
     configuration.setShrinkWhitespacesInSql(booleanValueOf(props.getProperty("shrinkWhitespacesInSql"), false));
+    configuration.setArgNameBasedConstructorAutoMapping(booleanValueOf(props.getProperty("argNameBasedConstructorAutoMapping"), false));
     configuration.setDefaultSqlProviderType(resolveClass(props.getProperty("defaultSqlProviderType")));
   }
 

File: src/test/java/org/apache/ibatis/builder/XmlConfigBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2020 the original author or authors.
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -101,6 +101,7 @@ void shouldSuccessfullyLoadMinimalXMLConfigFile() throws Exception {
       assertNull(config.getConfigurationFactory());
       assertThat(config.getTypeHandlerRegistry().getTypeHandler(RoundingMode.class)).isInstanceOf(EnumTypeHandler.class);
       assertThat(config.isShrinkWhitespacesInSql()).isFalse();
+      assertThat(config.isArgNameBasedConstructorAutoMapping()).isFalse();
       assertThat(config.getDefaultSqlProviderType()).isNull();
     }
   }
@@ -197,6 +198,7 @@ void shouldSuccessfullyLoadXMLConfigFile() throws Exception {
       assertThat(config.getVfsImpl().getName()).isEqualTo(JBoss6VFS.class.getName());
       assertThat(config.getConfigurationFactory().getName()).isEqualTo(String.class.getName());
       assertThat(config.isShrinkWhitespacesInSql()).isTrue();
+      assertThat(config.isArgNameBasedConstructorAutoMapping()).isTrue();
       assertThat(config.getDefaultSqlProviderType().getName()).isEqualTo(MySqlProvider.class.getName());
 
       assertThat(config.getTypeAliasRegistry().getTypeAliases().get("blogauthor")).isEqualTo(Author.class);

File: src/test/java/org/apache/ibatis/builder/xsd/XmlConfigBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2020 the original author or authors.
+ *    Copyright 2009-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -85,6 +85,7 @@ void shouldSuccessfullyLoadMinimalXMLConfigFile() throws Exception {
       assertNull(config.getLogImpl());
       assertNull(config.getConfigurationFactory());
       assertFalse(config.isShrinkWhitespacesInSql());
+      assertFalse(config.isArgNameBasedConstructorAutoMapping());
     } finally {
       // System.clearProperty(XPathParser.KEY_USE_XSD);
     }
@@ -123,6 +124,7 @@ void shouldSuccessfullyLoadXMLConfigFile() throws Exception {
       assertEquals(JBoss6VFS.class.getName(), config.getVfsImpl().getName());
       assertEquals(String.class.getName(), config.getConfigurationFactory().getName());
       assertTrue(config.isShrinkWhitespacesInSql());
+      assertTrue(config.isArgNameBasedConstructorAutoMapping());
 
       assertEquals(Author.class, config.getTypeAliasRegistry().getTypeAliases().get("blogauthor"));
       assertEquals(Blog.class, config.getTypeAliasRegistry().getTypeAliases().get("blog"));

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -627,9 +627,9 @@ public LanguageDriver getLanguageDriver(Class<? extends LanguageDriver> langClas
   }
 
   /**
-   * Gets the default scripting lanuage instance.
+   * Gets the default scripting language instance.
    *
-   * @return the default scripting lanuage instance
+   * @return the default scripting language instance
    * @deprecated Use {@link #getDefaultScriptingLanguageInstance()}
    */
   @Deprecated

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -627,9 +627,9 @@ public LanguageDriver getLanguageDriver(Class<? extends LanguageDriver> langClas
   }
 
   /**
-   * Gets the default scripting lanuage instance.
+   * Gets the default scripting language instance.
    *
-   * @return the default scripting lanuage instance
+   * @return the default scripting language instance
    * @deprecated Use {@link #getDefaultScriptingLanguageInstance()}
    */
   @Deprecated

File: src/main/java/org/apache/ibatis/cache/decorators/TransactionalCache.java
Patch:
@@ -127,7 +127,7 @@ private void unlockMissedEntries() {
       try {
         delegate.removeObject(entry);
       } catch (Exception e) {
-        log.warn("Unexpected exception while notifiying a rollback to the cache adapter. "
+        log.warn("Unexpected exception while notifying a rollback to the cache adapter. "
             + "Consider upgrading your cache adapter to the latest version. Cause: " + e);
       }
     }

File: src/main/java/org/apache/ibatis/cache/decorators/TransactionalCache.java
Patch:
@@ -127,7 +127,7 @@ private void unlockMissedEntries() {
       try {
         delegate.removeObject(entry);
       } catch (Exception e) {
-        log.warn("Unexpected exception while notifiying a rollback to the cache adapter. "
+        log.warn("Unexpected exception while notifying a rollback to the cache adapter. "
             + "Consider upgrading your cache adapter to the latest version. Cause: " + e);
       }
     }

File: src/main/java/org/apache/ibatis/scripting/xmltags/OgnlCache.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -28,7 +28,7 @@
  *
  * @author Eduardo Macarron
  *
- * @see <a href='http://code.google.com/p/mybatis/issues/detail?id=342'>Issue 342</a>
+ * @see <a href='https://github.com/mybatis/old-google-code-issues/issues/342'>Issue 342</a>
  */
 public final class OgnlCache {
 

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -142,7 +142,7 @@ public class Configuration {
    * Configuration factory class.
    * Used to create Configuration for loading deserialized unread properties.
    *
-   * @see <a href='https://code.google.com/p/mybatis/issues/detail?id=300'>Issue 300 (google code)</a>
+   * @see <a href='https://github.com/mybatis/old-google-code-issues/issues/300'>Issue 300 (google code)</a>
    */
   protected Class<?> configurationFactory;
 

File: src/test/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSourceTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2019 the original author or authors.
+ *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,7 +30,7 @@ class UnpooledDataSourceTest {
 
   @Test
   void shouldNotRegisterTheSameDriverMultipleTimes() throws Exception {
-    // https://code.google.com/p/mybatis/issues/detail?id=430
+    // https://github.com/mybatis/old-google-code-issues/issues/430
     UnpooledDataSource dataSource = null;
     dataSource = new UnpooledDataSource("org.hsqldb.jdbcDriver", "jdbc:hsqldb:mem:multipledrivers", "sa", "");
     dataSource.getConnection().close();

File: src/test/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2019 the original author or authors.
+ *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -69,7 +69,7 @@ class DefaultResultSetHandlerTest {
   /**
    * Contrary to the spec, some drivers require case-sensitive column names when getting result.
    *
-   * @see <a href="http://code.google.com/p/mybatis/issues/detail?id=557">Issue 557</a>
+   * @see <a href="https://github.com/mybatis/old-google-code-issues/issues/557">Issue 557</a>
    */
   @Test
   void shouldRetainColumnNameCase() throws Exception {

File: src/test/java/org/apache/ibatis/submitted/refid_resolution/ExternalRefidResolutionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2019 the original author or authors.
+ *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,8 @@
 import org.junit.jupiter.api.Test;
 
 /**
- * @see http://code.google.com/p/mybatis/issues/detail?id=291
+ * @see <a href="https://github.com/mybatis/old-google-code-issues/issues/291>Issue 291</a>
+ *
  */
 class ExternalRefidResolutionTest {
   @Test

File: src/test/java/org/apache/ibatis/submitted/serializecircular/SerializeCircularTest.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.junit.jupiter.api.Test;
 
-//@Disabled("see issue #614")
 class SerializeCircularTest {
 
   @Test
@@ -41,7 +40,6 @@ void serializeAndDeserializeObjectsWithAggressiveLazyLoadingWithPreloadingAttrib
     }
   }
 
-  // @Disabled("See http://code.google.com/p/mybatis/issues/detail?id=614")
   @Test
   void serializeAndDeserializeObjectsWithoutAggressiveLazyLoadingWithoutPreloadingAttribute() throws Exception {
     try (SqlSession sqlSession = createSessionWithoutAggressiveLazyLoading()) {

File: src/test/java/org/apache/ibatis/reflection/factory/DefaultObjectFactoryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2019 the original author or authors.
+ *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -62,7 +62,7 @@ void createClassThrowsProperErrorMsg() {
   }
 
   @Test
-  void creatHashMap() {
+  void createHashMap() {
      DefaultObjectFactory defaultObjectFactory=new DefaultObjectFactory();
      Map  map= defaultObjectFactory.create(Map.class,null,null);
      Assertions.assertTrue(map instanceof HashMap, "Should be HashMap");

File: src/main/java/org/apache/ibatis/session/SqlSession.java
Patch:
@@ -50,7 +50,7 @@ public interface SqlSession extends Closeable {
   <T> T selectOne(String statement, Object parameter);
 
   /**
-   * Retrieve a list of mapped objects from the statement key and parameter.
+   * Retrieve a list of mapped objects from the statement key.
    * @param <E> the returned list element type
    * @param statement Unique identifier matching the statement to use.
    * @return List of mapped object

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -269,6 +269,7 @@ private void settingsElement(Properties props) {
     configuration.setLogPrefix(props.getProperty("logPrefix"));
     configuration.setConfigurationFactory(resolveClass(props.getProperty("configurationFactory")));
     configuration.setShrinkWhitespacesInSql(booleanValueOf(props.getProperty("shrinkWhitespacesInSql"), false));
+    configuration.setDefaultSqlProviderType(resolveClass(props.getProperty("defaultSqlProviderType")));
   }
 
   private void environmentsElement(XNode context) throws Exception {

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -245,7 +245,7 @@ public void setVfsImpl(Class<? extends VFS> vfsImpl) {
   }
 
   /**
-   * GEt an applying type when omit a type on sql provider annotation(e.g. {@link org.apache.ibatis.annotations.SelectProvider}).
+   * Gets an applying type when omit a type on sql provider annotation(e.g. {@link org.apache.ibatis.annotations.SelectProvider}).
    *
    * @return the default type for sql provider annotation
    * @since 3.5.6

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -269,6 +269,7 @@ private void settingsElement(Properties props) {
     configuration.setLogPrefix(props.getProperty("logPrefix"));
     configuration.setConfigurationFactory(resolveClass(props.getProperty("configurationFactory")));
     configuration.setShrinkWhitespacesInSql(booleanValueOf(props.getProperty("shrinkWhitespacesInSql"), false));
+    configuration.setDefaultSqlProviderType(resolveClass(props.getProperty("defaultSqlProviderType")));
   }
 
   private void environmentsElement(XNode context) throws Exception {

File: src/test/java/org/apache/ibatis/jdbc/PooledDataSourceTest.java
Patch:
@@ -121,7 +121,7 @@ void shouldReconnectWhenServerKilledLeakedConnection() throws Exception {
     ds.setPoolPingConnectionsNotUsedFor(1000);
 
     Connection con = ds.getConnection();
-    exexuteQuery(con);
+    executeQuery(con);
     // Simulate connection leak by not closing.
     // con.close();
 
@@ -132,11 +132,11 @@ void shouldReconnectWhenServerKilledLeakedConnection() throws Exception {
 
     // Should return usable connection.
     con = ds.getConnection();
-    exexuteQuery(con);
+    executeQuery(con);
     con.close();
   }
 
-  private void exexuteQuery(Connection con) throws SQLException {
+  private void executeQuery(Connection con) throws SQLException {
     try (PreparedStatement st = con.prepareStatement("select 1");
          ResultSet rs = st.executeQuery()) {
       while (rs.next()) {

File: src/test/java/org/apache/ibatis/jdbc/PooledDataSourceTest.java
Patch:
@@ -121,7 +121,7 @@ void shouldReconnectWhenServerKilledLeakedConnection() throws Exception {
     ds.setPoolPingConnectionsNotUsedFor(1000);
 
     Connection con = ds.getConnection();
-    exexuteQuery(con);
+    executeQuery(con);
     // Simulate connection leak by not closing.
     // con.close();
 
@@ -132,11 +132,11 @@ void shouldReconnectWhenServerKilledLeakedConnection() throws Exception {
 
     // Should return usable connection.
     con = ds.getConnection();
-    exexuteQuery(con);
+    executeQuery(con);
     con.close();
   }
 
-  private void exexuteQuery(Connection con) throws SQLException {
+  private void executeQuery(Connection con) throws SQLException {
     try (PreparedStatement st = con.prepareStatement("select 1");
          ResultSet rs = st.executeQuery()) {
       while (rs.next()) {

File: src/test/java/org/apache/ibatis/submitted/annotion_many_one_add_columnprefix/RoleDao.java
Patch:
@@ -15,12 +15,12 @@
  */
 package org.apache.ibatis.submitted.annotion_many_one_add_columnprefix;
 
+import java.util.List;
+
 import org.apache.ibatis.annotations.Result;
 import org.apache.ibatis.annotations.Results;
 import org.apache.ibatis.annotations.Select;
 
-import java.util.List;
-
 /**
  * @author lvyang
  */

File: src/test/java/org/apache/ibatis/submitted/annotion_many_one_add_resultmapid/RoleDao.java
Patch:
@@ -15,12 +15,12 @@
  */
 package org.apache.ibatis.submitted.annotion_many_one_add_resultmapid;
 
+import java.util.List;
+
 import org.apache.ibatis.annotations.Result;
 import org.apache.ibatis.annotations.Results;
 import org.apache.ibatis.annotations.Select;
 
-import java.util.List;
-
 /**
  * @author lvyang
  */

File: src/test/java/org/apache/ibatis/submitted/annotion_many_one_add_resultmapid/UserDao.java
Patch:
@@ -15,10 +15,10 @@
  */
 package org.apache.ibatis.submitted.annotion_many_one_add_resultmapid;
 
-import org.apache.ibatis.annotations.*;
-
 import java.util.List;
 
+import org.apache.ibatis.annotations.*;
+
 /**
  * @author lvyang
  */

File: src/main/java/org/apache/ibatis/io/JBoss6VFS.java
Patch:
@@ -140,7 +140,9 @@ protected static void checkReturnType(Method method, Class<?> expected) {
     }
   }
 
-  /** Mark this {@link VFS} as invalid for the current environment. */
+  /**
+   * Mark this {@link VFS} as invalid for the current environment.
+   */
   protected static void setInvalid() {
     if (JBoss6VFS.valid.booleanValue()) {
       log.debug("JBoss 6 VFS API is not available in this environment.");

File: src/main/java/org/apache/ibatis/io/VFS.java
Patch:
@@ -38,7 +38,9 @@ public abstract class VFS {
   /** The built-in implementations. */
   public static final Class<?>[] IMPLEMENTATIONS = { JBoss6VFS.class, DefaultVFS.class };
 
-  /** The list to which implementations are added by {@link #addImplClass(Class)}. */
+  /**
+   * The list to which implementations are added by {@link #addImplClass(Class)}.
+   */
   public static final List<Class<? extends VFS>> USER_IMPLEMENTATIONS = new ArrayList<>();
 
   /** Singleton instance holder. */

File: src/main/java/org/apache/ibatis/io/JBoss6VFS.java
Patch:
@@ -140,7 +140,9 @@ protected static void checkReturnType(Method method, Class<?> expected) {
     }
   }
 
-  /** Mark this {@link VFS} as invalid for the current environment. */
+  /**
+   * Mark this {@link VFS} as invalid for the current environment.
+   */
   protected static void setInvalid() {
     if (JBoss6VFS.valid.booleanValue()) {
       log.debug("JBoss 6 VFS API is not available in this environment.");

File: src/main/java/org/apache/ibatis/io/VFS.java
Patch:
@@ -38,7 +38,9 @@ public abstract class VFS {
   /** The built-in implementations. */
   public static final Class<?>[] IMPLEMENTATIONS = { JBoss6VFS.class, DefaultVFS.class };
 
-  /** The list to which implementations are added by {@link #addImplClass(Class)}. */
+  /**
+   * The list to which implementations are added by {@link #addImplClass(Class)}.
+   */
   public static final List<Class<? extends VFS>> USER_IMPLEMENTATIONS = new ArrayList<>();
 
   /** Singleton instance holder. */

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java
Patch:
@@ -76,7 +76,7 @@ public ProviderSqlSource(Configuration configuration, Object provider) {
    */
   @Deprecated
   public ProviderSqlSource(Configuration configuration, Object provider, Class<?> mapperType, Method mapperMethod) {
-    this(configuration, (Annotation) provider , mapperType, mapperMethod);
+    this(configuration, (Annotation) provider, mapperType, mapperMethod);
   }
 
   /**
@@ -162,8 +162,8 @@ private SqlSource createSqlSource(Object parameterObject) {
       String sql;
       if (parameterObject instanceof Map) {
         int bindParameterCount = providerMethodParameterTypes.length - (providerContext == null ? 0 : 1);
-        if (bindParameterCount == 1 &&
-            (providerMethodParameterTypes[Integer.valueOf(0).equals(providerContextIndex) ? 1 : 0].isAssignableFrom(parameterObject.getClass()))) {
+        if (bindParameterCount == 1
+            && providerMethodParameterTypes[Integer.valueOf(0).equals(providerContextIndex) ? 1 : 0].isAssignableFrom(parameterObject.getClass())) {
           sql = invokeProviderMethod(extractProviderMethodArguments(parameterObject));
         } else {
           @SuppressWarnings("unchecked")

File: src/main/java/org/apache/ibatis/cache/CacheKey.java
Patch:
@@ -30,10 +30,12 @@ public class CacheKey implements Cloneable, Serializable {
   private static final long serialVersionUID = 1146682552656046210L;
 
   public static final CacheKey NULL_CACHE_KEY = new CacheKey() {
+
     @Override
     public void update(Object object) {
       throw new CacheException("Not allowed to update a null cache key instance.");
     }
+
     @Override
     public void updateAll(Object[] objects) {
       throw new CacheException("Not allowed to update a null cache key instance.");

File: src/main/java/org/apache/ibatis/executor/resultset/ResultSetWrapper.java
Patch:
@@ -80,7 +80,7 @@ public List<JdbcType> getJdbcTypes() {
   }
 
   public JdbcType getJdbcType(String columnName) {
-    for (int i = 0 ; i < columnNames.size(); i++) {
+    for (int i = 0; i < columnNames.size(); i++) {
       if (columnNames.get(i).equalsIgnoreCase(columnName)) {
         return jdbcTypes.get(i);
       }

File: src/main/java/org/apache/ibatis/io/DefaultVFS.java
Patch:
@@ -122,11 +122,11 @@ public List<String> list(URL url, String path) throws IOException {
           if ("file".equals(url.getProtocol())) {
             File file = new File(url.getFile());
             if (log.isDebugEnabled()) {
-                log.debug("Listing directory " + file.getAbsolutePath());
+              log.debug("Listing directory " + file.getAbsolutePath());
             }
             if (file.isDirectory()) {
               if (log.isDebugEnabled()) {
-                  log.debug("Listing " + url);
+                log.debug("Listing " + url);
               }
               children = Arrays.asList(file.list());
             }

File: src/main/java/org/apache/ibatis/io/ResolverUtil.java
Patch:
@@ -289,8 +289,8 @@ protected void addIfMatching(Test test, String fqn) {
         matches.add((Class<T>) type);
       }
     } catch (Throwable t) {
-      log.warn("Could not examine class '" + fqn + "'" + " due to a " +
-          t.getClass().getName() + " with message: " + t.getMessage());
+      log.warn("Could not examine class '" + fqn + "'" + " due to a "
+          + t.getClass().getName() + " with message: " + t.getMessage());
     }
   }
 }

File: src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java
Patch:
@@ -52,7 +52,7 @@ public static String SQL() {
     try {
       return sql().toString();
     } finally {
-        RESET();
+      RESET();
     }
   }
 

File: src/main/java/org/apache/ibatis/type/ArrayTypeHandler.java
Patch:
@@ -39,6 +39,7 @@
 public class ArrayTypeHandler extends BaseTypeHandler<Object> {
 
   private static final ConcurrentHashMap<Class<?>, String> STANDARD_MAPPING;
+
   static {
     STANDARD_MAPPING = new ConcurrentHashMap<>();
     STANDARD_MAPPING.put(BigDecimal.class, JdbcType.NUMERIC.name());

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java
Patch:
@@ -276,6 +276,9 @@ public Properties getDriverProperties() {
   }
 
   /**
+   * Gets the default network timeout.
+   *
+   * @return the default network timeout
    * @since 3.5.2
    */
   public Integer getDefaultNetworkTimeout() {

File: src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java
Patch:
@@ -185,6 +185,9 @@ public void setDefaultTransactionIsolationLevel(Integer defaultTransactionIsolat
   }
 
   /**
+   * Gets the default network timeout.
+   *
+   * @return the default network timeout
    * @since 3.5.2
    */
   public Integer getDefaultNetworkTimeout() {

File: src/main/java/org/apache/ibatis/executor/resultset/ResultSetWrapper.java
Patch:
@@ -94,8 +94,10 @@ public JdbcType getJdbcType(String columnName) {
    * If not found it gets the column JDBC type and tries to get a handler for it.
    *
    * @param propertyType
+   *            the property type
    * @param columnName
-   * @return
+   *            the column name
+   * @return the type handler
    */
   public TypeHandler<?> getTypeHandler(Class<?> propertyType, String columnName) {
     TypeHandler<?> handler = null;

File: src/main/java/org/apache/ibatis/transaction/TransactionFactory.java
Patch:
@@ -32,6 +32,7 @@ public interface TransactionFactory {
   /**
    * Sets transaction factory custom properties.
    * @param props
+   *         the new properties
    */
   default void setProperties(Properties props) {
     // NOP

File: src/main/java/org/apache/ibatis/type/TypeAliasRegistry.java
Patch:
@@ -168,6 +168,9 @@ public void registerAlias(String alias, String value) {
   }
 
   /**
+   * Gets the type aliases.
+   *
+   * @return the type aliases
    * @since 3.2.2
    */
   public Map<String, Class<?>> getTypeAliases() {

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -475,6 +475,9 @@ public void register(String packageName) {
   // get information
 
   /**
+   * Gets the type handlers.
+   *
+   * @return the type handlers
    * @since 3.2.2
    */
   public Collection<TypeHandler<?>> getTypeHandlers() {

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java
Patch:
@@ -276,6 +276,9 @@ public Properties getDriverProperties() {
   }
 
   /**
+   * Gets the default network timeout.
+   *
+   * @return the default network timeout
    * @since 3.5.2
    */
   public Integer getDefaultNetworkTimeout() {

File: src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java
Patch:
@@ -185,6 +185,9 @@ public void setDefaultTransactionIsolationLevel(Integer defaultTransactionIsolat
   }
 
   /**
+   * Gets the default network timeout.
+   *
+   * @return the default network timeout
    * @since 3.5.2
    */
   public Integer getDefaultNetworkTimeout() {

File: src/main/java/org/apache/ibatis/executor/resultset/ResultSetWrapper.java
Patch:
@@ -94,8 +94,10 @@ public JdbcType getJdbcType(String columnName) {
    * If not found it gets the column JDBC type and tries to get a handler for it.
    *
    * @param propertyType
+   *            the property type
    * @param columnName
-   * @return
+   *            the column name
+   * @return the type handler
    */
   public TypeHandler<?> getTypeHandler(Class<?> propertyType, String columnName) {
     TypeHandler<?> handler = null;

File: src/main/java/org/apache/ibatis/transaction/TransactionFactory.java
Patch:
@@ -32,6 +32,7 @@ public interface TransactionFactory {
   /**
    * Sets transaction factory custom properties.
    * @param props
+   *         the new properties
    */
   default void setProperties(Properties props) {
     // NOP

File: src/main/java/org/apache/ibatis/type/TypeAliasRegistry.java
Patch:
@@ -168,6 +168,9 @@ public void registerAlias(String alias, String value) {
   }
 
   /**
+   * Gets the type aliases.
+   *
+   * @return the type aliases
    * @since 3.2.2
    */
   public Map<String, Class<?>> getTypeAliases() {

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -475,6 +475,9 @@ public void register(String packageName) {
   // get information
 
   /**
+   * Gets the type handlers.
+   *
+   * @return the type handlers
    * @since 3.2.2
    */
   public Collection<TypeHandler<?>> getTypeHandlers() {

File: src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java
Patch:
@@ -395,20 +395,20 @@ public String toString() {
   }
 
   private static class SafeAppendable {
-    private final Appendable a;
+    private final Appendable appendable;
     private boolean empty = true;
 
     public SafeAppendable(Appendable a) {
       super();
-      this.a = a;
+      this.appendable = a;
     }
 
     public SafeAppendable append(CharSequence s) {
       try {
         if (empty && s.length() > 0) {
           empty = false;
         }
-        a.append(s);
+        appendable.append(s);
       } catch (IOException e) {
         throw new RuntimeException(e);
       }

File: src/main/java/org/apache/ibatis/logging/LogFactory.java
Patch:
@@ -43,8 +43,8 @@ private LogFactory() {
     // disable construction
   }
 
-  public static Log getLog(Class<?> aClass) {
-    return getLog(aClass.getName());
+  public static Log getLog(Class<?> clazz) {
+    return getLog(clazz.getName());
   }
 
   public static Log getLog(String logger) {

File: src/main/java/org/apache/ibatis/io/JBoss6VFS.java
Patch:
@@ -36,7 +36,8 @@ public class JBoss6VFS extends VFS {
   /** A class that mimics a tiny subset of the JBoss VirtualFile class. */
   static class VirtualFile {
     static Class<?> VirtualFile;
-    static Method getPathNameRelativeTo, getChildrenRecursively;
+    static Method getPathNameRelativeTo;
+    static Method getChildrenRecursively;
 
     Object virtualFile;
 
@@ -138,7 +139,7 @@ protected static void checkReturnType(Method method, Class<?> expected) {
 
   /** Mark this {@link VFS} as invalid for the current environment. */
   protected static void setInvalid() {
-    if (JBoss6VFS.valid == Boolean.TRUE) {
+    if (JBoss6VFS.valid.booleanValue()) {
       log.debug("JBoss 6 VFS API is not available in this environment.");
       JBoss6VFS.valid = Boolean.FALSE;
     }

File: src/test/java/org/apache/ibatis/submitted/parent_childs/ParentChildTest.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.ibatis.session.SqlSession;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
-import org.junit.Ignore;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
@@ -62,7 +61,6 @@ void shouldGet2Parents() {
 
   // issue #1848
   @Test
-  @Ignore
   void shouldGet2ParentsWithConstructor() {
     try (SqlSession sqlSession = sqlSessionFactory.openSession()) {
       Mapper mapper = sqlSession.getMapper(Mapper.class);

File: src/test/java/org/apache/ibatis/submitted/parent_childs/Mapper.java
Patch:
@@ -20,5 +20,6 @@
 public interface Mapper {
 
   List<Parent> getParents();
+  List<Parent> getParentsWithConstructor();
 
 }

File: src/test/java/org/apache/ibatis/reflection/ReflectorTest.java
Patch:
@@ -212,7 +212,7 @@ public void setProp2(boolean arg) {}
     assertNotNull(reflector.getSetInvoker("prop1"));
 
     Class<?> paramType = reflector.getSetterType("prop2");
-    assertTrue(String.class.equals(paramType) || Integer.class.equals(paramType));
+    assertTrue(String.class.equals(paramType) || Integer.class.equals(paramType) || boolean.class.equals(paramType));
 
     Invoker ambiguousInvoker = reflector.getSetInvoker("prop2");
     Object[] param = String.class.equals(paramType)? new String[]{"x"} : new Integer[]{1};

File: src/test/java/org/apache/ibatis/submitted/annotion_many_one_add_columnprefix/OneManyColumnPrefixTest.java
Patch:
@@ -75,7 +75,7 @@ void shouldUseColumnPrefixWithOne() {
       assertNotNull(users);
       assertEquals(2, users.size());
       assertNotNull(users.get(0).getRole());
-      assertEquals("teacher", users.get(0).getRole().getRoleName());
+      assertEquals("teacher", users.get(0).getRole().getName());
     }
   }
 }

File: src/test/java/org/apache/ibatis/submitted/annotion_many_one_add_columnprefix/RoleDao.java
Patch:
@@ -18,7 +18,6 @@
 import org.apache.ibatis.annotations.Result;
 import org.apache.ibatis.annotations.Results;
 import org.apache.ibatis.annotations.Select;
-import org.apache.ibatis.submitted.annotion_many_one_add_resultmapid.Role;
 
 import java.util.List;
 
@@ -29,7 +28,7 @@ public interface RoleDao {
   @Select("select * from role")
   @Results(id = "roleMap1", value = {
     @Result(id = true, column = "id", property = "id"),
-    @Result(column = "name", property = "roleName")
+    @Result(column = "name", property = "name")
   })
   public List<Role> findAll();
 }

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2019 the original author or authors.
+ *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -393,9 +393,9 @@ private void register(Type javaType, JdbcType jdbcType, TypeHandler<?> handler)
       Map<JdbcType, TypeHandler<?>> map = typeHandlerMap.get(javaType);
       if (map == null || map == NULL_TYPE_HANDLER_MAP) {
         map = new HashMap<>();
-        typeHandlerMap.put(javaType, map);
       }
       map.put(jdbcType, handler);
+      typeHandlerMap.put(javaType, map);
     }
     allTypeHandlersMap.put(handler.getClass(), handler);
   }

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -393,9 +393,11 @@ private void register(Type javaType, JdbcType jdbcType, TypeHandler<?> handler)
       Map<JdbcType, TypeHandler<?>> map = typeHandlerMap.get(javaType);
       if (map == null || map == NULL_TYPE_HANDLER_MAP) {
         map = new HashMap<>();
+        map.put(jdbcType, handler);
         typeHandlerMap.put(javaType, map);
+      } else {
+        map.put(jdbcType, handler);
       }
-      map.put(jdbcType, handler);
     }
     allTypeHandlersMap.put(handler.getClass(), handler);
   }

File: src/main/java/org/apache/ibatis/binding/MapperProxy.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2019 the original author or authors.
+ *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -82,14 +82,14 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
       if (Object.class.equals(method.getDeclaringClass())) {
         return method.invoke(this, args);
       } else {
-        return cachedInvoker(proxy, method, args).invoke(proxy, method, args, sqlSession);
+        return cachedInvoker(method).invoke(proxy, method, args, sqlSession);
       }
     } catch (Throwable t) {
       throw ExceptionUtil.unwrapThrowable(t);
     }
   }
 
-  private MapperMethodInvoker cachedInvoker(Object proxy, Method method, Object[] args) throws Throwable {
+  private MapperMethodInvoker cachedInvoker(Method method) throws Throwable {
     try {
       return methodCache.computeIfAbsent(method, m -> {
         if (m.isDefault()) {

File: src/main/java/org/apache/ibatis/executor/keygen/Jdbc3KeyGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2019 the original author or authors.
+ *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -98,7 +98,7 @@ private void assignKeys(Configuration configuration, ResultSet rs, ResultSetMeta
     } else if (parameter instanceof ArrayList && !((ArrayList<?>) parameter).isEmpty()
         && ((ArrayList<?>) parameter).get(0) instanceof ParamMap) {
       // Multi-param or single param with @Param in batch operation
-      assignKeysToParamMapList(configuration, rs, rsmd, keyProperties, ((ArrayList<ParamMap<?>>) parameter));
+      assignKeysToParamMapList(configuration, rs, rsmd, keyProperties, (ArrayList<ParamMap<?>>) parameter);
     } else {
       // Single param without @Param
       assignKeysToParam(configuration, rs, rsmd, keyProperties, parameter);

File: src/main/java/org/apache/ibatis/binding/MapperProxy.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2019 the original author or authors.
+ *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -82,14 +82,14 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
       if (Object.class.equals(method.getDeclaringClass())) {
         return method.invoke(this, args);
       } else {
-        return cachedInvoker(proxy, method, args).invoke(proxy, method, args, sqlSession);
+        return cachedInvoker(method).invoke(proxy, method, args, sqlSession);
       }
     } catch (Throwable t) {
       throw ExceptionUtil.unwrapThrowable(t);
     }
   }
 
-  private MapperMethodInvoker cachedInvoker(Object proxy, Method method, Object[] args) throws Throwable {
+  private MapperMethodInvoker cachedInvoker(Method method) throws Throwable {
     try {
       return methodCache.computeIfAbsent(method, m -> {
         if (m.isDefault()) {

File: src/main/java/org/apache/ibatis/executor/keygen/Jdbc3KeyGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2019 the original author or authors.
+ *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -98,7 +98,7 @@ private void assignKeys(Configuration configuration, ResultSet rs, ResultSetMeta
     } else if (parameter instanceof ArrayList && !((ArrayList<?>) parameter).isEmpty()
         && ((ArrayList<?>) parameter).get(0) instanceof ParamMap) {
       // Multi-param or single param with @Param in batch operation
-      assignKeysToParamMapList(configuration, rs, rsmd, keyProperties, ((ArrayList<ParamMap<?>>) parameter));
+      assignKeysToParamMapList(configuration, rs, rsmd, keyProperties, (ArrayList<ParamMap<?>>) parameter);
     } else {
       // Single param without @Param
       assignKeysToParam(configuration, rs, rsmd, keyProperties, parameter);

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2019 the original author or authors.
+ *    Copyright 2009-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -151,7 +151,7 @@ public void setDriverProperties(Properties driverProps) {
 
   /**
    * Sets the default network timeout value to wait for the database operation to complete. See {@link Connection#setNetworkTimeout(java.util.concurrent.Executor, int)}
-   * 
+   *
    * @param milliseconds
    *          The time in milliseconds to wait for the database operation to complete.
    * @since 3.5.2

File: src/test/java/org/apache/ibatis/binding/MapperWithOneAndMany.java
Patch:
@@ -34,7 +34,7 @@ public interface MapperWithOneAndMany {
     @Result(
        property = "author", column = "author_id",
        one = @One(select = "org.apache.ibatis.binding.BoundAuthorMapper.selectAuthor"),
-       many = @Many(select = "selectPostsById"))
+       many = @Many(select = "org.apache.ibatis.binding.BoundBlogMapper.selectPostsById"))
   })
   List<Blog> selectWithBothOneAndMany();
 

File: src/test/java/org/apache/ibatis/binding/MapperWithOneAndMany.java
Patch:
@@ -34,7 +34,7 @@ public interface MapperWithOneAndMany {
     @Result(
        property = "author", column = "author_id",
        one = @One(select = "org.apache.ibatis.binding.BoundAuthorMapper.selectAuthor"),
-       many = @Many(select = "selectPostsById"))
+       many = @Many(select = "org.apache.ibatis.binding.BoundBlogMapper.selectPostsById"))
   })
   List<Blog> selectWithBothOneAndMany();
 

File: src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java
Patch:
@@ -179,7 +179,7 @@ private static Type scanSuperTypes(TypeVariable<?> typeVar, Type srcType, Class<
       }
       if (declaringClass == parentAsClass) {
         for (int i = 0; i < parentTypeVars.length; i++) {
-          if (typeVar == parentTypeVars[i]) {
+          if (typeVar.equals(parentTypeVars[i])) {
             return parentAsType.getActualTypeArguments()[i];
           }
         }
@@ -202,7 +202,7 @@ private static ParameterizedType translateParentTypeVars(ParameterizedType srcTy
     for (int i = 0; i < parentTypeArgs.length; i++) {
       if (parentTypeArgs[i] instanceof TypeVariable) {
         for (int j = 0; j < srcTypeVars.length; j++) {
-          if (srcTypeVars[j] == parentTypeArgs[i]) {
+          if (srcTypeVars[j].equals(parentTypeArgs[i])) {
             noChange = false;
             newParentArgs[i] = srcTypeArgs[j];
           }

File: src/main/java/org/apache/ibatis/builder/BaseBuilder.java
Patch:
@@ -102,7 +102,7 @@ protected Object createInstance(String alias) {
       return null;
     }
     try {
-      return resolveClass(alias).getDeclaredConstructor().newInstance();
+      return clazz.getDeclaredConstructor().newInstance();
     } catch (Exception e) {
       throw new BuilderException("Error creating instance. Cause: " + e, e);
     }

File: src/test/java/org/apache/ibatis/binding/BindingTest.java
Patch:
@@ -37,6 +37,7 @@
 
 import org.apache.ibatis.BaseDataTest;
 import org.apache.ibatis.builder.BuilderException;
+import org.apache.ibatis.binding.MapperProxy.MapperMethodInvoker;
 import org.apache.ibatis.cursor.Cursor;
 import org.apache.ibatis.domain.blog.Author;
 import org.apache.ibatis.domain.blog.Blog;
@@ -590,7 +591,7 @@ void shouldCacheMapperMethod() throws Exception {
       mapper.selectBlog(1);
       assertEquals(1, mapperProxyFactory.getMethodCache().size());
       assertTrue(mapperProxyFactory.getMethodCache().containsKey(selectBlog));
-      final MapperMethod cachedSelectBlog = mapperProxyFactory.getMethodCache().get(selectBlog);
+      final MapperMethodInvoker cachedSelectBlog = mapperProxyFactory.getMethodCache().get(selectBlog);
 
       // Call mapper method again and verify the cache is unchanged:
       session.clearCache();

File: src/test/java/org/apache/ibatis/binding/BindingTest.java
Patch:
@@ -37,6 +37,7 @@
 
 import org.apache.ibatis.BaseDataTest;
 import org.apache.ibatis.builder.BuilderException;
+import org.apache.ibatis.binding.MapperProxy.MapperMethodInvoker;
 import org.apache.ibatis.cursor.Cursor;
 import org.apache.ibatis.domain.blog.Author;
 import org.apache.ibatis.domain.blog.Blog;
@@ -590,7 +591,7 @@ void shouldCacheMapperMethod() throws Exception {
       mapper.selectBlog(1);
       assertEquals(1, mapperProxyFactory.getMethodCache().size());
       assertTrue(mapperProxyFactory.getMethodCache().containsKey(selectBlog));
-      final MapperMethod cachedSelectBlog = mapperProxyFactory.getMethodCache().get(selectBlog);
+      final MapperMethodInvoker cachedSelectBlog = mapperProxyFactory.getMethodCache().get(selectBlog);
 
       // Call mapper method again and verify the cache is unchanged:
       session.clearCache();

File: src/test/java/org/apache/ibatis/binding/BindingTest.java
Patch:
@@ -146,7 +146,7 @@ void verifyErrorMessageFromSelectKey() {
       try {
         BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);
         Author author = new Author(-1, "cbegin", "******", "cbegin@nowhere.com", "N/A", Section.NEWS);
-        when(mapper).insertAuthorInvalidSelectKey(author);
+        when(() -> mapper.insertAuthorInvalidSelectKey(author));
         then(caughtException()).isInstanceOf(PersistenceException.class).hasMessageContaining(
             "### The error may exist in org/apache/ibatis/binding/BoundAuthorMapper.xml" + System.lineSeparator() +
                 "### The error may involve org.apache.ibatis.binding.BoundAuthorMapper.insertAuthorInvalidSelectKey!selectKey" + System.lineSeparator() +
@@ -163,7 +163,7 @@ void verifyErrorMessageFromInsertAfterSelectKey() {
       try {
         BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);
         Author author = new Author(-1, "cbegin", "******", "cbegin@nowhere.com", "N/A", Section.NEWS);
-        when(mapper).insertAuthorInvalidInsert(author);
+        when(() -> mapper.insertAuthorInvalidInsert(author));
         then(caughtException()).isInstanceOf(PersistenceException.class).hasMessageContaining(
             "### The error may exist in org/apache/ibatis/binding/BoundAuthorMapper.xml" + System.lineSeparator() +
                 "### The error may involve org.apache.ibatis.binding.BoundAuthorMapper.insertAuthorInvalidInsert" + System.lineSeparator() +

File: src/test/java/org/apache/ibatis/mapping/CacheBuilderTest.java
Patch:
@@ -38,7 +38,7 @@ void testInitializing() {
 
   @Test
   void testInitializingFailure() {
-    when(new CacheBuilder("test").implementation(InitializingFailureCache.class)).build();
+    when(() -> new CacheBuilder("test").implementation(InitializingFailureCache.class).build());
     then(caughtException()).isInstanceOf(CacheException.class)
       .hasMessage("Failed cache initialization for 'test' on 'org.apache.ibatis.mapping.CacheBuilderTest$InitializingFailureCache'");
   }

File: src/test/java/org/apache/ibatis/scripting/LanguageDriverRegistryTest.java
Patch:
@@ -56,14 +56,14 @@ void registerByTypeSameType() {
 
   @Test
   void registerByTypeNull() {
-    when(registry).register((Class<? extends LanguageDriver>) null);
+    when(() -> registry.register((Class<? extends LanguageDriver>) null));
     then(caughtException()).isInstanceOf(IllegalArgumentException.class)
       .hasMessage("null is not a valid Language Driver");
   }
 
   @Test
   void registerByTypeDoesNotCreateNewInstance() {
-    when(registry).register(PrivateLanguageDriver.class);
+    when(() -> registry.register(PrivateLanguageDriver.class));
     then(caughtException()).isInstanceOf(ScriptingException.class)
       .hasMessage("Failed to load language driver for org.apache.ibatis.scripting.LanguageDriverRegistryTest$PrivateLanguageDriver");
   }
@@ -88,7 +88,7 @@ void registerByInstanceSameType() {
 
   @Test
   void registerByInstanceNull() {
-    when(registry).register((LanguageDriver) null);
+    when(() -> registry.register((LanguageDriver) null));
     then(caughtException()).isInstanceOf(IllegalArgumentException.class)
       .hasMessage("null is not a valid Language Driver");
   }

File: src/test/java/org/apache/ibatis/submitted/foreach/ForEachTest.java
Patch:
@@ -115,7 +115,7 @@ void nullItemInContext() {
   void shouldReportMissingPropertyName() {
     try (SqlSession sqlSession = sqlSessionFactory.openSession()) {
       Mapper mapper = sqlSession.getMapper(Mapper.class);
-      when(mapper).typoInItemProperty(Collections.singletonList(new User()));
+      when(() -> mapper.typoInItemProperty(Collections.singletonList(new User())));
       then(caughtException()).isInstanceOf(PersistenceException.class)
         .hasMessageContaining("There is no getter for property named 'idd' in 'class org.apache.ibatis.submitted.foreach.User'");
     }

File: src/test/java/org/apache/ibatis/submitted/mapper_extend/MapperExtendTest.java
Patch:
@@ -95,7 +95,7 @@ void shouldFindStatementInSubInterfaceOfDeclaringClass() {
   void shouldThrowExceptionIfNoMatchingStatementFound() {
     try (SqlSession sqlSession = sqlSessionFactory.openSession()) {
       Mapper mapper = sqlSession.getMapper(Mapper.class);
-      when(mapper).noMappedStatement();
+      when(mapper::noMappedStatement);
       then(caughtException()).isInstanceOf(BindingException.class)
         .hasMessage("Invalid bound statement (not found): "
           + Mapper.class.getName() + ".noMappedStatement");

File: src/test/java/org/apache/ibatis/submitted/named_constructor_args/InvalidNamedConstructorArgsTest.java
Patch:
@@ -60,7 +60,7 @@ interface NoMatchingConstructorMapper {
   @Test
   void noMatchingConstructorArgName() {
     Configuration configuration = sqlSessionFactory.getConfiguration();
-    when(configuration).addMapper(NoMatchingConstructorMapper.class);
+    when(() -> configuration.addMapper(NoMatchingConstructorMapper.class));
 
     then(caughtException()).isInstanceOf(BuilderException.class)
       .hasMessageContaining(
@@ -82,7 +82,7 @@ interface ConstructorWithWrongJavaType {
   @Test
   void wrongJavaType() {
     Configuration configuration = sqlSessionFactory.getConfiguration();
-    when(configuration).addMapper(ConstructorWithWrongJavaType.class);
+    when(() -> configuration.addMapper(ConstructorWithWrongJavaType.class));
     then(caughtException()).isInstanceOf(BuilderException.class)
       .hasMessageContaining(
           "'org.apache.ibatis.submitted.named_constructor_args.InvalidNamedConstructorArgsTest$ConstructorWithWrongJavaType.select-void'")
@@ -105,7 +105,7 @@ interface ConstructorMissingRequiresJavaType {
   @Test
   void missingRequiredJavaType() {
     Configuration configuration = sqlSessionFactory.getConfiguration();
-    when(configuration).addMapper(ConstructorMissingRequiresJavaType.class);
+    when(() -> configuration.addMapper(ConstructorMissingRequiresJavaType.class));
     then(caughtException()).isInstanceOf(BuilderException.class)
       .hasMessageContaining(
             "'org.apache.ibatis.submitted.named_constructor_args.InvalidNamedConstructorArgsTest$ConstructorMissingRequiresJavaType.select-void'")

File: src/test/java/org/apache/ibatis/submitted/results_id/IdConflictTest.java
Patch:
@@ -26,7 +26,7 @@ class IdConflictTest {
   @Test
   void shouldFailOnDuplicatedId() {
     Configuration configuration = new Configuration();
-    when(configuration).addMapper(IdConflictMapper.class);
+    when(() -> configuration.addMapper(IdConflictMapper.class));
     then(caughtException()).isInstanceOf(RuntimeException.class)
       .hasMessage("Result Maps collection already contains value for org.apache.ibatis.submitted.results_id.IdConflictMapper.userResult");
   }

File: src/main/java/org/apache/ibatis/cache/impl/PerpetualCache.java
Patch:
@@ -28,7 +28,7 @@ public class PerpetualCache implements Cache {
 
   private final String id;
 
-  private Map<Object, Object> cache = new HashMap<>();
+  private final Map<Object, Object> cache = new HashMap<>();
 
   public PerpetualCache(String id) {
     this.id = id;

File: src/main/java/org/apache/ibatis/reflection/ParamNameResolver.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,7 +30,7 @@
 
 public class ParamNameResolver {
 
-  private static final String GENERIC_NAME_PREFIX = "param";
+  public static final String GENERIC_NAME_PREFIX = "param";
 
   /**
    * <p>

File: src/main/java/org/apache/ibatis/builder/InitializingObject.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -16,15 +16,15 @@
 package org.apache.ibatis.builder;
 
 /**
- * Interface that indicate to provide a initialization method.
+ * Interface that indicate to provide an initialization method.
  *
  * @since 3.4.2
  * @author Kazuki Shimizu
  */
 public interface InitializingObject {
 
   /**
-   * Initialize a instance.
+   * Initialize an instance.
    * <p>
    * This method will be invoked after it has set all properties.
    * </p>

File: src/main/java/org/apache/ibatis/builder/InitializingObject.java
Patch:
@@ -16,15 +16,15 @@
 package org.apache.ibatis.builder;
 
 /**
- * Interface that indicate to provide a initialization method.
+ * Interface that indicate to provide an initialization method.
  *
  * @since 3.4.2
  * @author Kazuki Shimizu
  */
 public interface InitializingObject {
 
   /**
-   * Initialize a instance.
+   * Initialize an instance.
    * <p>
    * This method will be invoked after it has set all properties.
    * </p>

File: src/main/java/org/apache/ibatis/mapping/Environment.java
Patch:
@@ -43,7 +43,7 @@ public Environment(String id, TransactionFactory transactionFactory, DataSource
   }
 
   public static class Builder {
-    private String id;
+    private final String id;
     private TransactionFactory transactionFactory;
     private DataSource dataSource;
 

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -146,7 +146,7 @@ public class Configuration {
 
   protected final MapperRegistry mapperRegistry = new MapperRegistry(this);
   protected final InterceptorChain interceptorChain = new InterceptorChain();
-  protected final TypeHandlerRegistry typeHandlerRegistry = new TypeHandlerRegistry();
+  protected final TypeHandlerRegistry typeHandlerRegistry = new TypeHandlerRegistry(this);
   protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry();
   protected final LanguageDriverRegistry languageRegistry = new LanguageDriverRegistry();
 

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java
Patch:
@@ -232,7 +232,7 @@ public boolean equals(Object obj) {
   @Override
   public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
     String methodName = method.getName();
-    if (CLOSE.hashCode() == methodName.hashCode() && CLOSE.equals(methodName)) {
+    if (CLOSE.equals(methodName)) {
       dataSource.pushConnection(this);
       return null;
     }

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -146,7 +146,7 @@ public class Configuration {
 
   protected final MapperRegistry mapperRegistry = new MapperRegistry(this);
   protected final InterceptorChain interceptorChain = new InterceptorChain();
-  protected final TypeHandlerRegistry typeHandlerRegistry = new TypeHandlerRegistry();
+  protected final TypeHandlerRegistry typeHandlerRegistry = new TypeHandlerRegistry(this);
   protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry();
   protected final LanguageDriverRegistry languageRegistry = new LanguageDriverRegistry();
 

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java
Patch:
@@ -232,7 +232,7 @@ public boolean equals(Object obj) {
   @Override
   public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
     String methodName = method.getName();
-    if (CLOSE.hashCode() == methodName.hashCode() && CLOSE.equals(methodName)) {
+    if (CLOSE.equals(methodName)) {
       dataSource.pushConnection(this);
       return null;
     }

File: src/main/java/org/apache/ibatis/executor/ErrorContext.java
Patch:
@@ -131,7 +131,7 @@ public String toString() {
       description.append(activity);
     }
 
-    // activity
+    // sql
     if (sql != null) {
       description.append(LINE_SEPARATOR);
       description.append("### SQL: ");

File: src/main/java/org/apache/ibatis/executor/ErrorContext.java
Patch:
@@ -131,7 +131,7 @@ public String toString() {
       description.append(activity);
     }
 
-    // activity
+    // sql
     if (sql != null) {
       description.append(LINE_SEPARATOR);
       description.append("### SQL: ");

File: src/main/java/org/apache/ibatis/cache/CacheKey.java
Patch:
@@ -40,7 +40,7 @@ public void updateAll(Object[] objects) {
     }
   };
 
-  private static final int DEFAULT_MULTIPLYER = 37;
+  private static final int DEFAULT_MULTIPLIER = 37;
   private static final int DEFAULT_HASHCODE = 17;
 
   private final int multiplier;
@@ -52,7 +52,7 @@ public void updateAll(Object[] objects) {
 
   public CacheKey() {
     this.hashcode = DEFAULT_HASHCODE;
-    this.multiplier = DEFAULT_MULTIPLYER;
+    this.multiplier = DEFAULT_MULTIPLIER;
     this.count = 0;
     this.updateList = new ArrayList<>();
   }

File: src/main/java/org/apache/ibatis/cache/CacheKey.java
Patch:
@@ -40,7 +40,7 @@ public void updateAll(Object[] objects) {
     }
   };
 
-  private static final int DEFAULT_MULTIPLYER = 37;
+  private static final int DEFAULT_MULTIPLIER = 37;
   private static final int DEFAULT_HASHCODE = 17;
 
   private final int multiplier;
@@ -52,7 +52,7 @@ public void updateAll(Object[] objects) {
 
   public CacheKey() {
     this.hashcode = DEFAULT_HASHCODE;
-    this.multiplier = DEFAULT_MULTIPLYER;
+    this.multiplier = DEFAULT_MULTIPLIER;
     this.count = 0;
     this.updateList = new ArrayList<>();
   }

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -102,9 +102,10 @@ protected <E> Cursor<E> doQueryCursor(MappedStatement ms, Object parameter, RowB
     StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, null, boundSql);
     Connection connection = getConnection(ms.getStatementLog());
     Statement stmt = handler.prepare(connection, transaction.getTimeout());
-    stmt.closeOnCompletion();
     handler.parameterize(stmt);
-    return handler.queryCursor(stmt);
+    Cursor<E> cursor = handler.queryCursor(stmt);
+    stmt.closeOnCompletion();
+    return cursor;
   }
 
   @Override

File: src/main/java/org/apache/ibatis/executor/SimpleExecutor.java
Patch:
@@ -71,8 +71,9 @@ protected <E> Cursor<E> doQueryCursor(MappedStatement ms, Object parameter, RowB
     Configuration configuration = ms.getConfiguration();
     StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, null, boundSql);
     Statement stmt = prepareStatement(handler, ms.getStatementLog());
+    Cursor<E> cursor = handler.queryCursor(stmt);
     stmt.closeOnCompletion();
-    return handler.queryCursor(stmt);
+    return cursor;
   }
 
   @Override

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -102,9 +102,10 @@ protected <E> Cursor<E> doQueryCursor(MappedStatement ms, Object parameter, RowB
     StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, null, boundSql);
     Connection connection = getConnection(ms.getStatementLog());
     Statement stmt = handler.prepare(connection, transaction.getTimeout());
-    stmt.closeOnCompletion();
     handler.parameterize(stmt);
-    return handler.queryCursor(stmt);
+    Cursor<E> cursor = handler.queryCursor(stmt);
+    stmt.closeOnCompletion();
+    return cursor;
   }
 
   @Override

File: src/main/java/org/apache/ibatis/executor/SimpleExecutor.java
Patch:
@@ -71,8 +71,9 @@ protected <E> Cursor<E> doQueryCursor(MappedStatement ms, Object parameter, RowB
     Configuration configuration = ms.getConfiguration();
     StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, null, boundSql);
     Statement stmt = prepareStatement(handler, ms.getStatementLog());
+    Cursor<E> cursor = handler.queryCursor(stmt);
     stmt.closeOnCompletion();
-    return handler.queryCursor(stmt);
+    return cursor;
   }
 
   @Override

File: src/main/java/org/apache/ibatis/cache/NullCacheKey.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,7 +17,9 @@
 
 /**
  * @author Clinton Begin
+ * @deprecated Since 3.5.3, This class never used and will be removed future version.
  */
+@Deprecated
 public final class NullCacheKey extends CacheKey {
 
   private static final long serialVersionUID = 3704229911977019465L;

File: src/main/java/org/apache/ibatis/parsing/XPathParser.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.List;
 import java.util.Properties;
 
+import javax.xml.XMLConstants;
 import javax.xml.namespace.QName;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
@@ -230,6 +231,7 @@ private Document createDocument(InputSource inputSource) {
     // important: this must only be called AFTER common constructor
     try {
       DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+      factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
       factory.setValidating(validation);
 
       factory.setNamespaceAware(false);
@@ -253,6 +255,7 @@ public void fatalError(SAXParseException exception) throws SAXException {
 
         @Override
         public void warning(SAXParseException exception) throws SAXException {
+          // NOP
         }
       });
       return builder.parse(inputSource);

File: src/main/java/org/apache/ibatis/cache/NullCacheKey.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,7 +17,9 @@
 
 /**
  * @author Clinton Begin
+ * @deprecated Since 3.5.3, This class never used and will be removed future version.
  */
+@Deprecated
 public final class NullCacheKey extends CacheKey {
 
   private static final long serialVersionUID = 3704229911977019465L;

File: src/main/java/org/apache/ibatis/parsing/XPathParser.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.List;
 import java.util.Properties;
 
+import javax.xml.XMLConstants;
 import javax.xml.namespace.QName;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
@@ -230,6 +231,7 @@ private Document createDocument(InputSource inputSource) {
     // important: this must only be called AFTER common constructor
     try {
       DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+      factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
       factory.setValidating(validation);
 
       factory.setNamespaceAware(false);
@@ -253,6 +255,7 @@ public void fatalError(SAXParseException exception) throws SAXException {
 
         @Override
         public void warning(SAXParseException exception) throws SAXException {
+          // NOP
         }
       });
       return builder.parse(inputSource);

File: src/test/java/org/apache/ibatis/builder/xsd/XmlConfigBuilderTest.java
Patch:
@@ -90,7 +90,7 @@ void shouldSuccessfullyLoadMinimalXMLConfigFile() throws Exception {
   }
 
   @Test
-  void shouldSuccessfullyLoadXMLConfigFitle() throws Exception {
+  void shouldSuccessfullyLoadXMLConfigFile() throws Exception {
     // System.setProperty(XPathParser.KEY_USE_XSD, "true");
     String resource = "org/apache/ibatis/builder/xsd/CustomizedSettingsMapperConfig.xml";
     try (InputStream inputStream = Resources.getResourceAsStream(resource)) {

File: src/test/java/org/apache/ibatis/builder/xsd/XmlConfigBuilderTest.java
Patch:
@@ -90,7 +90,7 @@ void shouldSuccessfullyLoadMinimalXMLConfigFile() throws Exception {
   }
 
   @Test
-  void shouldSuccessfullyLoadXMLConfigFitle() throws Exception {
+  void shouldSuccessfullyLoadXMLConfigFile() throws Exception {
     // System.setProperty(XPathParser.KEY_USE_XSD, "true");
     String resource = "org/apache/ibatis/builder/xsd/CustomizedSettingsMapperConfig.xml";
     try (InputStream inputStream = Resources.getResourceAsStream(resource)) {

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java
Patch:
@@ -173,7 +173,7 @@ private SqlSource createSqlSource(Object parameterObject) {
   private Throwable extractRootCause(Exception e) {
     Throwable cause = e;
     while(cause.getCause() != null) {
-      cause = e.getCause();
+      cause = cause.getCause();
     }
     return cause;
   }

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java
Patch:
@@ -116,10 +116,11 @@ public BoundSql getBoundSql(Object parameterObject) {
 
   private SqlSource createSqlSource(Object parameterObject) {
     try {
-      int bindParameterCount = providerMethodParameterTypes.length - (providerContext == null ? 0 : 1);
       String sql;
       if (parameterObject instanceof Map) {
-        if (bindParameterCount == 1 && providerMethodParameterTypes[0] == Map.class) {
+        int bindParameterCount = providerMethodParameterTypes.length - (providerContext == null ? 0 : 1);
+        if (bindParameterCount == 1 &&
+          (providerMethodParameterTypes[Integer.valueOf(0).equals(providerContextIndex) ? 1 : 0].isAssignableFrom(parameterObject.getClass()))) {
           sql = invokeProviderMethod(extractProviderMethodArguments(parameterObject));
         } else {
           @SuppressWarnings("unchecked")

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java
Patch:
@@ -116,10 +116,11 @@ public BoundSql getBoundSql(Object parameterObject) {
 
   private SqlSource createSqlSource(Object parameterObject) {
     try {
-      int bindParameterCount = providerMethodParameterTypes.length - (providerContext == null ? 0 : 1);
       String sql;
       if (parameterObject instanceof Map) {
-        if (bindParameterCount == 1 && providerMethodParameterTypes[0] == Map.class) {
+        int bindParameterCount = providerMethodParameterTypes.length - (providerContext == null ? 0 : 1);
+        if (bindParameterCount == 1 &&
+          (providerMethodParameterTypes[Integer.valueOf(0).equals(providerContextIndex) ? 1 : 0].isAssignableFrom(parameterObject.getClass()))) {
           sql = invokeProviderMethod(extractProviderMethodArguments(parameterObject));
         } else {
           @SuppressWarnings("unchecked")

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -253,6 +253,7 @@ private void settingsElement(Properties props) {
     configuration.setDefaultExecutorType(ExecutorType.valueOf(props.getProperty("defaultExecutorType", "SIMPLE")));
     configuration.setDefaultStatementTimeout(integerValueOf(props.getProperty("defaultStatementTimeout"), null));
     configuration.setDefaultFetchSize(integerValueOf(props.getProperty("defaultFetchSize"), null));
+    configuration.setDefaultResultSetType(resolveResultSetType(props.getProperty("defaultResultSetType")));
     configuration.setMapUnderscoreToCamelCase(booleanValueOf(props.getProperty("mapUnderscoreToCamelCase"), false));
     configuration.setSafeRowBoundsEnabled(booleanValueOf(props.getProperty("safeRowBoundsEnabled"), false));
     configuration.setLocalCacheScope(LocalCacheScope.valueOf(props.getProperty("localCacheScope", "SESSION")));

File: src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java
Patch:
@@ -103,6 +103,9 @@ public void parseStatementNode() {
     String resultMap = context.getStringAttribute("resultMap");
     String resultSetType = context.getStringAttribute("resultSetType");
     ResultSetType resultSetTypeEnum = resolveResultSetType(resultSetType);
+    if (resultSetTypeEnum == null) {
+      resultSetTypeEnum = configuration.getDefaultResultSetType();
+    }
     String keyProperty = context.getStringAttribute("keyProperty");
     String keyColumn = context.getStringAttribute("keyColumn");
     String resultSets = context.getStringAttribute("resultSets");

File: src/test/java/org/apache/ibatis/builder/XmlConfigBuilderTest.java
Patch:
@@ -41,6 +41,7 @@
 import org.apache.ibatis.io.Resources;
 import org.apache.ibatis.logging.slf4j.Slf4jImpl;
 import org.apache.ibatis.mapping.Environment;
+import org.apache.ibatis.mapping.ResultSetType;
 import org.apache.ibatis.scripting.defaults.RawLanguageDriver;
 import org.apache.ibatis.scripting.xmltags.XMLLanguageDriver;
 import org.apache.ibatis.session.AutoMappingBehavior;
@@ -86,6 +87,7 @@ void shouldSuccessfullyLoadMinimalXMLConfigFile() throws Exception {
       assertThat(config.getDefaultExecutorType()).isEqualTo(ExecutorType.SIMPLE);
       assertNull(config.getDefaultStatementTimeout());
       assertNull(config.getDefaultFetchSize());
+      assertNull(config.getDefaultResultSetType());
       assertThat(config.isMapUnderscoreToCamelCase()).isFalse();
       assertThat(config.isSafeRowBoundsEnabled()).isFalse();
       assertThat(config.getLocalCacheScope()).isEqualTo(LocalCacheScope.SESSION);
@@ -179,6 +181,7 @@ void shouldSuccessfullyLoadXMLConfigFile() throws Exception {
       assertThat(config.getDefaultExecutorType()).isEqualTo(ExecutorType.BATCH);
       assertThat(config.getDefaultStatementTimeout()).isEqualTo(10);
       assertThat(config.getDefaultFetchSize()).isEqualTo(100);
+      assertThat(config.getDefaultResultSetType()).isEqualTo(ResultSetType.SCROLL_INSENSITIVE);
       assertThat(config.isMapUnderscoreToCamelCase()).isTrue();
       assertThat(config.isSafeRowBoundsEnabled()).isTrue();
       assertThat(config.getLocalCacheScope()).isEqualTo(LocalCacheScope.STATEMENT);

File: src/main/java/org/apache/ibatis/annotations/Lang.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -15,14 +15,14 @@
  */
 package org.apache.ibatis.annotations;
 
-import org.apache.ibatis.scripting.LanguageDriver;
-
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.apache.ibatis.scripting.LanguageDriver;
+
 /**
  * @author Clinton Begin
  */

File: src/main/java/org/apache/ibatis/annotations/Options.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -35,7 +35,7 @@
    * The options for the {@link Options#flushCache()}.
    * The default is {@link FlushCachePolicy#DEFAULT}
    */
-  public enum FlushCachePolicy {
+  enum FlushCachePolicy {
     /** <code>false</code> for select statement; <code>true</code> for insert/update/delete statement. */
     DEFAULT,
     /** Flushes cache regardless of the statement type. */
@@ -61,6 +61,6 @@ public enum FlushCachePolicy {
   String keyProperty() default "";
 
   String keyColumn() default "";
-  
+
   String resultSets() default "";
 }

File: src/main/java/org/apache/ibatis/annotations/ResultType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
  * ResultHandler.  Those methods must have void return type, so
  * this annotation can be used to tell MyBatis what kind of object
  * it should build for each row.
- * 
+ *
  * @since 3.2.0
  * @author Jeff Butler
  */

File: src/main/java/org/apache/ibatis/builder/BaseBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -59,7 +59,7 @@ protected Integer integerValueOf(String value, Integer defaultValue) {
   }
 
   protected Set<String> stringSetValueOf(String value, String defaultValue) {
-    value = (value == null ? defaultValue : value);
+    value = value == null ? defaultValue : value;
     return new HashSet<>(Arrays.asList(value.split(",")));
   }
 
@@ -127,7 +127,7 @@ protected TypeHandler<?> resolveTypeHandler(Class<?> javaType, String typeHandle
     if (type != null && !TypeHandler.class.isAssignableFrom(type)) {
       throw new BuilderException("Type " + type.getName() + " is not a valid TypeHandler because it does not implement TypeHandler interface");
     }
-    @SuppressWarnings( "unchecked" ) // already verified it is a TypeHandler
+    @SuppressWarnings("unchecked") // already verified it is a TypeHandler
     Class<? extends TypeHandler<?>> typeHandlerType = (Class<? extends TypeHandler<?>>) type;
     return resolveTypeHandler(javaType, typeHandlerType);
   }

File: src/main/java/org/apache/ibatis/builder/ParameterExpression.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -19,7 +19,7 @@
 
 /**
  * Inline parameter expression parser. Supported grammar (simplified):
- * 
+ *
  * <pre>
  * inline-parameter = (propertyName | expression) oldJdbcType attributes
  * propertyName = /expression language's property navigation path/

File: src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -33,7 +33,7 @@
  */
 public class SqlSourceBuilder extends BaseBuilder {
 
-  private static final String parameterProperties = "javaType,jdbcType,mode,numericScale,resultMap,typeHandler,jdbcTypeName";
+  private static final String PARAMETER_PROPERTIES = "javaType,jdbcType,mode,numericScale,resultMap,typeHandler,jdbcTypeName";
 
   public SqlSourceBuilder(Configuration configuration) {
     super(configuration);
@@ -114,7 +114,7 @@ private ParameterMapping buildParameterMapping(String content) {
         } else if ("expression".equals(name)) {
           throw new BuilderException("Expression based parameters are not supported yet");
         } else {
-          throw new BuilderException("An invalid property '" + name + "' was found in mapping #{" + content + "}.  Valid properties are " + parameterProperties);
+          throw new BuilderException("An invalid property '" + name + "' was found in mapping #{" + content + "}.  Valid properties are " + PARAMETER_PROPERTIES);
         }
       }
       if (typeHandlerAlias != null) {

File: src/main/java/org/apache/ibatis/cache/TransactionalCacheManager.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@ public void clear(Cache cache) {
   public Object getObject(Cache cache, CacheKey key) {
     return getTransactionalCache(cache).getObject(key);
   }
-  
+
   public void putObject(Cache cache, CacheKey key, Object value) {
     getTransactionalCache(cache).putObject(key, value);
   }

File: src/main/java/org/apache/ibatis/datasource/pooled/PoolState.java
Patch:
@@ -89,7 +89,7 @@ public synchronized String toString() {
     builder.append("\n jdbcDriver                     ").append(dataSource.getDriver());
     builder.append("\n jdbcUrl                        ").append(dataSource.getUrl());
     builder.append("\n jdbcUsername                   ").append(dataSource.getUsername());
-    builder.append("\n jdbcPassword                   ").append((dataSource.getPassword() == null ? "NULL" : "************"));
+    builder.append("\n jdbcPassword                   ").append(dataSource.getPassword() == null ? "NULL" : "************");
     builder.append("\n poolMaxActiveConnections       ").append(dataSource.poolMaximumActiveConnections);
     builder.append("\n poolMaxIdleConnections         ").append(dataSource.poolMaximumIdleConnections);
     builder.append("\n poolMaxCheckoutTime            ").append(dataSource.poolMaximumCheckoutTime);

File: src/main/java/org/apache/ibatis/executor/ReuseExecutor.java
Patch:
@@ -57,19 +57,19 @@ public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBo
     Configuration configuration = ms.getConfiguration();
     StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);
     Statement stmt = prepareStatement(handler, ms.getStatementLog());
-    return handler.<E>query(stmt, resultHandler);
+    return handler.query(stmt, resultHandler);
   }
 
   @Override
   protected <E> Cursor<E> doQueryCursor(MappedStatement ms, Object parameter, RowBounds rowBounds, BoundSql boundSql) throws SQLException {
     Configuration configuration = ms.getConfiguration();
     StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, null, boundSql);
     Statement stmt = prepareStatement(handler, ms.getStatementLog());
-    return handler.<E>queryCursor(stmt);
+    return handler.queryCursor(stmt);
   }
 
   @Override
-  public List<BatchResult> doFlushStatements(boolean isRollback) throws SQLException {
+  public List<BatchResult> doFlushStatements(boolean isRollback) {
     for (Statement stmt : statementMap.values()) {
       closeStatement(stmt);
     }

File: src/main/java/org/apache/ibatis/executor/loader/AbstractSerialStateHolder.java
Patch:
@@ -109,7 +109,7 @@ protected final Object readResolve() throws ObjectStreamException {
     }
 
     /* First run */
-    try (final ObjectInputStream in = new LookAheadObjectInputStream(new ByteArrayInputStream(this.userBeanBytes))) {
+    try (ObjectInputStream in = new LookAheadObjectInputStream(new ByteArrayInputStream(this.userBeanBytes))) {
       this.userBean = in.readObject();
       this.unloadedProperties = (Map<String, ResultLoaderMap.LoadPair>) in.readObject();
       this.objectFactory = (ObjectFactory) in.readObject();

File: src/main/java/org/apache/ibatis/executor/parameter/ParameterHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -19,7 +19,7 @@
 import java.sql.SQLException;
 
 /**
- * A parameter handler sets the parameters of the {@code PreparedStatement}
+ * A parameter handler sets the parameters of the {@code PreparedStatement}.
  *
  * @author Clinton Begin
  */

File: src/main/java/org/apache/ibatis/executor/result/DefaultResultHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -39,7 +39,7 @@ public DefaultResultHandler(ObjectFactory objectFactory) {
   }
 
   @Override
-  public void handleResult(ResultContext<? extends Object> context) {
+  public void handleResult(ResultContext<?> context) {
     list.add(context.getResultObject());
   }
 

File: src/main/java/org/apache/ibatis/executor/resultset/ResultSetHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -15,13 +15,13 @@
  */
 package org.apache.ibatis.executor.resultset;
 
-import org.apache.ibatis.cursor.Cursor;
-
 import java.sql.CallableStatement;
 import java.sql.SQLException;
 import java.sql.Statement;
 import java.util.List;
 
+import org.apache.ibatis.cursor.Cursor;
+
 /**
  * @author Clinton Begin
  */

File: src/main/java/org/apache/ibatis/executor/resultset/ResultSetWrapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -91,7 +91,7 @@ public JdbcType getJdbcType(String columnName) {
    * Gets the type handler to use when reading the result set.
    * Tries to get from the TypeHandlerRegistry by searching for the property type.
    * If not found it gets the column JDBC type and tries to get a handler for it.
-   * 
+   *
    * @param propertyType
    * @param columnName
    * @return
@@ -190,5 +190,5 @@ private Set<String> prependPrefixes(Set<String> columnNames, String prefix) {
     }
     return prefixed;
   }
-  
+
 }

File: src/main/java/org/apache/ibatis/executor/statement/CallableStatementHandler.java
Patch:
@@ -66,7 +66,7 @@ public void batch(Statement statement) throws SQLException {
   public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {
     CallableStatement cs = (CallableStatement) statement;
     cs.execute();
-    List<E> resultList = resultSetHandler.<E>handleResultSets(cs);
+    List<E> resultList = resultSetHandler.handleResultSets(cs);
     resultSetHandler.handleOutputParameters(cs);
     return resultList;
   }
@@ -75,7 +75,7 @@ public <E> List<E> query(Statement statement, ResultHandler resultHandler) throw
   public <E> Cursor<E> queryCursor(Statement statement) throws SQLException {
     CallableStatement cs = (CallableStatement) statement;
     cs.execute();
-    Cursor<E> resultList = resultSetHandler.<E>handleCursorResultSets(cs);
+    Cursor<E> resultList = resultSetHandler.handleCursorResultSets(cs);
     resultSetHandler.handleOutputParameters(cs);
     return resultList;
   }

File: src/main/java/org/apache/ibatis/executor/statement/PreparedStatementHandler.java
Patch:
@@ -62,14 +62,14 @@ public void batch(Statement statement) throws SQLException {
   public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {
     PreparedStatement ps = (PreparedStatement) statement;
     ps.execute();
-    return resultSetHandler.<E> handleResultSets(ps);
+    return resultSetHandler.handleResultSets(ps);
   }
 
   @Override
   public <E> Cursor<E> queryCursor(Statement statement) throws SQLException {
     PreparedStatement ps = (PreparedStatement) statement;
     ps.execute();
-    return resultSetHandler.<E> handleCursorResultSets(ps);
+    return resultSetHandler.handleCursorResultSets(ps);
   }
 
   @Override

File: src/main/java/org/apache/ibatis/executor/statement/RoutingStatementHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -76,7 +76,7 @@ public int update(Statement statement) throws SQLException {
 
   @Override
   public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {
-    return delegate.<E>query(statement, resultHandler);
+    return delegate.query(statement, resultHandler);
   }
 
   @Override

File: src/main/java/org/apache/ibatis/executor/statement/SimpleStatementHandler.java
Patch:
@@ -72,14 +72,14 @@ public void batch(Statement statement) throws SQLException {
   public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {
     String sql = boundSql.getSql();
     statement.execute(sql);
-    return resultSetHandler.<E>handleResultSets(statement);
+    return resultSetHandler.handleResultSets(statement);
   }
 
   @Override
   public <E> Cursor<E> queryCursor(Statement statement) throws SQLException {
     String sql = boundSql.getSql();
     statement.execute(sql);
-    return resultSetHandler.<E>handleCursorResultSets(statement);
+    return resultSetHandler.handleCursorResultSets(statement);
   }
 
   @Override
@@ -92,7 +92,7 @@ protected Statement instantiateStatement(Connection connection) throws SQLExcept
   }
 
   @Override
-  public void parameterize(Statement statement) throws SQLException {
+  public void parameterize(Statement statement) {
     // N/A
   }
 

File: src/main/java/org/apache/ibatis/io/ClassLoaderWrapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -32,10 +32,10 @@ public class ClassLoaderWrapper {
     try {
       systemClassLoader = ClassLoader.getSystemClassLoader();
     } catch (SecurityException ignored) {
-      // AccessControlException on Google App Engine   
+      // AccessControlException on Google App Engine
     }
   }
-  
+
   /**
    * Get a resource as a URL using the current class path
    *

File: src/main/java/org/apache/ibatis/io/ResolverUtil.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -233,7 +233,7 @@ public ResolverUtil<T> find(Test test, String packageName) {
   /**
    * Converts a Java package name to a path that can be looked up with a call to
    * {@link ClassLoader#getResources(String)}.
-   * 
+   *
    * @param packageName The Java package name to convert to a path
    */
   protected String getPackagePath(String packageName) {
@@ -265,4 +265,4 @@ protected void addIfMatching(Test test, String fqn) {
           t.getClass().getName() + " with message: " + t.getMessage());
     }
   }
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/jdbc/Null.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -72,7 +72,7 @@ public enum Null {
   private TypeHandler<?> typeHandler;
   private JdbcType jdbcType;
 
-  private Null(TypeHandler<?> typeHandler, JdbcType jdbcType) {
+  Null(TypeHandler<?> typeHandler, JdbcType jdbcType) {
     this.typeHandler = typeHandler;
     this.jdbcType = jdbcType;
   }

File: src/main/java/org/apache/ibatis/jdbc/SelectBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,7 +17,7 @@
 
 /**
  * @deprecated Use the {@link SQL} Class
- * 
+ *
  * @author Clinton Begin
  */
 @Deprecated

File: src/main/java/org/apache/ibatis/jdbc/SqlRunner.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -248,7 +248,7 @@ private List<Map<String, Object>> getResults(ResultSet rs) throws SQLException {
     } finally {
       if (rs != null) {
         try {
-            rs.close();
+          rs.close();
         } catch (Exception e) {
           // ignore
         }

File: src/main/java/org/apache/ibatis/jdbc/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * Utilities for JDBC.
  */
 package org.apache.ibatis.jdbc;

File: src/main/java/org/apache/ibatis/logging/LogFactory.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,7 +24,7 @@
 public final class LogFactory {
 
   /**
-   * Marker to be used by logging implementations that support markers
+   * Marker to be used by logging implementations that support markers.
    */
   public static final String MARKER = "MYBATIS";
 

File: src/main/java/org/apache/ibatis/logging/commons/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * logger using Commons Logging feature.
  */
 package org.apache.ibatis.logging.commons;

File: src/main/java/org/apache/ibatis/logging/jdk14/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * logger using JDK logging feature.
  */
 package org.apache.ibatis.logging.jdk14;

File: src/main/java/org/apache/ibatis/logging/log4j/Log4jImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
  * @author Eduardo Macarron
  */
 public class Log4jImpl implements Log {
-  
+
   private static final String FQCN = Log4jImpl.class.getName();
 
   private final Logger log;

File: src/main/java/org/apache/ibatis/logging/log4j/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * logger using Log4J feature.
  */
 package org.apache.ibatis.logging.log4j;

File: src/main/java/org/apache/ibatis/logging/log4j2/Log4j2LoggerImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,7 @@
  * @author Eduardo Macarron
  */
 public class Log4j2LoggerImpl implements Log {
-  
+
   private static final Marker MARKER = MarkerManager.getMarker(LogFactory.MARKER);
 
   private final Logger log;

File: src/main/java/org/apache/ibatis/logging/log4j2/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * logger using Log4J 2 feature.
  */
 package org.apache.ibatis.logging.log4j2;

File: src/main/java/org/apache/ibatis/logging/nologging/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * logger for no operation.
  */
 package org.apache.ibatis.logging.nologging;

File: src/main/java/org/apache/ibatis/logging/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * Base package for logging.
  */
 package org.apache.ibatis.logging;

File: src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLocationAwareLoggerImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,7 @@
  * @author Eduardo Macarron
  */
 class Slf4jLocationAwareLoggerImpl implements Log {
-  
+
   private static final Marker MARKER = MarkerFactory.getMarker(LogFactory.MARKER);
 
   private static final String FQCN = Slf4jImpl.class.getName();

File: src/main/java/org/apache/ibatis/logging/slf4j/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * logger using SLF4J feature.
  */
 package org.apache.ibatis.logging.slf4j;

File: src/main/java/org/apache/ibatis/logging/stdout/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * logger using standard out.
  */
 package org.apache.ibatis.logging.stdout;

File: src/main/java/org/apache/ibatis/mapping/BoundSql.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,8 +25,8 @@
 
 /**
  * An actual SQL String got from an {@link SqlSource} after having processed any dynamic content.
- * The SQL may have SQL placeholders "?" and an list (ordered) of an parameter mappings 
- * with the additional information for each parameter (at least the property name of the input object to read 
+ * The SQL may have SQL placeholders "?" and an list (ordered) of an parameter mappings
+ * with the additional information for each parameter (at least the property name of the input object to read
  * the value from).
  * <p>
  * Can also have additional parameters that are created by the dynamic language (for loops, bind...).

File: src/main/java/org/apache/ibatis/mapping/SqlSource.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 package org.apache.ibatis.mapping;
 
 /**
- * Represents the content of a mapped statement read from an XML file or an annotation. 
+ * Represents the content of a mapped statement read from an XML file or an annotation.
  * It creates the SQL that will be passed to the database out of the input parameter received from the user.
  *
  * @author Clinton Begin

File: src/main/java/org/apache/ibatis/mapping/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * Base package for mapping.
  */
 package org.apache.ibatis.mapping;

File: src/main/java/org/apache/ibatis/parsing/GenericTokenParser.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -35,7 +35,7 @@ public String parse(String text) {
       return "";
     }
     // search open token
-    int start = text.indexOf(openToken, 0);
+    int start = text.indexOf(openToken);
     if (start == -1) {
       return text;
     }
@@ -66,7 +66,6 @@ public String parse(String text) {
             end = text.indexOf(closeToken, offset);
           } else {
             expression.append(src, offset, end - offset);
-            offset = end + closeToken.length();
             break;
           }
         }

File: src/main/java/org/apache/ibatis/parsing/XPathParser.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -41,6 +41,7 @@
 
 /**
  * @author Clinton Begin
+ * @author Kazuki Shimizu
  */
 public class XPathParser {
 

File: src/main/java/org/apache/ibatis/plugin/InterceptorChain.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@ public Object pluginAll(Object target) {
   public void addInterceptor(Interceptor interceptor) {
     interceptors.add(interceptor);
   }
-  
+
   public List<Interceptor> getInterceptors() {
     return Collections.unmodifiableList(interceptors);
   }

File: src/main/java/org/apache/ibatis/plugin/Plugin.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -70,7 +70,7 @@ private static Map<Class<?>, Set<Method>> getSignatureMap(Interceptor intercepto
     Intercepts interceptsAnnotation = interceptor.getClass().getAnnotation(Intercepts.class);
     // issue #251
     if (interceptsAnnotation == null) {
-      throw new PluginException("No @Intercepts annotation was found in interceptor " + interceptor.getClass().getName());      
+      throw new PluginException("No @Intercepts annotation was found in interceptor " + interceptor.getClass().getName());
     }
     Signature[] sigs = interceptsAnnotation.value();
     Map<Class<?>, Set<Method>> signatureMap = new HashMap<>();

File: src/main/java/org/apache/ibatis/reflection/DefaultReflectorFactory.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -38,7 +38,7 @@ public void setClassCacheEnabled(boolean classCacheEnabled) {
   @Override
   public Reflector findForClass(Class<?> type) {
     if (classCacheEnabled) {
-            // synchronized (type) removed see issue #461
+      // synchronized (type) removed see issue #461
       return reflectorMap.computeIfAbsent(type, Reflector::new);
     } else {
       return new Reflector(type);

File: src/main/java/org/apache/ibatis/reflection/MetaObject.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -74,7 +74,7 @@ public ObjectWrapperFactory getObjectWrapperFactory() {
   }
 
   public ReflectorFactory getReflectorFactory() {
-	return reflectorFactory;
+    return reflectorFactory;
   }
 
   public Object getOriginalObject() {

File: src/main/java/org/apache/ibatis/scripting/defaults/RawLanguageDriver.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,7 @@
  * As of 3.2.4 the default XML language is able to identify static statements
  * and create a {@link RawSqlSource}. So there is no need to use RAW unless you
  * want to make sure that there is not any dynamic tag for any reason.
- * 
+ *
  * @since 3.2.0
  * @author Eduardo Macarron
  */

File: src/main/java/org/apache/ibatis/scripting/xmltags/ForEachSqlNode.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -66,9 +66,9 @@ public boolean apply(DynamicContext context) {
         context = new PrefixedContext(context, separator);
       }
       int uniqueNumber = context.getUniqueNumber();
-      // Issue #709 
+      // Issue #709
       if (o instanceof Map.Entry) {
-        @SuppressWarnings("unchecked") 
+        @SuppressWarnings("unchecked")
         Map.Entry<Object, Object> mapEntry = (Map.Entry<Object, Object>) o;
         applyIndex(context, mapEntry.getKey(), uniqueNumber);
         applyItem(context, mapEntry.getValue(), uniqueNumber);

File: src/main/java/org/apache/ibatis/scripting/xmltags/OgnlClassResolver.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -21,9 +21,9 @@
 /**
  * Custom ognl {@code ClassResolver} which behaves same like ognl's
  * {@code DefaultClassResolver}. But uses the {@code Resources}
- * utility class to find the target class instead of {@code Class#forName(String)}. 
+ * utility class to find the target class instead of {@code Class#forName(String)}.
  *
- * @author Daniel Guggi 
+ * @author Daniel Guggi
  *
  * @see <a href='https://github.com/mybatis/mybatis-3/issues/161'>Issue 161</a>
  */

File: src/main/java/org/apache/ibatis/scripting/xmltags/XMLScriptBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -65,7 +65,7 @@ private void initNodeHandlerMap() {
 
   public SqlSource parseScriptNode() {
     MixedSqlNode rootSqlNode = parseDynamicTags(context);
-    SqlSource sqlSource = null;
+    SqlSource sqlSource;
     if (isDynamic) {
       sqlSource = new DynamicSqlSource(configuration, rootSqlNode);
     } else {

File: src/main/java/org/apache/ibatis/session/AutoMappingBehavior.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,7 +17,7 @@
 
 /**
  * Specifies if and how MyBatis should automatically map columns to fields/properties.
- * 
+ *
  * @author Eduardo Macarron
  */
 public enum AutoMappingBehavior {

File: src/main/java/org/apache/ibatis/session/SqlSessionFactoryBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -87,7 +87,7 @@ public SqlSessionFactory build(InputStream inputStream, String environment, Prop
       }
     }
   }
-    
+
   public SqlSessionFactory build(Configuration config) {
     return new DefaultSqlSessionFactory(config);
   }

File: src/main/java/org/apache/ibatis/session/TransactionIsolationLevel.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@ public enum TransactionIsolationLevel {
 
   private final int level;
 
-  private TransactionIsolationLevel(int level) {
+  TransactionIsolationLevel(int level) {
     this.level = level;
   }
 

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSessionFactory.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -112,7 +112,7 @@ private SqlSession openSessionFromConnection(ExecutorType execType, Connection c
         // Failover to true, as most poor drivers
         // or databases won't support transactions
         autoCommit = true;
-      }      
+      }
       final Environment environment = configuration.getEnvironment();
       final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
       final Transaction tx = transactionFactory.newTransaction(connection);

File: src/main/java/org/apache/ibatis/transaction/jdbc/JdbcTransaction.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -126,7 +126,7 @@ protected void resetAutoCommit() {
     } catch (SQLException e) {
       if (log.isDebugEnabled()) {
         log.debug("Error resetting autocommit to true "
-          + "before closing the connection.  Cause: " + e);
+            + "before closing the connection.  Cause: " + e);
       }
     }
   }
@@ -146,5 +146,5 @@ protected void openConnection() throws SQLException {
   public Integer getTimeout() throws SQLException {
     return null;
   }
-  
+
 }

File: src/main/java/org/apache/ibatis/type/BooleanTypeHandler.java
Patch:
@@ -35,20 +35,20 @@ public void setNonNullParameter(PreparedStatement ps, int i, Boolean parameter,
   public Boolean getNullableResult(ResultSet rs, String columnName)
       throws SQLException {
     boolean result = rs.getBoolean(columnName);
-    return (!result && rs.wasNull()) ? null : result;
+    return !result && rs.wasNull() ? null : result;
   }
 
   @Override
   public Boolean getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException {
     boolean result = rs.getBoolean(columnIndex);
-    return (!result && rs.wasNull()) ? null : result;
+    return !result && rs.wasNull() ? null : result;
   }
 
   @Override
   public Boolean getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     boolean result = cs.getBoolean(columnIndex);
-    return (!result && cs.wasNull()) ? null : result;
+    return !result && cs.wasNull() ? null : result;
   }
 }

File: src/main/java/org/apache/ibatis/type/ByteTypeHandler.java
Patch:
@@ -35,20 +35,20 @@ public void setNonNullParameter(PreparedStatement ps, int i, Byte parameter, Jdb
   public Byte getNullableResult(ResultSet rs, String columnName)
       throws SQLException {
     byte result = rs.getByte(columnName);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Byte getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException {
     byte result = rs.getByte(columnIndex);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Byte getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     byte result = cs.getByte(columnIndex);
-    return (result == 0 && cs.wasNull()) ? null : result;
+    return result == 0 && cs.wasNull() ? null : result;
   }
 }

File: src/main/java/org/apache/ibatis/type/DoubleTypeHandler.java
Patch:
@@ -35,21 +35,21 @@ public void setNonNullParameter(PreparedStatement ps, int i, Double parameter, J
   public Double getNullableResult(ResultSet rs, String columnName)
       throws SQLException {
     double result = rs.getDouble(columnName);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Double getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException {
     double result = rs.getDouble(columnIndex);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Double getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     double result = cs.getDouble(columnIndex);
-    return (result == 0 && cs.wasNull()) ? null : result;
+    return result == 0 && cs.wasNull() ? null : result;
   }
 
 }

File: src/main/java/org/apache/ibatis/type/FloatTypeHandler.java
Patch:
@@ -35,20 +35,20 @@ public void setNonNullParameter(PreparedStatement ps, int i, Float parameter, Jd
   public Float getNullableResult(ResultSet rs, String columnName)
       throws SQLException {
     float result = rs.getFloat(columnName);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Float getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException {
     float result = rs.getFloat(columnIndex);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Float getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     float result = cs.getFloat(columnIndex);
-    return (result == 0 && cs.wasNull()) ? null : result;
+    return result == 0 && cs.wasNull() ? null : result;
   }
 }

File: src/main/java/org/apache/ibatis/type/IntegerTypeHandler.java
Patch:
@@ -35,20 +35,20 @@ public void setNonNullParameter(PreparedStatement ps, int i, Integer parameter,
   public Integer getNullableResult(ResultSet rs, String columnName)
       throws SQLException {
     int result = rs.getInt(columnName);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Integer getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException {
     int result = rs.getInt(columnIndex);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Integer getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     int result = cs.getInt(columnIndex);
-    return (result == 0 && cs.wasNull()) ? null : result;
+    return result == 0 && cs.wasNull() ? null : result;
   }
 }

File: src/main/java/org/apache/ibatis/type/JdbcType.java
Patch:
@@ -65,7 +65,9 @@ public enum JdbcType {
   ROWID(Types.ROWID), // JDK6
   LONGNVARCHAR(Types.LONGNVARCHAR), // JDK6
   SQLXML(Types.SQLXML), // JDK6
-  DATETIMEOFFSET(-155); // SQL Server 2008
+  DATETIMEOFFSET(-155), // SQL Server 2008
+  TIME_WITH_TIMEZONE(Types.TIME_WITH_TIMEZONE), // JDBC 4.2 JDK8
+  TIMESTAMP_WITH_TIMEZONE(Types.TIMESTAMP_WITH_TIMEZONE); // JDBC 4.2 JDK8
 
   public final int TYPE_CODE;
   private static Map<Integer,JdbcType> codeLookup = new HashMap<>();

File: src/main/java/org/apache/ibatis/type/LongTypeHandler.java
Patch:
@@ -35,20 +35,20 @@ public void setNonNullParameter(PreparedStatement ps, int i, Long parameter, Jdb
   public Long getNullableResult(ResultSet rs, String columnName)
       throws SQLException {
     long result = rs.getLong(columnName);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Long getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException {
     long result = rs.getLong(columnIndex);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Long getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     long result = cs.getLong(columnIndex);
-    return (result == 0 && cs.wasNull()) ? null : result;
+    return result == 0 && cs.wasNull() ? null : result;
   }
 }

File: src/main/java/org/apache/ibatis/type/ShortTypeHandler.java
Patch:
@@ -35,20 +35,20 @@ public void setNonNullParameter(PreparedStatement ps, int i, Short parameter, Jd
   public Short getNullableResult(ResultSet rs, String columnName)
       throws SQLException {
     short result = rs.getShort(columnName);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Short getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException {
     short result = rs.getShort(columnIndex);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Short getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     short result = cs.getShort(columnIndex);
-    return (result == 0 && cs.wasNull()) ? null : result;
+    return result == 0 && cs.wasNull() ? null : result;
   }
 }

File: src/main/java/org/apache/ibatis/type/SqlxmlTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -13,7 +13,6 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-
 package org.apache.ibatis.type;
 
 import java.sql.CallableStatement;
@@ -24,7 +23,7 @@
 
 /**
  * Convert <code>String</code> to/from <code>SQLXML</code>.
- * 
+ *
  * @since 3.5.0
  * @author Iwao AVE!
  */

File: src/main/java/org/apache/ibatis/type/YearMonthTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -22,8 +22,8 @@
 import java.time.YearMonth;
 
 /**
- * Type Handler for {@link java.time.YearMonth}
- *
+ * Type Handler for {@link java.time.YearMonth}.
+ * <p>
  * YearMonthTypeHandler relies upon
  * {@link java.time.YearMonth#parse YearMonth.parse}. Therefore column values
  * are expected as strings. The format must be uuuu-MM. Example: "2016-08"

File: src/main/java/org/apache/ibatis/cache/Cache.java
Patch:
@@ -93,6 +93,8 @@ public interface Cache {
    *
    * @return A ReadWriteLock
    */
-  ReadWriteLock getReadWriteLock();
+  default ReadWriteLock getReadWriteLock() {
+    return null;
+  }
 
 }

File: src/main/java/org/apache/ibatis/executor/loader/ProxyFactory.java
Patch:
@@ -26,7 +26,9 @@
  */
 public interface ProxyFactory {
 
-  void setProperties(Properties properties);
+  default void setProperties(Properties properties) {
+    // NOP
+  }
 
   Object createProxy(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs);
 

File: src/main/java/org/apache/ibatis/mapping/DatabaseIdProvider.java
Patch:
@@ -29,7 +29,9 @@
  */
 public interface DatabaseIdProvider {
 
-  void setProperties(Properties p);
+  default void setProperties(Properties p) {
+    // NOP
+  }
 
   String getDatabaseId(DataSource dataSource) throws SQLException;
 }

File: src/main/java/org/apache/ibatis/reflection/factory/ObjectFactory.java
Patch:
@@ -29,7 +29,9 @@ public interface ObjectFactory {
    * Sets configuration properties.
    * @param properties configuration properties
    */
-  void setProperties(Properties properties);
+  default void setProperties(Properties properties) {
+    // NOP
+  }
 
   /**
    * Creates a new object with default constructor.

File: src/main/java/org/apache/ibatis/transaction/TransactionFactory.java
Patch:
@@ -33,7 +33,9 @@ public interface TransactionFactory {
    * Sets transaction factory custom properties.
    * @param props
    */
-  void setProperties(Properties props);
+  default void setProperties(Properties props) {
+    // NOP
+  }
 
   /**
    * Creates a {@link Transaction} out of an existing connection.

File: src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java
Patch:
@@ -194,7 +194,7 @@ public Integer getDefaultNetworkTimeout() {
   /**
    * Sets the default network timeout value to wait for the database operation to complete. See {@link Connection#setNetworkTimeout(java.util.concurrent.Executor, int)}
    * 
-   * @param milliseconds
+   * @param defaultNetworkTimeout
    *          The time in milliseconds to wait for the database operation to complete.
    * @since 3.5.2
    */

File: src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java
Patch:
@@ -292,7 +292,6 @@ public boolean jdbcCompliant() {
       return this.driver.jdbcCompliant();
     }
 
-    // @Override only valid jdk7+
     @Override
     public Logger getParentLogger() {
       return Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
@@ -309,7 +308,6 @@ public boolean isWrapperFor(Class<?> iface) throws SQLException {
     return false;
   }
 
-  // @Override only valid jdk7+
   @Override
   public Logger getParentLogger() {
     // requires JDK version 1.6

File: src/main/java/org/apache/ibatis/mapping/SqlCommandType.java
Patch:
@@ -19,5 +19,5 @@
  * @author Clinton Begin
  */
 public enum SqlCommandType {
-  UNKNOWN, INSERT, UPDATE, DELETE, SELECT, FLUSH
+  UNKNOWN, INSERT, UPDATE, DELETE, SELECT, FLUSH;
 }

File: src/test/java/org/apache/ibatis/autoconstructor/ExtensiveSubject.java
Patch:
@@ -62,6 +62,6 @@ public ExtensiveSubject(final byte aByte,
     }
 
     public enum TestEnum {
-        AVALUE, BVALUE, CVALUE
+        AVALUE, BVALUE, CVALUE;
     }
 }

File: src/test/java/org/apache/ibatis/session/SqlSessionTest.java
Patch:
@@ -583,7 +583,7 @@ void shouldFailSelectOneAuthorUsingMapperClassWithTwoResultHandlers() {
     Configuration configuration = new Configuration(sqlMapper.getConfiguration().getEnvironment());
     configuration.addMapper(AuthorMapperWithMultipleHandlers.class);
     SqlSessionFactory sqlMapperWithMultipleHandlers = new DefaultSqlSessionFactory(configuration);
-    try (SqlSession sqlSession = sqlMapperWithMultipleHandlers.openSession()) {
+    try (SqlSession sqlSession = sqlMapperWithMultipleHandlers.openSession();) {
       DefaultResultHandler handler1 = new DefaultResultHandler();
       DefaultResultHandler handler2 = new DefaultResultHandler();
       AuthorMapperWithMultipleHandlers mapper = sqlSession.getMapper(AuthorMapperWithMultipleHandlers.class);
@@ -596,7 +596,7 @@ void shouldFailSelectOneAuthorUsingMapperClassWithTwoRowBounds() {
     Configuration configuration = new Configuration(sqlMapper.getConfiguration().getEnvironment());
     configuration.addMapper(AuthorMapperWithRowBounds.class);
     SqlSessionFactory sqlMapperWithMultipleHandlers = new DefaultSqlSessionFactory(configuration);
-    try (SqlSession sqlSession = sqlMapperWithMultipleHandlers.openSession()) {
+    try (SqlSession sqlSession = sqlMapperWithMultipleHandlers.openSession();) {
       RowBounds bounds1 = new RowBounds(0, 1);
       RowBounds bounds2 = new RowBounds(0, 1);
       AuthorMapperWithRowBounds mapper = sqlSession.getMapper(AuthorMapperWithRowBounds.class);

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -337,7 +337,7 @@ private List<ResultMap> getStatementResultMaps(
         try {
           resultMaps.add(configuration.getResultMap(resultMapName.trim()));
         } catch (IllegalArgumentException e) {
-          throw new IncompleteElementException("Could not find result map " + resultMapName, e);
+          throw new IncompleteElementException("Could not find result map '" + resultMapName + "' referenced from '" + statementId + "'", e);
         }
       }
     } else if (resultType != null) {

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -337,7 +337,7 @@ private List<ResultMap> getStatementResultMaps(
         try {
           resultMaps.add(configuration.getResultMap(resultMapName.trim()));
         } catch (IllegalArgumentException e) {
-          throw new IncompleteElementException("Could not find result map " + resultMapName, e);
+          throw new IncompleteElementException("Could not find result map '" + resultMapName + "' referenced from '" + statementId + "'", e);
         }
       }
     } else if (resultType != null) {

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -337,7 +337,7 @@ private List<ResultMap> getStatementResultMaps(
         try {
           resultMaps.add(configuration.getResultMap(resultMapName.trim()));
         } catch (IllegalArgumentException e) {
-          throw new IncompleteElementException("Could not find result map " + resultMapName + " [statementId]" + statementId, e);
+          throw new IncompleteElementException("Could not find result map '" + resultMapName + "' referenced from '" + statementId + "'", e);
         }
       }
     } else if (resultType != null) {

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -337,7 +337,7 @@ private List<ResultMap> getStatementResultMaps(
         try {
           resultMaps.add(configuration.getResultMap(resultMapName.trim()));
         } catch (IllegalArgumentException e) {
-          throw new IncompleteElementException("Could not find result map " + resultMapName, e);
+          throw new IncompleteElementException("Could not find result map " + resultMapName + " [statementId]" + statementId, e);
         }
       }
     } else if (resultType != null) {

File: src/main/java/org/apache/ibatis/cache/Cache.java
Patch:
@@ -93,6 +93,8 @@ public interface Cache {
    *
    * @return A ReadWriteLock
    */
-  ReadWriteLock getReadWriteLock();
+  default ReadWriteLock getReadWriteLock() {
+    return null;
+  }
 
 }

File: src/main/java/org/apache/ibatis/executor/loader/ProxyFactory.java
Patch:
@@ -26,7 +26,9 @@
  */
 public interface ProxyFactory {
 
-  void setProperties(Properties properties);
+  default void setProperties(Properties properties) {
+    // NOP
+  }
 
   Object createProxy(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs);
 

File: src/main/java/org/apache/ibatis/mapping/DatabaseIdProvider.java
Patch:
@@ -29,7 +29,9 @@
  */
 public interface DatabaseIdProvider {
 
-  void setProperties(Properties p);
+  default void setProperties(Properties p) {
+    // NOP
+  }
 
   String getDatabaseId(DataSource dataSource) throws SQLException;
 }

File: src/main/java/org/apache/ibatis/reflection/factory/ObjectFactory.java
Patch:
@@ -29,7 +29,9 @@ public interface ObjectFactory {
    * Sets configuration properties.
    * @param properties configuration properties
    */
-  void setProperties(Properties properties);
+  default void setProperties(Properties properties) {
+    // NOP
+  }
 
   /**
    * Creates a new object with default constructor.

File: src/main/java/org/apache/ibatis/transaction/TransactionFactory.java
Patch:
@@ -33,7 +33,9 @@ public interface TransactionFactory {
    * Sets transaction factory custom properties.
    * @param props
    */
-  void setProperties(Properties props);
+  default void setProperties(Properties props) {
+    // NOP
+  }
 
   /**
    * Creates a {@link Transaction} out of an existing connection.

File: src/main/java/org/apache/ibatis/annotations/DeleteProvider.java
Patch:
@@ -49,7 +49,7 @@
    *   </li>
    *   <li>
    *     If cannot resolve a method by {@link org.apache.ibatis.builder.annotation.ProviderMethodResolver}(= not implement it or it was returned {@code null}),
-   *     the MyBatis will search and use a fallback method that named {@code resolveSql} from specified type
+   *     the MyBatis will search and use a fallback method that named {@code provideSql} from specified type
    *   </li>
    * </ul>
    *

File: src/main/java/org/apache/ibatis/annotations/InsertProvider.java
Patch:
@@ -49,7 +49,7 @@
    *   </li>
    *   <li>
    *     If cannot resolve a method by {@link org.apache.ibatis.builder.annotation.ProviderMethodResolver}(= not implement it or it was returned {@code null}),
-   *     the MyBatis will search and use a fallback method that named {@code resolveSql} from specified type
+   *     the MyBatis will search and use a fallback method that named {@code provideSql} from specified type
    *   </li>
    * </ul>
    *

File: src/main/java/org/apache/ibatis/annotations/SelectProvider.java
Patch:
@@ -49,7 +49,7 @@
    *   </li>
    *   <li>
    *     If cannot resolve a method by {@link org.apache.ibatis.builder.annotation.ProviderMethodResolver}(= not implement it or it was returned {@code null}),
-   *     the MyBatis will search and use a fallback method that named {@code resolveSql} from specified type
+   *     the MyBatis will search and use a fallback method that named {@code provideSql} from specified type
    *   </li>
    * </ul>
    *

File: src/main/java/org/apache/ibatis/annotations/UpdateProvider.java
Patch:
@@ -49,7 +49,7 @@
    *   </li>
    *   <li>
    *     If cannot resolve a method by {@link org.apache.ibatis.builder.annotation.ProviderMethodResolver}(= not implement it or it was returned {@code null}),
-   *     the MyBatis will search and use a fallback method that named {@code resolveSql} from specified type
+   *     the MyBatis will search and use a fallback method that named {@code provideSql} from specified type
    *   </li>
    * </ul>
    *

File: src/main/java/org/apache/ibatis/annotations/DeleteProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,5 +30,5 @@
 public @interface DeleteProvider {
   Class<?> type();
 
-  String method();
+  String method() default "";
 }

File: src/main/java/org/apache/ibatis/annotations/InsertProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,5 +30,5 @@
 public @interface InsertProvider {
   Class<?> type();
 
-  String method();
+  String method() default "";
 }

File: src/main/java/org/apache/ibatis/annotations/SelectProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,5 +30,5 @@
 public @interface SelectProvider {
   Class<?> type();
 
-  String method();
+  String method() default "";
 }

File: src/main/java/org/apache/ibatis/annotations/UpdateProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,5 +30,5 @@
 public @interface UpdateProvider {
   Class<?> type();
 
-  String method();
+  String method() default "";
 }

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java
Patch:
@@ -59,7 +59,9 @@ public ProviderSqlSource(Configuration configuration, Object provider, Class<?>
     try {
       this.configuration = configuration;
       Lang lang = mapperMethod.getAnnotation(Lang.class);
-      this.languageDriver = configuration.getLanguageRegistry().getDriver(lang == null ? configuration.getLanguageRegistry().getDefaultDriverClass() : lang.value());
+      this.languageDriver = lang == null ?
+          configuration.getLanguageRegistry().getDefaultDriver() :
+          configuration.getLanguageRegistry().getDriver(lang.value());
       this.providerType = (Class<?>) provider.getClass().getMethod("type").invoke(provider);
       providerMethodName = (String) provider.getClass().getMethod("method").invoke(provider);
 

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -632,7 +632,7 @@ Object createParameterizedResultObject(ResultSetWrapper rsw, Class<?> resultType
           value = getNestedQueryConstructorValue(rsw.getResultSet(), constructorMapping, columnPrefix);
         } else if (constructorMapping.getNestedResultMapId() != null) {
           final ResultMap resultMap = configuration.getResultMap(constructorMapping.getNestedResultMapId());
-          value = getRowValue(rsw, resultMap, constructorMapping.getColumnPrefix());
+          value = getRowValue(rsw, resultMap, getColumnPrefix(columnPrefix, constructorMapping));
         } else {
           final TypeHandler<?> typeHandler = constructorMapping.getTypeHandler();
           value = typeHandler.getResult(rsw.getResultSet(), prependPrefix(column, columnPrefix));

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -96,14 +96,14 @@ public TypeHandlerRegistry() {
     register(String.class, JdbcType.CHAR, new StringTypeHandler());
     register(String.class, JdbcType.CLOB, new ClobTypeHandler());
     register(String.class, JdbcType.VARCHAR, new StringTypeHandler());
-    register(String.class, JdbcType.LONGVARCHAR, new ClobTypeHandler());
+    register(String.class, JdbcType.LONGVARCHAR, new StringTypeHandler());
     register(String.class, JdbcType.NVARCHAR, new NStringTypeHandler());
     register(String.class, JdbcType.NCHAR, new NStringTypeHandler());
     register(String.class, JdbcType.NCLOB, new NClobTypeHandler());
     register(JdbcType.CHAR, new StringTypeHandler());
     register(JdbcType.VARCHAR, new StringTypeHandler());
     register(JdbcType.CLOB, new ClobTypeHandler());
-    register(JdbcType.LONGVARCHAR, new ClobTypeHandler());
+    register(JdbcType.LONGVARCHAR, new StringTypeHandler());
     register(JdbcType.NVARCHAR, new NStringTypeHandler());
     register(JdbcType.NCHAR, new NStringTypeHandler());
     register(JdbcType.NCLOB, new NClobTypeHandler());

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -96,14 +96,14 @@ public TypeHandlerRegistry() {
     register(String.class, JdbcType.CHAR, new StringTypeHandler());
     register(String.class, JdbcType.CLOB, new ClobTypeHandler());
     register(String.class, JdbcType.VARCHAR, new StringTypeHandler());
-    register(String.class, JdbcType.LONGVARCHAR, new ClobTypeHandler());
+    register(String.class, JdbcType.LONGVARCHAR, new StringTypeHandler());
     register(String.class, JdbcType.NVARCHAR, new NStringTypeHandler());
     register(String.class, JdbcType.NCHAR, new NStringTypeHandler());
     register(String.class, JdbcType.NCLOB, new NClobTypeHandler());
     register(JdbcType.CHAR, new StringTypeHandler());
     register(JdbcType.VARCHAR, new StringTypeHandler());
     register(JdbcType.CLOB, new ClobTypeHandler());
-    register(JdbcType.LONGVARCHAR, new ClobTypeHandler());
+    register(JdbcType.LONGVARCHAR, new StringTypeHandler());
     register(JdbcType.NVARCHAR, new NStringTypeHandler());
     register(JdbcType.NCHAR, new NStringTypeHandler());
     register(JdbcType.NCLOB, new NClobTypeHandler());

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -241,7 +241,7 @@ private Map<JdbcType, TypeHandler<?>> getJdbcHandlerMap(Type type) {
     }
     if (jdbcHandlerMap == null && type instanceof Class) {
       Class<?> clazz = (Class<?>) type;
-      if (clazz.isEnum()) {
+      if (clazz.isEnum() || (clazz.isAnonymousClass() && clazz.getEnclosingClass().isEnum())) {
         jdbcHandlerMap = getJdbcHandlerMapForEnumInterfaces(clazz, clazz);
         if (jdbcHandlerMap == null) {
           register(clazz, getInstance(clazz, defaultEnumTypeHandler));

File: src/test/java/org/apache/ibatis/submitted/enum_with_method/Currency.java
Patch:
@@ -1,4 +1,4 @@
-/*
+/**
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
@@ -13,7 +13,6 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-
 package org.apache.ibatis.submitted.enum_with_method;
 
 import java.math.BigDecimal;

File: src/test/java/org/apache/ibatis/submitted/enum_with_method/EnumWithMethodTest.java
Patch:
@@ -1,4 +1,4 @@
-/*
+/**
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/test/java/org/apache/ibatis/submitted/enum_with_method/Mapper.java
Patch:
@@ -1,4 +1,4 @@
-/*
+/**
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/test/java/org/apache/ibatis/submitted/enum_with_method/User.java
Patch:
@@ -1,4 +1,4 @@
-/*
+/**
  *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -250,7 +250,7 @@ private void resultMapElements(List<XNode> list) throws Exception {
   }
 
   private ResultMap resultMapElement(XNode resultMapNode) throws Exception {
-    return resultMapElement(resultMapNode, Collections.<ResultMapping> emptyList(), null);
+    return resultMapElement(resultMapNode, Collections.emptyList(), null);
   }
 
   private ResultMap resultMapElement(XNode resultMapNode, List<ResultMapping> additionalResultMappings, Class<?> enclosingType) throws Exception {
@@ -385,7 +385,7 @@ private ResultMapping buildResultMappingFromContext(XNode context, Class<?> resu
     String jdbcType = context.getStringAttribute("jdbcType");
     String nestedSelect = context.getStringAttribute("select");
     String nestedResultMap = context.getStringAttribute("resultMap",
-        processNestedResultMappings(context, Collections.<ResultMapping> emptyList(), resultType));
+        processNestedResultMappings(context, Collections.emptyList(), resultType));
     String notNullColumn = context.getStringAttribute("notNullColumn");
     String columnPrefix = context.getStringAttribute("columnPrefix");
     String typeHandler = context.getStringAttribute("typeHandler");

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoader.java
Patch:
@@ -78,7 +78,7 @@ private <E> List<E> selectList() throws SQLException {
       localExecutor = newExecutor();
     }
     try {
-      return localExecutor.<E> query(mappedStatement, parameterObject, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER, cacheKey, boundSql);
+      return localExecutor.query(mappedStatement, parameterObject, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER, cacheKey, boundSql);
     } finally {
       if (localExecutor != executor) {
         localExecutor.close(false);

File: src/main/java/org/apache/ibatis/executor/statement/RoutingStatementHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -76,7 +76,7 @@ public int update(Statement statement) throws SQLException {
 
   @Override
   public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {
-    return delegate.<E>query(statement, resultHandler);
+    return delegate.query(statement, resultHandler);
   }
 
   @Override

File: src/main/java/org/apache/ibatis/session/SqlSessionManager.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -208,7 +208,7 @@ public <E> List<E> selectList(String statement, Object parameter) {
 
   @Override
   public <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds) {
-    return sqlSessionProxy.<E> selectList(statement, parameter, rowBounds);
+    return sqlSessionProxy.selectList(statement, parameter, rowBounds);
   }
 
   @Override

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSession.java
Patch:
@@ -67,7 +67,7 @@ public DefaultSqlSession(Configuration configuration, Executor executor) {
 
   @Override
   public <T> T selectOne(String statement) {
-    return this.<T>selectOne(statement, null);
+    return this.selectOne(statement, null);
   }
 
   @Override
@@ -288,7 +288,7 @@ public Configuration getConfiguration() {
 
   @Override
   public <T> T getMapper(Class<T> type) {
-    return configuration.<T>getMapper(type, this);
+    return configuration.getMapper(type, this);
   }
 
   @Override

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -250,7 +250,7 @@ private void resultMapElements(List<XNode> list) throws Exception {
   }
 
   private ResultMap resultMapElement(XNode resultMapNode) throws Exception {
-    return resultMapElement(resultMapNode, Collections.<ResultMapping> emptyList(), null);
+    return resultMapElement(resultMapNode, Collections.emptyList(), null);
   }
 
   private ResultMap resultMapElement(XNode resultMapNode, List<ResultMapping> additionalResultMappings, Class<?> enclosingType) throws Exception {
@@ -385,7 +385,7 @@ private ResultMapping buildResultMappingFromContext(XNode context, Class<?> resu
     String jdbcType = context.getStringAttribute("jdbcType");
     String nestedSelect = context.getStringAttribute("select");
     String nestedResultMap = context.getStringAttribute("resultMap",
-        processNestedResultMappings(context, Collections.<ResultMapping> emptyList(), resultType));
+        processNestedResultMappings(context, Collections.emptyList(), resultType));
     String notNullColumn = context.getStringAttribute("notNullColumn");
     String columnPrefix = context.getStringAttribute("columnPrefix");
     String typeHandler = context.getStringAttribute("typeHandler");

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoader.java
Patch:
@@ -78,7 +78,7 @@ private <E> List<E> selectList() throws SQLException {
       localExecutor = newExecutor();
     }
     try {
-      return localExecutor.<E> query(mappedStatement, parameterObject, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER, cacheKey, boundSql);
+      return localExecutor.query(mappedStatement, parameterObject, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER, cacheKey, boundSql);
     } finally {
       if (localExecutor != executor) {
         localExecutor.close(false);

File: src/main/java/org/apache/ibatis/executor/statement/RoutingStatementHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -76,7 +76,7 @@ public int update(Statement statement) throws SQLException {
 
   @Override
   public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {
-    return delegate.<E>query(statement, resultHandler);
+    return delegate.query(statement, resultHandler);
   }
 
   @Override

File: src/main/java/org/apache/ibatis/session/SqlSessionManager.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -208,7 +208,7 @@ public <E> List<E> selectList(String statement, Object parameter) {
 
   @Override
   public <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds) {
-    return sqlSessionProxy.<E> selectList(statement, parameter, rowBounds);
+    return sqlSessionProxy.selectList(statement, parameter, rowBounds);
   }
 
   @Override

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSession.java
Patch:
@@ -67,7 +67,7 @@ public DefaultSqlSession(Configuration configuration, Executor executor) {
 
   @Override
   public <T> T selectOne(String statement) {
-    return this.<T>selectOne(statement, null);
+    return this.selectOne(statement, null);
   }
 
   @Override
@@ -288,7 +288,7 @@ public Configuration getConfiguration() {
 
   @Override
   public <T> T getMapper(Class<T> type) {
-    return configuration.<T>getMapper(type, this);
+    return configuration.getMapper(type, this);
   }
 
   @Override

File: src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -33,7 +33,7 @@
  */
 public class SqlSourceBuilder extends BaseBuilder {
 
-  private static final String parameterProperties = "javaType,jdbcType,mode,numericScale,resultMap,typeHandler,jdbcTypeName";
+  private static final String PARAMETER_PROPERTIES = "javaType,jdbcType,mode,numericScale,resultMap,typeHandler,jdbcTypeName";
 
   public SqlSourceBuilder(Configuration configuration) {
     super(configuration);
@@ -114,7 +114,7 @@ private ParameterMapping buildParameterMapping(String content) {
         } else if ("expression".equals(name)) {
           throw new BuilderException("Expression based parameters are not supported yet");
         } else {
-          throw new BuilderException("An invalid property '" + name + "' was found in mapping #{" + content + "}.  Valid properties are " + parameterProperties);
+          throw new BuilderException("An invalid property '" + name + "' was found in mapping #{" + content + "}.  Valid properties are " + PARAMETER_PROPERTIES);
         }
       }
       if (typeHandlerAlias != null) {

File: src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -33,7 +33,7 @@
  */
 public class SqlSourceBuilder extends BaseBuilder {
 
-  private static final String parameterProperties = "javaType,jdbcType,mode,numericScale,resultMap,typeHandler,jdbcTypeName";
+  private static final String PARAMETER_PROPERTIES = "javaType,jdbcType,mode,numericScale,resultMap,typeHandler,jdbcTypeName";
 
   public SqlSourceBuilder(Configuration configuration) {
     super(configuration);
@@ -114,7 +114,7 @@ private ParameterMapping buildParameterMapping(String content) {
         } else if ("expression".equals(name)) {
           throw new BuilderException("Expression based parameters are not supported yet");
         } else {
-          throw new BuilderException("An invalid property '" + name + "' was found in mapping #{" + content + "}.  Valid properties are " + parameterProperties);
+          throw new BuilderException("An invalid property '" + name + "' was found in mapping #{" + content + "}.  Valid properties are " + PARAMETER_PROPERTIES);
         }
       }
       if (typeHandlerAlias != null) {

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -413,12 +413,12 @@ private String processNestedResultMappings(XNode context, List<ResultMapping> re
 
   protected void validateCollection(XNode context, Class<?> enclosingType) {
     if ("collection".equals(context.getName()) && context.getStringAttribute("resultMap") == null
-        && context.getStringAttribute("resultType") == null) {
+        && context.getStringAttribute("javaType") == null) {
       MetaClass metaResultType = MetaClass.forClass(enclosingType, configuration.getReflectorFactory());
       String property = context.getStringAttribute("property");
       if (!metaResultType.hasSetter(property)) {
         throw new BuilderException(
-          "Ambiguous collection type for property '" + property + "'. You must specify 'resultType' or 'resultMap'.");
+          "Ambiguous collection type for property '" + property + "'. You must specify 'javaType' or 'resultMap'.");
       }
     }
   }

File: src/test/java/org/apache/ibatis/submitted/stringlist/StringListTest.java
Patch:
@@ -65,7 +65,7 @@ void shouldFailFastIfCollectionTypeIsAmbiguous() throws Exception {
       fail("Should throw exception when collection type is unresolvable.");
     } catch (PersistenceException e) {
       assertTrue(e.getMessage()
-        .contains("Ambiguous collection type for property 'groups'. You must specify 'resultType' or 'resultMap'."));
+        .contains("Ambiguous collection type for property 'groups'. You must specify 'javaType' or 'resultMap'."));
     }
   }
 }

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -413,12 +413,12 @@ private String processNestedResultMappings(XNode context, List<ResultMapping> re
 
   protected void validateCollection(XNode context, Class<?> enclosingType) {
     if ("collection".equals(context.getName()) && context.getStringAttribute("resultMap") == null
-        && context.getStringAttribute("resultType") == null) {
+        && context.getStringAttribute("javaType") == null) {
       MetaClass metaResultType = MetaClass.forClass(enclosingType, configuration.getReflectorFactory());
       String property = context.getStringAttribute("property");
       if (!metaResultType.hasSetter(property)) {
         throw new BuilderException(
-          "Ambiguous collection type for property '" + property + "'. You must specify 'resultType' or 'resultMap'.");
+          "Ambiguous collection type for property '" + property + "'. You must specify 'javaType' or 'resultMap'.");
       }
     }
   }

File: src/test/java/org/apache/ibatis/submitted/stringlist/StringListTest.java
Patch:
@@ -65,7 +65,7 @@ void shouldFailFastIfCollectionTypeIsAmbiguous() throws Exception {
       fail("Should throw exception when collection type is unresolvable.");
     } catch (PersistenceException e) {
       assertTrue(e.getMessage()
-        .contains("Ambiguous collection type for property 'groups'. You must specify 'resultType' or 'resultMap'."));
+        .contains("Ambiguous collection type for property 'groups'. You must specify 'javaType' or 'resultMap'."));
     }
   }
 }

File: src/main/java/org/apache/ibatis/annotations/CacheNamespaceRef.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/Lang.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/Property.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cache/decorators/FifoCache.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cache/decorators/LruCache.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/ResultExtractor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/SimpleExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/parameter/ParameterHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/result/ResultMapException.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/resultset/ResultSetHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/jdbc/SqlRunner.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -248,7 +248,7 @@ private List<Map<String, Object>> getResults(ResultSet rs) throws SQLException {
     } finally {
       if (rs != null) {
         try {
-            rs.close();
+          rs.close();
         } catch (Exception e) {
           // ignore
         }

File: src/main/java/org/apache/ibatis/logging/LogFactory.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,7 +24,7 @@
 public final class LogFactory {
 
   /**
-   * Marker to be used by logging implementations that support markers
+   * Marker to be used by logging implementations that support markers.
    */
   public static final String MARKER = "MYBATIS";
 

File: src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.ibatis.reflection.ArrayUtil;
 
 /**
- * Base class for proxies to do logging
+ * Base class for proxies to do logging.
  *
  * @author Clinton Begin
  * @author Eduardo Macarron

File: src/main/java/org/apache/ibatis/logging/jdbc/ConnectionLogger.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.ibatis.reflection.ExceptionUtil;
 
 /**
- * Connection proxy to add logging
+ * Connection proxy to add logging.
  *
  * @author Clinton Begin
  * @author Eduardo Macarron
@@ -75,7 +75,7 @@ public Object invoke(Object proxy, Method method, Object[] params)
   }
 
   /**
-   * Creates a logging version of a connection
+   * Creates a logging version of a connection.
    *
    * @param conn - the original connection
    * @return - the connection with logging
@@ -87,7 +87,7 @@ public static Connection newInstance(Connection conn, Log statementLog, int quer
   }
 
   /**
-   * return the wrapped connection
+   * return the wrapped connection.
    *
    * @return the connection
    */

File: src/main/java/org/apache/ibatis/logging/jdbc/PreparedStatementLogger.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.ibatis.reflection.ExceptionUtil;
 
 /**
- * PreparedStatement proxy to add logging
+ * PreparedStatement proxy to add logging.
  *
  * @author Clinton Begin
  * @author Eduardo Macarron
@@ -83,7 +83,7 @@ public Object invoke(Object proxy, Method method, Object[] params) throws Throwa
   }
 
   /**
-   * Creates a logging version of a PreparedStatement
+   * Creates a logging version of a PreparedStatement.
    *
    * @param stmt - the statement
    * @param statementLog - the statement log
@@ -97,7 +97,7 @@ public static PreparedStatement newInstance(PreparedStatement stmt, Log statemen
   }
 
   /**
-   * Return the wrapped prepared statement
+   * Return the wrapped prepared statement.
    *
    * @return the PreparedStatement
    */

File: src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.ibatis.reflection.ExceptionUtil;
 
 /**
- * ResultSet proxy to add logging
+ * ResultSet proxy to add logging.
  *
  * @author Clinton Begin
  * @author Eduardo Macarron
@@ -129,7 +129,7 @@ private void printColumnValues(int columnCount) {
   }
 
   /**
-   * Creates a logging version of a ResultSet
+   * Creates a logging version of a ResultSet.
    *
    * @param rs - the ResultSet to proxy
    * @return - the ResultSet with logging
@@ -141,7 +141,7 @@ public static ResultSet newInstance(ResultSet rs, Log statementLog, int querySta
   }
 
   /**
-   * Get the wrapped result set
+   * Get the wrapped result set.
    *
    * @return the resultSet
    */

File: src/main/java/org/apache/ibatis/logging/jdbc/StatementLogger.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.ibatis.reflection.ExceptionUtil;
 
 /**
- * Statement proxy to add logging
+ * Statement proxy to add logging.
  *
  * @author Clinton Begin
  * @author Eduardo Macarron
@@ -68,7 +68,7 @@ public Object invoke(Object proxy, Method method, Object[] params) throws Throwa
   }
 
   /**
-   * Creates a logging version of a Statement
+   * Creates a logging version of a Statement.
    *
    * @param stmt - the statement
    * @return - the proxy
@@ -80,7 +80,7 @@ public static Statement newInstance(Statement stmt, Log statementLog, int queryS
   }
 
   /**
-   * return the wrapped statement
+   * return the wrapped statement.
    *
    * @return the statement
    */

File: src/main/java/org/apache/ibatis/mapping/ResultMap.java
Patch:
@@ -104,7 +104,7 @@ public ResultMap build() {
           }
         }
         final String property = resultMapping.getProperty();
-        if(property != null) {
+        if (property != null) {
           resultMap.mappedProperties.add(property);
         }
         if (resultMapping.getFlags().contains(ResultFlag.CONSTRUCTOR)) {

File: src/main/java/org/apache/ibatis/reflection/DefaultReflectorFactory.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -38,7 +38,7 @@ public void setClassCacheEnabled(boolean classCacheEnabled) {
   @Override
   public Reflector findForClass(Class<?> type) {
     if (classCacheEnabled) {
-            // synchronized (type) removed see issue #461
+      // synchronized (type) removed see issue #461
       return reflectorMap.computeIfAbsent(type, Reflector::new);
     } else {
       return new Reflector(type);

File: src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -147,7 +147,7 @@ private static Type resolveTypeVar(TypeVariable<?> typeVar, Type srcType, Class<
 
     if (clazz == declaringClass) {
       Type[] bounds = typeVar.getBounds();
-      if(bounds.length > 0) {
+      if (bounds.length > 0) {
         return bounds[0];
       }
       return Object.class;

File: src/main/java/org/apache/ibatis/reflection/property/PropertyCopier.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -32,7 +32,7 @@ public static void copyBeanProperties(Class<?> type, Object sourceBean, Object d
     Class<?> parent = type;
     while (parent != null) {
       final Field[] fields = parent.getDeclaredFields();
-      for(Field field : fields) {
+      for (Field field : fields) {
         try {
           try {
             field.set(destinationBean, field.get(sourceBean));

File: src/main/java/org/apache/ibatis/scripting/xmltags/DynamicContext.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -77,6 +77,7 @@ static class ContextMap extends HashMap<String, Object> {
     private static final long serialVersionUID = 2977601501966151582L;
 
     private MetaObject parameterMetaObject;
+
     public ContextMap(MetaObject parameterMetaObject) {
       this.parameterMetaObject = parameterMetaObject;
     }

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSession.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -40,7 +40,6 @@
 import org.apache.ibatis.session.SqlSession;
 
 /**
- *
  * The default implementation for {@link SqlSession}.
  * Note that this class is not Thread-Safe.
  *

File: src/main/java/org/apache/ibatis/transaction/Transaction.java
Patch:
@@ -27,7 +27,7 @@
 public interface Transaction {
 
   /**
-   * Retrieve inner database connection
+   * Retrieve inner database connection.
    * @return DataBase connection
    * @throws SQLException
    */
@@ -52,7 +52,7 @@ public interface Transaction {
   void close() throws SQLException;
 
   /**
-   * Get transaction timeout if set
+   * Get transaction timeout if set.
    * @throws SQLException
    */
   Integer getTimeout() throws SQLException;

File: src/main/java/org/apache/ibatis/transaction/jdbc/JdbcTransaction.java
Patch:
@@ -126,7 +126,7 @@ protected void resetAutoCommit() {
     } catch (SQLException e) {
       if (log.isDebugEnabled()) {
         log.debug("Error resetting autocommit to true "
-          + "before closing the connection.  Cause: " + e);
+            + "before closing the connection.  Cause: " + e);
       }
     }
   }

File: src/main/java/org/apache/ibatis/type/UnknownTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -88,7 +88,7 @@ private TypeHandler<?> resolveTypeHandler(ResultSet rs, String column) {
       columnIndexLookup = new HashMap<>();
       ResultSetMetaData rsmd = rs.getMetaData();
       int count = rsmd.getColumnCount();
-      for (int i=1; i <= count; i++) {
+      for (int i = 1; i <= count; i++) {
         String name = rsmd.getColumnName(i);
         columnIndexLookup.put(name,i);
       }

File: src/main/java/org/apache/ibatis/type/YearMonthTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -22,8 +22,8 @@
 import java.time.YearMonth;
 
 /**
- * Type Handler for {@link java.time.YearMonth}
- *
+ * Type Handler for {@link java.time.YearMonth}.
+ * <p>
  * YearMonthTypeHandler relies upon
  * {@link java.time.YearMonth#parse YearMonth.parse}. Therefore column values
  * are expected as strings. The format must be uuuu-MM. Example: "2016-08"

File: src/main/java/org/apache/ibatis/scripting/xmltags/ForEachSqlNode.java
Patch:
@@ -59,6 +59,7 @@ public boolean apply(DynamicContext context) {
     applyOpen(context);
     int i = 0;
     for (Object o : iterable) {
+      DynamicContext oldContext = context;
       if (first || separator == null) {
         context = new PrefixedContext(context, "");
       } else {
@@ -79,7 +80,6 @@ public boolean apply(DynamicContext context) {
       if (first) {
         first = !((PrefixedContext) context).isPrefixApplied();
       }
-      DynamicContext oldContext = context;
       context = oldContext;
       i++;
     }

File: src/main/java/org/apache/ibatis/annotations/CacheNamespaceRef.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/Lang.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/Property.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cache/decorators/FifoCache.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/cache/decorators/LruCache.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/ResultExtractor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/SimpleExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/parameter/ParameterHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/result/ResultMapException.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/resultset/ResultSetHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/jdbc/SqlRunner.java
Patch:
@@ -248,7 +248,7 @@ private List<Map<String, Object>> getResults(ResultSet rs) throws SQLException {
     } finally {
       if (rs != null) {
         try {
-            rs.close();
+          rs.close();
         } catch (Exception e) {
           // ignore
         }

File: src/main/java/org/apache/ibatis/logging/LogFactory.java
Patch:
@@ -24,7 +24,7 @@
 public final class LogFactory {
 
   /**
-   * Marker to be used by logging implementations that support markers
+   * Marker to be used by logging implementations that support markers.
    */
   public static final String MARKER = "MYBATIS";
 

File: src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.ibatis.reflection.ArrayUtil;
 
 /**
- * Base class for proxies to do logging
+ * Base class for proxies to do logging.
  *
  * @author Clinton Begin
  * @author Eduardo Macarron

File: src/main/java/org/apache/ibatis/logging/jdbc/ConnectionLogger.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.ibatis.reflection.ExceptionUtil;
 
 /**
- * Connection proxy to add logging
+ * Connection proxy to add logging.
  *
  * @author Clinton Begin
  * @author Eduardo Macarron
@@ -75,7 +75,7 @@ public Object invoke(Object proxy, Method method, Object[] params)
   }
 
   /**
-   * Creates a logging version of a connection
+   * Creates a logging version of a connection.
    *
    * @param conn - the original connection
    * @return - the connection with logging
@@ -87,7 +87,7 @@ public static Connection newInstance(Connection conn, Log statementLog, int quer
   }
 
   /**
-   * return the wrapped connection
+   * return the wrapped connection.
    *
    * @return the connection
    */

File: src/main/java/org/apache/ibatis/logging/jdbc/PreparedStatementLogger.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.ibatis.reflection.ExceptionUtil;
 
 /**
- * PreparedStatement proxy to add logging
+ * PreparedStatement proxy to add logging.
  *
  * @author Clinton Begin
  * @author Eduardo Macarron
@@ -83,7 +83,7 @@ public Object invoke(Object proxy, Method method, Object[] params) throws Throwa
   }
 
   /**
-   * Creates a logging version of a PreparedStatement
+   * Creates a logging version of a PreparedStatement.
    *
    * @param stmt - the statement
    * @param statementLog - the statement log
@@ -97,7 +97,7 @@ public static PreparedStatement newInstance(PreparedStatement stmt, Log statemen
   }
 
   /**
-   * Return the wrapped prepared statement
+   * Return the wrapped prepared statement.
    *
    * @return the PreparedStatement
    */

File: src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.ibatis.reflection.ExceptionUtil;
 
 /**
- * ResultSet proxy to add logging
+ * ResultSet proxy to add logging.
  *
  * @author Clinton Begin
  * @author Eduardo Macarron
@@ -129,7 +129,7 @@ private void printColumnValues(int columnCount) {
   }
 
   /**
-   * Creates a logging version of a ResultSet
+   * Creates a logging version of a ResultSet.
    *
    * @param rs - the ResultSet to proxy
    * @return - the ResultSet with logging
@@ -141,7 +141,7 @@ public static ResultSet newInstance(ResultSet rs, Log statementLog, int querySta
   }
 
   /**
-   * Get the wrapped result set
+   * Get the wrapped result set.
    *
    * @return the resultSet
    */

File: src/main/java/org/apache/ibatis/logging/jdbc/StatementLogger.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.ibatis.reflection.ExceptionUtil;
 
 /**
- * Statement proxy to add logging
+ * Statement proxy to add logging.
  *
  * @author Clinton Begin
  * @author Eduardo Macarron
@@ -68,7 +68,7 @@ public Object invoke(Object proxy, Method method, Object[] params) throws Throwa
   }
 
   /**
-   * Creates a logging version of a Statement
+   * Creates a logging version of a Statement.
    *
    * @param stmt - the statement
    * @return - the proxy
@@ -80,7 +80,7 @@ public static Statement newInstance(Statement stmt, Log statementLog, int queryS
   }
 
   /**
-   * return the wrapped statement
+   * return the wrapped statement.
    *
    * @return the statement
    */

File: src/main/java/org/apache/ibatis/mapping/ResultMap.java
Patch:
@@ -104,7 +104,7 @@ public ResultMap build() {
           }
         }
         final String property = resultMapping.getProperty();
-        if(property != null) {
+        if (property != null) {
           resultMap.mappedProperties.add(property);
         }
         if (resultMapping.getFlags().contains(ResultFlag.CONSTRUCTOR)) {

File: src/main/java/org/apache/ibatis/reflection/DefaultReflectorFactory.java
Patch:
@@ -38,7 +38,7 @@ public void setClassCacheEnabled(boolean classCacheEnabled) {
   @Override
   public Reflector findForClass(Class<?> type) {
     if (classCacheEnabled) {
-            // synchronized (type) removed see issue #461
+      // synchronized (type) removed see issue #461
       return reflectorMap.computeIfAbsent(type, Reflector::new);
     } else {
       return new Reflector(type);

File: src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java
Patch:
@@ -147,7 +147,7 @@ private static Type resolveTypeVar(TypeVariable<?> typeVar, Type srcType, Class<
 
     if (clazz == declaringClass) {
       Type[] bounds = typeVar.getBounds();
-      if(bounds.length > 0) {
+      if (bounds.length > 0) {
         return bounds[0];
       }
       return Object.class;

File: src/main/java/org/apache/ibatis/reflection/property/PropertyCopier.java
Patch:
@@ -32,7 +32,7 @@ public static void copyBeanProperties(Class<?> type, Object sourceBean, Object d
     Class<?> parent = type;
     while (parent != null) {
       final Field[] fields = parent.getDeclaredFields();
-      for(Field field : fields) {
+      for (Field field : fields) {
         try {
           try {
             field.set(destinationBean, field.get(sourceBean));

File: src/main/java/org/apache/ibatis/scripting/xmltags/DynamicContext.java
Patch:
@@ -77,6 +77,7 @@ static class ContextMap extends HashMap<String, Object> {
     private static final long serialVersionUID = 2977601501966151582L;
 
     private MetaObject parameterMetaObject;
+
     public ContextMap(MetaObject parameterMetaObject) {
       this.parameterMetaObject = parameterMetaObject;
     }

File: src/main/java/org/apache/ibatis/scripting/xmltags/ForEachSqlNode.java
Patch:
@@ -59,7 +59,6 @@ public boolean apply(DynamicContext context) {
     applyOpen(context);
     int i = 0;
     for (Object o : iterable) {
-      DynamicContext oldContext = context;
       if (first || separator == null) {
         context = new PrefixedContext(context, "");
       } else {
@@ -80,6 +79,7 @@ public boolean apply(DynamicContext context) {
       if (first) {
         first = !((PrefixedContext) context).isPrefixApplied();
       }
+      DynamicContext oldContext = context;
       context = oldContext;
       i++;
     }

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSession.java
Patch:
@@ -40,7 +40,6 @@
 import org.apache.ibatis.session.SqlSession;
 
 /**
- *
  * The default implementation for {@link SqlSession}.
  * Note that this class is not Thread-Safe.
  *

File: src/main/java/org/apache/ibatis/transaction/Transaction.java
Patch:
@@ -27,7 +27,7 @@
 public interface Transaction {
 
   /**
-   * Retrieve inner database connection
+   * Retrieve inner database connection.
    * @return DataBase connection
    * @throws SQLException
    */
@@ -52,7 +52,7 @@ public interface Transaction {
   void close() throws SQLException;
 
   /**
-   * Get transaction timeout if set
+   * Get transaction timeout if set.
    * @throws SQLException
    */
   Integer getTimeout() throws SQLException;

File: src/main/java/org/apache/ibatis/transaction/jdbc/JdbcTransaction.java
Patch:
@@ -126,7 +126,7 @@ protected void resetAutoCommit() {
     } catch (SQLException e) {
       if (log.isDebugEnabled()) {
         log.debug("Error resetting autocommit to true "
-          + "before closing the connection.  Cause: " + e);
+            + "before closing the connection.  Cause: " + e);
       }
     }
   }

File: src/main/java/org/apache/ibatis/type/UnknownTypeHandler.java
Patch:
@@ -88,7 +88,7 @@ private TypeHandler<?> resolveTypeHandler(ResultSet rs, String column) {
       columnIndexLookup = new HashMap<>();
       ResultSetMetaData rsmd = rs.getMetaData();
       int count = rsmd.getColumnCount();
-      for (int i=1; i <= count; i++) {
+      for (int i = 1; i <= count; i++) {
         String name = rsmd.getColumnName(i);
         columnIndexLookup.put(name,i);
       }

File: src/main/java/org/apache/ibatis/type/YearMonthTypeHandler.java
Patch:
@@ -22,8 +22,8 @@
 import java.time.YearMonth;
 
 /**
- * Type Handler for {@link java.time.YearMonth}
- *
+ * Type Handler for {@link java.time.YearMonth}.
+ * <p>
  * YearMonthTypeHandler relies upon
  * {@link java.time.YearMonth#parse YearMonth.parse}. Therefore column values
  * are expected as strings. The format must be uuuu-MM. Example: "2016-08"

File: src/main/java/org/apache/ibatis/annotations/Lang.java
Patch:
@@ -15,14 +15,14 @@
  */
 package org.apache.ibatis.annotations;
 
-import org.apache.ibatis.scripting.LanguageDriver;
-
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.apache.ibatis.scripting.LanguageDriver;
+
 /**
  * @author Clinton Begin
  */

File: src/main/java/org/apache/ibatis/annotations/Mapper.java
Patch:
@@ -17,10 +17,9 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
-import java.lang.annotation.RetentionPolicy;
-
 import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
 /**

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -184,7 +184,7 @@ private <E> Object convertToArray(List<E> list) {
       for (int i = 0; i < list.size(); i++) {
         Array.set(array, i, list.get(i));
       }
-    return array;
+      return array;
     } else {
       return list.toArray((E[])array);
     }
@@ -350,7 +350,7 @@ public boolean returnsCursor() {
     }
 
     /**
-     * return whether return type is {@code java.util.Optional}
+     * return whether return type is {@code java.util.Optional}.
      * @return return {@code true}, if return type is {@code java.util.Optional}
      * @since 3.5.0
      */

File: src/main/java/org/apache/ibatis/builder/BaseBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperEntityResolver.java
Patch:
@@ -25,7 +25,7 @@
 import org.xml.sax.SAXException;
 
 /**
- * Offline entity resolver for the MyBatis DTDs
+ * Offline entity resolver for the MyBatis DTDs.
  *
  * @author Clinton Begin
  * @author Eduardo Macarron
@@ -41,7 +41,7 @@ public class XMLMapperEntityResolver implements EntityResolver {
   private static final String MYBATIS_MAPPER_DTD = "org/apache/ibatis/builder/xml/mybatis-3-mapper.dtd";
 
   /**
-   * Converts a public DTD into a local one
+   * Converts a public DTD into a local one.
    *
    * @param publicId The public id that is what comes after "PUBLIC"
    * @param systemId The system id that is what comes after the public id.

File: src/main/java/org/apache/ibatis/cache/decorators/FifoCache.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.ibatis.cache.Cache;
 
 /**
- * FIFO (first in, first out) cache decorator
+ * FIFO (first in, first out) cache decorator.
  *
  * @author Clinton Begin
  */

File: src/main/java/org/apache/ibatis/cache/decorators/LruCache.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.ibatis.cache.Cache;
 
 /**
- * Lru (least recently used) cache decorator
+ * Lru (least recently used) cache decorator.
  *
  * @author Clinton Begin
  */

File: src/main/java/org/apache/ibatis/cache/decorators/TransactionalCache.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  * The 2nd level cache transactional buffer.
- *
+ * <p>
  * This class holds all cache entries that are to be added to the 2nd level cache during a Session.
  * Entries are sent to the cache when commit is called or discarded if the Session is rolled back.
  * Blocking cache support has been added. Therefore any get() that returns a cache miss

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -134,7 +134,7 @@ public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBoun
     BoundSql boundSql = ms.getBoundSql(parameter);
     CacheKey key = createCacheKey(ms, parameter, rowBounds, boundSql);
     return query(ms, parameter, rowBounds, resultHandler, key, boundSql);
- }
+  }
 
   @SuppressWarnings("unchecked")
   @Override
@@ -377,7 +377,7 @@ public boolean canLoad() {
     }
 
     public void load() {
-      @SuppressWarnings( "unchecked" )
+      @SuppressWarnings("unchecked")
       // we suppose we get back a List
       List<Object> list = (List<Object>) localCache.getObject(key);
       Object value = resultExtractor.extractObjectFromList(list, targetType);

File: src/main/java/org/apache/ibatis/executor/BatchExecutorException.java
Patch:
@@ -69,7 +69,7 @@ public List<BatchResult> getSuccessfulBatchResults() {
 
   /**
    * Returns the SQL statement that caused the failure
-   * (not the parameterArray)
+   * (not the parameterArray).
    *
    * @return the failing SQL string
    */
@@ -78,7 +78,7 @@ public String getFailingSqlStatement() {
   }
 
   /**
-   * Returns the statement id of the statement that caused the failure
+   * Returns the statement id of the statement that caused the failure.
    *
    * @return the statement id
    */

File: src/main/java/org/apache/ibatis/executor/ResultExtractor.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.apache.ibatis.executor;
 
+import java.lang.reflect.Array;
+import java.util.List;
+
 import org.apache.ibatis.reflection.MetaObject;
 import org.apache.ibatis.reflection.factory.ObjectFactory;
 import org.apache.ibatis.session.Configuration;
 
-import java.lang.reflect.Array;
-import java.util.List;
-
 /**
  * @author Andrew Gustafson
  */

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java
Patch:
@@ -52,9 +52,9 @@ public class ResultLoaderMap {
   public void addLoader(String property, MetaObject metaResultObject, ResultLoader resultLoader) {
     String upperFirst = getUppercaseFirstProperty(property);
     if (!upperFirst.equalsIgnoreCase(property) && loaderMap.containsKey(upperFirst)) {
-      throw new ExecutorException("Nested lazy loaded result property '" + property +
-              "' for query id '" + resultLoader.mappedStatement.getId() +
-              " already exists in the result map. The leftmost property of all lazy loaded properties must be unique within a result map.");
+      throw new ExecutorException("Nested lazy loaded result property '" + property
+              + "' for query id '" + resultLoader.mappedStatement.getId()
+              + " already exists in the result map. The leftmost property of all lazy loaded properties must be unique within a result map.");
     }
     loaderMap.put(upperFirst, new LoadPair(property, metaResultObject, resultLoader));
   }

File: src/main/java/org/apache/ibatis/executor/parameter/ParameterHandler.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.SQLException;
 
 /**
- * A parameter handler sets the parameters of the {@code PreparedStatement}
+ * A parameter handler sets the parameters of the {@code PreparedStatement}.
  *
  * @author Clinton Begin
  */

File: src/main/java/org/apache/ibatis/executor/resultset/ResultSetHandler.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.apache.ibatis.executor.resultset;
 
-import org.apache.ibatis.cursor.Cursor;
-
 import java.sql.CallableStatement;
 import java.sql.SQLException;
 import java.sql.Statement;
 import java.util.List;
 
+import org.apache.ibatis.cursor.Cursor;
+
 /**
  * @author Clinton Begin
  */

File: src/main/java/org/apache/ibatis/annotations/Lang.java
Patch:
@@ -15,14 +15,14 @@
  */
 package org.apache.ibatis.annotations;
 
-import org.apache.ibatis.scripting.LanguageDriver;
-
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.apache.ibatis.scripting.LanguageDriver;
+
 /**
  * @author Clinton Begin
  */

File: src/main/java/org/apache/ibatis/annotations/Mapper.java
Patch:
@@ -17,10 +17,9 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
-import java.lang.annotation.RetentionPolicy;
-
 import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
 /**

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -184,7 +184,7 @@ private <E> Object convertToArray(List<E> list) {
       for (int i = 0; i < list.size(); i++) {
         Array.set(array, i, list.get(i));
       }
-    return array;
+      return array;
     } else {
       return list.toArray((E[])array);
     }
@@ -350,7 +350,7 @@ public boolean returnsCursor() {
     }
 
     /**
-     * return whether return type is {@code java.util.Optional}
+     * return whether return type is {@code java.util.Optional}.
      * @return return {@code true}, if return type is {@code java.util.Optional}
      * @since 3.5.0
      */

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperEntityResolver.java
Patch:
@@ -25,7 +25,7 @@
 import org.xml.sax.SAXException;
 
 /**
- * Offline entity resolver for the MyBatis DTDs
+ * Offline entity resolver for the MyBatis DTDs.
  *
  * @author Clinton Begin
  * @author Eduardo Macarron
@@ -41,7 +41,7 @@ public class XMLMapperEntityResolver implements EntityResolver {
   private static final String MYBATIS_MAPPER_DTD = "org/apache/ibatis/builder/xml/mybatis-3-mapper.dtd";
 
   /**
-   * Converts a public DTD into a local one
+   * Converts a public DTD into a local one.
    *
    * @param publicId The public id that is what comes after "PUBLIC"
    * @param systemId The system id that is what comes after the public id.

File: src/main/java/org/apache/ibatis/cache/decorators/FifoCache.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.ibatis.cache.Cache;
 
 /**
- * FIFO (first in, first out) cache decorator
+ * FIFO (first in, first out) cache decorator.
  *
  * @author Clinton Begin
  */

File: src/main/java/org/apache/ibatis/cache/decorators/LruCache.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.ibatis.cache.Cache;
 
 /**
- * Lru (least recently used) cache decorator
+ * Lru (least recently used) cache decorator.
  *
  * @author Clinton Begin
  */

File: src/main/java/org/apache/ibatis/cache/decorators/TransactionalCache.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  * The 2nd level cache transactional buffer.
- *
+ * <p>
  * This class holds all cache entries that are to be added to the 2nd level cache during a Session.
  * Entries are sent to the cache when commit is called or discarded if the Session is rolled back.
  * Blocking cache support has been added. Therefore any get() that returns a cache miss

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -134,7 +134,7 @@ public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBoun
     BoundSql boundSql = ms.getBoundSql(parameter);
     CacheKey key = createCacheKey(ms, parameter, rowBounds, boundSql);
     return query(ms, parameter, rowBounds, resultHandler, key, boundSql);
- }
+  }
 
   @SuppressWarnings("unchecked")
   @Override
@@ -377,7 +377,7 @@ public boolean canLoad() {
     }
 
     public void load() {
-      @SuppressWarnings( "unchecked" )
+      @SuppressWarnings("unchecked")
       // we suppose we get back a List
       List<Object> list = (List<Object>) localCache.getObject(key);
       Object value = resultExtractor.extractObjectFromList(list, targetType);

File: src/main/java/org/apache/ibatis/executor/BatchExecutorException.java
Patch:
@@ -69,7 +69,7 @@ public List<BatchResult> getSuccessfulBatchResults() {
 
   /**
    * Returns the SQL statement that caused the failure
-   * (not the parameterArray)
+   * (not the parameterArray).
    *
    * @return the failing SQL string
    */
@@ -78,7 +78,7 @@ public String getFailingSqlStatement() {
   }
 
   /**
-   * Returns the statement id of the statement that caused the failure
+   * Returns the statement id of the statement that caused the failure.
    *
    * @return the statement id
    */

File: src/main/java/org/apache/ibatis/executor/ResultExtractor.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.apache.ibatis.executor;
 
+import java.lang.reflect.Array;
+import java.util.List;
+
 import org.apache.ibatis.reflection.MetaObject;
 import org.apache.ibatis.reflection.factory.ObjectFactory;
 import org.apache.ibatis.session.Configuration;
 
-import java.lang.reflect.Array;
-import java.util.List;
-
 /**
  * @author Andrew Gustafson
  */

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java
Patch:
@@ -52,9 +52,9 @@ public class ResultLoaderMap {
   public void addLoader(String property, MetaObject metaResultObject, ResultLoader resultLoader) {
     String upperFirst = getUppercaseFirstProperty(property);
     if (!upperFirst.equalsIgnoreCase(property) && loaderMap.containsKey(upperFirst)) {
-      throw new ExecutorException("Nested lazy loaded result property '" + property +
-              "' for query id '" + resultLoader.mappedStatement.getId() +
-              " already exists in the result map. The leftmost property of all lazy loaded properties must be unique within a result map.");
+      throw new ExecutorException("Nested lazy loaded result property '" + property
+              + "' for query id '" + resultLoader.mappedStatement.getId()
+              + " already exists in the result map. The leftmost property of all lazy loaded properties must be unique within a result map.");
     }
     loaderMap.put(upperFirst, new LoadPair(property, metaResultObject, resultLoader));
   }

File: src/main/java/org/apache/ibatis/executor/parameter/ParameterHandler.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.SQLException;
 
 /**
- * A parameter handler sets the parameters of the {@code PreparedStatement}
+ * A parameter handler sets the parameters of the {@code PreparedStatement}.
  *
  * @author Clinton Begin
  */

File: src/main/java/org/apache/ibatis/executor/resultset/ResultSetHandler.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.apache.ibatis.executor.resultset;
 
-import org.apache.ibatis.cursor.Cursor;
-
 import java.sql.CallableStatement;
 import java.sql.SQLException;
 import java.sql.Statement;
 import java.util.List;
 
+import org.apache.ibatis.cursor.Cursor;
+
 /**
  * @author Clinton Begin
  */

File: src/main/java/org/apache/ibatis/builder/BaseBuilder.java
Patch:
@@ -127,7 +127,7 @@ protected TypeHandler<?> resolveTypeHandler(Class<?> javaType, String typeHandle
     if (type != null && !TypeHandler.class.isAssignableFrom(type)) {
       throw new BuilderException("Type " + type.getName() + " is not a valid TypeHandler because it does not implement TypeHandler interface");
     }
-    @SuppressWarnings( "unchecked" ) // already verified it is a TypeHandler
+    @SuppressWarnings("unchecked") // already verified it is a TypeHandler
     Class<? extends TypeHandler<?>> typeHandlerType = (Class<? extends TypeHandler<?>>) type;
     return resolveTypeHandler(javaType, typeHandlerType);
   }

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/io/ExternalResources.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/parsing/GenericTokenParser.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/test/java/org/apache/ibatis/builder/XmlConfigBuilderTest.java
Patch:
@@ -156,7 +156,7 @@ public void registerJavaTypeInitializingTypeHandler() {
     TypeHandler<MyEnum> typeHandler = typeHandlerRegistry.getTypeHandler(MyEnum.class);
 
     assertTrue(typeHandler instanceof EnumOrderTypeHandler);
-    assertArrayEquals(MyEnum.values(), ((EnumOrderTypeHandler) typeHandler).constants);
+    assertArrayEquals(MyEnum.values(), ((EnumOrderTypeHandler<MyEnum>) typeHandler).constants);
   }
 
     @Test

File: src/test/java/org/apache/ibatis/cache/BaseCacheTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/test/java/org/apache/ibatis/submitted/heavy_initial_load/HeavyInitialLoadTest.java
Patch:
@@ -16,8 +16,6 @@
 package org.apache.ibatis.submitted.heavy_initial_load;
 
 import java.io.Reader;
-import java.sql.Connection;
-import java.sql.DriverManager;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;

File: src/test/java/org/apache/ibatis/submitted/multipleresultsetswithassociation/MultipleResultSetTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.apache.ibatis.submitted.multipleresultsetswithassociation;
 
-import java.io.IOException;
 import java.io.Reader;
 import java.sql.Connection;
 import java.util.List;

File: src/test/java/org/apache/ibatis/submitted/nonexistentvariables/NonExistentVariablesTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -15,8 +15,6 @@
  */
 package org.apache.ibatis.submitted.nonexistentvariables;
 
-import static org.junit.jupiter.api.Assertions.fail;
-
 import java.io.Reader;
 
 import org.apache.ibatis.BaseDataTest;

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleIncludeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -19,7 +19,6 @@
 
 import java.io.IOException;
 import java.io.Reader;
-import java.sql.Connection;
 import java.sql.SQLException;
 
 import org.apache.ibatis.BaseDataTest;

File: src/test/java/org/apache/ibatis/type/BigDecimalTypeHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,8 +23,6 @@
 import java.math.BigDecimal;
 
 import org.junit.jupiter.api.Test;
-import org.mockito.Mock;
-import org.mockito.Mockito;
 
 public class BigDecimalTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/UnknownTypeHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -15,7 +15,6 @@
  */
 package org.apache.ibatis.type;
 
-import java.sql.Clob;
 import java.sql.SQLException;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: src/test/java/org/apache/ibatis/builder/XmlConfigBuilderTest.java
Patch:
@@ -156,7 +156,7 @@ public void registerJavaTypeInitializingTypeHandler() {
     TypeHandler<MyEnum> typeHandler = typeHandlerRegistry.getTypeHandler(MyEnum.class);
 
     assertTrue(typeHandler instanceof EnumOrderTypeHandler);
-    assertArrayEquals(MyEnum.values(), ((EnumOrderTypeHandler) typeHandler).constants);
+    assertArrayEquals(MyEnum.values(), ((EnumOrderTypeHandler<MyEnum>) typeHandler).constants);
   }
 
     @Test

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -62,7 +62,7 @@ public int doUpdate(MappedStatement ms, Object parameterObject) throws SQLExcept
       int last = statementList.size() - 1;
       stmt = statementList.get(last);
       applyTransactionTimeout(stmt);
-     handler.parameterize(stmt);//fix Issues 322
+      handler.parameterize(stmt);//fix Issues 322
       BatchResult batchResult = batchResultList.get(last);
       batchResult.addParameterObject(parameterObject);
     } else {
@@ -74,7 +74,6 @@ public int doUpdate(MappedStatement ms, Object parameterObject) throws SQLExcept
       statementList.add(stmt);
       batchResultList.add(new BatchResult(ms, sql, parameterObject));
     }
-  // handler.parameterize(stmt);
     handler.batch(stmt);
     return BATCH_UPDATE_RETURN_VALUE;
   }

File: src/main/java/org/apache/ibatis/annotations/CacheNamespace.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -41,13 +41,13 @@
   int size() default 1024;
 
   boolean readWrite() default true;
-  
+
   boolean blocking() default false;
 
   /**
    * Property values for a implementation object.
    * @since 3.4.2
    */
   Property[] properties() default {};
-  
+
 }

File: src/main/java/org/apache/ibatis/annotations/Mapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,7 @@
 
 /**
  * Marker interface for MyBatis mappers
- * 
+ *
  * @author Frank David Martínez
  */
 @Documented

File: src/main/java/org/apache/ibatis/annotations/Options.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -61,6 +61,6 @@ enum FlushCachePolicy {
   String keyProperty() default "";
 
   String keyColumn() default "";
-  
+
   String resultSets() default "";
 }

File: src/main/java/org/apache/ibatis/annotations/ResultType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
  * ResultHandler.  Those methods must have void return type, so
  * this annotation can be used to tell MyBatis what kind of object
  * it should build for each row.
- * 
+ *
  * @since 3.2.0
  * @author Jeff Butler
  */

File: src/main/java/org/apache/ibatis/binding/MapperRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -52,7 +52,7 @@ public <T> T getMapper(Class<T> type, SqlSession sqlSession) {
       throw new BindingException("Error getting mapper instance. Cause: " + e, e);
     }
   }
-  
+
   public <T> boolean hasMapper(Class<T> type) {
     return knownMappers.containsKey(type);
   }
@@ -104,5 +104,5 @@ public void addMappers(String packageName, Class<?> superType) {
   public void addMappers(String packageName) {
     addMappers(packageName, Object.class);
   }
-  
+
 }

File: src/main/java/org/apache/ibatis/builder/ParameterExpression.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -19,7 +19,7 @@
 
 /**
  * Inline parameter expression parser. Supported grammar (simplified):
- * 
+ *
  * <pre>
  * inline-parameter = (propertyName | expression) oldJdbcType attributes
  * propertyName = /expression language's property navigation path/

File: src/main/java/org/apache/ibatis/builder/xml/XMLIncludeTransformer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -105,7 +105,7 @@ private String getStringAttribute(Node node, String name) {
   }
 
   /**
-   * Read placeholders and their values from include node definition. 
+   * Read placeholders and their values from include node definition.
    * @param node Include node instance
    * @param inheritedVariablesContext Current context used for replace variables in new variables values
    * @return variables context from include instance (no inherited values)

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -352,7 +352,7 @@ private void sqlElement(List<XNode> list, String requiredDatabaseId) {
       }
     }
   }
-  
+
   private boolean databaseIdMatchesCurrent(String id, String databaseId, String requiredDatabaseId) {
     if (requiredDatabaseId != null) {
       if (!requiredDatabaseId.equals(databaseId)) {

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperEntityResolver.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * Offline entity resolver for the MyBatis DTDs
- * 
+ *
  * @author Clinton Begin
  * @author Eduardo Macarron
  */
@@ -42,11 +42,11 @@ public class XMLMapperEntityResolver implements EntityResolver {
 
   /**
    * Converts a public DTD into a local one
-   * 
+   *
    * @param publicId The public id that is what comes after "PUBLIC"
    * @param systemId The system id that is what comes after the public id.
    * @return The InputSource for the DTD
-   * 
+   *
    * @throws org.xml.sax.SAXException If anything goes wrong
    */
   @Override

File: src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java
Patch:
@@ -89,7 +89,7 @@ public void parseStatementNode() {
 
     // Parse selectKey after includes and remove them.
     processSelectKeyNodes(id, parameterTypeClass, langDriver);
-    
+
     // Parse the SQL (pre: <selectKey> and <include> were parsed and removed)
     SqlSource sqlSource = langDriver.createSqlSource(configuration, context, parameterTypeClass);
     String resultSets = context.getStringAttribute("resultSets");
@@ -108,7 +108,7 @@ public void parseStatementNode() {
 
     builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,
         fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,
-        resultSetTypeEnum, flushCache, useCache, resultOrdered, 
+        resultSetTypeEnum, flushCache, useCache, resultOrdered,
         keyGenerator, keyProperty, keyColumn, databaseId, langDriver, resultSets);
   }
 

File: src/main/java/org/apache/ibatis/cache/CacheKey.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -57,7 +57,7 @@ public int getUpdateCount() {
   }
 
   public void update(Object object) {
-    int baseHashCode = object == null ? 1 : ArrayUtil.hashCode(object); 
+    int baseHashCode = object == null ? 1 : ArrayUtil.hashCode(object);
 
     count++;
     checksum += baseHashCode;

File: src/main/java/org/apache/ibatis/cache/TransactionalCacheManager.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@ public void clear(Cache cache) {
   public Object getObject(Cache cache, CacheKey key) {
     return getTransactionalCache(cache).getObject(key);
   }
-  
+
   public void putObject(Cache cache, CacheKey key, Object value) {
     getTransactionalCache(cache).putObject(key, value);
   }

File: src/main/java/org/apache/ibatis/cache/decorators/SerializedCache.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -122,7 +122,7 @@ public CustomObjectInputStream(InputStream in) throws IOException {
     protected Class<?> resolveClass(ObjectStreamClass desc) throws ClassNotFoundException {
       return Resources.classForName(desc.getName());
     }
-    
+
   }
 
 }

File: src/main/java/org/apache/ibatis/cache/decorators/SoftCache.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -74,7 +74,7 @@ public Object getObject(Object key) {
       if (result == null) {
         delegate.removeObject(key);
       } else {
-        // See #586 (and #335) modifications need more than a read lock 
+        // See #586 (and #335) modifications need more than a read lock
         synchronized (hardLinksToAvoidGarbageCollection) {
           hardLinksToAvoidGarbageCollection.addFirst(result);
           if (hardLinksToAvoidGarbageCollection.size() > numberOfHardLinks) {
@@ -122,4 +122,4 @@ private static class SoftEntry extends SoftReference<Object> {
     }
   }
 
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/cache/decorators/SynchronizedCache.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,7 @@
 public class SynchronizedCache implements Cache {
 
   private final Cache delegate;
-  
+
   public SynchronizedCache(Cache delegate) {
     this.delegate = delegate;
   }

File: src/main/java/org/apache/ibatis/cache/decorators/WeakCache.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
 /**
  * Weak Reference cache decorator.
  * Thanks to Dr. Heinz Kabutz for his guidance here.
- * 
+ *
  * @author Clinton Begin
  */
 public class WeakCache implements Cache {

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -246,7 +246,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
     } catch (Throwable t) {
       throw ExceptionUtil.unwrapThrowable(t);
     }
-    
+
   }
 
   private void checkConnection() throws SQLException {

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -427,7 +427,7 @@ private PooledConnection popConnection(String username, String password) throws
                      connection. At the end of this loop, bad {@link @conn} will be set as null.
                    */
                   log.debug("Bad connection. Could not roll back");
-                }  
+                }
               }
               conn = new PooledConnection(oldestActiveConnection.getRealConnection(), this);
               conn.setCreatedTimestamp(oldestActiveConnection.getCreatedTimestamp());

File: src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@
  * @author Eduardo Macarron
  */
 public class UnpooledDataSource implements DataSource {
-  
+
   private ClassLoader driverClassLoader;
   private Properties driverProperties;
   private static Map<String, Driver> registeredDrivers = new ConcurrentHashMap<>();

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -345,7 +345,7 @@ protected Connection getConnection(Log statementLog) throws SQLException {
   public void setExecutorWrapper(Executor wrapper) {
     this.wrapper = wrapper;
   }
-  
+
   private static class DeferredLoad {
 
     private final MetaObject resultObject;

File: src/main/java/org/apache/ibatis/executor/CachingExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -55,7 +55,7 @@ public Transaction getTransaction() {
   public void close(boolean forceRollback) {
     try {
       //issues #499, #524 and #573
-      if (forceRollback) { 
+      if (forceRollback) {
         tcm.rollback();
       } else {
         tcm.commit();
@@ -163,7 +163,7 @@ public void clearLocalCache() {
 
   private void flushCacheIfRequired(MappedStatement ms) {
     Cache cache = ms.getCache();
-    if (cache != null && ms.isFlushCacheRequired()) {      
+    if (cache != null && ms.isFlushCacheRequired()) {
       tcm.clear(cache);
     }
   }

File: src/main/java/org/apache/ibatis/executor/loader/ProxyFactory.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,5 +29,5 @@ public interface ProxyFactory {
   void setProperties(Properties properties);
 
   Object createProxy(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs);
-  
+
 }

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoader.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -49,10 +49,10 @@ public class ResultLoader {
   protected final BoundSql boundSql;
   protected final ResultExtractor resultExtractor;
   protected final long creatorThreadId;
-  
+
   protected boolean loaded;
   protected Object resultObject;
-  
+
   public ResultLoader(Configuration config, Executor executor, MappedStatement mappedStatement, Object parameterObject, Class<?> targetType, CacheKey cacheKey, BoundSql boundSql) {
     this.configuration = config;
     this.executor = executor;

File: src/main/java/org/apache/ibatis/executor/resultset/ResultSetWrapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -91,7 +91,7 @@ public JdbcType getJdbcType(String columnName) {
    * Gets the type handler to use when reading the result set.
    * Tries to get from the TypeHandlerRegistry by searching for the property type.
    * If not found it gets the column JDBC type and tries to get a handler for it.
-   * 
+   *
    * @param propertyType
    * @param columnName
    * @return
@@ -190,5 +190,5 @@ private Set<String> prependPrefixes(Set<String> columnNames, String prefix) {
     }
     return prefixed;
   }
-  
+
 }

File: src/main/java/org/apache/ibatis/io/ClassLoaderWrapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -32,10 +32,10 @@ public class ClassLoaderWrapper {
     try {
       systemClassLoader = ClassLoader.getSystemClassLoader();
     } catch (SecurityException ignored) {
-      // AccessControlException on Google App Engine   
+      // AccessControlException on Google App Engine
     }
   }
-  
+
   /**
    * Get a resource as a URL using the current class path
    *

File: src/main/java/org/apache/ibatis/io/ResolverUtil.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -233,7 +233,7 @@ public ResolverUtil<T> find(Test test, String packageName) {
   /**
    * Converts a Java package name to a path that can be looked up with a call to
    * {@link ClassLoader#getResources(String)}.
-   * 
+   *
    * @param packageName The Java package name to convert to a path
    */
   protected String getPackagePath(String packageName) {
@@ -265,4 +265,4 @@ protected void addIfMatching(Test test, String fqn) {
           t.getClass().getName() + " with message: " + t.getMessage());
     }
   }
-}
\ No newline at end of file
+}

File: src/main/java/org/apache/ibatis/jdbc/SelectBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,7 +17,7 @@
 
 /**
  * @deprecated Use the {@link SQL} Class
- * 
+ *
  * @author Clinton Begin
  */
 @Deprecated

File: src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -31,7 +31,7 @@
 
 /**
  * Base class for proxies to do logging
- * 
+ *
  * @author Clinton Begin
  * @author Eduardo Macarron
  */

File: src/main/java/org/apache/ibatis/logging/log4j/Log4jImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
  * @author Eduardo Macarron
  */
 public class Log4jImpl implements Log {
-  
+
   private static final String FQCN = Log4jImpl.class.getName();
 
   private final Logger log;

File: src/main/java/org/apache/ibatis/logging/log4j2/Log4j2LoggerImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,7 @@
  * @author Eduardo Macarron
  */
 public class Log4j2LoggerImpl implements Log {
-  
+
   private static final Marker MARKER = MarkerManager.getMarker(LogFactory.MARKER);
 
   private final Logger log;

File: src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLocationAwareLoggerImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,7 @@
  * @author Eduardo Macarron
  */
 class Slf4jLocationAwareLoggerImpl implements Log {
-  
+
   private static final Marker MARKER = MarkerFactory.getMarker(LogFactory.MARKER);
 
   private static final String FQCN = Slf4jImpl.class.getName();

File: src/main/java/org/apache/ibatis/mapping/BoundSql.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,8 +25,8 @@
 
 /**
  * An actual SQL String got from an {@link SqlSource} after having processed any dynamic content.
- * The SQL may have SQL placeholders "?" and an list (ordered) of an parameter mappings 
- * with the additional information for each parameter (at least the property name of the input object to read 
+ * The SQL may have SQL placeholders "?" and an list (ordered) of an parameter mappings
+ * with the additional information for each parameter (at least the property name of the input object to read
  * the value from).
  * <p>
  * Can also have additional parameters that are created by the dynamic language (for loops, bind...).

File: src/main/java/org/apache/ibatis/mapping/CacheBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -83,7 +83,7 @@ public CacheBuilder blocking(boolean blocking) {
     this.blocking = blocking;
     return this;
   }
-  
+
   public CacheBuilder properties(Properties properties) {
     this.properties = properties;
     return this;

File: src/main/java/org/apache/ibatis/mapping/DatabaseIdProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,7 +24,7 @@
  * Should return an id to identify the type of this database.
  * That id can be used later on to build different queries for each database type
  * This mechanism enables supporting multiple vendors or versions
- * 
+ *
  * @author Eduardo Macarron
  */
 public interface DatabaseIdProvider {

File: src/main/java/org/apache/ibatis/mapping/MappedStatement.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -180,7 +180,7 @@ public Builder resulSets(String resultSet) {
       mappedStatement.resultSets = delimitedStringToArray(resultSet);
       return this;
     }
-    
+
     public MappedStatement build() {
       assert mappedStatement.configuration != null;
       assert mappedStatement.id != null;
@@ -288,7 +288,7 @@ public String[] getResultSets() {
   public String[] getResulSets() {
     return resultSets;
   }
-  
+
   public BoundSql getBoundSql(Object parameterObject) {
     BoundSql boundSql = sqlSource.getBoundSql(parameterObject);
     List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();

File: src/main/java/org/apache/ibatis/mapping/ResultMap.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -253,7 +253,7 @@ public Discriminator getDiscriminator() {
   public void forceNestedResultMaps() {
     hasNestedResultMaps = true;
   }
-  
+
   public Boolean getAutoMapping() {
     return autoMapping;
   }

File: src/main/java/org/apache/ibatis/mapping/SqlSource.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 package org.apache.ibatis.mapping;
 
 /**
- * Represents the content of a mapped statement read from an XML file or an annotation. 
+ * Represents the content of a mapped statement read from an XML file or an annotation.
  * It creates the SQL that will be passed to the database out of the input parameter received from the user.
  *
  * @author Clinton Begin

File: src/main/java/org/apache/ibatis/plugin/InterceptorChain.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@ public Object pluginAll(Object target) {
   public void addInterceptor(Interceptor interceptor) {
     interceptors.add(interceptor);
   }
-  
+
   public List<Interceptor> getInterceptors() {
     return Collections.unmodifiableList(interceptors);
   }

File: src/main/java/org/apache/ibatis/plugin/Plugin.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -70,7 +70,7 @@ private static Map<Class<?>, Set<Method>> getSignatureMap(Interceptor intercepto
     Intercepts interceptsAnnotation = interceptor.getClass().getAnnotation(Intercepts.class);
     // issue #251
     if (interceptsAnnotation == null) {
-      throw new PluginException("No @Intercepts annotation was found in interceptor " + interceptor.getClass().getName());      
+      throw new PluginException("No @Intercepts annotation was found in interceptor " + interceptor.getClass().getName());
     }
     Signature[] sigs = interceptsAnnotation.value();
     Map<Class<?>, Set<Method>> signatureMap = new HashMap<>();

File: src/main/java/org/apache/ibatis/scripting/LanguageDriverRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -49,7 +49,7 @@ public void register(LanguageDriver instance) {
       LANGUAGE_DRIVER_MAP.put(cls, instance);
     }
   }
-  
+
   public LanguageDriver getDriver(Class<? extends LanguageDriver> cls) {
     return LANGUAGE_DRIVER_MAP.get(cls);
   }

File: src/main/java/org/apache/ibatis/scripting/defaults/RawLanguageDriver.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,7 @@
  * As of 3.2.4 the default XML language is able to identify static statements
  * and create a {@link RawSqlSource}. So there is no need to use RAW unless you
  * want to make sure that there is not any dynamic tag for any reason.
- * 
+ *
  * @since 3.2.0
  * @author Eduardo Macarron
  */

File: src/main/java/org/apache/ibatis/scripting/defaults/RawSqlSource.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -26,9 +26,9 @@
 import org.apache.ibatis.session.Configuration;
 
 /**
- * Static SqlSource. It is faster than {@link DynamicSqlSource} because mappings are 
+ * Static SqlSource. It is faster than {@link DynamicSqlSource} because mappings are
  * calculated during startup.
- * 
+ *
  * @since 3.2.0
  * @author Eduardo Macarron
  */

File: src/main/java/org/apache/ibatis/scripting/xmltags/ForEachSqlNode.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -66,9 +66,9 @@ public boolean apply(DynamicContext context) {
         context = new PrefixedContext(context, separator);
       }
       int uniqueNumber = context.getUniqueNumber();
-      // Issue #709 
+      // Issue #709
       if (o instanceof Map.Entry) {
-        @SuppressWarnings("unchecked") 
+        @SuppressWarnings("unchecked")
         Map.Entry<Object, Object> mapEntry = (Map.Entry<Object, Object>) o;
         applyIndex(context, mapEntry.getKey(), uniqueNumber);
         applyItem(context, mapEntry.getValue(), uniqueNumber);

File: src/main/java/org/apache/ibatis/scripting/xmltags/OgnlClassResolver.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -21,9 +21,9 @@
 /**
  * Custom ognl {@code ClassResolver} which behaves same like ognl's
  * {@code DefaultClassResolver}. But uses the {@code Resources}
- * utility class to find the target class instead of {@code Class#forName(String)}. 
+ * utility class to find the target class instead of {@code Class#forName(String)}.
  *
- * @author Daniel Guggi 
+ * @author Daniel Guggi
  *
  * @see <a href='https://github.com/mybatis/mybatis-3/issues/161'>Issue 161</a>
  */

File: src/main/java/org/apache/ibatis/session/AutoMappingBehavior.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,7 +17,7 @@
 
 /**
  * Specifies if and how MyBatis should automatically map columns to fields/properties.
- * 
+ *
  * @author Eduardo Macarron
  */
 public enum AutoMappingBehavior {

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -820,7 +820,7 @@ private void parsePendingResultMaps() {
         }
       } while (resolved);
       if (!incompleteResultMaps.isEmpty() && ex != null) {
-        // At least one result map is unresolvable. 
+        // At least one result map is unresolvable.
         throw ex;
       }
     }

File: src/main/java/org/apache/ibatis/session/SqlSessionFactory.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -19,7 +19,7 @@
 
 /**
  * Creates an {@link SqlSession} out of a connection or a DataSource
- * 
+ *
  * @author Clinton Begin
  */
 public interface SqlSessionFactory {

File: src/main/java/org/apache/ibatis/session/SqlSessionFactoryBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -87,7 +87,7 @@ public SqlSessionFactory build(InputStream inputStream, String environment, Prop
       }
     }
   }
-    
+
   public SqlSessionFactory build(Configuration config) {
     return new DefaultSqlSessionFactory(config);
   }

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSessionFactory.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -112,7 +112,7 @@ private SqlSession openSessionFromConnection(ExecutorType execType, Connection c
         // Failover to true, as most poor drivers
         // or databases won't support transactions
         autoCommit = true;
-      }      
+      }
       final Environment environment = configuration.getEnvironment();
       final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
       final Transaction tx = transactionFactory.newTransaction(connection);

File: src/main/java/org/apache/ibatis/transaction/Transaction.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -20,7 +20,7 @@
 
 /**
  * Wraps a database connection.
- * Handles the connection lifecycle that comprises: its creation, preparation, commit/rollback and close. 
+ * Handles the connection lifecycle that comprises: its creation, preparation, commit/rollback and close.
  *
  * @author Clinton Begin
  */
@@ -56,5 +56,5 @@ public interface Transaction {
    * @throws SQLException
    */
   Integer getTimeout() throws SQLException;
-  
+
 }

File: src/main/java/org/apache/ibatis/transaction/TransactionFactory.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -42,7 +42,7 @@ public interface TransactionFactory {
    * @since 3.1.0
    */
   Transaction newTransaction(Connection conn);
-  
+
   /**
    * Creates a {@link Transaction} out of a datasource.
    * @param dataSource DataSource to take the connection from

File: src/main/java/org/apache/ibatis/transaction/jdbc/JdbcTransaction.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -146,5 +146,5 @@ protected void openConnection() throws SQLException {
   public Integer getTimeout() throws SQLException {
     return null;
   }
-  
+
 }

File: src/main/java/org/apache/ibatis/type/BaseTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,7 +30,7 @@
  * {@link CallableStatement#wasNull()} method for handling the SQL {@code NULL} value.
  * In other words, {@code null} value handling should be performed on subclass.
  * </p>
- * 
+ *
  * @author Clinton Begin
  * @author Simone Tripodi
  * @author Kzuki Shimizu

File: src/main/java/org/apache/ibatis/type/EnumOrdinalTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -85,5 +85,5 @@ public E getNullableResult(CallableStatement cs, int columnIndex) throws SQLExce
       }
     }
   }
-  
+
 }

File: src/main/java/org/apache/ibatis/type/MonthTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@
  * @author Björn Raupach
  */
 public class MonthTypeHandler extends BaseTypeHandler<Month> {
-    
+
     @Override
     public void setNonNullParameter(PreparedStatement ps, int i, Month month, JdbcType type) throws SQLException {
         ps.setInt(i, month.getValue());
@@ -50,5 +50,5 @@ public Month getNullableResult(CallableStatement cs, int columnIndex) throws SQL
         int month = cs.getInt(columnIndex);
         return month == 0 && cs.wasNull() ? null : Month.of(month);
     }
-    
+
 }

File: src/main/java/org/apache/ibatis/type/SqlxmlTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -13,7 +13,6 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-
 package org.apache.ibatis.type;
 
 import java.sql.CallableStatement;
@@ -24,7 +23,7 @@
 
 /**
  * Convert <code>String</code> to/from <code>SQLXML</code>.
- * 
+ *
  * @since 3.5.0
  * @author Iwao AVE!
  */

File: src/main/java/org/apache/ibatis/type/TypeAliasRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -143,7 +143,7 @@ public void registerAlias(Class<?> type) {
     Alias aliasAnnotation = type.getAnnotation(Alias.class);
     if (aliasAnnotation != null) {
       alias = aliasAnnotation.value();
-    } 
+    }
     registerAlias(alias, type);
   }
 
@@ -166,7 +166,7 @@ public void registerAlias(String alias, String value) {
       throw new TypeException("Error registering type alias "+alias+" for "+value+". Cause: " + e, e);
     }
   }
-  
+
   /**
    * @since 3.2.2
    */

File: src/main/java/org/apache/ibatis/type/YearTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
  * @author Björn Raupach
  */
 public class YearTypeHandler extends BaseTypeHandler<Year> {
-    
+
     @Override
     public void setNonNullParameter(PreparedStatement ps, int i, Year year, JdbcType type) throws SQLException {
         ps.setInt(i, year.getValue());
@@ -49,5 +49,5 @@ public Year getNullableResult(CallableStatement cs, int columnIndex) throws SQLE
         int year = cs.getInt(columnIndex);
         return year == 0 && cs.wasNull() ? null : Year.of(year);
     }
-    
+
 }

File: src/test/java/org/apache/ibatis/binding/MapperWithOneAndMany.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,9 +30,9 @@ public interface MapperWithOneAndMany {
     "SELECT *",
     "FROM blog"
   })
-  @Results({ 
+  @Results({
     @Result(
-       property = "author", column = "author_id", 
+       property = "author", column = "author_id",
        one = @One(select = "org.apache.ibatis.binding.BoundAuthorMapper.selectAuthor"),
        many = @Many(select = "selectPostsById"))
   })

File: src/test/java/org/apache/ibatis/cursor/defaults/DefaultCursorTest.java
Patch:
@@ -74,7 +74,7 @@ public void shouldCloseImmediatelyIfResultSetIsClosed() throws Exception {
     final DefaultResultSetHandler resultSetHandler = new DefaultResultSetHandler(executor, ms, parameterHandler,
       resultHandler, boundSql, rowBounds);
 
-    
+
     when(rsmd.getColumnCount()).thenReturn(2);
     doReturn("id").when(rsmd).getColumnLabel(1);
     doReturn(Types.INTEGER).when(rsmd).getColumnType(1);

File: src/test/java/org/apache/ibatis/domain/blog/PostLiteId.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,9 +17,9 @@
 
 public class PostLiteId {
     private int id;
-    
+
     public PostLiteId() {
-      
+
     }
 
     public void setId(int id) {

File: src/test/java/org/apache/ibatis/exceptions/GeneralExceptionsTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -62,7 +62,7 @@ public void shouldInstantiateAndThrowAllCustomExceptions() throws Exception {
         PersistenceException.class,
         SqlSessionException.class,
         TransactionException.class,
-        TypeException.class, 
+        TypeException.class,
         ScriptingException.class
     };
     for (Class<?> exceptionType : exceptionTypes) {

File: src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -314,7 +314,7 @@ public static MappedStatement prepareSelectDiscriminatedPost(final Configuration
         }).build();
     return ms;
   }
-  
+
   public static MappedStatement createInsertAuthorWithIDof99MappedStatement(final Configuration config) {
     MappedStatement ms = new MappedStatement.Builder(config, "insertAuthor", new StaticSqlSource(config,"INSERT INTO author (id,username,password,email,bio) values(99,'someone','******','someone@apache.org',null)"), SqlCommandType.INSERT)
         .statementType(StatementType.STATEMENT)

File: src/test/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -68,7 +68,7 @@ public class DefaultResultSetHandlerTest {
 
   /**
    * Contrary to the spec, some drivers require case-sensitive column names when getting result.
-   * 
+   *
    * @see <a href="http://code.google.com/p/mybatis/issues/detail?id=557">Issue 557</a>
    */
   @Test

File: src/test/java/org/apache/ibatis/io/VFSTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -20,7 +20,7 @@
 
 /**
  * Unit test for VFS getInstance method in multi-thread environment
- * 
+ *
  * @author: jasonleaster
  */
 public class VFSTest {

File: src/test/java/org/apache/ibatis/mapping/ResultMappingTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -37,7 +37,7 @@ public void shouldThrowErrorWhenBothResultMapAndNestedSelectAreSet() {
         .build();
     });
   }
-  
+
   //Issue 4: column is mandatory on nested queries
   @Test
   public void shouldFailWithAMissingColumnInNetstedSelect() throws Exception {

File: src/test/java/org/apache/ibatis/session/SqlSessionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -511,7 +511,7 @@ public void shouldExecuteSelectOneAuthorUsingMapperClassThatReturnsALinedHashMap
       assertEquals(101, author.get("ID"));
     }
   }
-  
+
   @Test
   public void shouldExecuteSelectAllAuthorsUsingMapperClassThatReturnsSet() {
     try (SqlSession session = sqlMapper.openSession()) {

File: src/test/java/org/apache/ibatis/submitted/associationtest/AssociationTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -79,7 +79,7 @@ public void shouldGetAllCarsNonUnique() {
       Assertions.assertEquals(1, cars.size());
     }
   }
-  
+
   @Test
   public void shouldGetAllCarsAndDetectAssociationType() {
     try (SqlSession sqlSession = sqlSessionFactory.openSession()) {

File: src/test/java/org/apache/ibatis/submitted/blobtest/BlobTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -50,7 +50,7 @@ public static void initDatabase() throws Exception {
     public void testInsertBlobThenSelectAll() {
         try (SqlSession sqlSession = sqlSessionFactory.openSession()) {
             BlobMapper blobMapper = sqlSession.getMapper(BlobMapper.class);
-            
+
             byte[] myblob = new byte[] {1, 2, 3, 4, 5};
             BlobRecord blobRecord = new BlobRecord(1, myblob);
             int rows = blobMapper.insert(blobRecord);

File: src/test/java/org/apache/ibatis/submitted/cglib_lazy_error/Person.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@ public boolean equals(Object o) {
     if (!(o instanceof Person)) return false;
 
     Person person = (Person) o;
-    
+
     if (id != null ? !id.equals(person.id) : person.id != null) return false;
 
     return true;

File: src/test/java/org/apache/ibatis/submitted/complex_column/PersonMapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -18,11 +18,11 @@
 import org.apache.ibatis.annotations.*;
 
 public interface PersonMapper {
-    
+
     public Person getWithoutComplex(Long id);
     public Person getWithComplex(Long id);
     public Person getParentWithComplex(Person person);
-    
+
     @Select({
       "SELECT id, firstName, lastName, parent_id, parent_firstName, parent_lastName",
       "FROM Person",

File: src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -18,7 +18,7 @@
 import java.util.*;
 
 public class CustomCollection<T> {
-    
+
     private List<T> data = new ArrayList<T>();
 
     public <K> K[] toArray(K[] a) {
@@ -123,5 +123,5 @@ public void add(int index, T element) {
     public boolean add(T e) {
         return data.add(e);
     }
-    
+
 }

File: src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomObjectFactory.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -100,7 +100,7 @@ private Class<?> resolveInterface(Class<?> type) {
         }
         return classToCreate;
     }
-    
+
     @Override
     public <T> boolean isCollection(Class<T> type) {
       return CustomCollection.class.isAssignableFrom(type);

File: src/test/java/org/apache/ibatis/submitted/custom_collection_handling/Person.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -43,6 +43,6 @@ public CustomCollection<Contact> getContacts() {
 
     public void setContacts(CustomCollection<Contact> contacts) {
         this.contacts = contacts;
-    }    
-    
+    }
+
 }

File: src/test/java/org/apache/ibatis/submitted/duplicate_statements/AnnotatedMapperExtended.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -22,7 +22,7 @@
 /**
  * This interface should fail when added to the configuration.  It has
  * a method with the same name, but different parameters, as a method
- * in the super interface  
+ * in the super interface
  *
  */
 public interface AnnotatedMapperExtended extends AnnotatedMapper {

File: src/test/java/org/apache/ibatis/submitted/dynsql/CustomUtil.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -18,5 +18,5 @@
 public class CustomUtil {
     public static String esc(final String s) {
         return s.replace("'", "''");
-    }    
+    }
 }

File: src/test/java/org/apache/ibatis/submitted/empty_namespace/Person.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -20,7 +20,7 @@ public enum Type {
         EMPLOYEE,
         DIRECTOR
     }
-    
+
     private Long id;
     private String firstName;
     private String lastName;

File: src/test/java/org/apache/ibatis/submitted/enumtypehandler_on_map/Person.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -16,12 +16,12 @@
 package org.apache.ibatis.submitted.enumtypehandler_on_map;
 
 public class Person {
-    
+
     public enum Type {
         PERSON,
         EMPLOYEE
     }
-    
+
     private Long id;
     private String firstName;
     private String lastName;

File: src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/JavassistLazyTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -18,7 +18,7 @@
 import org.junit.jupiter.api.Disabled;
 
 @Disabled("See Issue 664: Javassist ProxyFactory does not handle interfaces with generics correctly.")
-public class JavassistLazyTest 
+public class JavassistLazyTest
 extends AbstractLazyTest {
   @Override
   protected String getConfiguration() {

File: src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithGetObjectWithInterface.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -15,7 +15,7 @@
  */
 package org.apache.ibatis.submitted.lazyload_proxyfactory_comparison;
 
-public class UserWithGetObjectWithInterface 
+public class UserWithGetObjectWithInterface
 implements Owned<Group> {
 
   private Integer id;

File: src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithGetXxxWithInterface.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -15,7 +15,7 @@
  */
 package org.apache.ibatis.submitted.lazyload_proxyfactory_comparison;
 
-public class UserWithGetXxxWithInterface 
+public class UserWithGetXxxWithInterface
 implements Owned<Group> {
 
   private Integer id;

File: src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithNothingWithInterface.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -15,7 +15,7 @@
  */
 package org.apache.ibatis.submitted.lazyload_proxyfactory_comparison;
 
-public class UserWithNothingWithInterface 
+public class UserWithNothingWithInterface
 implements Owned<Group> {
 
   private Integer id;

File: src/test/java/org/apache/ibatis/submitted/multiple_discriminator/Director.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,7 +17,7 @@
 
 public class Director extends Employee {
     private String department;
-    
+
     public String getDepartment() {
         return department;
     }

File: src/test/java/org/apache/ibatis/submitted/multiple_discriminator/Employee.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,7 +17,7 @@
 
 public class Employee extends Person {
     private String jobTitle;
-    
+
     public String getJobTitle() {
         return jobTitle;
     }

File: src/test/java/org/apache/ibatis/submitted/multiple_resultsets/MultipleResultTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -38,7 +38,7 @@
 import ru.yandex.qatools.embed.postgresql.util.SocketUtil;
 
 /*
- * This class contains tests for multiple results.  
+ * This class contains tests for multiple results.
  * It is based on Jeff's ref cursor tests.
  */
 @Tag("EmbeddedPostgresqlTests")

File: src/test/java/org/apache/ibatis/submitted/nested/NestedForEachTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -33,7 +33,7 @@
 public class NestedForEachTest {
 
   protected static SqlSessionFactory sqlSessionFactory;
-  
+
   @BeforeAll
   public static void setUp() throws Exception {
     try (Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/nested/MapperConfig.xml")) {

File: src/test/java/org/apache/ibatis/submitted/ognl_enum/Person.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -20,7 +20,7 @@ public enum Type {
         EMPLOYEE,
         DIRECTOR
     }
-    
+
     private Long id;
     private String firstName;
     private String lastName;

File: src/test/java/org/apache/ibatis/submitted/ognl_enum/PersonMapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -18,11 +18,11 @@
 import java.util.List;
 
 public interface PersonMapper {
-    
+
     public interface PersonType {
         public Person.Type getType();
     }
-    
+
     public List<Person> selectAllByType(Person.Type type);
     public List<Person> selectAllByTypeNameAttribute(Person.Type type);
     public List<Person> selectAllByTypeWithInterface(PersonType personType);

File: src/test/java/org/apache/ibatis/submitted/ognlstatic/OgnlStaticTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -43,9 +43,9 @@ public static void setUp() throws Exception {
   }
 
   /**
-   * This is the log output. 
+   * This is the log output.
    * DEBUG [main] - ooo Using Connection [org.hsqldb.jdbc.JDBCConnection@5ae1a5c7]
-   * DEBUG [main] - ==>  Preparing: SELECT * FROM users WHERE name IN (?) AND id = ? 
+   * DEBUG [main] - ==>  Preparing: SELECT * FROM users WHERE name IN (?) AND id = ?
    * DEBUG [main] - ==> Parameters: 1(Integer), 1(Integer)
    * There are two parameter mappings but DefaulParameterHandler maps them both to input paremeter (integer)
    */

File: src/test/java/org/apache/ibatis/submitted/permissions/PermissionsTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -54,7 +54,7 @@ public void checkNestedResultMapLoop() {
       final Resource firstResource = resources.get(0);
       final List<Principal> principalPermissions = firstResource.getPrincipals();
       Assertions.assertEquals(1, principalPermissions.size());
-      
+
       final Principal firstPrincipal = principalPermissions.get(0);
       final List<Permission> permissions = firstPrincipal.getPermissions();
       Assertions.assertEquals(2, permissions.size());
@@ -77,7 +77,7 @@ public void checkNestedSelectLoop() {
       final Resource firstResource = resources.get(0);
       final List<Principal> principalPermissions = firstResource.getPrincipals();
       Assertions.assertEquals(1, principalPermissions.size());
-      
+
       final Principal firstPrincipal = principalPermissions.get(0);
       final List<Permission> permissions = firstPrincipal.getPermissions();
       Assertions.assertEquals(4, permissions.size());

File: src/test/java/org/apache/ibatis/submitted/primitive_result_type/Product.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -34,5 +34,5 @@ public Integer getProductType() {
     public void setProductType(Integer productType) {
         this.productType = productType;
     }
-    
+
 }

File: src/test/java/org/apache/ibatis/submitted/selectkey/AnnotatedMapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -28,11 +28,11 @@ public interface AnnotatedMapper {
     @Insert("insert into table2 (name) values(#{name})")
     @SelectKey(statement="call identity()", keyProperty="nameId", before=false, resultType=int.class)
     int insertTable2(Name name);
-    
+
     @Insert("insert into table2 (name) values(#{name})")
     @Options(useGeneratedKeys=true, keyProperty="nameId,generatedName", keyColumn="ID,NAME_FRED")
     int insertTable2WithGeneratedKey(Name name);
-    
+
     int insertTable2WithGeneratedKeyXml(Name name);
 
     @Insert("insert into table2 (name) values(#{name})")

File: src/test/java/org/apache/ibatis/submitted/sptests/SPMapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -82,7 +82,7 @@ public interface SPMapper {
   @ResultMap("nameResult")
   @Options(statementType = StatementType.CALLABLE)
   List<Name> getNamesAnnotatedLowHighWithXMLResultMap(@Param("lowestId") int lowestId, @Param("highestId") int highestId);
-  
+
   @Select({ "{call sptest.arraytest(", "#{ids,mode=IN,jdbcType=ARRAY},", "#{requestedRows,jdbcType=INTEGER,mode=OUT},", "#{returnedIds,mode=OUT,jdbcType=ARRAY})}" })
   @Results({ @Result(column = "ID", property = "id"), @Result(column = "FIRST_NAME", property = "firstName"), @Result(column = "LAST_NAME", property = "lastName") })
   @Options(statementType = StatementType.CALLABLE)

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/XmlExternalRefTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -60,7 +60,7 @@ public void testFailFastOnBuildAll() throws Exception {
       configuration.getMappedStatementNames();
     });
   }
-  
+
   @Test
   public void testFailFastOnBuildAllWithInsert() throws Exception {
     Configuration configuration = new Configuration();

File: src/test/java/org/apache/ibatis/submitted/xml_references/EnumWithOgnlTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@
 import org.junit.jupiter.api.Test;
 
 public class EnumWithOgnlTest {
-    
+
     @Test
     public void testConfiguration() {
         UnpooledDataSourceFactory dataSourceFactory = new UnpooledDataSourceFactory();

File: src/test/java/org/apache/ibatis/submitted/xml_references/Person.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -20,7 +20,7 @@ public enum Type {
         EMPLOYEE,
         DIRECTOR
     }
-    
+
     private Long id;
     private String firstName;
     private String lastName;

File: src/test/java/org/apache/ibatis/submitted/xml_references/PersonMapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -18,11 +18,11 @@
 import java.util.List;
 
 public interface PersonMapper {
-    
+
     public interface PersonType {
         public Person.Type getType();
     }
-    
+
     public List<Person> selectAllByType(Person.Type type);
     public List<Person> selectAllByTypeNameAttribute(Person.Type type);
     public List<Person> selectAllByTypeWithInterface(PersonType personType);

File: src/test/java/org/apache/ibatis/submitted/xml_references/PersonMapper2.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -18,11 +18,11 @@
 import java.util.List;
 
 public interface PersonMapper2 {
-    
+
     public interface PersonType {
         public Person.Type getType();
     }
-    
+
     public List<Person> selectAllByType(Person.Type type);
     public List<Person> selectAllByTypeNameAttribute(Person.Type type);
     public List<Person> selectAllByTypeWithInterface(PersonType personType);

File: src/test/java/org/apache/ibatis/type/MonthTypeHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,7 +24,7 @@
 import org.junit.jupiter.api.Test;
 
 /**
- * 
+ *
  * @author Eduardo Macarron
  */
 public class MonthTypeHandlerTest extends BaseTypeHandlerTest {

File: src/test/java/org/apache/ibatis/type/YearTypeHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2018 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
 import org.junit.jupiter.api.Test;
 
 /**
- * 
+ *
  * @author Eduardo Macarron
  */
 public class YearTypeHandlerTest extends BaseTypeHandlerTest {

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -62,7 +62,7 @@ public int doUpdate(MappedStatement ms, Object parameterObject) throws SQLExcept
       int last = statementList.size() - 1;
       stmt = statementList.get(last);
       applyTransactionTimeout(stmt);
-     handler.parameterize(stmt);//fix Issues 322
+      handler.parameterize(stmt);//fix Issues 322
       BatchResult batchResult = batchResultList.get(last);
       batchResult.addParameterObject(parameterObject);
     } else {
@@ -74,7 +74,6 @@ public int doUpdate(MappedStatement ms, Object parameterObject) throws SQLExcept
       statementList.add(stmt);
       batchResultList.add(new BatchResult(ms, sql, parameterObject));
     }
-  // handler.parameterize(stmt);
     handler.batch(stmt);
     return BATCH_UPDATE_RETURN_VALUE;
   }

File: src/main/java/org/apache/ibatis/type/JdbcType.java
Patch:
@@ -65,7 +65,9 @@ public enum JdbcType {
   ROWID(Types.ROWID), // JDK6
   LONGNVARCHAR(Types.LONGNVARCHAR), // JDK6
   SQLXML(Types.SQLXML), // JDK6
-  DATETIMEOFFSET(-155); // SQL Server 2008
+  DATETIMEOFFSET(-155), // SQL Server 2008
+  TIME_WITH_TIMEZONE(Types.TIME_WITH_TIMEZONE), // JDBC 4.2 JDK8
+  TIMESTAMP_WITH_TIMEZONE(Types.TIMESTAMP_WITH_TIMEZONE); // JDBC 4.2 JDK8
 
   public final int TYPE_CODE;
   private static Map<Integer,JdbcType> codeLookup = new HashMap<>();

File: src/test/java/org/apache/ibatis/binding/MapperMethodParamTest.java
Patch:
@@ -26,8 +26,8 @@
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.apache.ibatis.transaction.TransactionFactory;
 import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;
-import org.junit.BeforeClass;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -38,7 +38,7 @@ public class MapperMethodParamTest {
 
   private static SqlSessionFactory sqlSessionFactory;
 
-  @BeforeClass
+  @BeforeAll
   public static void setup() throws Exception {
     DataSource dataSource = BaseDataTest.createUnpooledDataSource(BaseDataTest.BLOG_PROPERTIES);
     BaseDataTest.runScript(dataSource, "org/apache/ibatis/binding/paramtest-schema.sql");

File: src/test/java/org/apache/ibatis/builder/xml/dynamic/ExpressionEvaluatorTest.java
Patch:
@@ -15,14 +15,14 @@
  */
 package org.apache.ibatis.builder.xml.dynamic;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 
 import java.util.HashMap;
 
 import org.apache.ibatis.domain.blog.Author;
 import org.apache.ibatis.domain.blog.Section;
 import org.apache.ibatis.scripting.xmltags.ExpressionEvaluator;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ExpressionEvaluatorTest {
 

File: src/test/java/org/apache/ibatis/cache/FifoCacheTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,8 +17,8 @@
 
 import org.apache.ibatis.cache.decorators.FifoCache;
 import org.apache.ibatis.cache.impl.PerpetualCache;
-import static org.junit.Assert.*;
-import org.junit.Test;
+import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.Test;
 
 public class FifoCacheTest {
 

File: src/test/java/org/apache/ibatis/cache/LruCacheTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,8 +17,8 @@
 
 import org.apache.ibatis.cache.decorators.LruCache;
 import org.apache.ibatis.cache.impl.PerpetualCache;
-import static org.junit.Assert.*;
-import org.junit.Test;
+import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.Test;
 
 public class LruCacheTest {
 

File: src/test/java/org/apache/ibatis/cache/PerpetualCacheTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -18,8 +18,8 @@
 import org.apache.ibatis.cache.decorators.SerializedCache;
 import org.apache.ibatis.cache.decorators.SynchronizedCache;
 import org.apache.ibatis.cache.impl.PerpetualCache;
-import static org.junit.Assert.*;
-import org.junit.Test;
+import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.Test;
 
 public class PerpetualCacheTest {
 

File: src/test/java/org/apache/ibatis/cache/ScheduledCacheTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -18,8 +18,8 @@
 import org.apache.ibatis.cache.decorators.LoggingCache;
 import org.apache.ibatis.cache.decorators.ScheduledCache;
 import org.apache.ibatis.cache.impl.PerpetualCache;
-import static org.junit.Assert.*;
-import org.junit.Test;
+import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.Test;
 
 public class ScheduledCacheTest {
 

File: src/test/java/org/apache/ibatis/cache/SoftCacheTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -18,8 +18,8 @@
 import org.apache.ibatis.cache.decorators.SerializedCache;
 import org.apache.ibatis.cache.decorators.SoftCache;
 import org.apache.ibatis.cache.impl.PerpetualCache;
-import static org.junit.Assert.*;
-import org.junit.Test;
+import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.Test;
 
 public class SoftCacheTest {
 

File: src/test/java/org/apache/ibatis/cache/SuperCacheTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,8 +17,8 @@
 
 import org.apache.ibatis.cache.decorators.*;
 import org.apache.ibatis.cache.impl.PerpetualCache;
-import static org.junit.Assert.assertTrue;
-import org.junit.Test;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import org.junit.jupiter.api.Test;
 
 public class SuperCacheTest {
 

File: src/test/java/org/apache/ibatis/executor/BatchExecutorTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 package org.apache.ibatis.executor;
 
 import org.apache.ibatis.transaction.Transaction;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class BatchExecutorTest extends BaseExecutorTest {
 

File: src/test/java/org/apache/ibatis/executor/CachingBatchExecutorTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 package org.apache.ibatis.executor;
 
 import org.apache.ibatis.transaction.Transaction;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class CachingBatchExecutorTest extends BaseExecutorTest {
 

File: src/test/java/org/apache/ibatis/executor/CachingReuseExecutorTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 package org.apache.ibatis.executor;
 
 import org.apache.ibatis.transaction.Transaction;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class CachingReuseExecutorTest extends BaseExecutorTest {
 

File: src/test/java/org/apache/ibatis/executor/CachingSimpleExecutorTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 package org.apache.ibatis.executor;
 
 import org.apache.ibatis.transaction.Transaction;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class CachingSimpleExecutorTest extends BaseExecutorTest {
 

File: src/test/java/org/apache/ibatis/executor/ErrorContextTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package org.apache.ibatis.executor;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ErrorContextTest {
 

File: src/test/java/org/apache/ibatis/executor/ReuseExecutorTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 package org.apache.ibatis.executor;
 
 import org.apache.ibatis.transaction.Transaction;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ReuseExecutorTest extends BaseExecutorTest {
 

File: src/test/java/org/apache/ibatis/jdbc/SQLTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -15,10 +15,10 @@
  */
 package org.apache.ibatis.jdbc;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class SQLTest {
 

File: src/test/java/org/apache/ibatis/jdbc/SelectBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -16,8 +16,8 @@
 package org.apache.ibatis.jdbc;
 
 import static org.apache.ibatis.jdbc.SelectBuilder.*;
-import static org.junit.Assert.assertEquals;
-import org.junit.Test;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import org.junit.jupiter.api.Test;
 
 public class SelectBuilderTest {
 

File: src/test/java/org/apache/ibatis/jdbc/SqlBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -15,10 +15,10 @@
  */
 package org.apache.ibatis.jdbc;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.apache.ibatis.jdbc.SqlBuilder.*;
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class SqlBuilderTest {
 

File: src/test/java/org/apache/ibatis/jdbc/SqlRunnerTest.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.apache.ibatis.jdbc;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 import java.sql.Connection;
 import java.util.List;
@@ -25,7 +25,7 @@
 import javax.sql.DataSource;
 
 import org.apache.ibatis.BaseDataTest;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class SqlRunnerTest extends BaseDataTest {
 

File: src/test/java/org/apache/ibatis/logging/LogFactoryTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.apache.ibatis.logging;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 import java.io.Reader;
 
@@ -28,7 +28,7 @@
 import org.apache.ibatis.logging.slf4j.Slf4jImpl;
 import org.apache.ibatis.logging.stdout.StdOutImpl;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class LogFactoryTest {
 

File: src/test/java/org/apache/ibatis/mapping/CacheBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -20,7 +20,7 @@
 import org.apache.ibatis.cache.CacheException;
 import org.apache.ibatis.cache.impl.PerpetualCache;
 import org.assertj.core.api.Assertions;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.lang.reflect.Field;
 

File: src/test/java/org/apache/ibatis/parsing/PropertyParserTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 package org.apache.ibatis.parsing;
 
 import org.assertj.core.api.Assertions;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.Properties;
 

File: src/test/java/org/apache/ibatis/parsing/XPathParserTest.java
Patch:
@@ -15,12 +15,12 @@
  */
 package org.apache.ibatis.parsing;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 import java.io.InputStream;
 
 import org.apache.ibatis.io.Resources;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class XPathParserTest {
 

File: src/test/java/org/apache/ibatis/reflection/ExceptionUtilTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -15,8 +15,8 @@
  */
 package org.apache.ibatis.reflection;
 
-import static org.junit.Assert.assertEquals;
-import org.junit.Test;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import org.junit.jupiter.api.Test;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.UndeclaredThrowableException;

File: src/test/java/org/apache/ibatis/reflection/TypeParameterResolverTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.apache.ibatis.reflection;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.GenericArrayType;
@@ -33,7 +33,7 @@
 import org.apache.ibatis.reflection.typeparam.Level0Mapper.Level0InnerMapper;
 import org.apache.ibatis.reflection.typeparam.Level1Mapper;
 import org.apache.ibatis.reflection.typeparam.Level2Mapper;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TypeParameterResolverTest {
   @Test

File: src/test/java/org/apache/ibatis/scripting/LanguageDriverRegistryTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.ibatis.parsing.XNode;
 import org.apache.ibatis.scripting.defaults.RawLanguageDriver;
 import org.apache.ibatis.session.Configuration;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static com.googlecode.catchexception.apis.BDDCatchException.*;
 import static org.assertj.core.api.BDDAssertions.then;

File: src/test/java/org/apache/ibatis/session/AutoMappingUnknownColumnBehaviorTest.java
Patch:
@@ -24,8 +24,8 @@
 import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;
 import org.apache.log4j.spi.LoggingEvent;
 import org.apache.log4j.varia.NullAppender;
-import org.junit.BeforeClass;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
 
 import javax.sql.DataSource;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -90,7 +90,7 @@ public void doAppend(LoggingEvent event) {
 
     private static SqlSessionFactory sqlSessionFactory;
 
-    @BeforeClass
+    @BeforeAll
     public static void setup() throws Exception {
         DataSource dataSource = BaseDataTest.createBlogDataSource();
         TransactionFactory transactionFactory = new JdbcTransactionFactory();

File: src/test/java/org/apache/ibatis/submitted/association_nested/FolderMapperTest.java
Patch:
@@ -19,8 +19,8 @@
 import org.apache.ibatis.session.SqlSession;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 import java.io.InputStream;
 import java.sql.Connection;
@@ -61,7 +61,7 @@ public void testFindWithChildren() throws Exception {
 
         List<FolderFlatTree> folders = postMapper.findWithSubFolders("Root");
 
-        Assert.assertEquals(3, folders.size());
+        Assertions.assertEquals(3, folders.size());
       }
     }
   }

File: src/test/java/org/apache/ibatis/submitted/column_prefix/ColumnPrefixAutoMappingTest.java
Patch:
@@ -15,12 +15,12 @@
  */
 package org.apache.ibatis.submitted.column_prefix;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 
 import java.util.List;
 
 import org.apache.ibatis.session.SqlSession;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ColumnPrefixAutoMappingTest extends ColumnPrefixTest {
   @Override

File: src/test/java/org/apache/ibatis/submitted/complex_type/ComplexTypeTest.java
Patch:
@@ -24,14 +24,14 @@
 import org.apache.ibatis.session.SqlSession;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
-import org.junit.BeforeClass;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
 
 public class ComplexTypeTest {
 
   private static SqlSessionFactory sqlSessionFactory;
 
-  @BeforeClass
+  @BeforeAll
   public static void setUp() throws Exception {
     // create a SqlSessionFactory
     try (Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/complex_type/mybatis-config.xml")) {

File: src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollectionHandlingTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.apache.ibatis.submitted.custom_collection_handling;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 
 import java.io.IOException;
 import java.io.Reader;
@@ -27,7 +27,7 @@
 import org.apache.ibatis.session.SqlSession;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class CustomCollectionHandlingTest {
 

File: src/test/java/org/apache/ibatis/submitted/extendresultmap/ExtendResultMapTest.java
Patch:
@@ -22,14 +22,14 @@
 import org.apache.ibatis.session.SqlSession;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
-import org.junit.BeforeClass;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
 
 public class ExtendResultMapTest {
 
   private static SqlSessionFactory sqlSessionFactory;
 
-  @BeforeClass
+  @BeforeAll
   public static void setUp() throws Exception {
     // create a SqlSessionFactory
     try (Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/extendresultmap/mybatis-config.xml")) {

File: src/test/java/org/apache/ibatis/submitted/flush_statement_npe/FlushStatementNpeTest.java
Patch:
@@ -23,14 +23,14 @@
 import org.apache.ibatis.session.SqlSession;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
-import org.junit.BeforeClass;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
 
 public class FlushStatementNpeTest {
     
     private static SqlSessionFactory sqlSessionFactory;
     
-    @BeforeClass
+    @BeforeAll
     public static void initDatabase() throws Exception {
         try (Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/flush_statement_npe/ibatisConfig.xml")) {
             sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);

File: src/test/java/org/apache/ibatis/submitted/global_variables_defaults/AnnotationMapperTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.assertj.core.api.Assertions;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.IOException;
 import java.io.Reader;

File: src/test/java/org/apache/ibatis/submitted/global_variables_defaults/ConfigurationTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.apache.ibatis.type.JdbcType;
 import org.assertj.core.api.Assertions;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.IOException;
 import java.io.Reader;

File: src/test/java/org/apache/ibatis/submitted/global_variables_defaults/CustomizationTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.apache.ibatis.type.JdbcType;
 import org.assertj.core.api.Assertions;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.IOException;
 import java.io.Reader;

File: src/test/java/org/apache/ibatis/submitted/global_variables_defaults/XmlMapperTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.assertj.core.api.Assertions;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.IOException;
 import java.io.Reader;

File: src/test/java/org/apache/ibatis/submitted/integer_enum/IntegerEnumTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -20,7 +20,7 @@
 import org.apache.ibatis.BaseDataTest;
 import org.apache.ibatis.io.Resources;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class IntegerEnumTest extends BaseDataTest {
 

File: src/test/java/org/apache/ibatis/submitted/lazyload_common_property/CommonPropertyLazyLoadError.java
Patch:
@@ -22,14 +22,14 @@
 import org.apache.ibatis.session.SqlSession;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
-import org.junit.BeforeClass;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
 
 public class CommonPropertyLazyLoadError {
     
     private static SqlSessionFactory sqlSessionFactory;
     
-    @BeforeClass
+    @BeforeAll
     public static void initDatabase() throws Exception {
         try (Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/lazyload_common_property/ibatisConfig.xml")) {
             sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);

File: src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/JavassistLazyTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -15,9 +15,9 @@
  */
 package org.apache.ibatis.submitted.lazyload_proxyfactory_comparison;
 
-import org.junit.Ignore;
+import org.junit.jupiter.api.Disabled;
 
-@Ignore("See Issue 664: Javassist ProxyFactory does not handle interfaces with generics correctly.")
+@Disabled("See Issue 664: Javassist ProxyFactory does not handle interfaces with generics correctly.")
 public class JavassistLazyTest 
 extends AbstractLazyTest {
   @Override

File: src/test/java/org/apache/ibatis/submitted/manyanno/ManyAnnoTest.java
Patch:
@@ -22,11 +22,11 @@
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class ManyAnnoTest extends BaseDataTest {
 

File: src/test/java/org/apache/ibatis/submitted/map_class_name_conflict/MapperNameTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.apache.ibatis.io.Resources;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.IOException;
 import java.io.Reader;

File: src/test/java/org/apache/ibatis/submitted/multidb/ProviderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -15,15 +15,15 @@
  */
 package org.apache.ibatis.submitted.multidb;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 import java.io.Reader;
 
 import org.apache.ibatis.io.Resources;
 import org.apache.ibatis.session.Configuration;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.apache.ibatis.session.defaults.DefaultSqlSessionFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ProviderTest {
 

File: src/test/java/org/apache/ibatis/submitted/multipleiterates/MultipleIteratesTest.java
Patch:
@@ -22,14 +22,14 @@
 import org.apache.ibatis.session.SqlSession;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
-import org.junit.BeforeClass;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
 
 public class MultipleIteratesTest {
 
   private static SqlSessionFactory sqlSessionFactory;
 
-  @BeforeClass
+  @BeforeAll
   public static void setUp() throws Exception {
     // create a SqlSessionFactory
     try (Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/multipleiterates/mybatis-config.xml")) {

File: src/test/java/org/apache/ibatis/submitted/named_constructor_args/InvalidNamedConstructorArgsTest.java
Patch:
@@ -26,8 +26,8 @@
 import org.apache.ibatis.session.Configuration;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
-import org.junit.BeforeClass;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
 
 import static com.googlecode.catchexception.apis.BDDCatchException.*;
 import static org.assertj.core.api.BDDAssertions.then;
@@ -36,7 +36,7 @@ public class InvalidNamedConstructorArgsTest {
 
   private static SqlSessionFactory sqlSessionFactory;
 
-  @BeforeClass
+  @BeforeAll
   public static void setUp() throws Exception {
     // create an SqlSessionFactory
     try (Reader reader = Resources.getResourceAsReader(

File: src/test/java/org/apache/ibatis/submitted/refid_resolution/ExternalRefidResolutionTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.ibatis.io.Resources;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 /**
  * @see http://code.google.com/p/mybatis/issues/detail?id=291

File: src/test/java/org/apache/ibatis/submitted/result_handler_type/DefaultResultHandlerTypeTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.apache.ibatis.submitted.result_handler_type;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 
 import java.io.Reader;
 import java.util.List;
@@ -26,7 +26,7 @@
 import org.apache.ibatis.session.SqlSession;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class DefaultResultHandlerTypeTest {
 

File: src/test/java/org/apache/ibatis/submitted/results_id/IdConflictTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 package org.apache.ibatis.submitted.results_id;
 
 import org.apache.ibatis.session.Configuration;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static com.googlecode.catchexception.apis.BDDCatchException.*;
 import static org.assertj.core.api.BDDAssertions.then;

File: src/test/java/org/apache/ibatis/submitted/serializecircular/SerializeCircularTest.java
Patch:
@@ -22,9 +22,9 @@
 import org.apache.ibatis.session.SqlSession;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-//@Ignore("see issue #614")
+//@Disabled("see issue #614")
 public class SerializeCircularTest {
 
   @Test
@@ -43,7 +43,7 @@ public void serializeAndDeserializeObjectsWithAggressiveLazyLoadingWithPreloadin
     }
   }
 
-//  @Ignore("See http://code.google.com/p/mybatis/issues/detail?id=614")
+//  @Disabled("See http://code.google.com/p/mybatis/issues/detail?id=614")
   @Test
   public void serializeAndDeserializeObjectsWithoutAggressiveLazyLoadingWithoutPreloadingAttribute() 
   throws Exception {

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleCrossIncludeTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.apache.ibatis.submitted.xml_external_ref;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 
 import java.io.IOException;
 import java.io.Reader;
@@ -32,7 +32,7 @@
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class MultipleCrossIncludeTest {
 

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleIncludeTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.apache.ibatis.submitted.xml_external_ref;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 
 import java.io.IOException;
 import java.io.Reader;
@@ -31,7 +31,7 @@
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class MultipleIncludeTest {
 

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleReverseIncludeTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.apache.ibatis.submitted.xml_external_ref;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 
 import java.io.IOException;
 import java.io.Reader;
@@ -30,7 +30,7 @@
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class MultipleReverseIncludeTest {
 

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/NonFullyQualifiedNamespaceTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.apache.ibatis.submitted.xml_external_ref;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 
 import java.io.IOException;
 import java.io.Reader;
@@ -28,7 +28,7 @@
 import org.apache.ibatis.session.SqlSession;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class NonFullyQualifiedNamespaceTest {
     @Test

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/ParameterMapReferenceTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.apache.ibatis.submitted.xml_external_ref;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 
 import java.io.IOException;
 import java.io.Reader;
@@ -30,7 +30,7 @@
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ParameterMapReferenceTest {
 

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/ResultMapExtendsTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.apache.ibatis.submitted.xml_external_ref;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 
 import java.io.IOException;
 import java.io.Reader;
@@ -30,7 +30,7 @@
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ResultMapExtendsTest {
 

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/ResultMapReferenceTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.apache.ibatis.submitted.xml_external_ref;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 
 import java.io.IOException;
 import java.io.Reader;
@@ -30,7 +30,7 @@
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ResultMapReferenceTest {
 

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/ReverseIncludeTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.apache.ibatis.submitted.xml_external_ref;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 
 import java.io.IOException;
 import java.io.Reader;
@@ -30,7 +30,7 @@
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ReverseIncludeTest {
 

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/SameIdTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.apache.ibatis.submitted.xml_external_ref;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 
 import java.io.IOException;
 import java.io.Reader;
@@ -30,7 +30,7 @@
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class SameIdTest {
 

File: src/test/java/org/apache/ibatis/submitted/xml_references/EnumWithOgnlTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.apache.ibatis.session.defaults.DefaultSqlSessionFactory;
 import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class EnumWithOgnlTest {
     

File: src/test/java/org/apache/ibatis/type/ArrayTypeHandlerTest.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.apache.ibatis.type;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mock;
 
 import java.sql.Array;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 

File: src/test/java/org/apache/ibatis/type/BigDecimalTypeHandlerTest.java
Patch:
@@ -15,14 +15,14 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 import java.math.BigDecimal;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mock;
 import org.mockito.Mockito;
 

File: src/test/java/org/apache/ibatis/type/BigIntegerTypeHandlerTest.java
Patch:
@@ -15,16 +15,16 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class BigIntegerTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/BlobByteObjectArrayTypeHandlerTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.apache.ibatis.type;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 

File: src/test/java/org/apache/ibatis/type/BlobInputStreamTypeHandlerTest.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.apache.ibatis.transaction.TransactionFactory;
 import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;
-import org.junit.BeforeClass;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mock;
 
 import javax.sql.DataSource;
@@ -52,7 +52,7 @@ public class BlobInputStreamTypeHandlerTest extends BaseTypeHandlerTest {
   @Mock
   protected Blob blob;
 
-  @BeforeClass
+  @BeforeAll
   public static void setupSqlSessionFactory() throws Exception {
     DataSource dataSource = BaseDataTest.createUnpooledDataSource("org/apache/ibatis/type/jdbc.properties");
     TransactionFactory transactionFactory = new JdbcTransactionFactory();

File: src/test/java/org/apache/ibatis/type/BlobTypeHandlerTest.java
Patch:
@@ -15,15 +15,15 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 import java.io.InputStream;
 import java.sql.Blob;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mock;
 import org.mockito.Mockito;
 

File: src/test/java/org/apache/ibatis/type/BooleanTypeHandlerTest.java
Patch:
@@ -15,12 +15,12 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class BooleanTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/ByteArrayTypeHandlerTest.java
Patch:
@@ -15,12 +15,12 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertArrayEquals;
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ByteArrayTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/ByteObjectArrayTypeHandlerTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.apache.ibatis.type;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.never;

File: src/test/java/org/apache/ibatis/type/ByteTypeHandlerTest.java
Patch:
@@ -15,12 +15,12 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ByteTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/CharacterTypeHandlerTest.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class CharacterTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/ClobTypeHandlerTest.java
Patch:
@@ -15,15 +15,15 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 import java.io.Reader;
 import java.sql.Clob;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mock;
 import org.mockito.Mockito;
 

File: src/test/java/org/apache/ibatis/type/DateOnlyTypeHandlerTest.java
Patch:
@@ -15,15 +15,15 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 import java.util.Date;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class DateOnlyTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/DateTypeHandlerTest.java
Patch:
@@ -15,16 +15,16 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 import java.sql.Timestamp;
 import java.util.Date;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class DateTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/DoubleTypeHandlerTest.java
Patch:
@@ -15,12 +15,12 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class DoubleTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/EnumTypeHandlerTest.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class EnumTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/FloatTypeHandlerTest.java
Patch:
@@ -15,12 +15,12 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class FloatTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/GenericTypeSupportedInHierarchiesTestCase.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -15,12 +15,12 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class GenericTypeSupportedInHierarchiesTestCase {
 

File: src/test/java/org/apache/ibatis/type/InstantTypeHandlerTest.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import static org.mockito.Mockito.*;
 
 import java.sql.Timestamp;
 import java.time.Instant;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class InstantTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/IntegerTypeHandlerTest.java
Patch:
@@ -15,12 +15,12 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class IntegerTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/JapaneseDateTypeHandlerTest.java
Patch:
@@ -15,14 +15,14 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import static org.mockito.Mockito.*;
 
 import java.sql.Date;
 import java.time.LocalDate;
 import java.time.chrono.JapaneseDate;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class JapaneseDateTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/JdbcTypeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -15,11 +15,11 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 import java.sql.Types;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class JdbcTypeTest {
   private static final String[] requiredStandardTypeNames = {

File: src/test/java/org/apache/ibatis/type/Jsr310TypeHandlerRegistryTest.java
Patch:
@@ -29,8 +29,8 @@
 import java.time.ZonedDateTime;
 import java.time.chrono.JapaneseDate;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 /**
  * @author Kazuki Shimizu
@@ -39,7 +39,7 @@ public class Jsr310TypeHandlerRegistryTest {
 
   private TypeHandlerRegistry typeHandlerRegistry;
 
-  @Before
+  @BeforeEach
   public void setup() {
     typeHandlerRegistry = new TypeHandlerRegistry();
   }

File: src/test/java/org/apache/ibatis/type/LocalDateTimeTypeHandlerTest.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import static org.mockito.Mockito.*;
 
 import java.sql.Timestamp;
 import java.time.LocalDateTime;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class LocalDateTimeTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/LocalDateTypeHandlerTest.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import static org.mockito.Mockito.*;
 
 import java.sql.Date;
 import java.time.LocalDate;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class LocalDateTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/LocalTimeTypeHandlerTest.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import static org.mockito.Mockito.*;
 
 import java.sql.Time;
 import java.time.LocalTime;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class LocalTimeTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/LongTypeHandlerTest.java
Patch:
@@ -15,12 +15,12 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class LongTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/MonthTypeHandlerTest.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import static org.mockito.Mockito.*;
 
 import java.time.Month;
 
 import org.apache.ibatis.executor.result.ResultMapException;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 /**
  * 

File: src/test/java/org/apache/ibatis/type/NClobTypeHandlerTest.java
Patch:
@@ -15,15 +15,15 @@
  */
 package org.apache.ibatis.type;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mock;
 import org.mockito.Mockito;
 
 import java.io.Reader;
 import java.sql.Clob;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 

File: src/test/java/org/apache/ibatis/type/NStringTypeHandlerTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package org.apache.ibatis.type;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: src/test/java/org/apache/ibatis/type/ObjectTypeHandlerTest.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.sql.Clob;
 

File: src/test/java/org/apache/ibatis/type/OffsetDateTimeTypeHandlerTest.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import static org.mockito.Mockito.*;
 
 import java.sql.Timestamp;
 import java.time.OffsetDateTime;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class OffsetDateTimeTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/OffsetTimeTypeHandlerTest.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import static org.mockito.Mockito.*;
 
 import java.sql.Time;
 import java.time.OffsetTime;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class OffsetTimeTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/ShortTypeHandlerTest.java
Patch:
@@ -15,12 +15,12 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ShortTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/SqlDateTypeHandlerTest.java
Patch:
@@ -15,14 +15,14 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 import java.util.Date;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class SqlDateTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/SqlTimeTypeHandlerTest.java
Patch:
@@ -15,14 +15,14 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 import java.util.Date;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class SqlTimeTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/SqlTimetampTypeHandlerTest.java
Patch:
@@ -15,15 +15,15 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 import java.sql.Timestamp;
 import java.util.Date;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class SqlTimetampTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/StringTypeHandlerTest.java
Patch:
@@ -15,12 +15,12 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class StringTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/TimeOnlyTypeHandlerTest.java
Patch:
@@ -15,15 +15,15 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 import java.util.Date;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TimeOnlyTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/type/YearMonthTypeHandlerTest.java
Patch:
@@ -15,12 +15,12 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import static org.mockito.Mockito.*;
 
 import java.time.YearMonth;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 /**
  * @author Björn Raupach

File: src/test/java/org/apache/ibatis/type/YearTypeHandlerTest.java
Patch:
@@ -15,12 +15,12 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import static org.mockito.Mockito.*;
 
 import java.time.Year;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 /**
  * 

File: src/test/java/org/apache/ibatis/type/ZonedDateTimeTypeHandlerTest.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.apache.ibatis.type;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import static org.mockito.Mockito.*;
 
 import java.sql.Timestamp;
 import java.time.ZonedDateTime;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ZonedDateTimeTypeHandlerTest extends BaseTypeHandlerTest {
 

File: src/test/java/org/apache/ibatis/datasource/jndi/JndiDataSourceFactoryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -61,7 +61,7 @@ public void shouldRetrieveDataSourceFromJNDI() throws Exception {
 
   private void createJndiDataSource() throws Exception {
     try {
-      Hashtable<String, String> env = new Hashtable<String, String>();
+      Properties env = new Properties();
       env.put(Context.INITIAL_CONTEXT_FACTORY, TEST_INITIAL_CONTEXT_FACTORY);
 
       MockContext ctx = new MockContext(false);

File: src/test/java/org/apache/ibatis/submitted/automapping/AutomappingTest.java
Patch:
@@ -61,7 +61,7 @@ public void shouldGetAUserWhithPhoneNumber() {
       Mapper mapper = sqlSession.getMapper(Mapper.class);
       User user = mapper.getUserWithPhoneNumber(1);
       Assert.assertEquals("User1", user.getName());
-      Assert.assertEquals(new Long(12345678901L), user.getPhone());
+      Assert.assertEquals(Long.valueOf(12345678901L), user.getPhone());
     }
   }
 

File: src/test/java/org/apache/ibatis/submitted/dynsql/DynSqlTest.java
Patch:
@@ -90,8 +90,8 @@ public void testSelectLike() {
       List<Map<String, Object>> answer = sqlSession.selectList("org.apache.ibatis.submitted.dynsql.selectLike", "Ba");
 
       assertTrue(answer.size() == 2);
-      assertEquals(new Integer(4), answer.get(0).get("ID"));
-      assertEquals(new Integer(6), answer.get(1).get("ID"));
+      assertEquals(Integer.valueOf(4), answer.get(0).get("ID"));
+      assertEquals(Integer.valueOf(6), answer.get(1).get("ID"));
     }
   }
 
@@ -121,7 +121,7 @@ public void testOgnlStaticMethodCall() {
     try (SqlSession sqlSession = sqlSessionFactory.openSession()) {
       List<Map<String, Object>> answer = sqlSession.selectList("org.apache.ibatis.submitted.dynsql.ognlStaticMethodCall", "Rock 'n Roll");
       assertTrue(answer.size() == 1);
-      assertEquals(new Integer(7), answer.get(0).get("ID"));
+      assertEquals(Integer.valueOf(7), answer.get(0).get("ID"));
     }
   }
 

File: src/test/java/org/apache/ibatis/submitted/valueinmap/ValueInMapTest.java
Patch:
@@ -55,7 +55,7 @@ public void shouldWorkWithAPropertyNamedValue() {
       map.put("column", "name");
       map.put("value", "User1");
       Integer count = sqlSession.selectOne("count", map);
-      Assert.assertEquals(new Integer(1), count);
+      Assert.assertEquals(Integer.valueOf(1), count);
     }
   }
 
@@ -65,7 +65,7 @@ public void shouldWorkWithAList() {
       List<String> list = new ArrayList<String>();
       list.add("users");
       Integer count = sqlSession.selectOne("count2",list);
-      Assert.assertEquals(new Integer(1), count);
+      Assert.assertEquals(Integer.valueOf(1), count);
     }
   }
 

File: src/test/java/org/apache/ibatis/type/CharacterTypeHandlerTest.java
Patch:
@@ -44,7 +44,7 @@ public void shouldSetNullParameter() throws Exception {
   @Test
   public void shouldGetResultFromResultSetByName() throws Exception {
     when(rs.getString("column")).thenReturn("a");
-    assertEquals(new Character('a'), TYPE_HANDLER.getResult(rs, "column"));
+    assertEquals(Character.valueOf('a'), TYPE_HANDLER.getResult(rs, "column"));
     verify(rs, never()).wasNull();
   }
 
@@ -60,7 +60,7 @@ public void shouldGetResultNullFromResultSetByName() throws Exception {
   @Test
   public void shouldGetResultFromResultSetByPosition() throws Exception {
     when(rs.getString(1)).thenReturn("a");
-    assertEquals(new Character('a'), TYPE_HANDLER.getResult(rs, 1));
+    assertEquals(Character.valueOf('a'), TYPE_HANDLER.getResult(rs, 1));
     verify(rs, never()).wasNull();
   }
 
@@ -76,7 +76,7 @@ public void shouldGetResultNullFromResultSetByPosition() throws Exception {
   @Test
   public void shouldGetResultFromCallableStatement() throws Exception {
     when(cs.getString(1)).thenReturn("a");
-    assertEquals(new Character('a'), TYPE_HANDLER.getResult(cs, 1));
+    assertEquals(Character.valueOf('a'), TYPE_HANDLER.getResult(cs, 1));
     verify(cs, never()).wasNull();
   }
 

File: src/main/java/org/apache/ibatis/annotations/Options.java
Patch:
@@ -35,7 +35,7 @@
    * The options for the {@link Options#flushCache()}.
    * The default is {@link FlushCachePolicy#DEFAULT}
    */
-  public enum FlushCachePolicy {
+  enum FlushCachePolicy {
     /** <code>false</code> for select statement; <code>true</code> for insert/update/delete statement. */
     DEFAULT,
     /** Flushes cache regardless of the statement type. */
@@ -48,7 +48,7 @@ public enum FlushCachePolicy {
 
   FlushCachePolicy flushCache() default FlushCachePolicy.DEFAULT;
 
-  ResultSetType resultSetType() default ResultSetType.FORWARD_ONLY;
+  ResultSetType resultSetType() default ResultSetType.DEFAULT;
 
   StatementType statementType() default StatementType.PREPARED;
 

File: src/main/java/org/apache/ibatis/binding/MapperProxyFactory.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -28,7 +28,7 @@
 public class MapperProxyFactory<T> {
 
   private final Class<T> mapperInterface;
-  private final Map<Method, MapperMethod> methodCache = new ConcurrentHashMap<Method, MapperMethod>();
+  private final Map<Method, MapperMethod> methodCache = new ConcurrentHashMap<>();
 
   public MapperProxyFactory(Class<T> mapperInterface) {
     this.mapperInterface = mapperInterface;
@@ -48,7 +48,7 @@ protected T newInstance(MapperProxy<T> mapperProxy) {
   }
 
   public T newInstance(SqlSession sqlSession) {
-    final MapperProxy<T> mapperProxy = new MapperProxy<T>(sqlSession, mapperInterface, methodCache);
+    final MapperProxy<T> mapperProxy = new MapperProxy<>(sqlSession, mapperInterface, methodCache);
     return newInstance(mapperProxy);
   }
 

File: src/main/java/org/apache/ibatis/binding/MapperRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@
 public class MapperRegistry {
 
   private final Configuration config;
-  private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<Class<?>, MapperProxyFactory<?>>();
+  private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
 
   public MapperRegistry(Configuration config) {
     this.config = config;
@@ -90,7 +90,7 @@ public Collection<Class<?>> getMappers() {
    * @since 3.2.2
    */
   public void addMappers(String packageName, Class<?> superType) {
-    ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<Class<?>>();
+    ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
     resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
     Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
     for (Class<?> mapperClass : mapperSet) {

File: src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,7 +48,7 @@ public SqlSource parse(String originalSql, Class<?> parameterType, Map<String, O
 
   private static class ParameterMappingTokenHandler extends BaseBuilder implements TokenHandler {
 
-    private List<ParameterMapping> parameterMappings = new ArrayList<ParameterMapping>();
+    private List<ParameterMapping> parameterMappings = new ArrayList<>();
     private Class<?> parameterType;
     private MetaObject metaParameters;
 

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -112,7 +112,7 @@ private SqlSource createSqlSource(Object parameterObject) {
       } else if (bindParameterCount == 0) {
         sql = invokeProviderMethod(providerContext);
       } else if (bindParameterCount == 1 &&
-              (parameterObject == null || providerMethodParameterTypes[(providerContextIndex == null || providerContextIndex == 1) ? 0 : 1].isAssignableFrom(parameterObject.getClass()))) {
+              (parameterObject == null || providerMethodParameterTypes[providerContextIndex == null || providerContextIndex == 1 ? 0 : 1].isAssignableFrom(parameterObject.getClass()))) {
         sql = invokeProviderMethod(extractProviderMethodArguments(parameterObject));
       } else if (parameterObject instanceof Map) {
         @SuppressWarnings("unchecked")

File: src/main/java/org/apache/ibatis/builder/xml/XMLIncludeTransformer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -120,7 +120,7 @@ private Properties getVariablesContext(Node node, Properties inheritedVariablesC
         // Replace variables inside
         String value = PropertyParser.parse(getStringAttribute(n, "value"), inheritedVariablesContext);
         if (declaredProperties == null) {
-          declaredProperties = new HashMap<String, String>();
+          declaredProperties = new HashMap<>();
         }
         if (declaredProperties.put(name, value) != null) {
           throw new BuilderException("Variable " + name + " defined twice in the same include definition");

File: src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -113,7 +113,7 @@ public void parseStatementNode() {
   }
 
   private void processSelectKeyNodes(String id, Class<?> parameterTypeClass, LanguageDriver langDriver) {
-    List<XNode> selectKeyNodes = context.evalNodes("selectKey");
+    List<XNode> selectKeyNodes = context.evalNodes("*[local-name()='selectKey']");
     if (configuration.getDatabaseId() != null) {
       parseSelectKeyNodes(id, selectKeyNodes, parameterTypeClass, langDriver, configuration.getDatabaseId());
     }
@@ -192,7 +192,7 @@ private boolean databaseIdMatchesCurrent(String id, String databaseId, String re
   }
 
   private LanguageDriver getLanguageDriver(String lang) {
-    Class<?> langClass = null;
+    Class<? extends LanguageDriver> langClass = null;
     if (lang != null) {
       langClass = resolveClass(lang);
     }

File: src/main/java/org/apache/ibatis/cache/CacheKey.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -44,7 +44,7 @@ public CacheKey() {
     this.hashcode = DEFAULT_HASHCODE;
     this.multiplier = DEFAULT_MULTIPLYER;
     this.count = 0;
-    this.updateList = new ArrayList<Object>();
+    this.updateList = new ArrayList<>();
   }
 
   public CacheKey(Object[] objects) {
@@ -122,7 +122,7 @@ public String toString() {
   @Override
   public CacheKey clone() throws CloneNotSupportedException {
     CacheKey clonedCacheKey = (CacheKey) super.clone();
-    clonedCacheKey.updateList = new ArrayList<Object>(updateList);
+    clonedCacheKey.updateList = new ArrayList<>(updateList);
     return clonedCacheKey;
   }
 

File: src/main/java/org/apache/ibatis/cache/decorators/BlockingCache.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -42,7 +42,7 @@ public class BlockingCache implements Cache {
 
   public BlockingCache(Cache delegate) {
     this.delegate = delegate;
-    this.locks = new ConcurrentHashMap<Object, ReentrantLock>();
+    this.locks = new ConcurrentHashMap<>();
   }
 
   @Override

File: src/main/java/org/apache/ibatis/cache/decorators/FifoCache.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@ public class FifoCache implements Cache {
 
   public FifoCache(Cache delegate) {
     this.delegate = delegate;
-    this.keyList = new LinkedList<Object>();
+    this.keyList = new LinkedList<>();
     this.size = 1024;
   }
 

File: src/main/java/org/apache/ibatis/cache/decorators/SoftCache.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -38,8 +38,8 @@ public class SoftCache implements Cache {
   public SoftCache(Cache delegate) {
     this.delegate = delegate;
     this.numberOfHardLinks = 256;
-    this.hardLinksToAvoidGarbageCollection = new LinkedList<Object>();
-    this.queueOfGarbageCollectedEntries = new ReferenceQueue<Object>();
+    this.hardLinksToAvoidGarbageCollection = new LinkedList<>();
+    this.queueOfGarbageCollectedEntries = new ReferenceQueue<>();
   }
 
   @Override

File: src/main/java/org/apache/ibatis/cache/decorators/TransactionalCache.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,8 +48,8 @@ public class TransactionalCache implements Cache {
   public TransactionalCache(Cache delegate) {
     this.delegate = delegate;
     this.clearOnCommit = false;
-    this.entriesToAddOnCommit = new HashMap<Object, Object>();
-    this.entriesMissedInCache = new HashSet<Object>();
+    this.entriesToAddOnCommit = new HashMap<>();
+    this.entriesMissedInCache = new HashSet<>();
   }
 
   @Override

File: src/main/java/org/apache/ibatis/cache/decorators/WeakCache.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -38,8 +38,8 @@ public class WeakCache implements Cache {
   public WeakCache(Cache delegate) {
     this.delegate = delegate;
     this.numberOfHardLinks = 256;
-    this.hardLinksToAvoidGarbageCollection = new LinkedList<Object>();
-    this.queueOfGarbageCollectedEntries = new ReferenceQueue<Object>();
+    this.hardLinksToAvoidGarbageCollection = new LinkedList<>();
+    this.queueOfGarbageCollectedEntries = new ReferenceQueue<>();
   }
 
   @Override

File: src/main/java/org/apache/ibatis/cache/impl/PerpetualCache.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@ public class PerpetualCache implements Cache {
 
   private final String id;
 
-  private Map<Object, Object> cache = new HashMap<Object, Object>();
+  private Map<Object, Object> cache = new HashMap<>();
 
   public PerpetualCache(String id) {
     this.id = id;

File: src/main/java/org/apache/ibatis/executor/BatchResult.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -35,7 +35,7 @@ public BatchResult(MappedStatement mappedStatement, String sql) {
     super();
     this.mappedStatement = mappedStatement;
     this.sql = sql;
-    this.parameterObjects = new ArrayList<Object>();
+    this.parameterObjects = new ArrayList<>();
   }
 
   public BatchResult(MappedStatement mappedStatement, String sql, Object parameterObject) {

File: src/main/java/org/apache/ibatis/executor/CachingExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -100,13 +100,13 @@ public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds r
         @SuppressWarnings("unchecked")
         List<E> list = (List<E>) tcm.getObject(cache, key);
         if (list == null) {
-          list = delegate.<E> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
+          list = delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
           tcm.putObject(cache, key, list); // issue #578 and #116
         }
         return list;
       }
     }
-    return delegate.<E> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
+    return delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
   }
 
   @Override

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -47,7 +47,7 @@
  */
 public class ResultLoaderMap {
 
-  private final Map<String, LoadPair> loaderMap = new HashMap<String, LoadPair>();
+  private final Map<String, LoadPair> loaderMap = new HashMap<>();
 
   public void addLoader(String property, MetaObject metaResultObject, ResultLoader resultLoader) {
     String upperFirst = getUppercaseFirstProperty(property);
@@ -60,7 +60,7 @@ public void addLoader(String property, MetaObject metaResultObject, ResultLoader
   }
 
   public final Map<String, LoadPair> getProperties() {
-    return new HashMap<String, LoadPair>(this.loaderMap);
+    return new HashMap<>(this.loaderMap);
   }
 
   public Set<String> getPropertyNames() {

File: src/main/java/org/apache/ibatis/executor/result/DefaultResultHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,7 +30,7 @@ public class DefaultResultHandler implements ResultHandler<Object> {
   private final List<Object> list;
 
   public DefaultResultHandler() {
-    list = new ArrayList<Object>();
+    list = new ArrayList<>();
   }
 
   @SuppressWarnings("unchecked")

File: src/main/java/org/apache/ibatis/io/JBoss6VFS.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -56,7 +56,7 @@ String getPathNameRelativeTo(VirtualFile parent) {
 
     List<VirtualFile> getChildren() throws IOException {
       List<?> objects = invoke(getChildrenRecursively, virtualFile);
-      List<VirtualFile> children = new ArrayList<VirtualFile>(objects.size());
+      List<VirtualFile> children = new ArrayList<>(objects.size());
       for (Object object : objects) {
         children.add(new VirtualFile(object));
       }
@@ -166,7 +166,7 @@ public List<String> list(URL url, String path) throws IOException {
     }
 
     List<VirtualFile> children = directory.getChildren();
-    List<String> names = new ArrayList<String>(children.size());
+    List<String> names = new ArrayList<>(children.size());
     for (VirtualFile vf : children) {
       names.add(path + vf.getPathNameRelativeTo(directory));
     }

File: src/main/java/org/apache/ibatis/io/ResolverUtil.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -123,7 +123,7 @@ public String toString() {
   }
 
   /** The set of matches being accumulated. */
-  private Set<Class<? extends T>> matches = new HashSet<Class<? extends T>>();
+  private Set<Class<? extends T>> matches = new HashSet<>();
 
   /**
    * The ClassLoader to use when looking for classes. If null then the ClassLoader returned

File: src/main/java/org/apache/ibatis/jdbc/Null.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -72,7 +72,7 @@ public enum Null {
   private TypeHandler<?> typeHandler;
   private JdbcType jdbcType;
 
-  private Null(TypeHandler<?> typeHandler, JdbcType jdbcType) {
+  Null(TypeHandler<?> typeHandler, JdbcType jdbcType) {
     this.typeHandler = typeHandler;
     this.jdbcType = jdbcType;
   }

File: src/main/java/org/apache/ibatis/jdbc/SelectBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
 @Deprecated
 public class SelectBuilder {
 
-  private static final ThreadLocal<SQL> localSQL = new ThreadLocal<SQL>();
+  private static final ThreadLocal<SQL> localSQL = new ThreadLocal<>();
 
   static {
     BEGIN();

File: src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -22,7 +22,7 @@
  */
 public class SqlBuilder {
 
-  private static final ThreadLocal<SQL> localSQL = new ThreadLocal<SQL>();
+  private static final ThreadLocal<SQL> localSQL = new ThreadLocal<>();
 
   static {
     BEGIN();

File: src/main/java/org/apache/ibatis/jdbc/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * Utilities for JDBC.
  */
 package org.apache.ibatis.jdbc;

File: src/main/java/org/apache/ibatis/logging/commons/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * logger using Commons Logging feature.
  */
 package org.apache.ibatis.logging.commons;

File: src/main/java/org/apache/ibatis/logging/jdbc/ConnectionLogger.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -74,7 +74,7 @@ public Object invoke(Object proxy, Method method, Object[] params)
     }
   }
 
-  /*
+  /**
    * Creates a logging version of a connection
    *
    * @param conn - the original connection
@@ -86,7 +86,7 @@ public static Connection newInstance(Connection conn, Log statementLog, int quer
     return (Connection) Proxy.newProxyInstance(cl, new Class[]{Connection.class}, handler);
   }
 
-  /*
+  /**
    * return the wrapped connection
    *
    * @return the connection

File: src/main/java/org/apache/ibatis/logging/jdbc/StatementLogger.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -67,7 +67,7 @@ public Object invoke(Object proxy, Method method, Object[] params) throws Throwa
     }
   }
 
-  /*
+  /**
    * Creates a logging version of a Statement
    *
    * @param stmt - the statement
@@ -79,7 +79,7 @@ public static Statement newInstance(Statement stmt, Log statementLog, int queryS
     return (Statement) Proxy.newProxyInstance(cl, new Class[]{Statement.class}, handler);
   }
 
-  /*
+  /**
    * return the wrapped statement
    *
    * @return the statement

File: src/main/java/org/apache/ibatis/logging/jdk14/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * logger using JDK logging feature.
  */
 package org.apache.ibatis.logging.jdk14;

File: src/main/java/org/apache/ibatis/logging/log4j/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * logger using Log4J feature.
  */
 package org.apache.ibatis.logging.log4j;

File: src/main/java/org/apache/ibatis/logging/log4j2/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * logger using Log4J 2 feature.
  */
 package org.apache.ibatis.logging.log4j2;

File: src/main/java/org/apache/ibatis/logging/nologging/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * logger for no operation.
  */
 package org.apache.ibatis.logging.nologging;

File: src/main/java/org/apache/ibatis/logging/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * Base package for logging.
  */
 package org.apache.ibatis.logging;

File: src/main/java/org/apache/ibatis/logging/slf4j/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * logger using SLF4J feature.
  */
 package org.apache.ibatis.logging.slf4j;

File: src/main/java/org/apache/ibatis/logging/stdout/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * logger using standard out.
  */
 package org.apache.ibatis.logging.stdout;

File: src/main/java/org/apache/ibatis/mapping/CacheBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -49,7 +49,7 @@ public class CacheBuilder {
 
   public CacheBuilder(String id) {
     this.id = id;
-    this.decorators = new ArrayList<Class<? extends Cache>>();
+    this.decorators = new ArrayList<>();
   }
 
   public CacheBuilder implementation(Class<? extends Cache> implementation) {

File: src/main/java/org/apache/ibatis/mapping/ResultMapping.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -67,8 +67,8 @@ public Builder(Configuration configuration, String property, String column, Clas
     public Builder(Configuration configuration, String property) {
       resultMapping.configuration = configuration;
       resultMapping.property = property;
-      resultMapping.flags = new ArrayList<ResultFlag>();
-      resultMapping.composites = new ArrayList<ResultMapping>();
+      resultMapping.flags = new ArrayList<>();
+      resultMapping.composites = new ArrayList<>();
       resultMapping.lazy = configuration.isLazyLoadingEnabled();
     }
 

File: src/main/java/org/apache/ibatis/mapping/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * Base package for mapping.
  */
 package org.apache.ibatis.mapping;

File: src/main/java/org/apache/ibatis/parsing/XNode.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -288,7 +288,7 @@ public Float getFloatAttribute(String name, Float def) {
   }
 
   public List<XNode> getChildren() {
-    List<XNode> children = new ArrayList<XNode>();
+    List<XNode> children = new ArrayList<>();
     NodeList nodeList = node.getChildNodes();
     if (nodeList != null) {
       for (int i = 0, n = nodeList.getLength(); i < n; i++) {

File: src/main/java/org/apache/ibatis/plugin/InterceptorChain.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,7 +24,7 @@
  */
 public class InterceptorChain {
 
-  private final List<Interceptor> interceptors = new ArrayList<Interceptor>();
+  private final List<Interceptor> interceptors = new ArrayList<>();
 
   public Object pluginAll(Object target) {
     for (Interceptor interceptor : interceptors) {

File: src/main/java/org/apache/ibatis/reflection/MetaClass.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -126,8 +126,7 @@ private Type getGenericGetterType(String propertyName) {
         Field field = (Field) _field.get(invoker);
         return TypeParameterResolver.resolveFieldType(field, reflector.getType());
       }
-    } catch (NoSuchFieldException e) {
-    } catch (IllegalAccessException e) {
+    } catch (NoSuchFieldException | IllegalAccessException ignored) {
     }
     return null;
   }

File: src/main/java/org/apache/ibatis/reflection/MetaObject.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -128,7 +128,7 @@ public void setValue(String name, Object value) {
     if (prop.hasNext()) {
       MetaObject metaValue = metaObjectForProperty(prop.getIndexedName());
       if (metaValue == SystemMetaObject.NULL_META_OBJECT) {
-        if (value == null && prop.getChildren() != null) {
+        if (value == null) {
           // don't instantiate child path if value is null
           return;
         } else {

File: src/main/java/org/apache/ibatis/reflection/wrapper/MapWrapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -135,7 +135,7 @@ public boolean hasGetter(String name) {
 
   @Override
   public MetaObject instantiatePropertyValue(String name, PropertyTokenizer prop, ObjectFactory objectFactory) {
-    HashMap<String, Object> map = new HashMap<String, Object>();
+    HashMap<String, Object> map = new HashMap<>();
     set(prop, map);
     return MetaObject.forObject(map, metaObject.getObjectFactory(), metaObject.getObjectWrapperFactory(), metaObject.getReflectorFactory());
   }

File: src/main/java/org/apache/ibatis/scripting/xmltags/ExpressionEvaluator.java
Patch:
@@ -52,7 +52,7 @@ public Iterable<?> evaluateIterable(String expression, Object parameterObject) {
         // a ClassCastException (issue 209).  Do the work manually
         // Curse primitives! :) (JGB)
         int size = Array.getLength(value);
-        List<Object> answer = new ArrayList<Object>();
+        List<Object> answer = new ArrayList<>();
         for (int i = 0; i < size; i++) {
             Object o = Array.get(value, i);
             answer.add(o);

File: src/main/java/org/apache/ibatis/scripting/xmltags/TextSqlNode.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -75,7 +75,7 @@ public String handleToken(String content) {
         context.getBindings().put("value", parameter);
       }
       Object value = OgnlCache.getValue(content, context.getBindings());
-      String srtValue = (value == null ? "" : String.valueOf(value)); // issue #274 return "" instead of "null"
+      String srtValue = value == null ? "" : String.valueOf(value); // issue #274 return "" instead of "null"
       checkInjection(srtValue);
       return srtValue;
     }

File: src/main/java/org/apache/ibatis/scripting/xmltags/TrimSqlNode.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -60,7 +60,7 @@ public boolean apply(DynamicContext context) {
   private static List<String> parseOverrides(String overrides) {
     if (overrides != null) {
       final StringTokenizer parser = new StringTokenizer(overrides, "|", false);
-      final List<String> list = new ArrayList<String>(parser.countTokens());
+      final List<String> list = new ArrayList<>(parser.countTokens());
       while (parser.hasMoreTokens()) {
         list.add(parser.nextToken().toUpperCase(Locale.ENGLISH));
       }

File: src/main/java/org/apache/ibatis/session/TransactionIsolationLevel.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@ public enum TransactionIsolationLevel {
 
   private final int level;
 
-  private TransactionIsolationLevel(int level) {
+  TransactionIsolationLevel(int level) {
     this.level = level;
   }
 

File: src/main/java/org/apache/ibatis/type/JdbcType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -68,7 +68,7 @@ public enum JdbcType {
   DATETIMEOFFSET(-155); // SQL Server 2008
 
   public final int TYPE_CODE;
-  private static Map<Integer,JdbcType> codeLookup = new HashMap<Integer,JdbcType>();
+  private static Map<Integer,JdbcType> codeLookup = new HashMap<>();
 
   static {
     for (JdbcType type : JdbcType.values()) {

File: src/main/java/org/apache/ibatis/type/SimpleTypeRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
  */
 public class SimpleTypeRegistry {
 
-  private static final Set<Class<?>> SIMPLE_TYPE_SET = new HashSet<Class<?>>();
+  private static final Set<Class<?>> SIMPLE_TYPE_SET = new HashSet<>();
 
   static {
     SIMPLE_TYPE_SET.add(String.class);

File: src/main/java/org/apache/ibatis/type/TypeAliasRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -37,7 +37,7 @@
  */
 public class TypeAliasRegistry {
 
-  private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<String, Class<?>>();
+  private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
 
   public TypeAliasRegistry() {
     registerAlias("string", String.class);
@@ -126,7 +126,7 @@ public void registerAliases(String packageName){
   }
 
   public void registerAliases(String packageName, Class<?> superType){
-    ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<Class<?>>();
+    ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
     resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
     Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
     for(Class<?> type : typeSet){

File: src/main/java/org/apache/ibatis/type/UnknownTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -85,7 +85,7 @@ private TypeHandler<? extends Object> resolveTypeHandler(Object parameter, JdbcT
   private TypeHandler<?> resolveTypeHandler(ResultSet rs, String column) {
     try {
       Map<String,Integer> columnIndexLookup;
-      columnIndexLookup = new HashMap<String,Integer>();
+      columnIndexLookup = new HashMap<>();
       ResultSetMetaData rsmd = rs.getMetaData();
       int count = rsmd.getColumnCount();
       for (int i=1; i <= count; i++) {
@@ -106,7 +106,7 @@ private TypeHandler<?> resolveTypeHandler(ResultSet rs, String column) {
     }
   }
 
-  private TypeHandler<?> resolveTypeHandler(ResultSetMetaData rsmd, Integer columnIndex) throws SQLException {
+  private TypeHandler<?> resolveTypeHandler(ResultSetMetaData rsmd, Integer columnIndex) {
     TypeHandler<?> handler = null;
     JdbcType jdbcType = safeGetJdbcTypeForColumn(rsmd, columnIndex);
     Class<?> javaType = safeGetClassForColumn(rsmd, columnIndex);

File: src/test/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -88,7 +88,6 @@ public void shouldRetainColumnNameCase() throws Exception {
     when(rs.getType()).thenReturn(ResultSet.TYPE_FORWARD_ONLY);
     when(rs.next()).thenReturn(true).thenReturn(false);
     when(rs.getInt("CoLuMn1")).thenReturn(100);
-    when(rs.wasNull()).thenReturn(false);
     when(rsmd.getColumnCount()).thenReturn(1);
     when(rsmd.getColumnLabel(1)).thenReturn("CoLuMn1");
     when(rsmd.getColumnType(1)).thenReturn(Types.INTEGER);

File: src/test/java/org/apache/ibatis/scripting/LanguageDriverRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -56,7 +56,7 @@ public void registerByTypeSameType() {
 
   @Test
   public void registerByTypeNull() {
-    when(registry).register((Class<?>) null);
+    when(registry).register((Class<? extends LanguageDriver>) null);
     then(caughtException()).isInstanceOf(IllegalArgumentException.class)
       .hasMessage("null is not a valid Language Driver");
   }

File: src/test/java/org/apache/ibatis/submitted/associationtest/Mapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -21,6 +21,5 @@ public interface Mapper {
 
   List<Car> getCars();
   List<Car> getCars2();
-  List<Car> getCars3();
-
+  List<Car> getCarsAndDetectAssociationType();
 }

File: src/test/java/org/apache/ibatis/submitted/default_method/Mapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.usesjava8.default_method;
+package org.apache.ibatis.submitted.default_method;
 
 import org.apache.ibatis.annotations.Param;
 import org.apache.ibatis.annotations.Select;

File: src/test/java/org/apache/ibatis/submitted/default_method/PackageMapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.usesjava8.default_method;
+package org.apache.ibatis.submitted.default_method;
 
 import org.apache.ibatis.annotations.Select;
 

File: src/test/java/org/apache/ibatis/submitted/default_method/User.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.usesjava8.default_method;
+package org.apache.ibatis.submitted.default_method;
 
 public class User {
 

File: src/main/java/org/apache/ibatis/jdbc/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * Utilities for JDBC.
  */
 package org.apache.ibatis.jdbc;

File: src/main/java/org/apache/ibatis/logging/commons/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * logger using Commons Logging feature.
  */
 package org.apache.ibatis.logging.commons;

File: src/main/java/org/apache/ibatis/logging/jdk14/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * logger using JDK logging feature.
  */
 package org.apache.ibatis.logging.jdk14;

File: src/main/java/org/apache/ibatis/logging/log4j/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * logger using Log4J feature.
  */
 package org.apache.ibatis.logging.log4j;

File: src/main/java/org/apache/ibatis/logging/log4j2/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * logger using Log4J 2 feature.
  */
 package org.apache.ibatis.logging.log4j2;

File: src/main/java/org/apache/ibatis/logging/nologging/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * logger for no operation.
  */
 package org.apache.ibatis.logging.nologging;

File: src/main/java/org/apache/ibatis/logging/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * Base package for logging.
  */
 package org.apache.ibatis.logging;

File: src/main/java/org/apache/ibatis/logging/slf4j/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * logger using SLF4J feature.
  */
 package org.apache.ibatis.logging.slf4j;

File: src/main/java/org/apache/ibatis/logging/stdout/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * logger using standard out.
  */
 package org.apache.ibatis.logging.stdout;

File: src/main/java/org/apache/ibatis/mapping/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -14,6 +14,6 @@
  *    limitations under the License.
  */
 /**
- * TODO fillme.
+ * Base package for mapping.
  */
 package org.apache.ibatis.mapping;

File: src/main/java/org/apache/ibatis/builder/BaseBuilder.java
Patch:
@@ -59,7 +59,7 @@ protected Integer integerValueOf(String value, Integer defaultValue) {
   }
 
   protected Set<String> stringSetValueOf(String value, String defaultValue) {
-    value = (value == null ? defaultValue : value);
+    value = value == null ? defaultValue : value;
     return new HashSet<>(Arrays.asList(value.split(",")));
   }
 

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -112,7 +112,7 @@ private SqlSource createSqlSource(Object parameterObject) {
       } else if (bindParameterCount == 0) {
         sql = invokeProviderMethod(providerContext);
       } else if (bindParameterCount == 1 &&
-              (parameterObject == null || providerMethodParameterTypes[(providerContextIndex == null || providerContextIndex == 1) ? 0 : 1].isAssignableFrom(parameterObject.getClass()))) {
+              (parameterObject == null || providerMethodParameterTypes[providerContextIndex == null || providerContextIndex == 1 ? 0 : 1].isAssignableFrom(parameterObject.getClass()))) {
         sql = invokeProviderMethod(extractProviderMethodArguments(parameterObject));
       } else if (parameterObject instanceof Map) {
         @SuppressWarnings("unchecked")

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -45,7 +45,6 @@
 import org.apache.ibatis.session.LocalCacheScope;
 import org.apache.ibatis.transaction.TransactionFactory;
 import org.apache.ibatis.type.JdbcType;
-import org.apache.ibatis.type.TypeHandler;
 
 /**
  * @author Clinton Begin

File: src/main/java/org/apache/ibatis/datasource/pooled/PoolState.java
Patch:
@@ -89,7 +89,7 @@ public synchronized String toString() {
     builder.append("\n jdbcDriver                     ").append(dataSource.getDriver());
     builder.append("\n jdbcUrl                        ").append(dataSource.getUrl());
     builder.append("\n jdbcUsername                   ").append(dataSource.getUsername());
-    builder.append("\n jdbcPassword                   ").append((dataSource.getPassword() == null ? "NULL" : "************"));
+    builder.append("\n jdbcPassword                   ").append(dataSource.getPassword() == null ? "NULL" : "************");
     builder.append("\n poolMaxActiveConnections       ").append(dataSource.poolMaximumActiveConnections);
     builder.append("\n poolMaxIdleConnections         ").append(dataSource.poolMaximumIdleConnections);
     builder.append("\n poolMaxCheckoutTime            ").append(dataSource.poolMaximumCheckoutTime);

File: src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java
Patch:
@@ -67,7 +67,7 @@ public Object invoke(Object proxy, Method method, Object[] params) throws Throwa
       }    
       Object o = method.invoke(rs, params);
       if ("next".equals(method.getName())) {
-        if (((Boolean) o)) {
+        if ((Boolean) o) {
           rows++;
           if (isTraceEnabled()) {
             ResultSetMetaData rsmd = rs.getMetaData();

File: src/main/java/org/apache/ibatis/scripting/xmltags/OgnlMemberAccess.java
Patch:
@@ -58,7 +58,7 @@ public Object setup(Map context, Object target, Member member, String propertyNa
   public void restore(Map context, Object target, Member member, String propertyName,
       Object state) {
     if (state != null) {
-      ((AccessibleObject) member).setAccessible(((Boolean) state));
+      ((AccessibleObject) member).setAccessible((Boolean) state);
     }
   }
 

File: src/main/java/org/apache/ibatis/scripting/xmltags/TextSqlNode.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -75,7 +75,7 @@ public String handleToken(String content) {
         context.getBindings().put("value", parameter);
       }
       Object value = OgnlCache.getValue(content, context.getBindings());
-      String srtValue = (value == null ? "" : String.valueOf(value)); // issue #274 return "" instead of "null"
+      String srtValue = value == null ? "" : String.valueOf(value); // issue #274 return "" instead of "null"
       checkInjection(srtValue);
       return srtValue;
     }

File: src/main/java/org/apache/ibatis/type/BooleanTypeHandler.java
Patch:
@@ -35,20 +35,20 @@ public void setNonNullParameter(PreparedStatement ps, int i, Boolean parameter,
   public Boolean getNullableResult(ResultSet rs, String columnName)
       throws SQLException {
     boolean result = rs.getBoolean(columnName);
-    return (!result && rs.wasNull()) ? null : result;
+    return !result && rs.wasNull() ? null : result;
   }
 
   @Override
   public Boolean getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException {
     boolean result = rs.getBoolean(columnIndex);
-    return (!result && rs.wasNull()) ? null : result;
+    return !result && rs.wasNull() ? null : result;
   }
 
   @Override
   public Boolean getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     boolean result = cs.getBoolean(columnIndex);
-    return (!result && cs.wasNull()) ? null : result;
+    return !result && cs.wasNull() ? null : result;
   }
 }

File: src/main/java/org/apache/ibatis/type/ByteTypeHandler.java
Patch:
@@ -35,20 +35,20 @@ public void setNonNullParameter(PreparedStatement ps, int i, Byte parameter, Jdb
   public Byte getNullableResult(ResultSet rs, String columnName)
       throws SQLException {
     byte result = rs.getByte(columnName);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Byte getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException {
     byte result = rs.getByte(columnIndex);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Byte getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     byte result = cs.getByte(columnIndex);
-    return (result == 0 && cs.wasNull()) ? null : result;
+    return result == 0 && cs.wasNull() ? null : result;
   }
 }

File: src/main/java/org/apache/ibatis/type/DoubleTypeHandler.java
Patch:
@@ -35,21 +35,21 @@ public void setNonNullParameter(PreparedStatement ps, int i, Double parameter, J
   public Double getNullableResult(ResultSet rs, String columnName)
       throws SQLException {
     double result = rs.getDouble(columnName);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Double getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException {
     double result = rs.getDouble(columnIndex);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Double getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     double result = cs.getDouble(columnIndex);
-    return (result == 0 && cs.wasNull()) ? null : result;
+    return result == 0 && cs.wasNull() ? null : result;
   }
 
 }

File: src/main/java/org/apache/ibatis/type/FloatTypeHandler.java
Patch:
@@ -35,20 +35,20 @@ public void setNonNullParameter(PreparedStatement ps, int i, Float parameter, Jd
   public Float getNullableResult(ResultSet rs, String columnName)
       throws SQLException {
     float result = rs.getFloat(columnName);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Float getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException {
     float result = rs.getFloat(columnIndex);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Float getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     float result = cs.getFloat(columnIndex);
-    return (result == 0 && cs.wasNull()) ? null : result;
+    return result == 0 && cs.wasNull() ? null : result;
   }
 }

File: src/main/java/org/apache/ibatis/type/IntegerTypeHandler.java
Patch:
@@ -35,20 +35,20 @@ public void setNonNullParameter(PreparedStatement ps, int i, Integer parameter,
   public Integer getNullableResult(ResultSet rs, String columnName)
       throws SQLException {
     int result = rs.getInt(columnName);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Integer getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException {
     int result = rs.getInt(columnIndex);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Integer getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     int result = cs.getInt(columnIndex);
-    return (result == 0 && cs.wasNull()) ? null : result;
+    return result == 0 && cs.wasNull() ? null : result;
   }
 }

File: src/main/java/org/apache/ibatis/type/LongTypeHandler.java
Patch:
@@ -35,20 +35,20 @@ public void setNonNullParameter(PreparedStatement ps, int i, Long parameter, Jdb
   public Long getNullableResult(ResultSet rs, String columnName)
       throws SQLException {
     long result = rs.getLong(columnName);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Long getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException {
     long result = rs.getLong(columnIndex);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Long getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     long result = cs.getLong(columnIndex);
-    return (result == 0 && cs.wasNull()) ? null : result;
+    return result == 0 && cs.wasNull() ? null : result;
   }
 }

File: src/main/java/org/apache/ibatis/type/MonthTypeHandler.java
Patch:
@@ -36,19 +36,19 @@ public void setNonNullParameter(PreparedStatement ps, int i, Month month, JdbcTy
     @Override
     public Month getNullableResult(ResultSet rs, String columnName) throws SQLException {
         int month = rs.getInt(columnName);
-        return (month == 0 && rs.wasNull()) ? null : Month.of(month);
+        return month == 0 && rs.wasNull() ? null : Month.of(month);
     }
 
     @Override
     public Month getNullableResult(ResultSet rs, int columnIndex) throws SQLException {
         int month = rs.getInt(columnIndex);
-        return (month == 0 && rs.wasNull()) ? null : Month.of(month);
+        return month == 0 && rs.wasNull() ? null : Month.of(month);
     }
 
     @Override
     public Month getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {
         int month = cs.getInt(columnIndex);
-        return (month == 0 && cs.wasNull()) ? null : Month.of(month);
+        return month == 0 && cs.wasNull() ? null : Month.of(month);
     }
     
 }

File: src/main/java/org/apache/ibatis/type/ShortTypeHandler.java
Patch:
@@ -35,20 +35,20 @@ public void setNonNullParameter(PreparedStatement ps, int i, Short parameter, Jd
   public Short getNullableResult(ResultSet rs, String columnName)
       throws SQLException {
     short result = rs.getShort(columnName);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Short getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException {
     short result = rs.getShort(columnIndex);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Short getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     short result = cs.getShort(columnIndex);
-    return (result == 0 && cs.wasNull()) ? null : result;
+    return result == 0 && cs.wasNull() ? null : result;
   }
 }

File: src/main/java/org/apache/ibatis/type/YearTypeHandler.java
Patch:
@@ -35,19 +35,19 @@ public void setNonNullParameter(PreparedStatement ps, int i, Year year, JdbcType
     @Override
     public Year getNullableResult(ResultSet rs, String columnName) throws SQLException {
         int year = rs.getInt(columnName);
-        return (year == 0 && rs.wasNull()) ? null : Year.of(year);
+        return year == 0 && rs.wasNull() ? null : Year.of(year);
     }
 
     @Override
     public Year getNullableResult(ResultSet rs, int columnIndex) throws SQLException {
         int year = rs.getInt(columnIndex);
-        return (year == 0 && rs.wasNull()) ? null : Year.of(year);
+        return year == 0 && rs.wasNull() ? null : Year.of(year);
     }
 
     @Override
     public Year getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {
         int year = cs.getInt(columnIndex);
-        return (year == 0 && cs.wasNull()) ? null : Year.of(year);
+        return year == 0 && cs.wasNull() ? null : Year.of(year);
     }
     
 }

File: src/main/java/org/apache/ibatis/builder/BaseBuilder.java
Patch:
@@ -59,7 +59,7 @@ protected Integer integerValueOf(String value, Integer defaultValue) {
   }
 
   protected Set<String> stringSetValueOf(String value, String defaultValue) {
-    value = (value == null ? defaultValue : value);
+    value = value == null ? defaultValue : value;
     return new HashSet<>(Arrays.asList(value.split(",")));
   }
 

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -112,7 +112,7 @@ private SqlSource createSqlSource(Object parameterObject) {
       } else if (bindParameterCount == 0) {
         sql = invokeProviderMethod(providerContext);
       } else if (bindParameterCount == 1 &&
-              (parameterObject == null || providerMethodParameterTypes[(providerContextIndex == null || providerContextIndex == 1) ? 0 : 1].isAssignableFrom(parameterObject.getClass()))) {
+              (parameterObject == null || providerMethodParameterTypes[providerContextIndex == null || providerContextIndex == 1 ? 0 : 1].isAssignableFrom(parameterObject.getClass()))) {
         sql = invokeProviderMethod(extractProviderMethodArguments(parameterObject));
       } else if (parameterObject instanceof Map) {
         @SuppressWarnings("unchecked")

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -45,7 +45,6 @@
 import org.apache.ibatis.session.LocalCacheScope;
 import org.apache.ibatis.transaction.TransactionFactory;
 import org.apache.ibatis.type.JdbcType;
-import org.apache.ibatis.type.TypeHandler;
 
 /**
  * @author Clinton Begin

File: src/main/java/org/apache/ibatis/datasource/pooled/PoolState.java
Patch:
@@ -89,7 +89,7 @@ public synchronized String toString() {
     builder.append("\n jdbcDriver                     ").append(dataSource.getDriver());
     builder.append("\n jdbcUrl                        ").append(dataSource.getUrl());
     builder.append("\n jdbcUsername                   ").append(dataSource.getUsername());
-    builder.append("\n jdbcPassword                   ").append((dataSource.getPassword() == null ? "NULL" : "************"));
+    builder.append("\n jdbcPassword                   ").append(dataSource.getPassword() == null ? "NULL" : "************");
     builder.append("\n poolMaxActiveConnections       ").append(dataSource.poolMaximumActiveConnections);
     builder.append("\n poolMaxIdleConnections         ").append(dataSource.poolMaximumIdleConnections);
     builder.append("\n poolMaxCheckoutTime            ").append(dataSource.poolMaximumCheckoutTime);

File: src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java
Patch:
@@ -67,7 +67,7 @@ public Object invoke(Object proxy, Method method, Object[] params) throws Throwa
       }    
       Object o = method.invoke(rs, params);
       if ("next".equals(method.getName())) {
-        if (((Boolean) o)) {
+        if ((Boolean) o) {
           rows++;
           if (isTraceEnabled()) {
             ResultSetMetaData rsmd = rs.getMetaData();

File: src/main/java/org/apache/ibatis/scripting/xmltags/OgnlMemberAccess.java
Patch:
@@ -58,7 +58,7 @@ public Object setup(Map context, Object target, Member member, String propertyNa
   public void restore(Map context, Object target, Member member, String propertyName,
       Object state) {
     if (state != null) {
-      ((AccessibleObject) member).setAccessible(((Boolean) state));
+      ((AccessibleObject) member).setAccessible((Boolean) state);
     }
   }
 

File: src/main/java/org/apache/ibatis/scripting/xmltags/TextSqlNode.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -75,7 +75,7 @@ public String handleToken(String content) {
         context.getBindings().put("value", parameter);
       }
       Object value = OgnlCache.getValue(content, context.getBindings());
-      String srtValue = (value == null ? "" : String.valueOf(value)); // issue #274 return "" instead of "null"
+      String srtValue = value == null ? "" : String.valueOf(value); // issue #274 return "" instead of "null"
       checkInjection(srtValue);
       return srtValue;
     }

File: src/main/java/org/apache/ibatis/type/BooleanTypeHandler.java
Patch:
@@ -35,20 +35,20 @@ public void setNonNullParameter(PreparedStatement ps, int i, Boolean parameter,
   public Boolean getNullableResult(ResultSet rs, String columnName)
       throws SQLException {
     boolean result = rs.getBoolean(columnName);
-    return (!result && rs.wasNull()) ? null : result;
+    return !result && rs.wasNull() ? null : result;
   }
 
   @Override
   public Boolean getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException {
     boolean result = rs.getBoolean(columnIndex);
-    return (!result && rs.wasNull()) ? null : result;
+    return !result && rs.wasNull() ? null : result;
   }
 
   @Override
   public Boolean getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     boolean result = cs.getBoolean(columnIndex);
-    return (!result && cs.wasNull()) ? null : result;
+    return !result && cs.wasNull() ? null : result;
   }
 }

File: src/main/java/org/apache/ibatis/type/ByteTypeHandler.java
Patch:
@@ -35,20 +35,20 @@ public void setNonNullParameter(PreparedStatement ps, int i, Byte parameter, Jdb
   public Byte getNullableResult(ResultSet rs, String columnName)
       throws SQLException {
     byte result = rs.getByte(columnName);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Byte getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException {
     byte result = rs.getByte(columnIndex);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Byte getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     byte result = cs.getByte(columnIndex);
-    return (result == 0 && cs.wasNull()) ? null : result;
+    return result == 0 && cs.wasNull() ? null : result;
   }
 }

File: src/main/java/org/apache/ibatis/type/DoubleTypeHandler.java
Patch:
@@ -35,21 +35,21 @@ public void setNonNullParameter(PreparedStatement ps, int i, Double parameter, J
   public Double getNullableResult(ResultSet rs, String columnName)
       throws SQLException {
     double result = rs.getDouble(columnName);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Double getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException {
     double result = rs.getDouble(columnIndex);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Double getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     double result = cs.getDouble(columnIndex);
-    return (result == 0 && cs.wasNull()) ? null : result;
+    return result == 0 && cs.wasNull() ? null : result;
   }
 
 }

File: src/main/java/org/apache/ibatis/type/FloatTypeHandler.java
Patch:
@@ -35,20 +35,20 @@ public void setNonNullParameter(PreparedStatement ps, int i, Float parameter, Jd
   public Float getNullableResult(ResultSet rs, String columnName)
       throws SQLException {
     float result = rs.getFloat(columnName);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Float getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException {
     float result = rs.getFloat(columnIndex);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Float getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     float result = cs.getFloat(columnIndex);
-    return (result == 0 && cs.wasNull()) ? null : result;
+    return result == 0 && cs.wasNull() ? null : result;
   }
 }

File: src/main/java/org/apache/ibatis/type/IntegerTypeHandler.java
Patch:
@@ -35,20 +35,20 @@ public void setNonNullParameter(PreparedStatement ps, int i, Integer parameter,
   public Integer getNullableResult(ResultSet rs, String columnName)
       throws SQLException {
     int result = rs.getInt(columnName);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Integer getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException {
     int result = rs.getInt(columnIndex);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Integer getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     int result = cs.getInt(columnIndex);
-    return (result == 0 && cs.wasNull()) ? null : result;
+    return result == 0 && cs.wasNull() ? null : result;
   }
 }

File: src/main/java/org/apache/ibatis/type/LongTypeHandler.java
Patch:
@@ -35,20 +35,20 @@ public void setNonNullParameter(PreparedStatement ps, int i, Long parameter, Jdb
   public Long getNullableResult(ResultSet rs, String columnName)
       throws SQLException {
     long result = rs.getLong(columnName);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Long getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException {
     long result = rs.getLong(columnIndex);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Long getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     long result = cs.getLong(columnIndex);
-    return (result == 0 && cs.wasNull()) ? null : result;
+    return result == 0 && cs.wasNull() ? null : result;
   }
 }

File: src/main/java/org/apache/ibatis/type/MonthTypeHandler.java
Patch:
@@ -36,19 +36,19 @@ public void setNonNullParameter(PreparedStatement ps, int i, Month month, JdbcTy
     @Override
     public Month getNullableResult(ResultSet rs, String columnName) throws SQLException {
         int month = rs.getInt(columnName);
-        return (month == 0 && rs.wasNull()) ? null : Month.of(month);
+        return month == 0 && rs.wasNull() ? null : Month.of(month);
     }
 
     @Override
     public Month getNullableResult(ResultSet rs, int columnIndex) throws SQLException {
         int month = rs.getInt(columnIndex);
-        return (month == 0 && rs.wasNull()) ? null : Month.of(month);
+        return month == 0 && rs.wasNull() ? null : Month.of(month);
     }
 
     @Override
     public Month getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {
         int month = cs.getInt(columnIndex);
-        return (month == 0 && cs.wasNull()) ? null : Month.of(month);
+        return month == 0 && cs.wasNull() ? null : Month.of(month);
     }
     
 }

File: src/main/java/org/apache/ibatis/type/ShortTypeHandler.java
Patch:
@@ -35,20 +35,20 @@ public void setNonNullParameter(PreparedStatement ps, int i, Short parameter, Jd
   public Short getNullableResult(ResultSet rs, String columnName)
       throws SQLException {
     short result = rs.getShort(columnName);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Short getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException {
     short result = rs.getShort(columnIndex);
-    return (result == 0 && rs.wasNull()) ? null : result;
+    return result == 0 && rs.wasNull() ? null : result;
   }
 
   @Override
   public Short getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     short result = cs.getShort(columnIndex);
-    return (result == 0 && cs.wasNull()) ? null : result;
+    return result == 0 && cs.wasNull() ? null : result;
   }
 }

File: src/main/java/org/apache/ibatis/type/YearTypeHandler.java
Patch:
@@ -35,19 +35,19 @@ public void setNonNullParameter(PreparedStatement ps, int i, Year year, JdbcType
     @Override
     public Year getNullableResult(ResultSet rs, String columnName) throws SQLException {
         int year = rs.getInt(columnName);
-        return (year == 0 && rs.wasNull()) ? null : Year.of(year);
+        return year == 0 && rs.wasNull() ? null : Year.of(year);
     }
 
     @Override
     public Year getNullableResult(ResultSet rs, int columnIndex) throws SQLException {
         int year = rs.getInt(columnIndex);
-        return (year == 0 && rs.wasNull()) ? null : Year.of(year);
+        return year == 0 && rs.wasNull() ? null : Year.of(year);
     }
 
     @Override
     public Year getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {
         int year = cs.getInt(columnIndex);
-        return (year == 0 && cs.wasNull()) ? null : Year.of(year);
+        return year == 0 && cs.wasNull() ? null : Year.of(year);
     }
     
 }

File: src/main/java/org/apache/ibatis/annotations/Options.java
Patch:
@@ -35,7 +35,7 @@
    * The options for the {@link Options#flushCache()}.
    * The default is {@link FlushCachePolicy#DEFAULT}
    */
-  public enum FlushCachePolicy {
+  enum FlushCachePolicy {
     /** <code>false</code> for select statement; <code>true</code> for insert/update/delete statement. */
     DEFAULT,
     /** Flushes cache regardless of the statement type. */

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -192,9 +192,9 @@ private <K, V> Map<K, V> executeForMap(SqlSession sqlSession, Object[] args) {
     Object param = method.convertArgsToSqlCommandParam(args);
     if (method.hasRowBounds()) {
       RowBounds rowBounds = method.extractRowBounds(args);
-      result = sqlSession.<K, V>selectMap(command.getName(), param, method.getMapKey(), rowBounds);
+      result = sqlSession.selectMap(command.getName(), param, method.getMapKey(), rowBounds);
     } else {
-      result = sqlSession.<K, V>selectMap(command.getName(), param, method.getMapKey());
+      result = sqlSession.selectMap(command.getName(), param, method.getMapKey());
     }
     return result;
   }

File: src/main/java/org/apache/ibatis/cache/decorators/SerializedCache.java
Patch:
@@ -119,7 +119,7 @@ public CustomObjectInputStream(InputStream in) throws IOException {
     }
 
     @Override
-    protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
+    protected Class<?> resolveClass(ObjectStreamClass desc) throws ClassNotFoundException {
       return Resources.classForName(desc.getName());
     }
     

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.ibatis.transaction.Transaction;
 
 /**
- * @author Jeff Butler 
+ * @author Jeff Butler
  */
 public class BatchExecutor extends BaseExecutor {
 
@@ -90,7 +90,7 @@ public <E> List<E> doQuery(MappedStatement ms, Object parameterObject, RowBounds
       Connection connection = getConnection(ms.getStatementLog());
       stmt = handler.prepare(connection, transaction.getTimeout());
       handler.parameterize(stmt);
-      return handler.<E>query(stmt, resultHandler);
+      return handler.query(stmt, resultHandler);
     } finally {
       closeStatement(stmt);
     }
@@ -105,7 +105,7 @@ protected <E> Cursor<E> doQueryCursor(MappedStatement ms, Object parameter, RowB
     Statement stmt = handler.prepare(connection, transaction.getTimeout());
     stmt.closeOnCompletion();
     handler.parameterize(stmt);
-    return handler.<E>queryCursor(stmt);
+    return handler.queryCursor(stmt);
   }
 
   @Override

File: src/main/java/org/apache/ibatis/executor/CachingExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -100,13 +100,13 @@ public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds r
         @SuppressWarnings("unchecked")
         List<E> list = (List<E>) tcm.getObject(cache, key);
         if (list == null) {
-          list = delegate.<E> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
+          list = delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
           tcm.putObject(cache, key, list); // issue #578 and #116
         }
         return list;
       }
     }
-    return delegate.<E> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
+    return delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
   }
 
   @Override

File: src/main/java/org/apache/ibatis/executor/ReuseExecutor.java
Patch:
@@ -57,19 +57,19 @@ public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBo
     Configuration configuration = ms.getConfiguration();
     StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);
     Statement stmt = prepareStatement(handler, ms.getStatementLog());
-    return handler.<E>query(stmt, resultHandler);
+    return handler.query(stmt, resultHandler);
   }
 
   @Override
   protected <E> Cursor<E> doQueryCursor(MappedStatement ms, Object parameter, RowBounds rowBounds, BoundSql boundSql) throws SQLException {
     Configuration configuration = ms.getConfiguration();
     StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, null, boundSql);
     Statement stmt = prepareStatement(handler, ms.getStatementLog());
-    return handler.<E>queryCursor(stmt);
+    return handler.queryCursor(stmt);
   }
 
   @Override
-  public List<BatchResult> doFlushStatements(boolean isRollback) throws SQLException {
+  public List<BatchResult> doFlushStatements(boolean isRollback) {
     for (Statement stmt : statementMap.values()) {
       closeStatement(stmt);
     }

File: src/main/java/org/apache/ibatis/executor/SimpleExecutor.java
Patch:
@@ -60,7 +60,7 @@ public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBo
       Configuration configuration = ms.getConfiguration();
       StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);
       stmt = prepareStatement(handler, ms.getStatementLog());
-      return handler.<E>query(stmt, resultHandler);
+      return handler.query(stmt, resultHandler);
     } finally {
       closeStatement(stmt);
     }
@@ -72,11 +72,11 @@ protected <E> Cursor<E> doQueryCursor(MappedStatement ms, Object parameter, RowB
     StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, null, boundSql);
     Statement stmt = prepareStatement(handler, ms.getStatementLog());
     stmt.closeOnCompletion();
-    return handler.<E>queryCursor(stmt);
+    return handler.queryCursor(stmt);
   }
 
   @Override
-  public List<BatchResult> doFlushStatements(boolean isRollback) throws SQLException {
+  public List<BatchResult> doFlushStatements(boolean isRollback) {
     return Collections.emptyList();
   }
 

File: src/main/java/org/apache/ibatis/executor/loader/AbstractSerialStateHolder.java
Patch:
@@ -109,7 +109,7 @@ protected final Object readResolve() throws ObjectStreamException {
     }
 
     /* First run */
-    try (final ObjectInputStream in = new LookAheadObjectInputStream(new ByteArrayInputStream(this.userBeanBytes))) {
+    try (ObjectInputStream in = new LookAheadObjectInputStream(new ByteArrayInputStream(this.userBeanBytes))) {
       this.userBean = in.readObject();
       this.unloadedProperties = (Map<String, ResultLoaderMap.LoadPair>) in.readObject();
       this.objectFactory = (ObjectFactory) in.readObject();

File: src/main/java/org/apache/ibatis/executor/statement/CallableStatementHandler.java
Patch:
@@ -66,7 +66,7 @@ public void batch(Statement statement) throws SQLException {
   public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {
     CallableStatement cs = (CallableStatement) statement;
     cs.execute();
-    List<E> resultList = resultSetHandler.<E>handleResultSets(cs);
+    List<E> resultList = resultSetHandler.handleResultSets(cs);
     resultSetHandler.handleOutputParameters(cs);
     return resultList;
   }
@@ -75,7 +75,7 @@ public <E> List<E> query(Statement statement, ResultHandler resultHandler) throw
   public <E> Cursor<E> queryCursor(Statement statement) throws SQLException {
     CallableStatement cs = (CallableStatement) statement;
     cs.execute();
-    Cursor<E> resultList = resultSetHandler.<E>handleCursorResultSets(cs);
+    Cursor<E> resultList = resultSetHandler.handleCursorResultSets(cs);
     resultSetHandler.handleOutputParameters(cs);
     return resultList;
   }

File: src/main/java/org/apache/ibatis/executor/statement/PreparedStatementHandler.java
Patch:
@@ -62,14 +62,14 @@ public void batch(Statement statement) throws SQLException {
   public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {
     PreparedStatement ps = (PreparedStatement) statement;
     ps.execute();
-    return resultSetHandler.<E> handleResultSets(ps);
+    return resultSetHandler.handleResultSets(ps);
   }
 
   @Override
   public <E> Cursor<E> queryCursor(Statement statement) throws SQLException {
     PreparedStatement ps = (PreparedStatement) statement;
     ps.execute();
-    return resultSetHandler.<E> handleCursorResultSets(ps);
+    return resultSetHandler.handleCursorResultSets(ps);
   }
 
   @Override

File: src/main/java/org/apache/ibatis/executor/statement/SimpleStatementHandler.java
Patch:
@@ -72,14 +72,14 @@ public void batch(Statement statement) throws SQLException {
   public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {
     String sql = boundSql.getSql();
     statement.execute(sql);
-    return resultSetHandler.<E>handleResultSets(statement);
+    return resultSetHandler.handleResultSets(statement);
   }
 
   @Override
   public <E> Cursor<E> queryCursor(Statement statement) throws SQLException {
     String sql = boundSql.getSql();
     statement.execute(sql);
-    return resultSetHandler.<E>handleCursorResultSets(statement);
+    return resultSetHandler.handleCursorResultSets(statement);
   }
 
   @Override
@@ -92,7 +92,7 @@ protected Statement instantiateStatement(Connection connection) throws SQLExcept
   }
 
   @Override
-  public void parameterize(Statement statement) throws SQLException {
+  public void parameterize(Statement statement) {
     // N/A
   }
 

File: src/main/java/org/apache/ibatis/jdbc/Null.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -72,7 +72,7 @@ public enum Null {
   private TypeHandler<?> typeHandler;
   private JdbcType jdbcType;
 
-  private Null(TypeHandler<?> typeHandler, JdbcType jdbcType) {
+  Null(TypeHandler<?> typeHandler, JdbcType jdbcType) {
     this.typeHandler = typeHandler;
     this.jdbcType = jdbcType;
   }

File: src/main/java/org/apache/ibatis/reflection/Reflector.java
Patch:
@@ -229,7 +229,7 @@ private Class<?> typeToClass(Type src) {
         result = Array.newInstance((Class<?>) componentType, 0).getClass();
       } else {
         Class<?> componentClass = typeToClass(componentType);
-        result = Array.newInstance((Class<?>) componentClass, 0).getClass();
+        result = Array.newInstance(componentClass, 0).getClass();
       }
     }
     if (result == null) {

File: src/main/java/org/apache/ibatis/reflection/invoker/GetFieldInvoker.java
Patch:
@@ -16,7 +16,6 @@
 package org.apache.ibatis.reflection.invoker;
 
 import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
 
 import org.apache.ibatis.reflection.Reflector;
 
@@ -31,7 +30,7 @@ public GetFieldInvoker(Field field) {
   }
 
   @Override
-  public Object invoke(Object target, Object[] args) throws IllegalAccessException, InvocationTargetException {
+  public Object invoke(Object target, Object[] args) throws IllegalAccessException {
     try {
       return field.get(target);
     } catch (IllegalAccessException e) {

File: src/main/java/org/apache/ibatis/reflection/invoker/SetFieldInvoker.java
Patch:
@@ -16,7 +16,6 @@
 package org.apache.ibatis.reflection.invoker;
 
 import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
 
 import org.apache.ibatis.reflection.Reflector;
 
@@ -31,7 +30,7 @@ public SetFieldInvoker(Field field) {
   }
 
   @Override
-  public Object invoke(Object target, Object[] args) throws IllegalAccessException, InvocationTargetException {
+  public Object invoke(Object target, Object[] args) throws IllegalAccessException {
     try {
       field.set(target, args[0]);
     } catch (IllegalAccessException e) {

File: src/main/java/org/apache/ibatis/session/TransactionIsolationLevel.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@ public enum TransactionIsolationLevel {
 
   private final int level;
 
-  private TransactionIsolationLevel(int level) {
+  TransactionIsolationLevel(int level) {
     this.level = level;
   }
 

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSession.java
Patch:
@@ -74,7 +74,7 @@ public <T> T selectOne(String statement) {
   @Override
   public <T> T selectOne(String statement, Object parameter) {
     // Popular vote was to return null on 0 results and throw exception on too many.
-    List<T> list = this.<T>selectList(statement, parameter);
+    List<T> list = this.selectList(statement, parameter);
     if (list.size() == 1) {
       return list.get(0);
     } else if (list.size() > 1) {

File: src/main/java/org/apache/ibatis/annotations/Options.java
Patch:
@@ -35,7 +35,7 @@
    * The options for the {@link Options#flushCache()}.
    * The default is {@link FlushCachePolicy#DEFAULT}
    */
-  public enum FlushCachePolicy {
+  enum FlushCachePolicy {
     /** <code>false</code> for select statement; <code>true</code> for insert/update/delete statement. */
     DEFAULT,
     /** Flushes cache regardless of the statement type. */

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -192,9 +192,9 @@ private <K, V> Map<K, V> executeForMap(SqlSession sqlSession, Object[] args) {
     Object param = method.convertArgsToSqlCommandParam(args);
     if (method.hasRowBounds()) {
       RowBounds rowBounds = method.extractRowBounds(args);
-      result = sqlSession.<K, V>selectMap(command.getName(), param, method.getMapKey(), rowBounds);
+      result = sqlSession.selectMap(command.getName(), param, method.getMapKey(), rowBounds);
     } else {
-      result = sqlSession.<K, V>selectMap(command.getName(), param, method.getMapKey());
+      result = sqlSession.selectMap(command.getName(), param, method.getMapKey());
     }
     return result;
   }

File: src/main/java/org/apache/ibatis/cache/decorators/SerializedCache.java
Patch:
@@ -119,7 +119,7 @@ public CustomObjectInputStream(InputStream in) throws IOException {
     }
 
     @Override
-    protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
+    protected Class<?> resolveClass(ObjectStreamClass desc) throws ClassNotFoundException {
       return Resources.classForName(desc.getName());
     }
     

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.ibatis.transaction.Transaction;
 
 /**
- * @author Jeff Butler 
+ * @author Jeff Butler
  */
 public class BatchExecutor extends BaseExecutor {
 
@@ -90,7 +90,7 @@ public <E> List<E> doQuery(MappedStatement ms, Object parameterObject, RowBounds
       Connection connection = getConnection(ms.getStatementLog());
       stmt = handler.prepare(connection, transaction.getTimeout());
       handler.parameterize(stmt);
-      return handler.<E>query(stmt, resultHandler);
+      return handler.query(stmt, resultHandler);
     } finally {
       closeStatement(stmt);
     }
@@ -105,7 +105,7 @@ protected <E> Cursor<E> doQueryCursor(MappedStatement ms, Object parameter, RowB
     Statement stmt = handler.prepare(connection, transaction.getTimeout());
     stmt.closeOnCompletion();
     handler.parameterize(stmt);
-    return handler.<E>queryCursor(stmt);
+    return handler.queryCursor(stmt);
   }
 
   @Override

File: src/main/java/org/apache/ibatis/executor/CachingExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -100,13 +100,13 @@ public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds r
         @SuppressWarnings("unchecked")
         List<E> list = (List<E>) tcm.getObject(cache, key);
         if (list == null) {
-          list = delegate.<E> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
+          list = delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
           tcm.putObject(cache, key, list); // issue #578 and #116
         }
         return list;
       }
     }
-    return delegate.<E> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
+    return delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
   }
 
   @Override

File: src/main/java/org/apache/ibatis/executor/ReuseExecutor.java
Patch:
@@ -57,19 +57,19 @@ public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBo
     Configuration configuration = ms.getConfiguration();
     StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);
     Statement stmt = prepareStatement(handler, ms.getStatementLog());
-    return handler.<E>query(stmt, resultHandler);
+    return handler.query(stmt, resultHandler);
   }
 
   @Override
   protected <E> Cursor<E> doQueryCursor(MappedStatement ms, Object parameter, RowBounds rowBounds, BoundSql boundSql) throws SQLException {
     Configuration configuration = ms.getConfiguration();
     StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, null, boundSql);
     Statement stmt = prepareStatement(handler, ms.getStatementLog());
-    return handler.<E>queryCursor(stmt);
+    return handler.queryCursor(stmt);
   }
 
   @Override
-  public List<BatchResult> doFlushStatements(boolean isRollback) throws SQLException {
+  public List<BatchResult> doFlushStatements(boolean isRollback) {
     for (Statement stmt : statementMap.values()) {
       closeStatement(stmt);
     }

File: src/main/java/org/apache/ibatis/executor/SimpleExecutor.java
Patch:
@@ -60,7 +60,7 @@ public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBo
       Configuration configuration = ms.getConfiguration();
       StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);
       stmt = prepareStatement(handler, ms.getStatementLog());
-      return handler.<E>query(stmt, resultHandler);
+      return handler.query(stmt, resultHandler);
     } finally {
       closeStatement(stmt);
     }
@@ -72,11 +72,11 @@ protected <E> Cursor<E> doQueryCursor(MappedStatement ms, Object parameter, RowB
     StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, null, boundSql);
     Statement stmt = prepareStatement(handler, ms.getStatementLog());
     stmt.closeOnCompletion();
-    return handler.<E>queryCursor(stmt);
+    return handler.queryCursor(stmt);
   }
 
   @Override
-  public List<BatchResult> doFlushStatements(boolean isRollback) throws SQLException {
+  public List<BatchResult> doFlushStatements(boolean isRollback) {
     return Collections.emptyList();
   }
 

File: src/main/java/org/apache/ibatis/executor/loader/AbstractSerialStateHolder.java
Patch:
@@ -109,7 +109,7 @@ protected final Object readResolve() throws ObjectStreamException {
     }
 
     /* First run */
-    try (final ObjectInputStream in = new LookAheadObjectInputStream(new ByteArrayInputStream(this.userBeanBytes))) {
+    try (ObjectInputStream in = new LookAheadObjectInputStream(new ByteArrayInputStream(this.userBeanBytes))) {
       this.userBean = in.readObject();
       this.unloadedProperties = (Map<String, ResultLoaderMap.LoadPair>) in.readObject();
       this.objectFactory = (ObjectFactory) in.readObject();

File: src/main/java/org/apache/ibatis/executor/statement/CallableStatementHandler.java
Patch:
@@ -66,7 +66,7 @@ public void batch(Statement statement) throws SQLException {
   public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {
     CallableStatement cs = (CallableStatement) statement;
     cs.execute();
-    List<E> resultList = resultSetHandler.<E>handleResultSets(cs);
+    List<E> resultList = resultSetHandler.handleResultSets(cs);
     resultSetHandler.handleOutputParameters(cs);
     return resultList;
   }
@@ -75,7 +75,7 @@ public <E> List<E> query(Statement statement, ResultHandler resultHandler) throw
   public <E> Cursor<E> queryCursor(Statement statement) throws SQLException {
     CallableStatement cs = (CallableStatement) statement;
     cs.execute();
-    Cursor<E> resultList = resultSetHandler.<E>handleCursorResultSets(cs);
+    Cursor<E> resultList = resultSetHandler.handleCursorResultSets(cs);
     resultSetHandler.handleOutputParameters(cs);
     return resultList;
   }

File: src/main/java/org/apache/ibatis/executor/statement/PreparedStatementHandler.java
Patch:
@@ -62,14 +62,14 @@ public void batch(Statement statement) throws SQLException {
   public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {
     PreparedStatement ps = (PreparedStatement) statement;
     ps.execute();
-    return resultSetHandler.<E> handleResultSets(ps);
+    return resultSetHandler.handleResultSets(ps);
   }
 
   @Override
   public <E> Cursor<E> queryCursor(Statement statement) throws SQLException {
     PreparedStatement ps = (PreparedStatement) statement;
     ps.execute();
-    return resultSetHandler.<E> handleCursorResultSets(ps);
+    return resultSetHandler.handleCursorResultSets(ps);
   }
 
   @Override

File: src/main/java/org/apache/ibatis/executor/statement/SimpleStatementHandler.java
Patch:
@@ -72,14 +72,14 @@ public void batch(Statement statement) throws SQLException {
   public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {
     String sql = boundSql.getSql();
     statement.execute(sql);
-    return resultSetHandler.<E>handleResultSets(statement);
+    return resultSetHandler.handleResultSets(statement);
   }
 
   @Override
   public <E> Cursor<E> queryCursor(Statement statement) throws SQLException {
     String sql = boundSql.getSql();
     statement.execute(sql);
-    return resultSetHandler.<E>handleCursorResultSets(statement);
+    return resultSetHandler.handleCursorResultSets(statement);
   }
 
   @Override
@@ -92,7 +92,7 @@ protected Statement instantiateStatement(Connection connection) throws SQLExcept
   }
 
   @Override
-  public void parameterize(Statement statement) throws SQLException {
+  public void parameterize(Statement statement) {
     // N/A
   }
 

File: src/main/java/org/apache/ibatis/jdbc/Null.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -72,7 +72,7 @@ public enum Null {
   private TypeHandler<?> typeHandler;
   private JdbcType jdbcType;
 
-  private Null(TypeHandler<?> typeHandler, JdbcType jdbcType) {
+  Null(TypeHandler<?> typeHandler, JdbcType jdbcType) {
     this.typeHandler = typeHandler;
     this.jdbcType = jdbcType;
   }

File: src/main/java/org/apache/ibatis/reflection/Reflector.java
Patch:
@@ -229,7 +229,7 @@ private Class<?> typeToClass(Type src) {
         result = Array.newInstance((Class<?>) componentType, 0).getClass();
       } else {
         Class<?> componentClass = typeToClass(componentType);
-        result = Array.newInstance((Class<?>) componentClass, 0).getClass();
+        result = Array.newInstance(componentClass, 0).getClass();
       }
     }
     if (result == null) {

File: src/main/java/org/apache/ibatis/reflection/invoker/GetFieldInvoker.java
Patch:
@@ -16,7 +16,6 @@
 package org.apache.ibatis.reflection.invoker;
 
 import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
 
 import org.apache.ibatis.reflection.Reflector;
 
@@ -31,7 +30,7 @@ public GetFieldInvoker(Field field) {
   }
 
   @Override
-  public Object invoke(Object target, Object[] args) throws IllegalAccessException, InvocationTargetException {
+  public Object invoke(Object target, Object[] args) throws IllegalAccessException {
     try {
       return field.get(target);
     } catch (IllegalAccessException e) {

File: src/main/java/org/apache/ibatis/reflection/invoker/SetFieldInvoker.java
Patch:
@@ -16,7 +16,6 @@
 package org.apache.ibatis.reflection.invoker;
 
 import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
 
 import org.apache.ibatis.reflection.Reflector;
 
@@ -31,7 +30,7 @@ public SetFieldInvoker(Field field) {
   }
 
   @Override
-  public Object invoke(Object target, Object[] args) throws IllegalAccessException, InvocationTargetException {
+  public Object invoke(Object target, Object[] args) throws IllegalAccessException {
     try {
       field.set(target, args[0]);
     } catch (IllegalAccessException e) {

File: src/main/java/org/apache/ibatis/session/TransactionIsolationLevel.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@ public enum TransactionIsolationLevel {
 
   private final int level;
 
-  private TransactionIsolationLevel(int level) {
+  TransactionIsolationLevel(int level) {
     this.level = level;
   }
 

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSession.java
Patch:
@@ -74,7 +74,7 @@ public <T> T selectOne(String statement) {
   @Override
   public <T> T selectOne(String statement, Object parameter) {
     // Popular vote was to return null on 0 results and throw exception on too many.
-    List<T> list = this.<T>selectList(statement, parameter);
+    List<T> list = this.selectList(statement, parameter);
     if (list.size() == 1) {
       return list.get(0);
     } else if (list.size() > 1) {

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -282,9 +282,7 @@ protected abstract <E> Cursor<E> doQueryCursor(MappedStatement ms, Object parame
   protected void closeStatement(Statement statement) {
     if (statement != null) {
       try {
-        if (!statement.isClosed()) {
-          statement.close();
-        }
+        statement.close();
       } catch (SQLException e) {
         // ignore
       }

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -300,6 +300,8 @@ protected Class<?> inheritEnclosingType(XNode resultMapNode, Class<?> enclosingT
         MetaClass metaResultType = MetaClass.forClass(enclosingType, configuration.getReflectorFactory());
         return metaResultType.getSetterType(property);
       }
+    } else if ("case".equals(resultMapNode.getName()) && resultMapNode.getStringAttribute("resultMap") == null) {
+      return enclosingType;
     }
     return null;
   }

File: src/test/java/org/apache/ibatis/submitted/associationtest/Mapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/test/java/org/apache/ibatis/submitted/associationtest/Mapper.java
Patch:
@@ -21,5 +21,5 @@ public interface Mapper {
 
   List<Car> getCars();
   List<Car> getCars2();
-
+  List<Car> getCarsAndDetectAssociationType();
 }

File: src/test/java/org/apache/ibatis/binding/BindingTest.java
Patch:
@@ -383,6 +383,7 @@ public void shouldExecuteBoundSelectBlogUsingConstructorWithResultMapAndProperti
       assertEquals(101, author.getId());
       assertEquals("jim@ibatis.apache.org", author.getEmail());
       assertEquals("jim", author.getUsername());
+      assertEquals(Section.NEWS, author.getFavouriteSection());
       List<Post> posts = blog.getPosts();
       assertTrue("posts should not be empty", posts != null);
       assertEquals(2, posts.size());

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -103,6 +103,7 @@ protected <E> Cursor<E> doQueryCursor(MappedStatement ms, Object parameter, RowB
     StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, null, boundSql);
     Connection connection = getConnection(ms.getStatementLog());
     Statement stmt = handler.prepare(connection, transaction.getTimeout());
+    stmt.closeOnCompletion();
     handler.parameterize(stmt);
     return handler.<E>queryCursor(stmt);
   }

File: src/main/java/org/apache/ibatis/executor/SimpleExecutor.java
Patch:
@@ -71,6 +71,7 @@ protected <E> Cursor<E> doQueryCursor(MappedStatement ms, Object parameter, RowB
     Configuration configuration = ms.getConfiguration();
     StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, null, boundSql);
     Statement stmt = prepareStatement(handler, ms.getStatementLog());
+    stmt.closeOnCompletion();
     return handler.<E>queryCursor(stmt);
   }
 

File: src/main/java/org/apache/ibatis/annotations/Options.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -58,7 +58,7 @@ public enum FlushCachePolicy {
 
   boolean useGeneratedKeys() default false;
 
-  String keyProperty() default "id";
+  String keyProperty() default "";
 
   String keyColumn() default "";
   

File: src/main/java/org/apache/ibatis/binding/MapperProxyFactory.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -28,7 +28,7 @@
 public class MapperProxyFactory<T> {
 
   private final Class<T> mapperInterface;
-  private final Map<Method, MapperMethod> methodCache = new ConcurrentHashMap<Method, MapperMethod>();
+  private final Map<Method, MapperMethod> methodCache = new ConcurrentHashMap<>();
 
   public MapperProxyFactory(Class<T> mapperInterface) {
     this.mapperInterface = mapperInterface;
@@ -48,7 +48,7 @@ protected T newInstance(MapperProxy<T> mapperProxy) {
   }
 
   public T newInstance(SqlSession sqlSession) {
-    final MapperProxy<T> mapperProxy = new MapperProxy<T>(sqlSession, mapperInterface, methodCache);
+    final MapperProxy<T> mapperProxy = new MapperProxy<>(sqlSession, mapperInterface, methodCache);
     return newInstance(mapperProxy);
   }
 

File: src/main/java/org/apache/ibatis/binding/MapperRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@
 public class MapperRegistry {
 
   private final Configuration config;
-  private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<Class<?>, MapperProxyFactory<?>>();
+  private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
 
   public MapperRegistry(Configuration config) {
     this.config = config;
@@ -90,7 +90,7 @@ public Collection<Class<?>> getMappers() {
    * @since 3.2.2
    */
   public void addMappers(String packageName, Class<?> superType) {
-    ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<Class<?>>();
+    ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
     resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
     Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
     for (Class<?> mapperClass : mapperSet) {

File: src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,7 +48,7 @@ public SqlSource parse(String originalSql, Class<?> parameterType, Map<String, O
 
   private static class ParameterMappingTokenHandler extends BaseBuilder implements TokenHandler {
 
-    private List<ParameterMapping> parameterMappings = new ArrayList<ParameterMapping>();
+    private List<ParameterMapping> parameterMappings = new ArrayList<>();
     private Class<?> parameterType;
     private MetaObject metaParameters;
 

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperEntityResolver.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -40,7 +40,7 @@ public class XMLMapperEntityResolver implements EntityResolver {
   private static final String MYBATIS_CONFIG_DTD = "org/apache/ibatis/builder/xml/mybatis-3-config.dtd";
   private static final String MYBATIS_MAPPER_DTD = "org/apache/ibatis/builder/xml/mybatis-3-mapper.dtd";
 
-  /*
+  /**
    * Converts a public DTD into a local one
    * 
    * @param publicId The public id that is what comes after "PUBLIC"

File: src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -195,7 +195,7 @@ private boolean databaseIdMatchesCurrent(String id, String databaseId, String re
   }
 
   private LanguageDriver getLanguageDriver(String lang) {
-    Class<?> langClass = null;
+    Class<? extends LanguageDriver> langClass = null;
     if (lang != null) {
       langClass = resolveClass(lang);
     }

File: src/main/java/org/apache/ibatis/cache/decorators/BlockingCache.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -42,7 +42,7 @@ public class BlockingCache implements Cache {
 
   public BlockingCache(Cache delegate) {
     this.delegate = delegate;
-    this.locks = new ConcurrentHashMap<Object, ReentrantLock>();
+    this.locks = new ConcurrentHashMap<>();
   }
 
   @Override

File: src/main/java/org/apache/ibatis/cache/decorators/FifoCache.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@ public class FifoCache implements Cache {
 
   public FifoCache(Cache delegate) {
     this.delegate = delegate;
-    this.keyList = new LinkedList<Object>();
+    this.keyList = new LinkedList<>();
     this.size = 1024;
   }
 

File: src/main/java/org/apache/ibatis/cache/decorators/SoftCache.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -38,8 +38,8 @@ public class SoftCache implements Cache {
   public SoftCache(Cache delegate) {
     this.delegate = delegate;
     this.numberOfHardLinks = 256;
-    this.hardLinksToAvoidGarbageCollection = new LinkedList<Object>();
-    this.queueOfGarbageCollectedEntries = new ReferenceQueue<Object>();
+    this.hardLinksToAvoidGarbageCollection = new LinkedList<>();
+    this.queueOfGarbageCollectedEntries = new ReferenceQueue<>();
   }
 
   @Override

File: src/main/java/org/apache/ibatis/cache/decorators/TransactionalCache.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,8 +48,8 @@ public class TransactionalCache implements Cache {
   public TransactionalCache(Cache delegate) {
     this.delegate = delegate;
     this.clearOnCommit = false;
-    this.entriesToAddOnCommit = new HashMap<Object, Object>();
-    this.entriesMissedInCache = new HashSet<Object>();
+    this.entriesToAddOnCommit = new HashMap<>();
+    this.entriesMissedInCache = new HashSet<>();
   }
 
   @Override

File: src/main/java/org/apache/ibatis/cache/decorators/WeakCache.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -38,8 +38,8 @@ public class WeakCache implements Cache {
   public WeakCache(Cache delegate) {
     this.delegate = delegate;
     this.numberOfHardLinks = 256;
-    this.hardLinksToAvoidGarbageCollection = new LinkedList<Object>();
-    this.queueOfGarbageCollectedEntries = new ReferenceQueue<Object>();
+    this.hardLinksToAvoidGarbageCollection = new LinkedList<>();
+    this.queueOfGarbageCollectedEntries = new ReferenceQueue<>();
   }
 
   @Override

File: src/main/java/org/apache/ibatis/cache/impl/PerpetualCache.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@ public class PerpetualCache implements Cache {
 
   private final String id;
 
-  private Map<Object, Object> cache = new HashMap<Object, Object>();
+  private Map<Object, Object> cache = new HashMap<>();
 
   public PerpetualCache(String id) {
     this.id = id;

File: src/main/java/org/apache/ibatis/datasource/pooled/PoolState.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,8 +25,8 @@ public class PoolState {
 
   protected PooledDataSource dataSource;
 
-  protected final List<PooledConnection> idleConnections = new ArrayList<PooledConnection>();
-  protected final List<PooledConnection> activeConnections = new ArrayList<PooledConnection>();
+  protected final List<PooledConnection> idleConnections = new ArrayList<>();
+  protected final List<PooledConnection> activeConnections = new ArrayList<>();
   protected long requestCount = 0;
   protected long accumulatedRequestTime = 0;
   protected long accumulatedCheckoutTime = 0;

File: src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -39,7 +39,7 @@ public class UnpooledDataSource implements DataSource {
   
   private ClassLoader driverClassLoader;
   private Properties driverProperties;
-  private static Map<String, Driver> registeredDrivers = new ConcurrentHashMap<String, Driver>();
+  private static Map<String, Driver> registeredDrivers = new ConcurrentHashMap<>();
 
   private String driver;
   private String url;

File: src/main/java/org/apache/ibatis/executor/BatchResult.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -35,7 +35,7 @@ public BatchResult(MappedStatement mappedStatement, String sql) {
     super();
     this.mappedStatement = mappedStatement;
     this.sql = sql;
-    this.parameterObjects = new ArrayList<Object>();
+    this.parameterObjects = new ArrayList<>();
   }
 
   public BatchResult(MappedStatement mappedStatement, String sql, Object parameterObject) {

File: src/main/java/org/apache/ibatis/executor/CachingExecutor.java
Patch:
@@ -96,7 +96,7 @@ public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds r
     if (cache != null) {
       flushCacheIfRequired(ms);
       if (ms.isUseCache() && resultHandler == null) {
-        ensureNoOutParams(ms, parameterObject, boundSql);
+        ensureNoOutParams(ms, boundSql);
         @SuppressWarnings("unchecked")
         List<E> list = (List<E>) tcm.getObject(cache, key);
         if (list == null) {
@@ -131,7 +131,7 @@ public void rollback(boolean required) throws SQLException {
     }
   }
 
-  private void ensureNoOutParams(MappedStatement ms, Object parameter, BoundSql boundSql) {
+  private void ensureNoOutParams(MappedStatement ms, BoundSql boundSql) {
     if (ms.getStatementType() == StatementType.CALLABLE) {
       for (ParameterMapping parameterMapping : boundSql.getParameterMappings()) {
         if (parameterMapping.getMode() != ParameterMode.IN) {

File: src/main/java/org/apache/ibatis/executor/ReuseExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -38,7 +38,7 @@
  */
 public class ReuseExecutor extends BaseExecutor {
 
-  private final Map<String, Statement> statementMap = new HashMap<String, Statement>();
+  private final Map<String, Statement> statementMap = new HashMap<>();
 
   public ReuseExecutor(Configuration configuration, Transaction transaction) {
     super(configuration, transaction);

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -47,7 +47,7 @@
  */
 public class ResultLoaderMap {
 
-  private final Map<String, LoadPair> loaderMap = new HashMap<String, LoadPair>();
+  private final Map<String, LoadPair> loaderMap = new HashMap<>();
 
   public void addLoader(String property, MetaObject metaResultObject, ResultLoader resultLoader) {
     String upperFirst = getUppercaseFirstProperty(property);
@@ -60,7 +60,7 @@ public void addLoader(String property, MetaObject metaResultObject, ResultLoader
   }
 
   public final Map<String, LoadPair> getProperties() {
-    return new HashMap<String, LoadPair>(this.loaderMap);
+    return new HashMap<>(this.loaderMap);
   }
 
   public Set<String> getPropertyNames() {

File: src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java
Patch:
@@ -185,7 +185,7 @@ public static Object createProxy(Object target, Map<String, ResultLoaderMap.Load
     @Override
     public Object intercept(Object enhanced, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
       final Object o = super.invoke(enhanced, method, args);
-      return (o instanceof AbstractSerialStateHolder) ? o : methodProxy.invokeSuper(o, args);
+      return o instanceof AbstractSerialStateHolder ? o : methodProxy.invokeSuper(o, args);
     }
 
     @Override

File: src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java
Patch:
@@ -187,7 +187,7 @@ public static Object createProxy(Object target, Map<String, ResultLoaderMap.Load
     @Override
     public Object invoke(Object enhanced, Method method, Method methodProxy, Object[] args) throws Throwable {
       final Object o = super.invoke(enhanced, method, args);
-      return (o instanceof AbstractSerialStateHolder) ? o : methodProxy.invoke(o, args);
+      return o instanceof AbstractSerialStateHolder ? o : methodProxy.invoke(o, args);
     }
 
     @Override

File: src/main/java/org/apache/ibatis/executor/result/DefaultResultHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,7 +30,7 @@ public class DefaultResultHandler implements ResultHandler<Object> {
   private final List<Object> list;
 
   public DefaultResultHandler() {
-    list = new ArrayList<Object>();
+    list = new ArrayList<>();
   }
 
   @SuppressWarnings("unchecked")

File: src/main/java/org/apache/ibatis/io/JBoss6VFS.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -56,7 +56,7 @@ String getPathNameRelativeTo(VirtualFile parent) {
 
     List<VirtualFile> getChildren() throws IOException {
       List<?> objects = invoke(getChildrenRecursively, virtualFile);
-      List<VirtualFile> children = new ArrayList<VirtualFile>(objects.size());
+      List<VirtualFile> children = new ArrayList<>(objects.size());
       for (Object object : objects) {
         children.add(new VirtualFile(object));
       }
@@ -166,7 +166,7 @@ public List<String> list(URL url, String path) throws IOException {
     }
 
     List<VirtualFile> children = directory.getChildren();
-    List<String> names = new ArrayList<String>(children.size());
+    List<String> names = new ArrayList<>(children.size());
     for (VirtualFile vf : children) {
       names.add(path + vf.getPathNameRelativeTo(directory));
     }

File: src/main/java/org/apache/ibatis/io/ResolverUtil.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -66,7 +66,7 @@ public class ResolverUtil<T> {
    * A simple interface that specifies how to test classes to determine if they
    * are to be included in the results produced by the ResolverUtil.
    */
-  public static interface Test {
+  public interface Test {
     /**
      * Will be called repeatedly with candidate classes. Must return True if a class
      * is to be included in the results, false otherwise.
@@ -123,7 +123,7 @@ public String toString() {
   }
 
   /** The set of matches being accumulated. */
-  private Set<Class<? extends T>> matches = new HashSet<Class<? extends T>>();
+  private Set<Class<? extends T>> matches = new HashSet<>();
 
   /**
    * The ClassLoader to use when looking for classes. If null then the ClassLoader returned

File: src/main/java/org/apache/ibatis/jdbc/SelectBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
 @Deprecated
 public class SelectBuilder {
 
-  private static final ThreadLocal<SQL> localSQL = new ThreadLocal<SQL>();
+  private static final ThreadLocal<SQL> localSQL = new ThreadLocal<>();
 
   static {
     BEGIN();

File: src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -22,7 +22,7 @@
  */
 public class SqlBuilder {
 
-  private static final ThreadLocal<SQL> localSQL = new ThreadLocal<SQL>();
+  private static final ThreadLocal<SQL> localSQL = new ThreadLocal<>();
 
   static {
     BEGIN();

File: src/main/java/org/apache/ibatis/logging/jdbc/ConnectionLogger.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -74,7 +74,7 @@ public Object invoke(Object proxy, Method method, Object[] params)
     }
   }
 
-  /*
+  /**
    * Creates a logging version of a connection
    *
    * @param conn - the original connection
@@ -86,7 +86,7 @@ public static Connection newInstance(Connection conn, Log statementLog, int quer
     return (Connection) Proxy.newProxyInstance(cl, new Class[]{Connection.class}, handler);
   }
 
-  /*
+  /**
    * return the wrapped connection
    *
    * @return the connection

File: src/main/java/org/apache/ibatis/logging/jdbc/StatementLogger.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -67,7 +67,7 @@ public Object invoke(Object proxy, Method method, Object[] params) throws Throwa
     }
   }
 
-  /*
+  /**
    * Creates a logging version of a Statement
    *
    * @param stmt - the statement
@@ -79,7 +79,7 @@ public static Statement newInstance(Statement stmt, Log statementLog, int queryS
     return (Statement) Proxy.newProxyInstance(cl, new Class[]{Statement.class}, handler);
   }
 
-  /*
+  /**
    * return the wrapped statement
    *
    * @return the statement

File: src/main/java/org/apache/ibatis/mapping/CacheBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -49,7 +49,7 @@ public class CacheBuilder {
 
   public CacheBuilder(String id) {
     this.id = id;
-    this.decorators = new ArrayList<Class<? extends Cache>>();
+    this.decorators = new ArrayList<>();
   }
 
   public CacheBuilder implementation(Class<? extends Cache> implementation) {

File: src/main/java/org/apache/ibatis/mapping/ResultMapping.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -67,8 +67,8 @@ public Builder(Configuration configuration, String property, String column, Clas
     public Builder(Configuration configuration, String property) {
       resultMapping.configuration = configuration;
       resultMapping.property = property;
-      resultMapping.flags = new ArrayList<ResultFlag>();
-      resultMapping.composites = new ArrayList<ResultMapping>();
+      resultMapping.flags = new ArrayList<>();
+      resultMapping.composites = new ArrayList<>();
       resultMapping.lazy = configuration.isLazyLoadingEnabled();
     }
 

File: src/main/java/org/apache/ibatis/parsing/XNode.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -288,7 +288,7 @@ public Float getFloatAttribute(String name, Float def) {
   }
 
   public List<XNode> getChildren() {
-    List<XNode> children = new ArrayList<XNode>();
+    List<XNode> children = new ArrayList<>();
     NodeList nodeList = node.getChildNodes();
     if (nodeList != null) {
       for (int i = 0, n = nodeList.getLength(); i < n; i++) {

File: src/main/java/org/apache/ibatis/parsing/XPathParser.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -197,7 +197,7 @@ public List<XNode> evalNodes(String expression) {
   }
 
   public List<XNode> evalNodes(Object root, String expression) {
-    List<XNode> xnodes = new ArrayList<XNode>();
+    List<XNode> xnodes = new ArrayList<>();
     NodeList nodes = (NodeList) evaluate(expression, root, XPathConstants.NODESET);
     for (int i = 0; i < nodes.getLength(); i++) {
       xnodes.add(new XNode(this, nodes.item(i), variables));

File: src/main/java/org/apache/ibatis/plugin/InterceptorChain.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,7 +24,7 @@
  */
 public class InterceptorChain {
 
-  private final List<Interceptor> interceptors = new ArrayList<Interceptor>();
+  private final List<Interceptor> interceptors = new ArrayList<>();
 
   public Object pluginAll(Object target) {
     for (Interceptor interceptor : interceptors) {

File: src/main/java/org/apache/ibatis/reflection/MetaClass.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -126,8 +126,7 @@ private Type getGenericGetterType(String propertyName) {
         Field field = (Field) _field.get(invoker);
         return TypeParameterResolver.resolveFieldType(field, reflector.getType());
       }
-    } catch (NoSuchFieldException e) {
-    } catch (IllegalAccessException e) {
+    } catch (NoSuchFieldException | IllegalAccessException ignored) {
     }
     return null;
   }

File: src/main/java/org/apache/ibatis/reflection/MetaObject.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -128,7 +128,7 @@ public void setValue(String name, Object value) {
     if (prop.hasNext()) {
       MetaObject metaValue = metaObjectForProperty(prop.getIndexedName());
       if (metaValue == SystemMetaObject.NULL_META_OBJECT) {
-        if (value == null && prop.getChildren() != null) {
+        if (value == null) {
           // don't instantiate child path if value is null
           return;
         } else {

File: src/main/java/org/apache/ibatis/reflection/factory/DefaultObjectFactory.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -55,7 +55,7 @@ public void setProperties(Properties properties) {
     // no props for default
   }
 
-  <T> T instantiateClass(Class<T> type, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
+  private  <T> T instantiateClass(Class<T> type, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
     try {
       Constructor<T> constructor;
       if (constructorArgTypes == null || constructorArgs == null) {

File: src/main/java/org/apache/ibatis/reflection/wrapper/MapWrapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -135,7 +135,7 @@ public boolean hasGetter(String name) {
 
   @Override
   public MetaObject instantiatePropertyValue(String name, PropertyTokenizer prop, ObjectFactory objectFactory) {
-    HashMap<String, Object> map = new HashMap<String, Object>();
+    HashMap<String, Object> map = new HashMap<>();
     set(prop, map);
     return MetaObject.forObject(map, metaObject.getObjectFactory(), metaObject.getObjectWrapperFactory(), metaObject.getReflectorFactory());
   }

File: src/main/java/org/apache/ibatis/scripting/xmltags/ExpressionEvaluator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@ public boolean evaluateBoolean(String expression, Object parameterObject) {
       return (Boolean) value;
     }
     if (value instanceof Number) {
-        return !new BigDecimal(String.valueOf(value)).equals(BigDecimal.ZERO);
+      return new BigDecimal(String.valueOf(value)).compareTo(BigDecimal.ZERO) != 0;
     }
     return value != null;
   }
@@ -52,7 +52,7 @@ public Iterable<?> evaluateIterable(String expression, Object parameterObject) {
         // a ClassCastException (issue 209).  Do the work manually
         // Curse primitives! :) (JGB)
         int size = Array.getLength(value);
-        List<Object> answer = new ArrayList<Object>();
+        List<Object> answer = new ArrayList<>();
         for (int i = 0; i < size; i++) {
             Object o = Array.get(value, i);
             answer.add(o);

File: src/main/java/org/apache/ibatis/scripting/xmltags/TrimSqlNode.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -60,7 +60,7 @@ public boolean apply(DynamicContext context) {
   private static List<String> parseOverrides(String overrides) {
     if (overrides != null) {
       final StringTokenizer parser = new StringTokenizer(overrides, "|", false);
-      final List<String> list = new ArrayList<String>(parser.countTokens());
+      final List<String> list = new ArrayList<>(parser.countTokens());
       while (parser.hasMoreTokens()) {
         list.add(parser.nextToken().toUpperCase(Locale.ENGLISH));
       }

File: src/main/java/org/apache/ibatis/type/DateTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,7 +30,7 @@ public class DateTypeHandler extends BaseTypeHandler<Date> {
   @Override
   public void setNonNullParameter(PreparedStatement ps, int i, Date parameter, JdbcType jdbcType)
       throws SQLException {
-    ps.setTimestamp(i, new Timestamp((parameter).getTime()));
+    ps.setTimestamp(i, new Timestamp(parameter.getTime()));
   }
 
   @Override

File: src/main/java/org/apache/ibatis/type/JdbcType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -68,7 +68,7 @@ public enum JdbcType {
   DATETIMEOFFSET(-155); // SQL Server 2008
 
   public final int TYPE_CODE;
-  private static Map<Integer,JdbcType> codeLookup = new HashMap<Integer,JdbcType>();
+  private static Map<Integer,JdbcType> codeLookup = new HashMap<>();
 
   static {
     for (JdbcType type : JdbcType.values()) {

File: src/main/java/org/apache/ibatis/type/SimpleTypeRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
  */
 public class SimpleTypeRegistry {
 
-  private static final Set<Class<?>> SIMPLE_TYPE_SET = new HashSet<Class<?>>();
+  private static final Set<Class<?>> SIMPLE_TYPE_SET = new HashSet<>();
 
   static {
     SIMPLE_TYPE_SET.add(String.class);

File: src/main/java/org/apache/ibatis/type/TypeAliasRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -37,7 +37,7 @@
  */
 public class TypeAliasRegistry {
 
-  private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<String, Class<?>>();
+  private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
 
   public TypeAliasRegistry() {
     registerAlias("string", String.class);
@@ -126,7 +126,7 @@ public void registerAliases(String packageName){
   }
 
   public void registerAliases(String packageName, Class<?> superType){
-    ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<Class<?>>();
+    ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
     resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
     Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
     for(Class<?> type : typeSet){

File: src/main/java/org/apache/ibatis/type/UnknownTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -85,7 +85,7 @@ private TypeHandler<? extends Object> resolveTypeHandler(Object parameter, JdbcT
   private TypeHandler<?> resolveTypeHandler(ResultSet rs, String column) {
     try {
       Map<String,Integer> columnIndexLookup;
-      columnIndexLookup = new HashMap<String,Integer>();
+      columnIndexLookup = new HashMap<>();
       ResultSetMetaData rsmd = rs.getMetaData();
       int count = rsmd.getColumnCount();
       for (int i=1; i <= count; i++) {
@@ -106,7 +106,7 @@ private TypeHandler<?> resolveTypeHandler(ResultSet rs, String column) {
     }
   }
 
-  private TypeHandler<?> resolveTypeHandler(ResultSetMetaData rsmd, Integer columnIndex) throws SQLException {
+  private TypeHandler<?> resolveTypeHandler(ResultSetMetaData rsmd, Integer columnIndex) {
     TypeHandler<?> handler = null;
     JdbcType jdbcType = safeGetJdbcTypeForColumn(rsmd, columnIndex);
     Class<?> javaType = safeGetClassForColumn(rsmd, columnIndex);

File: src/test/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -88,7 +88,6 @@ public void shouldRetainColumnNameCase() throws Exception {
     when(rs.getType()).thenReturn(ResultSet.TYPE_FORWARD_ONLY);
     when(rs.next()).thenReturn(true).thenReturn(false);
     when(rs.getInt("CoLuMn1")).thenReturn(100);
-    when(rs.wasNull()).thenReturn(false);
     when(rsmd.getColumnCount()).thenReturn(1);
     when(rsmd.getColumnLabel(1)).thenReturn("CoLuMn1");
     when(rsmd.getColumnType(1)).thenReturn(Types.INTEGER);

File: src/test/java/org/apache/ibatis/scripting/LanguageDriverRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -56,7 +56,7 @@ public void registerByTypeSameType() {
 
   @Test
   public void registerByTypeNull() {
-    when(registry).register((Class<?>) null);
+    when(registry).register((Class<? extends LanguageDriver>) null);
     then(caughtException()).isInstanceOf(IllegalArgumentException.class)
       .hasMessage("null is not a valid Language Driver");
   }

File: src/test/java/org/apache/ibatis/submitted/default_method/Mapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.usesjava8.default_method;
+package org.apache.ibatis.submitted.default_method;
 
 import org.apache.ibatis.annotations.Param;
 import org.apache.ibatis.annotations.Select;

File: src/test/java/org/apache/ibatis/submitted/default_method/PackageMapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.usesjava8.default_method;
+package org.apache.ibatis.submitted.default_method;
 
 import org.apache.ibatis.annotations.Select;
 

File: src/test/java/org/apache/ibatis/submitted/default_method/User.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.usesjava8.default_method;
+package org.apache.ibatis.submitted.default_method;
 
 public class User {
 

File: src/main/java/org/apache/ibatis/annotations/Options.java
Patch:
@@ -48,7 +48,7 @@ public enum FlushCachePolicy {
 
   FlushCachePolicy flushCache() default FlushCachePolicy.DEFAULT;
 
-  ResultSetType resultSetType() default ResultSetType.FORWARD_ONLY;
+  ResultSetType resultSetType() default ResultSetType.DEFAULT;
 
   StatementType statementType() default StatementType.PREPARED;
 

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -297,7 +297,7 @@ void parseStatement(Method method) {
       Integer fetchSize = null;
       Integer timeout = null;
       StatementType statementType = StatementType.PREPARED;
-      ResultSetType resultSetType = ResultSetType.FORWARD_ONLY;
+      ResultSetType resultSetType = null;
       SqlCommandType sqlCommandType = getSqlCommandType(method);
       boolean isSelect = sqlCommandType == SqlCommandType.SELECT;
       boolean flushCache = !isSelect;

File: src/main/java/org/apache/ibatis/mapping/MappedStatement.java
Patch:
@@ -69,6 +69,7 @@ public Builder(Configuration configuration, String id, SqlSource sqlSource, SqlC
       mappedStatement.id = id;
       mappedStatement.sqlSource = sqlSource;
       mappedStatement.statementType = StatementType.PREPARED;
+      mappedStatement.resultSetType = ResultSetType.DEFAULT;
       mappedStatement.parameterMap = new ParameterMap.Builder(configuration, "defaultParameterMap", null, new ArrayList<>()).build();
       mappedStatement.resultMaps = new ArrayList<>();
       mappedStatement.sqlCommandType = sqlCommandType;
@@ -119,7 +120,7 @@ public Builder statementType(StatementType statementType) {
     }
 
     public Builder resultSetType(ResultSetType resultSetType) {
-      mappedStatement.resultSetType = resultSetType;
+      mappedStatement.resultSetType = resultSetType == null ? ResultSetType.DEFAULT : resultSetType;
       return this;
     }
 

File: src/main/java/org/apache/ibatis/reflection/MetaObject.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/annotations/Options.java
Patch:
@@ -48,7 +48,7 @@ public enum FlushCachePolicy {
 
   FlushCachePolicy flushCache() default FlushCachePolicy.DEFAULT;
 
-  ResultSetType resultSetType() default ResultSetType.FORWARD_ONLY;
+  ResultSetType resultSetType() default ResultSetType.DEFAULT;
 
   StatementType statementType() default StatementType.PREPARED;
 

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -297,7 +297,7 @@ void parseStatement(Method method) {
       Integer fetchSize = null;
       Integer timeout = null;
       StatementType statementType = StatementType.PREPARED;
-      ResultSetType resultSetType = ResultSetType.FORWARD_ONLY;
+      ResultSetType resultSetType = ResultSetType.DEFAULT;
       SqlCommandType sqlCommandType = getSqlCommandType(method);
       boolean isSelect = sqlCommandType == SqlCommandType.SELECT;
       boolean flushCache = !isSelect;

File: src/main/java/org/apache/ibatis/executor/statement/PreparedStatementHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -28,6 +28,7 @@
 import org.apache.ibatis.executor.keygen.KeyGenerator;
 import org.apache.ibatis.mapping.BoundSql;
 import org.apache.ibatis.mapping.MappedStatement;
+import org.apache.ibatis.mapping.ResultSetType;
 import org.apache.ibatis.session.ResultHandler;
 import org.apache.ibatis.session.RowBounds;
 
@@ -81,7 +82,7 @@ protected Statement instantiateStatement(Connection connection) throws SQLExcept
       } else {
         return connection.prepareStatement(sql, keyColumnNames);
       }
-    } else if (mappedStatement.getResultSetType() != null) {
+    } else if (mappedStatement.getResultSetType() != null && mappedStatement.getResultSetType() != ResultSetType.DEFAULT) {
       return connection.prepareStatement(sql, mappedStatement.getResultSetType().getValue(), ResultSet.CONCUR_READ_ONLY);
     } else {
       return connection.prepareStatement(sql);

File: src/main/java/org/apache/ibatis/executor/statement/SimpleStatementHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -28,6 +28,7 @@
 import org.apache.ibatis.executor.keygen.SelectKeyGenerator;
 import org.apache.ibatis.mapping.BoundSql;
 import org.apache.ibatis.mapping.MappedStatement;
+import org.apache.ibatis.mapping.ResultSetType;
 import org.apache.ibatis.session.ResultHandler;
 import org.apache.ibatis.session.RowBounds;
 
@@ -83,7 +84,7 @@ public <E> Cursor<E> queryCursor(Statement statement) throws SQLException {
 
   @Override
   protected Statement instantiateStatement(Connection connection) throws SQLException {
-    if (mappedStatement.getResultSetType() != null) {
+    if (mappedStatement.getResultSetType() != null && mappedStatement.getResultSetType() != ResultSetType.DEFAULT) {
       return connection.createStatement(mappedStatement.getResultSetType().getValue(), ResultSet.CONCUR_READ_ONLY);
     } else {
       return connection.createStatement();

File: src/main/java/org/apache/ibatis/reflection/MetaObject.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java
Patch:
@@ -421,10 +421,10 @@ private PooledConnection popConnection(String username, String password) throws
                 } catch (SQLException e) {
                   /*
                      Just log a message for debug and continue to execute the following
-                     statement like nothing happend.
+                     statement like nothing happened.
                      Wrap the bad connection with a new PooledConnection, this will help
-                     to not intterupt current executing thread and give current thread a
-                     chance to join the next competion for another valid/good database
+                     to not interrupt current executing thread and give current thread a
+                     chance to join the next competition for another valid/good database
                      connection. At the end of this loop, bad {@link @conn} will be set as null.
                    */
                   log.debug("Bad connection. Could not roll back");

File: src/main/java/org/apache/ibatis/logging/jdbc/PreparedStatementLogger.java
Patch:
@@ -86,7 +86,8 @@ public Object invoke(Object proxy, Method method, Object[] params) throws Throwa
    * Creates a logging version of a PreparedStatement
    *
    * @param stmt - the statement
-   * @param sql  - the sql statement
+   * @param statementLog - the statement log
+   * @param queryStack - the query stack
    * @return - the proxy
    */
   public static PreparedStatement newInstance(PreparedStatement stmt, Log statementLog, int queryStack) {

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java
Patch:
@@ -421,10 +421,10 @@ private PooledConnection popConnection(String username, String password) throws
                 } catch (SQLException e) {
                   /*
                      Just log a message for debug and continue to execute the following
-                     statement like nothing happend.
+                     statement like nothing happened.
                      Wrap the bad connection with a new PooledConnection, this will help
-                     to not intterupt current executing thread and give current thread a
-                     chance to join the next competion for another valid/good database
+                     to not interrupt current executing thread and give current thread a
+                     chance to join the next competition for another valid/good database
                      connection. At the end of this loop, bad {@link @conn} will be set as null.
                    */
                   log.debug("Bad connection. Could not roll back");

File: src/main/java/org/apache/ibatis/logging/jdbc/PreparedStatementLogger.java
Patch:
@@ -86,7 +86,8 @@ public Object invoke(Object proxy, Method method, Object[] params) throws Throwa
    * Creates a logging version of a PreparedStatement
    *
    * @param stmt - the statement
-   * @param sql  - the sql statement
+   * @param statementLog - the statement log
+   * @param queryStack - the query stack
    * @return - the proxy
    */
   public static PreparedStatement newInstance(PreparedStatement stmt, Log statementLog, int queryStack) {

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperEntityResolver.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -40,7 +40,7 @@ public class XMLMapperEntityResolver implements EntityResolver {
   private static final String MYBATIS_CONFIG_DTD = "org/apache/ibatis/builder/xml/mybatis-3-config.dtd";
   private static final String MYBATIS_MAPPER_DTD = "org/apache/ibatis/builder/xml/mybatis-3-mapper.dtd";
 
-  /*
+  /**
    * Converts a public DTD into a local one
    * 
    * @param publicId The public id that is what comes after "PUBLIC"

File: src/main/java/org/apache/ibatis/logging/jdbc/ConnectionLogger.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -74,7 +74,7 @@ public Object invoke(Object proxy, Method method, Object[] params)
     }
   }
 
-  /*
+  /**
    * Creates a logging version of a connection
    *
    * @param conn - the original connection
@@ -86,7 +86,7 @@ public static Connection newInstance(Connection conn, Log statementLog, int quer
     return (Connection) Proxy.newProxyInstance(cl, new Class[]{Connection.class}, handler);
   }
 
-  /*
+  /**
    * return the wrapped connection
    *
    * @return the connection

File: src/main/java/org/apache/ibatis/logging/jdbc/PreparedStatementLogger.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -82,7 +82,7 @@ public Object invoke(Object proxy, Method method, Object[] params) throws Throwa
     }
   }
 
-  /*
+  /**
    * Creates a logging version of a PreparedStatement
    *
    * @param stmt - the statement
@@ -95,7 +95,7 @@ public static PreparedStatement newInstance(PreparedStatement stmt, Log statemen
     return (PreparedStatement) Proxy.newProxyInstance(cl, new Class[]{PreparedStatement.class, CallableStatement.class}, handler);
   }
 
-  /*
+  /**
    * Return the wrapped prepared statement
    *
    * @return the PreparedStatement

File: src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java
Patch:
@@ -128,7 +128,7 @@ private void printColumnValues(int columnCount) {
     trace(row.toString(), false);
   }
 
-  /*
+  /**
    * Creates a logging version of a ResultSet
    *
    * @param rs - the ResultSet to proxy
@@ -140,7 +140,7 @@ public static ResultSet newInstance(ResultSet rs, Log statementLog, int querySta
     return (ResultSet) Proxy.newProxyInstance(cl, new Class[]{ResultSet.class}, handler);
   }
 
-  /*
+  /**
    * Get the wrapped result set
    *
    * @return the resultSet

File: src/main/java/org/apache/ibatis/logging/jdbc/StatementLogger.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -67,7 +67,7 @@ public Object invoke(Object proxy, Method method, Object[] params) throws Throwa
     }
   }
 
-  /*
+  /**
    * Creates a logging version of a Statement
    *
    * @param stmt - the statement
@@ -79,7 +79,7 @@ public static Statement newInstance(Statement stmt, Log statementLog, int queryS
     return (Statement) Proxy.newProxyInstance(cl, new Class[]{Statement.class}, handler);
   }
 
-  /*
+  /**
    * return the wrapped statement
    *
    * @return the statement

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperEntityResolver.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -40,7 +40,7 @@ public class XMLMapperEntityResolver implements EntityResolver {
   private static final String MYBATIS_CONFIG_DTD = "org/apache/ibatis/builder/xml/mybatis-3-config.dtd";
   private static final String MYBATIS_MAPPER_DTD = "org/apache/ibatis/builder/xml/mybatis-3-mapper.dtd";
 
-  /*
+  /**
    * Converts a public DTD into a local one
    * 
    * @param publicId The public id that is what comes after "PUBLIC"

File: src/main/java/org/apache/ibatis/io/ClassLoaderWrapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/logging/jdbc/ConnectionLogger.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -74,7 +74,7 @@ public Object invoke(Object proxy, Method method, Object[] params)
     }
   }
 
-  /*
+  /**
    * Creates a logging version of a connection
    *
    * @param conn - the original connection
@@ -86,7 +86,7 @@ public static Connection newInstance(Connection conn, Log statementLog, int quer
     return (Connection) Proxy.newProxyInstance(cl, new Class[]{Connection.class}, handler);
   }
 
-  /*
+  /**
    * return the wrapped connection
    *
    * @return the connection

File: src/main/java/org/apache/ibatis/logging/jdbc/PreparedStatementLogger.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -82,7 +82,7 @@ public Object invoke(Object proxy, Method method, Object[] params) throws Throwa
     }
   }
 
-  /*
+  /**
    * Creates a logging version of a PreparedStatement
    *
    * @param stmt - the statement
@@ -95,7 +95,7 @@ public static PreparedStatement newInstance(PreparedStatement stmt, Log statemen
     return (PreparedStatement) Proxy.newProxyInstance(cl, new Class[]{PreparedStatement.class, CallableStatement.class}, handler);
   }
 
-  /*
+  /**
    * Return the wrapped prepared statement
    *
    * @return the PreparedStatement

File: src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java
Patch:
@@ -128,7 +128,7 @@ private void printColumnValues(int columnCount) {
     trace(row.toString(), false);
   }
 
-  /*
+  /**
    * Creates a logging version of a ResultSet
    *
    * @param rs - the ResultSet to proxy
@@ -140,7 +140,7 @@ public static ResultSet newInstance(ResultSet rs, Log statementLog, int querySta
     return (ResultSet) Proxy.newProxyInstance(cl, new Class[]{ResultSet.class}, handler);
   }
 
-  /*
+  /**
    * Get the wrapped result set
    *
    * @return the resultSet

File: src/main/java/org/apache/ibatis/logging/jdbc/StatementLogger.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -67,7 +67,7 @@ public Object invoke(Object proxy, Method method, Object[] params) throws Throwa
     }
   }
 
-  /*
+  /**
    * Creates a logging version of a Statement
    *
    * @param stmt - the statement
@@ -79,7 +79,7 @@ public static Statement newInstance(Statement stmt, Log statementLog, int queryS
     return (Statement) Proxy.newProxyInstance(cl, new Class[]{Statement.class}, handler);
   }
 
-  /*
+  /**
    * return the wrapped statement
    *
    * @return the statement

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -609,7 +609,7 @@ private void applyConstructorArgs(Arg[] args, Class<?> resultType, List<ResultMa
           nullOrEmpty(arg.select()),
           nullOrEmpty(arg.resultMap()),
           null,
-          null,
+          nullOrEmpty(arg.columnPrefix()),
           typeHandler,
           flags,
           null,

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -609,7 +609,7 @@ private void applyConstructorArgs(Arg[] args, Class<?> resultType, List<ResultMa
           nullOrEmpty(arg.select()),
           nullOrEmpty(arg.resultMap()),
           null,
-          null,
+          nullOrEmpty(arg.columnPrefix()),
           typeHandler,
           flags,
           null,

File: src/main/java/org/apache/ibatis/executor/ErrorContext.java
Patch:
@@ -44,8 +44,9 @@ public static ErrorContext instance() {
   }
 
   public ErrorContext store() {
-    stored = this;
-    LOCAL.set(new ErrorContext());
+    ErrorContext newContext = new ErrorContext();
+    newContext.stored = this;
+    LOCAL.set(newContext);
     return LOCAL.get();
   }
 

File: src/main/java/org/apache/ibatis/executor/ErrorContext.java
Patch:
@@ -44,8 +44,9 @@ public static ErrorContext instance() {
   }
 
   public ErrorContext store() {
-    stored = this;
-    LOCAL.set(new ErrorContext());
+    ErrorContext newContext = new ErrorContext();
+    newContext.stored = this;
+    LOCAL.set(newContext);
     return LOCAL.get();
   }
 

File: src/main/java/org/apache/ibatis/cursor/defaults/DefaultCursor.java
Patch:
@@ -94,6 +94,9 @@ public int getCurrentIndex() {
 
     @Override
     public Iterator<T> iterator() {
+        if (isClosed()) {
+            throw new IllegalStateException("A Cursor is already closed.");
+        }
         if (iteratorRetrieved) {
             throw new IllegalStateException("Cannot open more than one iterator on a Cursor");
         }

File: src/test/java/org/apache/ibatis/autoconstructor/PrimitiveSubject.java
Patch:
@@ -23,14 +23,16 @@ public class PrimitiveSubject {
   private final int age;
   private final int height;
   private final int weight;
+  private final boolean active;
   private final Date dt;
 
-  public PrimitiveSubject(final int id, final String name, final int age, final int height, final int weight, final Date dt) {
+  public PrimitiveSubject(final int id, final String name, final int age, final int height, final int weight, final boolean active, final Date dt) {
     this.id = id;
     this.name = name;
     this.age = age;
     this.height = height;
     this.weight = weight;
+    this.active = active;
     this.dt = dt;
   }
 }

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -145,6 +145,8 @@ public TypeHandlerRegistry() {
     register(java.sql.Time.class, new SqlTimeTypeHandler());
     register(java.sql.Timestamp.class, new SqlTimestampTypeHandler());
 
+    register(String.class, JdbcType.SQLXML, new SqlxmlTypeHandler());
+
     // mybatis-typehandlers-jsr310
     if (Jdk.dateAndTimeApiExists) {
       this.register(Instant.class, InstantTypeHandler.class);

File: src/test/java/org/apache/ibatis/jdbc/ScriptRunnerTest.java
Patch:
@@ -251,6 +251,7 @@ public void shouldAcceptDelimiterVariations() throws Exception {
     Connection conn = mock(Connection.class);
     Statement stmt = mock(Statement.class);
     when(conn.createStatement()).thenReturn(stmt);
+    when(stmt.getUpdateCount()).thenReturn(-1);
     ScriptRunner runner = new ScriptRunner(conn);
 
     String sql = "-- @DELIMITER | \n"
@@ -289,6 +290,7 @@ public void shouldAcceptMultiCharDelimiter() throws Exception {
     Connection conn = mock(Connection.class);
     Statement stmt = mock(Statement.class);
     when(conn.createStatement()).thenReturn(stmt);
+    when(stmt.getUpdateCount()).thenReturn(-1);
     ScriptRunner runner = new ScriptRunner(conn);
 
     String sql = "-- @DELIMITER || \n"

File: src/main/java/org/apache/ibatis/builder/BaseBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -108,7 +108,7 @@ protected Object createInstance(String alias) {
     }
   }
 
-  protected Class<?> resolveClass(String alias) {
+  protected <T> Class<? extends T> resolveClass(String alias) {
     if (alias == null) {
       return null;
     }
@@ -145,7 +145,7 @@ protected TypeHandler<?> resolveTypeHandler(Class<?> javaType, Class<? extends T
     return handler;
   }
 
-  protected Class<?> resolveAlias(String alias) {
+  protected <T> Class<? extends T> resolveAlias(String alias) {
     return typeAliasRegistry.resolveAlias(alias);
   }
 }

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -472,7 +472,7 @@ public ResultMapping buildResultMapping(
         nestedResultMap, notNullColumn, columnPrefix, typeHandler, flags, null, null, configuration.isLazyLoadingEnabled());
   }
 
-  public LanguageDriver getLanguageDriver(Class<?> langClass) {
+  public LanguageDriver getLanguageDriver(Class<? extends LanguageDriver> langClass) {
     if (langClass != null) {
       configuration.getLanguageRegistry().register(langClass);
     } else {

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -383,7 +383,7 @@ void parseStatement(Method method) {
   
   private LanguageDriver getLanguageDriver(Method method) {
     Lang lang = method.getAnnotation(Lang.class);
-    Class<?> langClass = null;
+    Class<? extends LanguageDriver> langClass = null;
     if (lang != null) {
       langClass = lang.value();
     }

File: src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -192,7 +192,7 @@ private boolean databaseIdMatchesCurrent(String id, String databaseId, String re
   }
 
   private LanguageDriver getLanguageDriver(String lang) {
-    Class<?> langClass = null;
+    Class<? extends LanguageDriver> langClass = null;
     if (lang != null) {
       langClass = resolveClass(lang);
     }

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -520,7 +520,7 @@ public LanguageDriverRegistry getLanguageRegistry() {
     return languageRegistry;
   }
 
-  public void setDefaultScriptingLanguage(Class<?> driver) {
+  public void setDefaultScriptingLanguage(Class<? extends LanguageDriver> driver) {
     if (driver == null) {
       driver = XMLLanguageDriver.class;
     }

File: src/test/java/org/apache/ibatis/scripting/LanguageDriverRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -56,7 +56,7 @@ public void registerByTypeSameType() {
 
   @Test
   public void registerByTypeNull() {
-    when(registry).register((Class<?>) null);
+    when(registry).register((Class<? extends LanguageDriver>) null);
     then(caughtException()).isInstanceOf(IllegalArgumentException.class)
       .hasMessage("null is not a valid Language Driver");
   }

File: src/main/java/org/apache/ibatis/builder/BaseBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -108,7 +108,7 @@ protected Object createInstance(String alias) {
     }
   }
 
-  protected Class<?> resolveClass(String alias) {
+  protected <T> Class<? extends T> resolveClass(String alias) {
     if (alias == null) {
       return null;
     }
@@ -145,7 +145,7 @@ protected TypeHandler<?> resolveTypeHandler(Class<?> javaType, Class<? extends T
     return handler;
   }
 
-  protected Class<?> resolveAlias(String alias) {
+  protected <T> Class<? extends T> resolveAlias(String alias) {
     return typeAliasRegistry.resolveAlias(alias);
   }
 }

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -472,7 +472,7 @@ public ResultMapping buildResultMapping(
         nestedResultMap, notNullColumn, columnPrefix, typeHandler, flags, null, null, configuration.isLazyLoadingEnabled());
   }
 
-  public LanguageDriver getLanguageDriver(Class<?> langClass) {
+  public LanguageDriver getLanguageDriver(Class<? extends LanguageDriver> langClass) {
     if (langClass != null) {
       configuration.getLanguageRegistry().register(langClass);
     } else {

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -381,7 +381,7 @@ void parseStatement(Method method) {
   
   private LanguageDriver getLanguageDriver(Method method) {
     Lang lang = method.getAnnotation(Lang.class);
-    Class<?> langClass = null;
+    Class<? extends LanguageDriver> langClass = null;
     if (lang != null) {
       langClass = lang.value();
     }

File: src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -192,7 +192,7 @@ private boolean databaseIdMatchesCurrent(String id, String databaseId, String re
   }
 
   private LanguageDriver getLanguageDriver(String lang) {
-    Class<?> langClass = null;
+    Class<? extends LanguageDriver> langClass = null;
     if (lang != null) {
       langClass = resolveClass(lang);
     }

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -520,7 +520,7 @@ public LanguageDriverRegistry getLanguageRegistry() {
     return languageRegistry;
   }
 
-  public void setDefaultScriptingLanguage(Class<?> driver) {
+  public void setDefaultScriptingLanguage(Class<? extends LanguageDriver> driver) {
     if (driver == null) {
       driver = XMLLanguageDriver.class;
     }

File: src/test/java/org/apache/ibatis/scripting/LanguageDriverRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -56,7 +56,7 @@ public void registerByTypeSameType() {
 
   @Test
   public void registerByTypeNull() {
-    when(registry).register((Class<?>) null);
+    when(registry).register((Class<? extends LanguageDriver>) null);
     then(caughtException()).isInstanceOf(IllegalArgumentException.class)
       .hasMessage("null is not a valid Language Driver");
   }

File: src/main/java/org/apache/ibatis/mapping/BoundSql.java
Patch:
@@ -27,8 +27,8 @@
  * An actual SQL String got from an {@link SqlSource} after having processed any dynamic content.
  * The SQL may have SQL placeholders "?" and an list (ordered) of an parameter mappings 
  * with the additional information for each parameter (at least the property name of the input object to read 
- * the value from). 
- * </br>
+ * the value from).
+ * <p>
  * Can also have additional parameters that are created by the dynamic language (for loops, bind...).
  *
  * @author Clinton Begin

File: src/main/java/org/apache/ibatis/reflection/ParamNameResolver.java
Patch:
@@ -105,8 +105,8 @@ public String[] getNames() {
 
   /**
    * <p>
-   * A single non-special parameter is returned without a name.<br />
-   * Multiple parameters are named using the naming rule.<br />
+   * A single non-special parameter is returned without a name.
+   * Multiple parameters are named using the naming rule.
    * In addition to the default names, this method also adds the generic names (param1, param2,
    * ...).
    * </p>

File: src/main/java/org/apache/ibatis/mapping/BoundSql.java
Patch:
@@ -27,8 +27,8 @@
  * An actual SQL String got from an {@link SqlSource} after having processed any dynamic content.
  * The SQL may have SQL placeholders "?" and an list (ordered) of an parameter mappings 
  * with the additional information for each parameter (at least the property name of the input object to read 
- * the value from). 
- * </br>
+ * the value from).
+ * <p>
  * Can also have additional parameters that are created by the dynamic language (for loops, bind...).
  *
  * @author Clinton Begin

File: src/main/java/org/apache/ibatis/reflection/ParamNameResolver.java
Patch:
@@ -105,8 +105,8 @@ public String[] getNames() {
 
   /**
    * <p>
-   * A single non-special parameter is returned without a name.<br />
-   * Multiple parameters are named using the naming rule.<br />
+   * A single non-special parameter is returned without a name.
+   * Multiple parameters are named using the naming rule.
    * In addition to the default names, this method also adds the generic names (param1, param2,
    * ...).
    * </p>

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -351,7 +351,7 @@ public boolean returnsCursor() {
     /**
      * return whether return type is {@code java.util.Optional}
      * @return return {@code true}, if return type is {@code java.util.Optional}
-     * @since 3.4.2
+     * @since 3.5.0
      */
     public boolean returnsOptional() {
       return returnsOptional;

File: src/test/java/org/apache/ibatis/submitted/usesjava8/optional_on_mapper_method/OptionalOnMapperMethodTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -38,7 +38,7 @@
 /**
  * Tests for support the {@code java.util.Optional} as return type of mapper method.
  *
- * @since 3.4.2
+ * @since 3.5.0
  * @author Kazuki Shimizu
  */
 public class OptionalOnMapperMethodTest {

File: src/main/java/org/apache/ibatis/annotations/Options.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -58,7 +58,7 @@ public enum FlushCachePolicy {
 
   boolean useGeneratedKeys() default false;
 
-  String keyProperty() default "id";
+  String keyProperty() default "";
 
   String keyColumn() default "";
   

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -303,7 +303,7 @@ void parseStatement(Method method) {
       boolean useCache = isSelect;
 
       KeyGenerator keyGenerator;
-      String keyProperty = "id";
+      String keyProperty = null;
       String keyColumn = null;
       if (SqlCommandType.INSERT.equals(sqlCommandType) || SqlCommandType.UPDATE.equals(sqlCommandType)) {
         // first check for SelectKey annotation - that overrides everything else

File: src/main/java/org/apache/ibatis/annotations/Options.java
Patch:
@@ -58,7 +58,7 @@ public enum FlushCachePolicy {
 
   boolean useGeneratedKeys() default false;
 
-  String keyProperty() default "id";
+  String keyProperty() default "";
 
   String keyColumn() default "";
   

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -300,7 +300,7 @@ void parseStatement(Method method) {
       boolean useCache = isSelect;
 
       KeyGenerator keyGenerator;
-      String keyProperty = "id";
+      String keyProperty = null;
       String keyColumn = null;
       if (SqlCommandType.INSERT.equals(sqlCommandType) || SqlCommandType.UPDATE.equals(sqlCommandType)) {
         // first check for SelectKey annotation - that overrides everything else

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,7 +48,7 @@ public final class TypeHandlerRegistry {
   private final TypeHandler<Object> UNKNOWN_TYPE_HANDLER = new UnknownTypeHandler(this);
   private final Map<Class<?>, TypeHandler<?>> ALL_TYPE_HANDLERS_MAP = new HashMap<Class<?>, TypeHandler<?>>();
 
-  private static final Map<JdbcType, TypeHandler<?>> NULL_TYPE_HANDLER_MAP = new HashMap<JdbcType, TypeHandler<?>>();
+  private static final Map<JdbcType, TypeHandler<?>> NULL_TYPE_HANDLER_MAP = Collections.emptyMap();
 
   private Class<? extends TypeHandler> defaultEnumTypeHandler = EnumTypeHandler.class;
 
@@ -354,7 +354,7 @@ public <T> void register(Class<T> type, JdbcType jdbcType, TypeHandler<? extends
   private void register(Type javaType, JdbcType jdbcType, TypeHandler<?> handler) {
     if (javaType != null) {
       Map<JdbcType, TypeHandler<?>> map = TYPE_HANDLER_MAP.get(javaType);
-      if (map == null) {
+      if (map == null || map == NULL_TYPE_HANDLER_MAP) {
         map = new HashMap<JdbcType, TypeHandler<?>>();
         TYPE_HANDLER_MAP.put(javaType, map);
       }

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -117,7 +117,7 @@ private void configurationElement(XNode context) {
       sqlElement(context.evalNodes("/mapper/sql"));
       buildStatementFromContext(context.evalNodes("select|insert|update|delete"));
     } catch (Exception e) {
-      throw new BuilderException("Error parsing Mapper XML. Cause: " + e, e);
+      throw new BuilderException("Error parsing Mapper XML.The XML location is " + resource + " Cause: " + e, e);
     }
   }
 

File: src/test/java/org/apache/ibatis/reflection/factory/DefaultObjectFactoryTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;

File: src/main/java/org/apache/ibatis/reflection/factory/DefaultObjectFactory.java
Patch:
@@ -55,7 +55,7 @@ public void setProperties(Properties properties) {
     // no props for default
   }
 
-  <T> T instantiateClass(Class<T> type, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
+  private  <T> T instantiateClass(Class<T> type, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
     try {
       Constructor<T> constructor;
       if (constructorArgTypes == null || constructorArgs == null) {

File: src/main/java/org/apache/ibatis/scripting/xmltags/ExpressionEvaluator.java
Patch:
@@ -34,7 +34,7 @@ public boolean evaluateBoolean(String expression, Object parameterObject) {
       return (Boolean) value;
     }
     if (value instanceof Number) {
-        return !new BigDecimal(String.valueOf(value)).equals(BigDecimal.ZERO);
+      return new BigDecimal(String.valueOf(value)).compareTo(BigDecimal.ZERO) != 0;
     }
     return value != null;
   }

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -131,6 +131,7 @@ public List<BatchResult> doFlushStatements(boolean isRollback) throws SQLExcepti
               keyGenerator.processAfter(this, ms, stmt, parameter);
             }
           }
+          closeStatement(stmt);
         } catch (BatchUpdateException e) {
           StringBuilder message = new StringBuilder();
           message.append(batchResult.getMappedStatement().getId())

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -53,7 +53,7 @@ public Object execute(SqlSession sqlSession, Object[] args) {
     Object result;
     switch (command.getType()) {
       case INSERT: {
-    	Object param = method.convertArgsToSqlCommandParam(args);
+      Object param = method.convertArgsToSqlCommandParam(args);
         result = rowCountResult(sqlSession.insert(command.getName(), param));
         break;
       }
@@ -284,10 +284,10 @@ public MethodSignature(Configuration configuration, Class<?> mapperInterface, Me
         this.returnType = method.getReturnType();
       }
       this.returnsVoid = void.class.equals(this.returnType);
-      this.returnsMany = (configuration.getObjectFactory().isCollection(this.returnType) || this.returnType.isArray());
+      this.returnsMany = configuration.getObjectFactory().isCollection(this.returnType) || this.returnType.isArray();
       this.returnsCursor = Cursor.class.equals(this.returnType);
       this.mapKey = getMapKey(method);
-      this.returnsMap = (this.mapKey != null);
+      this.returnsMap = this.mapKey != null;
       this.rowBoundsIndex = getUniqueParamIndex(method, RowBounds.class);
       this.resultHandlerIndex = getUniqueParamIndex(method, ResultHandler.class);
       this.paramNameResolver = new ParamNameResolver(configuration, method);

File: src/main/java/org/apache/ibatis/binding/MapperProxy.java
Patch:
@@ -88,8 +88,8 @@ private Object invokeDefaultMethod(Object proxy, Method method, Object[] args)
    * Backport of java.lang.reflect.Method#isDefault()
    */
   private boolean isDefaultMethod(Method method) {
-    return ((method.getModifiers()
-        & (Modifier.ABSTRACT | Modifier.PUBLIC | Modifier.STATIC)) == Modifier.PUBLIC)
+    return (method.getModifiers()
+        & (Modifier.ABSTRACT | Modifier.PUBLIC | Modifier.STATIC)) == Modifier.PUBLIC
         && method.getDeclaringClass().isInterface();
   }
 }

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -566,9 +566,9 @@ private String nestedSelectId(Result result) {
   private boolean isLazy(Result result) {
     boolean isLazy = configuration.isLazyLoadingEnabled();
     if (result.one().select().length() > 0 && FetchType.DEFAULT != result.one().fetchType()) {
-      isLazy = (result.one().fetchType() == FetchType.LAZY);
+      isLazy = result.one().fetchType() == FetchType.LAZY;
     } else if (result.many().select().length() > 0 && FetchType.DEFAULT != result.many().fetchType()) {
-      isLazy = (result.many().fetchType() == FetchType.LAZY);
+      isLazy = result.many().fetchType() == FetchType.LAZY;
     }
     return isLazy;
   }

File: src/main/java/org/apache/ibatis/cursor/defaults/DefaultCursor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -148,7 +148,7 @@ protected T fetchNextObjectFromDatabase() {
             indexWithRowBound++;
         }
         // No more object or limit reached
-        if (next == null || (getReadItemsCount() == rowBounds.getOffset() + rowBounds.getLimit())) {
+        if (next == null || getReadItemsCount() == rowBounds.getOffset() + rowBounds.getLimit()) {
             close();
             status = CursorStatus.CONSUMED;
         }

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java
Patch:
@@ -213,7 +213,7 @@ public int hashCode() {
   @Override
   public boolean equals(Object obj) {
     if (obj instanceof PooledConnection) {
-      return realConnection.hashCode() == (((PooledConnection) obj).realConnection.hashCode());
+      return realConnection.hashCode() == ((PooledConnection) obj).realConnection.hashCode();
     } else if (obj instanceof Connection) {
       return hashCode == obj.hashCode();
     } else {

File: src/main/java/org/apache/ibatis/executor/CachingExecutor.java
Patch:
@@ -96,7 +96,7 @@ public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds r
     if (cache != null) {
       flushCacheIfRequired(ms);
       if (ms.isUseCache() && resultHandler == null) {
-        ensureNoOutParams(ms, parameterObject, boundSql);
+        ensureNoOutParams(ms, boundSql);
         @SuppressWarnings("unchecked")
         List<E> list = (List<E>) tcm.getObject(cache, key);
         if (list == null) {
@@ -131,7 +131,7 @@ public void rollback(boolean required) throws SQLException {
     }
   }
 
-  private void ensureNoOutParams(MappedStatement ms, Object parameter, BoundSql boundSql) {
+  private void ensureNoOutParams(MappedStatement ms, BoundSql boundSql) {
     if (ms.getStatementType() == StatementType.CALLABLE) {
       for (ParameterMapping parameterMapping : boundSql.getParameterMappings()) {
         if (parameterMapping.getMode() != ParameterMode.IN) {

File: src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java
Patch:
@@ -185,7 +185,7 @@ public static Object createProxy(Object target, Map<String, ResultLoaderMap.Load
     @Override
     public Object intercept(Object enhanced, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
       final Object o = super.invoke(enhanced, method, args);
-      return (o instanceof AbstractSerialStateHolder) ? o : methodProxy.invokeSuper(o, args);
+      return o instanceof AbstractSerialStateHolder ? o : methodProxy.invokeSuper(o, args);
     }
 
     @Override

File: src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java
Patch:
@@ -187,7 +187,7 @@ public static Object createProxy(Object target, Map<String, ResultLoaderMap.Load
     @Override
     public Object invoke(Object enhanced, Method method, Method methodProxy, Object[] args) throws Throwable {
       final Object o = super.invoke(enhanced, method, args);
-      return (o instanceof AbstractSerialStateHolder) ? o : methodProxy.invoke(o, args);
+      return o instanceof AbstractSerialStateHolder ? o : methodProxy.invoke(o, args);
     }
 
     @Override

File: src/main/java/org/apache/ibatis/io/ResolverUtil.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -66,7 +66,7 @@ public class ResolverUtil<T> {
    * A simple interface that specifies how to test classes to determine if they
    * are to be included in the results produced by the ResolverUtil.
    */
-  public static interface Test {
+  public interface Test {
     /**
      * Will be called repeatedly with candidate classes. Must return True if a class
      * is to be included in the results, false otherwise.

File: src/main/java/org/apache/ibatis/type/DateTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,7 +30,7 @@ public class DateTypeHandler extends BaseTypeHandler<Date> {
   @Override
   public void setNonNullParameter(PreparedStatement ps, int i, Date parameter, JdbcType jdbcType)
       throws SQLException {
-    ps.setTimestamp(i, new Timestamp((parameter).getTime()));
+    ps.setTimestamp(i, new Timestamp(parameter.getTime()));
   }
 
   @Override

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -53,7 +53,7 @@ public Object execute(SqlSession sqlSession, Object[] args) {
     Object result;
     switch (command.getType()) {
       case INSERT: {
-    	Object param = method.convertArgsToSqlCommandParam(args);
+      Object param = method.convertArgsToSqlCommandParam(args);
         result = rowCountResult(sqlSession.insert(command.getName(), param));
         break;
       }
@@ -284,10 +284,10 @@ public MethodSignature(Configuration configuration, Class<?> mapperInterface, Me
         this.returnType = method.getReturnType();
       }
       this.returnsVoid = void.class.equals(this.returnType);
-      this.returnsMany = (configuration.getObjectFactory().isCollection(this.returnType) || this.returnType.isArray());
+      this.returnsMany = configuration.getObjectFactory().isCollection(this.returnType) || this.returnType.isArray();
       this.returnsCursor = Cursor.class.equals(this.returnType);
       this.mapKey = getMapKey(method);
-      this.returnsMap = (this.mapKey != null);
+      this.returnsMap = this.mapKey != null;
       this.rowBoundsIndex = getUniqueParamIndex(method, RowBounds.class);
       this.resultHandlerIndex = getUniqueParamIndex(method, ResultHandler.class);
       this.paramNameResolver = new ParamNameResolver(configuration, method);

File: src/main/java/org/apache/ibatis/binding/MapperProxy.java
Patch:
@@ -88,8 +88,8 @@ private Object invokeDefaultMethod(Object proxy, Method method, Object[] args)
    * Backport of java.lang.reflect.Method#isDefault()
    */
   private boolean isDefaultMethod(Method method) {
-    return ((method.getModifiers()
-        & (Modifier.ABSTRACT | Modifier.PUBLIC | Modifier.STATIC)) == Modifier.PUBLIC)
+    return (method.getModifiers()
+        & (Modifier.ABSTRACT | Modifier.PUBLIC | Modifier.STATIC)) == Modifier.PUBLIC
         && method.getDeclaringClass().isInterface();
   }
 }

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -566,9 +566,9 @@ private String nestedSelectId(Result result) {
   private boolean isLazy(Result result) {
     boolean isLazy = configuration.isLazyLoadingEnabled();
     if (result.one().select().length() > 0 && FetchType.DEFAULT != result.one().fetchType()) {
-      isLazy = (result.one().fetchType() == FetchType.LAZY);
+      isLazy = result.one().fetchType() == FetchType.LAZY;
     } else if (result.many().select().length() > 0 && FetchType.DEFAULT != result.many().fetchType()) {
-      isLazy = (result.many().fetchType() == FetchType.LAZY);
+      isLazy = result.many().fetchType() == FetchType.LAZY;
     }
     return isLazy;
   }

File: src/main/java/org/apache/ibatis/cursor/defaults/DefaultCursor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -148,7 +148,7 @@ protected T fetchNextObjectFromDatabase() {
             indexWithRowBound++;
         }
         // No more object or limit reached
-        if (next == null || (getReadItemsCount() == rowBounds.getOffset() + rowBounds.getLimit())) {
+        if (next == null || getReadItemsCount() == rowBounds.getOffset() + rowBounds.getLimit()) {
             close();
             status = CursorStatus.CONSUMED;
         }

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java
Patch:
@@ -213,7 +213,7 @@ public int hashCode() {
   @Override
   public boolean equals(Object obj) {
     if (obj instanceof PooledConnection) {
-      return realConnection.hashCode() == (((PooledConnection) obj).realConnection.hashCode());
+      return realConnection.hashCode() == ((PooledConnection) obj).realConnection.hashCode();
     } else if (obj instanceof Connection) {
       return hashCode == obj.hashCode();
     } else {

File: src/main/java/org/apache/ibatis/executor/CachingExecutor.java
Patch:
@@ -96,7 +96,7 @@ public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds r
     if (cache != null) {
       flushCacheIfRequired(ms);
       if (ms.isUseCache() && resultHandler == null) {
-        ensureNoOutParams(ms, parameterObject, boundSql);
+        ensureNoOutParams(ms, boundSql);
         @SuppressWarnings("unchecked")
         List<E> list = (List<E>) tcm.getObject(cache, key);
         if (list == null) {
@@ -131,7 +131,7 @@ public void rollback(boolean required) throws SQLException {
     }
   }
 
-  private void ensureNoOutParams(MappedStatement ms, Object parameter, BoundSql boundSql) {
+  private void ensureNoOutParams(MappedStatement ms, BoundSql boundSql) {
     if (ms.getStatementType() == StatementType.CALLABLE) {
       for (ParameterMapping parameterMapping : boundSql.getParameterMappings()) {
         if (parameterMapping.getMode() != ParameterMode.IN) {

File: src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java
Patch:
@@ -185,7 +185,7 @@ public static Object createProxy(Object target, Map<String, ResultLoaderMap.Load
     @Override
     public Object intercept(Object enhanced, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
       final Object o = super.invoke(enhanced, method, args);
-      return (o instanceof AbstractSerialStateHolder) ? o : methodProxy.invokeSuper(o, args);
+      return o instanceof AbstractSerialStateHolder ? o : methodProxy.invokeSuper(o, args);
     }
 
     @Override

File: src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java
Patch:
@@ -187,7 +187,7 @@ public static Object createProxy(Object target, Map<String, ResultLoaderMap.Load
     @Override
     public Object invoke(Object enhanced, Method method, Method methodProxy, Object[] args) throws Throwable {
       final Object o = super.invoke(enhanced, method, args);
-      return (o instanceof AbstractSerialStateHolder) ? o : methodProxy.invoke(o, args);
+      return o instanceof AbstractSerialStateHolder ? o : methodProxy.invoke(o, args);
     }
 
     @Override

File: src/main/java/org/apache/ibatis/io/ResolverUtil.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -66,7 +66,7 @@ public class ResolverUtil<T> {
    * A simple interface that specifies how to test classes to determine if they
    * are to be included in the results produced by the ResolverUtil.
    */
-  public static interface Test {
+  public interface Test {
     /**
      * Will be called repeatedly with candidate classes. Must return True if a class
      * is to be included in the results, false otherwise.

File: src/main/java/org/apache/ibatis/type/DateTypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,7 +30,7 @@ public class DateTypeHandler extends BaseTypeHandler<Date> {
   @Override
   public void setNonNullParameter(PreparedStatement ps, int i, Date parameter, JdbcType jdbcType)
       throws SQLException {
-    ps.setTimestamp(i, new Timestamp((parameter).getTime()));
+    ps.setTimestamp(i, new Timestamp(parameter.getTime()));
   }
 
   @Override

File: src/test/java/org/apache/ibatis/submitted/named_constructor_args/User.java
Patch:
@@ -28,10 +28,10 @@ public User(@Param("id") String id) {
     this.id = Integer.valueOf(id);
   }
 
-  public User(Integer userId, String name) {
+  public User(Integer userId, @Param("name") String userName) {
     super();
     this.id = userId;
-    this.name = name;
+    this.name = userName;
   }
 
   public User(@Param("id") int id, @Param("name") String name, @Param("team") String team) {

File: src/main/java/org/apache/ibatis/cache/CacheKey.java
Patch:
@@ -37,7 +37,8 @@ public class CacheKey implements Cloneable, Serializable {
   private int hashcode;
   private long checksum;
   private int count;
-  private transient List<Object> updateList;
+  // 8/21/2017 - Sonarlint flags this as needing to be marked transient.  While true if content is not serializable, this is not always true and thus should not be marked transient.
+  private List<Object> updateList;
 
   public CacheKey() {
     this.hashcode = DEFAULT_HASHCODE;

File: src/main/java/org/apache/ibatis/cache/CacheKey.java
Patch:
@@ -37,7 +37,8 @@ public class CacheKey implements Cloneable, Serializable {
   private int hashcode;
   private long checksum;
   private int count;
-  private transient List<Object> updateList;
+  // 8/21/2017 - Sonarlint flags this as needing to be marked transient.  While true if content is not serializable, this is not always true and thus should not be marked transient.
+  private List<Object> updateList;
 
   public CacheKey() {
     this.hashcode = DEFAULT_HASHCODE;

File: src/test/java/org/apache/ibatis/builder/XmlMapperBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2016 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/test/java/org/apache/ibatis/logging/jdbc/BaseJdbcLoggerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2016 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/test/java/org/apache/ibatis/mapping/CacheBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2016 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/test/java/org/apache/ibatis/parsing/PropertyParserTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2016 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/test/java/org/apache/ibatis/scripting/defaults/DefaultParameterHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2016 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/test/java/org/apache/ibatis/submitted/global_variables_defaults/AnnotationMapperTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2016 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/test/java/org/apache/ibatis/submitted/global_variables_defaults/ConfigurationTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2016 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/test/java/org/apache/ibatis/submitted/global_variables_defaults/CustomizationTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2016 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/test/java/org/apache/ibatis/submitted/global_variables_defaults/XmlMapperTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2016 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/test/java/org/apache/ibatis/submitted/results_id/IdConflictTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2017 the original author or authors.
+ *    Copyright 2009-2016 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/test/java/org/apache/ibatis/submitted/sqlprovider/OurSqlBuilder.java
Patch:
@@ -157,7 +157,7 @@ public String buildSelectByIdProviderContextOnly(ProviderContext context) {
       FROM(tableName);
       WHERE("id = #{id}");
       if (!containsLogicalDelete){
-        WHERE("logical_delete = false");
+        WHERE("logical_delete = ${Constants.LOGICAL_DELETE_OFF}");
       }
     }}.toString();
   }
@@ -172,7 +172,7 @@ public String buildSelectByNameOneParamAndProviderContext(ProviderContext contex
         WHERE("name like #{name} || '%'");
       }
       if (!containsLogicalDelete){
-        WHERE("logical_delete = false");
+        WHERE("logical_delete = ${LOGICAL_DELETE_OFF:0}");
       }
     }}.toString();
   }

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -465,7 +465,7 @@ private SqlSource getSqlSourceFromAnnotations(Method method, Class<?> parameterT
         return buildSqlSourceFromStrings(strings, parameterType, languageDriver);
       } else if (sqlProviderAnnotationType != null) {
         Annotation sqlProviderAnnotation = method.getAnnotation(sqlProviderAnnotationType);
-        return new ProviderSqlSource(assistant.getConfiguration(), sqlProviderAnnotation);
+        return new ProviderSqlSource(assistant.getConfiguration(), sqlProviderAnnotation, type, method);
       }
       return null;
     } catch (Exception e) {

File: src/test/java/org/apache/ibatis/submitted/sqlprovider/Mapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,7 +24,8 @@
 import org.apache.ibatis.annotations.SelectProvider;
 import org.apache.ibatis.annotations.UpdateProvider;
 
-public interface Mapper {
+@BaseMapper.Meta(tableName = "users")
+public interface Mapper extends BaseMapper<User> {
   @SelectProvider(type = OurSqlBuilder.class, method = "buildGetUsersQuery")
   List<User> getUsers(List<Integer> allFilterIds);
 

File: src/main/java/org/apache/ibatis/annotations/Options.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,7 +48,7 @@ public enum FlushCachePolicy {
 
   FlushCachePolicy flushCache() default FlushCachePolicy.DEFAULT;
 
-  ResultSetType resultSetType() default ResultSetType.FORWARD_ONLY;
+  ResultSetType resultSetType() default ResultSetType.DEFAULT;
 
   StatementType statementType() default StatementType.PREPARED;
 

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -248,6 +248,7 @@ private void settingsElement(Properties props) throws Exception {
     configuration.setDefaultExecutorType(ExecutorType.valueOf(props.getProperty("defaultExecutorType", "SIMPLE")));
     configuration.setDefaultStatementTimeout(integerValueOf(props.getProperty("defaultStatementTimeout"), null));
     configuration.setDefaultFetchSize(integerValueOf(props.getProperty("defaultFetchSize"), null));
+    configuration.setDefaultResultSetType(resolveResultSetType(props.getProperty("defaultResultSetType")));
     configuration.setMapUnderscoreToCamelCase(booleanValueOf(props.getProperty("mapUnderscoreToCamelCase"), false));
     configuration.setSafeRowBoundsEnabled(booleanValueOf(props.getProperty("safeRowBoundsEnabled"), false));
     configuration.setLocalCacheScope(LocalCacheScope.valueOf(props.getProperty("localCacheScope", "SESSION")));

File: src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java
Patch:
@@ -75,6 +75,9 @@ public void parseStatementNode() {
     String resultSetType = context.getStringAttribute("resultSetType");
     StatementType statementType = StatementType.valueOf(context.getStringAttribute("statementType", StatementType.PREPARED.toString()));
     ResultSetType resultSetTypeEnum = resolveResultSetType(resultSetType);
+    if (resultSetTypeEnum == null) {
+      resultSetTypeEnum = configuration.getDefaultResultSetType();
+    }
 
     String nodeName = context.getNode().getNodeName();
     SqlCommandType sqlCommandType = SqlCommandType.valueOf(nodeName.toUpperCase(Locale.ENGLISH));

File: src/test/java/org/apache/ibatis/builder/XmlConfigBuilderTest.java
Patch:
@@ -42,6 +42,7 @@
 import org.apache.ibatis.io.Resources;
 import org.apache.ibatis.logging.slf4j.Slf4jImpl;
 import org.apache.ibatis.mapping.Environment;
+import org.apache.ibatis.mapping.ResultSetType;
 import org.apache.ibatis.scripting.defaults.RawLanguageDriver;
 import org.apache.ibatis.scripting.xmltags.XMLLanguageDriver;
 import org.apache.ibatis.session.AutoMappingBehavior;
@@ -88,6 +89,7 @@ public void shouldSuccessfullyLoadMinimalXMLConfigFile() throws Exception {
     assertThat(config.getDefaultExecutorType()).isEqualTo(ExecutorType.SIMPLE);
     assertNull(config.getDefaultStatementTimeout());
     assertNull(config.getDefaultFetchSize());
+    assertNull(config.getDefaultResultSetType());
     assertThat(config.isMapUnderscoreToCamelCase()).isFalse();
     assertThat(config.isSafeRowBoundsEnabled()).isFalse();
     assertThat(config.getLocalCacheScope()).isEqualTo(LocalCacheScope.SESSION);
@@ -181,6 +183,7 @@ public void shouldSuccessfullyLoadXMLConfigFile() throws Exception {
       assertThat(config.getDefaultExecutorType()).isEqualTo(ExecutorType.BATCH);
       assertThat(config.getDefaultStatementTimeout()).isEqualTo(10);
       assertThat(config.getDefaultFetchSize()).isEqualTo(100);
+      assertThat(config.getDefaultResultSetType()).isEqualTo(ResultSetType.SCROLL_INSENSITIVE);
       assertThat(config.isMapUnderscoreToCamelCase()).isTrue();
       assertThat(config.isSafeRowBoundsEnabled()).isTrue();
       assertThat(config.getLocalCacheScope()).isEqualTo(LocalCacheScope.STATEMENT);

File: src/test/java/org/apache/ibatis/submitted/usesjava8/keycolumn/InsertMapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.keycolumn;
+package org.apache.ibatis.submitted.usesjava8.keycolumn;
 
 import org.apache.ibatis.annotations.Insert;
 import org.apache.ibatis.annotations.Options;

File: src/test/java/org/apache/ibatis/submitted/usesjava8/keycolumn/Name.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.keycolumn;
+package org.apache.ibatis.submitted.usesjava8.keycolumn;
 
 public class Name {
     private Integer id;

File: src/test/java/org/apache/ibatis/submitted/usesjava8/multiple_resultsets/Mapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.multiple_resultsets;
+package org.apache.ibatis.submitted.usesjava8.multiple_resultsets;
 
 import java.util.List;
 

File: src/test/java/org/apache/ibatis/submitted/usesjava8/multiple_resultsets/OrderDetail.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.multiple_resultsets;
+package org.apache.ibatis.submitted.usesjava8.multiple_resultsets;
 
 public class OrderDetail {
 

File: src/test/java/org/apache/ibatis/submitted/usesjava8/multiple_resultsets/OrderHeader.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.multiple_resultsets;
+package org.apache.ibatis.submitted.usesjava8.multiple_resultsets;
 
 public class OrderHeader {
 

File: src/test/java/org/apache/ibatis/submitted/usesjava8/refcursor/Order.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.refcursor;
+package org.apache.ibatis.submitted.usesjava8.refcursor;
 
 import java.util.List;
 

File: src/test/java/org/apache/ibatis/submitted/usesjava8/refcursor/OrderDetail.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.refcursor;
+package org.apache.ibatis.submitted.usesjava8.refcursor;
 
 public class OrderDetail {
     private Integer orderNumber;

File: src/test/java/org/apache/ibatis/submitted/usesjava8/refcursor/OrdersMapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
-package org.apache.ibatis.submitted.refcursor;
+package org.apache.ibatis.submitted.usesjava8.refcursor;
 
 import java.util.Map;
 

File: src/main/java/org/apache/ibatis/builder/xml/XMLIncludeTransformer.java
Patch:
@@ -96,7 +96,7 @@ private String getStringAttribute(Node node, String name) {
   }
 
   /**
-   * Read placholders and their values from include node definition. 
+   * Read placeholders and their values from include node definition. 
    * @param node Include node instance
    * @param inheritedVariablesContext Current context used for replace variables in new variables values
    * @return variables context from include instance (no inherited values)

File: src/main/java/org/apache/ibatis/executor/BatchExecutorException.java
Patch:
@@ -46,7 +46,7 @@ public BatchExecutorException(String message,
   /*
    * Returns the BatchUpdateException that caused the nested executor
    * to fail.  That exception contains an array of row counts
-   * that can be used to determine exactly which statemtn of the
+   * that can be used to determine exactly which statement of the
    * executor caused the failure (or failures).
    *
    * @return the root BatchUpdateException

File: src/main/java/org/apache/ibatis/jdbc/SqlRunner.java
Patch:
@@ -121,7 +121,7 @@ public int insert(String sql, Object... args) throws SQLException {
               try {
                 return Integer.parseInt(genkey.toString());
               } catch (NumberFormatException e) {
-                //ignore, no numeric key suppot
+                //ignore, no numeric key support
               }
             }
           }

File: src/main/java/org/apache/ibatis/builder/xml/XMLIncludeTransformer.java
Patch:
@@ -96,7 +96,7 @@ private String getStringAttribute(Node node, String name) {
   }
 
   /**
-   * Read placholders and their values from include node definition. 
+   * Read placeholders and their values from include node definition. 
    * @param node Include node instance
    * @param inheritedVariablesContext Current context used for replace variables in new variables values
    * @return variables context from include instance (no inherited values)

File: src/main/java/org/apache/ibatis/executor/BatchExecutorException.java
Patch:
@@ -46,7 +46,7 @@ public BatchExecutorException(String message,
   /*
    * Returns the BatchUpdateException that caused the nested executor
    * to fail.  That exception contains an array of row counts
-   * that can be used to determine exactly which statemtn of the
+   * that can be used to determine exactly which statement of the
    * executor caused the failure (or failures).
    *
    * @return the root BatchUpdateException

File: src/main/java/org/apache/ibatis/jdbc/SqlRunner.java
Patch:
@@ -121,7 +121,7 @@ public int insert(String sql, Object... args) throws SQLException {
               try {
                 return Integer.parseInt(genkey.toString());
               } catch (NumberFormatException e) {
-                //ignore, no numeric key suppot
+                //ignore, no numeric key support
               }
             }
           }

File: src/main/java/org/apache/ibatis/scripting/xmltags/ForEachSqlNode.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -87,6 +87,8 @@ public boolean apply(DynamicContext context) {
       i++;
     }
     applyClose(context);
+    context.getBindings().remove(item);
+    context.getBindings().remove(index);
     return true;
   }
 

File: src/main/java/org/apache/ibatis/executor/resultset/PrimitiveTypes.java
Patch:
@@ -39,7 +39,7 @@ public PrimitiveTypes() {
 
   private void add(final Class<?> primitiveType, final Class<?> wrapperType) {
     primitiveToWrappers.put(primitiveType, wrapperType);
-    primitiveToWrappers.put(wrapperType, primitiveType);
+    wrappersToPrimitives.put(wrapperType, primitiveType);
   }
 
   public Class<?> getWrapper(final Class<?> primitiveType) {

File: src/main/java/org/apache/ibatis/executor/resultset/PrimitiveTypes.java
Patch:
@@ -39,7 +39,7 @@ public PrimitiveTypes() {
 
   private void add(final Class<?> primitiveType, final Class<?> wrapperType) {
     primitiveToWrappers.put(primitiveType, wrapperType);
-    primitiveToWrappers.put(wrapperType, primitiveType);
+    wrappersToPrimitives.put(wrapperType, primitiveType);
   }
 
   public Class<?> getWrapper(final Class<?> primitiveType) {

File: src/test/java/org/apache/ibatis/autoconstructor/AutoConstructorTest.java
Patch:
@@ -47,6 +47,7 @@ public static void setUp() throws Exception {
     final ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(dbReader);
+    conn.close();
     dbReader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/parsing/XPathParserTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -41,6 +41,7 @@ public void shouldTestXPathParserMethods() throws Exception {
     XNode node = parser.evalNode("/employee/height");
     assertEquals("employee/height", node.getPath());
     assertEquals("employee[${id_var}]_height", node.getValueBasedIdentifier());
+    inputStream.close();
   }
 
 }

File: src/test/java/org/apache/ibatis/submitted/ancestor_ref/AncestorRefTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -45,6 +45,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/array_result_type/ArrayResultTypeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/associationtest/AssociationTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/associationtype/AssociationTypeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/automapping/AutomappingTest.java
Patch:
@@ -47,6 +47,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTableTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -44,6 +44,7 @@ public void setUp() throws Exception {
     runner.setErrorLogWriter(null);
     runner.runScript(reader);
     conn.commit();
+    conn.close();
     reader.close();
 
     reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/awful_table/MapperConfig.xml");

File: src/test/java/org/apache/ibatis/submitted/basetest/BaseTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -45,6 +45,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/batch_test/BatchTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -47,6 +47,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/blocking_cache/BlockingCacheTest.java
Patch:
@@ -48,6 +48,7 @@ public void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/bringrags/SimpleObjectTest.java
Patch:
@@ -32,6 +32,7 @@
 public class SimpleObjectTest {
   private SimpleChildObjectMapper simpleChildObjectMapper;
   private SqlSession sqlSession;
+  private Connection conn;
 
   @Before
   public void setUp() throws Exception {
@@ -40,7 +41,7 @@ public void setUp() throws Exception {
     reader.close();
 
     sqlSession = sqlSessionFactory.openSession();
-    Connection conn = sqlSession.getConnection();
+    conn = sqlSession.getConnection();
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(new StringReader("DROP TABLE IF EXISTS SimpleObject;"));
@@ -55,6 +56,7 @@ public void setUp() throws Exception {
 
   @After
   public void tearDown() throws Exception {
+    conn.close();
     sqlSession.close();
   }
 

File: src/test/java/org/apache/ibatis/submitted/cache/CacheTest.java
Patch:
@@ -56,6 +56,7 @@ public void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/cacheorder/CacheOrderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls/CallSettersOnNullsTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -49,6 +49,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls/DoNotCallSettersOnNullsTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/collectionparameters/CollectionParametersTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -49,6 +49,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/column_forwarding/ColumnForwardingTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -45,6 +45,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/complex_type/ComplexTypeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/cursor_nested/CursorNestedTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public static void setUp() throws Exception {
         ScriptRunner runner = new ScriptRunner(conn);
         runner.setLogWriter(null);
         runner.runScript(reader);
+        conn.close();
         reader.close();
         session.close();
     }

File: src/test/java/org/apache/ibatis/submitted/cursor_simple/CursorSimpleTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -52,6 +52,7 @@ public static void setUp() throws Exception {
         ScriptRunner runner = new ScriptRunner(conn);
         runner.setLogWriter(null);
         runner.runScript(reader);
+        conn.close();
         reader.close();
         session.close();
     }
@@ -347,6 +348,7 @@ public void testCursorUsageAfterClose() throws IOException {
         } catch (NoSuchElementException e) {
             // We had an exception and current index has not changed
             Assert.assertEquals(1, usersCursor.getCurrentIndex());
+            usersCursor.close();
             return;
         } finally {
             sqlSession.close();

File: src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollectionHandlingTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -82,6 +82,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig(String resource) throws
 
         Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
         initDb(conn);
+        conn.close();
 
         return sqlSessionFactory;
     }

File: src/test/java/org/apache/ibatis/submitted/dml_return_types/DmlMapperReturnTypesTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -59,6 +59,7 @@ public static void setUp() throws Exception {
         ScriptRunner runner = new ScriptRunner(conn);
         runner.setLogWriter(null);
         runner.runScript(reader);
+        conn.close();
       } finally {
         reader.close();
       }

File: src/test/java/org/apache/ibatis/submitted/duplicate_statements/DuplicateStatementsTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public void setupDb() throws Exception {
       ScriptRunner runner = new ScriptRunner(conn);
       runner.setLogWriter(null);
       runner.runScript(reader);
+      conn.close();
       reader.close();
       session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/empty_row/ReturnInstanceForEmptyRowTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -50,6 +50,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/enum_interface_type_handler/EnumInterfaceTypeHandlerTest.java
Patch:
@@ -48,6 +48,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/extendresultmap/ExtendResultMapTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -44,6 +44,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/foreach/ForEachTest.java
Patch:
@@ -52,6 +52,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/foreach_map/ForEachMapTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public static void setUpClass() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/generictyperesolution/GenericTypeResolutionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/global_variables/BaseTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -47,6 +47,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/include_property/IncludePropertyTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -49,6 +49,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/includes/IncludeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -47,6 +47,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/inheritance/InheritanceTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/initialized_collection_property/AuthorDAOTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public static void testGetMessageForEmptyDatabase() throws Exception {
     runner.setErrorLogWriter(null);
     reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/initialized_collection_property/create.sql");
     runner.runScript(reader);
+    conn.close();
     session.close();
   }
 

File: src/test/java/org/apache/ibatis/submitted/javassist/JavassistTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -49,6 +49,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java
Patch:
@@ -55,6 +55,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/lazy_properties/LazyPropertiesTest.java
Patch:
@@ -54,6 +54,7 @@ public void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/mapper_extend/MapperExtendTest.java
Patch:
@@ -49,6 +49,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/mapper_type_parameter/MapperTypeParameterTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/maptypehandler/MapTypeHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -52,6 +52,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/missing_id_property/MissingIdPropertyTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -45,6 +45,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/multipleiterates/MultipleIteratesTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -44,6 +44,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/multipleresultsetswithassociation/MultipleResultSetTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -58,6 +58,7 @@ public static void setUp() throws Exception {
     reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/multipleresultsetswithassociation/CreateDB3.sql");
     runReaderScript(conn, session, reader);
     reader.close();
+    conn.close();
     session.close();
   }
   

File: src/test/java/org/apache/ibatis/submitted/named_constructor_args/InvalidNamedConstructorArgsTest.java
Patch:
@@ -54,6 +54,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/named_constructor_args/NamedConstructorArgsTest.java
Patch:
@@ -51,6 +51,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/named_constructor_args/usesjava8/NamedConstructorArgsUseActualNameTest.java
Patch:
@@ -50,6 +50,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/nestedresulthandler/NestedResultHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/nestedresulthandler_association/NestedResultHandlerAssociationTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -53,6 +53,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/nestedresulthandler_multiple_association/NestedResultHandlerMultipleAssociationTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/no_param_type/NoParamTypeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -49,6 +49,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/ognlstatic/OgnlStaticTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -45,6 +45,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/parent_childs/ParentChildTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/primitive_array/PrimitiveArrayTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -45,6 +45,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/primitive_result_type/PrimitiveResultTypeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -38,6 +38,8 @@ public static void setup() throws Exception {
     runner.setErrorLogWriter(null);
     Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/primitive_result_type/create.sql");
     runner.runScript(reader);
+    conn.close();
+    reader.close();
   }
 
   @Test

File: src/test/java/org/apache/ibatis/submitted/primitives/PrimitivesTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/propertiesinmapperfiles/PropertiesInMappersTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -51,6 +51,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/raw_sql_source/RawSqlSourceTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/result_handler/ResulthandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/result_handler_type/DefaultResultHandlerTypeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -85,6 +85,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig(String resource) throws
 
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     initDb(conn);
+    conn.close();
 
     return sqlSessionFactory;
   }

File: src/test/java/org/apache/ibatis/submitted/resultmapwithassociationstest/ResultMapWithAssociationsTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/results_id/ResultsIdTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -47,6 +47,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/rounding/RoundingHandlersTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/serializecircular/SerializeCircularTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -126,6 +126,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig(String resource) throws
 
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     initDb(conn);
+    conn.close();
 
     return sqlSessionFactory;
   }

File: src/test/java/org/apache/ibatis/submitted/simplelistparameter/SimpleListParameterTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -47,6 +47,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java
Patch:
@@ -60,6 +60,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/stringlist/StringListTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/typehandler/TypeHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -52,6 +52,7 @@ public void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/typehandlerinjection/TypeHandlerInjectionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -51,6 +51,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/unknownobject/UnknownObjectTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -44,6 +44,7 @@ public void shouldFailBecauseThereIsAPropertyWithoutTypeHandler() throws Excepti
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/usesjava8/default_method/DefaultMethodTest.java
Patch:
@@ -49,6 +49,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/usesjava8/use_actual_param_name/UseActualParamNameTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -50,6 +50,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/uuid_test/UUIDTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -47,6 +47,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/valueinmap/ValueInMapTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -50,6 +50,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleCrossIncludeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -94,6 +94,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {
 
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     initDb(conn);
+    conn.close();
 
     return sqlSessionFactory;
   }
@@ -110,6 +111,7 @@ private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {
 
     configuration.addMapper(MultipleCrossIncludePersonMapper.class);
     configuration.addMapper(MultipleCrossIncludePetMapper.class);
+    c.close();
 
     return new SqlSessionFactoryBuilder().build(configuration);
   }

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleIncludeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -67,6 +67,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {
 
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     initDb(conn);
+    conn.close();
 
     return sqlSessionFactory;
   }
@@ -82,6 +83,7 @@ private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {
     configuration.setEnvironment(environment);
 
     configuration.addMapper(MultipleIncludePersonMapper.class);
+    c.close();
 
     return new SqlSessionFactoryBuilder().build(configuration);
   }

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleReverseIncludeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -67,6 +67,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {
 
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     initDb(conn);
+    conn.close();
 
     return sqlSessionFactory;
   }
@@ -82,6 +83,7 @@ private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {
     configuration.setEnvironment(environment);
 
     configuration.addMapper(MultipleReverseIncludePersonMapper.class);
+    c.close();
 
     return new SqlSessionFactoryBuilder().build(configuration);
   }

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/NonFullyQualifiedNamespaceTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -64,6 +64,7 @@ public void testCrossReferenceXmlConfig() throws Exception {
             assertEquals((Integer)2, pet2.getOwner().getId());
         }
         finally {
+            conn.close();
             sqlSession.close();
         }
     }

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/ParameterMapReferenceTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -68,6 +68,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {
 
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     initDb(conn);
+    conn.close();
 
     return sqlSessionFactory;
   }
@@ -84,6 +85,7 @@ private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {
 
     configuration.addMapper(ParameterMapReferencePersonMapper.class);
     configuration.addMapper(ParameterMapReferencePetMapper.class);
+    c.close();
 
     return new SqlSessionFactoryBuilder().build(configuration);
   }

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/ResultMapExtendsTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -67,6 +67,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {
 
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     initDb(conn);
+    conn.close();
 
     return sqlSessionFactory;
   }
@@ -83,6 +84,7 @@ private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {
 
     configuration.addMapper(ResultMapReferencePersonMapper.class);
     configuration.addMapper(ResultMapReferencePetMapper.class);
+    c.close();
 
     return new SqlSessionFactoryBuilder().build(configuration);
   }

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/ResultMapReferenceTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -67,6 +67,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {
 
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     initDb(conn);
+    conn.close();
 
     return sqlSessionFactory;
   }
@@ -83,6 +84,7 @@ private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {
 
     configuration.addMapper(ResultMapReferencePersonMapper.class);
     configuration.addMapper(ResultMapReferencePetMapper.class);
+    c.close();
 
     return new SqlSessionFactoryBuilder().build(configuration);
   }

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/ReverseIncludeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -67,6 +67,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {
 
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     initDb(conn);
+    conn.close();
 
     return sqlSessionFactory;
   }
@@ -82,6 +83,7 @@ private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {
     configuration.setEnvironment(environment);
 
     configuration.addMapper(ReverseIncludePersonMapper.class);
+    c.close();
 
     return new SqlSessionFactoryBuilder().build(configuration);
   }

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/SameIdTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -75,6 +75,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {
 
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     initDb(conn);
+    conn.close();
 
     return sqlSessionFactory;
   }
@@ -91,6 +92,7 @@ private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {
 
     configuration.addMapper(SameIdPersonMapper.class);
     configuration.addMapper(SameIdPetMapper.class);
+    c.close();
 
     return new SqlSessionFactoryBuilder().build(configuration);
   }

File: src/test/java/org/apache/ibatis/submitted/xml_references/EnumWithOgnlTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -51,5 +51,6 @@ public void testMixedConfiguration() throws Exception {
       Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/xml_references/ibatisConfig.xml");
       SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);
       sqlSessionFactory.getConfiguration().addMapper(PersonMapper2.class);
+      reader.close();
     }
 }

File: src/test/java/org/apache/ibatis/autoconstructor/AutoConstructorTest.java
Patch:
@@ -47,6 +47,7 @@ public static void setUp() throws Exception {
     final ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(dbReader);
+    conn.close();
     dbReader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/parsing/XPathParserTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -41,6 +41,7 @@ public void shouldTestXPathParserMethods() throws Exception {
     XNode node = parser.evalNode("/employee/height");
     assertEquals("employee/height", node.getPath());
     assertEquals("employee[${id_var}]_height", node.getValueBasedIdentifier());
+    inputStream.close();
   }
 
 }

File: src/test/java/org/apache/ibatis/submitted/ancestor_ref/AncestorRefTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -45,6 +45,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/array_result_type/ArrayResultTypeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/associationtest/AssociationTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/associationtype/AssociationTypeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/automapping/AutomappingTest.java
Patch:
@@ -47,6 +47,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTableTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -44,6 +44,7 @@ public void setUp() throws Exception {
     runner.setErrorLogWriter(null);
     runner.runScript(reader);
     conn.commit();
+    conn.close();
     reader.close();
 
     reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/awful_table/MapperConfig.xml");

File: src/test/java/org/apache/ibatis/submitted/basetest/BaseTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -45,6 +45,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/batch_test/BatchTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -47,6 +47,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/blocking_cache/BlockingCacheTest.java
Patch:
@@ -48,6 +48,7 @@ public void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/bringrags/SimpleObjectTest.java
Patch:
@@ -32,6 +32,7 @@
 public class SimpleObjectTest {
   private SimpleChildObjectMapper simpleChildObjectMapper;
   private SqlSession sqlSession;
+  private Connection conn;
 
   @Before
   public void setUp() throws Exception {
@@ -40,7 +41,7 @@ public void setUp() throws Exception {
     reader.close();
 
     sqlSession = sqlSessionFactory.openSession();
-    Connection conn = sqlSession.getConnection();
+    conn = sqlSession.getConnection();
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(new StringReader("DROP TABLE IF EXISTS SimpleObject;"));
@@ -55,6 +56,7 @@ public void setUp() throws Exception {
 
   @After
   public void tearDown() throws Exception {
+    conn.close();
     sqlSession.close();
   }
 

File: src/test/java/org/apache/ibatis/submitted/cache/CacheTest.java
Patch:
@@ -56,6 +56,7 @@ public void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/cacheorder/CacheOrderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls/CallSettersOnNullsTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -49,6 +49,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls/DoNotCallSettersOnNullsTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/collectionparameters/CollectionParametersTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -49,6 +49,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/column_forwarding/ColumnForwardingTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -45,6 +45,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/complex_type/ComplexTypeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/cursor_nested/CursorNestedTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public static void setUp() throws Exception {
         ScriptRunner runner = new ScriptRunner(conn);
         runner.setLogWriter(null);
         runner.runScript(reader);
+        conn.close();
         reader.close();
         session.close();
     }

File: src/test/java/org/apache/ibatis/submitted/cursor_simple/CursorSimpleTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -52,6 +52,7 @@ public static void setUp() throws Exception {
         ScriptRunner runner = new ScriptRunner(conn);
         runner.setLogWriter(null);
         runner.runScript(reader);
+        conn.close();
         reader.close();
         session.close();
     }
@@ -347,6 +348,7 @@ public void testCursorUsageAfterClose() throws IOException {
         } catch (NoSuchElementException e) {
             // We had an exception and current index has not changed
             Assert.assertEquals(1, usersCursor.getCurrentIndex());
+            usersCursor.close();
             return;
         } finally {
             sqlSession.close();

File: src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollectionHandlingTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -82,6 +82,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig(String resource) throws
 
         Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
         initDb(conn);
+        conn.close();
 
         return sqlSessionFactory;
     }

File: src/test/java/org/apache/ibatis/submitted/dml_return_types/DmlMapperReturnTypesTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -59,6 +59,7 @@ public static void setUp() throws Exception {
         ScriptRunner runner = new ScriptRunner(conn);
         runner.setLogWriter(null);
         runner.runScript(reader);
+        conn.close();
       } finally {
         reader.close();
       }

File: src/test/java/org/apache/ibatis/submitted/duplicate_statements/DuplicateStatementsTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public void setupDb() throws Exception {
       ScriptRunner runner = new ScriptRunner(conn);
       runner.setLogWriter(null);
       runner.runScript(reader);
+      conn.close();
       reader.close();
       session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/empty_row/ReturnInstanceForEmptyRowTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -50,6 +50,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/enum_interface_type_handler/EnumInterfaceTypeHandlerTest.java
Patch:
@@ -48,6 +48,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/extendresultmap/ExtendResultMapTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -44,6 +44,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/foreach/ForEachTest.java
Patch:
@@ -52,6 +52,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/foreach_map/ForEachMapTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public static void setUpClass() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/generictyperesolution/GenericTypeResolutionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/global_variables/BaseTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -47,6 +47,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/include_property/IncludePropertyTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -49,6 +49,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/includes/IncludeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -47,6 +47,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/inheritance/InheritanceTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/initialized_collection_property/AuthorDAOTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public static void testGetMessageForEmptyDatabase() throws Exception {
     runner.setErrorLogWriter(null);
     reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/initialized_collection_property/create.sql");
     runner.runScript(reader);
+    conn.close();
     session.close();
   }
 

File: src/test/java/org/apache/ibatis/submitted/javassist/JavassistTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -49,6 +49,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java
Patch:
@@ -55,6 +55,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/lazy_properties/LazyPropertiesTest.java
Patch:
@@ -54,6 +54,7 @@ public void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/mapper_extend/MapperExtendTest.java
Patch:
@@ -49,6 +49,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/mapper_type_parameter/MapperTypeParameterTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/maptypehandler/MapTypeHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -52,6 +52,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/missing_id_property/MissingIdPropertyTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -45,6 +45,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/multipleiterates/MultipleIteratesTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -44,6 +44,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/multipleresultsetswithassociation/MultipleResultSetTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -58,6 +58,7 @@ public static void setUp() throws Exception {
     reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/multipleresultsetswithassociation/CreateDB3.sql");
     runReaderScript(conn, session, reader);
     reader.close();
+    conn.close();
     session.close();
   }
   

File: src/test/java/org/apache/ibatis/submitted/named_constructor_args/InvalidNamedConstructorArgsTest.java
Patch:
@@ -54,6 +54,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/named_constructor_args/NamedConstructorArgsTest.java
Patch:
@@ -51,6 +51,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/named_constructor_args/usesjava8/NamedConstructorArgsUseActualNameTest.java
Patch:
@@ -50,6 +50,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/nestedresulthandler/NestedResultHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/nestedresulthandler_association/NestedResultHandlerAssociationTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -53,6 +53,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/nestedresulthandler_multiple_association/NestedResultHandlerMultipleAssociationTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/no_param_type/NoParamTypeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -49,6 +49,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/ognlstatic/OgnlStaticTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -45,6 +45,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/parent_childs/ParentChildTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/primitive_array/PrimitiveArrayTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -45,6 +45,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/primitive_result_type/PrimitiveResultTypeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -38,6 +38,8 @@ public static void setup() throws Exception {
     runner.setErrorLogWriter(null);
     Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/primitive_result_type/create.sql");
     runner.runScript(reader);
+    conn.close();
+    reader.close();
   }
 
   @Test

File: src/test/java/org/apache/ibatis/submitted/primitives/PrimitivesTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/propertiesinmapperfiles/PropertiesInMappersTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -51,6 +51,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/raw_sql_source/RawSqlSourceTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/result_handler/ResulthandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/result_handler_type/DefaultResultHandlerTypeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -85,6 +85,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig(String resource) throws
 
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     initDb(conn);
+    conn.close();
 
     return sqlSessionFactory;
   }

File: src/test/java/org/apache/ibatis/submitted/resultmapwithassociationstest/ResultMapWithAssociationsTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/results_id/ResultsIdTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -47,6 +47,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/rounding/RoundingHandlersTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,6 +48,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/serializecircular/SerializeCircularTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -126,6 +126,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig(String resource) throws
 
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     initDb(conn);
+    conn.close();
 
     return sqlSessionFactory;
   }

File: src/test/java/org/apache/ibatis/submitted/simplelistparameter/SimpleListParameterTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -47,6 +47,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java
Patch:
@@ -60,6 +60,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/stringlist/StringListTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/typehandler/TypeHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -52,6 +52,7 @@ public void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/typehandlerinjection/TypeHandlerInjectionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -51,6 +51,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/unknownobject/UnknownObjectTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -44,6 +44,7 @@ public void shouldFailBecauseThereIsAPropertyWithoutTypeHandler() throws Excepti
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/usesjava8/default_method/DefaultMethodTest.java
Patch:
@@ -49,6 +49,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/usesjava8/use_actual_param_name/UseActualParamNameTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -50,6 +50,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/uuid_test/UUIDTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -47,6 +47,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/valueinmap/ValueInMapTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -50,6 +50,7 @@ public static void setUp() throws Exception {
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setLogWriter(null);
     runner.runScript(reader);
+    conn.close();
     reader.close();
     session.close();
   }

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleCrossIncludeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -94,6 +94,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {
 
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     initDb(conn);
+    conn.close();
 
     return sqlSessionFactory;
   }
@@ -110,6 +111,7 @@ private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {
 
     configuration.addMapper(MultipleCrossIncludePersonMapper.class);
     configuration.addMapper(MultipleCrossIncludePetMapper.class);
+    c.close();
 
     return new SqlSessionFactoryBuilder().build(configuration);
   }

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleIncludeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -67,6 +67,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {
 
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     initDb(conn);
+    conn.close();
 
     return sqlSessionFactory;
   }
@@ -82,6 +83,7 @@ private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {
     configuration.setEnvironment(environment);
 
     configuration.addMapper(MultipleIncludePersonMapper.class);
+    c.close();
 
     return new SqlSessionFactoryBuilder().build(configuration);
   }

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleReverseIncludeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -67,6 +67,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {
 
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     initDb(conn);
+    conn.close();
 
     return sqlSessionFactory;
   }
@@ -82,6 +83,7 @@ private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {
     configuration.setEnvironment(environment);
 
     configuration.addMapper(MultipleReverseIncludePersonMapper.class);
+    c.close();
 
     return new SqlSessionFactoryBuilder().build(configuration);
   }

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/NonFullyQualifiedNamespaceTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -64,6 +64,7 @@ public void testCrossReferenceXmlConfig() throws Exception {
             assertEquals((Integer)2, pet2.getOwner().getId());
         }
         finally {
+            conn.close();
             sqlSession.close();
         }
     }

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/ParameterMapReferenceTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -68,6 +68,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {
 
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     initDb(conn);
+    conn.close();
 
     return sqlSessionFactory;
   }
@@ -84,6 +85,7 @@ private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {
 
     configuration.addMapper(ParameterMapReferencePersonMapper.class);
     configuration.addMapper(ParameterMapReferencePetMapper.class);
+    c.close();
 
     return new SqlSessionFactoryBuilder().build(configuration);
   }

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/ResultMapExtendsTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -67,6 +67,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {
 
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     initDb(conn);
+    conn.close();
 
     return sqlSessionFactory;
   }
@@ -83,6 +84,7 @@ private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {
 
     configuration.addMapper(ResultMapReferencePersonMapper.class);
     configuration.addMapper(ResultMapReferencePetMapper.class);
+    c.close();
 
     return new SqlSessionFactoryBuilder().build(configuration);
   }

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/ResultMapReferenceTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -67,6 +67,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {
 
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     initDb(conn);
+    conn.close();
 
     return sqlSessionFactory;
   }
@@ -83,6 +84,7 @@ private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {
 
     configuration.addMapper(ResultMapReferencePersonMapper.class);
     configuration.addMapper(ResultMapReferencePetMapper.class);
+    c.close();
 
     return new SqlSessionFactoryBuilder().build(configuration);
   }

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/ReverseIncludeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -67,6 +67,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {
 
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     initDb(conn);
+    conn.close();
 
     return sqlSessionFactory;
   }
@@ -82,6 +83,7 @@ private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {
     configuration.setEnvironment(environment);
 
     configuration.addMapper(ReverseIncludePersonMapper.class);
+    c.close();
 
     return new SqlSessionFactoryBuilder().build(configuration);
   }

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/SameIdTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -75,6 +75,7 @@ private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {
 
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     initDb(conn);
+    conn.close();
 
     return sqlSessionFactory;
   }
@@ -91,6 +92,7 @@ private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {
 
     configuration.addMapper(SameIdPersonMapper.class);
     configuration.addMapper(SameIdPetMapper.class);
+    c.close();
 
     return new SqlSessionFactoryBuilder().build(configuration);
   }

File: src/test/java/org/apache/ibatis/submitted/xml_references/EnumWithOgnlTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -51,5 +51,6 @@ public void testMixedConfiguration() throws Exception {
       Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/xml_references/ibatisConfig.xml");
       SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);
       sqlSessionFactory.getConfiguration().addMapper(PersonMapper2.class);
+      reader.close();
     }
 }

File: src/main/java/org/apache/ibatis/cache/CacheKey.java
Patch:
@@ -37,7 +37,7 @@ public class CacheKey implements Cloneable, Serializable {
   private int hashcode;
   private long checksum;
   private int count;
-  private List<Object> updateList;
+  private transient List<Object> updateList;
 
   public CacheKey() {
     this.hashcode = DEFAULT_HASHCODE;

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -507,7 +507,7 @@ private List<UnMappedColumnAutoMapping> createAutomaticMappings(ResultSetWrapper
   private boolean applyAutomaticMappings(ResultSetWrapper rsw, ResultMap resultMap, MetaObject metaObject, String columnPrefix) throws SQLException {
     List<UnMappedColumnAutoMapping> autoMapping = createAutomaticMappings(rsw, resultMap, metaObject, columnPrefix);
     boolean foundValues = false;
-    if (autoMapping.size() > 0) {
+    if (!autoMapping.isEmpty()) {
       for (UnMappedColumnAutoMapping mapping : autoMapping) {
         final Object value = mapping.typeHandler.getResult(rsw.getResultSet(), mapping.column);
         if (value != null) {
@@ -1012,7 +1012,7 @@ private CacheKey createRowKey(ResultMap resultMap, ResultSetWrapper rsw, String
     final CacheKey cacheKey = new CacheKey();
     cacheKey.update(resultMap.getId());
     List<ResultMapping> resultMappings = getResultMappingsForRowKey(resultMap);
-    if (resultMappings.size() == 0) {
+    if (resultMappings.isEmpty()) {
       if (Map.class.isAssignableFrom(resultMap.getType())) {
         createRowKeyForMap(rsw, cacheKey);
       } else {
@@ -1043,7 +1043,7 @@ private CacheKey combineKeys(CacheKey rowKey, CacheKey parentRowKey) {
 
   private List<ResultMapping> getResultMappingsForRowKey(ResultMap resultMap) {
     List<ResultMapping> resultMappings = resultMap.getIdResultMappings();
-    if (resultMappings.size() == 0) {
+    if (resultMappings.isEmpty()) {
       resultMappings = resultMap.getPropertyResultMappings();
     }
     return resultMappings;

File: src/test/java/org/apache/ibatis/autoconstructor/AutoConstructorTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.ibatis.session.SqlSession;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
-import org.hamcrest.CoreMatchers;
+import org.assertj.core.api.Assertions;
 import org.junit.Assert;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -109,6 +109,6 @@ public void badSubject() {
 
   private void verifySubjects(final List<?> subjects) {
     Assert.assertNotNull(subjects);
-    Assert.assertThat(subjects.size(), CoreMatchers.equalTo(3));
+    Assertions.assertThat(subjects.size()).isEqualTo(3);
   }
 }

File: src/test/java/org/apache/ibatis/jdbc/SQLTest.java
Patch:
@@ -15,11 +15,10 @@
  */
 package org.apache.ibatis.jdbc;
 
-import org.hamcrest.CoreMatchers;
 import org.junit.Test;
 
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertThat;
 
 public class SQLTest {
 
@@ -302,6 +301,6 @@ public void variableLengthArgumentOnIntoColumnsAndValues() {
   @Test
   public void fixFor903UpdateJoins() {
     final SQL sql = new SQL().UPDATE("table1 a").INNER_JOIN("table2 b USING (ID)").SET("a.value = b.value");
-    assertThat(sql.toString(), CoreMatchers.equalTo("UPDATE table1 a\nINNER JOIN table2 b USING (ID)\nSET a.value = b.value"));
+    assertThat(sql.toString()).isEqualTo("UPDATE table1 a\nINNER JOIN table2 b USING (ID)\nSET a.value = b.value");
   }
 }

File: src/test/java/org/apache/ibatis/scripting/defaults/DefaultParameterHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -34,7 +34,6 @@
 
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyInt;
-import static org.mockito.ArgumentMatchers.anyObject;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: src/test/java/org/apache/ibatis/submitted/blocking_cache/BlockingCacheTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -85,7 +85,7 @@ private void accessDB() {
       try {
         Thread.sleep(500);
       } catch (InterruptedException e) {
-        e.printStackTrace();
+        Assert.fail(e.getMessage());
       }
     } finally {
       sqlSession1.close();

File: src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls_again/MyBatisTest.java
Patch:
@@ -43,8 +43,6 @@ public void test() {
     try {
       ParentBean parentBean = session.selectOne("test");
       Assert.assertEquals("p1", parentBean.getName());
-//    Assert.assertThat(parentBean.toString(), CoreMatchers.is("ParentBean [name=p1, client=ChildBean [name=null, child=ChildBean [name=null, child=null, beans=null], beans=null]]"));      
-      
     } finally {
       session.close();
     }

File: src/test/java/org/apache/ibatis/submitted/null_associations/FooMapperTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -42,7 +42,7 @@ public static void setUpBeforeClass() {
       Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/null_associations/create-schema-mysql.sql");
       runner.runScript(reader);
     } catch (Exception ex) {
-      ex.printStackTrace();
+      Assert.fail(ex.getMessage());
     }
   }
 

File: src/test/java/org/apache/ibatis/submitted/overwritingproperties/FooMapperTest.java
Patch:
@@ -43,7 +43,7 @@ public static void setUpBeforeClass() {
       Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/overwritingproperties/create-schema-mysql.sql");
       runner.runScript(reader);
     } catch (Exception ex) {
-      ex.printStackTrace();
+      Assert.fail(ex.getMessage());
     }
   }
 

File: src/test/java/org/apache/ibatis/type/ClobReaderTypeHandlerTest.java
Patch:
@@ -33,10 +33,9 @@
 import java.io.*;
 import java.sql.Clob;
 
-import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -144,7 +143,7 @@ public void integrationTest() throws IOException {
       // select (Clob -> Reader)
       {
         ClobContent clobContent = mapper.findOne(1);
-        assertThat(new BufferedReader(clobContent.getContent()).readLine(), is("Hello"));
+        assertThat(new BufferedReader(clobContent.getContent()).readLine()).isEqualTo("Hello");
       }
     } finally {
       session.close();

File: src/test/java/org/apache/ibatis/submitted/blocking_cache/BlockingCacheTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -85,7 +85,7 @@ private void accessDB() {
       try {
         Thread.sleep(500);
       } catch (InterruptedException e) {
-        e.printStackTrace();
+        Assert.fail(e.getMessage());
       }
     } finally {
       sqlSession1.close();

File: src/test/java/org/apache/ibatis/submitted/null_associations/FooMapperTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -42,7 +42,7 @@ public static void setUpBeforeClass() {
       Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/null_associations/create-schema-mysql.sql");
       runner.runScript(reader);
     } catch (Exception ex) {
-      ex.printStackTrace();
+      Assert.fail(ex.getMessage());
     }
   }
 

File: src/test/java/org/apache/ibatis/submitted/overwritingproperties/FooMapperTest.java
Patch:
@@ -43,7 +43,7 @@ public static void setUpBeforeClass() {
       Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/overwritingproperties/create-schema-mysql.sql");
       runner.runScript(reader);
     } catch (Exception ex) {
-      ex.printStackTrace();
+      Assert.fail(ex.getMessage());
     }
   }
 

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -238,10 +238,11 @@ private Map<JdbcType, TypeHandler<?>> getJdbcHandlerMap(Type type) {
   private Map<JdbcType, TypeHandler<?>> getJdbcHandlerMapForEnumInterfaces(Class<?> clazz) {
     for (Class<?> iface : clazz.getInterfaces()) {
       Map<JdbcType, TypeHandler<?>> jdbcHandlerMap = TYPE_HANDLER_MAP.get(iface);
+      if (jdbcHandlerMap == null) {
+        jdbcHandlerMap = getJdbcHandlerMapForEnumInterfaces(iface);
+      }
       if (jdbcHandlerMap != null) {
         return jdbcHandlerMap;
-      } else {
-        return getJdbcHandlerMapForEnumInterfaces(iface);
       }
     }
     return null;

File: src/test/java/org/apache/ibatis/submitted/mapper_extend/ParentMapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,7 +17,7 @@
 
 import org.apache.ibatis.annotations.Select;
 
-public interface ParentMapper {
+public interface ParentMapper extends GrandpaMapper {
   
   User getUserXML();
   

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -95,7 +95,7 @@ public void parse() {
     }
 
     parsePendingResultMaps();
-    parsePendingChacheRefs();
+    parsePendingCacheRefs();
     parsePendingStatements();
   }
 
@@ -154,7 +154,7 @@ private void parsePendingResultMaps() {
     }
   }
 
-  private void parsePendingChacheRefs() {
+  private void parsePendingCacheRefs() {
     Collection<CacheRefResolver> incompleteCacheRefs = configuration.getIncompleteCacheRefs();
     synchronized (incompleteCacheRefs) {
       Iterator<CacheRefResolver> iter = incompleteCacheRefs.iterator();

File: src/test/java/org/apache/ibatis/autoconstructor/AutoConstructorMapper.java
Patch:
@@ -31,4 +31,7 @@ public interface AutoConstructorMapper {
 
   @Select("SELECT * FROM subject")
   List<AnnotatedSubject> getAnnotatedSubjects();
+
+  @Select("SELECT * FROM subject")
+  List<BadSubject> getBadSubjects();
 }

File: src/main/java/org/apache/ibatis/annotations/Arg.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -44,4 +44,6 @@
   String select() default "";
 
   String resultMap() default "";
+
+  String name() default "";
 }

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -592,7 +592,7 @@ private void applyConstructorArgs(Arg[] args, Class<?> resultType, List<ResultMa
               (arg.typeHandler() == UnknownTypeHandler.class ? null : arg.typeHandler());
       ResultMapping resultMapping = assistant.buildResultMapping(
           resultType,
-          null,
+          nullOrEmpty(arg.name()),
           nullOrEmpty(arg.column()),
           arg.javaType() == void.class ? null : arg.javaType(),
           arg.jdbcType() == JdbcType.UNDEFINED ? null : arg.jdbcType(),

File: src/test/java/org/apache/ibatis/submitted/automapping/Mapper.java
Patch:
@@ -21,6 +21,8 @@ public interface Mapper {
 
   User getUser(Integer id);
 
+  User getUserWithPhoneNumber(Integer id);
+
   User getUserWithPets_Inline(Integer id);
 
   User getUserWithPets_External(Integer id);

File: src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -103,7 +103,7 @@ public void parseStatementNode() {
     } else {
       keyGenerator = context.getBooleanAttribute("useGeneratedKeys",
           configuration.isUseGeneratedKeys() && SqlCommandType.INSERT.equals(sqlCommandType))
-          ? new Jdbc3KeyGenerator() : new NoKeyGenerator();
+          ? Jdbc3KeyGenerator.INSTANCE : NoKeyGenerator.INSTANCE;
     }
 
     builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,
@@ -142,7 +142,7 @@ private void parseSelectKeyNode(String id, XNode nodeToHandle, Class<?> paramete
     //defaults
     boolean useCache = false;
     boolean resultOrdered = false;
-    KeyGenerator keyGenerator = new NoKeyGenerator();
+    KeyGenerator keyGenerator = NoKeyGenerator.INSTANCE;
     Integer fetchSize = null;
     Integer timeout = null;
     boolean flushCache = false;

File: src/main/java/org/apache/ibatis/mapping/MappedStatement.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -72,7 +72,7 @@ public Builder(Configuration configuration, String id, SqlSource sqlSource, SqlC
       mappedStatement.parameterMap = new ParameterMap.Builder(configuration, "defaultParameterMap", null, new ArrayList<ParameterMapping>()).build();
       mappedStatement.resultMaps = new ArrayList<ResultMap>();
       mappedStatement.sqlCommandType = sqlCommandType;
-      mappedStatement.keyGenerator = configuration.isUseGeneratedKeys() && SqlCommandType.INSERT.equals(sqlCommandType) ? new Jdbc3KeyGenerator() : new NoKeyGenerator();
+      mappedStatement.keyGenerator = configuration.isUseGeneratedKeys() && SqlCommandType.INSERT.equals(sqlCommandType) ? Jdbc3KeyGenerator.INSTANCE : NoKeyGenerator.INSTANCE;
       String logId = id;
       if (configuration.getLogPrefix() != null) {
         logId = configuration.getLogPrefix() + id;

File: src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -101,7 +101,7 @@ public static MappedStatement prepareInsertAuthorMappedStatementWithAutoKey(fina
               }
             }).build())
         .cache(authorCache)
-        .keyGenerator(new Jdbc3KeyGenerator())
+        .keyGenerator(Jdbc3KeyGenerator.INSTANCE)
         .keyProperty("id")
         .build();
     return ms;

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -36,6 +36,7 @@
 
 /**
  * @author Clinton Begin
+ * @author Kazuki Shimizu
  */
 public final class TypeHandlerRegistry {
 
@@ -142,6 +143,7 @@ public TypeHandlerRegistry() {
       register("java.time.Month", "org.apache.ibatis.type.MonthTypeHandler");
       register("java.time.Year", "org.apache.ibatis.type.YearTypeHandler");
       // since 1.0.2
+      register("java.time.YearMonth", "org.apache.ibatis.type.YearMonthTypeHandler");
       register("java.time.chrono.JapaneseDate", "org.apache.ibatis.type.JapaneseDateTypeHandler");
 
     } catch (ClassNotFoundException e) {

File: src/test/java/org/apache/ibatis/scripting/defaults/DefaultParameterHandlerTest.java
Patch:
@@ -52,8 +52,8 @@ public void setParametersThrowsProperException() throws SQLException {
     final Object parameterObject = null;
     final BoundSql boundSql = mock(BoundSql.class);
 
-    TypeHandler<String> typeHandler = mock(TypeHandler.class);
-    doThrow(new SQLException("foo")).when(typeHandler).setParameter(any(PreparedStatement.class), anyInt(), (String) anyObject(), any(JdbcType.class));
+    TypeHandler<Object> typeHandler = mock(TypeHandler.class);
+    doThrow(new SQLException("foo")).when(typeHandler).setParameter(any(PreparedStatement.class), anyInt(), any(), any(JdbcType.class));
     ParameterMapping parameterMapping = new ParameterMapping.Builder(mappedStatement.getConfiguration(), "prop", typeHandler).build();
     List<ParameterMapping> parameterMappings = Collections.singletonList(parameterMapping);
     when(boundSql.getParameterMappings()).thenReturn(parameterMappings);

File: src/main/java/org/apache/ibatis/reflection/Reflector.java
Patch:
@@ -129,7 +129,7 @@ private void resolveGetterConflicts(Map<String, List<Method>> conflictingGetters
           if (methodType.equals(getterType)) {
             throw new ReflectionException("Illegal overloaded getter method with ambiguous type for property "
                 + propName + " in class " + firstMethod.getDeclaringClass()
-                + ".  This breaks the JavaBeans " + "specification and can cause unpredicatble results.");
+                + ".  This breaks the JavaBeans " + "specification and can cause unpredictable results.");
           } else if (methodType.isAssignableFrom(getterType)) {
             // OK getter type is descendant
           } else if (getterType.isAssignableFrom(methodType)) {
@@ -138,7 +138,7 @@ private void resolveGetterConflicts(Map<String, List<Method>> conflictingGetters
           } else {
             throw new ReflectionException("Illegal overloaded getter method with ambiguous type for property "
                 + propName + " in class " + firstMethod.getDeclaringClass()
-                + ".  This breaks the JavaBeans " + "specification and can cause unpredicatble results.");
+                + ".  This breaks the JavaBeans " + "specification and can cause unpredictable results.");
           }
         }
         addGetMethod(propName, getter);

File: src/main/java/org/apache/ibatis/reflection/Reflector.java
Patch:
@@ -129,7 +129,7 @@ private void resolveGetterConflicts(Map<String, List<Method>> conflictingGetters
           if (methodType.equals(getterType)) {
             throw new ReflectionException("Illegal overloaded getter method with ambiguous type for property "
                 + propName + " in class " + firstMethod.getDeclaringClass()
-                + ".  This breaks the JavaBeans " + "specification and can cause unpredicatble results.");
+                + ".  This breaks the JavaBeans " + "specification and can cause unpredictable results.");
           } else if (methodType.isAssignableFrom(getterType)) {
             // OK getter type is descendant
           } else if (getterType.isAssignableFrom(methodType)) {
@@ -138,7 +138,7 @@ private void resolveGetterConflicts(Map<String, List<Method>> conflictingGetters
           } else {
             throw new ReflectionException("Illegal overloaded getter method with ambiguous type for property "
                 + propName + " in class " + firstMethod.getDeclaringClass()
-                + ".  This breaks the JavaBeans " + "specification and can cause unpredicatble results.");
+                + ".  This breaks the JavaBeans " + "specification and can cause unpredictable results.");
           }
         }
         addGetMethod(propName, getter);

File: src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomObjectFactory.java
Patch:
@@ -33,8 +33,6 @@
 
 public class CustomObjectFactory implements ObjectFactory {
 
-    private static final long serialVersionUID = -8855120656940914948L;
-
     @Override
     public <T> T create(Class<T> type) {
         return create(type, null, null);

File: src/test/java/org/apache/ibatis/io/ExternalResourcesTest.java
Patch:
@@ -86,6 +86,7 @@ public void testGetConfiguredTemplate() {
       FileWriter fileWriter = new FileWriter(tempFile);
       fileWriter.append("new_command.template=templates/col_new_template_migration.sql");
       fileWriter.flush();
+      fileWriter.close();
       templateName = ExternalResources.getConfiguredTemplate(tempFile.getAbsolutePath(), "new_command.template");
       assertEquals("templates/col_new_template_migration.sql", templateName);
     } catch (Exception e) {

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -203,10 +203,10 @@ private void parseCacheRef() {
       Class<?> refType = cacheDomainRef.value();
       String refName = cacheDomainRef.name();
       if (refType == void.class && refName.isEmpty()) {
-        throw new BuilderException("Should be specified either value() and namespace() attribute in the @CacheNamespaceRef");
+        throw new BuilderException("Should be specified either value() or name() attribute in the @CacheNamespaceRef");
       }
       if (refType != void.class && !refName.isEmpty()) {
-        throw new BuilderException("Cannot use both value() and namespace() attribute in the @CacheNamespaceRef");
+        throw new BuilderException("Cannot use both value() and name() attribute in the @CacheNamespaceRef");
       }
       String namespace = (refType != void.class) ? refType.getName() : refName;
       assistant.useCacheRef(namespace);

File: src/test/java/org/apache/ibatis/submitted/cache/CacheTest.java
Patch:
@@ -358,7 +358,7 @@ public void shouldErrorUnsupportedProperties() {
   @Test
   public void shouldErrorInvalidCacheNamespaceRefAttributesSpecifyBoth() {
     expectedException.expect(BuilderException.class);
-    expectedException.expectMessage("Cannot use both value() and namespace() attribute in the @CacheNamespaceRef");
+    expectedException.expectMessage("Cannot use both value() and name() attribute in the @CacheNamespaceRef");
 
     sqlSessionFactory.getConfiguration().getMapperRegistry()
         .addMapper(InvalidCacheNamespaceRefBothMapper.class);
@@ -367,7 +367,7 @@ public void shouldErrorInvalidCacheNamespaceRefAttributesSpecifyBoth() {
   @Test
   public void shouldErrorInvalidCacheNamespaceRefAttributesIsEmpty() {
     expectedException.expect(BuilderException.class);
-    expectedException.expectMessage("Should be specified either value() and namespace() attribute in the @CacheNamespaceRef");
+    expectedException.expectMessage("Should be specified either value() or name() attribute in the @CacheNamespaceRef");
 
     sqlSessionFactory.getConfiguration().getMapperRegistry()
         .addMapper(InvalidCacheNamespaceRefEmptyMapper.class);

File: src/test/java/org/apache/ibatis/submitted/cache/ImportantPersonMapper.java
Patch:
@@ -22,7 +22,7 @@
 
 import java.util.List;
 
-@CacheNamespaceRef(PersonMapper.class)
+@CacheNamespaceRef(PersonMapper.class) // by type
 public interface ImportantPersonMapper {
 
   @Select("select id, firstname, lastname from person")

File: src/test/java/org/apache/ibatis/submitted/array_result_type/ArrayResultTypeTest.java
Patch:
@@ -88,12 +88,10 @@ public void shouldGetSimpleTypeArray() {
     }
   }
 
-  @Test(expected = ClassCastException.class)
+  @Test
   public void shouldGetPrimitiveArray() {
     SqlSession sqlSession = sqlSessionFactory.openSession();
     try {
-      // Throwing an exception is the expected behavior
-      // until #555 is fixed
       Mapper mapper = sqlSession.getMapper(Mapper.class);
       int[] ids = mapper.getUserIdsPrimitive();
       assertEquals(1, ids[0]);

File: src/test/java/org/apache/ibatis/submitted/array_result_type/ArrayResultTypeTest.java
Patch:
@@ -88,12 +88,10 @@ public void shouldGetSimpleTypeArray() {
     }
   }
 
-  @Test(expected = ClassCastException.class)
+  @Test
   public void shouldGetPrimitiveArray() {
     SqlSession sqlSession = sqlSessionFactory.openSession();
     try {
-      // Throwing an exception is the expected behavior
-      // until #555 is fixed
       Mapper mapper = sqlSession.getMapper(Mapper.class);
       int[] ids = mapper.getUserIdsPrimitive();
       assertEquals(1, ids[0]);

File: src/test/java/org/apache/ibatis/submitted/immutable_constructor/ImmutablePOJOTest.java
Patch:
@@ -73,8 +73,8 @@ public void shouldLoadImmutablePOJOBySignature() {
       final ImmutablePOJOMapper mapper = session.getMapper(ImmutablePOJOMapper.class);
       final ImmutablePOJO pojo = mapper.getImmutablePOJO(POJO_ID);
 
-      assertEquals(POJO_ID, pojo.getId());
-      assertEquals(POJO_DESCRIPTION, pojo.getDescription());
+      assertEquals(POJO_ID, pojo.getImmutableId());
+      assertEquals(POJO_DESCRIPTION, pojo.getImmutableDescription());
     } finally {
       session.close();
     }

File: src/test/java/org/apache/ibatis/submitted/immutable_constructor/ImmutablePOJOTest.java
Patch:
@@ -73,8 +73,8 @@ public void shouldLoadImmutablePOJOBySignature() {
       final ImmutablePOJOMapper mapper = session.getMapper(ImmutablePOJOMapper.class);
       final ImmutablePOJO pojo = mapper.getImmutablePOJO(POJO_ID);
 
-      assertEquals(POJO_ID, pojo.getId());
-      assertEquals(POJO_DESCRIPTION, pojo.getDescription());
+      assertEquals(POJO_ID, pojo.getImmutableId());
+      assertEquals(POJO_DESCRIPTION, pojo.getImmutableDescription());
     } finally {
       session.close();
     }

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -240,7 +240,7 @@ private void settingsElement(Properties props) throws Exception {
     configuration.setCacheEnabled(booleanValueOf(props.getProperty("cacheEnabled"), true));
     configuration.setProxyFactory((ProxyFactory) createInstance(props.getProperty("proxyFactory")));
     configuration.setLazyLoadingEnabled(booleanValueOf(props.getProperty("lazyLoadingEnabled"), false));
-    configuration.setAggressiveLazyLoading(booleanValueOf(props.getProperty("aggressiveLazyLoading"), true));
+    configuration.setAggressiveLazyLoading(booleanValueOf(props.getProperty("aggressiveLazyLoading"), false));
     configuration.setMultipleResultSetsEnabled(booleanValueOf(props.getProperty("multipleResultSetsEnabled"), true));
     configuration.setUseColumnLabel(booleanValueOf(props.getProperty("useColumnLabel"), true));
     configuration.setUseGeneratedKeys(booleanValueOf(props.getProperty("useGeneratedKeys"), false));

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -100,7 +100,7 @@ public class Configuration {
   protected boolean safeRowBoundsEnabled = false;
   protected boolean safeResultHandlerEnabled = true;
   protected boolean mapUnderscoreToCamelCase = false;
-  protected boolean aggressiveLazyLoading = true;
+  protected boolean aggressiveLazyLoading = false;
   protected boolean multipleResultSetsEnabled = true;
   protected boolean useGeneratedKeys = false;
   protected boolean useColumnLabel = true;

File: src/test/java/org/apache/ibatis/builder/XmlConfigBuilderTest.java
Patch:
@@ -81,7 +81,7 @@ public void shouldSuccessfullyLoadMinimalXMLConfigFile() throws Exception {
     assertThat(config.isCacheEnabled(), is(true));
     assertThat(config.getProxyFactory(), is(instanceOf(JavassistProxyFactory.class)));
     assertThat(config.isLazyLoadingEnabled(), is(false));
-    assertThat(config.isAggressiveLazyLoading(), is(true));
+    assertThat(config.isAggressiveLazyLoading(), is(false));
     assertThat(config.isMultipleResultSetsEnabled(), is(true));
     assertThat(config.isUseColumnLabel(), is(true));
     assertThat(config.isUseGeneratedKeys(), is(false));
@@ -172,7 +172,7 @@ public void shouldSuccessfullyLoadXMLConfigFile() throws Exception {
       assertThat(config.isCacheEnabled(), is(false));
       assertThat(config.getProxyFactory(), is(instanceOf(CglibProxyFactory.class)));
       assertThat(config.isLazyLoadingEnabled(), is(true));
-      assertThat(config.isAggressiveLazyLoading(), is(false));
+      assertThat(config.isAggressiveLazyLoading(), is(true));
       assertThat(config.isMultipleResultSetsEnabled(), is(false));
       assertThat(config.isUseColumnLabel(), is(false));
       assertThat(config.isUseGeneratedKeys(), is(true));

File: src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java
Patch:
@@ -147,7 +147,7 @@ public Object intercept(Object enhanced, Method method, Object[] args, MethodPro
             if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {
               if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {
                 lazyLoader.loadAll();
-              } else if (PropertyNamer.isProperty(methodName)) {
+              } else if (PropertyNamer.isGetter(methodName)) {
                 final String property = PropertyNamer.methodToProperty(methodName);
                 if (lazyLoader.hasLoader(property)) {
                   lazyLoader.load(property);

File: src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java
Patch:
@@ -149,7 +149,7 @@ public Object invoke(Object enhanced, Method method, Method methodProxy, Object[
             if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {
               if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {
                 lazyLoader.loadAll();
-              } else if (PropertyNamer.isProperty(methodName)) {
+              } else if (PropertyNamer.isGetter(methodName)) {
                 final String property = PropertyNamer.methodToProperty(methodName);
                 if (lazyLoader.hasLoader(property)) {
                   lazyLoader.load(property);

File: src/main/java/org/apache/ibatis/mapping/VendorDatabaseIdProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2016 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,6 @@
 
 import javax.sql.DataSource;
 
-import org.apache.ibatis.executor.BaseExecutor;
 import org.apache.ibatis.logging.Log;
 import org.apache.ibatis.logging.LogFactory;
 
@@ -40,7 +39,7 @@
  */
 public class VendorDatabaseIdProvider implements DatabaseIdProvider {
   
-  private static final Log log = LogFactory.getLog(BaseExecutor.class);
+  private static final Log log = LogFactory.getLog(VendorDatabaseIdProvider.class);
 
   private Properties properties;
 

File: src/main/java/org/apache/ibatis/mapping/VendorDatabaseIdProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2016 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,6 @@
 
 import javax.sql.DataSource;
 
-import org.apache.ibatis.executor.BaseExecutor;
 import org.apache.ibatis.logging.Log;
 import org.apache.ibatis.logging.LogFactory;
 
@@ -40,7 +39,7 @@
  */
 public class VendorDatabaseIdProvider implements DatabaseIdProvider {
   
-  private static final Log log = LogFactory.getLog(BaseExecutor.class);
+  private static final Log log = LogFactory.getLog(VendorDatabaseIdProvider.class);
 
   private Properties properties;
 

File: src/main/java/org/apache/ibatis/mapping/MappedStatement.java
Patch:
@@ -78,7 +78,7 @@ public Builder(Configuration configuration, String id, SqlSource sqlSource, SqlC
         logId = configuration.getLogPrefix() + id;
       }
       mappedStatement.statementLog = LogFactory.getLog(logId);
-      mappedStatement.lang = configuration.getDefaultScriptingLanuageInstance();
+      mappedStatement.lang = configuration.getDefaultScriptingLanguageInstance();
     }
 
     public Builder resource(String resource) {

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -505,7 +505,7 @@ public void setDefaultScriptingLanguage(Class<?> driver) {
     getLanguageRegistry().setDefaultDriverClass(driver);
   }
 
-  public LanguageDriver getDefaultScriptingLanuageInstance() {
+  public LanguageDriver getDefaultScriptingLanguageInstance() {
     return languageRegistry.getDefaultDriver();
   }
 

File: src/test/java/org/apache/ibatis/builder/XmlConfigBuilderTest.java
Patch:
@@ -94,7 +94,7 @@ public void shouldSuccessfullyLoadMinimalXMLConfigFile() throws Exception {
     assertThat(config.getJdbcTypeForNull(), is(JdbcType.OTHER));
     assertThat(config.getLazyLoadTriggerMethods(), is((Set<String>) new HashSet<String>(Arrays.asList("equals", "clone", "hashCode", "toString"))));
     assertThat(config.isSafeResultHandlerEnabled(), is(true));
-      assertThat(config.getDefaultScriptingLanuageInstance(), is(instanceOf(XMLLanguageDriver.class)));
+      assertThat(config.getDefaultScriptingLanguageInstance(), is(instanceOf(XMLLanguageDriver.class)));
     assertThat(config.isCallSettersOnNulls(), is(false));
     assertNull(config.getLogPrefix());
     assertNull(config.getLogImpl());
@@ -185,7 +185,7 @@ public void shouldSuccessfullyLoadXMLConfigFile() throws Exception {
       assertThat(config.getJdbcTypeForNull(), is(JdbcType.NULL));
       assertThat(config.getLazyLoadTriggerMethods(), is((Set<String>) new HashSet<String>(Arrays.asList("equals", "clone", "hashCode", "toString", "xxx"))));
       assertThat(config.isSafeResultHandlerEnabled(), is(false));
-      assertThat(config.getDefaultScriptingLanuageInstance(), is(instanceOf(RawLanguageDriver.class)));
+      assertThat(config.getDefaultScriptingLanguageInstance(), is(instanceOf(RawLanguageDriver.class)));
       assertThat(config.isCallSettersOnNulls(), is(true));
       assertThat(config.getLogPrefix(), is("mybatis_"));
       assertThat(config.getLogImpl().getName(), is(Slf4jImpl.class.getName()));

File: src/main/java/org/apache/ibatis/mapping/MappedStatement.java
Patch:
@@ -78,7 +78,7 @@ public Builder(Configuration configuration, String id, SqlSource sqlSource, SqlC
         logId = configuration.getLogPrefix() + id;
       }
       mappedStatement.statementLog = LogFactory.getLog(logId);
-      mappedStatement.lang = configuration.getDefaultScriptingLanuageInstance();
+      mappedStatement.lang = configuration.getDefaultScriptingLanguageInstance();
     }
 
     public Builder resource(String resource) {

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -505,7 +505,7 @@ public void setDefaultScriptingLanguage(Class<?> driver) {
     getLanguageRegistry().setDefaultDriverClass(driver);
   }
 
-  public LanguageDriver getDefaultScriptingLanuageInstance() {
+  public LanguageDriver getDefaultScriptingLanguageInstance() {
     return languageRegistry.getDefaultDriver();
   }
 

File: src/test/java/org/apache/ibatis/builder/XmlConfigBuilderTest.java
Patch:
@@ -94,7 +94,7 @@ public void shouldSuccessfullyLoadMinimalXMLConfigFile() throws Exception {
     assertThat(config.getJdbcTypeForNull(), is(JdbcType.OTHER));
     assertThat(config.getLazyLoadTriggerMethods(), is((Set<String>) new HashSet<String>(Arrays.asList("equals", "clone", "hashCode", "toString"))));
     assertThat(config.isSafeResultHandlerEnabled(), is(true));
-      assertThat(config.getDefaultScriptingLanuageInstance(), is(instanceOf(XMLLanguageDriver.class)));
+      assertThat(config.getDefaultScriptingLanguageInstance(), is(instanceOf(XMLLanguageDriver.class)));
     assertThat(config.isCallSettersOnNulls(), is(false));
     assertNull(config.getLogPrefix());
     assertNull(config.getLogImpl());
@@ -185,7 +185,7 @@ public void shouldSuccessfullyLoadXMLConfigFile() throws Exception {
       assertThat(config.getJdbcTypeForNull(), is(JdbcType.NULL));
       assertThat(config.getLazyLoadTriggerMethods(), is((Set<String>) new HashSet<String>(Arrays.asList("equals", "clone", "hashCode", "toString", "xxx"))));
       assertThat(config.isSafeResultHandlerEnabled(), is(false));
-      assertThat(config.getDefaultScriptingLanuageInstance(), is(instanceOf(RawLanguageDriver.class)));
+      assertThat(config.getDefaultScriptingLanguageInstance(), is(instanceOf(RawLanguageDriver.class)));
       assertThat(config.isCallSettersOnNulls(), is(true));
       assertThat(config.getLogPrefix(), is("mybatis_"));
       assertThat(config.getLogImpl().getName(), is(Slf4jImpl.class.getName()));

File: src/main/java/org/apache/ibatis/mapping/BoundSql.java
Patch:
@@ -62,9 +62,8 @@ public Object getParameterObject() {
   }
 
   public boolean hasAdditionalParameter(String name) {
-    PropertyTokenizer prop = new PropertyTokenizer(name);
-    String indexedName = prop.getIndexedName();
-    return additionalParameters.containsKey(indexedName);
+    String paramName = new PropertyTokenizer(name).getName();
+    return additionalParameters.containsKey(paramName);
   }
 
   public void setAdditionalParameter(String name, Object value) {

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2016 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -404,6 +404,8 @@ private PooledConnection popConnection(String username, String password) throws
                 }  
               }
               conn = new PooledConnection(oldestActiveConnection.getRealConnection(), this);
+              conn.setCreatedTimestamp(oldestActiveConnection.getCreatedTimestamp());
+              conn.setLastUsedTimestamp(oldestActiveConnection.getLastUsedTimestamp());
               oldestActiveConnection.invalidate();
               if (log.isDebugEnabled()) {
                 log.debug("Claimed overdue connection " + conn.getRealHashCode() + ".");

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -255,7 +255,7 @@ private void settingsElement(Properties props) throws Exception {
     configuration.setSafeResultHandlerEnabled(booleanValueOf(props.getProperty("safeResultHandlerEnabled"), true));
     configuration.setDefaultScriptingLanguage(resolveClass(props.getProperty("defaultScriptingLanguage")));
     configuration.setCallSettersOnNulls(booleanValueOf(props.getProperty("callSettersOnNulls"), false));
-    configuration.setUseActualParamName(booleanValueOf(props.getProperty("useActualParamName"), false));
+    configuration.setUseActualParamName(booleanValueOf(props.getProperty("useActualParamName"), true));
     configuration.setLogPrefix(props.getProperty("logPrefix"));
     @SuppressWarnings("unchecked")
     Class<? extends Log> logImpl = (Class<? extends Log>)resolveClass(props.getProperty("logImpl"));

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -255,7 +255,7 @@ private void settingsElement(Properties props) throws Exception {
     configuration.setSafeResultHandlerEnabled(booleanValueOf(props.getProperty("safeResultHandlerEnabled"), true));
     configuration.setDefaultScriptingLanguage(resolveClass(props.getProperty("defaultScriptingLanguage")));
     configuration.setCallSettersOnNulls(booleanValueOf(props.getProperty("callSettersOnNulls"), false));
-    configuration.setUseActualParamName(booleanValueOf(props.getProperty("useActualParamName"), false));
+    configuration.setUseActualParamName(booleanValueOf(props.getProperty("useActualParamName"), true));
     configuration.setLogPrefix(props.getProperty("logPrefix"));
     @SuppressWarnings("unchecked")
     Class<? extends Log> logImpl = (Class<? extends Log>)resolveClass(props.getProperty("logImpl"));

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -101,9 +101,9 @@ public Configuration parse() {
 
   private void parseConfiguration(XNode root) {
     try {
-      Properties settings = settingsAsPropertiess(root.evalNode("settings"));
       //issue #117 read properties first
       propertiesElement(root.evalNode("properties"));
+      Properties settings = settingsAsProperties(root.evalNode("settings"));
       loadCustomVfs(settings);
       typeAliasesElement(root.evalNode("typeAliases"));
       pluginElement(root.evalNode("plugins"));
@@ -121,7 +121,7 @@ private void parseConfiguration(XNode root) {
     }
   }
 
-  private Properties settingsAsPropertiess(XNode context) {
+  private Properties settingsAsProperties(XNode context) {
     if (context == null) {
       return new Properties();
     }

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -138,6 +138,8 @@ public TypeHandlerRegistry() {
       // since 1.0.1
       register("java.time.Month", "org.apache.ibatis.type.MonthTypeHandler");
       register("java.time.Year", "org.apache.ibatis.type.YearTypeHandler");
+      // since 1.0.2
+      register("java.time.chrono.JapaneseDate", "org.apache.ibatis.type.JapaneseDateTypeHandler");
 
     } catch (ClassNotFoundException e) {
       // no JSR-310 handlers

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -138,6 +138,8 @@ public TypeHandlerRegistry() {
       // since 1.0.1
       register("java.time.Month", "org.apache.ibatis.type.MonthTypeHandler");
       register("java.time.Year", "org.apache.ibatis.type.YearTypeHandler");
+      // since 1.0.2
+      register("java.time.chrono.JapaneseDate", "org.apache.ibatis.type.JapaneseDateTypeHandler");
 
     } catch (ClassNotFoundException e) {
       // no JSR-310 handlers

File: src/test/java/org/apache/ibatis/submitted/ancestor_ref/Mapper.java
Patch:
@@ -19,5 +19,6 @@ public interface Mapper {
 
   User getUserAssociation(Integer id);
   User getUserCollection(Integer id);
+  Blog selectBlog(Integer id);
 
 }

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -82,7 +82,7 @@ public Object execute(SqlSession sqlSession, Object[] args) {
       case FLUSH:
         result = sqlSession.flushStatements();
         break;
-      case default:
+      default:
         throw new BindingException("Unknown execution method for: " + command.getName());
     }
     if (result == null && method.getReturnType().isPrimitive() && !method.returnsVoid()) {

File: src/test/java/org/apache/ibatis/submitted/ancestor_ref/AncestorRefTest.java
Patch:
@@ -50,7 +50,6 @@ public static void setUp() throws Exception {
     session.close();
   }
 
-  @Ignore("issue #215")
   @Test
   public void testCircularAssociation() {
     SqlSession sqlSession = sqlSessionFactory.openSession();
@@ -63,7 +62,6 @@ public void testCircularAssociation() {
     }
   }
 
-  @Ignore("issue #215")
   @Test
   public void testCircularCollection() {
     SqlSession sqlSession = sqlSessionFactory.openSession();

File: src/main/java/org/apache/ibatis/reflection/ParamNameResolver.java
Patch:
@@ -87,7 +87,8 @@ public ParamNameResolver(Configuration config, Method method) {
         // @Param was not specified.
         if (config.isUseActualParamName()) {
           name = getActualParamName(method, paramIndex);
-        } else {
+        }
+        if (name == null) {
           // use the parameter index as the name ("0", "1", ...)
           // gcode issue #71
           name = String.valueOf(map.size());
@@ -100,7 +101,7 @@ public ParamNameResolver(Configuration config, Method method) {
 
   private String getActualParamName(Method method, int paramIndex) {
     if (GET_PARAMS == null) {
-      throw new ReflectionException("Method#getParameters() method does not exist. Relaunch on Java 8 or set false to useActualParamName.");
+      return null;
     }
     try {
       Object[] params = (Object[]) GET_PARAMS.invoke(method);

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -106,7 +106,7 @@ public class Configuration {
   protected boolean useColumnLabel = true;
   protected boolean cacheEnabled = true;
   protected boolean callSettersOnNulls = false;
-  protected boolean useActualParamName = false;
+  protected boolean useActualParamName = true;
 
   protected String logPrefix;
   protected Class <? extends Log> logImpl;

File: src/test/java/org/apache/ibatis/binding/BindingTest.java
Patch:
@@ -69,6 +69,7 @@ public static void setup() throws Exception {
     Environment environment = new Environment("Production", transactionFactory, dataSource);
     Configuration configuration = new Configuration(environment);
     configuration.setLazyLoadingEnabled(true);
+    configuration.setUseActualParamName(false); // to test legacy style reference (#{0} #{1})
     configuration.getTypeAliasRegistry().registerAlias(Blog.class);
     configuration.getTypeAliasRegistry().registerAlias(Post.class);
     configuration.getTypeAliasRegistry().registerAlias(Author.class);

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -259,7 +259,7 @@ public MethodSignature(Configuration configuration, Class<?> mapperInterface, Me
       this.returnsMap = (this.mapKey != null);
       this.rowBoundsIndex = getUniqueParamIndex(method, RowBounds.class);
       this.resultHandlerIndex = getUniqueParamIndex(method, ResultHandler.class);
-      this.paramNameResolver = new ParamNameResolver(method);
+      this.paramNameResolver = new ParamNameResolver(configuration, method);
     }
 
     public Object convertArgsToSqlCommandParam(Object[] args) {

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java
Patch:
@@ -53,7 +53,7 @@ public ProviderSqlSource(Configuration config, Object provider) {
                       + "'. Sql provider method can not overload.");
             }
             this.providerMethod = m;
-            this.providerMethodArgumentNames = new ParamNameResolver(m).getNames();
+            this.providerMethodArgumentNames = new ParamNameResolver(config, m).getNames();
           }
         }
       }

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -255,6 +255,7 @@ private void settingsElement(Properties props) throws Exception {
     configuration.setSafeResultHandlerEnabled(booleanValueOf(props.getProperty("safeResultHandlerEnabled"), true));
     configuration.setDefaultScriptingLanguage(resolveClass(props.getProperty("defaultScriptingLanguage")));
     configuration.setCallSettersOnNulls(booleanValueOf(props.getProperty("callSettersOnNulls"), false));
+    configuration.setUseActualParamName(booleanValueOf(props.getProperty("useActualParamName"), false));
     configuration.setLogPrefix(props.getProperty("logPrefix"));
     @SuppressWarnings("unchecked")
     Class<? extends Log> logImpl = (Class<? extends Log>)resolveClass(props.getProperty("logImpl"));

File: src/test/java/org/apache/ibatis/submitted/mapper_type_parameter/BaseMapper.java
Patch:
@@ -75,7 +75,7 @@ public String provideInsert(Map<String, Object> map) {
         }
         sql.append(" (#{list[" + i + "].id}, #{list[" + i + "].name})");
       }
-      return sql.toString();
+      return sql == null ? "" : sql.toString();
     }
 
     public String provideUpdate(Object param) {

File: src/test/java/org/apache/ibatis/submitted/mapper_type_parameter/BaseMapper.java
Patch:
@@ -75,7 +75,7 @@ public String provideInsert(Map<String, Object> map) {
         }
         sql.append(" (#{list[" + i + "].id}, #{list[" + i + "].name})");
       }
-      return sql.toString();
+      return sql == null ? "" : sql.toString();
     }
 
     public String provideUpdate(Object param) {

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.Map;
 import java.util.Set;
 
+import org.apache.ibatis.binding.MapperMethod.ParamMap;
 import org.apache.ibatis.cache.CacheKey;
 import org.apache.ibatis.cursor.Cursor;
 import org.apache.ibatis.cursor.defaults.DefaultCursor;
@@ -755,6 +756,8 @@ private Object prepareCompositeKeyParameter(ResultSet rs, ResultMapping resultMa
   private Object instantiateParameterObject(Class<?> parameterType) {
     if (parameterType == null) {
       return new HashMap<Object, Object>();
+    } else if (ParamMap.class.equals(parameterType)) {
+      return new HashMap<Object, Object>(); // issue #649
     } else {
       return objectFactory.create(parameterType);
     }

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -381,6 +381,9 @@ private Class<?> getReturnType(Method method) {
     Type resolvedReturnType = TypeParameterResolver.resolveReturnType(method, type);
     if (resolvedReturnType instanceof Class) {
       returnType = (Class<?>) resolvedReturnType;
+      if (returnType.isArray()) {
+        returnType = returnType.getComponentType();
+      }
       // gcode issue #508
       if (void.class.equals(returnType)) {
         ResultType rt = method.getAnnotation(ResultType.class);

File: src/test/java/org/apache/ibatis/submitted/cursor_nested/CursorNestedTest.java
Patch:
@@ -103,6 +103,7 @@ public void testCursorWithRowBound() {
 
             Iterator<User> iterator = usersCursor.iterator();
 
+            Assert.assertTrue(iterator.hasNext());
             User user = iterator.next();
             Assert.assertEquals("User3", user.getName());
             Assert.assertEquals(2, usersCursor.getCurrentIndex());

File: src/test/java/org/apache/ibatis/submitted/cursor_nested/CursorNestedTest.java
Patch:
@@ -103,6 +103,7 @@ public void testCursorWithRowBound() {
 
             Iterator<User> iterator = usersCursor.iterator();
 
+            Assert.assertTrue(iterator.hasNext());
             User user = iterator.next();
             Assert.assertEquals("User3", user.getName());
             Assert.assertEquals(2, usersCursor.getCurrentIndex());

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -62,6 +62,7 @@
 import org.apache.ibatis.builder.IncompleteElementException;
 import org.apache.ibatis.builder.MapperBuilderAssistant;
 import org.apache.ibatis.builder.xml.XMLMapperBuilder;
+import org.apache.ibatis.cursor.Cursor;
 import org.apache.ibatis.executor.keygen.Jdbc3KeyGenerator;
 import org.apache.ibatis.executor.keygen.KeyGenerator;
 import org.apache.ibatis.executor.keygen.NoKeyGenerator;
@@ -390,7 +391,7 @@ private Class<?> getReturnType(Method method) {
     } else if (resolvedReturnType instanceof ParameterizedType) {
       ParameterizedType parameterizedType = (ParameterizedType) resolvedReturnType;
       Class<?> rawType = (Class<?>) parameterizedType.getRawType();
-      if (Collection.class.isAssignableFrom(rawType)) {
+      if (Collection.class.isAssignableFrom(rawType) || Cursor.class.isAssignableFrom(rawType)) {
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
         if (actualTypeArguments != null && actualTypeArguments.length == 1) {
           Type returnTypeParameter = actualTypeArguments[0];

File: src/test/java/org/apache/ibatis/type/CharacterTypeHandlerTest.java
Patch:
@@ -67,7 +67,7 @@ public void shouldGetResultFromResultSetByPosition() throws Exception {
   @Test
   public void shouldGetResultNullFromResultSetByPosition() throws Exception {
     when(rs.getString(1)).thenReturn(null);
-    when(rs.wasNull()).thenReturn(false);
+    when(rs.wasNull()).thenReturn(true);
     assertNull(TYPE_HANDLER.getResult(rs, 1));
   }
 

File: src/test/java/org/apache/ibatis/type/CharacterTypeHandlerTest.java
Patch:
@@ -67,7 +67,7 @@ public void shouldGetResultFromResultSetByPosition() throws Exception {
   @Test
   public void shouldGetResultNullFromResultSetByPosition() throws Exception {
     when(rs.getString(1)).thenReturn(null);
-    when(rs.wasNull()).thenReturn(false);
+    when(rs.wasNull()).thenReturn(true);
     assertNull(TYPE_HANDLER.getResult(rs, 1));
   }
 

File: src/test/java/org/apache/ibatis/submitted/sqlprovider/OurSqlBuilder.java
Patch:
@@ -42,7 +42,7 @@ public String buildGetUsersQuery(Map<String, Object> parameter) {
     return sb.toString();
   }
 
-  public String buildGetUserQuery(Integer parameter) {
+  public String buildGetUserQuery(Number parameter) {
     // parameter is not a single List or Array,
     // so it is passed as is from the mapper
     return "select * from users where id = #{value}";

File: src/test/java/org/apache/ibatis/submitted/sqlprovider/OurSqlBuilder.java
Patch:
@@ -42,7 +42,7 @@ public String buildGetUsersQuery(Map<String, Object> parameter) {
     return sb.toString();
   }
 
-  public String buildGetUserQuery(Integer parameter) {
+  public String buildGetUserQuery(Number parameter) {
     // parameter is not a single List or Array,
     // so it is passed as is from the mapper
     return "select * from users where id = #{value}";

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java
Patch:
@@ -80,7 +80,7 @@ private SqlSource createSqlSource(Object parameterObject) {
       String sql;
       if (parameterTypes.length == 0) {
         sql = (String) providerMethod.invoke(providerType.newInstance());
-      } else if (parameterTypes[0].isAssignableFrom(parameterObject.getClass())) {
+      } else if (parameterTypes.length == 1) {
         sql = (String) providerMethod.invoke(providerType.newInstance(), parameterObject);
       } else if (parameterObject instanceof Map) {
         @SuppressWarnings("unchecked")

File: src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.junit.BeforeClass;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
@@ -241,7 +242,7 @@ public void shouldGetUsersByNameWithParamNameUsingMap() {
   }
 
   // Test for map with @Param
-  @Test
+  @Ignore("TODO failing case")
   public void shouldGetUsersByNameWithParamName() {
     SqlSession sqlSession = sqlSessionFactory.openSession();
     try {

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java
Patch:
@@ -80,7 +80,7 @@ private SqlSource createSqlSource(Object parameterObject) {
       String sql;
       if (parameterTypes.length == 0) {
         sql = (String) providerMethod.invoke(providerType.newInstance());
-      } else if (parameterTypes.length == 1) {
+      } else if (parameterTypes[0].isAssignableFrom(parameterObject.getClass())) {
         sql = (String) providerMethod.invoke(providerType.newInstance(), parameterObject);
       } else if (parameterObject instanceof Map) {
         @SuppressWarnings("unchecked")

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperEntityResolver.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2016 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/reflection/MetaClass.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2015 the original author or authors.
+ *    Copyright 2009-2016 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -119,12 +119,12 @@ private Type getGenericGetterType(String propertyName) {
         Field _method = MethodInvoker.class.getDeclaredField("method");
         _method.setAccessible(true);
         Method method = (Method) _method.get(invoker);
-        return method.getGenericReturnType();
+        return TypeParameterResolver.resolveReturnType(method, reflector.getType());
       } else if (invoker instanceof GetFieldInvoker) {
         Field _field = GetFieldInvoker.class.getDeclaredField("field");
         _field.setAccessible(true);
         Field field = (Field) _field.get(invoker);
-        return field.getGenericType();
+        return TypeParameterResolver.resolveFieldType(field, reflector.getType());
       }
     } catch (NoSuchFieldException e) {
     } catch (IllegalAccessException e) {

File: src/test/java/org/apache/ibatis/submitted/generictyperesolution/GenericTypeResolutionTest.java
Patch:
@@ -59,6 +59,7 @@ public void shouldGetAUser() {
       criteria.setId(1);
       User result = mapper.getUser(criteria);
       assertEquals("User1", result.getName());
+      assertEquals(Integer.valueOf(12), result.getFld1());
     } finally {
       sqlSession.close();
     }
@@ -71,6 +72,7 @@ public void shouldInsertAUser() {
       Mapper mapper = sqlSession.getMapper(Mapper.class);
       User user = new User();
       user.setName("User2");
+      user.fld2 =56;
       mapper.insertUser(user);
       User result = mapper.getUserByName("User2");
       assertNotNull(result);

File: src/test/java/org/apache/ibatis/submitted/generictyperesolution/Mapper.java
Patch:
@@ -25,6 +25,6 @@ public interface Mapper {
   @Select("select * from users where name = #{name}")
   User getUserByName(String name);
 
-  @Insert("insert into users (name) values (#{name})")
+  @Insert("insert into users (name, fld2) values (#{name}, #{fld2})")
   void insertUser(User user);
 }

File: src/main/java/org/apache/ibatis/annotations/Arg.java
Patch:
@@ -40,7 +40,7 @@
 
   JdbcType jdbcType() default JdbcType.UNDEFINED;
 
-  Class<? extends TypeHandler<?>> typeHandler() default UnknownTypeHandler.class;
+  Class<? extends TypeHandler> typeHandler() default UnknownTypeHandler.class;
 
   String select() default "";
 

File: src/main/java/org/apache/ibatis/annotations/Result.java
Patch:
@@ -42,7 +42,7 @@
 
   JdbcType jdbcType() default JdbcType.UNDEFINED;
 
-  Class<? extends TypeHandler<?>> typeHandler() default UnknownTypeHandler.class;
+  Class<? extends TypeHandler> typeHandler() default UnknownTypeHandler.class;
 
   One one() default @One;
 

File: src/main/java/org/apache/ibatis/annotations/TypeDiscriminator.java
Patch:
@@ -38,7 +38,7 @@
 
   JdbcType jdbcType() default JdbcType.UNDEFINED;
 
-  Class<? extends TypeHandler<?>> typeHandler() default UnknownTypeHandler.class;
+  Class<? extends TypeHandler> typeHandler() default UnknownTypeHandler.class;
 
   Case[] cases();
 }

File: src/main/java/org/apache/ibatis/session/SqlSessionFactory.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.Connection;
 
 /**
- * Creates an {@link SqlSesion} out of a connection or a DataSource
+ * Creates an {@link SqlSession} out of a connection or a DataSource
  * 
  * @author Clinton Begin
  */

File: src/main/java/org/apache/ibatis/session/SqlSessionFactory.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.Connection;
 
 /**
- * Creates an {@link SqlSesion} out of a connection or a DataSource
+ * Creates an {@link SqlSession} out of a connection or a DataSource
  * 
  * @author Clinton Begin
  */

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -66,7 +66,7 @@ public int doUpdate(MappedStatement ms, Object parameterObject) throws SQLExcept
       batchResult.addParameterObject(parameterObject);
     } else {
       Connection connection = getConnection(ms.getStatementLog());
-      stmt = handler.prepare(connection);
+      stmt = handler.prepare(connection, transaction.getTimeout());
       handler.parameterize(stmt);    //fix Issues 322
       currentSql = sql;
       currentStatement = ms;
@@ -87,7 +87,7 @@ public <E> List<E> doQuery(MappedStatement ms, Object parameterObject, RowBounds
       Configuration configuration = ms.getConfiguration();
       StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameterObject, rowBounds, resultHandler, boundSql);
       Connection connection = getConnection(ms.getStatementLog());
-      stmt = handler.prepare(connection);
+      stmt = handler.prepare(connection, transaction.getTimeout());
       handler.parameterize(stmt);
       return handler.<E>query(stmt, resultHandler);
     } finally {
@@ -101,7 +101,7 @@ protected <E> Cursor<E> doQueryCursor(MappedStatement ms, Object parameter, RowB
     Configuration configuration = ms.getConfiguration();
     StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, null, boundSql);
     Connection connection = getConnection(ms.getStatementLog());
-    Statement stmt = handler.prepare(connection);
+    Statement stmt = handler.prepare(connection, transaction.getTimeout());
     handler.parameterize(stmt);
     return handler.<E>queryCursor(stmt);
   }

File: src/main/java/org/apache/ibatis/executor/ReuseExecutor.java
Patch:
@@ -85,7 +85,7 @@ private Statement prepareStatement(StatementHandler handler, Log statementLog) t
       stmt = getStatement(sql);
     } else {
       Connection connection = getConnection(statementLog);
-      stmt = handler.prepare(connection);
+      stmt = handler.prepare(connection, transaction.getTimeout());
       putStatement(sql, stmt);
     }
     handler.parameterize(stmt);

File: src/main/java/org/apache/ibatis/executor/SimpleExecutor.java
Patch:
@@ -82,7 +82,7 @@ public List<BatchResult> doFlushStatements(boolean isRollback) throws SQLExcepti
   private Statement prepareStatement(StatementHandler handler, Log statementLog) throws SQLException {
     Statement stmt;
     Connection connection = getConnection(statementLog);
-    stmt = handler.prepare(connection);
+    stmt = handler.prepare(connection, transaction.getTimeout());
     handler.parameterize(stmt);
     return stmt;
   }

File: src/main/java/org/apache/ibatis/executor/statement/RoutingStatementHandler.java
Patch:
@@ -55,8 +55,8 @@ public RoutingStatementHandler(Executor executor, MappedStatement ms, Object par
   }
 
   @Override
-  public Statement prepare(Connection connection) throws SQLException {
-    return delegate.prepare(connection);
+  public Statement prepare(Connection connection, Integer transactionTimeout) throws SQLException {
+    return delegate.prepare(connection, transactionTimeout);
   }
 
   @Override

File: src/main/java/org/apache/ibatis/executor/statement/StatementHandler.java
Patch:
@@ -30,7 +30,7 @@
  */
 public interface StatementHandler {
 
-  Statement prepare(Connection connection)
+  Statement prepare(Connection connection, Integer transactionTimeout)
       throws SQLException;
 
   void parameterize(Statement statement)

File: src/test/java/org/apache/ibatis/submitted/typehandler/Mapper.java
Patch:
@@ -45,6 +45,8 @@ public interface Mapper {
   @Select("select id, name from product where name = #{value}")
   Product getProductByName(String name);
 
+  Product getProductByNameXml(String name);
+
   @Select("select id, name from product where name = #{value}")
   @ConstructorArgs({
     @Arg(id = true, column="id", javaType = ProductId.class, jdbcType=JdbcType.INTEGER),

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -286,7 +286,7 @@ public MappedStatement addMappedStatement(
         .databaseId(databaseId)
         .lang(lang)
         .resultOrdered(resultOrdered)
-        .resulSets(resultSets)
+        .resultSets(resultSets)
         .resultMaps(getStatementResultMaps(resultMap, resultType, id))
         .resultSetType(resultSetType)
         .flushCacheRequired(valueOrDefault(flushCache, !isSelect))

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -368,14 +368,14 @@ private ResultMapping buildResultMappingFromContext(XNode context, Class<?> resu
     String notNullColumn = context.getStringAttribute("notNullColumn");
     String columnPrefix = context.getStringAttribute("columnPrefix");
     String typeHandler = context.getStringAttribute("typeHandler");
-    String resulSet = context.getStringAttribute("resultSet");
+    String resultSet = context.getStringAttribute("resultSet");
     String foreignColumn = context.getStringAttribute("foreignColumn");
     boolean lazy = "lazy".equals(context.getStringAttribute("fetchType", configuration.isLazyLoadingEnabled() ? "lazy" : "eager"));
     Class<?> javaTypeClass = resolveClass(javaType);
     @SuppressWarnings("unchecked")
     Class<? extends TypeHandler<?>> typeHandlerClass = (Class<? extends TypeHandler<?>>) resolveClass(typeHandler);
     JdbcType jdbcTypeEnum = resolveJdbcType(jdbcType);
-    return builderAssistant.buildResultMapping(resultType, property, column, javaTypeClass, jdbcTypeEnum, nestedSelect, nestedResultMap, notNullColumn, columnPrefix, typeHandlerClass, flags, resulSet, foreignColumn, lazy);
+    return builderAssistant.buildResultMapping(resultType, property, column, javaTypeClass, jdbcTypeEnum, nestedSelect, nestedResultMap, notNullColumn, columnPrefix, typeHandlerClass, flags, resultSet, foreignColumn, lazy);
   }
   
   private String processNestedResultMappings(XNode context, List<ResultMapping> resultMappings) throws Exception {

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -186,7 +186,7 @@ public List<Object> handleResultSets(Statement stmt) throws SQLException {
       resultSetCount++;
     }
 
-    String[] resultSets = mappedStatement.getResulSets();
+    String[] resultSets = mappedStatement.getResultSets();
     if (resultSets != null) {
       while (rsw != null && resultSetCount < resultSets.length) {
         ResultMapping parentMapping = nextResultMaps.get(resultSets[resultSetCount]);

File: src/main/java/org/apache/ibatis/session/AutoMappingUnknownColumnBehavior.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/test/java/org/apache/ibatis/session/AutoMappingUnknownColumnBehaviorTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2009-2016 the original author or authors.
+ *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/session/AutoMappingUnknownColumnBehavior.java
Patch:
@@ -23,7 +23,7 @@
  * Specify the behavior when detects an unknown column (or unknown property type) of automatic mapping target.
  *
  * @author Kazuki Shimizu
- * @since 3.3.2
+ * @since 3.4.0
  */
 public enum AutoMappingUnknownColumnBehavior {
 

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -307,14 +307,14 @@ public void setAutoMappingBehavior(AutoMappingBehavior autoMappingBehavior) {
   }
 
   /**
-   * @since 3.3.2
+   * @since 3.4.0
    */
   public AutoMappingUnknownColumnBehavior getAutoMappingUnknownColumnBehavior() {
     return autoMappingUnknownColumnBehavior;
   }
 
   /**
-   * @since 3.3.2
+   * @since 3.4.0
    */
   public void setAutoMappingUnknownColumnBehavior(AutoMappingUnknownColumnBehavior autoMappingUnknownColumnBehavior) {
     this.autoMappingUnknownColumnBehavior = autoMappingUnknownColumnBehavior;

File: src/test/java/org/apache/ibatis/session/AutoMappingUnknownColumnBehaviorTest.java
Patch:
@@ -39,7 +39,7 @@
  * Tests for specify the behavior when detects an unknown column (or unknown property type) of automatic mapping target.
  *
  * @author Kazuki Shimizu
- * @since 3.3.2
+ * @since 3.4.0
  */
 public class AutoMappingUnknownColumnBehaviorTest {
 

File: src/main/java/org/apache/ibatis/session/AutoMappingUnknownColumnBehavior.java
Patch:
@@ -23,7 +23,7 @@
  * Specify the behavior when detects an unknown column (or unknown property type) of automatic mapping target.
  *
  * @author Kazuki Shimizu
- * @since 3.3.2
+ * @since 3.4.0
  */
 public enum AutoMappingUnknownColumnBehavior {
 

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -307,14 +307,14 @@ public void setAutoMappingBehavior(AutoMappingBehavior autoMappingBehavior) {
   }
 
   /**
-   * @since 3.3.2
+   * @since 3.4.0
    */
   public AutoMappingUnknownColumnBehavior getAutoMappingUnknownColumnBehavior() {
     return autoMappingUnknownColumnBehavior;
   }
 
   /**
-   * @since 3.3.2
+   * @since 3.4.0
    */
   public void setAutoMappingUnknownColumnBehavior(AutoMappingUnknownColumnBehavior autoMappingUnknownColumnBehavior) {
     this.autoMappingUnknownColumnBehavior = autoMappingUnknownColumnBehavior;

File: src/test/java/org/apache/ibatis/session/AutoMappingUnknownColumnBehaviorTest.java
Patch:
@@ -39,7 +39,7 @@
  * Tests for specify the behavior when detects an unknown column (or unknown property type) of automatic mapping target.
  *
  * @author Kazuki Shimizu
- * @since 3.3.2
+ * @since 3.4.0
  */
 public class AutoMappingUnknownColumnBehaviorTest {
 

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -478,11 +478,11 @@ private List<UnMappedColumAutoMapping> createAutomaticMappings(ResultSetWrapper
             autoMapping.add(new UnMappedColumAutoMapping(columnName, property, typeHandler, propertyType.isPrimitive()));
           } else {
             configuration.getAutoMappingUnknownColumnBehavior()
-                    .doAction(columnName, property, propertyType);
+                    .doAction(mappedStatement, columnName, property, propertyType);
           }
         } else{
           configuration.getAutoMappingUnknownColumnBehavior()
-                  .doAction(columnName, (property != null) ? property : propertyName, null);
+                  .doAction(mappedStatement, columnName, (property != null) ? property : propertyName, null);
         }
       }
       autoMappingsCache.put(mapKey, autoMapping);

File: src/test/java/org/apache/ibatis/reflection/typeparam/Level0Mapper.java
Patch:
@@ -46,7 +46,7 @@ public interface Level0Mapper<L, M, N> {
 
   Map<N, M> selectMap();
 
-  N[] selectArray();
+  N[] selectArray(List<N>[] param);
 
   N[][] selectArrayOfArray();
 

File: src/main/java/org/apache/ibatis/mapping/ParameterMapping.java
Patch:
@@ -114,9 +114,9 @@ private void validate() {
         }            
       } else {
         if (parameterMapping.typeHandler == null) { 
-          throw new IllegalStateException("Type handler was null on parameter mapping for property '"  
-              + parameterMapping.property + "'.  " 
-              + "It was either not specified and/or could not be found for the javaType / jdbcType combination specified.");
+          throw new IllegalStateException("Type handler was null on parameter mapping for property '"
+            + parameterMapping.property + "'. It was either not specified and/or could not be found for the javaType ("
+            + parameterMapping.javaType.getName() + ") : jdbcType (" + parameterMapping.jdbcType + ") combination.");
         }
       }
     }

File: src/test/java/org/apache/ibatis/reflection/typeparam/Level2Mapper.java
Patch:
@@ -16,7 +16,8 @@
 
 package org.apache.ibatis.reflection.typeparam;
 
+import java.io.Serializable;
 import java.util.Date;
 
-public interface Level2Mapper extends Level1Mapper<Date, Integer> {
+public interface Level2Mapper extends Level1Mapper<Date, Integer>, Serializable, Comparable<Integer>{
 }

File: src/test/java/org/apache/ibatis/submitted/mapper_type_parameter/PersonListMapper.java
Patch:
@@ -17,5 +17,5 @@
 
 import java.util.List;
 
-public interface PersonListMapper extends BaseMapper<List<Person>> {
+public interface PersonListMapper extends BaseMapper<List<Person>, Integer> {
 }
\ No newline at end of file

File: src/test/java/org/apache/ibatis/submitted/mapper_type_parameter/PersonMapper.java
Patch:
@@ -15,5 +15,5 @@
  */
 package org.apache.ibatis.submitted.mapper_type_parameter;
 
-public interface PersonMapper extends BaseMapper<Person> {
+public interface PersonMapper extends BaseMapper<Person, Integer> {
 }
\ No newline at end of file

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -431,7 +431,7 @@ private boolean applyPropertyMappings(ResultSetWrapper rsw, ResultMap resultMap,
             && (value != null || (configuration.isCallSettersOnNulls() && !metaObject.getSetterType(property).isPrimitive()))) {
           metaObject.setValue(property, value);
         }
-        if (value != null || value == DEFERED) {
+        if (property != null && (value != null || value == DEFERED)) {
           foundValues = true;
         }
       }

File: src/test/java/org/apache/ibatis/submitted/emptycollection/DaoTest.java
Patch:
@@ -54,14 +54,14 @@ public void tearDown() throws Exception {
     @Test
     public void testWithEmptyList() throws Exception {
         final List<TodoLists> actual = dao.selectWithEmptyList();
-
         Assert.assertEquals(1, actual.size());
+        final List<TodoItem> todoItems = actual.get(0).getTodoItems();
+        Assert.assertEquals("expect " + todoItems + " to be empty", 0, todoItems.size());        
     }
 
     @Test
     public void testWithNonEmptyList() throws Exception {
         final List<TodoLists> actual = dao.selectWithNonEmptyList();
-
         checkNonEmptyList(actual);
     }
 

File: src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java
Patch:
@@ -59,6 +59,7 @@ public BaseJdbcLogger(Log log, int queryStack) {
 
   static {
     SET_METHODS.add("setString");
+    SET_METHODS.add("setNString");
     SET_METHODS.add("setInt");
     SET_METHODS.add("setByte");
     SET_METHODS.add("setShort");
@@ -76,7 +77,9 @@ public BaseJdbcLogger(Log log, int queryStack) {
     SET_METHODS.add("setBoolean");
     SET_METHODS.add("setBytes");
     SET_METHODS.add("setCharacterStream");
+    SET_METHODS.add("setNCharacterStream");
     SET_METHODS.add("setClob");
+    SET_METHODS.add("setNClob");
     SET_METHODS.add("setObject");
     SET_METHODS.add("setNull");
 

File: src/test/java/org/apache/ibatis/submitted/nestedresulthandler/NestedResultHandlerTest.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.junit.Assert;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 import org.junit.Test;
 
 public class NestedResultHandlerTest {

File: src/test/java/org/apache/ibatis/submitted/nestedresulthandler/Item.java
Patch:
@@ -1,5 +1,5 @@
-/*
- *    Copyright 2009-2012 the original author or authors.
+/**
+ *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/test/java/org/apache/ibatis/submitted/nestedresulthandler/Mapper.java
Patch:
@@ -1,5 +1,5 @@
-/*
- *    Copyright 2009-2012 the original author or authors.
+/**
+ *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/test/java/org/apache/ibatis/submitted/nestedresulthandler/NestedResultHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
-/*
- *    Copyright 2009-2012 the original author or authors.
+/**
+ *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -151,7 +151,6 @@ public void testGetPersonOrderedByItem() {
     }
   }
 
-  @Ignore
   @Test //reopen issue 39? (not a bug?)
   public void testGetPersonItemPairs(){
     SqlSession sqlSession = sqlSessionFactory.openSession();

File: src/test/java/org/apache/ibatis/submitted/nestedresulthandler/Person.java
Patch:
@@ -1,5 +1,5 @@
-/*
- *    Copyright 2009-2012 the original author or authors.
+/**
+ *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/test/java/org/apache/ibatis/submitted/nestedresulthandler/Mapper.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2009-2015 the original author or authors.
+/*
+ *    Copyright 2009-2012 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -20,4 +20,5 @@
 public interface Mapper {
   List<Person> getPersons();
   List<Person> getPersonsWithItemsOrdered();
+  List<PersonItemPair> getPersonItemPairs();
 }

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -146,6 +146,9 @@ public void handleOutputParameters(CallableStatement cs) throws SQLException {
   }
 
   private void handleRefCursorOutputParameter(ResultSet rs, ParameterMapping parameterMapping, MetaObject metaParam) throws SQLException {
+    if (rs == null) {
+      return;
+    }
     try {
       final String resultMapId = parameterMapping.getResultMapId();
       final ResultMap resultMap = configuration.getResultMap(resultMapId);

File: src/main/java/org/apache/ibatis/annotations/Arg.java
Patch:
@@ -38,7 +38,7 @@
 
   JdbcType jdbcType() default JdbcType.UNDEFINED;
 
-  Class<? extends TypeHandler<?>> typeHandler() default UnknownTypeHandler.class;
+  Class<? extends TypeHandler> typeHandler() default UnknownTypeHandler.class;
 
   String select() default "";
 

File: src/main/java/org/apache/ibatis/annotations/Result.java
Patch:
@@ -40,7 +40,7 @@
 
   JdbcType jdbcType() default JdbcType.UNDEFINED;
 
-  Class<? extends TypeHandler<?>> typeHandler() default UnknownTypeHandler.class;
+  Class<? extends TypeHandler> typeHandler() default UnknownTypeHandler.class;
 
   One one() default @One;
 

File: src/main/java/org/apache/ibatis/annotations/TypeDiscriminator.java
Patch:
@@ -36,7 +36,7 @@
 
   JdbcType jdbcType() default JdbcType.UNDEFINED;
 
-  Class<? extends TypeHandler<?>> typeHandler() default UnknownTypeHandler.class;
+  Class<? extends TypeHandler> typeHandler() default UnknownTypeHandler.class;
 
   Case[] cases();
 }

File: src/main/java/org/apache/ibatis/annotations/Arg.java
Patch:
@@ -38,7 +38,7 @@
 
   JdbcType jdbcType() default JdbcType.UNDEFINED;
 
-  Class<? extends TypeHandler<?>> typeHandler() default UnknownTypeHandler.class;
+  Class<? extends TypeHandler> typeHandler() default UnknownTypeHandler.class;
 
   String select() default "";
 

File: src/main/java/org/apache/ibatis/annotations/Result.java
Patch:
@@ -40,7 +40,7 @@
 
   JdbcType jdbcType() default JdbcType.UNDEFINED;
 
-  Class<? extends TypeHandler<?>> typeHandler() default UnknownTypeHandler.class;
+  Class<? extends TypeHandler> typeHandler() default UnknownTypeHandler.class;
 
   One one() default @One;
 

File: src/main/java/org/apache/ibatis/annotations/TypeDiscriminator.java
Patch:
@@ -36,7 +36,7 @@
 
   JdbcType jdbcType() default JdbcType.UNDEFINED;
 
-  Class<? extends TypeHandler<?>> typeHandler() default UnknownTypeHandler.class;
+  Class<? extends TypeHandler> typeHandler() default UnknownTypeHandler.class;
 
   Case[] cases();
 }

File: src/main/java/org/apache/ibatis/mapping/MappedStatement.java
Patch:
@@ -71,7 +71,6 @@ public Builder(Configuration configuration, String id, SqlSource sqlSource, SqlC
       mappedStatement.statementType = StatementType.PREPARED;
       mappedStatement.parameterMap = new ParameterMap.Builder(configuration, "defaultParameterMap", null, new ArrayList<ParameterMapping>()).build();
       mappedStatement.resultMaps = new ArrayList<ResultMap>();
-      mappedStatement.timeout = configuration.getDefaultStatementTimeout();
       mappedStatement.sqlCommandType = sqlCommandType;
       mappedStatement.keyGenerator = configuration.isUseGeneratedKeys() && SqlCommandType.INSERT.equals(sqlCommandType) ? new Jdbc3KeyGenerator() : new NoKeyGenerator();
       String logId = id;

File: src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java
Patch:
@@ -197,7 +197,7 @@ public static MappedStatement prepareSelectAllAuthorsAutoMappedStatement(final C
               }
             }).build());
           }
-        }).fetchSize(1000).build();
+        }).fetchSize(1000).timeout(2000).build();
   }
 
   public static MappedStatement prepareSelectOneAuthorMappedStatementWithConstructorResults(final Configuration config) {

File: src/main/java/org/apache/ibatis/mapping/MappedStatement.java
Patch:
@@ -71,7 +71,6 @@ public Builder(Configuration configuration, String id, SqlSource sqlSource, SqlC
       mappedStatement.statementType = StatementType.PREPARED;
       mappedStatement.parameterMap = new ParameterMap.Builder(configuration, "defaultParameterMap", null, new ArrayList<ParameterMapping>()).build();
       mappedStatement.resultMaps = new ArrayList<ResultMap>();
-      mappedStatement.timeout = configuration.getDefaultStatementTimeout();
       mappedStatement.sqlCommandType = sqlCommandType;
       mappedStatement.keyGenerator = configuration.isUseGeneratedKeys() && SqlCommandType.INSERT.equals(sqlCommandType) ? new Jdbc3KeyGenerator() : new NoKeyGenerator();
       String logId = id;

File: src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java
Patch:
@@ -197,7 +197,7 @@ public static MappedStatement prepareSelectAllAuthorsAutoMappedStatement(final C
               }
             }).build());
           }
-        }).fetchSize(1000).build();
+        }).fetchSize(1000).timeout(2000).build();
   }
 
   public static MappedStatement prepareSelectOneAuthorMappedStatementWithConstructorResults(final Configuration config) {

File: src/test/java/org/apache/ibatis/type/JdbcTypeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2015 the original author or authors.
+ *    Copyright 2009-2015 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -475,8 +475,8 @@ private List<UnMappedColumAutoMapping> createAutomaticMappings(ResultSetWrapper
           }
         }
       }
+      autoMappingsCache.put(mapKey, autoMapping);
     }
-    autoMappingsCache.put(mapKey, autoMapping);
     return autoMapping;
   }
   

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -35,7 +35,6 @@
  * @author Clinton Begin
  * @author Eduardo Macarron
  * @author Lasse Voss
- * @author Kazuki Shimizu
  */
 public class MapperMethod {
 
@@ -246,7 +245,7 @@ public MethodSignature(Configuration configuration, Method method) {
       this.returnType = method.getReturnType();
       this.returnsVoid = void.class.equals(this.returnType);
       this.returnsMany = (configuration.getObjectFactory().isCollection(this.returnType) || this.returnType.isArray());
-      this.returnsCursor = Cursor.class.isAssignableFrom(this.returnType);
+      this.returnsCursor = Cursor.class.equals(this.returnType);
       this.mapKey = getMapKey(method);
       this.returnsMap = (this.mapKey != null);
       this.hasNamedParameters = hasNamedParams(method);

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -35,6 +35,7 @@
  * @author Clinton Begin
  * @author Eduardo Macarron
  * @author Lasse Voss
+ * @author Kazuki Shimizu
  */
 public class MapperMethod {
 
@@ -245,7 +246,7 @@ public MethodSignature(Configuration configuration, Method method) {
       this.returnType = method.getReturnType();
       this.returnsVoid = void.class.equals(this.returnType);
       this.returnsMany = (configuration.getObjectFactory().isCollection(this.returnType) || this.returnType.isArray());
-      this.returnsCursor = Cursor.class.equals(this.returnType);
+      this.returnsCursor = Cursor.class.isAssignableFrom(this.returnType);
       this.mapKey = getMapKey(method);
       this.returnsMap = (this.mapKey != null);
       this.hasNamedParameters = hasNamedParams(method);

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -436,7 +436,7 @@ private SqlSource buildSqlSourceFromStrings(String[] strings, Class<?> parameter
       sql.append(fragment);
       sql.append(" ");
     }
-    return languageDriver.createSqlSource(configuration, sql.toString(), parameterTypeClass);
+    return languageDriver.createSqlSource(configuration, sql.toString().trim(), parameterTypeClass);
   }
 
   private SqlCommandType getSqlCommandType(Method method) {

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -436,7 +436,7 @@ private SqlSource buildSqlSourceFromStrings(String[] strings, Class<?> parameter
       sql.append(fragment);
       sql.append(" ");
     }
-    return languageDriver.createSqlSource(configuration, sql.toString(), parameterTypeClass);
+    return languageDriver.createSqlSource(configuration, sql.toString().trim(), parameterTypeClass);
   }
 
   private SqlCommandType getSqlCommandType(Method method) {

File: src/main/java/org/apache/ibatis/cache/decorators/LruCache.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.ibatis.cache.Cache;
 
 /**
- * Lru (first in, first out) cache decorator
+ * Lru (least recently used) cache decorator
  *
  * @author Clinton Begin
  */

File: src/main/java/org/apache/ibatis/cache/decorators/LruCache.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.ibatis.cache.Cache;
 
 /**
- * Lru (first in, first out) cache decorator
+ * Lru (least recently used) cache decorator
  *
  * @author Clinton Begin
  */

File: src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java
Patch:
@@ -79,7 +79,7 @@ private ParameterMapping buildParameterMapping(String content) {
       } else if (JdbcType.CURSOR.name().equals(propertiesMap.get("jdbcType"))) {
         propertyType = java.sql.ResultSet.class;
       } else if (property != null) {
-        MetaClass metaClass = MetaClass.forClass(parameterType);
+        MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory());
         if (metaClass.hasGetter(property)) {
           propertyType = metaClass.getGetterType(property);
         } else {
@@ -133,5 +133,5 @@ private Map<String, String> parseParameterMapping(String content) {
       }
     }
   }
-  
+
 }

File: src/main/java/org/apache/ibatis/reflection/SystemMetaObject.java
Patch:
@@ -27,7 +27,7 @@ public final class SystemMetaObject {
 
   public static final ObjectFactory DEFAULT_OBJECT_FACTORY = new DefaultObjectFactory();
   public static final ObjectWrapperFactory DEFAULT_OBJECT_WRAPPER_FACTORY = new DefaultObjectWrapperFactory();
-  public static final MetaObject NULL_META_OBJECT = MetaObject.forObject(NullObject.class, DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY);
+  public static final MetaObject NULL_META_OBJECT = MetaObject.forObject(NullObject.class, DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY, new DefaultReflectorFactory());
 
   private SystemMetaObject() {
     // Prevent Instantiation of Static Class
@@ -37,7 +37,7 @@ private static class NullObject {
   }
 
   public static MetaObject forObject(Object object) {
-    return MetaObject.forObject(object, DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY);
+    return MetaObject.forObject(object, DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY, new DefaultReflectorFactory());
   }
 
 }

File: src/main/java/org/apache/ibatis/reflection/wrapper/BeanWrapper.java
Patch:
@@ -37,7 +37,7 @@ public class BeanWrapper extends BaseWrapper {
   public BeanWrapper(MetaObject metaObject, Object object) {
     super(metaObject);
     this.object = object;
-    this.metaClass = MetaClass.forClass(object.getClass());
+    this.metaClass = MetaClass.forClass(object.getClass(), metaObject.getReflectorFactory());
   }
 
   @Override
@@ -149,7 +149,7 @@ public MetaObject instantiatePropertyValue(String name, PropertyTokenizer prop,
     Class<?> type = getSetterType(prop.getName());
     try {
       Object newObject = objectFactory.create(type);
-      metaValue = MetaObject.forObject(newObject, metaObject.getObjectFactory(), metaObject.getObjectWrapperFactory());
+      metaValue = MetaObject.forObject(newObject, metaObject.getObjectFactory(), metaObject.getObjectWrapperFactory(), metaObject.getReflectorFactory());
       set(prop, newObject);
     } catch (Exception e) {
       throw new ReflectionException("Cannot set value of property '" + name + "' because '" + name + "' is null and cannot be instantiated on instance of " + type.getName() + ". Cause:" + e.toString(), e);

File: src/main/java/org/apache/ibatis/reflection/wrapper/MapWrapper.java
Patch:
@@ -137,7 +137,7 @@ public boolean hasGetter(String name) {
   public MetaObject instantiatePropertyValue(String name, PropertyTokenizer prop, ObjectFactory objectFactory) {
     HashMap<String, Object> map = new HashMap<String, Object>();
     set(prop, map);
-    return MetaObject.forObject(map, metaObject.getObjectFactory(), metaObject.getObjectWrapperFactory());
+    return MetaObject.forObject(map, metaObject.getObjectFactory(), metaObject.getObjectWrapperFactory(), metaObject.getReflectorFactory());
   }
 
   @Override

File: src/test/java/org/apache/ibatis/reflection/MetaObjectTest.java
Patch:
@@ -272,15 +272,15 @@ public void shouldNotUseObjectWrapperFactoryByDefault() {
 
   @Test
   public void shouldUseObjectWrapperFactoryWhenSet() {
-    MetaObject meta = MetaObject.forObject(new Author(), SystemMetaObject.DEFAULT_OBJECT_FACTORY, new CustomBeanWrapperFactory());
+    MetaObject meta = MetaObject.forObject(new Author(), SystemMetaObject.DEFAULT_OBJECT_FACTORY, new CustomBeanWrapperFactory(), new DefaultReflectorFactory());
     assertTrue(meta.getObjectWrapper().getClass().equals(CustomBeanWrapper.class));
-    
+
     // Make sure the old default factory is in place and still works
     meta = SystemMetaObject.forObject(new Author());
     assertFalse(meta.getObjectWrapper().getClass().equals(CustomBeanWrapper.class));
   }
 
-  @Test 
+  @Test
   public void shouldMethodHasGetterReturnTrueWhenListElementSet() {
     List<Object> param1 = new ArrayList<Object>();
     param1.add("firstParam");

File: src/test/java/org/apache/ibatis/submitted/language/VelocitySqlSourceBuilder.java
Patch:
@@ -78,7 +78,7 @@ private ParameterMapping buildParameterMapping(String content) {
       } else if (JdbcType.CURSOR.name().equals(jdbcType)) {
         propertyType = java.sql.ResultSet.class;
       } else if (property != null) {
-        MetaClass metaClass = MetaClass.forClass(parameterType);
+        MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory());
         if (metaClass.hasGetter(property)) {
           propertyType = metaClass.getGetterType(property);
         } else {
@@ -135,5 +135,5 @@ private Map<String, String> parseParameterMapping(String content) {
       }
     }
   }
-  
+
 }

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -106,7 +106,7 @@ public XNode getSqlFragment(String refid) {
   private void configurationElement(XNode context) {
     try {
       String namespace = context.getStringAttribute("namespace");
-      if (namespace.equals("")) {
+      if (namespace == null || namespace.equals("")) {
         throw new BuilderException("Mapper's namespace cannot be empty");
       }
       builderAssistant.setCurrentNamespace(namespace);

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -60,17 +60,19 @@ public int doUpdate(MappedStatement ms, Object parameterObject) throws SQLExcept
     if (sql.equals(currentSql) && ms.equals(currentStatement)) {
       int last = statementList.size() - 1;
       stmt = statementList.get(last);
+     handler.parameterize(stmt);//fix Issues 322
       BatchResult batchResult = batchResultList.get(last);
       batchResult.addParameterObject(parameterObject);
     } else {
       Connection connection = getConnection(ms.getStatementLog());
       stmt = handler.prepare(connection);
+      handler.parameterize(stmt);    //fix Issues 322
       currentSql = sql;
       currentStatement = ms;
       statementList.add(stmt);
       batchResultList.add(new BatchResult(ms, sql, parameterObject));
     }
-    handler.parameterize(stmt);
+  // handler.parameterize(stmt);
     handler.batch(stmt);
     return BATCH_UPDATE_RETURN_VALUE;
   }

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -182,7 +182,7 @@ public SqlCommand(Configuration configuration, Class<?> mapperInterface, Method
       MappedStatement ms = null;
       if (configuration.hasStatement(statementName)) {
         ms = configuration.getMappedStatement(statementName);
-      } else if (!mapperInterface.equals(method.getDeclaringClass().getName())) { // issue #35
+      } else if (!mapperInterface.equals(method.getDeclaringClass())) { // issue #35
         String parentStatementName = method.getDeclaringClass().getName() + "." + method.getName();
         if (configuration.hasStatement(parentStatementName)) {
           ms = configuration.getMappedStatement(parentStatementName);

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -182,7 +182,7 @@ public SqlCommand(Configuration configuration, Class<?> mapperInterface, Method
       MappedStatement ms = null;
       if (configuration.hasStatement(statementName)) {
         ms = configuration.getMappedStatement(statementName);
-      } else if (!mapperInterface.equals(method.getDeclaringClass().getName())) { // issue #35
+      } else if (!mapperInterface.equals(method.getDeclaringClass())) { // issue #35
         String parentStatementName = method.getDeclaringClass().getName() + "." + method.getName();
         if (configuration.hasStatement(parentStatementName)) {
           ms = configuration.getMappedStatement(parentStatementName);

File: src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java
Patch:
@@ -114,7 +114,9 @@ private void executeFullScript(Reader reader) {
         script.append(line);
         script.append(LINE_SEPARATOR);
       }
-      executeStatement(script.toString());
+      String command = script.toString();
+      println(command);
+      executeStatement(command);
       commitConnection();
     } catch (Exception e) {
       String message = "Error executing: " + script + ".  Cause: " + e;

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -208,6 +208,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setUseGeneratedKeys(booleanValueOf(props.getProperty("useGeneratedKeys"), false));
       configuration.setDefaultExecutorType(ExecutorType.valueOf(props.getProperty("defaultExecutorType", "SIMPLE")));
       configuration.setDefaultStatementTimeout(integerValueOf(props.getProperty("defaultStatementTimeout"), null));
+      configuration.setDefaultFetchSize(integerValueOf(props.getProperty("defaultFetchSize"), null));
       configuration.setMapUnderscoreToCamelCase(booleanValueOf(props.getProperty("mapUnderscoreToCamelCase"), false));
       configuration.setSafeRowBoundsEnabled(booleanValueOf(props.getProperty("safeRowBoundsEnabled"), false));
       configuration.setLocalCacheScope(LocalCacheScope.valueOf(props.getProperty("localCacheScope", "SESSION")));

File: src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java
Patch:
@@ -57,6 +57,7 @@ public BaseExecutorTest() {
     config.setMultipleResultSetsEnabled(true);
     config.setUseColumnLabel(true);
     config.setDefaultStatementTimeout(5000);
+    config.setDefaultFetchSize(100);
   }
 
   @Test

File: src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java
Patch:
@@ -197,7 +197,7 @@ public static MappedStatement prepareSelectAllAuthorsAutoMappedStatement(final C
               }
             }).build());
           }
-        }).build();
+        }).fetchSize(1000).build();
   }
 
   public static MappedStatement prepareSelectOneAuthorMappedStatementWithConstructorResults(final Configuration config) {

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -208,6 +208,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setUseGeneratedKeys(booleanValueOf(props.getProperty("useGeneratedKeys"), false));
       configuration.setDefaultExecutorType(ExecutorType.valueOf(props.getProperty("defaultExecutorType", "SIMPLE")));
       configuration.setDefaultStatementTimeout(integerValueOf(props.getProperty("defaultStatementTimeout"), null));
+      configuration.setDefaultFetchSize(integerValueOf(props.getProperty("defaultFetchSize"), null));
       configuration.setMapUnderscoreToCamelCase(booleanValueOf(props.getProperty("mapUnderscoreToCamelCase"), false));
       configuration.setSafeRowBoundsEnabled(booleanValueOf(props.getProperty("safeRowBoundsEnabled"), false));
       configuration.setLocalCacheScope(LocalCacheScope.valueOf(props.getProperty("localCacheScope", "SESSION")));

File: src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java
Patch:
@@ -57,6 +57,7 @@ public BaseExecutorTest() {
     config.setMultipleResultSetsEnabled(true);
     config.setUseColumnLabel(true);
     config.setDefaultStatementTimeout(5000);
+    config.setDefaultFetchSize(100);
   }
 
   @Test

File: src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java
Patch:
@@ -197,7 +197,7 @@ public static MappedStatement prepareSelectAllAuthorsAutoMappedStatement(final C
               }
             }).build());
           }
-        }).build();
+        }).fetchSize(1000).build();
   }
 
   public static MappedStatement prepareSelectOneAuthorMappedStatementWithConstructorResults(final Configuration config) {

File: src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java
Patch:
@@ -78,7 +78,9 @@ static Object crateProxy(Class<?> type, Callback callback, List<Class<?>> constr
     try {
       type.getDeclaredMethod(WRITE_REPLACE_METHOD);
       // ObjectOutputStream will call writeReplace of objects returned by writeReplace
-      log.debug(WRITE_REPLACE_METHOD + " method was found on bean " + type + ", make sure it returns this");
+      if (log.isDebugEnabled()) {
+        log.debug(WRITE_REPLACE_METHOD + " method was found on bean " + type + ", make sure it returns this");
+      }
     } catch (NoSuchMethodException e) {
       enhancer.setInterfaces(new Class[]{WriteReplaceInterface.class});
     } catch (SecurityException e) {

File: src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java
Patch:
@@ -78,7 +78,9 @@ static Object crateProxy(Class<?> type, MethodHandler callback, List<Class<?>> c
     try {
       type.getDeclaredMethod(WRITE_REPLACE_METHOD);
       // ObjectOutputStream will call writeReplace of objects returned by writeReplace
-      log.debug(WRITE_REPLACE_METHOD + " method was found on bean " + type + ", make sure it returns this");
+      if (log.isDebugEnabled()) {
+        log.debug(WRITE_REPLACE_METHOD + " method was found on bean " + type + ", make sure it returns this");
+      }
     } catch (NoSuchMethodException e) {
       enhancer.setInterfaces(new Class[]{WriteReplaceInterface.class});
     } catch (SecurityException e) {

File: src/main/java/org/apache/ibatis/io/ResolverUtil.java
Patch:
@@ -252,7 +252,9 @@ protected void addIfMatching(Test test, String fqn) {
     try {
       String externalName = fqn.substring(0, fqn.indexOf('.')).replace('/', '.');
       ClassLoader loader = getClassLoader();
-      log.debug("Checking to see if class " + externalName + " matches criteria [" + test + "]");
+      if (log.isDebugEnabled()) {
+        log.debug("Checking to see if class " + externalName + " matches criteria [" + test + "]");
+      }
 
       Class<?> type = loader.loadClass(externalName);
       if (test.matches(type)) {

File: src/main/java/org/apache/ibatis/logging/LogFactory.java
Patch:
@@ -131,7 +131,9 @@ private static void setImplementation(Class<? extends Log> implClass) {
     try {
       Constructor<? extends Log> candidate = implClass.getConstructor(new Class[] { String.class });
       Log log = candidate.newInstance(new Object[] { LogFactory.class.getName() });
-      log.debug("Logging initialized using '" + implClass + "' adapter.");
+      if (log.isDebugEnabled()) {
+        log.debug("Logging initialized using '" + implClass + "' adapter.");
+      }
       logConstructor = candidate;
     } catch (Throwable t) {
       throw new LogException("Error setting Log implementation.  Cause: " + t, t);

File: src/main/java/org/apache/ibatis/transaction/jdbc/JdbcTransaction.java
Patch:
@@ -126,8 +126,10 @@ protected void resetAutoCommit() {
         connection.setAutoCommit(true);
       }
     } catch (SQLException e) {
-      log.debug("Error resetting autocommit to true "
+      if (log.isDebugEnabled()) {
+        log.debug("Error resetting autocommit to true "
           + "before closing the connection.  Cause: " + e);
+      }
     }
   }
 

File: src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java
Patch:
@@ -78,7 +78,9 @@ static Object crateProxy(Class<?> type, Callback callback, List<Class<?>> constr
     try {
       type.getDeclaredMethod(WRITE_REPLACE_METHOD);
       // ObjectOutputStream will call writeReplace of objects returned by writeReplace
-      log.debug(WRITE_REPLACE_METHOD + " method was found on bean " + type + ", make sure it returns this");
+      if (log.isDebugEnabled()) {
+        log.debug(WRITE_REPLACE_METHOD + " method was found on bean " + type + ", make sure it returns this");
+      }
     } catch (NoSuchMethodException e) {
       enhancer.setInterfaces(new Class[]{WriteReplaceInterface.class});
     } catch (SecurityException e) {

File: src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java
Patch:
@@ -78,7 +78,9 @@ static Object crateProxy(Class<?> type, MethodHandler callback, List<Class<?>> c
     try {
       type.getDeclaredMethod(WRITE_REPLACE_METHOD);
       // ObjectOutputStream will call writeReplace of objects returned by writeReplace
-      log.debug(WRITE_REPLACE_METHOD + " method was found on bean " + type + ", make sure it returns this");
+      if (log.isDebugEnabled()) {
+        log.debug(WRITE_REPLACE_METHOD + " method was found on bean " + type + ", make sure it returns this");
+      }
     } catch (NoSuchMethodException e) {
       enhancer.setInterfaces(new Class[]{WriteReplaceInterface.class});
     } catch (SecurityException e) {

File: src/main/java/org/apache/ibatis/io/ResolverUtil.java
Patch:
@@ -252,7 +252,9 @@ protected void addIfMatching(Test test, String fqn) {
     try {
       String externalName = fqn.substring(0, fqn.indexOf('.')).replace('/', '.');
       ClassLoader loader = getClassLoader();
-      log.debug("Checking to see if class " + externalName + " matches criteria [" + test + "]");
+      if (log.isDebugEnabled()) {
+        log.debug("Checking to see if class " + externalName + " matches criteria [" + test + "]");
+      }
 
       Class<?> type = loader.loadClass(externalName);
       if (test.matches(type)) {

File: src/main/java/org/apache/ibatis/logging/LogFactory.java
Patch:
@@ -131,7 +131,9 @@ private static void setImplementation(Class<? extends Log> implClass) {
     try {
       Constructor<? extends Log> candidate = implClass.getConstructor(new Class[] { String.class });
       Log log = candidate.newInstance(new Object[] { LogFactory.class.getName() });
-      log.debug("Logging initialized using '" + implClass + "' adapter.");
+      if (log.isDebugEnabled()) {
+        log.debug("Logging initialized using '" + implClass + "' adapter.");
+      }
       logConstructor = candidate;
     } catch (Throwable t) {
       throw new LogException("Error setting Log implementation.  Cause: " + t, t);

File: src/main/java/org/apache/ibatis/transaction/jdbc/JdbcTransaction.java
Patch:
@@ -126,8 +126,10 @@ protected void resetAutoCommit() {
         connection.setAutoCommit(true);
       }
     } catch (SQLException e) {
-      log.debug("Error resetting autocommit to true "
+      if (log.isDebugEnabled()) {
+        log.debug("Error resetting autocommit to true "
           + "before closing the connection.  Cause: " + e);
+      }
     }
   }
 

File: src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java
Patch:
@@ -187,9 +187,9 @@ private void checkForMissingLineTerminator(StringBuilder command) {
   private StringBuilder handleLine(StringBuilder command, String line) throws SQLException, UnsupportedEncodingException {
     String trimmedLine = line.trim();
     if (lineIsComment(trimmedLine)) {
-        final String cleanedString = trimmedLine.substring(2).trim();
-        if(cleanedString.toUpperCase().startsWith("//@DELIMITER")) {
-            delimiter = cleanedString.substring(13,14);
+        final String cleanedString = trimmedLine.substring(2).trim().replaceFirst("//", "");
+        if(cleanedString.toUpperCase().startsWith("@DELIMITER")) {
+            delimiter = cleanedString.substring(11,12);
             return command;
         }
       println(trimmedLine);

File: src/main/java/org/apache/ibatis/mapping/SqlCommandType.java
Patch:
@@ -19,5 +19,5 @@
  * @author Clinton Begin
  */
 public enum SqlCommandType {
-  UNKNOWN, INSERT, UPDATE, DELETE, SELECT;
+  UNKNOWN, INSERT, UPDATE, DELETE, SELECT, FLUSH;
 }

File: src/main/java/org/apache/ibatis/executor/result/DefaultResultHandler.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * @author Clinton Begin
  */
-public class DefaultResultHandler implements ResultHandler {
+public class DefaultResultHandler implements ResultHandler<Object> {
 
   private final List<Object> list;
 
@@ -39,7 +39,7 @@ public DefaultResultHandler(ObjectFactory objectFactory) {
   }
 
   @Override
-  public void handleResult(ResultContext context) {
+  public void handleResult(ResultContext<? extends Object> context) {
     list.add(context.getResultObject());
   }
 

File: src/main/java/org/apache/ibatis/session/ResultContext.java
Patch:
@@ -18,9 +18,9 @@
 /**
  * @author Clinton Begin
  */
-public interface ResultContext {
+public interface ResultContext<T> {
 
-  Object getResultObject();
+  T getResultObject();
 
   int getResultCount();
 

File: src/main/java/org/apache/ibatis/session/ResultHandler.java
Patch:
@@ -18,8 +18,8 @@
 /**
  * @author Clinton Begin
  */
-public interface ResultHandler {
+public interface ResultHandler<T> {
 
-  void handleResult(ResultContext context);
+  void handleResult(ResultContext<? extends T> resultContext);
 
 }

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSession.java
Patch:
@@ -92,11 +92,11 @@ public <K, V> Map<K, V> selectMap(String statement, Object parameter, String map
 
   @Override
   public <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {
-    final List<?> list = selectList(statement, parameter, rowBounds);
+    final List<? extends V> list = selectList(statement, parameter, rowBounds);
     final DefaultMapResultHandler<K, V> mapResultHandler = new DefaultMapResultHandler<K, V>(mapKey,
         configuration.getObjectFactory(), configuration.getObjectWrapperFactory());
-    final DefaultResultContext context = new DefaultResultContext();
-    for (Object o : list) {
+    final DefaultResultContext<V> context = new DefaultResultContext<V>();
+    for (V o : list) {
       context.nextResultObject(o);
       mapResultHandler.handleResult(context);
     }

File: src/main/java/org/apache/ibatis/executor/result/DefaultResultHandler.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * @author Clinton Begin
  */
-public class DefaultResultHandler implements ResultHandler {
+public class DefaultResultHandler implements ResultHandler<Object> {
 
   private final List<Object> list;
 
@@ -39,7 +39,7 @@ public DefaultResultHandler(ObjectFactory objectFactory) {
   }
 
   @Override
-  public void handleResult(ResultContext context) {
+  public void handleResult(ResultContext<? extends Object> context) {
     list.add(context.getResultObject());
   }
 

File: src/main/java/org/apache/ibatis/session/ResultContext.java
Patch:
@@ -18,9 +18,9 @@
 /**
  * @author Clinton Begin
  */
-public interface ResultContext {
+public interface ResultContext<T> {
 
-  Object getResultObject();
+  T getResultObject();
 
   int getResultCount();
 

File: src/main/java/org/apache/ibatis/session/ResultHandler.java
Patch:
@@ -18,8 +18,8 @@
 /**
  * @author Clinton Begin
  */
-public interface ResultHandler {
+public interface ResultHandler<T> {
 
-  void handleResult(ResultContext context);
+  void handleResult(ResultContext<? extends T> resultContext);
 
 }

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSession.java
Patch:
@@ -92,11 +92,11 @@ public <K, V> Map<K, V> selectMap(String statement, Object parameter, String map
 
   @Override
   public <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {
-    final List<?> list = selectList(statement, parameter, rowBounds);
+    final List<? extends V> list = selectList(statement, parameter, rowBounds);
     final DefaultMapResultHandler<K, V> mapResultHandler = new DefaultMapResultHandler<K, V>(mapKey,
         configuration.getObjectFactory(), configuration.getObjectWrapperFactory());
-    final DefaultResultContext context = new DefaultResultContext();
-    for (Object o : list) {
+    final DefaultResultContext<V> context = new DefaultResultContext<V>();
+    for (V o : list) {
       context.nextResultObject(o);
       mapResultHandler.handleResult(context);
     }

File: src/main/java/org/apache/ibatis/scripting/xmltags/DynamicContext.java
Patch:
@@ -106,7 +106,7 @@ public Object getProperty(Map context, Object target, Object name)
       Map map = (Map) target;
 
       Object result = map.get(name);
-      if (result != null) {
+      if (map.containsKey(name) || result != null) {
         return result;
       }
 

File: src/test/java/org/apache/ibatis/submitted/foreach/Mapper.java
Patch:
@@ -25,4 +25,6 @@ public interface Mapper {
 
   int countByBestFriend(List<User> users);
 
+  String selectWithNullItemCheck(List<User> users);
+
 }

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -60,7 +60,7 @@ public int doUpdate(MappedStatement ms, Object parameterObject) throws SQLExcept
     if (sql.equals(currentSql) && ms.equals(currentStatement)) {
       int last = statementList.size() - 1;
       stmt = statementList.get(last);
-      handler.parameterize(stmt);//fix Issues 322
+     handler.parameterize(stmt);//fix Issues 322
       BatchResult batchResult = batchResultList.get(last);
       batchResult.addParameterObject(parameterObject);
     } else {
@@ -72,7 +72,7 @@ public int doUpdate(MappedStatement ms, Object parameterObject) throws SQLExcept
       statementList.add(stmt);
       batchResultList.add(new BatchResult(ms, sql, parameterObject));
     }
-
+  // handler.parameterize(stmt);
     handler.batch(stmt);
     return BATCH_UPDATE_RETURN_VALUE;
   }

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -60,17 +60,19 @@ public int doUpdate(MappedStatement ms, Object parameterObject) throws SQLExcept
     if (sql.equals(currentSql) && ms.equals(currentStatement)) {
       int last = statementList.size() - 1;
       stmt = statementList.get(last);
+      handler.parameterize(stmt);//fix Issues 322
       BatchResult batchResult = batchResultList.get(last);
       batchResult.addParameterObject(parameterObject);
     } else {
       Connection connection = getConnection(ms.getStatementLog());
       stmt = handler.prepare(connection);
+      handler.parameterize(stmt);    //fix Issues 322
       currentSql = sql;
       currentStatement = ms;
       statementList.add(stmt);
       batchResultList.add(new BatchResult(ms, sql, parameterObject));
     }
-    handler.parameterize(stmt);
+
     handler.batch(stmt);
     return BATCH_UPDATE_RETURN_VALUE;
   }

File: src/main/java/org/apache/ibatis/annotations/CacheNamespace.java
Patch:
@@ -39,4 +39,6 @@
 
   boolean readWrite() default true;
   
+  boolean blocking() default false;
+  
 }

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -126,6 +126,7 @@ public Cache useNewCache(Class<? extends Cache> typeClass,
       Long flushInterval,
       Integer size,
       boolean readWrite,
+      boolean blocking,
       Properties props) {
     typeClass = valueOrDefault(typeClass, PerpetualCache.class);
     evictionClass = valueOrDefault(evictionClass, LruCache.class);
@@ -135,6 +136,7 @@ public Cache useNewCache(Class<? extends Cache> typeClass,
         .clearInterval(flushInterval)
         .size(size)
         .readWrite(readWrite)
+        .blocking(blocking)
         .properties(props)
         .build();
     configuration.addCache(cache);

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -174,7 +174,7 @@ private void parseCache() {
     if (cacheDomain != null) {
       Integer size = cacheDomain.size() == 0 ? null : cacheDomain.size();
       Long flushInterval = cacheDomain.flushInterval() == 0 ? null : cacheDomain.flushInterval();
-      assistant.useNewCache(cacheDomain.implementation(), cacheDomain.eviction(), flushInterval, size, cacheDomain.readWrite(), null);
+      assistant.useNewCache(cacheDomain.implementation(), cacheDomain.eviction(), flushInterval, size, cacheDomain.readWrite(), cacheDomain.blocking(), null);
     }
   }
 

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -205,8 +205,9 @@ private void cacheElement(XNode context) throws Exception {
       Long flushInterval = context.getLongAttribute("flushInterval");
       Integer size = context.getIntAttribute("size");
       boolean readWrite = !context.getBooleanAttribute("readOnly", false);
+      boolean blocking = context.getBooleanAttribute("blocking", false);
       Properties props = context.getChildrenAsProperties();
-      builderAssistant.useNewCache(typeClass, evictionClass, flushInterval, size, readWrite, props);
+      builderAssistant.useNewCache(typeClass, evictionClass, flushInterval, size, readWrite, blocking, props);
     }
   }
 

File: src/main/java/org/apache/ibatis/annotations/CacheNamespace.java
Patch:
@@ -37,5 +37,6 @@
 
   int size() default 1024;
 
-  boolean readWrite() default false;
+  boolean readWrite() default true;
+  
 }

File: src/main/java/org/apache/ibatis/annotations/CacheNamespace.java
Patch:
@@ -33,9 +33,9 @@
 
   Class<? extends org.apache.ibatis.cache.Cache> eviction() default LruCache.class;
 
-  long flushInterval() default 3600000;
+  long flushInterval() default 0;
 
-  int size() default 1000;
+  int size() default 1024;
 
-  boolean readWrite() default true;
+  boolean readWrite() default false;
 }

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -172,7 +172,9 @@ private void loadXmlResource() {
   private void parseCache() {
     CacheNamespace cacheDomain = type.getAnnotation(CacheNamespace.class);
     if (cacheDomain != null) {
-      assistant.useNewCache(cacheDomain.implementation(), cacheDomain.eviction(), cacheDomain.flushInterval(), cacheDomain.size(), cacheDomain.readWrite(), null);
+      Integer size = cacheDomain.size() == 0 ? null : cacheDomain.size();
+      Long flushInterval = cacheDomain.flushInterval() == 0 ? null : cacheDomain.flushInterval();
+      assistant.useNewCache(cacheDomain.implementation(), cacheDomain.eviction(), flushInterval, size, cacheDomain.readWrite(), null);
     }
   }
 

File: src/main/java/org/apache/ibatis/jdbc/Null.java
Patch:
@@ -69,15 +69,15 @@ public enum Null {
   SQLDATE(new SqlDateTypeHandler(), JdbcType.DATE),
   SQLTIME(new SqlTimeTypeHandler(), JdbcType.TIME);
 
-  private TypeHandler typeHandler;
+  private TypeHandler<?> typeHandler;
   private JdbcType jdbcType;
 
-  private Null(TypeHandler typeHandler, JdbcType jdbcType) {
+  private Null(TypeHandler<?> typeHandler, JdbcType jdbcType) {
     this.typeHandler = typeHandler;
     this.jdbcType = jdbcType;
   }
 
-  public TypeHandler getTypeHandler() {
+  public TypeHandler<?> getTypeHandler() {
     return typeHandler;
   }
 

File: src/main/java/org/apache/ibatis/scripting/xmltags/DynamicContext.java
Patch:
@@ -110,6 +110,7 @@ public Object get(Object key) {
 
   static class ContextAccessor implements PropertyAccessor {
 
+    @Override
     public Object getProperty(Map context, Object target, Object name)
         throws OgnlException {
       Map map = (Map) target;
@@ -127,9 +128,10 @@ public Object getProperty(Map context, Object target, Object name)
       return null;
     }
 
+    @Override
     public void setProperty(Map context, Object target, Object name, Object value)
         throws OgnlException {
-      Map map = (Map) target;
+      Map<Object, Object> map = (Map<Object, Object>) target;
       map.put(name, value);
     }
 

File: src/main/java/org/apache/ibatis/cache/decorators/SoftCache.java
Patch:
@@ -116,7 +116,7 @@ private void removeGarbageCollectedItems() {
   private static class SoftEntry extends SoftReference<Object> {
     private final Object key;
 
-    private SoftEntry(Object key, Object value, ReferenceQueue<Object> garbageCollectionQueue) {
+    SoftEntry(Object key, Object value, ReferenceQueue<Object> garbageCollectionQueue) {
       super(value, garbageCollectionQueue);
       this.key = key;
     }

File: src/main/java/org/apache/ibatis/mapping/Discriminator.java
Patch:
@@ -28,7 +28,7 @@ public class Discriminator {
   private ResultMapping resultMapping;
   private Map<String, String> discriminatorMap;
 
-  private Discriminator() {
+  Discriminator() {
   }
 
   public static class Builder {

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java
Patch:
@@ -255,11 +255,10 @@ public Object run() throws Exception {
       }
 
       if (!(configurationObject instanceof Configuration)) {
-        final boolean isNull = (configurationObject == null);
         throw new ExecutorException("Cannot get Configuration as factory method ["
                 + this.configurationFactory + "]#["
                 + FACTORY_METHOD + "] didn't return [" + Configuration.class + "] but ["
-                + (isNull ? "null" : configurationObject.getClass()) + "].");
+                + (configurationObject == null ? "null" : configurationObject.getClass()) + "].");
       }
 
       return Configuration.class.cast(configurationObject);

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -504,7 +504,7 @@ private String nestedSelectId(Result result) {
   }
 
   private boolean isLazy(Result result) {
-    Boolean isLazy = configuration.isLazyLoadingEnabled();
+    boolean isLazy = configuration.isLazyLoadingEnabled();
     if (result.one().select().length() > 0 && FetchType.DEFAULT != result.one().fetchType()) {
       isLazy = (result.one().fetchType() == FetchType.LAZY);
     } else if (result.many().select().length() > 0 && FetchType.DEFAULT != result.many().fetchType()) {

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -188,8 +188,8 @@ public CacheKey createCacheKey(MappedStatement ms, Object parameterObject, RowBo
     }
     CacheKey cacheKey = new CacheKey();
     cacheKey.update(ms.getId());
-    cacheKey.update(rowBounds.getOffset());
-    cacheKey.update(rowBounds.getLimit());
+    cacheKey.update(Integer.valueOf(rowBounds.getOffset()));
+    cacheKey.update(Integer.valueOf(rowBounds.getLimit()));
     cacheKey.update(boundSql.getSql());
     List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();
     TypeHandlerRegistry typeHandlerRegistry = ms.getConfiguration().getTypeHandlerRegistry();

File: src/main/java/org/apache/ibatis/binding/MapperRegistry.java
Patch:
@@ -43,8 +43,9 @@ public MapperRegistry(Configuration config) {
   @SuppressWarnings("unchecked")
   public <T> T getMapper(Class<T> type, SqlSession sqlSession) {
     final MapperProxyFactory<T> mapperProxyFactory = (MapperProxyFactory<T>) knownMappers.get(type);
-    if (mapperProxyFactory == null)
+    if (mapperProxyFactory == null) {
       throw new BindingException("Type " + type + " is not known to the MapperRegistry.");
+    }
     try {
       return mapperProxyFactory.newInstance(sqlSession);
     } catch (Exception e) {

File: src/main/java/org/apache/ibatis/mapping/CacheBuilder.java
Patch:
@@ -85,7 +85,8 @@ public Cache build() {
     setDefaultImplementations();
     Cache cache = newBaseCacheInstance(implementation, id);
     setCacheProperties(cache);
-    if (PerpetualCache.class.equals(cache.getClass())) { // issue #352, do not apply decorators to custom caches
+    // issue #352, do not apply decorators to custom caches
+    if (PerpetualCache.class.equals(cache.getClass())) {
       for (Class<? extends Cache> decorator : decorators) {
         cache = newCacheDecoratorInstance(decorator, cache);
         setCacheProperties(cache);
@@ -100,7 +101,7 @@ public Cache build() {
   private void setDefaultImplementations() {
     if (implementation == null) {
       implementation = PerpetualCache.class;
-      if (decorators.size() == 0) {
+      if (decorators.isEmpty()) {
         decorators.add(LruCache.class);
       }
     }

File: src/main/java/org/apache/ibatis/mapping/Discriminator.java
Patch:
@@ -42,7 +42,7 @@ public Builder(Configuration configuration, ResultMapping resultMapping, Map<Str
     public Discriminator build() {
       assert discriminator.resultMapping != null;
       assert discriminator.discriminatorMap != null;
-      assert discriminator.discriminatorMap.size() > 0;
+      assert !discriminator.discriminatorMap.isEmpty();
       //lock down map
       discriminator.discriminatorMap = Collections.unmodifiableMap(discriminator.discriminatorMap);
       return discriminator;

File: src/main/java/org/apache/ibatis/mapping/MappedStatement.java
Patch:
@@ -279,7 +279,7 @@ public String[] getResulSets() {
   public BoundSql getBoundSql(Object parameterObject) {
     BoundSql boundSql = sqlSource.getBoundSql(parameterObject);
     List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();
-    if (parameterMappings == null || parameterMappings.size() <= 0) {
+    if (parameterMappings == null || parameterMappings.isEmpty()) {
       boundSql = new BoundSql(configuration, boundSql.getSql(), parameterMap.getParameterMappings(), parameterObject);
     }
 

File: src/main/java/org/apache/ibatis/mapping/ResultMapping.java
Patch:
@@ -46,7 +46,7 @@ public class ResultMapping {
   private String foreignColumn;
   private boolean lazy;
 
-  private ResultMapping() {
+  ResultMapping() {
   }
 
   public static class Builder {
@@ -151,7 +151,7 @@ private void validate() {
         throw new IllegalStateException("No typehandler found for property " + resultMapping.property);
       }
       // Issue #4 and GH #39: column is optional only in nested resultmaps but not in the rest
-      if (resultMapping.nestedResultMapId == null && resultMapping.column == null && resultMapping.composites.size() == 0) {
+      if (resultMapping.nestedResultMapId == null && resultMapping.column == null && resultMapping.composites.isEmpty()) {
         throw new IllegalStateException("Mapping is missing column attribute for property " + resultMapping.property);
       }
       if (resultMapping.getResultSet() != null) {

File: src/main/java/org/apache/ibatis/parsing/XNode.java
Patch:
@@ -326,7 +326,7 @@ public String toString() {
       builder.append("\"");
     }
     List<XNode> children = getChildren();
-    if (children.size() > 0) {
+    if (!children.isEmpty()) {
       builder.append(">\n");
       for (XNode node : children) {
         builder.append(node.toString());

File: src/main/java/org/apache/ibatis/binding/MapperProxy.java
Patch:
@@ -40,6 +40,7 @@ public MapperProxy(SqlSession sqlSession, Class<T> mapperInterface, Map<Method,
     this.methodCache = methodCache;
   }
 
+  @Override
   public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
     if (Object.class.equals(method.getDeclaringClass())) {
       try {

File: src/main/java/org/apache/ibatis/scripting/xmltags/XMLLanguageDriver.java
Patch:
@@ -15,8 +15,6 @@
  */
 package org.apache.ibatis.scripting.xmltags;
 
-import java.util.regex.Pattern;
-
 import org.apache.ibatis.builder.xml.XMLMapperEntityResolver;
 import org.apache.ibatis.executor.parameter.ParameterHandler;
 import org.apache.ibatis.mapping.BoundSql;
@@ -35,15 +33,18 @@
  */
 public class XMLLanguageDriver implements LanguageDriver {
 
+  @Override
   public ParameterHandler createParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql) {
     return new DefaultParameterHandler(mappedStatement, parameterObject, boundSql);
   }
 
+  @Override
   public SqlSource createSqlSource(Configuration configuration, XNode script, Class<?> parameterType) {
     XMLScriptBuilder builder = new XMLScriptBuilder(configuration, script, parameterType);
     return builder.parseScriptNode();
   }
 
+  @Override
   public SqlSource createSqlSource(Configuration configuration, String script, Class<?> parameterType) {
     if (script.startsWith("<script>")) { // issue #3
       XPathParser parser = new XPathParser(script, false, configuration.getVariables(), new XMLMapperEntityResolver());

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -217,8 +217,6 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setLogPrefix(props.getProperty("logPrefix"));
       configuration.setLogImpl(resolveClass(props.getProperty("logImpl")));
       configuration.setConfigurationFactory(resolveClass(props.getProperty("configurationFactory")));
-      configuration.setInjectionFilterEnabled(booleanValueOf(props.getProperty("injectionFilterEnabled"), false));
-      configuration.setInjectionFilter(parseExpression(props.getProperty("injectionFilter"), "^[a-zA-Z0-9._]*$"));
     }
   }
   

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.Set;
 
 import org.apache.ibatis.cache.CacheKey;
+import org.apache.ibatis.executor.ErrorContext;
 import org.apache.ibatis.executor.Executor;
 import org.apache.ibatis.executor.ExecutorException;
 import org.apache.ibatis.executor.loader.ResultLoader;
@@ -138,6 +139,8 @@ private void handleRefCursorOutputParameter(ResultSet rs, ParameterMapping param
   //
 
   public List<Object> handleResultSets(Statement stmt) throws SQLException {
+    ErrorContext.instance().activity("handling results").object(mappedStatement.getId());
+    
     final List<Object> multipleResults = new ArrayList<Object>();
 
     int resultSetCount = 0;

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -217,9 +217,11 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setLogPrefix(props.getProperty("logPrefix"));
       configuration.setLogImpl(resolveClass(props.getProperty("logImpl")));
       configuration.setConfigurationFactory(resolveClass(props.getProperty("configurationFactory")));
+      configuration.setInjectionFilterEnabled(booleanValueOf(props.getProperty("injectionFilterEnabled"), false));
+      configuration.setInjectionFilter(parseExpression(props.getProperty("injectionFilter"), "^[a-zA-Z0-9._]*$"));
     }
   }
-
+  
   private void environmentsElement(XNode context) throws Exception {
     if (context != null) {
       if (environment == null) {

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -123,7 +123,9 @@ public void parse() {
       Method[] methods = type.getMethods();
       for (Method method : methods) {
         try {
-          parseStatement(method);
+          if (!method.isBridge()) { // issue #237
+            parseStatement(method);
+          }
         } catch (IncompleteElementException e) {
           configuration.addIncompleteMethod(new MethodResolver(this, method));
         }

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -299,6 +299,9 @@ public ProxyFactory getProxyFactory() {
   }
 
   public void setProxyFactory(ProxyFactory proxyFactory) {
+    if (proxyFactory == null) {
+      proxyFactory = new JavassistProxyFactory();
+    }
     this.proxyFactory = proxyFactory;
   }
 

File: src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java
Patch:
@@ -24,9 +24,9 @@
 import java.util.List;
 import java.util.Map;
 
-import javax.sql.DataSource;
+import javassist.util.proxy.Proxy;
 
-import net.sf.cglib.proxy.Factory;
+import javax.sql.DataSource;
 
 import org.apache.ibatis.BaseDataTest;
 import org.apache.ibatis.mapping.MappedStatement;
@@ -341,7 +341,7 @@ public void shouldFetchPostsForBlog() throws Exception {
       List<Post> posts = executor.query(selectPosts, 1, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);
       executor.flushStatements();
       assertEquals(2, posts.size());
-      assertTrue(posts.get(1) instanceof Factory);
+      assertTrue(posts.get(1) instanceof Proxy);
       assertNotNull(posts.get(1).getBlog());
       assertEquals(1, posts.get(1).getBlog().getId());
       executor.rollback(true);

File: src/test/java/org/apache/ibatis/session/SqlSessionTest.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.List;
 import java.util.Map;
 
-import net.sf.cglib.proxy.Factory;
+import javassist.util.proxy.Proxy;
 
 import org.apache.ibatis.BaseDataTest;
 import org.apache.ibatis.binding.BindingException;
@@ -394,7 +394,7 @@ public void shouldSelectBlogWithPostsAndAuthorUsingSubSelectsLazily() throws Exc
     SqlSession session = sqlMapper.openSession();
     try {
       Blog blog = session.selectOne("domain.blog.mappers.BlogMapper.selectBlogWithPostsUsingSubSelectLazily", 1);
-      Assert.assertTrue(blog instanceof Factory);
+      Assert.assertTrue(blog instanceof Proxy);
       assertEquals("Jim Business", blog.getTitle());
       assertEquals(2, blog.getPosts().size());
       assertEquals("Corn nuts", blog.getPosts().get(0).getSubject());

File: src/main/java/org/apache/ibatis/scripting/xmltags/ForEachSqlNode.java
Patch:
@@ -52,6 +52,9 @@ public ForEachSqlNode(Configuration configuration, SqlNode contents, String coll
   public boolean apply(DynamicContext context) {
     Map<String, Object> bindings = context.getBindings();
     final Iterable<?> iterable = evaluator.evaluateIterable(collectionExpression, bindings);
+    if (!iterable.iterator().hasNext()) {
+      return true;
+    }
     boolean first = true;
     applyOpen(context);
     int i = 0;

File: src/main/java/org/apache/ibatis/parsing/GenericTokenParser.java
Patch:
@@ -39,7 +39,7 @@ public String parse(String text) {
       while (start > -1) {
         if (start > 0 && src[start - 1] == '\\') {
           // the variable is escaped. remove the backslash.
-          builder.append(src, offset, start - 1).append(openToken);
+          builder.append(src, offset, start - offset - 1).append(openToken);
           offset = start + openToken.length();
         } else {
           int end = text.indexOf(closeToken, start);

File: src/test/java/org/apache/ibatis/parsing/GenericTokenParserTest.java
Patch:
@@ -73,6 +73,8 @@ public void shallNotInterpolateSkippedVaiables() {
 
     assertEquals("${skipped} variable", parser.parse("\\${skipped} variable"));
     assertEquals("This is a ${skipped} variable", parser.parse("This is a \\${skipped} variable"));
+    assertEquals("null ${skipped} variable", parser.parse("${skipped} \\${skipped} variable"));
+    assertEquals("The null is ${skipped} variable", parser.parse("The ${skipped} is \\${skipped} variable"));
   }
 
   @Test(timeout = 1000)

File: src/main/java/org/apache/ibatis/scripting/xmltags/OgnlCache.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2012 the original author or authors.
+ *    Copyright 2009-2014 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -31,11 +31,11 @@
 import org.apache.ibatis.builder.BuilderException;
 
 /**
- *  * Caches OGNL parsed expressions.
+ * Caches OGNL parsed expressions.
  *  
  * @see http://code.google.com/p/mybatis/issues/detail?id=342
  *
- * @author Clinton Begin
+ * @author Eduardo Macarron
  */
 public class OgnlCache {
 

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -188,6 +188,7 @@ public CacheKey createCacheKey(MappedStatement ms, Object parameterObject, RowBo
         cacheKey.update(value);
       }
     }
+    if (configuration.getEnvironment() != null) cacheKey.update(configuration.getEnvironment().getId()); //issue #176
     return cacheKey;
   }    
 

File: src/test/java/org/apache/ibatis/type/TypeHandlerRegistryTest.java
Patch:
@@ -122,7 +122,6 @@ public List<URI> getNullableResult( CallableStatement cs, int columnIndex )
     assertSame(fakeHandler, typeHandlerRegistry.getTypeHandler(new TypeReference<List<URI>>(){}));
   }
 
-  @Ignore("see https://github.com/mybatis/mybatis-3/issues/165")
   @Test
   public void shouldBindHandlersToWrapersAndPrimitivesIndividually() {
     typeHandlerRegistry.register(Integer.class, DateTypeHandler.class);

File: src/main/java/org/apache/ibatis/mapping/CacheBuilder.java
Patch:
@@ -91,6 +91,8 @@ public Cache build() {
         setCacheProperties(cache);
       }
       cache = setStandardDecorators(cache);
+    } else if (!LoggingCache.class.isAssignableFrom(cache.getClass())) {
+      cache = new LoggingCache(cache);
     }
     return cache;
   }

File: src/main/java/org/apache/ibatis/annotations/Many.java
Patch:
@@ -30,6 +30,6 @@
 public @interface Many {
   String select() default "";
   
-  FetchType lazy() default FetchType.DEFAULT;
+  FetchType fetchType() default FetchType.DEFAULT;
   
 }

File: src/main/java/org/apache/ibatis/annotations/One.java
Patch:
@@ -30,6 +30,6 @@
 public @interface One {
   String select() default "";
   
-  FetchType lazy() default FetchType.DEFAULT;
+  FetchType fetchType() default FetchType.DEFAULT;
 
 }

File: src/main/java/org/apache/ibatis/mapping/CacheBuilder.java
Patch:
@@ -23,8 +23,8 @@
 
 import org.apache.ibatis.cache.Cache;
 import org.apache.ibatis.cache.CacheException;
-import org.apache.ibatis.cache.decorators.FifoCache;
 import org.apache.ibatis.cache.decorators.LoggingCache;
+import org.apache.ibatis.cache.decorators.LruCache;
 import org.apache.ibatis.cache.decorators.ScheduledCache;
 import org.apache.ibatis.cache.decorators.SerializedCache;
 import org.apache.ibatis.cache.decorators.SynchronizedCache;
@@ -99,7 +99,7 @@ private void setDefaultImplementations() {
     if (implementation == null) {
       implementation = PerpetualCache.class;
       if (decorators.size() == 0) {
-        decorators.add(FifoCache.class);
+        decorators.add(LruCache.class);
       }
     }
   }

File: src/main/java/org/apache/ibatis/annotations/SelectKey.java
Patch:
@@ -29,6 +29,8 @@
 
   String keyProperty();
 
+  String keyColumn() default "";
+
   boolean before();
 
   Class<?> resultType();

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -257,7 +257,7 @@ void parseStatement(Method method) {
       KeyGenerator keyGenerator;
       String keyProperty = "id";
       String keyColumn = null;
-      if (SqlCommandType.INSERT.equals(sqlCommandType)) {
+      if (SqlCommandType.INSERT.equals(sqlCommandType) || SqlCommandType.UPDATE.equals(sqlCommandType)) {
         // first check for SelectKey annotation - that overrides everything else
         SelectKey selectKey = method.getAnnotation(SelectKey.class);
         if (selectKey != null) {
@@ -564,6 +564,7 @@ private KeyGenerator handleSelectKeyAnnotation(SelectKey selectKeyAnnotation, St
     Class<?> resultTypeClass = selectKeyAnnotation.resultType();
     StatementType statementType = selectKeyAnnotation.statementType();
     String keyProperty = selectKeyAnnotation.keyProperty();
+    String keyColumn = selectKeyAnnotation.keyColumn();
     boolean executeBefore = selectKeyAnnotation.before();
 
     // defaults
@@ -581,7 +582,7 @@ private KeyGenerator handleSelectKeyAnnotation(SelectKey selectKeyAnnotation, St
 
     assistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType, fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass, resultSetTypeEnum,
         flushCache, useCache, false,
-        keyGenerator, keyProperty, null, null, languageDriver, null);
+        keyGenerator, keyProperty, keyColumn, null, languageDriver, null);
 
     id = assistant.applyCurrentNamespace(id, false);
 

File: src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java
Patch:
@@ -131,6 +131,7 @@ private void parseSelectKeyNode(String id, XNode nodeToHandle, Class<?> paramete
     Class<?> resultTypeClass = resolveClass(resultType);
     StatementType statementType = StatementType.valueOf(nodeToHandle.getStringAttribute("statementType", StatementType.PREPARED.toString()));
     String keyProperty = nodeToHandle.getStringAttribute("keyProperty");
+    String keyColumn = nodeToHandle.getStringAttribute("keyColumn");
     boolean executeBefore = "BEFORE".equals(nodeToHandle.getStringAttribute("order", "AFTER"));
 
     //defaults
@@ -150,7 +151,7 @@ private void parseSelectKeyNode(String id, XNode nodeToHandle, Class<?> paramete
     builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,
         fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,
         resultSetTypeEnum, flushCache, useCache, resultOrdered,
-        keyGenerator, keyProperty, null, databaseId, langDriver, null);
+        keyGenerator, keyProperty, keyColumn, databaseId, langDriver, null);
 
     id = builderAssistant.applyCurrentNamespace(id, false);
 

File: src/main/java/org/apache/ibatis/scripting/defaults/DefaultParameterHandler.java
Patch:
@@ -56,7 +56,6 @@ public void setParameters(PreparedStatement ps) throws SQLException {
     ErrorContext.instance().activity("setting parameters").object(mappedStatement.getParameterMap().getId());
     List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();
     if (parameterMappings != null) {
-      MetaObject metaObject = parameterObject == null ? null : configuration.newMetaObject(parameterObject);
       for (int i = 0; i < parameterMappings.size(); i++) {
         ParameterMapping parameterMapping = parameterMappings.get(i);
         if (parameterMapping.getMode() != ParameterMode.OUT) {
@@ -69,7 +68,8 @@ public void setParameters(PreparedStatement ps) throws SQLException {
           } else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {
             value = parameterObject;
           } else {
-            value = metaObject == null ? null : metaObject.getValue(propertyName);
+            MetaObject metaObject = configuration.newMetaObject(parameterObject);
+            value = metaObject.getValue(propertyName);
           }
           TypeHandler typeHandler = parameterMapping.getTypeHandler();
           JdbcType jdbcType = parameterMapping.getJdbcType();

File: src/main/java/org/apache/ibatis/cache/decorators/LoggingCache.java
Patch:
@@ -23,14 +23,14 @@
 
 public class LoggingCache implements Cache {
 
-  private static final Log log = LogFactory.getLog(LoggingCache.class); 
-
+  private Log log;  
   private Cache delegate;
   protected int requests = 0;
   protected int hits = 0;
 
   public LoggingCache(Cache delegate) {
     this.delegate = delegate;
+    this.log = LogFactory.getLog(getId());
   }
 
   @Override

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -364,14 +364,14 @@ private ResultMapping buildResultMappingFromContext(XNode context, Class<?> resu
     String typeHandler = context.getStringAttribute("typeHandler");
     String resulSet = context.getStringAttribute("resultSet");
     String foreignColumn = context.getStringAttribute("foreignColumn");
-    boolean lazy = context.getBooleanAttribute("lazy", configuration.isLazyLoadingEnabled());
+    boolean lazy = "lazy".equals(context.getStringAttribute("fetchType", configuration.isLazyLoadingEnabled() ? "lazy" : "eager"));
     Class<?> javaTypeClass = resolveClass(javaType);
     @SuppressWarnings("unchecked")
     Class<? extends TypeHandler<?>> typeHandlerClass = (Class<? extends TypeHandler<?>>) resolveClass(typeHandler);
     JdbcType jdbcTypeEnum = resolveJdbcType(jdbcType);
     return builderAssistant.buildResultMapping(resultType, property, column, javaTypeClass, jdbcTypeEnum, nestedSelect, nestedResultMap, notNullColumn, columnPrefix, typeHandlerClass, flags, resulSet, foreignColumn, lazy);
   }
-
+  
   private String processNestedResultMappings(XNode context, List<ResultMapping> resultMappings) throws Exception {
     if ("association".equals(context.getName())
         || "collection".equals(context.getName())

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.ibatis.executor.loader.ProxyFactory;
 import org.apache.ibatis.executor.loader.ResultLoader;
 import org.apache.ibatis.executor.loader.ResultLoaderMap;
+import org.apache.ibatis.executor.loader.cglib.CglibProxyFactory;
 import org.apache.ibatis.executor.parameter.ParameterHandler;
 import org.apache.ibatis.executor.result.DefaultResultContext;
 import org.apache.ibatis.executor.result.DefaultResultHandler;
@@ -94,7 +95,7 @@ public DefaultResultSetHandler(Executor executor, MappedStatement mappedStatemen
     this.typeHandlerRegistry = configuration.getTypeHandlerRegistry();
     this.objectFactory = configuration.getObjectFactory();
     this.resultHandler = resultHandler;
-    this.proxyFactory = configuration.getProxyFactory();
+    this.proxyFactory = configuration.getProxyFactory() == null ? new CglibProxyFactory() : configuration.getProxyFactory();
   }
 
   //

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -292,9 +292,6 @@ public void setLazyLoadingEnabled(boolean lazyLoadingEnabled) {
   }
 
   public ProxyFactory getProxyFactory() {
-    if (proxyFactory == null) {
-      proxyFactory = new CglibProxyFactory();
-    }
     return proxyFactory;
   }
 

File: src/main/java/org/apache/ibatis/annotations/Many.java
Patch:
@@ -20,13 +20,13 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apache.ibatis.mapping.Loading;
+import org.apache.ibatis.mapping.FetchType;
 
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)
 public @interface Many {
   String select() default "";
   
-  Loading lazy() default Loading.DEFAULT;
+  FetchType lazy() default FetchType.DEFAULT;
   
 }

File: src/main/java/org/apache/ibatis/annotations/One.java
Patch:
@@ -20,13 +20,13 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apache.ibatis.mapping.Loading;
+import org.apache.ibatis.mapping.FetchType;
 
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)
 public @interface One {
   String select() default "";
   
-  Loading lazy() default Loading.DEFAULT;
+  FetchType lazy() default FetchType.DEFAULT;
 
 }

File: src/main/java/org/apache/ibatis/mapping/FetchType.java
Patch:
@@ -15,6 +15,6 @@
  */
 package org.apache.ibatis.mapping;
 
-public enum Loading {
+public enum FetchType {
   LAZY, EAGER, DEFAULT
 }

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -364,11 +364,12 @@ private ResultMapping buildResultMappingFromContext(XNode context, Class<?> resu
     String typeHandler = context.getStringAttribute("typeHandler");
     String resulSet = context.getStringAttribute("resultSet");
     String foreignColumn = context.getStringAttribute("foreignColumn");
+    boolean lazy = context.getBooleanAttribute("lazy", configuration.isLazyLoadingEnabled());
     Class<?> javaTypeClass = resolveClass(javaType);
     @SuppressWarnings("unchecked")
     Class<? extends TypeHandler<?>> typeHandlerClass = (Class<? extends TypeHandler<?>>) resolveClass(typeHandler);
     JdbcType jdbcTypeEnum = resolveJdbcType(jdbcType);
-    return builderAssistant.buildResultMapping(resultType, property, column, javaTypeClass, jdbcTypeEnum, nestedSelect, nestedResultMap, notNullColumn, columnPrefix, typeHandlerClass, flags, resulSet, foreignColumn);
+    return builderAssistant.buildResultMapping(resultType, property, column, javaTypeClass, jdbcTypeEnum, nestedSelect, nestedResultMap, notNullColumn, columnPrefix, typeHandlerClass, flags, resulSet, foreignColumn, lazy);
   }
 
   private String processNestedResultMappings(XNode context, List<ResultMapping> resultMappings) throws Exception {

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -272,7 +272,7 @@ private <E> List<E> queryFromDatabase(MappedStatement ms, Object parameter, RowB
   protected Connection getConnection(Log statementLog) throws SQLException {
     Connection connection = transaction.getConnection();
     if (statementLog.isDebugEnabled()) {
-      return ConnectionLogger.newInstance(connection, statementLog);
+      return ConnectionLogger.newInstance(connection, statementLog, queryStack);
     } else {
       return connection;
     }

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -288,13 +288,13 @@ public boolean isLazyLoadingEnabled() {
   }
 
   public void setLazyLoadingEnabled(boolean lazyLoadingEnabled) {
-    if (lazyLoadingEnabled && this.proxyFactory == null) {
-      this.proxyFactory = new CglibProxyFactory();
-    }
     this.lazyLoadingEnabled = lazyLoadingEnabled;
   }
 
   public ProxyFactory getProxyFactory() {
+    if (proxyFactory == null) {
+      proxyFactory = new CglibProxyFactory();
+    }
     return proxyFactory;
   }
 

File: src/test/java/org/apache/ibatis/submitted/batch_keys/BatchKeysTest.java
Patch:
@@ -28,7 +28,7 @@
 import java.sql.Statement;
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.apache.ibatis.io.Resources;
 import org.apache.ibatis.jdbc.ScriptRunner;

File: src/test/java/org/apache/ibatis/submitted/blobtest/BlobTest.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.apache.ibatis.submitted.blobtest;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 import java.io.Reader;
 import java.sql.Connection;

File: src/test/java/org/apache/ibatis/submitted/complex_column/ComplexColumnTest.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.Connection;
 import java.sql.DriverManager;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.apache.ibatis.io.Resources;
 import org.apache.ibatis.jdbc.ScriptRunner;

File: src/test/java/org/apache/ibatis/submitted/dml_return_types/DmlMapperReturnTypesTest.java
Patch:
@@ -28,7 +28,7 @@
 import java.io.Reader;
 import java.sql.Connection;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 public class DmlMapperReturnTypesTest {
 

File: src/test/java/org/apache/ibatis/submitted/duplicate_resource_loaded/DuplicateResourceTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.apache.ibatis.submitted.duplicate_resource_loaded;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.apache.ibatis.BaseDataTest;
 import org.apache.ibatis.io.Resources;
 import org.apache.ibatis.session.SqlSession;

File: src/test/java/org/apache/ibatis/submitted/generictypes/GenericTypesTest.java
Patch:
@@ -21,7 +21,7 @@
 import java.sql.Connection;
 import java.sql.DriverManager;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.apache.ibatis.io.Resources;
 import org.apache.ibatis.jdbc.ScriptRunner;

File: src/test/java/org/apache/ibatis/submitted/parametrizedlist/ParametrizedListTest.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.List;
 import java.util.Map;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.apache.ibatis.io.Resources;
 import org.apache.ibatis.jdbc.ScriptRunner;

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2012 the original author or authors.
+ *    Copyright 2009-2014 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -77,7 +77,7 @@ public <E> List<E> doQuery(MappedStatement ms, Object parameterObject, RowBounds
     try {
       flushStatements();
       Configuration configuration = ms.getConfiguration();
-      StatementHandler handler = configuration.newStatementHandler(this, ms, parameterObject, rowBounds, resultHandler, boundSql);
+      StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameterObject, rowBounds, resultHandler, boundSql);
       Connection connection = getConnection(ms.getStatementLog());
       stmt = handler.prepare(connection);
       handler.parameterize(stmt);

File: src/main/java/org/apache/ibatis/executor/Executor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2012 the original author or authors.
+ *    Copyright 2009-2014 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -55,5 +55,7 @@ public interface Executor {
   void close(boolean forceRollback);
 
   boolean isClosed();
+  
+  void setExecutorWrapper(Executor executor);
 
 }

File: src/main/java/org/apache/ibatis/executor/ReuseExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2012 the original author or authors.
+ *    Copyright 2009-2014 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -49,7 +49,7 @@ public int doUpdate(MappedStatement ms, Object parameter) throws SQLException {
 
   public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {
     Configuration configuration = ms.getConfiguration();
-    StatementHandler handler = configuration.newStatementHandler(this, ms, parameter, rowBounds, resultHandler, boundSql);
+    StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);
     Statement stmt = prepareStatement(handler, ms.getStatementLog());
     return handler.<E>query(stmt, resultHandler);
   }

File: src/main/java/org/apache/ibatis/executor/SimpleExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2012 the original author or authors.
+ *    Copyright 2009-2014 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -52,7 +52,7 @@ public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBo
     Statement stmt = null;
     try {
       Configuration configuration = ms.getConfiguration();
-      StatementHandler handler = configuration.newStatementHandler(this, ms, parameter, rowBounds, resultHandler, boundSql);
+      StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);
       stmt = prepareStatement(handler, ms.getStatementLog());
       return handler.<E>query(stmt, resultHandler);
     } finally {

File: src/test/java/org/apache/ibatis/submitted/cache/CacheTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2012 the original author or authors.
+ *    Copyright 2009-2014 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -18,13 +18,12 @@
 import java.io.Reader;
 import java.sql.Connection;
 
-import junit.framework.Assert;
-
 import org.apache.ibatis.io.Resources;
 import org.apache.ibatis.jdbc.ScriptRunner;
 import org.apache.ibatis.session.SqlSession;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.apache.ibatis.executor.keygen.Jdbc3KeyGenerator;
 import org.apache.ibatis.executor.keygen.KeyGenerator;
+import org.apache.ibatis.executor.keygen.NoKeyGenerator;
 import org.apache.ibatis.executor.statement.StatementHandler;
 import org.apache.ibatis.mapping.BoundSql;
 import org.apache.ibatis.mapping.MappedStatement;
@@ -100,10 +101,10 @@ public List<BatchResult> doFlushStatements(boolean isRollback) throws SQLExcepti
             MappedStatement ms = batchResult.getMappedStatement();
             List<Object> parameterObjects = batchResult.getParameterObjects();
             KeyGenerator keyGenerator = ms.getKeyGenerator();
-            if (keyGenerator instanceof Jdbc3KeyGenerator) {
+            if (Jdbc3KeyGenerator.class.equals(keyGenerator.getClass())) {
               Jdbc3KeyGenerator jdbc3KeyGenerator = (Jdbc3KeyGenerator) keyGenerator;
               jdbc3KeyGenerator.processBatch(ms, stmt, parameterObjects);
-            } else {
+            } else if (!NoKeyGenerator.class.equals(keyGenerator.getClass())) { //issue #141
               for (Object parameter : parameterObjects) {
                 keyGenerator.processAfter(this, ms, stmt, parameter);
               }

File: src/main/java/org/apache/ibatis/cache/decorators/FifoCache.java
Patch:
@@ -26,7 +26,7 @@
 public class FifoCache implements Cache {
 
   private final Cache delegate;
-  private final LinkedList<Object> keyList;
+  private LinkedList<Object> keyList;
   private int size;
 
   public FifoCache(Cache delegate) {
@@ -62,7 +62,7 @@ public Object removeObject(Object key) {
 
   public void clear() {
     delegate.clear();
-    keyList.clear();
+    keyList = new LinkedList<Object>(); // see #138
   }
 
   public ReadWriteLock getReadWriteLock() {

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -56,6 +56,7 @@
 import org.apache.ibatis.annotations.Update;
 import org.apache.ibatis.annotations.UpdateProvider;
 import org.apache.ibatis.binding.BindingException;
+import org.apache.ibatis.binding.MapperMethod.ParamMap;
 import org.apache.ibatis.builder.BuilderException;
 import org.apache.ibatis.builder.IncompleteElementException;
 import org.apache.ibatis.builder.MapperBuilderAssistant;
@@ -338,7 +339,7 @@ private Class<?> getParameterType(Method method) {
         if (parameterType == null) {
           parameterType = parameterTypes[i];
         } else {
-          parameterType = Map.class;
+          parameterType = ParamMap.class; // issue #135
         }
       }
     }

File: src/main/java/org/apache/ibatis/scripting/xmltags/XMLLanguageDriver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2013 the original author or authors.
+ *    Copyright 2009-2014 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -19,6 +19,7 @@
 import org.apache.ibatis.mapping.BoundSql;
 import org.apache.ibatis.mapping.MappedStatement;
 import org.apache.ibatis.mapping.SqlSource;
+import org.apache.ibatis.parsing.PropertyParser;
 import org.apache.ibatis.parsing.XNode;
 import org.apache.ibatis.scripting.LanguageDriver;
 import org.apache.ibatis.scripting.defaults.DefaultParameterHandler;
@@ -41,6 +42,7 @@ public SqlSource createSqlSource(Configuration configuration, String script, Cla
       XMLScriptBuilder builder = new XMLScriptBuilder(configuration, script, parameterType);
       return builder.parseScriptNode();
     } else {
+      script = PropertyParser.parse(script, configuration.getVariables()); // issue #127
       TextSqlNode textSqlNode = new TextSqlNode(script);
       if (textSqlNode.isDynamic()) {
         return new DynamicSqlSource(configuration, textSqlNode);

File: src/main/java/org/apache/ibatis/scripting/xmltags/XMLScriptBuilder.java
Patch:
@@ -65,7 +65,7 @@ public SqlSource parseScriptNode() {
     if (isDynamic) {
       sqlSource = new DynamicSqlSource(configuration, rootSqlNode);
     } else {
-      sqlSource = new RawSqlSource(configuration, context, parameterType);
+      sqlSource = new RawSqlSource(configuration, rootSqlNode, parameterType);
     }
     return sqlSource;
   }

File: src/test/java/org/apache/ibatis/submitted/raw_sql_source/RawSqlSourceTest.java
Patch:
@@ -71,6 +71,8 @@ private void test(String statement, Class<? extends SqlSource> sqlSource) {
     SqlSession sqlSession = sqlSessionFactory.openSession();
     try {
       Assert.assertEquals(sqlSource, sqlSession.getConfiguration().getMappedStatement(statement).getSqlSource().getClass());
+      String sql = sqlSession.getConfiguration().getMappedStatement(statement).getSqlSource().getBoundSql('?').getSql();
+      Assert.assertEquals("select * from users where id = ?", sql);
       User user = sqlSession.selectOne(statement, 1);
       Assert.assertEquals("User1", user.getName());
     } finally {

File: src/main/java/org/apache/ibatis/scripting/defaults/RawSqlSource.java
Patch:
@@ -47,6 +47,7 @@ private static String getString(XNode script) {
       if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {
         String data = child.getStringBody("");
         contents.append(data);
+        contents.append(" "); // issue #128
       }
     }
     return contents.toString();

File: src/test/java/org/apache/ibatis/submitted/parent_reference_3level/BlogTest.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.junit.Assert;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
 public class BlogTest {
@@ -99,7 +98,6 @@ public void testSelectBlogWithoutPosts() {
     }
   }
 
-  @Ignore
   @Test
   public void testSelectBlogWithPostsColumnPrefix() {
     SqlSession session = sqlSessionFactory.openSession();
@@ -120,7 +118,6 @@ public void testSelectBlogWithPostsColumnPrefix() {
     }
   }
 
-  @Ignore
   @Test
   public void testSelectBlogWithoutPostsColumnPrefix() {
     SqlSession session = sqlSessionFactory.openSession();

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -402,7 +402,7 @@ private boolean applyAutomaticMappings(ResultSetWrapper rsw, ResultMap resultMap
       if (columnPrefix != null && columnPrefix.length() > 0) {
         // When columnPrefix is specified,
         // ignore columns without the prefix.
-        if (columnName.startsWith(columnPrefix)) {
+        if (columnName.toUpperCase(Locale.ENGLISH).startsWith(columnPrefix)) {
           propertyName = columnName.substring(columnPrefix.length());
         } else {
           continue;
@@ -913,7 +913,7 @@ private void createRowKeyForUnmappedProperties(ResultMap resultMap, ResultSetWra
       if (columnPrefix != null && columnPrefix.length() > 0) {
         // When columnPrefix is specified,
         // ignore columns without the prefix.
-        if (column.startsWith(columnPrefix)) {
+        if (column.toUpperCase(Locale.ENGLISH).startsWith(columnPrefix)) {
           property = column.substring(columnPrefix.length());
         } else {
           continue;

File: src/test/java/org/apache/ibatis/binding/BoundBlogMapper.java
Patch:
@@ -111,6 +111,8 @@ public interface BoundBlogMapper {
 
   Blog selectBlogUsingConstructorWithResultMap(int i);
 
+  Blog selectBlogUsingConstructorWithResultMapAndProperties(int i);
+  
   Blog selectBlogUsingConstructorWithResultMapCollection(int i);
   
   Blog selectBlogByIdUsingConstructor(int id);

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -79,7 +79,7 @@ public void close(boolean forceRollback) {
       }
     } catch (SQLException e) {
       // Ignore.  There's nothing that can be done at this point.
-      log.debug("Unexpected exception on closing transaction.  Cause: " + e);
+      log.warn("Unexpected exception on closing transaction.  Cause: " + e);
     } finally {
       transaction = null;
       deferredLoads = null;

File: src/test/java/org/apache/ibatis/submitted/automapping/Mapper.java
Patch:
@@ -21,6 +21,8 @@ public interface Mapper {
 
   User getUser(Integer id);
 
+  User getUserWithPets(Integer id);
+
   List<Book> getBooks();
   
   Article getArticle();

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoader.java
Patch:
@@ -45,6 +45,7 @@ public class ResultLoader {
   protected final CacheKey cacheKey;
   protected final BoundSql boundSql;
   protected final ResultExtractor resultExtractor;
+  protected final Thread creatorThread;
   
   protected boolean loaded;
   protected Object resultObject;
@@ -59,6 +60,7 @@ public ResultLoader(Configuration config, Executor executor, MappedStatement map
     this.cacheKey = cacheKey;
     this.boundSql = boundSql;
     this.resultExtractor = new ResultExtractor(configuration, objectFactory);
+    this.creatorThread = Thread.currentThread();
   }
 
   public Object loadResult() throws SQLException {
@@ -69,7 +71,7 @@ public Object loadResult() throws SQLException {
 
   private <E> List<E> selectList() throws SQLException {
     Executor localExecutor = executor;
-    if (localExecutor.isClosed()) {
+    if (Thread.currentThread() != this.creatorThread || localExecutor.isClosed()) {
       localExecutor = newExecutor();
     }
     try {

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -160,6 +160,7 @@ public Configuration(Environment environment) {
   public Configuration() {
     typeAliasRegistry.registerAlias("JDBC", JdbcTransactionFactory.class);
     typeAliasRegistry.registerAlias("MANAGED", ManagedTransactionFactory.class);
+
     typeAliasRegistry.registerAlias("JNDI", JndiDataSourceFactory.class);
     typeAliasRegistry.registerAlias("POOLED", PooledDataSourceFactory.class);
     typeAliasRegistry.registerAlias("UNPOOLED", UnpooledDataSourceFactory.class);
@@ -170,7 +171,7 @@ public Configuration() {
     typeAliasRegistry.registerAlias("SOFT", SoftCache.class);
     typeAliasRegistry.registerAlias("WEAK", WeakCache.class);
 
-    typeAliasRegistry.registerAlias("VENDOR", VendorDatabaseIdProvider.class);
+    typeAliasRegistry.registerAlias("DB_VENDOR", VendorDatabaseIdProvider.class);
 
     typeAliasRegistry.registerAlias("XML", XMLLanguageDriver.class);
     typeAliasRegistry.registerAlias("RAW", RawLanguageDriver.class);

File: src/test/java/org/apache/ibatis/submitted/includes/IncludeTest.java
Patch:
@@ -37,8 +37,8 @@ public void testIncludes() throws Exception {
 
     final SqlSession sqlSession = sqlMapper.openSession();
     try {
-      final int result = sqlSession.selectOne("org.apache.ibatis.submitted.includes.mapper.selectWithProperty");
-      Assert.assertEquals(1, result);
+      final Integer result = sqlSession.selectOne("org.apache.ibatis.submitted.includes.mapper.selectWithProperty");
+      Assert.assertEquals(Integer.valueOf(1), result);
     } finally {
       sqlSession.close();
     }

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -369,7 +369,7 @@ private boolean applyPropertyMappings(ResultSetWrapper rsw, ResultMap resultMap,
           if (value != null || !metaObject.getSetterType(property).isPrimitive()) {
             metaObject.setValue(property, value);
           }
-          foundValues = (value != null) || foundValues;
+          foundValues = true;
         }
       }
     }

File: src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls/Mapper.java
Patch:
@@ -24,5 +24,6 @@ public interface Mapper {
   User getUserUnmapped(Integer id);
   Map getUserInMap(Integer id);
   List<Map<String,Object>> getNameOnly();
+  List<Map<String,Object>> getNameOnlyMapped();
 
 }

File: src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls/CallSettersOnNullsTest.java
Patch:
@@ -95,7 +95,7 @@ public void shouldCallNullOnMapForSingleColumn() {
     try {
       Mapper mapper = sqlSession.getMapper(Mapper.class);
       List<Map<String, Object>> oneColumns = mapper.getNameOnly();
-      Assert.assertNull(oneColumns.get(1));
+      Assert.assertNotNull(oneColumns.get(1));
     } finally {
       sqlSession.close();
     }

File: src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls/Mapper.java
Patch:
@@ -15,12 +15,14 @@
  */
 package org.apache.ibatis.submitted.call_setters_on_nulls;
 
+import java.util.List;
 import java.util.Map;
 
 public interface Mapper {
 
   User getUserMapped(Integer id);
   User getUserUnmapped(Integer id);
   Map getUserInMap(Integer id);
+  List<Map<String,Object>> getNameOnly();
 
 }

File: src/main/java/org/apache/ibatis/reflection/wrapper/MapWrapper.java
Patch:
@@ -109,7 +109,7 @@ public boolean hasGetter(String name) {
       if (map.containsKey(prop.getIndexedName())) {
         MetaObject metaValue = metaObject.metaObjectForProperty(prop.getIndexedName());
         if (metaValue == SystemMetaObject.NULL_META_OBJECT) {
-          return map.containsKey(name);
+          return true;
         } else {
           return metaValue.hasGetter(prop.getChildren());
         }

File: src/test/java/org/apache/ibatis/submitted/foreach/Mapper.java
Patch:
@@ -23,4 +23,6 @@ public interface Mapper {
 
   int countByUserList(List<User> users);
 
+  int countByBestFriend(List<User> users);
+
 }

File: src/main/java/org/apache/ibatis/scripting/xmltags/WhereSqlNode.java
Patch:
@@ -20,7 +20,7 @@
 public class WhereSqlNode extends TrimSqlNode {
 
   public WhereSqlNode(Configuration configuration, SqlNode contents) {
-    super(configuration, contents, "WHERE", "AND |OR |AND\n|OR\n|AND\r|OR\r", null, null);
+    super(configuration, contents, "WHERE", "AND |OR |AND\n|OR\n|AND\r|OR\r|AND\t|OR\t", null, null);
   }
 
 

File: src/main/java/org/apache/ibatis/scripting/xmltags/ForEachSqlNode.java
Patch:
@@ -145,9 +145,9 @@ public String getSql() {
     public void appendSql(String sql) {
       GenericTokenParser parser = new GenericTokenParser("#{", "}", new TokenHandler() {
         public String handleToken(String content) {
-          String newContent = content.replaceFirst(item, itemizeItem(item, index));
+          String newContent = content.replaceFirst("^\\s*" + item + "(?![^.,:\\s])", itemizeItem(item, index));
           if (itemIndex != null && newContent.equals(content)) {
-            newContent = content.replaceFirst(itemIndex, itemizeItem(itemIndex, index));
+            newContent = content.replaceFirst("^\\s*" + itemIndex + "(?![^.,:\\s])", itemizeItem(itemIndex, index));
           }
           return new StringBuilder("#{").append(newContent).append("}").toString();
         }

File: src/test/java/org/apache/ibatis/submitted/ognlstatic/OgnlStaticTest.java
Patch:
@@ -63,14 +63,14 @@ public void shouldGetAUserStatic() {
     try {
       Mapper mapper = sqlSession.getMapper(Mapper.class);
       User user = mapper.getUserStatic(1);
+      Assert.assertNotNull(user);
       Assert.assertEquals("User1", user.getName());
     } finally {
       sqlSession.close();
     }
   }
 
-  @Ignore
-  @Test // see issue #61
+  @Test // see issue #61 (gh)
   public void shouldGetAUserWithIfNode() {
     SqlSession sqlSession = sqlSessionFactory.openSession();
     try {

File: src/test/java/org/apache/ibatis/submitted/ognlstatic/Mapper.java
Patch:
@@ -17,6 +17,7 @@
 
 public interface Mapper {
 
-  User getUser(Integer id);
+  User getUserStatic(Integer id);
+  User getUserIfNode(String id);
 
 }

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -103,6 +103,9 @@ public XNode getSqlFragment(String refid) {
   private void configurationElement(XNode context) {
     try {
       String namespace = context.getStringAttribute("namespace");
+      if (namespace.equals("")) {
+    	  throw new BuilderException("Mapper's namespace cannot be empty");
+      }
       builderAssistant.setCurrentNamespace(namespace);
       cacheRefElement(context.evalNode("cache-ref"));
       cacheElement(context.evalNode("cache"));

File: src/main/java/org/apache/ibatis/annotations/ResultMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2011 The MyBatis Team
+ *    Copyright 2009-2013 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,5 +23,5 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)
 public @interface ResultMap {
-  String value();
+  String[] value();
 }

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2012 The MyBatis Team
+ *    Copyright 2009-2013 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -162,8 +162,8 @@ private LoadPair(final String property, MetaObject metaResultObject, ResultLoade
     public void load() throws SQLException {
       /* These field should not be null unless the loadpair was serialized.
        * Yet in that case this method should not be called. */
-      assert this.metaResultObject != null : "metaResultObject is null";
-      assert this.resultLoader != null : "resultLoader is null";
+      if (this.metaResultObject == null) throw new IllegalArgumentException("metaResultObject is null");
+      if (this.resultLoader == null) throw new IllegalArgumentException("resultLoader is null");
 
       this.load(null);
     }

File: src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2012 The MyBatis Team
+ *    Copyright 2009-2013 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,7 +17,6 @@
 
 import java.lang.reflect.Method;
 import java.util.List;
-import java.util.Locale;
 import java.util.Map;
 import java.util.Properties;
 import java.util.Set;
@@ -27,7 +26,6 @@
 import net.sf.cglib.proxy.MethodInterceptor;
 import net.sf.cglib.proxy.MethodProxy;
 
-import org.apache.ibatis.executor.ExecutorException;
 import org.apache.ibatis.executor.loader.AbstractEnhancedDeserializationProxy;
 import org.apache.ibatis.executor.loader.AbstractSerialStateHolder;
 import org.apache.ibatis.executor.loader.ProxyFactory;

File: src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistSerialStateHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2012 The MyBatis Team
+ *    Copyright 2009-2013 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,7 +17,6 @@
 
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 
 import org.apache.ibatis.executor.loader.AbstractSerialStateHolder;
 import org.apache.ibatis.executor.loader.ResultLoaderMap;

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -45,9 +45,9 @@
 import org.apache.ibatis.executor.ReuseExecutor;
 import org.apache.ibatis.executor.SimpleExecutor;
 import org.apache.ibatis.executor.keygen.KeyGenerator;
-import org.apache.ibatis.executor.loader.CglibProxyFactory;
-import org.apache.ibatis.executor.loader.JavassistProxyFactory;
 import org.apache.ibatis.executor.loader.ProxyFactory;
+import org.apache.ibatis.executor.loader.cglib.CglibProxyFactory;
+import org.apache.ibatis.executor.loader.javassist.JavassistProxyFactory;
 import org.apache.ibatis.executor.parameter.ParameterHandler;
 import org.apache.ibatis.executor.resultset.FastResultSetHandler;
 import org.apache.ibatis.executor.resultset.NestedResultSetHandler;

File: src/main/java/org/apache/ibatis/executor/statement/CallableStatementHandler.java
Patch:
@@ -86,7 +86,7 @@ private void registerOutputParameters(CallableStatement cs) throws SQLException
       ParameterMapping parameterMapping = parameterMappings.get(i);
       if (parameterMapping.getMode() == ParameterMode.OUT || parameterMapping.getMode() == ParameterMode.INOUT) {
         if (null == parameterMapping.getJdbcType()) {
-          throw new ExecutorException("The JDBC Type must be specified for output parameterArray.  Paramter: " + parameterMapping.getProperty());
+          throw new ExecutorException("The JDBC Type must be specified for output parameter.  Parameter: " + parameterMapping.getProperty());
         } else {
           if (parameterMapping.getNumericScale() != null && (parameterMapping.getJdbcType() == JdbcType.NUMERIC || parameterMapping.getJdbcType() == JdbcType.DECIMAL)) {
             cs.registerOutParameter(i + 1, parameterMapping.getJdbcType().TYPE_CODE, parameterMapping.getNumericScale());

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -59,6 +59,7 @@
 import org.apache.ibatis.logging.commons.JakartaCommonsLoggingImpl;
 import org.apache.ibatis.logging.jdk14.Jdk14LoggingImpl;
 import org.apache.ibatis.logging.log4j.Log4jImpl;
+import org.apache.ibatis.logging.log4j2.Log4j2Impl;
 import org.apache.ibatis.logging.nologging.NoLoggingImpl;
 import org.apache.ibatis.logging.slf4j.Slf4jImpl;
 import org.apache.ibatis.logging.stdout.StdOutImpl;
@@ -171,6 +172,7 @@ public Configuration() {
     typeAliasRegistry.registerAlias("SLF4J", Slf4jImpl.class);
     typeAliasRegistry.registerAlias("COMMONS_LOGGING", JakartaCommonsLoggingImpl.class);
     typeAliasRegistry.registerAlias("LOG4J", Log4jImpl.class);
+    typeAliasRegistry.registerAlias("LOG4J2", Log4j2Impl.class);
     typeAliasRegistry.registerAlias("JDK_LOGGING", Jdk14LoggingImpl.class);
     typeAliasRegistry.registerAlias("STDOUT_LOGGING", StdOutImpl.class);
     typeAliasRegistry.registerAlias("NO_LOGGING", NoLoggingImpl.class);

File: src/main/java/org/apache/ibatis/transaction/jdbc/JdbcTransaction.java
Patch:
@@ -126,7 +126,7 @@ protected void resetAutoCommit() {
 
   protected void openConnection() throws SQLException {
     if (log.isDebugEnabled()) {
-      log.debug("Openning JDBC Connection");
+      log.debug("Opening JDBC Connection");
     }
     connection = dataSource.getConnection();
     if (level != null) {

File: src/main/java/org/apache/ibatis/transaction/managed/ManagedTransaction.java
Patch:
@@ -79,7 +79,7 @@ public void close() throws SQLException {
 
   protected void openConnection() throws SQLException {
     if (log.isDebugEnabled()) {
-      log.debug("Openning JDBC Connection");
+      log.debug("Opening JDBC Connection");
     }
     this.connection = this.dataSource.getConnection();
     if (this.level != null) {

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -541,7 +541,7 @@ private KeyGenerator handleSelectKeyAnnotation(SelectKey selectKeyAnnotation, St
     SqlCommandType sqlCommandType = SqlCommandType.SELECT;
 
     assistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType, fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass, resultSetTypeEnum,
-        flushCache, useCache, false, // TODO issue #577
+        flushCache, useCache, false,
         keyGenerator, keyProperty, null, null, languageDriver);
 
     id = assistant.applyCurrentNamespace(id, false);

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2012 The MyBatis Team
+ *    Copyright 2009-2013 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -75,6 +75,7 @@
 import org.apache.ibatis.mapping.StatementType;
 import org.apache.ibatis.scripting.LanguageDriver;
 import org.apache.ibatis.session.Configuration;
+import org.apache.ibatis.session.ResultHandler;
 import org.apache.ibatis.session.RowBounds;
 import org.apache.ibatis.type.JdbcType;
 import org.apache.ibatis.type.TypeHandler;
@@ -326,7 +327,7 @@ private Class<?> getParameterType(Method method) {
     Class<?> parameterType = null;
     Class<?>[] parameterTypes = method.getParameterTypes();
     for (int i = 0; i < parameterTypes.length; i++) {
-      if (!RowBounds.class.isAssignableFrom(parameterTypes[i])) {
+      if (!RowBounds.class.isAssignableFrom(parameterTypes[i]) && !ResultHandler.class.isAssignableFrom(parameterTypes[i])) {
         if (parameterType == null) {
           parameterType = parameterTypes[i];
         } else {

File: src/main/java/org/apache/ibatis/scripting/LanguageDriver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 MyBatis.org.
+ * Copyright 2012-2013 MyBatis.org.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -39,7 +39,7 @@ public interface LanguageDriver {
    * 
    * @param configuration The MyBatis configuration
    * @param script XNode parsed from a XML file
-   * @param parameterType input parameter type
+   * @param parameterType input parameter type got from a mapper method or specified in the parameterType xml attribute. Can be null.
    * @return
    */
   public SqlSource createSqlSource(Configuration configuration, XNode script, Class<?> parameterType);
@@ -49,7 +49,7 @@ public interface LanguageDriver {
    * 
    * @param configuration The MyBatis configuration
    * @param script The content of the annotation
-   * @param parameterType input parameter type
+   * @param parameterType input parameter type got from a mapper method or specified in the parameterType xml attribute. Can be null.
    * @return 
    */
   public SqlSource createSqlSource(Configuration configuration, String script, Class<?> parameterType);

File: src/test/java/org/apache/ibatis/submitted/foreach_map/ForEachMapTest.java
Patch:
@@ -103,8 +103,8 @@ public void shouldSubstituteIndexWithKey() throws Exception {
     MapParam mapParam = new MapParam();
     mapParam.getMap().put("col_a", 22);
     mapParam.getMap().put("col_b", 222);
-    int count = sqlSession.selectOne("sel_key_cols", mapParam);
-    Assert.assertEquals(1, count);
+    Integer count = sqlSession.selectOne("sel_key_cols", mapParam);
+    Assert.assertEquals(Integer.valueOf(1), count);
   }
 
   private SqlSession sqlSession;

File: src/main/java/org/apache/ibatis/scripting/xmltags/ForEachSqlNode.java
Patch:
@@ -70,7 +70,7 @@ public boolean apply(DynamicContext context) {
         applyIndex(context, mapEntry.getKey(), uniqueNumber);
         applyItem(context, mapEntry.getValue(), uniqueNumber);
       } else {
-        applyIndex(context, uniqueNumber, i);
+        applyIndex(context, i, uniqueNumber);
         applyItem(context, o, uniqueNumber);
       }
       contents.apply(new FilteredDynamicContext(configuration, context, index, item, uniqueNumber));
@@ -84,7 +84,7 @@ public boolean apply(DynamicContext context) {
 
   private void applyIndex(DynamicContext context, Object o, int i) {
     if (index != null) {
-      context.bind(index, i);
+      context.bind(index, o);
       context.bind(itemizeItem(index, i), o);
     }
   }

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -83,7 +83,7 @@ private XMLConfigBuilder(XPathParser parser, String environment, Properties prop
 
   public Configuration parse() {
     if (parsed) {
-      throw new BuilderException("Each MapperConfigParser can only be used once.");
+      throw new BuilderException("Each XMLConfigBuilder can only be used once.");
     }
     parsed = true;
     parseConfiguration(parser.evalNode("/configuration"));
@@ -208,6 +208,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setLocalCacheScope(LocalCacheScope.valueOf(props.getProperty("localCacheScope", "SESSION")));
       configuration.setJdbcTypeForNull(JdbcType.valueOf(props.getProperty("jdbcTypeForNull", "OTHER")));
       configuration.setLazyLoadTriggerMethods(stringSetValueOf(props.getProperty("lazyLoadTriggerMethods"), "equals,clone,hashCode,toString"));
+      configuration.setSafeResultHandlerEnabled(booleanValueOf(props.getProperty("safeResultHandlerEnabled"), true));
       configuration.setDefaultScriptingLanguage(resolveClass(props.getProperty("defaultScriptingLanguage")));
       configuration.setCallSettersOnNulls(booleanValueOf(props.getProperty("callSettersOnNulls"), false));
       configuration.setLogPrefix(props.getProperty("logPrefix"));

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -218,12 +218,10 @@ public void setDatabaseId(String databaseId) {
     this.databaseId = databaseId;
   }
 
-  @Deprecated
   public boolean isSafeResultHandlerEnabled() {
     return safeResultHandlerEnabled;
   }
 
-  @Deprecated // "Not needed as of the fix for issue #542"
   public void setSafeResultHandlerEnabled(boolean safeResultHandlerEnabled) {
     this.safeResultHandlerEnabled = safeResultHandlerEnabled;
   }

File: src/main/java/org/apache/ibatis/scripting/defaults/RawLanguageDriver.java
Patch:
@@ -30,11 +30,11 @@ public ParameterHandler createParameterHandler(MappedStatement mappedStatement,
   }
 
   public SqlSource createSqlSource(Configuration configuration, XNode script, Class<?> parameterType) {
-    return new RawSqlSource(configuration, script.getStringBody(""));
+    return new RawSqlSource(configuration, script.getStringBody(""), parameterType);
   }
 
   public SqlSource createSqlSource(Configuration configuration, String script, Class<?> parameterType) {
-    return new RawSqlSource(configuration, script);
+    return new RawSqlSource(configuration, script, parameterType);
   }
 
 }

File: src/main/java/org/apache/ibatis/type/TypeAliasRegistry.java
Patch:
@@ -123,8 +123,9 @@ public void registerAliases(String packageName, Class<?> superType){
     resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
     Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
     for(Class<?> type : typeSet){
-      //Ignore inner classes and interfaces (including package-info.java)
-      if (!type.isAnonymousClass() && !type.isInterface()) {
+      // Ignore inner classes and interfaces (including package-info.java)
+      // Skip also inner classes. See issue #6
+      if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
         registerAlias(type);
       }
     }

File: src/main/java/org/apache/ibatis/scripting/xmltags/ForEachSqlNode.java
Patch:
@@ -70,7 +70,7 @@ public boolean apply(DynamicContext context) {
         applyIndex(context, mapEntry.getKey(), uniqueNumber);
         applyItem(context, mapEntry.getValue(), uniqueNumber);
       } else {
-        applyIndex(context, i, uniqueNumber);
+        applyIndex(context, uniqueNumber, i);
         applyItem(context, o, uniqueNumber);
       }
       contents.apply(new FilteredDynamicContext(configuration, context, index, item, uniqueNumber));

File: src/main/java/org/apache/ibatis/executor/CachingExecutor.java
Patch:
@@ -144,7 +144,7 @@ public boolean isCached(MappedStatement ms, CacheKey key) {
     throw new UnsupportedOperationException("The CachingExecutor should not be used by result loaders and thus isCached() should never be called.");
   }
 
-  public void deferLoad(MappedStatement ms, MetaObject resultObject, String property, CacheKey key) {
+  public void deferLoad(MappedStatement ms, MetaObject resultObject, String property, CacheKey key, Class<?> targetType) {
     throw new UnsupportedOperationException("The CachingExecutor should not be used by result loaders and thus deferLoad() should never be called.");
   }
 

File: src/main/java/org/apache/ibatis/executor/Executor.java
Patch:
@@ -48,7 +48,7 @@ public interface Executor {
 
   void clearLocalCache();
 
-  void deferLoad(MappedStatement ms, MetaObject resultObject, String property, CacheKey key);
+  void deferLoad(MappedStatement ms, MetaObject resultObject, String property, CacheKey key, Class<?> targetType);
 
   Transaction getTransaction();
 

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -476,7 +476,7 @@ protected Object getNestedQueryMappingValue(ResultSet rs, MetaObject metaResultO
       if (nestedQueryCacheObject != null && nestedQueryCacheObject instanceof List) {
         value = resultExtractor.extractObjectFromList((List<Object>)nestedQueryCacheObject, targetType);
       } else if (executor.isCached(nestedQuery, key)) {
-        executor.deferLoad(nestedQuery, metaResultObject, property, key);
+        executor.deferLoad(nestedQuery, metaResultObject, property, key, targetType);
       } else {
         final ResultLoader resultLoader = new ResultLoader(configuration, executor, nestedQuery, nestedQueryParameterObject, targetType, key, nestedBoundSql);
         if (configuration.isLazyLoadingEnabled()) {

File: src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java
Patch:
@@ -169,7 +169,7 @@ private boolean databaseIdMatchesCurrent(String id, String databaseId, String re
       // skip this statement if there is a previous one with a not null databaseId
       id = builderAssistant.applyCurrentNamespace(id, false);
       if (this.configuration.hasStatement(id, false)) {
-        MappedStatement previous = this.configuration.getMappedStatement(id);
+        MappedStatement previous = this.configuration.getMappedStatement(id, false); // issue #2
         if (previous.getDatabaseId() != null) {
           return false;
         }

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -220,6 +220,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setLazyLoadTriggerMethods(stringSetValueOf(props.getProperty("lazyLoadTriggerMethods"), "equals,clone,hashCode,toString"));
       configuration.setDefaultScriptingLanguage(resolveClass(props.getProperty("defaultScriptingLanguage")));
       configuration.setLogPrefix(props.getProperty("logPrefix"));
+      configuration.setLogImpl(resolveClass(props.getProperty("logImpl")));
       configuration.setCallSettersOnNulls(booleanValueOf(props.getProperty("callSettersOnNulls"), false));
     }
   }

File: src/test/java/org/apache/ibatis/submitted/associationtest/Mapper.java
Patch:
@@ -20,6 +20,7 @@
 public interface Mapper {
 
   List<Car> getCars();
-  List<Car> getCarsNonUnique();
+  List<Car> getCars2();
+  List<Car> getCars3();
 
 }

File: src/main/java/org/apache/ibatis/executor/resultset/NestedResultSetHandler.java
Patch:
@@ -157,8 +157,8 @@ private boolean applyNestedResultMappings(ResultSet rs, ResultMap resultMap, Met
           final boolean knownValue = objectCache.containsKey(combinedKey);
           final boolean isAncestor = ancestorCache.containsKey(absoluteKey);
           Object rowValue = getRowValue(rs, nestedResultMap, combinedKey, absoluteKey, columnPrefix, resultColumnCache);          
+          final Object collectionProperty = instantiateCollectionPropertyIfAppropriate(resultMapping, metaObject); // even if there is no data an empty collection is set
           if (!knownValue && rowValue != null && anyNotNullColumnHasValue(resultMapping, columnPrefix, rs)) {
-            final Object collectionProperty = instantiateCollectionPropertyIfAppropriate(resultMapping, metaObject);
             if (collectionProperty != null) {
               final MetaObject targetMetaObject = configuration.newMetaObject(collectionProperty);
               targetMetaObject.add(rowValue);

File: src/main/java/org/apache/ibatis/mapping/ResultFlag.java
Patch:
@@ -16,5 +16,5 @@
 package org.apache.ibatis.mapping;
 
 public enum ResultFlag {
-  ID, CONSTRUCTOR
+  ID, CONSTRUCTOR, COLLECTION, ASSOCIATION
 }

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -90,7 +90,7 @@ private Object rowCountResult(int rowCount) {
 
   private void executeWithResultHandler(SqlSession sqlSession, Object[] args) {
     MappedStatement ms = sqlSession.getConfiguration().getMappedStatement(command.getName());
-    if (Void.TYPE.equals(ms.getResultMaps().get(0).getType())) {
+    if (void.class.equals(ms.getResultMaps().get(0).getType())) {
       throw new BindingException("method " + command.getName() 
           + " needs either a @ResultMap annotation, a @ResultType annotation," 
           + " or a resultType attribute in XML so a ResultHandler can be used as a parameter.");
@@ -206,7 +206,7 @@ public static class MethodSignature {
 
     public MethodSignature(Configuration configuration, Method method) throws BindingException {
       this.returnType = method.getReturnType();
-      this.returnsVoid = this.returnType.equals(Void.TYPE);
+      this.returnsVoid = void.class.equals(this.returnType);
       this.returnsMany = (configuration.getObjectFactory().isCollection(this.returnType) || this.returnType.isArray());
       this.mapKey = getMapKey(method);
       this.returnsMap = (this.mapKey != null);

File: src/test/java/org/apache/ibatis/logging/jdbc/ResultSetLoggerTest.java
Patch:
@@ -47,7 +47,7 @@ public void setup(int type) throws SQLException {
     when(rs.getMetaData()).thenReturn(metaData);
     when(metaData.getColumnCount()).thenReturn(1);
     when(metaData.getColumnType(1)).thenReturn(type);
-    when(metaData.getColumnName(1)).thenReturn("ColumnName");
+    when(metaData.getColumnLabel(1)).thenReturn("ColumnName");
     when(rs.getString(1)).thenReturn("value");
     when(log.isTraceEnabled()).thenReturn(true);
     ResultSet resultSet = ResultSetLogger.newInstance(rs, log);

File: src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java
Patch:
@@ -84,7 +84,7 @@ private void printColumnHeaders(ResultSetMetaData rsmd, int columnCount) throws
       if (BLOB_TYPES.contains(rsmd.getColumnType(i))) {
         blobColumns.add(i);
       }
-      String colname = rsmd.getColumnName(i);
+      String colname = rsmd.getColumnLabel(i);
       row.append(colname);
       if (i != columnCount) row.append(", ");
     }

File: src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java
Patch:
@@ -37,7 +37,7 @@ public final class ResultSetLogger extends BaseJdbcLogger implements InvocationH
   private ResultSet rs;
   
   private static Set<Integer> BLOB_TYPES;
-  private static Set<Integer> BLOB_COLUMNS;
+  private Set<Integer> BLOB_COLUMNS;
   
   static {
     BLOB_TYPES = new HashSet<Integer>();
@@ -49,14 +49,14 @@ public final class ResultSetLogger extends BaseJdbcLogger implements InvocationH
     BLOB_TYPES.add(Types.LONGVARCHAR);
     BLOB_TYPES.add(Types.NCLOB);
     BLOB_TYPES.add(Types.VARBINARY);
-
-    BLOB_COLUMNS = new HashSet<Integer>();
 }
     
 
   private ResultSetLogger(ResultSet rs, Log statementLog) {
     super(statementLog);
     this.rs = rs;
+
+    BLOB_COLUMNS = new HashSet<Integer>();
   }
 
   public Object invoke(Object proxy, Method method, Object[] params) throws Throwable {

File: src/main/java/org/apache/ibatis/type/TypeAliasRegistry.java
Patch:
@@ -16,6 +16,7 @@
 package org.apache.ibatis.type;
 
 import java.math.BigDecimal;
+import java.math.BigInteger;
 import java.sql.ResultSet;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -76,11 +77,13 @@ public TypeAliasRegistry() {
     registerAlias("date", Date.class);
     registerAlias("decimal", BigDecimal.class);
     registerAlias("bigdecimal", BigDecimal.class);
+    registerAlias("biginteger", BigInteger.class);
     registerAlias("object", Object.class);
 
     registerAlias("date[]", Date[].class);
     registerAlias("decimal[]", BigDecimal[].class);
     registerAlias("bigdecimal[]", BigDecimal[].class);
+    registerAlias("biginteger[]", BigInteger[].class);
     registerAlias("object[]", Object[].class);
 
     registerAlias("map", Map.class);

File: src/main/java/org/apache/ibatis/type/TypeAliasRegistry.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 
@@ -97,7 +98,7 @@ public TypeAliasRegistry() {
   public <T> Class<T> resolveAlias(String string) {
     try {
       if (string == null) return null;
-      String key = string.toLowerCase();
+      String key = string.toLowerCase(Locale.ENGLISH); // issue #748
       Class<T> value;
       if (TYPE_ALIASES.containsKey(key)) {
         value = (Class<T>) TYPE_ALIASES.get(key);
@@ -137,7 +138,7 @@ public void registerAlias(Class<?> type) {
 
   public void registerAlias(String alias, Class<?> value) {
     if (alias == null) throw new TypeException("The parameter alias cannot be null");
-    String key = alias.toLowerCase();
+    String key = alias.toLowerCase(Locale.ENGLISH); // issue #748
     if (TYPE_ALIASES.containsKey(key) && TYPE_ALIASES.get(key) != null && !TYPE_ALIASES.get(key).equals(value)) {
       throw new TypeException("The alias '" + alias + "' is already mapped to the value '" + TYPE_ALIASES.get(key).getName() + "'.");
     }

File: src/main/java/org/apache/ibatis/builder/BaseBuilder.java
Patch:
@@ -108,9 +108,10 @@ protected TypeHandler<?> resolveTypeHandler(Class<?> javaType, String typeHandle
 
   protected TypeHandler<?> resolveTypeHandler(Class<?> javaType, Class<? extends TypeHandler<?>> typeHandlerType) {
     if (typeHandlerType == null) return null;
-    TypeHandler<?> handler = typeHandlerRegistry.getReverseTypeHandler(javaType, typeHandlerType);
+    // javaType ignored for injected handlers see issue #746 for full detail
+    TypeHandler<?> handler = typeHandlerRegistry.getMappingTypeHandler(typeHandlerType);
     if (handler == null) {
-      // Issue #746 not in registry, create a new one
+      // not in registry, create a new one
       handler = typeHandlerRegistry.getInstance(javaType, typeHandlerType);
     }
     return handler;

File: src/test/java/org/apache/ibatis/submitted/typehandlerinjection/UserStateTypeHandler.java
Patch:
@@ -23,11 +23,9 @@
 import java.util.Map;
 import java.util.Map.Entry;
 
-import org.apache.ibatis.type.Alias;
 import org.apache.ibatis.type.JdbcType;
 import org.apache.ibatis.type.TypeHandler;
 
-@Alias("userStateTypeHandler")
 public class UserStateTypeHandler<E> implements TypeHandler<Object> {
 
   private static Map<String, String> lookup;

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -153,12 +153,12 @@ public static class SqlCommand {
 
     public SqlCommand(Configuration configuration, Class<?> declaringInterface, Method method) throws BindingException {
       name = declaringInterface.getName() + "." + method.getName();
+      final MappedStatement ms;
       try {
-        configuration.getMappedStatement(name);
+        ms = configuration.getMappedStatement(name);
       } catch (Exception e) {
         throw new BindingException("Invalid bound statement (not found): " + name, e);
       }
-      final MappedStatement ms = configuration.getMappedStatement(name);
       type = ms.getSqlCommandType();
       if (type == SqlCommandType.UNKNOWN) {
         throw new BindingException("Unknown execution method for: " + name);

File: src/main/java/org/apache/ibatis/binding/MapperProxy.java
Patch:
@@ -30,7 +30,7 @@ public class MapperProxy implements InvocationHandler, Serializable {
   private final Class<?>[] interfaces;
   private final Map<Method, MapperMethod> methodCache;
 
-  protected MapperProxy(SqlSession sqlSession, Class<?>[] interfaces, Map<Method, MapperMethod> methodCache) {
+  private MapperProxy(SqlSession sqlSession, Class<?>[] interfaces, Map<Method, MapperMethod> methodCache) {
     this.sqlSession = sqlSession;
     this.interfaces = interfaces;
     this.methodCache = methodCache;

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -426,7 +426,7 @@ private Set<String> parseMultipleColumnNames(String columnName) {
 
   private List<ResultMapping> parseCompositeColumnName(String columnName) {
     List<ResultMapping> composites = new ArrayList<ResultMapping>();
-    if (columnName != null && columnName.indexOf('=') > -1 || columnName.indexOf(',') > -1) {
+    if (columnName != null && (columnName.indexOf('=') > -1 || columnName.indexOf(',') > -1)) {
       StringTokenizer parser = new StringTokenizer(columnName, "{}=, ", false);
       while (parser.hasMoreTokens()) {
         String property = parser.nextToken();

File: src/main/java/org/apache/ibatis/type/EnumOrdinalTypeHandler.java
Patch:
@@ -26,11 +26,10 @@ public class EnumOrdinalTypeHandler<E extends Enum<E>> extends BaseTypeHandler<E
   private final E[] enums;
 
   public EnumOrdinalTypeHandler(Class<E> type) {
+    if (type == null) throw new IllegalArgumentException("Type argument cannot be null");
     this.type = type;
     this.enums = type.getEnumConstants();
-    if (this.enums == null) {
-      throw new IllegalArgumentException(type.getSimpleName() + " does not represent an enum type.");
-    }
+    if (this.enums == null) throw new IllegalArgumentException(type.getSimpleName() + " does not represent an enum type.");
   }
 
   @Override

File: src/main/java/org/apache/ibatis/type/EnumTypeHandler.java
Patch:
@@ -25,15 +25,16 @@ public class EnumTypeHandler<E extends Enum<E>> extends BaseTypeHandler<E> {
   private Class<E> type;
 
   public EnumTypeHandler(Class<E> type) {
+    if (type == null) throw new IllegalArgumentException("Type argument cannot be null");
     this.type = type;
   }
 
   @Override
   public void setNonNullParameter(PreparedStatement ps, int i, E parameter, JdbcType jdbcType) throws SQLException {
     if (jdbcType == null) {
-        ps.setString(i, parameter.name());
+      ps.setString(i, parameter.name());
     } else {
-        ps.setObject(i, parameter.name(), jdbcType.TYPE_CODE);
+      ps.setObject(i, parameter.name(), jdbcType.TYPE_CODE); // see r3589
     }
   }
 

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -408,7 +408,7 @@ public Executor newExecutor(Transaction transaction) {
   }
 
   public Executor newExecutor(Transaction transaction, ExecutorType executorType) {
-    return newExecutor(transaction, defaultExecutorType, false);
+    return newExecutor(transaction, executorType, false);
   }
 
   public Executor newExecutor(Transaction transaction, ExecutorType executorType, boolean autoCommit) {

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -103,7 +103,7 @@ public Object execute(Object[] args) {
   private void executeWithResultHandler(Object[] args) {
     MappedStatement ms = config.getMappedStatement(commandName);
     if (Void.TYPE.equals(ms.getResultMaps().get(0).getType())) {
-      throw new BindingException("method " + method.getName() + " needs either a @ResultMap annotation or a resultType attribute in XML so a ResultHandler can be used as a parameter.");
+      throw new BindingException("method " + method.getName() + " needs either a @ResultMap annotation, a @ResultType annotation, or a resultType attribute in XML so a ResultHandler can be used as a parameter.");
     }
     Object param = getParam(args);
     if (rowBoundsIndex != null) {

File: src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/AbstractLazyTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
 public abstract class AbstractLazyTest {
@@ -92,6 +91,6 @@ public void lazyLoadUserWithNothingWithInterface() throws Exception {
   
   @Test
   public void lazyLoadUserWithNothingWithoutInterface() throws Exception {
-	  Assert.assertNotNull(mapper.getUserWithNothingWithInterface(1).getOwner());
+	  Assert.assertNotNull(mapper.getUserWithNothingWithoutInterface(1).getOwner());
   }
 }

File: src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/JavassistLazyTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.junit.Ignore;
 
-//@Ignore("See Issue 664: Javassist ProxyFactory does not handle interfaces with generics correctly.")
+@Ignore("See Issue 664: Javassist ProxyFactory does not handle interfaces with generics correctly.")
 public class JavassistLazyTest 
 extends AbstractLazyTest {
 	@Override

File: src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/JavassistLazyTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.junit.Ignore;
 
-@Ignore("See Issue 664: Javassist ProxyFactory does not handle interfaces with generics correctly.")
+//@Ignore("See Issue 664: Javassist ProxyFactory does not handle interfaces with generics correctly.")
 public class JavassistLazyTest 
 extends AbstractLazyTest {
 	@Override

File: src/test/java/org/apache/ibatis/submitted/multidb/MultiDbMapper.java
Patch:
@@ -19,6 +19,7 @@ public interface MultiDbMapper {
   String select1(int id);
   String select2(int id);
   String select3(int id);
+  String select4(int id);
   void insert(User user);
   void insert2(User user);
 }
\ No newline at end of file

File: src/main/java/org/apache/ibatis/reflection/wrapper/MapWrapper.java
Patch:
@@ -117,7 +117,7 @@ public boolean hasGetter(String name) {
         return false;
       }
     } else {
-      return map.containsKey(name);
+      return map.containsKey(prop.getName());
     }
   }
 

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -272,7 +272,7 @@ public MappedStatement addMappedStatement(
       ResultSetType resultSetType,
       boolean flushCache,
       boolean useCache,
-      boolean nestedResultOrdered,
+      boolean resultOrdered,
       KeyGenerator keyGenerator,
       String keyProperty,
       String keyColumn,
@@ -290,7 +290,7 @@ public MappedStatement addMappedStatement(
     statementBuilder.keyColumn(keyColumn);
     statementBuilder.databaseId(databaseId);
     statementBuilder.lang(lang);
-    statementBuilder.nestedResultOrdered(nestedResultOrdered);
+    statementBuilder.resultOrdered(resultOrdered);
     setStatementTimeout(timeout, statementBuilder);
 
     setStatementParameterMap(parameterMap, parameterType, statementBuilder);

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -218,7 +218,6 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setLocalCacheScope(LocalCacheScope.valueOf(stringValueOf(props.getProperty("localCacheScope"), "SESSION")));
       configuration.setJdbcTypeForNull(JdbcType.valueOf(stringValueOf(props.getProperty("jdbcTypeForNull"), "OTHER")));
       configuration.setLazyLoadTriggerMethods(stringSetValueOf(props.getProperty("lazyLoadTriggerMethods"), "equals,clone,hashCode,toString"));
-      configuration.setSafeResultHandlerEnabled(booleanValueOf(props.getProperty("safeResultHandlerEnabled"), true));
       configuration.setDefaultScriptingLanguage(resolveClass(props.getProperty("defaultScriptingLanguage")));
       configuration.setLogPrefix(props.getProperty("logPrefix"));
       configuration.setCallSettersOnNulls(booleanValueOf(props.getProperty("callSettersOnNulls"), false));

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -183,10 +183,12 @@ public void setDatabaseId(String databaseId) {
     this.databaseId = databaseId;
   }
 
+  @Deprecated
   public boolean isSafeResultHandlerEnabled() {
     return safeResultHandlerEnabled;
   }
 
+  @Deprecated // "Not needed as of the fix for issue #542")
   public void setSafeResultHandlerEnabled(boolean safeResultHandlerEnabled) {
     this.safeResultHandlerEnabled = safeResultHandlerEnabled;
   }

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -272,6 +272,7 @@ public MappedStatement addMappedStatement(
       ResultSetType resultSetType,
       boolean flushCache,
       boolean useCache,
+      boolean nestedResultOrdered,
       KeyGenerator keyGenerator,
       String keyProperty,
       String keyColumn,
@@ -289,6 +290,7 @@ public MappedStatement addMappedStatement(
     statementBuilder.keyColumn(keyColumn);
     statementBuilder.databaseId(databaseId);
     statementBuilder.lang(lang);
+    statementBuilder.nestedResultOrdered(nestedResultOrdered);
     setStatementTimeout(timeout, statementBuilder);
 
     setStatementParameterMap(parameterMap, parameterType, statementBuilder);

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -284,6 +284,7 @@ private void parseStatement(Method method) {
           resultSetType,
           flushCache,
           useCache,
+          false, // TODO issue #577
           keyGenerator,
           keyProperty,
           keyColumn,
@@ -514,7 +515,8 @@ private KeyGenerator handleSelectKeyAnnotation(SelectKey selectKeyAnnotation, St
     SqlCommandType sqlCommandType = SqlCommandType.SELECT;
 
     assistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType, fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass, resultSetTypeEnum,
-        flushCache, useCache, keyGenerator, keyProperty, null, null, languageDriver);
+        flushCache, useCache, false, // TODO issue #577
+        keyGenerator, keyProperty, null, null, languageDriver);
 
     id = assistant.applyCurrentNamespace(id, false);
 

File: src/test/java/org/apache/ibatis/submitted/nestedresulthandler/Mapper.java
Patch:
@@ -15,6 +15,8 @@
  */
 package org.apache.ibatis.submitted.nestedresulthandler;
 
+import java.util.List;
+
 public interface Mapper {
-  Person getPerson(Integer id);
+  List<Person> getPersons();
 }

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -221,6 +221,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setSafeResultHandlerEnabled(booleanValueOf(props.getProperty("safeResultHandlerEnabled"), true));
       configuration.setDefaultScriptingLanguage(resolveClass(props.getProperty("defaultScriptingLanguage")));
       configuration.setLogPrefix(props.getProperty("logPrefix"));
+      configuration.setCallSettersOnNulls(booleanValueOf(props.getProperty("callSettersOnNulls"), false));
     }
   }
 

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -224,7 +224,7 @@ protected void handleRowValues(ResultSet rs, ResultMap resultMap, ResultHandler
   }
 
   protected boolean shouldProcessMoreRows(ResultSet rs, ResultContext context, RowBounds rowBounds) throws SQLException {
-    return rs.next() && context.getResultCount() < rowBounds.getLimit() && !context.isStopped();
+    return !context.isStopped() && rs.next() && context.getResultCount() < rowBounds.getLimit();
   }
 
   protected void skipRows(ResultSet rs, RowBounds rowBounds) throws SQLException {

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -220,6 +220,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setLazyLoadTriggerMethods(stringSetValueOf(props.getProperty("lazyLoadTriggerMethods"), "equals,clone,hashCode,toString"));
       configuration.setSafeResultHandlerEnabled(booleanValueOf(props.getProperty("safeResultHandlerEnabled"), true));
       configuration.setDefaultScriptingLanguage(resolveClass(props.getProperty("defaultScriptingLanguage")));
+      configuration.setLogPrefix(props.getProperty("logPrefix"));
     }
   }
 

File: src/main/java/org/apache/ibatis/mapping/MappedStatement.java
Patch:
@@ -69,7 +69,9 @@ public Builder(Configuration configuration, String id, SqlSource sqlSource, SqlC
       mappedStatement.timeout = configuration.getDefaultStatementTimeout();
       mappedStatement.sqlCommandType = sqlCommandType;
       mappedStatement.keyGenerator = configuration.isUseGeneratedKeys() && SqlCommandType.INSERT.equals(sqlCommandType) ? new Jdbc3KeyGenerator() : new NoKeyGenerator();
-      mappedStatement.statementLog = LogFactory.getLog(id);
+      String logId = id;
+      if (configuration.getLogPrefix() != null) logId = configuration.getLogPrefix() + id;
+      mappedStatement.statementLog = LogFactory.getLog(logId);
       mappedStatement.lang = configuration.getDefaultScriptingLanuageInstance();
     }
 

File: src/main/java/org/apache/ibatis/mapping/CacheBuilder.java
Patch:
@@ -148,6 +148,9 @@ private void setCacheProperties(Cache cache) {
           } else if (float.class == type
               || Float.class == type) {
             metaCache.setValue(name, Float.valueOf(value));
+          } else if (boolean.class == type
+              || Boolean.class == type) {
+            metaCache.setValue(name, Boolean.valueOf(value));
           } else if (double.class == type
               || Double.class == type) {
             metaCache.setValue(name, Double.valueOf(value));

File: src/main/java/org/apache/ibatis/executor/resultset/NestedResultSetHandler.java
Patch:
@@ -311,7 +311,7 @@ private void createRowKeyForUnmappedProperties(ResultMap resultMap, ResultSet rs
           continue;
         }
       }
-      if (metaType.findProperty(property) != null) {
+      if (metaType.findProperty(property, configuration.isMapUnderscoreToCamelCase()) != null) {
         String value = rs.getString(column);
         if (value != null) {
           cacheKey.update(column);

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -105,6 +105,9 @@ public TypeHandlerRegistry() {
     register(JdbcType.DECIMAL, new BigDecimalTypeHandler());
     register(JdbcType.NUMERIC, new BigDecimalTypeHandler());
 
+    register(Byte[].class, new ByteObjectArrayTypeHandler());
+    register(Byte[].class, JdbcType.BLOB, new BlobByteObjectArrayTypeHandler());
+    register(Byte[].class, JdbcType.LONGVARBINARY, new BlobByteObjectArrayTypeHandler());
     register(byte[].class, new ByteArrayTypeHandler());
     register(byte[].class, JdbcType.BLOB, new BlobTypeHandler());
     register(byte[].class, JdbcType.LONGVARBINARY, new BlobTypeHandler());

File: src/test/java/org/apache/ibatis/submitted/blobtest/BlobMapper.java
Patch:
@@ -20,4 +20,5 @@
 public interface BlobMapper {
     int insert(BlobRecord blobRecord);
     List<BlobRecord> selectAll();
+    List<BlobRecord> selectAllWithBlobObjects();
 }

File: src/main/java/org/apache/ibatis/session/SqlSession.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.apache.ibatis.session;
 
+import java.io.Closeable;
 import java.sql.Connection;
 import java.util.List;
 import java.util.Map;
@@ -26,7 +27,7 @@
  * Through this interface you can execute commands, get mappers and manage transactions.
  *
  */
-public interface SqlSession {
+public interface SqlSession extends Closeable {
 
   /**
    * Retrieve a single row mapped from the statement key

File: src/main/java/org/apache/ibatis/type/MappedJdbcTypes.java
Patch:
@@ -24,4 +24,5 @@
 @Target(ElementType.TYPE)
 public @interface MappedJdbcTypes {
 	public JdbcType[] value();
+	boolean includeNullJdbcType() default false;
 }

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -240,6 +240,9 @@ private <T> void register(Type javaType, TypeHandler<? extends T> typeHandler) {
       for (JdbcType handledJdbcType : mappedJdbcTypes.value()) {
         register(javaType, handledJdbcType, typeHandler);
       }
+      if (mappedJdbcTypes.includeNullJdbcType()) {
+        register(javaType, null, typeHandler);
+      }
     } else {
       register(javaType, null, typeHandler);
     }

File: src/main/java/org/apache/ibatis/scripting/xmltags/XMLScriptBuilder.java
Patch:
@@ -66,7 +66,7 @@ private List<SqlNode> parseDynamicTags(XNode node) {
           || child.getNode().getNodeType() == Node.TEXT_NODE) {
         String data = child.getStringBody("");
         contents.add(new TextSqlNode(data));
-      } else if (!"selectKey".equals(nodeName)) {
+      } else if (child.getNode().getNodeType() == Node.ELEMENT_NODE && !"selectKey".equals(nodeName)) { // issue #628
         NodeHandler handler = nodeHandlers.get(nodeName);
         if (handler == null) {
           throw new BuilderException("Unknown element <" + nodeName + "> in SQL statement.");

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -99,7 +99,7 @@ private void parseConfiguration(XNode root) {
       objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
       proxyFactoryElement(root.evalNode("proxyFactory")); // read it before reading settings
       settingsElement(root.evalNode("settings"));
-      environmentsElement(root.evalNode("environments"));
+      environmentsElement(root.evalNode("environments")); // read it after objectFactory and objectWrapperFactory issue #631
       databaseIdProviderElement(root.evalNode("databaseIdProvider"));
       typeHandlerElement(root.evalNode("typeHandlers"));
       mapperElement(root.evalNode("mappers"));

File: src/main/java/org/apache/ibatis/datasource/DataSourceFactory.java
Patch:
@@ -16,7 +16,6 @@
 package org.apache.ibatis.datasource;
 
 import java.util.Properties;
-
 import javax.sql.DataSource;
 
 public interface DataSourceFactory {

File: src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSourceFactory.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.ibatis.datasource.DataSourceException;
 import org.apache.ibatis.datasource.DataSourceFactory;
 import org.apache.ibatis.reflection.MetaObject;
+import org.apache.ibatis.reflection.SystemMetaObject;
 
 public class UnpooledDataSourceFactory implements DataSourceFactory {
 
@@ -36,7 +37,7 @@ public UnpooledDataSourceFactory() {
 
   public void setProperties(Properties properties) {
     Properties driverProperties = new Properties();
-    MetaObject metaDataSource = MetaObject.forObject(dataSource);
+    MetaObject metaDataSource = SystemMetaObject.forObject(dataSource);
     for (Object key : properties.keySet()) {
       String propertyName = (String) key;
       if (propertyName.startsWith(DRIVER_PROPERTY_PREFIX)) {

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -245,8 +245,8 @@ private void handleLocallyCachedOutputParameters(MappedStatement ms, CacheKey ke
     if (ms.getStatementType() == StatementType.CALLABLE) {
       final Object cachedParameter = localOutputParameterCache.getObject(key);
       if (cachedParameter != null && parameter != null) {
-        final MetaObject metaCachedParameter = MetaObject.forObject(cachedParameter);
-        final MetaObject metaParameter = MetaObject.forObject(parameter);
+        final MetaObject metaCachedParameter = configuration.newMetaObject(cachedParameter);
+        final MetaObject metaParameter = configuration.newMetaObject(parameter);
         for (ParameterMapping parameterMapping : boundSql.getParameterMappings()) {
           if (parameterMapping.getMode() != ParameterMode.IN) {
             final String parameterName = parameterMapping.getProperty();

File: src/main/java/org/apache/ibatis/mapping/CacheBuilder.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.ibatis.cache.decorators.SynchronizedCache;
 import org.apache.ibatis.cache.impl.PerpetualCache;
 import org.apache.ibatis.reflection.MetaObject;
+import org.apache.ibatis.reflection.SystemMetaObject;
 
 public class CacheBuilder {
   private String id;
@@ -103,7 +104,7 @@ private void setDefaultImplementations() {
 
   private Cache setStandardDecorators(Cache cache) {
     try {
-      MetaObject metaCache = MetaObject.forObject(cache);
+      MetaObject metaCache = SystemMetaObject.forObject(cache);
       if (size != null && metaCache.hasSetter("size")) {
         metaCache.setValue("size", size);
       }
@@ -124,7 +125,7 @@ private Cache setStandardDecorators(Cache cache) {
 
   private void setCacheProperties(Cache cache) {
     if (properties != null) {
-      MetaObject metaCache = MetaObject.forObject(cache);
+      MetaObject metaCache = SystemMetaObject.forObject(cache);
       for (Map.Entry<Object, Object> entry : properties.entrySet()) {
         String name = (String) entry.getKey();
         String value = (String) entry.getValue();

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSession.java
Patch:
@@ -80,7 +80,7 @@ public <K, V> Map<K, V> selectMap(String statement, Object parameter, String map
   public <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {
     final List<?> list = selectList(statement, parameter, rowBounds);
     final DefaultMapResultHandler<K, V> mapResultHandler = new DefaultMapResultHandler<K, V>(mapKey,
-        configuration.getObjectFactory());
+        configuration.getObjectFactory(), configuration.getObjectWrapperFactory());
     final DefaultResultContext context = new DefaultResultContext();
     for (Object o : list) {
       context.nextResultObject(o);

File: src/test/java/com/ibatis/common/jdbc/DbcpConfiguration.java
Patch:
@@ -21,6 +21,7 @@
 import javax.sql.DataSource;
 import java.util.Iterator;
 import java.util.Map;
+import org.apache.ibatis.reflection.SystemMetaObject;
 
 /*
  * Wrapper class to simplify use of DBCP
@@ -61,7 +62,7 @@ public DataSource getDataSource() {
   private BasicDataSource newDbcpConfiguration(Map map) {
     BasicDataSource basicDataSource = new BasicDataSource();
     Iterator props = map.keySet().iterator();
-    MetaObject metaDataSource = MetaObject.forObject(basicDataSource);
+    MetaObject metaDataSource = SystemMetaObject.forObject(basicDataSource);
     while (props.hasNext()) {
       String propertyName = (String) props.next();
       if (propertyName.startsWith(ADD_DRIVER_PROPS_PREFIX)) {
@@ -78,7 +79,7 @@ private BasicDataSource newDbcpConfiguration(Map map) {
 
   private Object convertValue(Object object, String propertyName, String value) {
     Object convertedValue = value;
-    MetaObject metaObject = MetaObject.forObject(object);
+    MetaObject metaObject = SystemMetaObject.forObject(object);
     Class targetType = metaObject.getSetterType(propertyName);
     if (targetType == Integer.class || targetType == int.class) {
       convertedValue = Integer.valueOf(value);

File: src/test/java/com/ibatis/sqlmap/engine/mapping/sql/dynamic/elements/ConditionalTagHandler.java
Patch:
@@ -23,6 +23,7 @@
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.Date;
+import org.apache.ibatis.reflection.SystemMetaObject;
 
 public abstract class ConditionalTagHandler extends BaseTagHandler {
 
@@ -69,7 +70,7 @@ protected long compare(SqlTagContext ctx, SqlTag tag, Object parameterObject) {
     Object value1;
     Class type;
 
-    MetaObject metaObject = MetaObject.forObject(parameterObject);
+    MetaObject metaObject = SystemMetaObject.forObject(parameterObject);
     if (prop != null) {
       value1 = metaObject.getValue(prop);
       type = metaObject.getGetterType(prop);

File: src/test/java/com/ibatis/sqlmap/engine/mapping/sql/dynamic/elements/IsEmptyTagHandler.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.lang.reflect.Array;
 import java.util.Collection;
+import org.apache.ibatis.reflection.SystemMetaObject;
 
 public class IsEmptyTagHandler extends ConditionalTagHandler {
 
@@ -29,7 +30,7 @@ public boolean isCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject
       String prop = getResolvedProperty(ctx, tag);
       Object value;
       if (prop != null) {
-        value = MetaObject.forObject(parameterObject).getValue(prop);
+        value = SystemMetaObject.forObject(parameterObject).getValue(prop);
       } else {
         value = parameterObject;
       }

File: src/test/java/com/ibatis/sqlmap/engine/mapping/sql/dynamic/elements/IsNullTagHandler.java
Patch:
@@ -16,6 +16,7 @@
 package com.ibatis.sqlmap.engine.mapping.sql.dynamic.elements;
 
 import org.apache.ibatis.reflection.MetaObject;
+import org.apache.ibatis.reflection.SystemMetaObject;
 
 public class IsNullTagHandler extends ConditionalTagHandler {
 
@@ -26,7 +27,7 @@ public boolean isCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject
       String prop = getResolvedProperty(ctx, tag);
       Object value;
       if (prop != null) {
-        value = MetaObject.forObject(parameterObject).getValue(prop);
+        value = SystemMetaObject.forObject(parameterObject).getValue(prop);
       } else {
         value = parameterObject;
       }

File: src/test/java/com/ibatis/sqlmap/engine/mapping/sql/dynamic/elements/IsPropertyAvailableTagHandler.java
Patch:
@@ -18,6 +18,7 @@
 import org.apache.ibatis.reflection.MetaObject;
 
 import java.util.Map;
+import org.apache.ibatis.reflection.SystemMetaObject;
 
 public class IsPropertyAvailableTagHandler extends ConditionalTagHandler {
 
@@ -35,7 +36,7 @@ public boolean isCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject
       if (lastIndex != -1) {
         String firstPart = property.substring(0, lastIndex);
         String lastPart = property.substring(lastIndex + 1);
-        parameterObject = MetaObject.forObject(parameterObject).getValue(firstPart);
+        parameterObject = SystemMetaObject.forObject(parameterObject).getValue(firstPart);
         property = lastPart;
       }
 
@@ -44,7 +45,7 @@ public boolean isCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject
         // properties in Maps and that's not the behavior we want here
         return ((Map) parameterObject).containsKey(property);
       } else {
-        return MetaObject.forObject(parameterObject).hasGetter(property);
+        return SystemMetaObject.forObject(parameterObject).hasGetter(property);
       }
     }
   }

File: src/test/java/com/ibatis/sqlmap/engine/mapping/sql/dynamic/elements/IterateTagHandler.java
Patch:
@@ -16,6 +16,7 @@
 package com.ibatis.sqlmap.engine.mapping.sql.dynamic.elements;
 
 import org.apache.ibatis.reflection.MetaObject;
+import org.apache.ibatis.reflection.SystemMetaObject;
 
 public class IterateTagHandler extends BaseTagHandler {
 
@@ -41,7 +42,7 @@ public int doStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject
           prop = parentIterate.addIndexToTagProperty(prop);
         }
 
-        collection = MetaObject.forObject(parameterObject).getValue(prop);
+        collection = SystemMetaObject.forObject(parameterObject).getValue(prop);
       } else {
         collection = parameterObject;
       }

File: src/test/java/com/ibatis/sqlmap/engine/mapping/sql/simple/SimpleDynamicSql.java
Patch:
@@ -23,6 +23,7 @@
 
 import java.util.List;
 import java.util.StringTokenizer;
+import org.apache.ibatis.reflection.SystemMetaObject;
 
 public class SimpleDynamicSql implements Sql {
 
@@ -70,7 +71,7 @@ private String processDynamicElements(String sql, Object parameterObject) {
             if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {
               value = parameterObject;
             } else {
-              value = MetaObject.forObject(parameterObject).getValue(token);
+              value = SystemMetaObject.forObject(parameterObject).getValue(token);
             }
           }
           if (value != null) {

File: src/test/java/org/apache/ibatis/submitted/serializecircular/SerializeCircularTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.junit.Ignore;
 import org.junit.Test;
 
-@Ignore("see issue #614")
+//@Ignore("see issue #614")
 public class SerializeCircularTest {
 
 	@Test

File: src/main/java/org/apache/ibatis/executor/loader/JavassistProxyFactory.java
Patch:
@@ -50,7 +50,6 @@ public JavassistProxyFactory() {
     }
   }
 
-  @Override
   public Object createProxy(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
     return EnhancedResultObjectProxyImpl.createProxy(target, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);
   }
@@ -59,7 +58,6 @@ public Object createDeserializationProxy(Object target, Set<String> unloadedProp
     return EnhancedDeserializationProxyImpl.createProxy(target, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);
   }
 
-  @Override
   public void setProperties(Properties properties) {
   }
   

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -81,7 +81,7 @@ public FastResultSetHandler(Executor executor, MappedStatement mappedStatement,
     this.typeHandlerRegistry = configuration.getTypeHandlerRegistry();
     this.objectFactory = configuration.getObjectFactory();
     this.resultHandler = resultHandler;
-    this.proxyFactory = configuration.newProxyFactory();
+    this.proxyFactory = configuration.getProxyFactory();
   }
 
   //

File: src/main/java/org/apache/ibatis/io/Resources.java
Patch:
@@ -67,7 +67,7 @@ public static void setDefaultClassLoader(ClassLoader defaultClassLoader) {
    * @throws java.io.IOException If the resource cannot be found or read
    */
   public static URL getResourceURL(String resource) throws IOException {
-    return classLoaderWrapper.getResourceAsURL(resource);
+    return getResourceURL(null, resource); // issue #625
   }
 
   /*

File: src/test/java/org/apache/ibatis/submitted/multidb/MultiDbMapper.java
Patch:
@@ -20,4 +20,5 @@ public interface MultiDbMapper {
   String select2(int id);
   String select3(int id);
   void insert(User user);
+  void insert2(User user);
 }
\ No newline at end of file

File: src/test/java/org/apache/ibatis/submitted/serializecircular/SerializeCircularTest.java
Patch:
@@ -28,9 +28,9 @@
 import org.junit.Ignore;
 import org.junit.Test;
 
+@Ignore("see issue #614")
 public class SerializeCircularTest {
 
-  @Ignore("see issue #614")
 	@Test
 	public void serializeAndDeserializeObjectsWithAggressiveLazyLoadingWithoutPreloadingAttribute() 
 	throws Exception {

File: src/test/java/org/apache/ibatis/submitted/serializecircular/UtilityTester.java
Patch:
@@ -21,11 +21,13 @@
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 
+import org.junit.Ignore;
 import org.junit.Test;
 
+@Ignore("see issue #614")
 public class UtilityTester {
 	
-	@Test
+  @Test
 	public static void serializeAndDeserializeObject(Object myObject){
 
 		try {

File: src/test/java/org/apache/ibatis/jdbc/ScriptRunnerTest.java
Patch:
@@ -108,6 +108,7 @@ public void commentAferStatementDelimiterShouldNotCauseRunnerFail() throws Excep
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setAutoCommit(true);
     runner.setStopOnError(true);
+    runJPetStoreScripts(runner);
 
     String resource = "org/apache/ibatis/jdbc/ScriptCommentAfterEOLTerminator.sql";
     Reader reader = Resources.getResourceAsReader(resource);

File: src/test/java/org/apache/ibatis/submitted/automapping/AutomappingTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-public class BaseTest {
+public class AutomappingTest {
 
   private static SqlSessionFactory sqlSessionFactory;
 

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -43,6 +43,7 @@
 import org.apache.ibatis.mapping.SqlSource;
 import org.apache.ibatis.mapping.StatementType;
 import org.apache.ibatis.reflection.MetaClass;
+import org.apache.ibatis.scripting.LanguageDriver;
 import org.apache.ibatis.session.Configuration;
 import org.apache.ibatis.type.JdbcType;
 import org.apache.ibatis.type.TypeHandler;
@@ -274,7 +275,7 @@ public MappedStatement addMappedStatement(
       String keyProperty,
       String keyColumn,
       String databaseId,
-      Class<?> langTypeClass) {
+      LanguageDriver lang) {
     id = applyCurrentNamespace(id, false);
     boolean isSelect = sqlCommandType == SqlCommandType.SELECT;
 
@@ -286,7 +287,7 @@ public MappedStatement addMappedStatement(
     statementBuilder.keyProperty(keyProperty);
     statementBuilder.keyColumn(keyColumn);
     statementBuilder.databaseId(databaseId);
-    statementBuilder.lang(langTypeClass);
+    statementBuilder.lang(lang);
     setStatementTimeout(timeout, statementBuilder);
 
     setStatementParameterMap(parameterMap, parameterType, statementBuilder);

File: src/main/java/org/apache/ibatis/mapping/MappedStatement.java
Patch:
@@ -149,8 +149,8 @@ public Builder databaseId(String databaseId) {
       return this;
     }
 
-    public Builder lang(Class<?> lang) {
-      mappedStatement.lang = mappedStatement.configuration.getLanguageRegistry().getDriver(lang);
+    public Builder lang(LanguageDriver driver) {
+      mappedStatement.lang = driver;
       return this;
     }
 

File: src/main/java/org/apache/ibatis/scripting/defaults/RawLanguageDriver.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.ibatis.scripting.LanguageDriver;
 import org.apache.ibatis.session.Configuration;
 
-public class RawSqlLanguageDriver implements LanguageDriver {
+public class RawLanguageDriver implements LanguageDriver {
 
   public ParameterHandler createParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql) {
     return new DefaultParameterHandler(mappedStatement, parameterObject, boundSql);

File: src/main/java/org/apache/ibatis/scripting/xmltags/XMLLanguageDriver.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.ibatis.scripting.defaults.DefaultParameterHandler;
 import org.apache.ibatis.session.Configuration;
 
-public class XMLDynamicLanguageDriver implements LanguageDriver {
+public class XMLLanguageDriver implements LanguageDriver {
 
   public ParameterHandler createParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql) {
     return new DefaultParameterHandler(mappedStatement, parameterObject, boundSql);
@@ -37,6 +37,7 @@ public SqlSource createSqlSource(Configuration configuration, XNode script, Clas
   }
 
   public SqlSource createSqlSource(Configuration configuration, String script, Class<?> parameterType) {
+    // TODO, should we parse the string to let the user use XML in annotated methods?
     ArrayList<SqlNode> contents = new ArrayList<SqlNode>();
     contents.add(new TextSqlNode(script.toString()));
     MixedSqlNode rootSqlNode = new MixedSqlNode(contents);

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -145,6 +145,7 @@ public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBoun
       for (DeferredLoad deferredLoad : deferredLoads) {
         deferredLoad.load();
       }
+      deferredLoads.clear(); // issue #601
       if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) {
         clearLocalCache(); // issue #482
       }

File: src/main/java/org/apache/ibatis/logging/log4j/Log4jImpl.java
Patch:
@@ -50,7 +50,7 @@ public void debug(String s) {
   }
 
   public void trace(String s) {
-    log.log(FQCN, Level.DEBUG, s, null);
+    log.log(FQCN, Level.TRACE, s, null);
   }
 
   public void warn(String s) {

File: src/test/java/org/apache/ibatis/submitted/inheritance/InheritanceTest.java
Patch:
@@ -25,11 +25,10 @@
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.junit.Assert;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 import org.junit.Test;
 
-@Ignore // see issue #289
-public class BaseTest {
+// see issue #289
+public class InheritanceTest {
 
   private static SqlSessionFactory sqlSessionFactory;
 

File: src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java
Patch:
@@ -48,7 +48,7 @@ public Object invoke(Object proxy, Method method, Object[] params) throws Throwa
         if (((Boolean) o)) {
           ResultSetMetaData rsmd = rs.getMetaData();
           final int columnCount = rsmd.getColumnCount();
-          if (isDebugEnabled()) {
+          if (isTraceEnabled()) {
             if (first) {
               first = false;
               printColumnHeaders(rsmd, columnCount);

File: src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java
Patch:
@@ -86,7 +86,7 @@ private ParameterMapping buildParameterMapping(String content) {
         propertyType = Object.class;
       }
       ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);
-      Class<?> javaType = null;
+      Class<?> javaType = propertyType;
       String typeHandlerAlias = null;
       for (Map.Entry<String, String> entry : propertiesMap.entrySet()) {
         String name = entry.getKey();

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java
Patch:
@@ -51,8 +51,7 @@ public PooledConnection(Connection connection, PooledDataSource dataSource) {
     this.createdTimestamp = System.currentTimeMillis();
     this.lastUsedTimestamp = System.currentTimeMillis();
     this.valid = true;
-
-    proxyConnection = (Connection) Proxy.newProxyInstance(Connection.class.getClassLoader(), IFACES, this);
+    this.proxyConnection = (Connection) Proxy.newProxyInstance(Connection.class.getClassLoader(), IFACES, this);
   }
 
   /*

File: src/main/java/org/apache/ibatis/type/TypeReference.java
Patch:
@@ -31,7 +31,7 @@ public abstract class TypeReference<T> {
   protected TypeReference() {
     Type superclass = getClass().getGenericSuperclass();
     if (superclass instanceof Class) {
-      throw new TypeException("TypeHandler '" + getClass() + "' extends TypeReference but misses the type parameter. "
+      throw new TypeException("'" + getClass() + "' extends TypeReference but misses the type parameter. "
         + "Remove the extension or add a type parameter to it.");
     }
     rawType = ((ParameterizedType) superclass).getActualTypeArguments()[0];

File: src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java
Patch:
@@ -73,7 +73,7 @@ public void parseStatementNode() {
     ResultSetType resultSetTypeEnum = resolveResultSetType(resultSetType);
 
     LanguageDriver langDriver = configuration.getLanguageRegistry().getDriver(langTypeClass);
-    SqlSource sqlSource = langDriver.createSqlSource(configuration, builderAssistant, context, databaseId);
+    SqlSource sqlSource = langDriver.createSqlSource(configuration, builderAssistant, context, parameterTypeClass, databaseId);
 
     String nodeName = context.getNode().getNodeName();
     SqlCommandType sqlCommandType = SqlCommandType.valueOf(nodeName.toUpperCase(Locale.ENGLISH));

File: src/main/java/org/apache/ibatis/scripting/LanguageDriver.java
Patch:
@@ -26,6 +26,6 @@ public interface LanguageDriver {
 
   public ParameterHandler createParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql);
 
-  public SqlSource createSqlSource(Configuration configuration, MapperBuilderAssistant builderAssistant, Object script, String databaseId);
+  public SqlSource createSqlSource(Configuration configuration, MapperBuilderAssistant builderAssistant, Object script, Class<?> parameterType, String databaseId);
 
 }

File: src/main/java/org/apache/ibatis/scripting/defaults/StaticSqlLanguageDriver.java
Patch:
@@ -30,7 +30,7 @@ public ParameterHandler createParameterHandler(MappedStatement mappedStatement,
     return new DefaultParameterHandler(mappedStatement, parameterObject, boundSql);
   }
 
-  public SqlSource createSqlSource(Configuration configuration, MapperBuilderAssistant builderAssistant, Object script, String databaseId) {
+  public SqlSource createSqlSource(Configuration configuration, MapperBuilderAssistant builderAssistant, Object script, Class<?> parameterType, String databaseId) {
     if (script instanceof XNode) {
       return new RawSqlSource(configuration, ((XNode)script).getStringBody(""));
     }

File: src/main/java/org/apache/ibatis/scripting/xmltags/XMLDynamicLanguageDriver.java
Patch:
@@ -32,7 +32,7 @@ public ParameterHandler createParameterHandler(MappedStatement mappedStatement,
     return new DefaultParameterHandler(mappedStatement, parameterObject, boundSql);
   }
 
-  public SqlSource createSqlSource(Configuration configuration, MapperBuilderAssistant builderAssistant, Object script, String databaseId) {
+  public SqlSource createSqlSource(Configuration configuration, MapperBuilderAssistant builderAssistant, Object script, Class<?> parameterType, String databaseId) {
     XNode context;
     if (script instanceof XNode) {
       context = (XNode) script;

File: src/test/java/org/apache/ibatis/submitted/velocity/VelocityLanguageDriver.java
Patch:
@@ -34,7 +34,7 @@ public ParameterHandler createParameterHandler(MappedStatement mappedStatement,
     return new DefaultParameterHandler(mappedStatement, parameterObject, boundSql);
   }
 
-  public SqlSource createSqlSource(Configuration configuration, MapperBuilderAssistant builderAssistant, Object script, String databaseId) {
+  public SqlSource createSqlSource(Configuration configuration, MapperBuilderAssistant builderAssistant, Object script, Class<?> parameterTypeClass, String databaseId) {
     if (script instanceof XNode) {
       return new VelocitySqlSource(configuration, builderAssistant, ((XNode)script).getStringBody(""), databaseId);
     }

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.ibatis.session.Configuration;
 
 import java.lang.reflect.Method;
+import java.util.HashMap;
 
 public class ProviderSqlSource implements SqlSource {
 
@@ -69,7 +70,7 @@ private SqlSource createSqlSource(Object parameterObject) {
         sql = (String) providerMethod.invoke(providerType.newInstance());
       }
       Class<?> parameterType = parameterObject == null ? Object.class : parameterObject.getClass();
-      return sqlSourceParser.parse(sql, parameterType);
+      return sqlSourceParser.parse(sql, parameterType, new HashMap<String, Object>());
     } catch (Exception e) {
       throw new BuilderException("Error invoking SqlProvider method ("
           + providerType.getName() + "." + providerMethod.getName()

File: src/main/java/org/apache/ibatis/scripting/xmltags/DynamicSqlSource.java
Patch:
@@ -36,7 +36,7 @@ public BoundSql getBoundSql(Object parameterObject) {
     rootSqlNode.apply(context);
     SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);
     Class<?> parameterType = parameterObject == null ? Object.class : parameterObject.getClass();
-    SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType);
+    SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings());
     BoundSql boundSql = sqlSource.getBoundSql(parameterObject);
     for (Map.Entry<String, Object> entry : context.getBindings().entrySet()) {
       boundSql.setAdditionalParameter(entry.getKey(), entry.getValue());

File: src/test/java/org/apache/ibatis/submitted/ognlstatic/OgnlStaticTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.junit.Assert;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 import org.junit.Test;
 
 public class OgnlStaticTest {
@@ -57,8 +56,7 @@ public static void setUp() throws Exception {
    * DEBUG [main] - ==> Parameters: 1(Integer), 1(Integer)
    * There are two parameter mappings but DefaulParameterHandler maps them both to input paremeter (integer)
    */
-  @Ignore // TODO see issue #448
-  @Test
+  @Test // see issue #448
   public void shouldGetAUser() {
     SqlSession sqlSession = sqlSessionFactory.openSession();
     try {

File: src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java
Patch:
@@ -203,7 +203,8 @@ private boolean lineIsComment(String trimmedLine) {
   }
 
   private boolean commandReadyToExecute(String trimmedLine) {
-    return !fullLineDelimiter && trimmedLine.endsWith(delimiter) || fullLineDelimiter && trimmedLine.equals(delimiter);
+    // issue #561 remove anything after the delimiter
+    return !fullLineDelimiter && trimmedLine.contains(delimiter) || fullLineDelimiter && trimmedLine.equals(delimiter);
   }
 
   private void executeStatement(String command) throws SQLException, UnsupportedEncodingException {

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -44,7 +44,6 @@
 import org.apache.ibatis.mapping.SqlSource;
 import org.apache.ibatis.mapping.StatementType;
 import org.apache.ibatis.reflection.MetaClass;
-import org.apache.ibatis.session.AutoMappingBehavior;
 import org.apache.ibatis.session.Configuration;
 import org.apache.ibatis.type.JdbcType;
 import org.apache.ibatis.type.TypeHandler;
@@ -166,11 +165,11 @@ public ResultMap addResultMap(
       String extend,
       Discriminator discriminator,
       List<ResultMapping> resultMappings,
-      AutoMappingBehavior autoMappingBehavior) {
+      Boolean autoMapping) {
     id = applyCurrentNamespace(id, false);
     extend = applyCurrentNamespace(extend, true);
 
-    ResultMap.Builder resultMapBuilder = new ResultMap.Builder(configuration, id, type, resultMappings, autoMappingBehavior);
+    ResultMap.Builder resultMapBuilder = new ResultMap.Builder(configuration, id, type, resultMappings, autoMapping);
     if (extend != null) {
       if (!configuration.hasResultMap(extend)) {
         throw new IncompleteElementException("Could not find a parent resultmap with id '" + extend + "'");

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -42,7 +42,6 @@
 import org.apache.ibatis.mapping.ResultMapping;
 import org.apache.ibatis.parsing.XNode;
 import org.apache.ibatis.parsing.XPathParser;
-import org.apache.ibatis.session.AutoMappingBehavior;
 import org.apache.ibatis.session.Configuration;
 import org.apache.ibatis.type.JdbcType;
 import org.apache.ibatis.type.TypeHandler;
@@ -253,7 +252,7 @@ private ResultMap resultMapElement(XNode resultMapNode, List<ResultMapping> addi
             resultMapNode.getStringAttribute("resultType",
                 resultMapNode.getStringAttribute("javaType"))));
     String extend = resultMapNode.getStringAttribute("extends");
-    AutoMappingBehavior autoMappingBehavior = resultMapNode.getEnumAttribute(AutoMappingBehavior.class, "autoMappingBehavior");
+    Boolean autoMapping = resultMapNode.getBooleanAttribute("autoMapping", null);
     Class<?> typeClass = resolveClass(type);
     Discriminator discriminator = null;
     List<ResultMapping> resultMappings = new ArrayList<ResultMapping>();
@@ -272,7 +271,7 @@ private ResultMap resultMapElement(XNode resultMapNode, List<ResultMapping> addi
         resultMappings.add(buildResultMappingFromContext(resultChild, typeClass, flags));
       }
     }
-    ResultMapResolver resultMapResolver = new ResultMapResolver(builderAssistant, id, typeClass, extend, discriminator, resultMappings, autoMappingBehavior);
+    ResultMapResolver resultMapResolver = new ResultMapResolver(builderAssistant, id, typeClass, extend, discriminator, resultMappings, autoMapping);
     try {
       return resultMapResolver.resolve();
     } catch (IncompleteElementException  e) {

File: src/main/java/org/apache/ibatis/executor/resultset/NestedResultSetHandler.java
Patch:
@@ -140,7 +140,7 @@ protected Object getRowValue(ResultSet rs, ResultMap resultMap, CacheKey combine
         if (rowKey != CacheKey.NULL_CACHE_KEY) ancestorCache.put(rowKey, resultObject);
         final MetaObject metaObject = configuration.newMetaObject(resultObject);
         boolean foundValues = resultMap.getConstructorResultMappings().size() > 0;
-        if (AutoMappingBehavior.FULL.equals(getAutoMappingBehavior(resultMap))) {
+        if (shouldApplyAutomaticMappings(resultMap, AutoMappingBehavior.FULL.equals(configuration.getAutoMappingBehavior()))) {
           final List<String> unmappedColumnNames = resultColumnCache.getUnmappedColumnNames(resultMap, columnPrefix);
           foundValues = applyAutomaticMappings(rs, unmappedColumnNames, metaObject, columnPrefix, resultColumnCache) || foundValues;
         }

File: src/test/java/org/apache/ibatis/submitted/simplelistparameter/Car.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.List;
 
 public class Car {
-  // the result class doesn't need id for further processing
   private String name;
   private List<String> doors;
 
@@ -30,11 +29,11 @@ public void setName(String name) {
     this.name = name;
   }
 
-  public List<String> getCarParts() {
+  public List<String> getDoors() {
     return doors;
   }
 
-  public void setCarParts(List<String> doors) {
+  public void setDoors(List<String> doors) {
     this.doors = doors;
   }
 }

File: src/test/java/org/apache/ibatis/submitted/simplelistparameter/CarMapper.java
Patch:
@@ -21,6 +21,6 @@
 
 public interface CarMapper {
 
-  @Select({ "select id, name from car where doors = #{doors[1]}" })
+  @Select({ "select name from car where doors = #{doors[1]}" })
   List<Car> getCar(Car car);
 }

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -182,7 +182,7 @@ private void applyResultMap(String resultMapId, Class<?> returnType, Arg[] args,
     applyConstructorArgs(args, returnType, resultMappings);
     applyResults(results, returnType, resultMappings);
     Discriminator disc = applyDiscriminator(resultMapId, returnType, discriminator);
-    assistant.addResultMap(resultMapId, returnType, null, disc, resultMappings);
+    assistant.addResultMap(resultMapId, returnType, null, disc, resultMappings, null); // TODO add AutoMappingBehaviour
     createDiscriminatorResultMaps(resultMapId, returnType, discriminator);
   }
 
@@ -193,7 +193,7 @@ private void createDiscriminatorResultMaps(String resultMapId, Class<?> resultTy
         List<ResultMapping> resultMappings = new ArrayList<ResultMapping>();
         applyConstructorArgs(c.constructArgs(), resultType, resultMappings); // issue #136
         applyResults(c.results(), resultType, resultMappings);
-        assistant.addResultMap(caseResultMapId, c.type(), resultMapId, null, resultMappings);
+        assistant.addResultMap(caseResultMapId, c.type(), resultMapId, null, resultMappings, null); // TODO add AutoMappingBehaviour
       }
     }
   }

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -42,6 +42,7 @@
 import org.apache.ibatis.mapping.ResultMapping;
 import org.apache.ibatis.parsing.XNode;
 import org.apache.ibatis.parsing.XPathParser;
+import org.apache.ibatis.session.AutoMappingBehavior;
 import org.apache.ibatis.session.Configuration;
 import org.apache.ibatis.type.JdbcType;
 import org.apache.ibatis.type.TypeHandler;
@@ -252,6 +253,7 @@ private ResultMap resultMapElement(XNode resultMapNode, List<ResultMapping> addi
             resultMapNode.getStringAttribute("resultType",
                 resultMapNode.getStringAttribute("javaType"))));
     String extend = resultMapNode.getStringAttribute("extends");
+    AutoMappingBehavior autoMappingBehavior = resultMapNode.getEnumAttribute(AutoMappingBehavior.class, "autoMappingBehavior");
     Class<?> typeClass = resolveClass(type);
     Discriminator discriminator = null;
     List<ResultMapping> resultMappings = new ArrayList<ResultMapping>();
@@ -270,7 +272,7 @@ private ResultMap resultMapElement(XNode resultMapNode, List<ResultMapping> addi
         resultMappings.add(buildResultMappingFromContext(resultChild, typeClass, flags));
       }
     }
-    ResultMapResolver resultMapResolver = new ResultMapResolver(builderAssistant, id, typeClass, extend, discriminator, resultMappings);
+    ResultMapResolver resultMapResolver = new ResultMapResolver(builderAssistant, id, typeClass, extend, discriminator, resultMappings, autoMappingBehavior);
     try {
       return resultMapResolver.resolve();
     } catch (IncompleteElementException  e) {

File: src/main/java/org/apache/ibatis/executor/resultset/NestedResultSetHandler.java
Patch:
@@ -140,7 +140,7 @@ protected Object getRowValue(ResultSet rs, ResultMap resultMap, CacheKey combine
         if (rowKey != CacheKey.NULL_CACHE_KEY) ancestorCache.put(rowKey, resultObject);
         final MetaObject metaObject = configuration.newMetaObject(resultObject);
         boolean foundValues = resultMap.getConstructorResultMappings().size() > 0;
-        if (AutoMappingBehavior.FULL.equals(configuration.getAutoMappingBehavior())) {
+        if (AutoMappingBehavior.FULL.equals(getAutoMappingBehavior(resultMap))) {
           final List<String> unmappedColumnNames = resultColumnCache.getUnmappedColumnNames(resultMap, columnPrefix);
           foundValues = applyAutomaticMappings(rs, unmappedColumnNames, metaObject, columnPrefix, resultColumnCache) || foundValues;
         }

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -490,7 +490,7 @@ protected Object prepareCompositeKeyParameter(ResultSet rs, ResultMapping result
       final Class<?> propType = metaObject.getSetterType(innerResultMapping.getProperty());
       final TypeHandler<?> typeHandler = typeHandlerRegistry.getTypeHandler(propType);
       final Object propValue = typeHandler.getResult(rs, prependPrefix(innerResultMapping.getColumn(), columnPrefix));
-      if (propType != null) { // issue #353 do not execute nested query if key is null
+      if (propValue != null) { // issue #353 & #560 do not execute nested query if key is null
         metaObject.setValue(innerResultMapping.getProperty(), propValue);
         foundValues = true;
       }

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -148,7 +148,7 @@ public ParameterMapping buildParameterMapping(
 
     // Class parameterType = parameterMapBuilder.type();
     Class<?> javaTypeClass = resolveParameterJavaType(parameterType, property, javaType, jdbcType);
-    TypeHandler<?> typeHandlerInstance = resolveInstance(typeHandler);
+    TypeHandler<?> typeHandlerInstance = resolveTypeHandler(javaTypeClass, typeHandler);
 
     ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, javaTypeClass);
     builder.jdbcType(jdbcType);
@@ -385,10 +385,9 @@ private ResultMapping assembleResultMapping(
       String columnPrefix,
       Class<? extends TypeHandler<?>> typeHandler,
       List<ResultFlag> flags) {
-    // Class resultType = resultMapBuilder.type();
     nestedResultMap = applyCurrentNamespace(nestedResultMap, true);
     Class<?> javaTypeClass = resolveResultJavaType(resultType, property, javaType);
-    TypeHandler<?> typeHandlerInstance = (TypeHandler<?>) resolveInstance(typeHandler);
+    TypeHandler<?> typeHandlerInstance = (TypeHandler<?>) resolveTypeHandler(javaTypeClass, typeHandler);
 
     List<ResultMapping> composites = parseCompositeColumnName(column);
     if (composites.size() > 0) {

File: src/main/java/org/apache/ibatis/builder/xml/dynamic/WhereSqlNode.java
Patch:
@@ -20,7 +20,7 @@
 public class WhereSqlNode extends TrimSqlNode {
 
   public WhereSqlNode(Configuration configuration, SqlNode contents) {
-    super(configuration, contents, "WHERE", "AND |OR ", null, null);
+    super(configuration, contents, "WHERE", "AND |OR |AND\n|OR\n|AND\r|OR\r", null, null);
   }
 
 

File: src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java
Patch:
@@ -72,7 +72,7 @@ private void printColumnHeaders(ResultSetMetaData rsmd, int columnCount) throws
       row.append(colname);
       if (i != columnCount) row.append(", ");
     }
-    debug(row.toString());
+    trace(row.toString());
   }
 
   private void printColumnValues(int columnCount) throws SQLException {
@@ -89,7 +89,7 @@ private void printColumnValues(int columnCount) throws SQLException {
       row.append(colname);
       if (i != columnCount) row.append(", ");
     }
-    debug(row.toString());
+    trace(row.toString());
   }
 
   /*

File: src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java
Patch:
@@ -73,7 +73,7 @@ public BaseJdbcLogger(Log log) {
     EXECUTE_METHODS.add("execute");
     EXECUTE_METHODS.add("executeUpdate");
     EXECUTE_METHODS.add("executeQuery");
-
+    EXECUTE_METHODS.add("executeBatch");
   }
 
   protected void setColumn(Object key, Object value) {

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -103,7 +103,7 @@ public Object execute(Object[] args) {
   private void executeWithResultHandler(Object[] args) {
     MappedStatement ms = config.getMappedStatement(commandName);
     if (Void.TYPE.equals(ms.getResultMaps().get(0).getType())) {
-      throw new BindingException(method.getName() + ", annotated methods do not support ResultHandlers, use XML instead.");
+      throw new BindingException("method " + method.getName() + " needs either a @ResultMap annotation or a resultType attribute in XML so a ResultHandler can be used as a parameter.");
     }
     Object param = getParam(args);
     if (rowBoundsIndex != null) {

File: src/test/java/org/apache/ibatis/binding/BindingTest.java
Patch:
@@ -600,7 +600,6 @@ public void shouldSelectBlogWithDefault31ParamNames() {
     }
   }
 
-  @Ignore // TODO see issue #165 (using "value" fails if there is a dynamic variable)
   @Test
   public void shouldSelectBlogWithAParamNamedValue() {
     SqlSession session = sqlSessionFactory.openSession();

File: src/main/java/org/apache/ibatis/executor/keygen/Jdbc3KeyGenerator.java
Patch:
@@ -32,7 +32,7 @@
 
 public class Jdbc3KeyGenerator implements KeyGenerator {
 
-  public void processBefore(Executor executor, MappedStatement ms, Statement stmt, Object parameter) {
+  public void processBefore(Executor executor, MappedStatement ms, Object parameter) {
     // do nothing
   }
 

File: src/main/java/org/apache/ibatis/executor/keygen/KeyGenerator.java
Patch:
@@ -22,7 +22,7 @@
 
 public interface KeyGenerator {
 
-  void processBefore(Executor executor, MappedStatement ms, Statement stmt, Object parameter);
+  void processBefore(Executor executor, MappedStatement ms, Object parameter);
 
   void processAfter(Executor executor, MappedStatement ms, Statement stmt, Object parameter);
 

File: src/main/java/org/apache/ibatis/executor/keygen/NoKeyGenerator.java
Patch:
@@ -22,7 +22,7 @@
 
 public class NoKeyGenerator implements KeyGenerator {
 
-  public void processBefore(Executor executor, MappedStatement ms, Statement stmt, Object parameter) {
+  public void processBefore(Executor executor, MappedStatement ms, Object parameter) {
   }
 
   public void processAfter(Executor executor, MappedStatement ms, Statement stmt, Object parameter) {

File: src/test/java/org/apache/ibatis/binding/BoundAuthorMapper.java
Patch:
@@ -38,6 +38,8 @@ public interface BoundAuthorMapper {
 
   int insertAuthor(Author author);
 
+  int insertAuthorDynamic(Author author);
+
   //======================================================
 
   @ConstructorArgs({

File: src/main/java/org/apache/ibatis/executor/resultset/NestedResultSetHandler.java
Patch:
@@ -123,6 +123,7 @@ protected Object getRowValue(ResultSet rs, ResultMap resultMap, CacheKey combine
         final List<String> mappedColumnNames = resultColumnCache.getMappedColumnNames(resultMap, columnPrefix);
         foundValues = applyPropertyMappings(rs, resultMap, mappedColumnNames, metaObject, lazyLoader, columnPrefix) || foundValues;
         foundValues = applyNestedResultMappings(rs, resultMap, metaObject, columnPrefix, resultColumnCache, combinedKey) || foundValues;
+        foundValues = (lazyLoader != null && lazyLoader.size() > 0) || foundValues;
         resultObject = foundValues ? resultObject : null;
         ancestorCache.remove(rowKey);
       }

File: src/main/java/org/apache/ibatis/type/TypeReference.java
Patch:
@@ -31,7 +31,8 @@ public abstract class TypeReference<T> {
   protected TypeReference() {
     Type superclass = getClass().getGenericSuperclass();
     if (superclass instanceof Class) {
-      throw new RuntimeException("Missing type parameter.");
+      throw new TypeException("TypeHandler '" + getClass() + "' extends TypeReference but misses the type parameter. "
+        + "Remove the extension or add a type parameter to it.");
     }
     rawType = ((ParameterizedType) superclass).getActualTypeArguments()[0];
     // TODO remove this when Reflector is fixed to return Types

File: src/test/java/org/apache/ibatis/metadata/MetadataTest.java
Patch:
@@ -31,6 +31,7 @@ public class MetadataTest extends BaseDataTest {
   @Before
   public void setup() throws Exception {
     dataSource = createUnpooledDataSource(BaseDataTest.BLOG_PROPERTIES);
+    runScript(dataSource, BLOG_DDL);
   }
 
   @Test

File: src/test/java/org/apache/ibatis/submitted/parent_child_circular/ParentChildCircularTest.java
Patch:
@@ -22,11 +22,13 @@
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;
+import org.junit.Ignore;
 import org.junit.Test;
 import static org.junit.Assert.*;
 
 import javax.sql.DataSource;
 
+@Ignore // see issue #509
 public class ParentChildCircularTest extends BaseDataTest {
 
   @Test

File: src/test/java/org/apache/ibatis/submitted/cache/CacheTest.java
Patch:
@@ -26,10 +26,9 @@
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
-@Ignore // TODO see issue #524
+// issue #524
 public class CacheTest {
 
   private static SqlSessionFactory sqlSessionFactory;

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -238,13 +238,14 @@ private void parseStatement(Method method) {
     if (sqlSource != null) {
       Options options = method.getAnnotation(Options.class);
       final String mappedStatementId = type.getName() + "." + method.getName();
-      boolean flushCache = false;
-      boolean useCache = true;
       Integer fetchSize = null;
       Integer timeout = null;
       StatementType statementType = StatementType.PREPARED;
       ResultSetType resultSetType = ResultSetType.FORWARD_ONLY;
       SqlCommandType sqlCommandType = getSqlCommandType(method);
+      boolean isSelect = sqlCommandType == SqlCommandType.SELECT;
+      boolean flushCache = !isSelect;
+      boolean useCache = isSelect;
 
       KeyGenerator keyGenerator;
       String keyProperty = "id";

File: src/main/java/org/apache/ibatis/cache/decorators/TransactionalCache.java
Patch:
@@ -63,6 +63,7 @@ public Object removeObject(Object key) {
   }
 
   public void clear() {
+    delegate.clear(); // issue #524 delegate should be cleared
     reset();
     clearOnCommit = true;
   }

File: src/main/java/org/apache/ibatis/builder/xml/dynamic/ForEachSqlNode.java
Patch:
@@ -55,7 +55,6 @@ public boolean apply(DynamicContext context) {
     for (Object o : iterable) {
       DynamicContext oldContext = context;
       if (first) {
-        first = false;
         context = new PrefixedContext(context, "");
       } else {
         if (separator != null) {
@@ -68,7 +67,7 @@ public boolean apply(DynamicContext context) {
       applyItem(context, o, uniqueNumber);
       applyIndex(context, i);
       contents.apply(new FilteredDynamicContext(configuration, context, item, uniqueNumber));
-      first = !((PrefixedContext) context).isPrefixApplied();
+      if (first) first = !((PrefixedContext) context).isPrefixApplied();
       context = oldContext;
       i++;
     }

File: src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomObjectWrapper.java
Patch:
@@ -74,7 +74,7 @@ public void add(Object element) {
   }
 
   public <E> void addAll(List<E> element) {
-    ((CustomCollection<Object>) collection).add(element);
+    ((CustomCollection<Object>) collection).addAll(element);
   }
 
 }

File: src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java
Patch:
@@ -309,7 +309,7 @@ public void shouldSelectTwoSetsOfAuthorsViaProc() throws Exception {
     }
   }
 
-  @Test
+  @Test(expected=ExecutorException.class) // TODO see issue #464
   public void shouldSelectAuthorViaOutParams() throws Exception {
     DataSource ds = createBlogDataSource();
     Connection connection = ds.getConnection();

File: src/main/java/org/apache/ibatis/reflection/factory/DefaultObjectFactory.java
Patch:
@@ -84,7 +84,7 @@ private <T> T instantiateClass(Class<T> type, List<Class<?>> constructorArgTypes
     }
   }
 
-  private Class<?> resolveInterface(Class<?> type) {
+  protected Class<?> resolveInterface(Class<?> type) {
     Class<?> classToCreate;
     if (type == List.class || type == Collection.class) {
       classToCreate = ArrayList.class;

File: src/test/java/org/apache/ibatis/submitted/result_handler_type/PersonMapper.java
Patch:
@@ -24,7 +24,7 @@
 
 public interface PersonMapper {
   List<Person> doSelect();
-  
+
   @Select("select * from person")
   @MapKey("id")
   Map<Integer, Person> selectAsMap();

File: src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java
Patch:
@@ -132,7 +132,7 @@ private Map<String, String> parseParameterMapping(String content) {
           if (parameterProperties.contains(name)) {
             map.put(name, value);
           } else {
-            throw new BuilderException("An invalid property '" + name + "' was found in mapping " + content + ".  Valid properties are " + parameterProperties);
+            throw new BuilderException("An invalid property '" + name + "' was found in mapping #{" + content + "}.  Valid properties are " + parameterProperties);
           }
         } else {
           throw new BuilderException("Improper inline parameter map format.  Should be: #{propName,attr1=val1,attr2=val2}");

File: src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java
Patch:
@@ -122,7 +122,7 @@ private Map<String, String> parseParameterMapping(String content) {
       String property = extractPropertyName(propertyWithJdbcType);
       map.put("property", property);
       String jdbcType = extractJdbcType(propertyWithJdbcType);
-      map.put("jdbcType", jdbcType); // support old style #{property:TYPE} format
+      if (jdbcType != null) map.put("jdbcType", jdbcType); // support old style #{property:TYPE} format
       while (parameterMappingParts.hasMoreTokens()) {
         String attribute = parameterMappingParts.nextToken();
         StringTokenizer attributeParts = new StringTokenizer(attribute, "=");

File: src/test/java/com/ibatis/sqlmap/ResultObjectFactoryImpl.java
Patch:
@@ -64,7 +64,7 @@ public <T> T create(Class<T> type, List<Class<?>> constructorArgTypes, List<Obje
   public void setProperties(Properties properties) {
   }
 
-  public boolean isCollection(Class<?> type) {
+  public <T> boolean isCollection(Class<T> type) {
     return Collection.class.isAssignableFrom(type);
   }
 

File: src/test/java/org/apache/ibatis/submitted/result_handler_type/ObjectFactory.java
Patch:
@@ -87,7 +87,7 @@ private Class<?> resolveInterface(Class<?> type) {
   }
 
 
-  public boolean isCollection(Class<?> type) {
+  public <T> boolean isCollection(Class<T> type) {
     return Collection.class.isAssignableFrom(type);
   }
 

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -192,9 +192,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setDefaultExecutorType(ExecutorType.valueOf(stringValueOf(props.getProperty("defaultExecutorType"), "SIMPLE")));
       configuration.setDefaultStatementTimeout(integerValueOf(props.getProperty("defaultStatementTimeout"), null));
       configuration.setMapUnderscoreToCamelCase(booleanValueOf(props.getProperty("mapUnderscoreToCamelCase"), false));
-      configuration.setSafeRowBoundsEnabled(booleanValueOf(props.getProperty("safeRowBoundsEnabled"), true));
-      configuration.setDefaultListResultHandlerType(resolveClass(props.getProperty("defaultListResultHandlerType")));
-      configuration.setDefaultMapResultHandlerType(resolveClass(props.getProperty("defaultMapResultHandlerType")));
+      configuration.setSafeRowBoundsEnabled(booleanValueOf(props.getProperty("safeRowBoundsEnabled"), false));
       configuration.setClearLocalCacheAfterEachStatement(booleanValueOf(props.getProperty("flushLocalCacheAfterEachStatement"), false));
       configuration.setJdbcTypeForNull(JdbcType.valueOf(stringValueOf(props.getProperty("jdbcTypeForNull"), "OTHER")));
       configuration.setLazyLoadTriggerMethods(stringSetValueOf(props.getProperty("lazyLoadTriggerMethods"), "equals,clone,hashCode,toString"));

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSession.java
Patch:
@@ -76,7 +76,7 @@ public <K, V> Map<K, V> selectMap(String statement, Object parameter, String map
   public <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {
     final List<?> list = selectList(statement, parameter, rowBounds);
     final DefaultMapResultHandler<K, V> mapResultHandler = new DefaultMapResultHandler<K, V>(mapKey,
-        configuration.getDefaultMapResultHandlerType());
+        configuration.getObjectFactory());
     final DefaultResultContext context = new DefaultResultContext();
     for (Object o : list) {
       context.nextResultObject(o);

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -113,7 +113,7 @@ protected void handleRefCursorOutputParameter(CallableStatement cs, ParameterMap
     if (resultMapId != null) {
       final ResultMap resultMap = configuration.getResultMap(resultMapId);
       final DefaultResultHandler resultHandler = new DefaultResultHandler(configuration.getDefaultListResultHandlerType());
-      ResultColumnCache resultColumnCache = new ResultColumnCache(cs.getMetaData(), configuration);
+      ResultColumnCache resultColumnCache = new ResultColumnCache(rs.getMetaData(), configuration);
       handleRowValues(rs, resultMap, resultHandler, new RowBounds(), resultColumnCache);
       metaParam.setValue(parameterMapping.getProperty(), resultHandler.getResultList());
     } else {

File: src/test/java/org/apache/ibatis/binding/BoundBlogMapper.java
Patch:
@@ -111,6 +111,8 @@ public interface BoundBlogMapper {
 
   Blog selectBlogUsingConstructorWithResultMap(int i);
 
+  Blog selectBlogUsingConstructorWithResultMapCollection(int i);
+  
   Blog selectBlogByIdUsingConstructor(int id);
 
   //======================================================

File: src/main/java/org/apache/ibatis/builder/xml/dynamic/TextSqlNode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2011 The MyBatis Team
+ *    Copyright 2009-2012 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -52,7 +52,7 @@ public String handleToken(String content) {
           context.getBindings().put("value", parameter);
         }
         Object value = OgnlCache.getValue(content, context.getBindings());
-        return String.valueOf(value);
+        return (value == null ? "" : String.valueOf(value)); // issue #274 return "" instead of "null"
       } catch (OgnlException e) {
         throw new BuilderException("Error evaluating expression '" + content + "'. Cause: " + e, e);
       }

File: src/test/java/org/apache/ibatis/submitted/permissions/PermissionsTest.java
Patch:
@@ -53,8 +53,7 @@ public static void setUp() throws Exception {
     reader.close();
   }
 
-  @Ignore // see issue #168
-  @Test
+  @Test // see issue #168
   public void shouldGet4Permissions() {
     SqlSession sqlSession = sqlSessionFactory.openSession();
     try {

File: src/test/java/domain/blog/mappers/AuthorMapper.java
Patch:
@@ -34,6 +34,8 @@ public interface AuthorMapper {
 
   LinkedList<Author> selectAllAuthorsLinkedList();
 
+  Author[] selectAllAuthorsArray();
+
   void selectAllAuthors(ResultHandler handler);
 
   Author selectAuthor(int id);

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -116,7 +116,7 @@ private <E> Collection<E> executeForCollection(Object[] args) throws Exception {
       result = sqlSession.<E>selectList(commandName, param);
     }
     // issue #510 Collections support
-    if (!List.class.isAssignableFrom(method.getReturnType())) {
+    if (!method.getReturnType().isAssignableFrom(result.getClass())) {
       return convertToDeclaredCollection(result);
     }
     return result;

File: src/main/java/org/apache/ibatis/reflection/factory/DefaultObjectFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2011 The MyBatis Team
+ *    Copyright 2009-2012 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -81,6 +81,8 @@ private Class<?> resolveCollectionInterface(Class<?> type) {
       classToCreate = ArrayList.class;
     } else if (type == Map.class) {
       classToCreate = HashMap.class;
+    } else if (type == SortedSet.class) { // issue #510 Collections Support
+      classToCreate = TreeSet.class;
     } else if (type == Set.class) {
       classToCreate = HashSet.class;
     } else {

File: src/test/java/org/apache/ibatis/submitted/parametrizedlist/ParametrizedListTest.java
Patch:
@@ -111,5 +111,5 @@ public void testShouldGetAListOfMaps() throws Exception {
       sqlSession.close();
     }
   }
-  
+
 }

File: src/test/java/org/apache/ibatis/submitted/generictypes/Mapper.java
Patch:
@@ -4,7 +4,7 @@
 
 public interface Mapper {
 
-  @Select("select id, owner from groups where id=1")
+  @Select("select id, owner, members from groups where id=1")
   Group getGroup();
 
 }

File: src/test/java/org/apache/ibatis/submitted/generictypes/UserTypeHandler.java
Patch:
@@ -8,7 +8,7 @@
 import org.apache.ibatis.type.BaseTypeHandler;
 import org.apache.ibatis.type.JdbcType;
 
-public class UserTypeHandler<T> extends BaseTypeHandler<User<String>> {
+public class UserTypeHandler extends BaseTypeHandler<User<String>> {
 
   @Override
   public void setNonNullParameter(PreparedStatement ps, int i, User<String> parameter, JdbcType jdbcType) throws SQLException {

File: src/test/java/org/apache/ibatis/submitted/generictypes/GenericTypesTest.java
Patch:
@@ -23,13 +23,13 @@
 
 import junit.framework.Assert;
 
+import org.apache.ibatis.exceptions.PersistenceException;
 import org.apache.ibatis.io.Resources;
 import org.apache.ibatis.jdbc.ScriptRunner;
 import org.apache.ibatis.session.SqlSession;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
 public class GenericTypesTest {
@@ -63,7 +63,6 @@ public void setUp() throws Exception {
     }
   }
 
-  @Ignore
   @Test
   public void testShouldGetAListOfMaps() throws Exception {
     SqlSession sqlSession = sqlSessionFactory.openSession();

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -337,7 +337,7 @@ private Class<?> getReturnType(Method method) {
         }
       }
     } else if (method.isAnnotationPresent(MapKey.class) && Map.class.isAssignableFrom(returnType)) {
-      // (issue 503) Do not look into Maps if there is not MapKey annotation 
+      // (issue 504) Do not look into Maps if there is not MapKey annotation 
       Type returnTypeParameter = method.getGenericReturnType();
       if (returnTypeParameter instanceof ParameterizedType) {
         Type[] actualTypeArguments = ((ParameterizedType) returnTypeParameter).getActualTypeArguments();

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -337,7 +337,7 @@ private Class<?> getReturnType(Method method) {
         }
       }
     } else if (method.isAnnotationPresent(MapKey.class) && Map.class.isAssignableFrom(returnType)) {
-      // (issue 195) Do not look into Maps if there is not MapKey annotation 
+      // (issue 503) Do not look into Maps if there is not MapKey annotation 
       Type returnTypeParameter = method.getGenericReturnType();
       if (returnTypeParameter instanceof ParameterizedType) {
         Type[] actualTypeArguments = ((ParameterizedType) returnTypeParameter).getActualTypeArguments();

File: src/test/java/org/apache/ibatis/submitted/parametrizedlist/Mapper.java
Patch:
@@ -16,9 +16,9 @@ public interface Mapper {
   Map<Integer, User<String>> getAMapOfUsers();
 
   @Select("select id, name from users where id=1")
-  Map<Integer, Object> getUserAsAMap();
+  Map<String, Object> getUserAsAMap();
 
   @Select("select id, name from users")
-  List<Map<Integer, Object>> getAListOfMaps();
+  List<Map<String, Object>> getAListOfMaps();
   
 }

File: src/test/java/org/apache/ibatis/submitted/parametrizedlist/ParametrizedListTest.java
Patch:
@@ -93,7 +93,7 @@ public void testShouldGetAUserAsAMap() throws Exception {
     SqlSession sqlSession = sqlSessionFactory.openSession();
     try {
       Mapper mapper = sqlSession.getMapper(Mapper.class);
-      Map<Integer, Object> map = mapper.getUserAsAMap();
+      Map<String, Object> map = mapper.getUserAsAMap();
       Assert.assertEquals(1, map.get("ID"));
     } finally {
       sqlSession.close();
@@ -105,7 +105,7 @@ public void testShouldGetAListOfMaps() throws Exception {
     SqlSession sqlSession = sqlSessionFactory.openSession();
     try {
       Mapper mapper = sqlSession.getMapper(Mapper.class);
-      List<Map<Integer, Object>> map = mapper.getAListOfMaps();
+      List<Map<String, Object>> map = mapper.getAListOfMaps();
       Assert.assertEquals(1, map.get(0).get("ID"));
     } finally {
       sqlSession.close();

File: src/test/java/org/apache/ibatis/submitted/parametrizedlist/Mapper.java
Patch:
@@ -15,4 +15,7 @@ public interface Mapper {
   @MapKey("id")
   Map<Integer, User<String>> getUsersMap();
 
+  @Select("select id, name from users where id=1")
+  Map<Integer, Object> getUsersMap2();
+
 }

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -58,7 +58,7 @@ public int doUpdate(MappedStatement ms, Object parameterObject) throws SQLExcept
       BatchResult batchResult = batchResultList.get(last);
       batchResult.addParameterObject(parameterObject);
     } else {
-      final Connection connection = getConnection();
+      Connection connection = getConnection(ms.getId());
       stmt = handler.prepare(connection);
       currentSql = sql;
       currentStatement = ms;
@@ -77,7 +77,7 @@ public <E> List<E> doQuery(MappedStatement ms, Object parameterObject, RowBounds
       flushStatements();
       Configuration configuration = ms.getConfiguration();
       StatementHandler handler = configuration.newStatementHandler(this, ms, parameterObject, rowBounds, resultHandler, boundSql);
-      Connection connection = getConnection();
+      Connection connection = getConnection(ms.getId());
       stmt = handler.prepare(connection);
       handler.parameterize(stmt);
       return handler.<E>query(stmt, resultHandler);

File: src/main/java/org/apache/ibatis/logging/Log.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2011 The MyBatis Team
+ *    Copyright 2009-2012 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,8 +23,8 @@ public interface Log {
 
   void error(String s);
 
-  public void debug(String s);
+  void debug(String s);
 
-  public void warn(String s);
+  void warn(String s);
 
 }

File: src/main/java/org/apache/ibatis/logging/commons/JakartaCommonsLoggingImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2011 The MyBatis Team
+ *    Copyright 2009-2012 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -22,7 +22,7 @@ public class JakartaCommonsLoggingImpl implements org.apache.ibatis.logging.Log
 
   private Log log;
 
-  public JakartaCommonsLoggingImpl(Class<?> clazz) {
+  public JakartaCommonsLoggingImpl(String clazz) {
     log = LogFactory.getLog(clazz);
   }
 

File: src/main/java/org/apache/ibatis/logging/log4j/Log4jImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2011 The MyBatis Team
+ *    Copyright 2009-2012 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -22,7 +22,7 @@ public class Log4jImpl implements Log {
 
   private Logger log;
 
-  public Log4jImpl(Class<?> clazz) {
+  public Log4jImpl(String clazz) {
     log = Logger.getLogger(clazz);
   }
 
@@ -46,5 +46,4 @@ public void warn(String s) {
     log.warn(s);
   }
 
-
 }

File: src/main/java/org/apache/ibatis/logging/nologging/NoLoggingImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2011 The MyBatis Team
+ *    Copyright 2009-2012 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -19,7 +19,7 @@
 
 public class NoLoggingImpl implements Log {
 
-  public NoLoggingImpl(Class<?> clazz) {
+  public NoLoggingImpl(String clazz) {
   }
 
   public boolean isDebugEnabled() {

File: src/main/java/org/apache/ibatis/logging/slf4j/Slf4jImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2011 The MyBatis Team
+ *    Copyright 2009-2012 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@ public class Slf4jImpl implements Log {
 
   private Logger log;
 
-  public Slf4jImpl(Class<?> clazz) {
+  public Slf4jImpl(String clazz) {
     log = LoggerFactory.getLogger(clazz);
   }
 

File: src/main/java/org/apache/ibatis/logging/stdout/StdOutImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2011 The MyBatis Team
+ *    Copyright 2009-2012 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -19,7 +19,7 @@
 
 public class StdOutImpl implements Log {
 
-  public StdOutImpl(Class<?> clazz) {
+  public StdOutImpl(String clazz) {
   }
 
   public boolean isDebugEnabled() {

File: src/test/java/com/ibatis/dao/engine/transaction/jdbc/JdbcDaoTransaction.java
Patch:
@@ -41,14 +41,13 @@ public JdbcDaoTransaction(DataSource dataSource) {
         connection.setAutoCommit(false);
       }
       if (connectionLog.isDebugEnabled()) {
-        connection = ConnectionLogger.newInstance(connection);
+//        connection = ConnectionLogger.newInstance(connection);
       }
     } catch (SQLException e) {
       throw new DaoException("Error starting JDBC transaction.  Cause: " + e);
     }
   }
 
-
   public void commit() {
     try {
       try {

File: src/test/java/com/ibatis/sqlmap/engine/transaction/jdbc/JdbcTransaction.java
Patch:
@@ -46,7 +46,7 @@ public JdbcTransaction(Configuration configuration, DataSource ds, int isolation
   private void init() throws SQLException, TransactionException {
     // Open JDBC Transaction
     Connection connection = dataSource.getConnection();
-    connection = ConnectionLogger.newInstance(connection);        
+//    connection = ConnectionLogger.newInstance(connection);        
     if (connection == null) {
       throw new TransactionException("JdbcTransaction could not start transaction.  Cause: The DataSource returned a null connection.");
     }

File: src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java
Patch:
@@ -335,7 +335,7 @@ public void shouldSelectAuthorViaOutParams() throws Exception {
   public void shouldFetchPostsForBlog() throws Exception {
     DataSource ds = createBlogDataSource();
     Connection connection = ds.getConnection();
-    connection = ConnectionLogger.newInstance(connection);
+//    connection = ConnectionLogger.newInstance(connection);
     Executor executor = createExecutor(new JdbcTransaction(connection));
     try {
       MappedStatement selectBlog = ExecutorTestHelper.prepareComplexSelectBlogMappedStatement(config);

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -268,7 +268,7 @@ private void parseStatement(Method method) {
       if (options != null) {
         flushCache = options.flushCache();
         useCache = options.useCache();
-        fetchSize = options.fetchSize() > -1 ? options.fetchSize() : null;
+        fetchSize = options.fetchSize() > -1 || options.fetchSize() == Integer.MIN_VALUE ? options.fetchSize() : null; //issue #348
         timeout = options.timeout() > -1 ? options.timeout() : null;
         statementType = options.statementType();
         resultSetType = options.resultSetType();

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -197,6 +197,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setDefaultMapResultHandlerType(resolveClass(props.getProperty("defaultMapResultHandlerType")));
       configuration.setClearLocalCacheAfterEachStatement(booleanValueOf(props.getProperty("flushLocalCacheAfterEachStatement"), false));
       configuration.setJdbcTypeForNull(JdbcType.valueOf(stringValueOf(props.getProperty("jdbcTypeForNull"), "OTHER")));
+      configuration.setLazyLoadTriggerMethods(stringSetValueOf(props.getProperty("lazyLoadTriggerMethods"), "equals,clone,hashCode,toString"));
     }
   }
 

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -350,11 +350,11 @@ protected Object createResultObject(ResultSet rs, ResultMap resultMap, ResultLoa
     final List<Class<?>> constructorArgTypes = new ArrayList<Class<?>>();
     final List<Object> constructorArgs = new ArrayList<Object>();
     final Object resultObject = createResultObject(rs, resultMap, constructorArgTypes, constructorArgs, columnPrefix, resultColumnCache);
-    if (resultObject != null && configuration.isLazyLoadingEnabled()) {
+    if (resultObject != null && configuration.isLazyLoadingEnabled() && !typeHandlerRegistry.hasTypeHandler(resultMap.getType())) {
       final List<ResultMapping> propertyMappings = resultMap.getPropertyResultMappings();
       for (ResultMapping propertyMapping : propertyMappings) {
         if (propertyMapping.getNestedQueryId() != null) { // issue #109 (avoid creating proxies for leaf objects)
-          return ResultObjectProxy.createProxy(resultObject, lazyLoader, configuration.isAggressiveLazyLoading(), objectFactory, constructorArgTypes, constructorArgs);
+          return ResultObjectProxy.createProxy(resultObject, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);
         }
       }
     }

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -448,7 +448,8 @@ protected Object getNestedQueryMappingValue(ResultSet rs, MetaObject metaResultO
     final Object nestedQueryParameterObject = prepareParameterForNestedQuery(rs, propertyMapping, nestedQueryParameterType, columnPrefix);
     Object value = null;
     if (nestedQueryParameterObject != null) {
-      final CacheKey key = executor.createCacheKey(nestedQuery, nestedQueryParameterObject, RowBounds.DEFAULT);
+      final BoundSql nestedBoundSql = nestedQuery.getBoundSql(nestedQueryParameterObject);
+      final CacheKey key = executor.createCacheKey(nestedQuery, nestedQueryParameterObject, RowBounds.DEFAULT, nestedBoundSql);
       if (executor.isCached(nestedQuery, key)) {
         executor.deferLoad(nestedQuery, metaResultObject, property, key);
       } else {

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -354,8 +354,8 @@ public ResultSetHandler newResultSetHandler(Executor executor, MappedStatement m
     return resultSetHandler;
   }
 
-  public StatementHandler newStatementHandler(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler) {
-    StatementHandler statementHandler = new RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler);
+  public StatementHandler newStatementHandler(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) {
+    StatementHandler statementHandler = new RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);
     statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);
     return statementHandler;
   }

File: src/main/java/org/apache/ibatis/mapping/ResultMap.java
Patch:
@@ -53,6 +53,9 @@ public Class<?> type() {
     }
 
     public ResultMap build() {
+      if (resultMap.id == null) {
+        throw new IllegalArgumentException("ResultMaps must have an id");
+      }
       resultMap.mappedColumns = new HashSet<String>();
       resultMap.idResultMappings = new ArrayList<ResultMapping>();
       resultMap.constructorResultMappings = new ArrayList<ResultMapping>();

File: src/main/java/org/apache/ibatis/type/JdbcType.java
Patch:
@@ -68,7 +68,7 @@ public enum JdbcType {
     this.TYPE_CODE = code;
   }
 
-  static JdbcType forCode(int code)  {
+  public static JdbcType forCode(int code)  {
     return codeLookup.get(code);
   }
 

File: src/main/java/org/apache/ibatis/type/UnknownTypeHandler.java
Patch:
@@ -66,7 +66,8 @@ private TypeHandler<?> resolveTypeHandler(Object parameter, JdbcType jdbcType) {
       handler = OBJECT_TYPE_HANDLER;
     } else {
       handler = typeHandlerRegistry.getTypeHandler(parameter.getClass(), jdbcType);
-      if (handler instanceof UnknownTypeHandler) {
+      // check if handler is null (issue #270)
+      if (handler == null || handler instanceof UnknownTypeHandler) {
         handler = OBJECT_TYPE_HANDLER;
       }
     }

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -39,6 +39,7 @@ public final class TypeHandlerRegistry {
       put(Float.class, float.class);
       put(Double.class, double.class);
       put(Boolean.class, boolean.class);
+      put(Character.class, char.class);
     }
   };
 
@@ -124,7 +125,9 @@ public TypeHandlerRegistry() {
     register(java.sql.Time.class, new SqlTimeTypeHandler());
     register(java.sql.Timestamp.class, new SqlTimestampTypeHandler());
     
+    // issue #273
     register(Character.class, new CharacterTypeHandler());
+    register(char.class, new CharacterTypeHandler());
   }
 
   public boolean hasTypeHandler(Class<?> javaType) {

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -123,6 +123,8 @@ public TypeHandlerRegistry() {
     register(java.sql.Date.class, new SqlDateTypeHandler());
     register(java.sql.Time.class, new SqlTimeTypeHandler());
     register(java.sql.Timestamp.class, new SqlTimestampTypeHandler());
+    
+    register(Character.class, new CharacterTypeHandler());
   }
 
   public boolean hasTypeHandler(Class<?> javaType) {

File: src/main/java/org/apache/ibatis/mapping/MappedStatement.java
Patch:
@@ -62,7 +62,7 @@ public Builder(Configuration configuration, String id, SqlSource sqlSource, SqlC
       mappedStatement.databaseId = databaseId;
       mappedStatement.sqlSource = sqlSource;
       mappedStatement.statementType = StatementType.PREPARED;
-      mappedStatement.parameterMap = new ParameterMap.Builder(configuration, "defaultParameterMap", Object.class, new ArrayList<ParameterMapping>()).build();
+      mappedStatement.parameterMap = new ParameterMap.Builder(configuration, "defaultParameterMap", null, new ArrayList<ParameterMapping>()).build();
       mappedStatement.resultMaps = new ArrayList<ResultMap>();
       mappedStatement.timeout = configuration.getDefaultStatementTimeout();
       mappedStatement.sqlCommandType = sqlCommandType;

File: src/test/java/org/apache/ibatis/submitted/complex_column/PersonMapper.java
Patch:
@@ -22,6 +22,7 @@ public interface PersonMapper {
     
     public Person getWithoutComplex(Long id);
     public Person getWithComplex(Long id);
+    public Person getParentWithComplex(Person person);
     
     @Select({
       "SELECT id, firstName, lastName, parent_id, parent_firstName, parent_lastName",

File: src/test/java/org/apache/ibatis/binding/BoundBlogMapper.java
Patch:
@@ -143,6 +143,9 @@ List<Post> selectPostsLikeSubjectAndBody(RowBounds bounds,
           "WHERE id = #{id} AND title = #{params.nonExistentParam,jdbcType=VARCHAR}")
   Blog selectBlogByNonExistentNestedParam(@Param("id") int id, @Param("params") Map<String, Object> params);
 
+  @Select("SELECT * FROM blog WHERE id = #{id}")
+  Blog selectBlogByNullParam(Integer id);
+
   //======================================================
 
   @Select("SELECT * FROM blog " +

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -503,7 +503,7 @@ public void addIncompleteResultMap(ResultMapResolver resultMapResolver) {
   }
 
   public MappedStatement getMappedStatement(String id) {
-    return this.getMappedStatement(id, false);
+    return this.getMappedStatement(id, true);
   }
 
   public MappedStatement getMappedStatement(String id, boolean validateIncompleteStatements) {
@@ -547,7 +547,7 @@ public boolean hasMapper(Class<?> type) {
   }
 
   public boolean hasStatement(String statementName) {
-    return hasStatement(statementName, false);
+    return hasStatement(statementName, true);
   }
   
   public boolean hasStatement(String statementName, boolean validateIncompleteStatements) {

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -269,7 +269,7 @@ public MappedStatement addMappedStatement(
     setStatementCache(isSelect, flushCache, useCache, currentCache, statementBuilder);
 
     MappedStatement statement = statementBuilder.build();
-    configuration.addMappedStatement(statement, databaseId);
+    configuration.addMappedStatement(statement);
     return statement;
   }
 

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -139,6 +139,7 @@ private Object getParam(Object[] args) {
       Map<String, Object> param = new HashMap<String, Object>();
       for (int i = 0; i < paramCount; i++) {
         param.put(paramNames.get(i), args[paramPositions.get(i)]);
+        param.put(String.valueOf(i), args[paramPositions.get(i)]); // compatibility with 3.0.x (issue #71)
       }
       return param;
     }
@@ -180,7 +181,7 @@ private void setupMethodSignature() {
           throw new BindingException(method.getName() + " cannot have multiple ResultHandler parameters");
         }
       } else {
-        String paramName = String.valueOf(paramPositions.size());
+        String paramName = "param" + String.valueOf(paramPositions.size() + 1);
         paramName = getParamNameFromAnnotation(i, paramName);
         paramNames.add(paramName);
         paramPositions.add(i);

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -204,6 +204,7 @@ private void createDiscriminatorResultMaps(String resultMapId, Class<?> resultTy
               hasNestedSelect(result) ? nestedSelectId(result) : null,
               null,
               null,
+              null,
               result.typeHandler() == UnknownTypeHandler.class ? null : result.typeHandler(),
               flags);
           resultMappings.add(resultMapping);
@@ -436,6 +437,7 @@ private void applyResults(Result[] results, Class<?> resultType, List<ResultMapp
             hasNestedSelect(result) ? nestedSelectId(result) : null,
             null,
             null,
+            null,
             result.typeHandler() == UnknownTypeHandler.class ? null : result.typeHandler(),
             flags);
         resultMappings.add(resultMapping);
@@ -474,6 +476,7 @@ private void applyConstructorArgs(Arg[] args, Class<?> resultType, List<ResultMa
             nullOrEmpty(arg.select()),
             nullOrEmpty(arg.resultMap()),
             null,
+            null,
             arg.typeHandler() == UnknownTypeHandler.class ? null : arg.typeHandler(),
             flags);
         resultMappings.add(resultMapping);

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -321,11 +321,12 @@ private ResultMapping buildResultMappingFromContext(XNode context, Class<?> resu
     String nestedResultMap = context.getStringAttribute("resultMap",
         processNestedResultMappings(context, Collections.EMPTY_LIST));
     String notNullColumn = context.getStringAttribute("notNullColumn");
+    String columnPrefix = context.getStringAttribute("columnPrefix");
     String typeHandler = context.getStringAttribute("typeHandler");
     Class<?> javaTypeClass = resolveClass(javaType);
     Class<? extends TypeHandler<?>> typeHandlerClass = (Class<? extends TypeHandler<?>>) resolveClass(typeHandler);
     JdbcType jdbcTypeEnum = resolveJdbcType(jdbcType);
-    return builderAssistant.buildResultMapping(resultType, property, column, javaTypeClass, jdbcTypeEnum, nestedSelect, nestedResultMap, notNullColumn, typeHandlerClass, flags);
+    return builderAssistant.buildResultMapping(resultType, property, column, javaTypeClass, jdbcTypeEnum, nestedSelect, nestedResultMap, notNullColumn, columnPrefix, typeHandlerClass, flags);
   }
 
   private String processNestedResultMappings(XNode context, List<ResultMapping> resultMappings) throws Exception {

File: src/test/java/org/apache/ibatis/submitted/valueinmap/ValueInMapTest.java
Patch:
@@ -76,7 +76,7 @@ public void testEncoding2() {
       map.put("column", "id");
       map.put("value", "1");
       
-      int count = sqlSession.selectOne("count", map);
+      Integer count = sqlSession.selectOne("count", map);
       assertTrue(count == 1);
       
     } finally {

File: src/test/java/org/apache/ibatis/submitted/null_with_no_jdbctype/NullWithNoJdbcTypeTest.java
Patch:
@@ -83,7 +83,7 @@ public void shouldFailAddingRowWithNullValueWithDerby() throws Exception {
         n = mapper.insertAuthor(new Author(99999, "barney", "******", "barney@iloveyou.com", null, Section.NEWS));
         fail("Expected exception.");
       } catch (Exception e) {
-        assertTrue(e.getMessage().contains("Error setting null parameter"));
+        assertTrue(e.getMessage().contains("Error setting null"));
       }
       session.rollback();
     } finally {

File: src/main/java/org/apache/ibatis/type/BaseTypeHandler.java
Patch:
@@ -39,7 +39,7 @@ public void setParameter(PreparedStatement ps, int i, T parameter, JdbcType jdbc
         ps.setNull(i, jdbcType.TYPE_CODE);
       } catch (SQLException e) {
         throw new TypeException("Error setting null for parameter #" + i + " with JdbcType " + jdbcType + " . " +
-        		"Try setting a different jdbcTypeForNull configuration propertiy or provide an explicit JdbcType for this parameter. " +
+        		"Try setting a different JdbcType for this parameter or a different jdbcTypeForNull configuration property. " +
         		"Cause: " + e, e);
       }
     } else {

File: src/main/java/org/apache/ibatis/type/BaseTypeHandler.java
Patch:
@@ -38,7 +38,9 @@ public void setParameter(PreparedStatement ps, int i, T parameter, JdbcType jdbc
       try {
         ps.setNull(i, jdbcType.TYPE_CODE);
       } catch (SQLException e) {
-        throw new TypeException("Error setting null parameter with jdbc type " + jdbcType + ". Try setting a different jdbcTypeForNull configuration propertiy or provide an explicit JdbcType for this parameter. Cause: " + e, e);
+        throw new TypeException("Error setting null for parameter #" + i + " with JdbcType " + jdbcType + " . " +
+        		"Try setting a different jdbcTypeForNull configuration propertiy or provide an explicit JdbcType for this parameter. " +
+        		"Cause: " + e, e);
       }
     } else {
       setNonNullParameter(ps, i, parameter, jdbcType);

File: src/main/java/org/apache/ibatis/parsing/PropertyParser.java
Patch:
@@ -34,7 +34,7 @@ public VariableTokenHandler(Properties variables) {
 
     public String handleToken(String content) {
       if (variables != null && variables.containsKey(content)) {
-        return variables == null ? content : variables.getProperty(content);
+        return variables.getProperty(content);
       } else {
         return "${" + content + "}";
       }

File: src/test/java/org/apache/ibatis/submitted/null_with_no_jdbctype/NullWithNoJdbcTypeTest.java
Patch:
@@ -85,7 +85,6 @@ public void shouldFailAddingRowWithNullValueWithDerby() throws Exception {
       } catch (Exception e) {
         assertTrue(e.getMessage().contains("Error setting null parameter"));
       }
-      n = mapper.insertAuthor(new Author(99999, "barney", "******", "barney@iloveyou.com", null, Section.NEWS));
       session.rollback();
     } finally {
       if (session != null)

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.ibatis.session.Configuration;
 import org.apache.ibatis.session.ExecutorType;
 import org.apache.ibatis.transaction.TransactionFactory;
+import org.apache.ibatis.type.JdbcType;
 import org.apache.ibatis.type.TypeHandler;
 
 public class XMLConfigBuilder extends BaseBuilder {
@@ -205,6 +206,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setDefaultListResultHandlerType(resolveClass(props.getProperty("defaultListResultHandlerType")));
       configuration.setDefaultMapResultHandlerType(resolveClass(props.getProperty("defaultMapResultHandlerType")));
       configuration.setClearLocalCacheAfterEachStatement(booleanValueOf(props.getProperty("flushLocalCacheAfterEachStatement"), false));
+      configuration.setJdbcTypeForNull(JdbcType.valueOf(stringValueOf(props.getProperty("jdbcTypeForNull"), "OTHER")));
     }
   }
 

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -204,6 +204,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setSafeRowBoundsEnabled(booleanValueOf(props.getProperty("safeRowBoundsEnabled"), true));
       configuration.setDefaultListResultHandlerType(resolveClass(props.getProperty("defaultListResultHandlerType")));
       configuration.setDefaultMapResultHandlerType(resolveClass(props.getProperty("defaultMapResultHandlerType")));
+      configuration.setClearLocalCacheAfterEachStatement(booleanValueOf(props.getProperty("flushLocalCacheAfterEachStatement"), false));
     }
   }
 

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -202,6 +202,8 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setDefaultStatementTimeout(integerValueOf(props.getProperty("defaultStatementTimeout"), null));
       configuration.setMapUnderscoreToCamelCase(booleanValueOf(props.getProperty("mapUnderscoreToCamelCase"), false));
       configuration.setSafeRowBoundsEnabled(booleanValueOf(props.getProperty("safeRowBoundsEnabled"), true));
+      configuration.setDefaultListResultHandlerType(resolveClass(props.getProperty("defaultListResultHandlerType")));
+      configuration.setDefaultMapResultHandlerType(resolveClass(props.getProperty("defaultMapResultHandlerType")));
     }
   }
 

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSession.java
Patch:
@@ -75,7 +75,8 @@ public <K, V> Map<K, V> selectMap(String statement, Object parameter, String map
 
   public <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {
     final List<?> list = selectList(statement, parameter, rowBounds);
-    final DefaultMapResultHandler<K, V> mapResultHandler = new DefaultMapResultHandler<K, V>(mapKey);
+    final DefaultMapResultHandler<K, V> mapResultHandler = new DefaultMapResultHandler<K, V>(mapKey,
+        configuration.getDefaultMapResultHandlerType());
     final DefaultResultContext context = new DefaultResultContext();
     for (Object o : list) {
       context.nextResultObject(o);

File: src/main/java/org/apache/ibatis/builder/xml/dynamic/ExpressionEvaluator.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import ognl.Ognl;
 import ognl.OgnlException;
 
 import org.apache.ibatis.builder.BuilderException;
@@ -30,7 +29,7 @@ public class ExpressionEvaluator {
 
   public boolean evaluateBoolean(String expression, Object parameterObject) {
     try {
-      Object value = Ognl.getValue(expression, parameterObject);
+      Object value = OgnlCache.getValue(expression, parameterObject);
       if (value instanceof Boolean) return (Boolean) value;
       if (value instanceof Number) return !new BigDecimal(String.valueOf(value)).equals(BigDecimal.ZERO);
       return value != null;
@@ -41,7 +40,7 @@ public boolean evaluateBoolean(String expression, Object parameterObject) {
 
   public Iterable<?> evaluateIterable(String expression, Object parameterObject) {
     try {
-      Object value = Ognl.getValue(expression, parameterObject);
+      Object value = OgnlCache.getValue(expression, parameterObject);
       if (value == null) throw new SqlMapperException("The expression '" + expression + "' evaluated to a null value.");
       if (value instanceof Iterable) return (Iterable<?>) value;
       if (value.getClass().isArray()) {

File: src/test/java/org/apache/ibatis/submitted/force_flush_on_select/PersonMapper.java
Patch:
@@ -22,4 +22,5 @@ public interface PersonMapper {
     public Person selectByIdNoFlush(int id);
     public List<Person> selectAllFlush();
     public List<Person> selectAllNoFlush();
+    int update(Person p);
 }

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSession.java
Patch:
@@ -75,13 +75,12 @@ public <K, V> Map<K, V> selectMap(String statement, Object parameter, String map
 
   public <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {
     final List<?> list = selectList(statement, parameter, rowBounds);
-    final DefaultMapResultHandler mapResultHandler = new DefaultMapResultHandler(mapKey);
+    final DefaultMapResultHandler<K, V> mapResultHandler = new DefaultMapResultHandler<K, V>(mapKey);
     final DefaultResultContext context = new DefaultResultContext();
     for (Object o : list) {
       context.nextResultObject(o);
       mapResultHandler.handleResult(context);
     }
-    @SuppressWarnings( "unchecked" ) // it would throw CCE in any case
     Map<K, V> selectedMap = mapResultHandler.getMappedResults();
     return selectedMap;
   }

File: src/main/java/org/apache/ibatis/mapping/SqlMapperException.java
Patch:
@@ -19,6 +19,8 @@
 
 public class SqlMapperException extends PersistenceException {
 
+  private static final long serialVersionUID = 4428144475952469726L;
+
   public SqlMapperException() {
     super();
   }

File: src/main/java/org/apache/ibatis/parsing/ParsingException.java
Patch:
@@ -18,6 +18,8 @@
 import org.apache.ibatis.exceptions.PersistenceException;
 
 public class ParsingException extends PersistenceException {
+  private static final long serialVersionUID = -176685891441325943L;
+
   public ParsingException() {
     super();
   }

File: src/main/java/org/apache/ibatis/plugin/PluginException.java
Patch:
@@ -19,6 +19,8 @@
 
 public class PluginException extends PersistenceException {
 
+  private static final long serialVersionUID = 8548771664564998595L;
+
   public PluginException() {
     super();
   }

File: src/main/java/org/apache/ibatis/reflection/ReflectionException.java
Patch:
@@ -19,6 +19,8 @@
 
 public class ReflectionException extends PersistenceException {
 
+  private static final long serialVersionUID = 7642570221267566591L;
+
   public ReflectionException() {
     super();
   }

File: src/main/java/org/apache/ibatis/session/SqlSessionException.java
Patch:
@@ -19,6 +19,8 @@
 
 public class SqlSessionException extends PersistenceException {
 
+  private static final long serialVersionUID = 3833184690240265047L;
+
   public SqlSessionException() {
     super();
   }

File: src/main/java/org/apache/ibatis/transaction/TransactionException.java
Patch:
@@ -19,6 +19,8 @@
 
 public class TransactionException extends PersistenceException {
 
+  private static final long serialVersionUID = -433589569461084605L;
+
   public TransactionException() {
     super();
   }

File: src/main/java/org/apache/ibatis/type/TypeException.java
Patch:
@@ -19,6 +19,8 @@
 
 public class TypeException extends PersistenceException {
 
+  private static final long serialVersionUID = 8614420898975117130L;
+
   public TypeException() {
     super();
   }

File: src/main/java/org/apache/ibatis/reflection/property/PropertyCopier.java
Patch:
@@ -19,8 +19,8 @@
 
 public class PropertyCopier {
 
-  public static void copyBeanProperties(Class type, Object sourceBean, Object destinationBean) {
-    Class parent = type;
+  public static void copyBeanProperties(Class<?> type, Object sourceBean, Object destinationBean) {
+    Class<?> parent = type;
     while (parent != null) {
       final Field[] fields = parent.getDeclaredFields();
       for(Field field : fields) {

File: src/main/java/org/apache/ibatis/reflection/wrapper/BeanWrapper.java
Patch:
@@ -67,7 +67,7 @@ public String[] getSetterNames() {
     return metaClass.getSetterNames();
   }
 
-  public Class getSetterType(String name) {
+  public Class<?> getSetterType(String name) {
     PropertyTokenizer prop = new PropertyTokenizer(name);
     if (prop.hasNext()) {
       MetaObject metaValue = metaObject.metaObjectForProperty(prop.getIndexedName());
@@ -81,7 +81,7 @@ public Class getSetterType(String name) {
     }
   }
 
-  public Class getGetterType(String name) {
+  public Class<?> getGetterType(String name) {
     PropertyTokenizer prop = new PropertyTokenizer(name);
     if (prop.hasNext()) {
       MetaObject metaValue = metaObject.metaObjectForProperty(prop.getIndexedName());
@@ -133,7 +133,7 @@ public boolean hasGetter(String name) {
 
   public MetaObject instantiatePropertyValue(String name, PropertyTokenizer prop, ObjectFactory objectFactory) {
     MetaObject metaValue;
-    Class type = getSetterType(prop.getName());
+    Class<?> type = getSetterType(prop.getName());
     try {
       Object newObject = objectFactory.create(type);
       metaValue = MetaObject.forObject(newObject, metaObject.getObjectFactory(), metaObject.getObjectWrapperFactory());

File: src/main/java/org/apache/ibatis/reflection/invoker/GetFieldInvoker.java
Patch:
@@ -29,7 +29,7 @@ public Object invoke(Object target, Object[] args) throws IllegalAccessException
     return field.get(target);
   }
 
-  public Class getType() {
+  public Class<?> getType() {
     return field.getType();
   }
 }

File: src/main/java/org/apache/ibatis/reflection/invoker/Invoker.java
Patch:
@@ -20,5 +20,5 @@
 public interface Invoker {
   Object invoke(Object target, Object[] args) throws IllegalAccessException, InvocationTargetException;
 
-  Class getType();
+  Class<?> getType();
 }

File: src/main/java/org/apache/ibatis/reflection/invoker/MethodInvoker.java
Patch:
@@ -20,7 +20,7 @@
 
 public class MethodInvoker implements Invoker {
 
-  private Class type;
+  private Class<?> type;
   private Method method;
 
   public MethodInvoker(Method method) {
@@ -37,7 +37,7 @@ public Object invoke(Object target, Object[] args) throws IllegalAccessException
     return method.invoke(target, args);
   }
 
-  public Class getType() {
+  public Class<?> getType() {
     return type;
   }
 }

File: src/main/java/org/apache/ibatis/reflection/invoker/SetFieldInvoker.java
Patch:
@@ -30,7 +30,7 @@ public Object invoke(Object target, Object[] args) throws IllegalAccessException
     return null;
   }
 
-  public Class getType() {
+  public Class<?> getType() {
     return field.getType();
   }
 }

File: src/main/java/org/apache/ibatis/mapping/CacheBuilder.java
Patch:
@@ -120,11 +120,11 @@ private Cache setStandardDecorators(Cache cache) {
   private void setCacheProperties(Cache cache) {
     if (properties != null) {
       MetaObject metaCache = MetaObject.forObject(cache);
-      for (Map.Entry entry : properties.entrySet()) {
+      for (Map.Entry<Object, Object> entry : properties.entrySet()) {
         String name = (String) entry.getKey();
         String value = (String) entry.getValue();
         if (metaCache.hasSetter(name)) {
-          Class type = metaCache.getSetterType(name);
+          Class<?> type = metaCache.getSetterType(name);
           if (String.class == type) {
             metaCache.setValue(name, value);
           } else if (int.class == type

File: src/main/java/org/apache/ibatis/executor/statement/PreparedStatementHandler.java
Patch:
@@ -48,11 +48,11 @@ public void batch(Statement statement)
     ps.addBatch();
   }
 
-  public List query(Statement statement, ResultHandler resultHandler)
+  public <E> List<E> query(Statement statement, ResultHandler resultHandler)
       throws SQLException {
     PreparedStatement ps = (PreparedStatement) statement;
     ps.execute();
-    return resultSetHandler.handleResultSets(ps);
+    return resultSetHandler.<E>handleResultSets(ps);
   }
 
   protected Statement instantiateStatement(Connection connection) throws SQLException {

File: src/main/java/org/apache/ibatis/executor/statement/SimpleStatementHandler.java
Patch:
@@ -62,11 +62,11 @@ public void batch(Statement statement)
     statement.addBatch(sql);
   }
 
-  public List query(Statement statement, ResultHandler resultHandler)
+  public <E> List<E> query(Statement statement, ResultHandler resultHandler)
       throws SQLException {
     String sql = boundSql.getSql();
     statement.execute(sql);
-    return resultSetHandler.handleResultSets(statement);
+    return resultSetHandler.<E>handleResultSets(statement);
   }
 
   protected Statement instantiateStatement(Connection connection) throws SQLException {

File: src/main/java/org/apache/ibatis/executor/result/DefaultResultHandler.java
Patch:
@@ -23,13 +23,13 @@
 
 public class DefaultResultHandler implements ResultHandler {
 
-  private final List list = new ArrayList();
+  private final List<Object> list = new ArrayList<Object>();
 
   public void handleResult(ResultContext context) {
     list.add(context.getResultObject());
   }
 
-  public List getResultList() {
+  public List<Object> getResultList() {
     return list;
   }
 

File: src/main/java/org/apache/ibatis/reflection/factory/ObjectFactory.java
Patch:
@@ -20,9 +20,9 @@
 
 public interface ObjectFactory {
 
-  Object create(Class type);
+  <T> T create(Class<T> type);
 
-  Object create(Class type, List<Class> constructorArgTypes, List<Object> constructorArgs);
+  <T> T create(Class<T> type, List<Class<?>> constructorArgTypes, List<Object> constructorArgs);
 
   void setProperties(Properties properties);
 

File: src/main/java/org/apache/ibatis/datasource/pooled/PoolState.java
Patch:
@@ -22,8 +22,8 @@ public class PoolState {
 
   protected PooledDataSource dataSource;
 
-  protected List idleConnections = new ArrayList();
-  protected List activeConnections = new ArrayList();
+  protected List<PooledConnection> idleConnections = new ArrayList<PooledConnection>();
+  protected List<PooledConnection> activeConnections = new ArrayList<PooledConnection>();
   protected long requestCount = 0;
   protected long accumulatedRequestTime = 0;
   protected long accumulatedCheckoutTime = 0;

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java
Patch:
@@ -26,7 +26,7 @@
 class PooledConnection implements InvocationHandler {
 
   private static final String CLOSE = "close";
-  private static final Class[] IFACES = new Class[]{Connection.class};
+  private static final Class<?>[] IFACES = new Class<?>[]{Connection.class};
 
   private int hashCode = 0;
   private PooledDataSource dataSource;

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java
Patch:
@@ -362,6 +362,7 @@ private PooledConnection popConnection(String username, String password)
           if (state.activeConnections.size() < poolMaximumActiveConnections) {
             // Can create new connection
             conn = new PooledConnection(dataSource.getConnection(), this);
+            @SuppressWarnings("unused") //used in logging, if enabled
             Connection realConn = conn.getRealConnection();
             if (log.isDebugEnabled()) {
               log.debug("Created connection " + conn.getRealHashCode() + ".");

File: src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java
Patch:
@@ -182,7 +182,7 @@ private void configureConnection(Connection conn) throws SQLException {
   private synchronized void initializeDriver() {
     if (!driverInitialized) {
       driverInitialized = true;
-      Class driverType;
+      Class<?> driverType;
       try {
         if (driverClassLoader != null) {
           driverType = Class.forName(driver, true, driverClassLoader);

File: src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSourceFactory.java
Patch:
@@ -60,7 +60,7 @@ public DataSource getDataSource() {
 
   private Object convertValue(MetaObject metaDataSource, String propertyName, String value) {
     Object convertedValue = value;
-    Class targetType = metaDataSource.getSetterType(propertyName);
+    Class<?> targetType = metaDataSource.getSetterType(propertyName);
     if (targetType == Integer.class || targetType == int.class) {
       convertedValue = Integer.valueOf(value);
     } else if (targetType == Long.class || targetType == long.class) {

File: src/main/java/org/apache/ibatis/executor/keygen/SelectKeyGenerator.java
Patch:
@@ -62,7 +62,7 @@ private void processGeneratedKeys(Executor executor, MappedStatement ms, Stateme
               // Do not close keyExecutor.
               // The transaction will be closed by parent executor.
               Executor keyExecutor = configuration.newExecutor(executor.getTransaction(), ExecutorType.SIMPLE);
-              List values = keyExecutor.query(keyStatement, parameter, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);
+              List<Object> values = keyExecutor.query(keyStatement, parameter, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);
               if (values.size() > 1) {
                 throw new ExecutorException("Select statement for SelectKeyGenerator returned more than one value.");
               }

File: src/main/java/org/apache/ibatis/executor/resultset/ResultSetHandler.java
Patch:
@@ -22,7 +22,7 @@
 
 public interface ResultSetHandler {
 
-  List handleResultSets(Statement stmt) throws SQLException;
+  <E> List<E> handleResultSets(Statement stmt) throws SQLException;
 
   void handleOutputParameters(CallableStatement cs) throws SQLException;
 

File: src/main/java/org/apache/ibatis/executor/statement/CallableStatementHandler.java
Patch:
@@ -51,11 +51,11 @@ public void batch(Statement statement)
     cs.addBatch();
   }
 
-  public List query(Statement statement, ResultHandler resultHandler)
+  public <E> List<E> query(Statement statement, ResultHandler resultHandler)
       throws SQLException {
     CallableStatement cs = (CallableStatement) statement;
     cs.execute();
-    List resultList = resultSetHandler.handleResultSets(cs);
+    List<E> resultList = resultSetHandler.<E>handleResultSets(cs);
     resultSetHandler.handleOutputParameters(cs);
     return resultList;
   }

File: src/main/java/org/apache/ibatis/executor/statement/RoutingStatementHandler.java
Patch:
@@ -66,8 +66,8 @@ public int update(Statement statement) throws SQLException {
     return delegate.update(statement);
   }
 
-  public List query(Statement statement, ResultHandler resultHandler) throws SQLException {
-    return delegate.query(statement, resultHandler);
+  public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {
+    return delegate.<E>query(statement, resultHandler);
   }
 
   public BoundSql getBoundSql() {

File: src/main/java/org/apache/ibatis/executor/statement/StatementHandler.java
Patch:
@@ -38,7 +38,7 @@ void batch(Statement statement)
   int update(Statement statement)
       throws SQLException;
 
-  List query(Statement statement, ResultHandler resultHandler)
+  <E> List<E> query(Statement statement, ResultHandler resultHandler)
       throws SQLException;
 
   BoundSql getBoundSql();

File: src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java
Patch:
@@ -96,7 +96,7 @@ private ParameterMapping buildParameterMapping(String content) {
           } else if ("resultMap".equals(name)) {
             builder.resultMapId(value);
           } else if ("typeHandler".equals(name)) {
-            builder.typeHandler((TypeHandler) resolveInstance(value));
+            builder.typeHandler((TypeHandler<?>) resolveInstance(value));
           } else if ("jdbcTypeName".equals(name)) {
             builder.jdbcTypeName(value);
           }

File: src/main/java/org/apache/ibatis/type/BaseTypeHandler.java
Patch:
@@ -20,7 +20,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-public abstract class BaseTypeHandler<T> implements TypeHandler<T> {
+public abstract class BaseTypeHandler<T> extends TypeReference<T> implements TypeHandler<T> {
 
   public void setParameter(PreparedStatement ps, int i, T parameter, JdbcType jdbcType)
       throws SQLException {
@@ -58,7 +58,7 @@ public T getResult(ResultSet rs, int columnIndex)
       return result;
     }
   }
-  
+
   public T getResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     T result = getNullableResult(cs, columnIndex);
@@ -77,7 +77,7 @@ public abstract T getNullableResult(ResultSet rs, String columnName)
 
   public abstract T getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException;
-  
+
   public abstract T getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException;
 

File: src/main/java/org/apache/ibatis/parsing/XNode.java
Patch:
@@ -62,6 +62,7 @@ public String getValueBasedIdentifier() {
           current.getStringAttribute("value",
               current.getStringAttribute("property", null)));
       if (value != null) {
+        value = value.replace('.', '_');
         builder.insert(0, "]");
         builder.insert(0,
             value);

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -42,6 +42,7 @@ public int doUpdate(MappedStatement ms, Object parameterObject)
       stmt = statementList.get(last);
     } else {
       Connection connection = transaction.getConnection();
+      connection = wrapConnection(connection);
       stmt = handler.prepare(connection);
       currentSql = sql;
       statementList.add(stmt);
@@ -60,6 +61,7 @@ public List doQuery(MappedStatement ms, Object parameterObject, RowBounds rowBou
       Configuration configuration = ms.getConfiguration();
       StatementHandler handler = configuration.newStatementHandler(this, ms, parameterObject, rowBounds, resultHandler);
       Connection connection = transaction.getConnection();
+      connection = wrapConnection(connection);
       stmt = handler.prepare(connection);
       handler.parameterize(stmt);
       return handler.query(stmt, resultHandler);

File: src/main/java/org/apache/ibatis/executor/ReuseExecutor.java
Patch:
@@ -57,6 +57,7 @@ private Statement prepareStatement(StatementHandler handler)
       stmt = getStatement(sql);
     } else {
       Connection connection = transaction.getConnection();
+      connection = wrapConnection(connection);
       stmt = handler.prepare(connection);
       putStatement(sql, stmt);
     }

File: src/main/java/org/apache/ibatis/executor/SimpleExecutor.java
Patch:
@@ -52,6 +52,7 @@ public List doFlushStatements(boolean isRollback)
   private Statement prepareStatement(StatementHandler handler) throws SQLException {
     Statement stmt;
     Connection connection = transaction.getConnection();
+    connection = wrapConnection(connection);
     stmt = handler.prepare(connection);
     handler.parameterize(stmt);
     return stmt;

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoader.java
Patch:
@@ -83,10 +83,8 @@ private Executor newExecutor() throws SQLException {
       throw new ExecutorException("ResultLoader could not load lazily.  Environment was not configured.");
     DataSource ds = environment.getDataSource();
     if (ds == null) throw new ExecutorException("ResultLoader could not load lazily.  DataSource was not configured.");
-    Connection conn = ds.getConnection();
-    conn = wrapConnection(conn);
     final TransactionFactory transactionFactory = environment.getTransactionFactory();
-    Transaction tx = transactionFactory.newTransaction(conn, false);
+    Transaction tx = transactionFactory.newTransaction(ds, null, false);
     return configuration.newExecutor(tx, ExecutorType.SIMPLE);
   }
 

File: src/main/java/org/apache/ibatis/transaction/Transaction.java
Patch:
@@ -5,7 +5,7 @@
 
 public interface Transaction {
 
-  Connection getConnection();
+  Connection getConnection() throws SQLException;
 
   void commit() throws SQLException;
 

File: src/test/java/com/ibatis/sqlmap/engine/transaction/external/ExternalTransaction.java
Patch:
@@ -47,7 +47,7 @@ private void init() throws SQLException, TransactionException {
         connection.setAutoCommit(defaultAutoCommit);
       }
     }
-    executor = configuration.newExecutor(new JdbcTransaction(connection, false));
+    executor = configuration.newExecutor(new JdbcTransaction(connection));
   }
 
   public void commit(boolean required) throws SQLException, TransactionException {

File: src/test/java/com/ibatis/sqlmap/engine/transaction/jdbc/JdbcTransaction.java
Patch:
@@ -41,7 +41,7 @@ private void init() throws SQLException, TransactionException {
     if (connection.getAutoCommit()) {
       connection.setAutoCommit(false);
     }
-    executor = configuration.newExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(connection, false));
+    executor = configuration.newExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(connection));
   }
 
   public void commit(boolean required) throws SQLException, TransactionException {

File: src/test/java/com/ibatis/sqlmap/engine/transaction/jta/JtaTransaction.java
Patch:
@@ -60,7 +60,7 @@ private void init() throws TransactionException, SQLException {
     if (connection.getAutoCommit()) {
       connection.setAutoCommit(false);
     }
-    executor = configuration.newExecutor(new JdbcTransaction(connection, false));
+    executor = configuration.newExecutor(new JdbcTransaction(connection));
   }
 
   public void commit(boolean required) throws SQLException, TransactionException {

File: src/test/java/com/ibatis/sqlmap/engine/transaction/user/UserProvidedTransaction.java
Patch:
@@ -14,7 +14,7 @@ public class UserProvidedTransaction extends BaseTransaction {
   private Executor executor;
 
   public UserProvidedTransaction(Configuration configuration, Connection connection) {
-    this.executor = configuration.newExecutor(new JdbcTransaction(connection, false));
+    this.executor = configuration.newExecutor(new JdbcTransaction(connection));
   }
 
   public void commit(boolean required) throws SQLException, TransactionException {

File: src/test/java/org/apache/ibatis/submitted/selectkey/AnnotatedMapper.java
Patch:
@@ -12,7 +12,7 @@ public interface AnnotatedMapper {
     int insertTable2(Name name);
     
     @Insert("insert into table2 (name) values(#{name})")
-    @Options(useGeneratedKeys=true, keyProperty="nameId")
+    @Options(useGeneratedKeys=true, keyProperty="nameId,generatedName", keyColumn="ID,NAME_FRED")
     int insertTable2WithOptions(Name name);
     
     @Insert("insert into table3 (id, name) values(#{nameId}, #{name})")

File: src/test/java/org/apache/ibatis/submitted/selectkey/SelectKeyTest.java
Patch:
@@ -120,6 +120,7 @@ public void testAnnotatedInsertTable2WithOptions() {
         int rows = mapper.insertTable2WithOptions(name);
         assertEquals(1, rows);
         assertEquals(22, name.getNameId());
+        assertEquals("barney_fred", name.getGeneratedName());
       } finally {
         sqlSession.close();
       }

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -281,7 +281,8 @@ private void parseStatement(Method method) {
           flushCache,
           useCache,
           keyGenerator,
-          keyProperty);
+          keyProperty,
+          null);
     }
   }
 
@@ -498,7 +499,7 @@ private KeyGenerator handleSelectKeyAnnotation(SelectKey selectKeyAnnotation, St
 
     assistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,
           fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,
-          resultSetTypeEnum, flushCache, useCache, keyGenerator, keyProperty);
+          resultSetTypeEnum, flushCache, useCache, keyGenerator, keyProperty, null);
 
     id = assistant.applyCurrentNamespace(id, false);
 

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -190,11 +190,13 @@ private void environmentsElement(XNode context) throws Exception {
       for (XNode child : context.getChildren()) {
         String id = child.getStringAttribute("id");
         if (isSpecifiedEnvironment(id)) {
+          String databaseId = child.getStringAttribute("databaseId");
           TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
           DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
           Environment.Builder environmentBuilder = new Environment.Builder(id)
               .transactionFactory(txFactory)
-              .dataSource(dsFactory.getDataSource());
+              .dataSource(dsFactory.getDataSource())
+              .databaseId(databaseId);
           configuration.setEnvironment(environmentBuilder.build());
         }
       }

File: src/main/java/org/apache/ibatis/type/TypeHandler.java
Patch:
@@ -13,6 +13,9 @@ public void setParameter(PreparedStatement ps, int i, T parameter, JdbcType jdbc
   public T getResult(ResultSet rs, String columnName)
       throws SQLException;
 
+  public T getResult(ResultSet rs, int columnIndex)
+          throws SQLException;
+  
   public T getResult(CallableStatement cs, int columnIndex)
       throws SQLException;
 

File: src/main/java/org/apache/ibatis/type/EnumTypeHandler.java
Patch:
@@ -15,9 +15,9 @@ public EnumTypeHandler(Class<E> type) {
 
   public void setNonNullParameter(PreparedStatement ps, int i, E parameter, JdbcType jdbcType) throws SQLException {
     if (jdbcType == null) {
-        ps.setString(i, parameter.toString());
+        ps.setString(i, parameter.name());
     } else {
-        ps.setObject(i, parameter.toString(), jdbcType.TYPE_CODE);
+        ps.setObject(i, parameter.name(), jdbcType.TYPE_CODE);
     }
   }
 

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -500,7 +500,7 @@ private KeyGenerator handleSelectKeyAnnotation(SelectKey selectKeyAnnotation, St
           fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,
           resultSetTypeEnum, flushCache, useCache, keyGenerator, keyProperty);
 
-    id = assistant.applyCurrentNamespace(id);
+    id = assistant.applyCurrentNamespace(id, false);
 
     MappedStatement keyStatement = configuration.getMappedStatement(id, false);
     SelectKeyGenerator answer = new SelectKeyGenerator(keyStatement, executeBefore);

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -12,7 +12,6 @@
 import java.util.Properties;
 
 import org.apache.ibatis.builder.BaseBuilder;
-import org.apache.ibatis.builder.BuilderException;
 import org.apache.ibatis.builder.CacheRefResolver;
 import org.apache.ibatis.builder.IncompleteCacheException;
 import org.apache.ibatis.builder.IncompleteResultMapException;
@@ -292,7 +291,7 @@ private Discriminator processDiscriminatorElement(XNode context, Class<?> result
   private void sqlElement(List<XNode> list) throws Exception {
     for (XNode context : list) {
       String id = context.getStringAttribute("id");
-      id = builderAssistant.applyCurrentNamespace(id);
+      id = builderAssistant.applyCurrentNamespace(id, false);
       sqlFragments.put(id, context);
     }
   }

File: src/main/java/org/apache/ibatis/builder/xml/dynamic/TrimSqlNode.java
Patch:
@@ -93,7 +93,7 @@ private void applyPrefix(StringBuilder sql, String trimmedUppercaseSql) {
       if (!prefixApplied) {
         prefixApplied = true;
         for (String toRemove : prefixesToOverride) {
-          if (trimmedUppercaseSql.startsWith(toRemove) || trimmedUppercaseSql.startsWith(toRemove.trim())) {
+          if (trimmedUppercaseSql.startsWith(toRemove)) {
             sql.delete(0, toRemove.trim().length());
             break;
           }

File: src/main/java/org/apache/ibatis/type/ArrayTypeHandler.java
Patch:
@@ -6,7 +6,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-public class ArrayTypeHandler extends BaseTypeHandler {
+public class ArrayTypeHandler extends BaseTypeHandler<Object> {
 
     public ArrayTypeHandler() {
         super();

File: src/main/java/org/apache/ibatis/type/MappedTypes.java
Patch:
@@ -8,5 +8,5 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)
 public @interface MappedTypes {
-	public Class[] value();
+	public Class<?>[] value();
 }

File: src/main/java/org/apache/ibatis/type/ObjectTypeHandler.java
Patch:
@@ -5,7 +5,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-public class ObjectTypeHandler extends BaseTypeHandler {
+public class ObjectTypeHandler extends BaseTypeHandler<Object> {
 
   public void setNonNullParameter(PreparedStatement ps, int i, Object parameter, JdbcType jdbcType)
       throws SQLException {

File: src/main/java/org/apache/ibatis/type/SimpleTypeRegistry.java
Patch:
@@ -6,7 +6,7 @@
 
 public class SimpleTypeRegistry {
 
-  private static final Set SIMPLE_TYPE_SET = new HashSet();
+  private static final Set<Class<?>> SIMPLE_TYPE_SET = new HashSet<Class<?>>();
 
   static {
     SIMPLE_TYPE_SET.add(String.class);
@@ -44,7 +44,7 @@ public class SimpleTypeRegistry {
    * @param clazz The class to check
    * @return True if the class is known
    */
-  public static boolean isSimpleType(Class clazz) {
+  public static boolean isSimpleType(Class<?> clazz) {
     if (SIMPLE_TYPE_SET.contains(clazz)) {
       return true;
     } else if (Collection.class.isAssignableFrom(clazz)) {

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -178,6 +178,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setDefaultExecutorType(ExecutorType.valueOf(stringValueOf(props.getProperty("defaultExecutorType"), "SIMPLE")));
       configuration.setDefaultStatementTimeout(integerValueOf(props.getProperty("defaultStatementTimeout"), null));
       configuration.setMapUnderscoreToCamelCase(booleanValueOf(props.getProperty("mapUnderscoreToCamelCase"), false));
+      configuration.setSafeRowBoundsEnabled(booleanValueOf(props.getProperty("safeRowBoundsEnabled"), true));      
     }
   }
 

File: src/main/java/org/apache/ibatis/executor/resultset/NestedResultSetHandler.java
Patch:
@@ -31,7 +31,9 @@ public NestedResultSetHandler(Executor executor, MappedStatement mappedStatement
     super(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);
     localRowValueCaches = new HashMap<CacheKey, Set<CacheKey>>();
     globalRowValueCache = new HashMap<CacheKey, Object>();
-    ensureNoRowBounds(rowBounds);
+    if (configuration.isSafeRowBoundsEnabled()) {
+      ensureNoRowBounds(rowBounds);
+    }
   }
 
   private void ensureNoRowBounds(RowBounds rowBounds) {

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -269,11 +269,10 @@ protected Object getPropertyMappingValue(ResultSet rs, MetaObject metaResultObje
     return null;
   }
 
-  protected boolean applyAutomaticMappings(ResultSet rs, List<String> unmappedColumnNames, MetaObject metaObject, boolean useCamelCaseMapping) throws SQLException {
+  protected boolean applyAutomaticMappings(ResultSet rs, List<String> unmappedColumnNames, MetaObject metaObject, boolean mapUnderscoreToCamelCase ) throws SQLException {
     boolean foundValues = false;
     for (String columnName : unmappedColumnNames) {
-      final String propertyName = useCamelCaseMapping ? columnName.replace("_", "") : columnName;
-      final String property = metaObject.findProperty(propertyName);
+      final String property = metaObject.findProperty(columnName, mapUnderscoreToCamelCase );
       if (property != null) {
         final Class propertyType = metaObject.getSetterType(property);
         if (typeHandlerRegistry.hasTypeHandler(propertyType)) {

File: src/main/java/org/apache/ibatis/reflection/MetaObject.java
Patch:
@@ -62,8 +62,8 @@ public Object getOriginalObject() {
     return originalObject;
   }
 
-  public String findProperty(String propName) {
-    return objectWrapper.findProperty(propName);
+  public String findProperty(String propName, boolean useCamelCaseMapping) {    
+    return objectWrapper.findProperty(propName, useCamelCaseMapping);
   }
 
   public String[] getGetterNames() {

File: src/main/java/org/apache/ibatis/reflection/wrapper/MapWrapper.java
Patch:
@@ -34,7 +34,7 @@ public void set(PropertyTokenizer prop, Object value) {
     }
   }
 
-  public String findProperty(String name) {
+  public String findProperty(String name, boolean useCamelCaseMapping) {
     return name;
   }
 

File: src/main/java/org/apache/ibatis/reflection/wrapper/ObjectWrapper.java
Patch:
@@ -10,7 +10,7 @@ public interface ObjectWrapper {
 
   void set(PropertyTokenizer prop, Object value);
 
-  String findProperty(String name);
+  String findProperty(String name, boolean useCamelCaseMapping);
 
   String[] getGetterNames();
 

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -177,6 +177,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setUseGeneratedKeys(booleanValueOf(props.getProperty("useGeneratedKeys"), false));
       configuration.setDefaultExecutorType(ExecutorType.valueOf(stringValueOf(props.getProperty("defaultExecutorType"), "SIMPLE")));
       configuration.setDefaultStatementTimeout(integerValueOf(props.getProperty("defaultStatementTimeout"), null));
+      configuration.setMapUnderscoreToCamelCase(booleanValueOf(props.getProperty("mapUnderscoreToCamelCase"), false));
     }
   }
 

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -281,8 +281,7 @@ private void parseStatement(Method method) {
           flushCache,
           useCache,
           keyGenerator,
-          keyProperty,
-          null);
+          keyProperty);
     }
   }
 
@@ -499,7 +498,7 @@ private KeyGenerator handleSelectKeyAnnotation(SelectKey selectKeyAnnotation, St
 
     assistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,
           fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,
-          resultSetTypeEnum, flushCache, useCache, keyGenerator, keyProperty, null);
+          resultSetTypeEnum, flushCache, useCache, keyGenerator, keyProperty);
 
     id = assistant.applyCurrentNamespace(id);
 

File: src/main/java/org/apache/ibatis/builder/xml/dynamic/DynamicContext.java
Patch:
@@ -3,6 +3,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import ognl.OgnlContext;
 import ognl.OgnlException;
 import ognl.OgnlRuntime;
 import ognl.PropertyAccessor;
@@ -13,7 +14,6 @@
 public class DynamicContext {
 
   public static final String PARAMETER_OBJECT_KEY = "_parameter";
-  public static final String ENVIRONMENT_KEY = "_environment";
 
   static {
     OgnlRuntime.setPropertyAccessor(ContextMap.class, new ContextAccessor());
@@ -31,7 +31,6 @@ public DynamicContext(Configuration configuration, Object parameterObject) {
       bindings = new ContextMap(null);
     }
     bindings.put(PARAMETER_OBJECT_KEY, parameterObject);
-    bindings.put(ENVIRONMENT_KEY, configuration.getEnvironment());
   }
 
   public Map<String, Object> getBindings() {

File: src/test/java/com/ibatis/sqlmap/engine/builder/XmlSqlMapConfigParser.java
Patch:
@@ -36,6 +36,7 @@ public XmlSqlMapConfigParser(Reader reader) {
     this.reader = reader;
     this.parser.addNodeletHandler(this);
     this.useStatementNamespaces = false;
+    this.parser.setEntityResolver(new SqlMapEntityResolver());
   }
 
   public XmlSqlMapConfigParser(Reader reader, Properties props) {

File: src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java
Patch:
@@ -18,7 +18,6 @@
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 import org.junit.Test;
 
 public class SPTest {

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -298,10 +298,8 @@ protected void loadMappedAndUnmappedColumnNames(ResultSet rs, ResultMap resultMa
       final String columnName = configuration.isUseColumnLabel() ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i);
       final String upperColumnName = columnName.toUpperCase(Locale.ENGLISH);
       if (mappedColumns.contains(upperColumnName)) {
-        mappedColumnNames.add(upperColumnName);
         mappedColumnNames.add(columnName);
       } else {
-        unmappedColumnNames.add(upperColumnName);
         unmappedColumnNames.add(columnName);
       }
     }

File: src/main/java/org/apache/ibatis/migration/commands/BootstrapCommand.java
Patch:
@@ -5,7 +5,6 @@
 import org.apache.ibatis.migration.MigrationReader;
 
 import java.io.File;
-import java.io.FileReader;
 
 public class BootstrapCommand extends BaseCommand {
 
@@ -23,7 +22,7 @@ public void execute(String... params) {
           printStream.println(horizontalLine("Applying: bootstrap.sql", 80));
           ScriptRunner runner = getScriptRunner();
           try {
-            runner.runScript(new MigrationReader(new FileReader(bootstrap), false, environmentProperties()));
+            runner.runScript(new MigrationReader(scriptFileReader(bootstrap), false, environmentProperties()));
           } finally {
             runner.closeConnection();
           }

File: src/main/java/org/apache/ibatis/migration/commands/DownCommand.java
Patch:
@@ -1,7 +1,6 @@
 package org.apache.ibatis.migration.commands;
 
 import java.io.File;
-import java.io.FileReader;
 import java.sql.SQLException;
 import java.util.Collections;
 import java.util.List;
@@ -29,7 +28,7 @@ public void execute(String... params) {
           printStream.println(horizontalLine("Undoing: " + change.getFilename(), 80));
           ScriptRunner runner = getScriptRunner();
           try {
-            runner.runScript(new MigrationReader(new FileReader(scriptFile(change.getFilename())), true, environmentProperties()));
+            runner.runScript(new MigrationReader(scriptFileReader(scriptFile(change.getFilename())), true, environmentProperties()));
           } finally {
             runner.closeConnection();
           }

File: src/main/java/org/apache/ibatis/migration/commands/PendingCommand.java
Patch:
@@ -6,7 +6,6 @@
 import org.apache.ibatis.migration.MigrationReader;
 
 import java.io.File;
-import java.io.FileReader;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -28,7 +27,7 @@ public void execute(String... params) {
         printStream.println(horizontalLine("Applying: " + change.getFilename(), 80));
         ScriptRunner runner = getScriptRunner();
         try {
-          runner.runScript(new MigrationReader(new FileReader(scriptFile(change.getFilename())), false, environmentProperties()));
+          runner.runScript(new MigrationReader(scriptFileReader(scriptFile(change.getFilename())), false, environmentProperties()));
         } finally {
           runner.closeConnection();
         }

File: src/main/java/org/apache/ibatis/migration/commands/ScriptCommand.java
Patch:
@@ -5,7 +5,6 @@
 import org.apache.ibatis.migration.MigrationReader;
 
 import java.io.File;
-import java.io.FileReader;
 import java.io.IOException;
 import java.math.BigDecimal;
 import java.util.Collections;
@@ -41,8 +40,7 @@ public void execute(String... sparams) {
         if (shouldRun(change, v1, v2)) {
           printStream.println("-- " + change.getFilename());
           File file = scriptFile(change.getFilename());
-          FileReader fileReader = new FileReader(file);
-          MigrationReader migrationReader = new MigrationReader(fileReader, undo, variables);
+          MigrationReader migrationReader = new MigrationReader(scriptFileReader(file), undo, variables);
           char[] cbuf = new char[1024];
           int l;
           while ((l = migrationReader.read(cbuf)) == cbuf.length) {

File: src/main/java/org/apache/ibatis/migration/commands/UpCommand.java
Patch:
@@ -6,7 +6,6 @@
 import org.apache.ibatis.migration.MigrationReader;
 
 import java.io.File;
-import java.io.FileReader;
 import java.util.List;
 
 public class UpCommand extends BaseCommand {
@@ -35,7 +34,7 @@ public void execute(String... params) {
           printStream.println(horizontalLine("Applying: " + change.getFilename(), 80));
           ScriptRunner runner = getScriptRunner();
           try {
-            runner.runScript(new MigrationReader(new FileReader(scriptFile(change.getFilename())), false, environmentProperties()));
+            runner.runScript(new MigrationReader(scriptFileReader(scriptFile(change.getFilename())), false, environmentProperties()));
           } finally {
             runner.closeConnection();
           }

File: src/test/java/org/apache/ibatis/submitted/multidb/MultiDbTest.java
Patch:
@@ -3,6 +3,7 @@
 import static org.junit.Assert.assertEquals;
 
 import java.io.Reader;
+import java.nio.charset.Charset;
 import java.sql.Connection;
 import java.sql.DriverManager;
 
@@ -30,8 +31,6 @@ public static void setUp() throws Exception {
       Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/multidb/CreateDB.sql");
 
       ScriptRunner runner = new ScriptRunner(conn);
-      // make sure that the SQL file has been saved in UTF-8!
-      runner.setCharacterSetName("UTF-8");
       runner.setLogWriter(null);
       runner.setErrorLogWriter(null);
       runner.runScript(reader);

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -231,7 +231,6 @@ private ResultMap resultMapElement(XNode resultMapNode, List<ResultMapping> addi
         resultMapNode.getStringAttribute("ofType",
             resultMapNode.getStringAttribute("resultType",
                 resultMapNode.getStringAttribute("javaType"))));
-    String notNullColumn = resultMapNode.getStringAttribute("notNullColumn");
     String extend = resultMapNode.getStringAttribute("extends");
     Class<?> typeClass = resolveClass(type);
     Discriminator discriminator = null;
@@ -251,7 +250,7 @@ private ResultMap resultMapElement(XNode resultMapNode, List<ResultMapping> addi
         resultMappings.add(buildResultMappingFromContext(resultChild, typeClass, flags));
       }
     }
-    ResultMapResolver resultMapResolver = new ResultMapResolver(builderAssistant, id, typeClass, extend, discriminator, notNullColumn, resultMappings);
+    ResultMapResolver resultMapResolver = new ResultMapResolver(builderAssistant, id, typeClass, extend, discriminator, resultMappings);
     try {
       return resultMapResolver.resolve();
     } catch (IncompleteResultMapException e) {
@@ -306,11 +305,12 @@ private ResultMapping buildResultMappingFromContext(XNode context, Class<?> resu
     String nestedSelect = context.getStringAttribute("select");
     String nestedResultMap = context.getStringAttribute("resultMap",
         processNestedResultMappings(context, Collections.EMPTY_LIST));
+    String notNullColumn = context.getStringAttribute("notNullColumn");
     String typeHandler = context.getStringAttribute("typeHandler");
     Class<?> javaTypeClass = resolveClass(javaType);
     Class<? extends TypeHandler> typeHandlerClass = (Class<? extends TypeHandler>) resolveClass(typeHandler);
     JdbcType jdbcTypeEnum = resolveJdbcType(jdbcType);
-    return builderAssistant.buildResultMapping(resultType, property, column, javaTypeClass, jdbcTypeEnum, nestedSelect, nestedResultMap, typeHandlerClass, flags);
+    return builderAssistant.buildResultMapping(resultType, property, column, javaTypeClass, jdbcTypeEnum, nestedSelect, nestedResultMap, notNullColumn, typeHandlerClass, flags);
   }
 
   private String processNestedResultMappings(XNode context, List<ResultMapping> resultMappings) throws Exception {

File: src/main/java/org/apache/ibatis/executor/resultset/NestedResultSetHandler.java
Patch:
@@ -123,7 +123,7 @@ private boolean applyNestedResultMappings(ResultSet rs, ResultMap resultMap, Met
           final boolean knownValue = localRowValueCache.contains(rowKey);
           localRowValueCache.add(rowKey);
           Object rowValue = getRowValue(rs, nestedResultMap, rowKey);
-          Set<String> notNullColumns = nestedResultMap.getNotNullColumns();
+          Set<String> notNullColumns = resultMapping.getNotNullColumns();
           boolean anyNotNullColumnIsNotNull = true;
           if (notNullColumns != null && !notNullColumns.isEmpty()) {
         	  anyNotNullColumnIsNotNull = false;

File: src/test/java/org/apache/ibatis/submitted/not_null_column/Child.java
Patch:
@@ -1,6 +1,6 @@
 package org.apache.ibatis.submitted.not_null_column;
 
-public class Child {
+public class Child extends Base {
     private Integer id;
     private Integer fatherId;
     private String name;

File: src/test/java/org/apache/ibatis/submitted/not_null_column/Father.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.List;
 
-public class Father {
+public class Father extends Base {
     private Integer id;
     private String name;
     private List<Child> children;

File: src/test/java/org/apache/ibatis/submitted/not_null_column/FatherMapper.java
Patch:
@@ -4,6 +4,8 @@ public interface FatherMapper
 {
 	public Father selectByIdNoFid(Integer id);
     public Father selectByIdFid(Integer id);
+    public Father selectByIdWithInternalResultMap(Integer id);
+    public Father selectByIdWithRefResultMap(Integer id);
     public Father selectByIdFidMultipleNullColumns(Integer id);
     public Father selectByIdFidMultipleNullColumnsAndBrackets(Integer id);
     public Father selectByIdFidWorkaround(Integer id);

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -131,6 +131,9 @@ public ResultMap addResultMap(
 
     ResultMap.Builder resultMapBuilder = new ResultMap.Builder(configuration, id, type, resultMappings);
     if (extend != null) {
+      if (!configuration.hasResultMap(extend)) {
+        throw new IncompleteResultMapException("Could not find a parent resultmap with id '" + extend + "'");
+      }
       ResultMap resultMap = configuration.getResultMap(extend);
       List<ResultMapping> extendedResultMappings = new ArrayList<ResultMapping>(resultMap.getResultMappings());
       extendedResultMappings.removeAll(resultMappings);

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -216,6 +216,8 @@ private void databaseElement(XNode context, Environment.Builder builder) throws
         builder.databaseId(id);
       } else if (type != null) {
         DatabaseIdProvider databaseIdProvider = (DatabaseIdProvider) resolveClass(type).newInstance();
+        Properties props = context.getChildrenAsProperties();
+        databaseIdProvider.setProperties(props);
         builder.databaseIdProvider(databaseIdProvider);
       }
     }

File: src/main/java/org/apache/ibatis/mapping/DefaultDatabaseIdProvider.java
Patch:
@@ -36,11 +36,10 @@ public void setProperties(Properties p) {
   
   private String getDatabaseName(DataSource dataSource) throws SQLException {
     String productName = getDatabaseProductName(dataSource);
-    String databaseName = null;
     if (this.properties != null) {
       return this.properties.getProperty(productName);
     }
-    return databaseName;
+    return productName;
   }
 
   private String getDatabaseProductName(DataSource dataSource) throws SQLException {

File: src/test/java/org/apache/ibatis/submitted/multidb/ProviderTest.java
Patch:
@@ -33,6 +33,6 @@ public void shouldUseProvider() throws Exception {
     Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/multidb/ProviderConfig.xml");
     DefaultSqlSessionFactory sqlSessionFactory = (DefaultSqlSessionFactory) new SqlSessionFactoryBuilder().build(reader);
     Configuration c = sqlSessionFactory.getConfiguration();
-    assertEquals("discovered", c.getEnvironment().getDatabaseId());
+    assertEquals("translated", c.getEnvironment().getDatabaseId());
   }
 }

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -280,7 +280,8 @@ private void parseStatement(Method method) {
           flushCache,
           useCache,
           keyGenerator,
-          keyProperty);
+          keyProperty,
+          null);
     }
   }
 
@@ -491,7 +492,7 @@ private KeyGenerator handleSelectKeyAnnotation(SelectKey selectKeyAnnotation, St
 
     assistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,
           fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,
-          resultSetTypeEnum, flushCache, useCache, keyGenerator, keyProperty);
+          resultSetTypeEnum, flushCache, useCache, keyGenerator, keyProperty, null);
 
     id = assistant.applyCurrentNamespace(id);
 

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -188,11 +188,13 @@ private void environmentsElement(XNode context) throws Exception {
       for (XNode child : context.getChildren()) {
         String id = child.getStringAttribute("id");
         if (isSpecifiedEnvironment(id)) {
+          String databaseId = child.getStringAttribute("databaseId");
           TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
           DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
           Environment.Builder environmentBuilder = new Environment.Builder(id)
               .transactionFactory(txFactory)
-              .dataSource(dsFactory.getDataSource());
+              .dataSource(dsFactory.getDataSource())
+              .databaseId(databaseId);
           configuration.setEnvironment(environmentBuilder.build());
         }
       }

File: src/main/java/org/apache/ibatis/builder/xml/dynamic/DynamicContext.java
Patch:
@@ -3,7 +3,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import ognl.OgnlContext;
 import ognl.OgnlException;
 import ognl.OgnlRuntime;
 import ognl.PropertyAccessor;
@@ -14,6 +13,7 @@
 public class DynamicContext {
 
   public static final String PARAMETER_OBJECT_KEY = "_parameter";
+  public static final String ENVIRONMENT_KEY = "_environment";
 
   static {
     OgnlRuntime.setPropertyAccessor(ContextMap.class, new ContextAccessor());
@@ -31,6 +31,7 @@ public DynamicContext(Configuration configuration, Object parameterObject) {
       bindings = new ContextMap(null);
     }
     bindings.put(PARAMETER_OBJECT_KEY, parameterObject);
+    bindings.put(ENVIRONMENT_KEY, configuration.getEnvironment());
   }
 
   public Map<String, Object> getBindings() {

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -163,7 +163,7 @@ private void applyResultMap(String resultMapId, Class<?> returnType, Arg[] args,
     applyConstructorArgs(args, returnType, resultMappings);
     applyResults(results, returnType, resultMappings);
     Discriminator disc = applyDiscriminator(resultMapId, returnType, discriminator);
-    assistant.addResultMap(resultMapId, returnType, null, disc, resultMappings);
+    assistant.addResultMap(resultMapId, returnType, null, disc, null, resultMappings);
     createDiscriminatorResultMaps(resultMapId, returnType, discriminator);
   }
 
@@ -191,7 +191,7 @@ private void createDiscriminatorResultMaps(String resultMapId, Class<?> resultTy
               flags);
           resultMappings.add(resultMapping);
         }
-        assistant.addResultMap(caseResultMapId, type, resultMapId, null, resultMappings);
+        assistant.addResultMap(caseResultMapId, type, resultMapId, null, null, resultMappings);
       }
     }
   }

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -209,6 +209,7 @@ private ResultMap resultMapElement(XNode resultMapNode, List<ResultMapping> addi
         resultMapNode.getStringAttribute("ofType",
             resultMapNode.getStringAttribute("resultType",
                 resultMapNode.getStringAttribute("javaType"))));
+    String notNullColumn = resultMapNode.getStringAttribute("notNullColumn");
     String extend = resultMapNode.getStringAttribute("extends");
     Class<?> typeClass = resolveClass(type);
     Discriminator discriminator = null;
@@ -228,7 +229,7 @@ private ResultMap resultMapElement(XNode resultMapNode, List<ResultMapping> addi
         resultMappings.add(buildResultMappingFromContext(resultChild, typeClass, flags));
       }
     }
-    return builderAssistant.addResultMap(id, typeClass, extend, discriminator, resultMappings);
+    return builderAssistant.addResultMap(id, typeClass, extend, discriminator, notNullColumn, resultMappings);
   }
 
   private void processConstructorElement(XNode resultChild, Class<?> resultType, List<ResultMapping> resultMappings) throws Exception {

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -131,7 +131,9 @@ public ResultMap addResultMap(
     ResultMap.Builder resultMapBuilder = new ResultMap.Builder(configuration, id, type, resultMappings);
     if (extend != null) {
       ResultMap resultMap = configuration.getResultMap(extend);
-      resultMappings.addAll(resultMap.getResultMappings());
+      List<ResultMapping> extendedResultMappings = new ArrayList<ResultMapping>(resultMap.getResultMappings());
+      extendedResultMappings.removeAll(resultMappings);
+      resultMappings.addAll(extendedResultMappings);
     }
     resultMapBuilder.discriminator(discriminator);
     ResultMap resultMap = resultMapBuilder.build();

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -179,7 +179,7 @@ public void rollback(boolean required) throws SQLException {
     if (!closed) {
       try {
         clearLocalCache();
-        flushStatements(false);
+        flushStatements(true);
       } finally {
         if (required) {
           transaction.rollback();

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -105,7 +105,7 @@ public List query(MappedStatement ms, Object parameter, RowBounds rowBounds, Res
     try {
       queryStack++;
       CacheKey key = createCacheKey(ms, parameter, rowBounds);
-      list = (List) localCache.getObject(key);
+      list = resultHandler == null ? (List) localCache.getObject(key) : null;
       if (list != null) {
         handleLocallyCachedOutputParameters(ms, key, parameter);
       } else {

File: src/main/java/org/apache/ibatis/executor/CachingExecutor.java
Patch:
@@ -51,7 +51,7 @@ public List query(MappedStatement ms, Object parameterObject, RowBounds rowBound
         flushCacheIfRequired(ms);
         cache.getReadWriteLock().readLock().lock();
         try {
-          if (ms.isUseCache()) {
+          if (ms.isUseCache() && resultHandler == null) {
             CacheKey key = createCacheKey(ms, parameterObject, rowBounds);
             final List cachedList = (List) cache.getObject(key);
             if (cachedList != null) {

File: src/test/java/org/apache/ibatis/submitted/encoding/EncodingTest.java
Patch:
@@ -24,7 +24,7 @@ public static void setUp() throws Exception {
 
     try {
       Class.forName("org.hsqldb.jdbcDriver");
-      conn = DriverManager.getConnection("jdbc:hsqldb:mem:gname", "sa", "");
+      conn = DriverManager.getConnection("jdbc:hsqldb:mem:encoding", "sa", "");
 
       Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/encoding/CreateDB.sql");
 

File: src/main/java/org/apache/ibatis/jdbc/SelectBuilder.java
Patch:
@@ -87,7 +87,7 @@ public static String SQL() {
       }
       
       selectClause(builder, "FROM", sql().from, "", "", ", ");
-      selectClause(builder, "JOIN", sql().join, "", "", "JOIN");
+      selectClause(builder, "JOIN", sql().join, "", "", "\nJOIN ");
       selectClause(builder, "INNER JOIN", sql().innerJoin, "", "", "\nINNER JOIN ");
       selectClause(builder, "OUTER JOIN", sql().outerJoin, "", "", "\nOUTER JOIN ");
       selectClause(builder, "LEFT OUTER JOIN", sql().leftOuterJoin, "", "", "\nLEFT OUTER JOIN ");

File: src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java
Patch:
@@ -172,7 +172,7 @@ private String selectSQL() {
       }
 
       sqlClause(builder, "FROM", tables, "", "", ", ");
-      sqlClause(builder, "JOIN", join, "", "", "JOIN");
+      sqlClause(builder, "JOIN", join, "", "", "\nJOIN ");
       sqlClause(builder, "INNER JOIN", innerJoin, "", "", "\nINNER JOIN ");
       sqlClause(builder, "OUTER JOIN", outerJoin, "", "", "\nOUTER JOIN ");
       sqlClause(builder, "LEFT OUTER JOIN", leftOuterJoin, "", "", "\nLEFT OUTER JOIN ");

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -222,6 +222,7 @@ protected Object getRowValue(ResultSet rs, ResultMap resultMap, CacheKey rowKey)
         foundValues = applyAutomaticMappings(rs, unmappedColumnNames, metaObject) || foundValues;
       }
       foundValues = applyPropertyMappings(rs, resultMap, mappedColumnNames, metaObject, lazyLoader) || foundValues;
+      foundValues = (lazyLoader != null && lazyLoader.size() > 0) || foundValues;
       resultObject = foundValues ? resultObject : null;
       return resultObject;
     }

File: src/test/java/org/apache/ibatis/binding/WrongNamespacesTest.java
Patch:
@@ -1,18 +1,17 @@
 package org.apache.ibatis.binding;
 
-import org.apache.ibatis.builder.BuilderException;
 import org.apache.ibatis.session.Configuration;
 import org.junit.Test;
 
 public class WrongNamespacesTest {
 
-  @Test(expected=BuilderException.class)
+  @Test(expected=RuntimeException.class)
   public void shouldFailForWrongNamespace() throws Exception {
     Configuration configuration = new Configuration();
     configuration.addMapper(WrongNamespaceMapper.class);
   }
 
-  @Test(expected=BuilderException.class)
+  @Test(expected=RuntimeException.class)
   public void shouldFailForMissingNamespace() throws Exception {
     Configuration configuration = new Configuration();
     configuration.addMapper(MissingNamespaceMapper.class);

File: src/main/java/org/apache/ibatis/executor/loader/ResultObjectProxy.java
Patch:
@@ -122,9 +122,9 @@ public Object intercept(Object enhanced, Method method, Object[] args, MethodPro
                 }
               }
             }
-            return methodProxy.invokeSuper(enhanced, args);
           }
         }
+        return methodProxy.invokeSuper(enhanced, args);
       } catch (Throwable t) {
         throw ExceptionUtil.unwrapThrowable(t);
       }

File: src/main/java/org/apache/ibatis/reflection/ExceptionUtil.java
Patch:
@@ -9,9 +9,9 @@ public static Throwable unwrapThrowable(Throwable wrapped) {
     Throwable unwrapped = wrapped;
     while (true) {
       if (unwrapped instanceof InvocationTargetException) {
-        unwrapped = ((InvocationTargetException) wrapped).getTargetException();
+        unwrapped = ((InvocationTargetException) unwrapped).getTargetException();
       } else if (unwrapped instanceof UndeclaredThrowableException) {
-        unwrapped = ((UndeclaredThrowableException) wrapped).getUndeclaredThrowable();
+        unwrapped = ((UndeclaredThrowableException) unwrapped).getUndeclaredThrowable();
       } else {
         return unwrapped;
       }

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -32,13 +32,12 @@ public String getCurrentNamespace() {
 
   public void setCurrentNamespace(String currentNamespace) {
     if (currentNamespace == null) {
-      throw new BuilderException(
-          "The mapper element requires a namespace attribute to be specified.");
+      throw new BuilderException("The mapper element requires a namespace attribute to be specified.");
     }
 
     if (this.currentNamespace != null && !this.currentNamespace.equals(currentNamespace)) {
       throw new BuilderException("Wrong namespace. Expected '"
-          + this.currentNamespace + "' but found '" + currentNamespace + "'");
+          + this.currentNamespace + "' but found '" + currentNamespace + "'.");
     }
 
     this.currentNamespace = currentNamespace;

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoader.java
Patch:
@@ -12,7 +12,6 @@
 import org.apache.ibatis.session.RowBounds;
 import org.apache.ibatis.transaction.Transaction;
 import org.apache.ibatis.transaction.TransactionFactory;
-import org.apache.ibatis.transaction.jdbc.JdbcTransaction;
 
 import javax.sql.DataSource;
 import java.sql.Connection;

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/ShortNameTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.Test;
 
 public class ShortNameTest {
-    @Test
+    @Test(expected = IllegalArgumentException.class)
     public void getStatementByShortName() throws Exception {
         Configuration configuration = getConfiguration();
         // statement can be referenced by its short name.

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoader.java
Patch:
@@ -11,6 +11,7 @@
 import org.apache.ibatis.session.ExecutorType;
 import org.apache.ibatis.session.RowBounds;
 import org.apache.ibatis.transaction.Transaction;
+import org.apache.ibatis.transaction.TransactionFactory;
 import org.apache.ibatis.transaction.jdbc.JdbcTransaction;
 
 import javax.sql.DataSource;
@@ -85,7 +86,8 @@ private Executor newExecutor() throws SQLException {
     if (ds == null) throw new ExecutorException("ResultLoader could not load lazily.  DataSource was not configured.");
     Connection conn = ds.getConnection();
     conn = wrapConnection(conn);
-    Transaction tx = new JdbcTransaction(conn, false);
+    final TransactionFactory transactionFactory = environment.getTransactionFactory();
+    Transaction tx = transactionFactory.newTransaction(conn, false);
     return configuration.newExecutor(tx, ExecutorType.SIMPLE);
   }
 

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSessionFactory.java
Patch:
@@ -78,7 +78,7 @@ private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionI
       Transaction tx = transactionFactory.newTransaction(connection, autoCommit);
       Executor executor = configuration.newExecutor(tx, execType);
       return new DefaultSqlSession(configuration, executor, autoCommit);
-    } catch (SQLException e) {
+    } catch (Exception e) {
       closeConnection(connection);
       throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
     } finally {

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSession.java
Patch:
@@ -165,8 +165,6 @@ public void close() {
     try {
       executor.close(isCommitOrRollbackRequired(false));
       dirty = false;
-    } catch (Exception e) {
-      throw ExceptionFactory.wrapException("Error closing transaction.  Cause: " + e, e);
     } finally {
       ErrorContext.instance().reset();
     }

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -89,7 +89,9 @@ public MapperAnnotationBuilder(Configuration configuration, Class<?> type) {
   public void parse() {
     String namespace = type.getName();
     assistant.setCurrentNamespace(namespace);
-    loadXmlResource(); // will load if not already loaded
+    if (!configuration.isResourceLoaded(namespace)) {
+      loadXmlResource();
+    }
     parseCache();
     parseCacheRef();
     Method[] methods = type.getMethods();

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -70,7 +70,7 @@ public Object execute(Object[] args) {
         result = sqlSession.selectOne(commandName, param);
       }
     } else {
-      throw new BindingException("Unkown execution method for: " + commandName);
+      throw new BindingException("Unknown execution method for: " + commandName);
     }
     return result;
   }

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -330,7 +330,7 @@ private List<ResultMapping> parseCompositeColumnName(String columnName) {
         while (parser.hasMoreTokens()) {
           String property = parser.nextToken();
           String column = parser.nextToken();
-          ResultMapping.Builder complexBuilder = new ResultMapping.Builder(configuration, property, column, configuration.getTypeHandlerRegistry().getUnkownTypeHandler());
+          ResultMapping.Builder complexBuilder = new ResultMapping.Builder(configuration, property, column, configuration.getTypeHandlerRegistry().getUnknownTypeHandler());
           composites.add(complexBuilder.build());
         }
       }

File: src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSourceFactory.java
Patch:
@@ -31,7 +31,7 @@ public void setProperties(Properties properties) {
         Object convertedValue = convertValue(metaDataSource, propertyName, value);
         metaDataSource.setValue(propertyName, convertedValue);
       } else {
-        throw new DataSourceException("Unkown DataSource property: " + propertyName);
+        throw new DataSourceException("Unknown DataSource property: " + propertyName);
       }
     }
     if (driverProperties.size() > 0) {

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -389,7 +389,7 @@ protected Object prepareSimpleKeyParameter(ResultSet rs, ResultMapping resultMap
     if (typeHandlerRegistry.hasTypeHandler(parameterType)) {
       typeHandler = typeHandlerRegistry.getTypeHandler(parameterType);
     } else {
-      typeHandler = typeHandlerRegistry.getUnkownTypeHandler();
+      typeHandler = typeHandlerRegistry.getUnknownTypeHandler();
     }
     return typeHandler.getResult(rs, resultMapping.getColumn());
   }

File: src/main/java/org/apache/ibatis/migration/CommandLine.java
Patch:
@@ -122,7 +122,7 @@ private void runCommand() {
         command = match;
         runCommand();
       } else {
-        throw new MigrationException("Attempt to execute unkown command: " + command);
+        throw new MigrationException("Attempt to execute unknown command: " + command);
       }
     }
   }

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -135,7 +135,7 @@ public TypeHandler getTypeHandler(Class<?> type, JdbcType jdbcType) {
     return handler;
   }
 
-  public TypeHandler getUnkownTypeHandler() {
+  public TypeHandler getUnknownTypeHandler() {
     return UNKNOWN_TYPE_HANDLER;
   }
 

File: src/test/java/com/ibatis/sqlmap/engine/builder/XmlSqlMapParser.java
Patch:
@@ -328,7 +328,7 @@ public void sqlMapresultMapresult(XNode context) throws Exception {
           typeHandler = config.getTypeHandlerRegistry().getTypeHandler(resultType);
         }
       } else {
-        typeHandler = config.getTypeHandlerRegistry().getUnkownTypeHandler();
+        typeHandler = config.getTypeHandlerRegistry().getUnknownTypeHandler();
       }
     }
 
@@ -360,7 +360,7 @@ private List<ResultMapping> parseCompositeColumnName(String columnName) {
         while (parser.hasMoreTokens()) {
           String property = parser.nextToken();
           String column = parser.nextToken();
-          ResultMapping.Builder complexBuilder = new ResultMapping.Builder(config, property, column, config.getTypeHandlerRegistry().getUnkownTypeHandler());
+          ResultMapping.Builder complexBuilder = new ResultMapping.Builder(config, property, column, config.getTypeHandlerRegistry().getUnknownTypeHandler());
           composites.add(complexBuilder.build());
         }
       }
@@ -438,7 +438,7 @@ public void sqlMapparameterMapparameter(XNode context) throws Exception {
           typeHandler = config.getTypeHandlerRegistry().getTypeHandler(paramType);
         }
       } else {
-        typeHandler = config.getTypeHandlerRegistry().getUnkownTypeHandler();
+        typeHandler = config.getTypeHandlerRegistry().getUnknownTypeHandler();
       }
     }
 

File: src/test/java/com/ibatis/sqlmap/engine/builder/XmlSqlStatementParser.java
Patch:
@@ -205,7 +205,7 @@ private void buildSelectKeyStatement(String parentId, XNode context, boolean run
 
     final boolean runStatementFirst = "post".equalsIgnoreCase(context.getStringAttribute("type", runStatementFirstParam ? "post" : "pre"));
     final String keyStatementId = SqlMapSessionImpl.selectKeyIdFor(parentId);
-    TypeHandler typeHandler = configuration.getTypeHandlerRegistry().getUnkownTypeHandler();
+    TypeHandler typeHandler = configuration.getTypeHandlerRegistry().getUnknownTypeHandler();
     if (resultClassName != null) {
       final Class resultClass = configuration.getTypeAliasRegistry().resolveAlias(resultClassName);
       typeHandler = configuration.getTypeHandlerRegistry().getTypeHandler(resultClass);

File: src/test/java/org/apache/ibatis/type/TypeHandlerRegistryTest.java
Patch:
@@ -18,7 +18,7 @@ public void shouldRegisterAndRetrieveTypeHandler() {
     assertFalse(typeHandlerRegistry.hasTypeHandler(RichType.class));
     assertTrue(typeHandlerRegistry.hasTypeHandler(String.class, JdbcType.LONGVARCHAR));
     assertTrue(typeHandlerRegistry.hasTypeHandler(String.class, JdbcType.INTEGER));
-    assertTrue(typeHandlerRegistry.getUnkownTypeHandler() instanceof UnknownTypeHandler);
+    assertTrue(typeHandlerRegistry.getUnknownTypeHandler() instanceof UnknownTypeHandler);
   }
 
 }

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleCrossIncludeTest.java
Patch:
@@ -41,7 +41,7 @@ public void testMappedStatementCache() throws Exception {
     configReader.close();
 
     Configuration configuration = sqlSessionFactory.getConfiguration();
-    configuration.buildAllStatements();
+    configuration.getMappedStatementNames();
     
     MappedStatement selectPetStatement = configuration.getMappedStatement("org.apache.ibatis.submitted.xml_external_ref.MultipleCrossIncludePetMapper.select");
     MappedStatement selectPersonStatement = configuration.getMappedStatement("org.apache.ibatis.submitted.xml_external_ref.MultipleCrossIncludePersonMapper.select");

File: src/main/java/org/apache/ibatis/annotations/Options.java
Patch:
@@ -26,4 +26,6 @@
   public abstract boolean useGeneratedKeys() default false;
 
   public abstract String keyProperty() default "id";
+  
+  public abstract String keyColumn() default ""; 
 }

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -233,9 +233,9 @@ private void parseStatement(Method method) {
             keyProperty = selectKey.keyProperty();
         } else {
           if (options == null) {
-              keyGenerator = configuration.isUseGeneratedKeys() ? new Jdbc3KeyGenerator() : new NoKeyGenerator();
+              keyGenerator = configuration.isUseGeneratedKeys() ? new Jdbc3KeyGenerator(null) : new NoKeyGenerator();
           } else {
-              keyGenerator = options.useGeneratedKeys() ? new Jdbc3KeyGenerator() : new NoKeyGenerator();
+              keyGenerator = options.useGeneratedKeys() ? new Jdbc3KeyGenerator(options.keyColumn()) : new NoKeyGenerator();
               keyProperty = options.keyProperty();
           }
         }

File: src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java
Patch:
@@ -58,7 +58,7 @@ public void parseStatementNode(XNode context) {
     } else {
       keyGenerator = context.getBooleanAttribute("useGeneratedKeys",
           configuration.isUseGeneratedKeys() && SqlCommandType.INSERT.equals(sqlCommandType))
-          ? new Jdbc3KeyGenerator() : new NoKeyGenerator();
+          ? new Jdbc3KeyGenerator(context.getStringAttribute("keyColumn", null)) : new NoKeyGenerator();
     }
 
     builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,

File: src/main/java/org/apache/ibatis/mapping/MappedStatement.java
Patch:
@@ -46,7 +46,7 @@ public Builder(Configuration configuration, String id, SqlSource sqlSource, SqlC
       mappedStatement.timeout = configuration.getDefaultStatementTimeout();
       mappedStatement.sqlCommandType = sqlCommandType;
       mappedStatement.keyGenerator = configuration.isUseGeneratedKeys()
-          && SqlCommandType.INSERT.equals(sqlCommandType) ? new Jdbc3KeyGenerator() : new NoKeyGenerator();
+          && SqlCommandType.INSERT.equals(sqlCommandType) ? new Jdbc3KeyGenerator(null) : new NoKeyGenerator();
     }
 
     public Builder resource(String resource) {

File: src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java
Patch:
@@ -67,7 +67,7 @@ public static MappedStatement prepareInsertAuthorMappedStatementWithAutoKey(fina
               }
             }).build())
         .cache(authorCache)
-        .keyGenerator(new Jdbc3KeyGenerator())
+        .keyGenerator(new Jdbc3KeyGenerator(null))
         .keyProperty("id")
         .build();
     return ms;

File: src/main/java/org/apache/ibatis/builder/BaseBuilder.java
Patch:
@@ -13,6 +13,9 @@ public abstract class BaseBuilder {
   protected final TypeHandlerRegistry typeHandlerRegistry;
 
   public BaseBuilder(Configuration configuration) {
+    if (configuration == null) {
+      throw new BuilderException("Configuration parameter cannot be null");
+    }
     this.configuration = configuration;
     this.typeAliasRegistry = this.configuration.getTypeAliasRegistry();
     this.typeHandlerRegistry = this.configuration.getTypeHandlerRegistry();

File: src/main/java/org/apache/ibatis/executor/ReuseExecutor.java
Patch:
@@ -39,7 +39,7 @@ public List doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, R
     return handler.query(stmt, resultHandler);
   }
 
-  public List doFlushStatements()
+  public List doFlushStatements(boolean isRollback)
       throws SQLException {
     for (Statement stmt : statementMap.values()) {
       closeStatement(stmt);

File: src/main/java/org/apache/ibatis/executor/SimpleExecutor.java
Patch:
@@ -44,7 +44,7 @@ public List doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, R
     }
   }
 
-  public List doFlushStatements()
+  public List doFlushStatements(boolean isRollback)
       throws SQLException {
     return Collections.EMPTY_LIST;
   }

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -53,16 +53,17 @@ public int doUpdate(MappedStatement ms, Object parameterObject)
 
   public List doQuery(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler)
       throws SQLException {
+    Statement stmt = null;
     try {
       flushStatements();
       Configuration configuration = ms.getConfiguration();
       StatementHandler handler = configuration.newStatementHandler(this, ms, parameterObject, rowBounds, resultHandler);
       Connection connection = transaction.getConnection();
-      Statement stmt = handler.prepare(connection);
+      stmt = handler.prepare(connection);
       handler.parameterize(stmt);
       return handler.query(stmt, resultHandler);
     } finally {
-      flushStatements();
+      closeStatement(stmt);
     }
   }
 

File: src/main/java/org/apache/ibatis/io/ClassLoaderWrapper.java
Patch:
@@ -14,7 +14,7 @@ public class ClassLoaderWrapper {
   ClassLoaderWrapper() {
     try {
       systemClassLoader = ClassLoader.getSystemClassLoader();
-    } catch (Exception ignored) {
+    } catch (SecurityException ignored) {
       // AccessControlException on Google App Engine   
     }
   }

File: src/main/java/org/apache/ibatis/reflection/wrapper/ObjectWrapper.java
Patch:
@@ -16,9 +16,9 @@ public interface ObjectWrapper {
 
   String[] getSetterNames();
 
-  Class getSetterType(String name);
+  Class<?> getSetterType(String name);
 
-  Class getGetterType(String name);
+  Class<?> getGetterType(String name);
 
   boolean hasSetter(String name);
 

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -353,6 +353,8 @@ private Class<?> resolveParameterJavaType(Class<?> resultType, String property,
     if (javaType == null) {
       if (JdbcType.CURSOR.equals(jdbcType)) {
         javaType = java.sql.ResultSet.class;
+      } else if (Map.class.isAssignableFrom(resultType)) {
+        javaType = Object.class;
       } else {
         MetaClass metaResultType = MetaClass.forClass(resultType);
         javaType = metaResultType.getGetterType(property);

File: src/test/java/org/apache/ibatis/submitted/sptests/SPMapper.java
Patch:
@@ -6,6 +6,7 @@
 public interface SPMapper {
     Object adder(Parameter parameter);
     void adder2(Parameter parameter);
+    void adder3(Map<String, Object> parameter);
     Name getName(Integer id);
     List<Name> getNames(Map<String, Object> parms);
     List<Name> getNamesWithArray(Map<String, Object> parms);

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -285,7 +285,7 @@ protected void loadMappedAndUnmappedColumnNames(ResultSet rs, ResultMap resultMa
   protected Object createResultObject(ResultSet rs, ResultMap resultMap, ResultLoaderMap lazyLoader) throws SQLException {
     final Object resultObject = createResultObject(rs, resultMap);
     if (resultObject != null && configuration.isLazyLoadingEnabled()) {
-      return ResultObjectProxy.createProxy(resultObject, lazyLoader, configuration.isAggressiveLazyLoading());
+      return ResultObjectProxy.createProxy(resultObject, lazyLoader, configuration.isAggressiveLazyLoading(), objectFactory);
     }
     return resultObject;
   }

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -209,6 +209,7 @@ private void sqlElement(List<XNode> list) throws Exception {
   private void bufferStatementNodes(List<XNode> list) {
     String currentNamespace = builderAssistant.getCurrentNamespace();
     configuration.addStatementNodes(currentNamespace, list);
+    configuration.addResource(currentNamespace, resource);
   }
 
   private ResultMapping buildResultMappingFromContext(XNode context, Class<?> resultType, ArrayList<ResultFlag> flags) throws Exception {

File: src/test/java/com/ibatis/common/util/NodeletParserTest.java
Patch:
@@ -28,9 +28,9 @@ public void shouldParseAttribute() throws Exception {
     assertEquals("Jim", emp.getFirstName());
     assertEquals("Smith", emp.getLastName());
     assertEquals(new Date(1970 - 1900, 6 - 1, 15), emp.getBirthDate());
-    assertEquals(5.8, emp.getHeight());
+    assertEquals(5.8, emp.getHeight(), 0.0001);
     assertEquals("ft", emp.getHeightUnits());
-    assertEquals(200, emp.getWeight());
+    assertEquals(200, emp.getWeight(), 0.0001);
     assertEquals("lbs", emp.getWeightUnits());
   }
 

File: src/test/java/org/apache/ibatis/jdbc/ScriptRunnerTest.java
Patch:
@@ -5,6 +5,8 @@
 import org.apache.ibatis.datasource.unpooled.UnpooledDataSource;
 import org.apache.ibatis.io.Resources;
 import static org.junit.Assert.*;
+
+import org.junit.Ignore;
 import org.junit.Test;
 
 import javax.sql.DataSource;
@@ -19,6 +21,7 @@
 public class ScriptRunnerTest extends BaseDataTest {
 
   @Test
+  @Ignore("This fails with HSQLDB 2.0 due to the create index statements in the schema script")
   public void shouldRunScriptsBySendingFullScriptAtOnce() throws Exception {
     DataSource ds = createUnpooledDataSource(JPETSTORE_PROPERTIES);
     Connection conn = ds.getConnection();

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleIncludeTest.java
Patch:
@@ -36,7 +36,7 @@ private void testMultipleIncludes(SqlSessionFactory sqlSessionFactory) throws Ex
     try {
       MultipleIncludePersonMapper personMapper = sqlSession.getMapper(MultipleIncludePersonMapper.class);
       Person person = personMapper.select(1);
-      assertEquals(1, person.getId());
+      assertEquals((Integer)1, person.getId());
       assertEquals("John", person.getName());
 
     } finally {

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleReverseIncludeTest.java
Patch:
@@ -36,7 +36,7 @@ private void testMultipleReverseIncludes(SqlSessionFactory sqlSessionFactory) th
     try {
       MultipleReverseIncludePersonMapper personMapper = sqlSession.getMapper(MultipleReverseIncludePersonMapper.class);
       Person person = personMapper.select(1);
-      assertEquals(1, person.getId());
+      assertEquals((Integer)1, person.getId());
       assertEquals("John", person.getName());
 
     } finally {

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/ReverseIncludeTest.java
Patch:
@@ -36,7 +36,7 @@ private void testReverseIncludes(SqlSessionFactory sqlSessionFactory) throws Exc
     try {
       ReverseIncludePersonMapper personMapper = sqlSession.getMapper(ReverseIncludePersonMapper.class);
       Person person = personMapper.select(1);
-      assertEquals(1, person.getId());
+      assertEquals((Integer)1, person.getId());
       assertEquals("John", person.getName());
 
     } finally {

File: src/test/java/org/apache/ibatis/submitted/sptests/SPMapper.java
Patch:
@@ -8,4 +8,5 @@ public interface SPMapper {
     void adder2(Parameter parameter);
     Name getName(Integer id);
     List<Name> getNames(Map<String, Object> parms);
+    List<Name> getNamesWithArray(Map<String, Object> parms);
 }

File: src/main/java/org/apache/ibatis/cache/CacheKey.java
Patch:
@@ -5,7 +5,7 @@
 
 public class CacheKey {
 
-  public static final CacheKey NULL_CACHE_KEY = new CacheKey();
+  public static final CacheKey NULL_CACHE_KEY = new NullCacheKey();
 
   private static final int DEFAULT_MULTIPLYER = 37;
   private static final int DEFAULT_HASHCODE = 17;

File: src/main/java/org/apache/ibatis/type/TypeAliasRegistry.java
Patch:
@@ -95,7 +95,9 @@ public void registerAliases(String packageName, Class superType){
     resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
     Set<Class<? extends Class>> typeSet = resolverUtil.getClasses();
     for(Class type : typeSet){
-      registerAlias(type.getSimpleName(), type);
+      //Ignore inner classes
+      if (!type.isAnonymousClass())
+        registerAlias(type.getSimpleName(), type);
     }
   }
 

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -160,6 +160,7 @@ public void commit(boolean required) throws SQLException {
   public void rollback(boolean required) throws SQLException {
     if (!closed) {
       clearLocalCache();
+      flushStatements();
       if (required) {
         transaction.rollback();
       }

File: src/test/java/com/ibatis/sqlmap/RepeatingGroupMappingTest.java
Patch:
@@ -13,9 +13,9 @@ protected void setUp() throws Exception {
     initScript("com/scripts/jpetstore-hsqldb-dataload.sql");
   }
 
-  public void testShouldRetrieveTwoPeerLists() throws Exception {
+  public void testShouldRetrieveFiveCategories() throws Exception {
     List categories = sqlMap.queryForList("getAllCategoriesMap");
-    System.out.println(categories);
+    assertEquals(5,categories.size());
   }
 
   public void testGroupBy() throws Exception {

File: src/test/java/com/submitted/resultmap/PeerListResultTest.java
Patch:
@@ -100,8 +100,6 @@ public void test01() {
     try {
       List list = sqlMapClient.queryForList("TestSqlMap.test01", null);
 
-      System.out.println(list);
-
       assertEquals(2, list.size());
       Person person = (Person) list.get(0);
       assertEquals("Fred", person.getName());

File: src/test/java/org/apache/ibatis/BaseDataTest.java
Patch:
@@ -50,6 +50,7 @@ public static void runScript(DataSource ds, String resource) throws IOException,
       runner.setAutoCommit(true);
       runner.setStopOnError(false);
       runner.setLogWriter(null);
+      runner.setErrorLogWriter(null);
       runScript(runner, resource);
     } finally {
       connection.close();

File: src/test/java/org/apache/ibatis/cache/SoftCacheTest.java
Patch:
@@ -18,7 +18,7 @@ public void shouldDemonstrateObjectsBeingCollectedAsNeeded() throws Exception {
       cache.putObject(i, array);
       Object value = cache.getObject(i);
       if (cache.getSize() < i + 1) {
-        System.out.println("Cache exceeded with " + (i + 1) + " entries.");
+        //System.out.println("Cache exceeded with " + (i + 1) + " entries.");
         break;
       }
     }

File: src/test/java/org/apache/ibatis/cache/WeakCacheTest.java
Patch:
@@ -16,7 +16,7 @@ public void shouldDemonstrateObjectsBeingCollectedAsNeeded() {
     for (int i = 0; i < N; i++) {
       cache.putObject(i, i);
       if (cache.getSize() < i + 1) {
-        System.out.println("Cache exceeded with " + (i + 1) + " entries.");
+        //System.out.println("Cache exceeded with " + (i + 1) + " entries.");
         break;
       }
     }

File: src/test/java/org/apache/ibatis/submitted/cglib_lazy_error/CglibNPELazyTest.java
Patch:
@@ -31,7 +31,7 @@ public static void initDatabase() throws Exception {
 
       ScriptRunner runner = new ScriptRunner(conn);
       runner.setLogWriter(null);
-      runner.setErrorLogWriter(new PrintWriter(System.err));
+      runner.setErrorLogWriter(null);
       runner.runScript(reader);
       conn.commit();
       reader.close();

File: src/test/java/org/apache/ibatis/submitted/cglib_lazy_error/CglibNPETest.java
Patch:
@@ -31,7 +31,7 @@ public static void initDatabase() throws Exception {
 
       ScriptRunner runner = new ScriptRunner(conn);
       runner.setLogWriter(null);
-      runner.setErrorLogWriter(new PrintWriter(System.err));
+      runner.setErrorLogWriter(null);
       runner.runScript(reader);
       conn.commit();
       reader.close();

File: src/test/java/org/apache/ibatis/submitted/complex_column/ComplexColumnTest.java
Patch:
@@ -32,7 +32,7 @@ public static void initDatabase() throws Exception {
 
             ScriptRunner runner = new ScriptRunner(conn);
             runner.setLogWriter(null);
-            runner.setErrorLogWriter(new PrintWriter(System.err));
+            runner.setErrorLogWriter(null);
             runner.runScript(reader);
             conn.commit();
             reader.close();

File: src/test/java/org/apache/ibatis/submitted/complex_property/ComponentTest.java
Patch:
@@ -52,6 +52,8 @@ public void shouldInsertNestedPasswordFieldOfComplexType() throws Exception {
   private static void runDBScript() throws SQLException, IOException {
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     ScriptRunner runner = new ScriptRunner(conn);
+    runner.setLogWriter(null);
+    runner.setErrorLogWriter(null);
     String resource = "org/apache/ibatis/submitted/complex_property/db/db.sql";
     Reader reader = Resources.getResourceAsReader(resource);
     runner.runScript(reader);

File: src/test/java/org/apache/ibatis/submitted/count/CountTest.java
Patch:
@@ -31,7 +31,7 @@ public static void setUp() throws Exception {
 
       ScriptRunner runner = new ScriptRunner(conn);
       runner.setLogWriter(null);
-      runner.setErrorLogWriter(new PrintWriter(System.err));
+      runner.setErrorLogWriter(null);
       runner.runScript(reader);
       conn.commit();
       reader.close();

File: src/test/java/org/apache/ibatis/submitted/criterion/CriterionTest.java
Patch:
@@ -33,7 +33,7 @@ public static void setUp() throws Exception {
 
       ScriptRunner runner = new ScriptRunner(conn);
       runner.setLogWriter(null);
-      runner.setErrorLogWriter(new PrintWriter(System.err));
+      runner.setErrorLogWriter(null);
       runner.runScript(reader);
       conn.commit();
       reader.close();

File: src/test/java/org/apache/ibatis/submitted/dynsql/DynSqlTest.java
Patch:
@@ -30,8 +30,8 @@ public static void setUp() throws Exception {
 
       Reader scriptReader = Resources.getResourceAsReader("org/apache/ibatis/submitted/dynsql/CreateDB.sql");
       ScriptRunner runner = new ScriptRunner(conn);
-//      runner.setLogWriter(null);
-//      runner.setErrorLogWriter(null);
+      runner.setLogWriter(null);
+      runner.setErrorLogWriter(null);
       runner.runScript(scriptReader);
       conn.commit();
       scriptReader.close();

File: src/test/java/org/apache/ibatis/submitted/dynsql2/DynSqlTest.java
Patch:
@@ -36,7 +36,7 @@ public static void setUp() throws Exception {
 
       ScriptRunner runner = new ScriptRunner(conn);
       runner.setLogWriter(null);
-      runner.setErrorLogWriter(new PrintWriter(System.err));
+      runner.setErrorLogWriter(null);
       runner.runScript(reader);
       conn.commit();
       reader.close();

File: src/test/java/org/apache/ibatis/submitted/enumtypehandler_on_map/EnumTypeHandlerTest.java
Patch:
@@ -34,7 +34,7 @@ public static void initDatabase() throws Exception {
 
             ScriptRunner runner = new ScriptRunner(conn);
             runner.setLogWriter(null);
-            runner.setErrorLogWriter(new PrintWriter(System.err));
+            runner.setErrorLogWriter(null);
             runner.runScript(reader);
             conn.commit();
             reader.close();

File: src/test/java/org/apache/ibatis/submitted/flush_statement_npe/FlushStatementNpeTest.java
Patch:
@@ -31,7 +31,7 @@ public static void initDatabase() throws Exception {
 
             ScriptRunner runner = new ScriptRunner(conn);
             runner.setLogWriter(null);
-            runner.setErrorLogWriter(new PrintWriter(System.err));
+            runner.setErrorLogWriter(null);
             runner.runScript(reader);
             conn.commit();
             reader.close();

File: src/test/java/org/apache/ibatis/submitted/initialized_collection_property/AuthorDAOTest.java
Patch:
@@ -27,6 +27,8 @@ public void testGetMessageForEmptyDatabase() throws Exception {
 
     Connection conn = session.getConnection();
     ScriptRunner runner = new ScriptRunner(conn);
+    runner.setLogWriter(null);
+    runner.setErrorLogWriter(null);
     reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/initialized_collection_property/db/create.sql");
     runner.runScript(reader);
     session.close();

File: src/test/java/org/apache/ibatis/submitted/lazyload_common_property/CommonPropertyLazyLoadError.java
Patch:
@@ -30,7 +30,7 @@ public static void initDatabase() throws Exception {
 
             ScriptRunner runner = new ScriptRunner(conn);
             runner.setLogWriter(null);
-            runner.setErrorLogWriter(new PrintWriter(System.err));
+            runner.setErrorLogWriter(null);
             runner.runScript(reader);
             conn.commit();
             reader.close();

File: src/test/java/org/apache/ibatis/submitted/multiple_discriminator/MultipleDiscriminatorTest.java
Patch:
@@ -31,7 +31,7 @@ public static void initDatabase() throws Exception {
 
             ScriptRunner runner = new ScriptRunner(conn);
             runner.setLogWriter(null);
-            runner.setErrorLogWriter(new PrintWriter(System.err));
+            runner.setErrorLogWriter(null);
             runner.runScript(reader);
             conn.commit();
             reader.close();

File: src/test/java/org/apache/ibatis/submitted/nested/NestedForEachTest.java
Patch:
@@ -33,7 +33,7 @@ public static void setUp() throws Exception {
 
       ScriptRunner runner = new ScriptRunner(conn);
       runner.setLogWriter(null);
-      runner.setErrorLogWriter(new PrintWriter(System.err));
+      runner.setErrorLogWriter(null);
       runner.runScript(reader);
       conn.commit();
       reader.close();

File: src/test/java/org/apache/ibatis/submitted/null_associations/FooMapperTest.java
Patch:
@@ -22,6 +22,8 @@ public static void setUpBeforeClass() {
       session = factory.openSession();
       Connection conn = session.getConnection();
       ScriptRunner runner = new ScriptRunner(conn);
+      runner.setLogWriter(null);
+      runner.setErrorLogWriter(null);
       Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/null_associations/create-schema-mysql.sql");
       runner.runScript(reader);
     } catch (Exception ex) {

File: src/test/java/org/apache/ibatis/submitted/ognl_enum/EnumWithOgnlTest.java
Patch:
@@ -34,7 +34,7 @@ public static void initDatabase() throws Exception {
 
             ScriptRunner runner = new ScriptRunner(conn);
             runner.setLogWriter(null);
-            runner.setErrorLogWriter(new PrintWriter(System.err));
+            runner.setErrorLogWriter(null);
             runner.runScript(reader);
             conn.commit();
             reader.close();

File: src/test/java/org/apache/ibatis/submitted/overwritingproperties/FooMapperTest.java
Patch:
@@ -23,6 +23,8 @@ public static void setUpBeforeClass() {
       session = factory.openSession();
       Connection conn = session.getConnection();
       ScriptRunner runner = new ScriptRunner(conn);
+      runner.setLogWriter(null);
+      runner.setErrorLogWriter(null);
       Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/overwritingproperties/create-schema-mysql.sql");
       runner.runScript(reader);
     } catch (Exception ex) {

File: src/test/java/org/apache/ibatis/submitted/quotedcolumnnames/QuotedColumnNamesTest.java
Patch:
@@ -30,7 +30,7 @@ public static void setUp() throws Exception {
 			Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/quotedcolumnnames/CreateDB.sql");
 			ScriptRunner runner = new ScriptRunner(conn);
 			runner.setLogWriter(null);
-			runner.setErrorLogWriter(new PrintWriter(System.err));
+			runner.setErrorLogWriter(null);
 			runner.runScript(reader);
 			conn.commit();
 			reader.close();
@@ -84,7 +84,7 @@ private void assertColumnNames(List<Map<String, Object>> list) {
 
 	private void printList(List<Map<String, Object>> list) {
 		for (Map<String, Object> map : list) {
-			System.out.println(map);
+			Assert.assertNotNull(map);
 		}
 	}
 }

File: src/test/java/org/apache/ibatis/submitted/selectkey/SelectKeyTest.java
Patch:
@@ -34,7 +34,7 @@ public static void setUp() throws Exception {
 
       ScriptRunner runner = new ScriptRunner(conn);
       runner.setLogWriter(null);
-      runner.setErrorLogWriter(new PrintWriter(System.err));
+      runner.setErrorLogWriter(null);
       runner.runScript(reader);
       conn.commit();
       reader.close();

File: src/test/java/org/apache/ibatis/submitted/substitution_in_annots/SubstitutionInAnnotsTest.java
Patch:
@@ -31,7 +31,7 @@ public static void setUp() throws Exception {
    	Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/substitution_in_annots/CreateDB.sql");
     ScriptRunner runner = new ScriptRunner(c);
     runner.setLogWriter(null);
-    runner.setErrorLogWriter(new PrintWriter(System.err));
+    runner.setErrorLogWriter(null);
     runner.runScript(reader);
     c.commit();
     reader.close();

File: src/main/java/org/apache/ibatis/parsing/XNode.java
Patch:
@@ -281,7 +281,7 @@ public String toString() {
     StringBuilder builder = new StringBuilder();
     builder.append("<");
     builder.append(name);
-    for (Map.Entry entry : attributes.entrySet()) {
+    for (Map.Entry<Object, Object> entry : attributes.entrySet()) {
       builder.append(" ");
       builder.append(entry.getKey());
       builder.append("=\"");

File: src/main/java/org/apache/ibatis/plugin/Signature.java
Patch:
@@ -8,9 +8,9 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)
 public @interface Signature {
-  Class type();
+  Class<?> type();
 
   String method();
 
-  Class[] args();
+  Class<?>[] args();
 }
\ No newline at end of file

File: src/main/java/org/apache/ibatis/cache/CacheException.java
Patch:
@@ -4,6 +4,8 @@
 
 public class CacheException extends PersistenceException {
 
+  private static final long serialVersionUID = -193202262468464650L;
+
   public CacheException() {
     super();
   }

File: src/main/java/org/apache/ibatis/cache/CacheKey.java
Patch:
@@ -14,13 +14,13 @@ public class CacheKey {
   private int hashcode;
   private long checksum;
   private int count;
-  private List updateList;
+  private List<Object> updateList;
 
   public CacheKey() {
     this.hashcode = DEFAULT_HASHCODE;
     this.multiplier = DEFAULT_MULTIPLYER;
     this.count = 0;
-    this.updateList = new ArrayList();
+    this.updateList = new ArrayList<Object>();
   }
 
   public CacheKey(Object[] objects) {

File: src/main/java/org/apache/ibatis/cache/decorators/FifoCache.java
Patch:
@@ -11,12 +11,12 @@
 public class FifoCache implements Cache {
 
   private final Cache delegate;
-  private final LinkedList keyList;
+  private final LinkedList<Object> keyList;
   private int size;
 
   public FifoCache(Cache delegate) {
     this.delegate = delegate;
-    this.keyList = new LinkedList();
+    this.keyList = new LinkedList<Object>();
     this.size = 1024;
   }
 

File: src/main/java/org/apache/ibatis/cache/impl/PerpetualCache.java
Patch:
@@ -13,7 +13,7 @@ public class PerpetualCache implements Cache {
 
   private String id;
 
-  private Map cache = new HashMap();
+  private Map<Object, Object> cache = new HashMap<Object, Object>();
 
   private ReadWriteLock readWriteLock = new ReentrantReadWriteLock();
 

File: src/main/java/org/apache/ibatis/builder/BuilderException.java
Patch:
@@ -4,6 +4,8 @@
 
 public class BuilderException extends PersistenceException {
 
+  private static final long serialVersionUID = -3885164021020443281L;
+
   public BuilderException() {
     super();
   }

File: src/main/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSource.java
Patch:
@@ -21,7 +21,7 @@ public BoundSql getBoundSql(Object parameterObject) {
     DynamicContext context = new DynamicContext(configuration, parameterObject);
     rootSqlNode.apply(context);
     SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);
-    Class parameterType = parameterObject == null ? Object.class : parameterObject.getClass();
+    Class<?> parameterType = parameterObject == null ? Object.class : parameterObject.getClass();
     SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType);
     BoundSql boundSql = sqlSource.getBoundSql(parameterObject);
     for (Map.Entry<String, Object> entry : context.getBindings().entrySet()) {

File: src/main/java/org/apache/ibatis/builder/xml/dynamic/TrimSqlNode.java
Patch:
@@ -33,6 +33,8 @@ private List<String> parseOverrides(String overrides) {
     if (overrides != null) {
       final StringTokenizer parser = new StringTokenizer(overrides, "|", false);
       return new ArrayList<String>() {
+        private static final long serialVersionUID = -2504816393625384165L;
+
         {
           while (parser.hasMoreTokens()) {
             add(parser.nextToken().toUpperCase(Locale.ENGLISH));

File: src/main/java/org/apache/ibatis/binding/BindingException.java
Patch:
@@ -4,6 +4,8 @@
 
 public class BindingException extends PersistenceException {
 
+  private static final long serialVersionUID = 4300802238789381562L;
+
   public BindingException() {
     super();
   }

File: src/main/java/org/apache/ibatis/binding/MapperRegistry.java
Patch:
@@ -10,7 +10,7 @@
 public class MapperRegistry {
 
   private Configuration config;
-  private Set<Class> knownMappers = new HashSet<Class>();
+  private Set<Class<?>> knownMappers = new HashSet<Class<?>>();
 
   public MapperRegistry(Configuration config) {
     this.config = config;
@@ -26,11 +26,11 @@ public <T> T getMapper(Class<T> type, SqlSession sqlSession) {
     }
   }
 
-  public boolean hasMapper(Class type) {
+  public boolean hasMapper(Class<?> type) {
     return knownMappers.contains(type);
   }
 
-  public void addMapper(Class type) {
+  public void addMapper(Class<?> type) {
     if (type.isInterface()) {
       if (knownMappers.contains(type)) {
         throw new BindingException("Type " + type + " is already known to the MapperRegistry.");

File: src/main/java/org/apache/ibatis/annotations/CacheNamespaceRef.java
Patch:
@@ -8,5 +8,5 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)
 public @interface CacheNamespaceRef {
-  public abstract Class value();
+  public abstract Class<?> value();
 }

File: src/main/java/org/apache/ibatis/annotations/Case.java
Patch:
@@ -10,7 +10,7 @@
 public @interface Case {
   public abstract String value();
 
-  public abstract Class type();
+  public abstract Class<?> type();
 
   public abstract Result[] results() default {};
 }

File: src/main/java/org/apache/ibatis/annotations/DeleteProvider.java
Patch:
@@ -8,7 +8,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)
 public @interface DeleteProvider {
-  public abstract Class type();
+  public abstract Class<?> type();
 
   public abstract String method();
 }

File: src/main/java/org/apache/ibatis/annotations/InsertProvider.java
Patch:
@@ -8,7 +8,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)
 public @interface InsertProvider {
-  public abstract Class type();
+  public abstract Class<?> type();
 
   public abstract String method();
 }

File: src/main/java/org/apache/ibatis/annotations/Result.java
Patch:
@@ -1,6 +1,7 @@
 package org.apache.ibatis.annotations;
 
 import org.apache.ibatis.type.JdbcType;
+import org.apache.ibatis.type.TypeHandler;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -16,11 +17,11 @@
 
   public abstract String property() default "";
 
-  public abstract Class javaType() default void.class;
+  public abstract Class<?> javaType() default void.class;
 
   public abstract JdbcType jdbcType() default JdbcType.UNDEFINED;
 
-  public abstract Class typeHandler() default void.class;
+  public abstract Class<? extends TypeHandler> typeHandler() default TypeHandler.class;
 
   public abstract One one() default @One;
 

File: src/main/java/org/apache/ibatis/annotations/SelectProvider.java
Patch:
@@ -8,7 +8,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)
 public @interface SelectProvider {
-  public abstract Class type();
+  public abstract Class<?> type();
 
   public abstract String method();
 }

File: src/main/java/org/apache/ibatis/annotations/TypeDiscriminator.java
Patch:
@@ -1,6 +1,7 @@
 package org.apache.ibatis.annotations;
 
 import org.apache.ibatis.type.JdbcType;
+import org.apache.ibatis.type.TypeHandler;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -12,11 +13,11 @@
 public @interface TypeDiscriminator {
   public abstract String column();
 
-  public abstract Class javaType() default void.class;
+  public abstract Class<?> javaType() default void.class;
 
   public abstract JdbcType jdbcType() default JdbcType.UNDEFINED;
 
-  public abstract Class typeHandler() default void.class;
+  public abstract Class<? extends TypeHandler> typeHandler() default TypeHandler.class;
 
   public abstract Case[] cases();
 }

File: src/main/java/org/apache/ibatis/annotations/UpdateProvider.java
Patch:
@@ -8,7 +8,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)
 public @interface UpdateProvider {
-  public abstract Class type();
+  public abstract Class<?> type();
 
   public abstract String method();
 }

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java
Patch:
@@ -11,14 +11,14 @@
 public class ProviderSqlSource implements SqlSource {
 
   private SqlSourceBuilder sqlSourceParser;
-  private Class providerType;
+  private Class<?> providerType;
   private Method providerMethod;
   private boolean providerTakesParameterObject;
 
   public ProviderSqlSource(Configuration config, Object provider) {
     try {
       this.sqlSourceParser = new SqlSourceBuilder(config);
-      this.providerType = (Class) provider.getClass().getMethod("type").invoke(provider);
+      this.providerType = (Class<?>) provider.getClass().getMethod("type").invoke(provider);
       String providerMethod = (String) provider.getClass().getMethod("method").invoke(provider);
 
       for (Method m : providerType.getMethods()) {
@@ -48,7 +48,7 @@ private SqlSource createSqlSource(Object parameterObject) {
       } else {
         sql = (String) providerMethod.invoke(providerType.newInstance());
       }
-      Class parameterType = parameterObject == null ? Object.class : parameterObject.getClass();
+      Class<?> parameterType = parameterObject == null ? Object.class : parameterObject.getClass();
       return sqlSourceParser.parse(sql, parameterType);
     } catch (Exception e) {
       throw new BuilderException("Error invoking SqlProvider method ("

File: src/main/java/org/apache/ibatis/jdbc/RuntimeSqlException.java
Patch:
@@ -2,6 +2,8 @@
 
 public class RuntimeSqlException extends RuntimeException {
 
+  private static final long serialVersionUID = 5224696788505678598L;
+
   public RuntimeSqlException() {
     super();
   }

File: src/main/java/org/apache/ibatis/jdbc/SqlRunner.java
Patch:
@@ -86,7 +86,7 @@ public int insert(String sql, Object... args) throws SQLException {
         List<Map<String, Object>> keys = getResults(ps.getGeneratedKeys());
         if (keys.size() == 1) {
           Map<String, Object> key = keys.get(0);
-          Iterator i = key.values().iterator();
+          Iterator<Object> i = key.values().iterator();
           if (i.hasNext()) {
             Object genkey = i.next();
             if (genkey != null) {
@@ -197,7 +197,7 @@ private List<Map<String, Object>> getResults(ResultSet rs) throws SQLException {
       for (int i = 0, n = rsmd.getColumnCount(); i < n; i++) {
         columns.add(rsmd.getColumnLabel(i + 1));
         try {
-          Class type = Resources.classForName(rsmd.getColumnClassName(i + 1));
+          Class<?> type = Resources.classForName(rsmd.getColumnClassName(i + 1));
           TypeHandler typeHandler = typeHandlerRegistry.getTypeHandler(type);
           if (typeHandler == null) {
             typeHandler = typeHandlerRegistry.getTypeHandler(Object.class);

File: src/main/java/org/apache/ibatis/logging/LogException.java
Patch:
@@ -4,6 +4,8 @@
 
 public class LogException extends PersistenceException {
 
+  private static final long serialVersionUID = 1022924004852350942L;
+
   public LogException() {
     super();
   }

File: src/main/java/org/apache/ibatis/logging/commons/JakartaCommonsLoggingImpl.java
Patch:
@@ -7,7 +7,7 @@ public class JakartaCommonsLoggingImpl implements org.apache.ibatis.logging.Log
 
   private Log log;
 
-  public JakartaCommonsLoggingImpl(Class clazz) {
+  public JakartaCommonsLoggingImpl(Class<?> clazz) {
     log = LogFactory.getLog(clazz);
   }
 

File: src/main/java/org/apache/ibatis/logging/jdk14/Jdk14LoggingImpl.java
Patch:
@@ -9,7 +9,7 @@ public class Jdk14LoggingImpl implements Log {
 
   private Logger log;
 
-  public Jdk14LoggingImpl(Class clazz) {
+  public Jdk14LoggingImpl(Class<?> clazz) {
     log = Logger.getLogger(clazz.getName());
   }
 

File: src/main/java/org/apache/ibatis/logging/log4j/Log4jImpl.java
Patch:
@@ -7,7 +7,7 @@ public class Log4jImpl implements Log {
 
   private Logger log;
 
-  public Log4jImpl(Class clazz) {
+  public Log4jImpl(Class<?> clazz) {
     log = Logger.getLogger(clazz);
   }
 

File: src/main/java/org/apache/ibatis/logging/nologging/NoLoggingImpl.java
Patch:
@@ -4,7 +4,7 @@
 
 public class NoLoggingImpl implements Log {
 
-  public NoLoggingImpl(Class clazz) {
+  public NoLoggingImpl(Class<?> clazz) {
   }
 
   public boolean isDebugEnabled() {

File: src/main/java/org/apache/ibatis/logging/slf4j/Slf4jImpl.java
Patch:
@@ -8,7 +8,7 @@ public class Slf4jImpl implements Log {
 
   private Logger log;
 
-  public Slf4jImpl(Class clazz) {
+  public Slf4jImpl(Class<?> clazz) {
     log = LoggerFactory.getLogger(clazz);
   }
 

File: src/main/java/org/apache/ibatis/logging/stdout/StdOutImpl.java
Patch:
@@ -4,7 +4,7 @@
 
 public class StdOutImpl implements Log {
 
-  public StdOutImpl(Class clazz) {
+  public StdOutImpl(Class<?> clazz) {
   }
 
   public boolean isDebugEnabled() {

File: src/main/java/org/apache/ibatis/io/Resources.java
Patch:
@@ -225,7 +225,7 @@ public static Properties getUrlAsProperties(String urlString) throws IOException
    * @return The loaded class
    * @throws ClassNotFoundException If the class cannot be found (duh!)
    */
-  public static Class classForName(String className) throws ClassNotFoundException {
+  public static Class<?> classForName(String className) throws ClassNotFoundException {
     return classLoaderWrapper.classForName(className);
   }
 

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -16,12 +16,13 @@
 import java.sql.SQLException;
 import java.sql.Statement;
 import java.util.*;
+import java.util.concurrent.ConcurrentLinkedQueue;
 
 public abstract class BaseExecutor implements Executor {
 
   protected Transaction transaction;
 
-  protected List<DeferredLoad> deferredLoads;
+  protected ConcurrentLinkedQueue<DeferredLoad> deferredLoads;
   protected PerpetualCache localCache;
   protected Configuration configuration;
 
@@ -32,7 +33,7 @@ public abstract class BaseExecutor implements Executor {
 
   protected BaseExecutor(Configuration configuration, Transaction transaction) {
     this.transaction = transaction;
-    this.deferredLoads = new ArrayList<DeferredLoad>();
+    this.deferredLoads = new ConcurrentLinkedQueue<DeferredLoad>();
     this.localCache = new PerpetualCache("LocalCache");
     this.closed = false;
     this.configuration = configuration;

File: src/test/java/org/apache/ibatis/migration/MigratorTest.java
Patch:
@@ -194,6 +194,7 @@ public void write(int b) throws IOException {
 //      out.write(b);
     }
 
+    @Override
     public String toString() {
       return builder.toString();
     }

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -44,7 +44,7 @@ public XMLConfigBuilder(Reader reader, String environment, Properties props) {
     this.configuration.setVariables(props);
     this.parsed = false;
     this.environment = environment;
-    this.parser = new XPathParser(reader, true, new XMLMapperEntityResolver(), props);
+    this.parser = new XPathParser(reader, true, props, new XMLMapperEntityResolver());
   }
 
   public Configuration parse() {

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -28,7 +28,7 @@ public XMLMapperBuilder(Reader reader, Configuration configuration, String resou
   public XMLMapperBuilder(Reader reader, Configuration configuration, String resource, Map<String, XNode> sqlFragments) {
     super(configuration);
     this.builderAssistant = new MapperBuilderAssistant(configuration, resource);
-    this.parser = new XPathParser(reader, true, new XMLMapperEntityResolver(), configuration.getVariables());
+    this.parser = new XPathParser(reader, true, configuration.getVariables(), new XMLMapperEntityResolver());
     this.sqlFragments = sqlFragments;
     this.resource = resource;
   }

File: src/test/java/com/ibatis/common/util/NodeEventParser.java
Patch:
@@ -51,7 +51,7 @@ public void addNodeletHandler(Object handler) {
   public void parse(Reader reader) throws ParsingException {
     try {
       Document doc = createDocument(reader);
-      xpathParser = new XPathParser(doc,validation,entityResolver,variables);
+      xpathParser = new XPathParser(doc,validation, variables, entityResolver);
       parse(doc.getLastChild());
     } catch (Exception e) {
       throw new ParsingException("Error parsing XML.  Cause: " + e, e);

File: src/main/java/org/apache/ibatis/session/SqlSession.java
Patch:
@@ -17,6 +17,8 @@ public interface SqlSession {
 
   void select(String statement, Object parameter, ResultHandler handler);
 
+  void select(String statement, ResultHandler handler);
+
   void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler);
 
   int insert(String statement);

File: src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java
Patch:
@@ -202,7 +202,6 @@ private void executeStatement(String command) throws SQLException, UnsupportedEn
     } catch (Exception e) {
       // Ignore to workaround a bug in some connection pools
     }
-    commitConnection(); //TODO:  Bug... this should not be here. 
   }
 
   private void printResults(Statement statement, boolean hasResults) {

File: src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java
Patch:
@@ -202,7 +202,7 @@ private void executeStatement(String command) throws SQLException, UnsupportedEn
     } catch (Exception e) {
       // Ignore to workaround a bug in some connection pools
     }
-    commitConnection();
+    commitConnection(); //TODO:  Bug... this should not be here. 
   }
 
   private void printResults(Statement statement, boolean hasResults) {

