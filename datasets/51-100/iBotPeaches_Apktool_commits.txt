File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlUtils.java
Patch:
@@ -257,7 +257,7 @@ public static void renameManifestPackage(File file, String packageOriginal) {
     public static String[] pullManifestFeatureFlags(File file) {
         try {
             Document doc = XmlUtils.loadDocument(file, true);
-            String expression = "/manifest/permission/@android:featureFlag";
+            String expression = "/manifest//@android:featureFlag";
             NodeList nodes = XmlUtils.evaluateXPath(doc, expression, NodeList.class);
 
             String[] featureFlags = new String[nodes.getLength()];

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/BaseTest.java
Patch:
@@ -17,7 +17,6 @@
 package brut.androlib;
 
 import brut.androlib.Config;
-import brut.androlib.apk.ApkInfo;
 import brut.androlib.res.Framework;
 import brut.common.BrutException;
 import brut.directory.ExtFile;
@@ -47,7 +46,6 @@ public class BaseTest {
     protected static File sTmpDir;
     protected static ExtFile sTestOrigDir;
     protected static ExtFile sTestNewDir;
-    protected static ApkInfo sTestApkInfo;
 
     private static void cleanFrameworkFile() throws BrutException {
         File apkFile = new File(new Framework(sConfig).getDirectory(), "1.apk");

File: brut.apktool/apktool-lib/src/main/java/android/util/TypedValue.java
Patch:
@@ -217,8 +217,9 @@ public class TypedValue {
 
     private static final float MANTISSA_MULT = 1.0f / (1 << TypedValue.COMPLEX_MANTISSA_SHIFT);
     private static final float[] RADIX_MULTS = {
-        MANTISSA_MULT, 1.0f / (1 << 7) * MANTISSA_MULT,
-            1.0f / (1 << 15) * MANTISSA_MULT, 1.0f / (1 << 23) * MANTISSA_MULT };
+            MANTISSA_MULT, 1.0f / (1 << 7) * MANTISSA_MULT,
+            1.0f / (1 << 15) * MANTISSA_MULT, 1.0f / (1 << 23) * MANTISSA_MULT
+    };
 
     /**
      * Retrieve the base value from a complex data integer. This uses the

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResResSpec.java
Patch:
@@ -40,9 +40,9 @@ public class ResResSpec {
     public ResResSpec(ResID id, String name, ResPackage pkg, ResTypeSpec type) {
         mId = id;
         if (name == null || name.isEmpty() || EMPTY_RESOURCE_NAMES.contains(name)) {
-            name = "APKTOOL_DUMMYVAL_" + id.toString();
+            name = "APKTOOL_DUMMYVAL_" + id;
         } else if (type.getResSpecUnsafe(name) != null) {
-            name = String.format("APKTOOL_DUPLICATE_%s_%s", type, id.toString());
+            name = String.format("APKTOOL_DUPLICATE_%s_%s", type, id);
         }
         mName = name;
         mPackage = pkg;
@@ -116,6 +116,6 @@ public void addResource(ResResource res, boolean overwrite) throws AndrolibExcep
 
     @Override
     public String toString() {
-        return mId.toString() + " " + mType.toString() + "/" + mName;
+        return mId + " " + mType + "/" + mName;
     }
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResType.java
Patch:
@@ -18,6 +18,7 @@
 
 import brut.androlib.exceptions.AndrolibException;
 import brut.androlib.exceptions.UndefinedResObjectException;
+
 import java.util.*;
 
 public class ResType {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResEmptyValue.java
Patch:
@@ -29,8 +29,9 @@ public ResEmptyValue(int value, String rawValue, int type) {
 
     public ResEmptyValue(int value, String rawValue, String type) {
         super(type, value, rawValue);
-        if (value != 1)
+        if (value != 1) {
             throw new UnsupportedOperationException();
+        }
         mValue = value;
     }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResScalarValue.java
Patch:
@@ -65,8 +65,8 @@ public boolean hasMultipleNonPositionalSubstitutions() {
     }
 
     @Override
-    public void serializeToResValuesXml(XmlSerializer serializer,
-                                        ResResource res) throws IOException, AndrolibException {
+    public void serializeToResValuesXml(XmlSerializer serializer, ResResource res)
+            throws AndrolibException, IOException {
         String type = res.getResSpec().getType().getName();
         boolean item = !"reference".equals(mType) && !type.equals(mType);
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResStringValue.java
Patch:
@@ -56,7 +56,8 @@ protected String encodeAsResXml() throws AndrolibException {
     }
 
     @Override
-    protected void serializeExtraXmlAttrs(XmlSerializer serializer, ResResource res) throws IOException {
+    protected void serializeExtraXmlAttrs(XmlSerializer serializer, ResResource res)
+            throws IOException {
         if (ResXmlEncoders.hasMultipleNonPositionalSubstitutions(mRawValue)) {
             serializer.attribute(null, "formatted", "false");
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/AndroidManifestPullStreamDecoder.java
Patch:
@@ -55,7 +55,7 @@ private static class EventHandler implements XmlPullUtils.EventHandler {
 
         public EventHandler(ResTable resTable) {
             mResTable = resTable;
-            mHideSdkInfo = !resTable.getAnalysisMode();
+            mHideSdkInfo = !resTable.getConfig().isAnalysisMode();
         }
 
         @Override

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResStreamDecoder.java
Patch:
@@ -17,6 +17,7 @@
 package brut.androlib.res.decoder;
 
 import brut.androlib.exceptions.AndrolibException;
+
 import java.io.*;
 
 public interface ResStreamDecoder {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResStreamDecoderContainer.java
Patch:
@@ -17,6 +17,7 @@
 package brut.androlib.res.decoder;
 
 import brut.androlib.exceptions.AndrolibException;
+
 import java.io.*;
 import java.util.*;
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResValuesXmlSerializable.java
Patch:
@@ -24,5 +24,5 @@
 
 public interface ResValuesXmlSerializable {
     void serializeToResValuesXml(XmlSerializer serializer, ResResource res)
-            throws IOException, AndrolibException;
+            throws AndrolibException, IOException;
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/src/SmaliBuilder.java
Patch:
@@ -41,9 +41,8 @@ public SmaliBuilder(File smaliDir, int apiLevel) {
 
     public void build(File dexFile) throws AndrolibException {
         try {
-            DexBuilder dexBuilder = mApiLevel > 0
-                ? new DexBuilder(Opcodes.forApi(mApiLevel))
-                : new DexBuilder(Opcodes.getDefault());
+            DexBuilder dexBuilder = new DexBuilder(
+                mApiLevel > 0 ? Opcodes.forApi(mApiLevel) : Opcodes.getDefault());
 
             for (String fileName : mSmaliDir.getDirectory().getFiles(true)) {
                 buildFile(fileName, dexBuilder);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/src/SmaliDecoder.java
Patch:
@@ -44,7 +44,7 @@ public SmaliDecoder(File apkFile, String dexName, boolean bakDeb, int apiLevel)
 
     public DexFile decode(File outDir) throws AndrolibException {
         try {
-            final BaksmaliOptions options = new BaksmaliOptions();
+            BaksmaliOptions options = new BaksmaliOptions();
 
             // options
             options.deodex = false;

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/encoders/PositionalEnumerationTest.java
Patch:
@@ -18,9 +18,9 @@
 
 import brut.androlib.BaseTest;
 import brut.androlib.res.xml.ResXmlEncoders;
-import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
+import org.junit.*;
+import static org.junit.Assert.*;
 
 public class PositionalEnumerationTest extends BaseTest {
 

File: brut.j.dir/src/main/java/brut/directory/DirUtils.java
Patch:
@@ -95,8 +95,7 @@ public static void copyToDir(Directory in, File out, String inFileName, String o
                 outFileName = BrutIO.sanitizePath(out, outFileName);
                 if (!outFileName.isEmpty()) {
                     File outFile = new File(out, outFileName);
-                    //noinspection ResultOfMethodCallIgnored
-                    outFile.getParentFile().mkdirs();
+                    OS.mkdir(outFile.getParentFile());
                     BrutIO.copyAndClose(in.getFileInput(inFileName), Files.newOutputStream(outFile.toPath()));
                 }
             } else {

File: brut.j.dir/src/main/java/brut/directory/ExtFile.java
Patch:
@@ -20,7 +20,7 @@
 import java.io.IOException;
 import java.net.URI;
 
-public class ExtFile extends File {
+public class ExtFile extends File implements AutoCloseable {
     private Directory mDirectory;
 
     public ExtFile(File file) {
@@ -54,9 +54,11 @@ public Directory getDirectory() throws DirectoryException {
         return mDirectory;
     }
 
+    @Override
     public void close() throws IOException {
         if (mDirectory != null) {
             mDirectory.close();
+            mDirectory = null;
         }
     }
 

File: brut.j.dir/src/main/java/brut/directory/ZipRODirectory.java
Patch:
@@ -136,23 +136,23 @@ private void loadAll() {
             ZipEntry entry = entries.nextElement();
             String name = entry.getName();
 
-            if (name.equals(getPath()) || ! name.startsWith(getPath()) || name.contains(".." + separator)) {
+            if (name.equals(getPath()) || !name.startsWith(getPath()) || name.contains(".." + separator)) {
                 continue;
             }
 
             String subname = name.substring(prefixLen);
 
             int pos = subname.indexOf(separator);
             if (pos == -1) {
-                if (! entry.isDirectory()) {
+                if (!entry.isDirectory()) {
                     mFiles.add(subname);
                     continue;
                 }
             } else {
                 subname = subname.substring(0, pos);
             }
 
-            if (! mDirs.containsKey(subname)) {
+            if (!mDirs.containsKey(subname)) {
                 AbstractDirectory dir = new ZipRODirectory(getZipFile(), getPath() + subname + separator);
                 mDirs.put(subname, dir);
             }

File: brut.j.util/src/main/java/brut/util/ExtDataInputStream.java
Patch:
@@ -102,8 +102,7 @@ public int[] readSafeIntArray(int len, long maxPosition) throws IOException {
             // an expected max position and if we are past it, we return early during processing.
             if (position() >= maxPosition) {
                 LOGGER.warning(String.format("Bad string block: string entry is at %d, past end at %d",
-                    position(), maxPosition)
-                );
+                    position(), maxPosition));
                 return arr;
             }
 

File: brut.j.util/src/main/java/brut/util/OSDetection.java
Patch:
@@ -25,15 +25,15 @@ private OSDetection() {
     }
 
     public static boolean isWindows() {
-        return (OS.contains("win"));
+        return OS.contains("win");
     }
 
     public static boolean isMacOSX() {
-        return (OS.contains("mac"));
+        return OS.contains("mac");
     }
 
     public static boolean isUnix() {
-        return (OS.contains("nix") || OS.contains("nux") || OS.contains("aix") || (OS.contains("sunos")));
+        return OS.contains("nix") || OS.contains("nux") || OS.contains("aix") || OS.contains("sunos");
     }
 
     public static boolean is64Bit() {

File: brut.j.xml/src/main/java/brut/xmlpull/MXSerializer.java
Patch:
@@ -957,7 +957,7 @@ private void writeElementContent(String text) throws IOException {
             } else {
                 if (ch == '&') {
                     if (!(i < text.length() - 3 && text.charAt(i+1) == 'l'
-                        && text.charAt(i+2) == 't' && text.charAt(i+3) == ';')) {
+                            && text.charAt(i+2) == 't' && text.charAt(i+3) == ';')) {
                         if (i > pos) {
                             write(text.substring(pos, i));
                         }

File: brut.apktool/apktool-lib/src/main/java/android/content/res/XmlResourceParser.java
Patch:
@@ -27,7 +27,7 @@
 public interface XmlResourceParser extends XmlPullParser, AttributeSet {
     /**
      * Close this interface to the resource. Calls on the interface are no
-     * longer value after this call.
+     * longer valid after this call.
      */
     void close();
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/apk/YamlLine.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.Objects;
 
 public class YamlLine {
-
     public int indent = 0;
     private String key = "";
     private String value = "";
@@ -62,7 +61,7 @@ public YamlLine(String line) {
             if (isItem) {
                 // array item line has only the value
                 value = line.substring(1).trim();
-            }  else {
+            } else {
                 // split line to key - value
                 String[] parts = line.split(":");
                 if (parts.length > 0) {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/apk/YamlReader.java
Patch:
@@ -22,9 +22,8 @@
 import java.util.*;
 
 public class YamlReader {
-
     private ArrayList<YamlLine> mLines;
-    private int mCurrent = 0;
+    private int mCurrent;
 
     public YamlReader(InputStream in) {
         mLines = new ArrayList<>();

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/apk/YamlSerializable.java
Patch:
@@ -20,5 +20,6 @@
 
 public interface YamlSerializable {
     void readItem(YamlReader reader) throws AndrolibException;
+
     void write(YamlWriter writer);
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/apk/YamlWriter.java
Patch:
@@ -21,10 +21,10 @@
 import java.util.*;
 
 public class YamlWriter implements Closeable {
+    private static final String QUOTE = "'";
 
-    private int mIndent = 0;
     private final PrintWriter mWriter;
-    private final String QUOTE = "'";
+    private int mIndent;
 
     public YamlWriter(OutputStream out) {
         mWriter = new PrintWriter(new BufferedWriter(

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/exceptions/AXmlDecodingException.java
Patch:
@@ -17,6 +17,7 @@
 package brut.androlib.exceptions;
 
 public class AXmlDecodingException extends AndrolibException {
+
     public AXmlDecodingException(String message, Throwable cause) {
         super(message, cause);
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/exceptions/CantFind9PatchChunkException.java
Patch:
@@ -17,6 +17,7 @@
 package brut.androlib.exceptions;
 
 public class CantFind9PatchChunkException extends AndrolibException {
+
     public CantFind9PatchChunkException(String message, Throwable cause) {
         super(message, cause);
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/exceptions/InFileNotFoundException.java
Patch:
@@ -17,6 +17,8 @@
 package brut.androlib.exceptions;
 
 public class InFileNotFoundException extends AndrolibException {
+
     public InFileNotFoundException() {
+        super();
     }
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/exceptions/OutDirExistsException.java
Patch:
@@ -17,6 +17,8 @@
 package brut.androlib.exceptions;
 
 public class OutDirExistsException extends AndrolibException {
+
     public OutDirExistsException() {
+        super();
     }
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/exceptions/RawXmlEncounteredException.java
Patch:
@@ -17,6 +17,7 @@
 package brut.androlib.exceptions;
 
 public class RawXmlEncounteredException extends AndrolibException {
+
     public RawXmlEncounteredException(String message, Throwable cause) {
         super(message, cause);
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/exceptions/UndefinedResObjectException.java
Patch:
@@ -17,6 +17,7 @@
 package brut.androlib.exceptions;
 
 public class UndefinedResObjectException extends AndrolibException {
+
     public UndefinedResObjectException(String message) {
         super(message);
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResID.java
Patch:
@@ -45,7 +45,7 @@ public String toString() {
     @Override
     public int hashCode() {
         int hash = 17;
-        hash = 31 * hash + this.id;
+        hash = 31 * hash + id;
         return hash;
     }
 
@@ -58,6 +58,6 @@ public boolean equals(Object obj) {
             return false;
         }
         final ResID other = (ResID) obj;
-        return this.id == other.id;
+        return id == other.id;
     }
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResResource.java
Patch:
@@ -25,9 +25,9 @@ public class ResResource {
     private final ResValue mValue;
 
     public ResResource(ResType config, ResResSpec spec, ResValue value) {
-        this.mConfig = config;
-        this.mResSpec = spec;
-        this.mValue = value;
+        mConfig = config;
+        mResSpec = spec;
+        mValue = value;
     }
 
     public String getFilePath() {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResType.java
Patch:
@@ -22,10 +22,11 @@
 
 public class ResType {
     private final ResConfigFlags mFlags;
-    private final Map<ResResSpec, ResResource> mResources = new LinkedHashMap<>();
+    private final Map<ResResSpec, ResResource> mResources;
 
     public ResType(ResConfigFlags flags) {
-        this.mFlags = flags;
+        mFlags = flags;
+        mResources = new LinkedHashMap<>();
     }
 
     public ResResource getResource(ResResSpec spec) throws AndrolibException {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/arsc/EntryData.java
Patch:
@@ -19,7 +19,7 @@
 import brut.androlib.res.data.value.ResValue;
 
 public class EntryData {
-    public short mFlags;
-    public int mSpecNamesId;
-    public ResValue mValue;
+    public short flags;
+    public int specNamesId;
+    public ResValue value;
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResBagValue.java
Patch:
@@ -28,7 +28,7 @@ public class ResBagValue extends ResValue implements ResValuesXmlSerializable {
     protected final ResReferenceValue mParent;
 
     public ResBagValue(ResReferenceValue parent) {
-        this.mParent = parent;
+        mParent = parent;
     }
 
     @Override

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResBoolValue.java
Patch:
@@ -21,7 +21,7 @@ public class ResBoolValue extends ResScalarValue {
 
     public ResBoolValue(boolean value, int rawIntValue, String rawValue) {
         super("bool", rawIntValue, rawValue);
-        this.mValue = value;
+        mValue = value;
     }
 
     public boolean getValue() {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResColorValue.java
Patch:
@@ -17,6 +17,7 @@
 package brut.androlib.res.data.value;
 
 public class ResColorValue extends ResIntValue {
+
     public ResColorValue(int value, String rawValue) {
         super(value, rawValue, "color");
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResDimenValue.java
Patch:
@@ -20,6 +20,7 @@
 import brut.androlib.exceptions.AndrolibException;
 
 public class ResDimenValue extends ResIntValue {
+
     public ResDimenValue(int value, String rawValue) {
         super(value, rawValue, "dimen");
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResEmptyValue.java
Patch:
@@ -20,18 +20,18 @@
 
 public class ResEmptyValue extends ResScalarValue {
     protected final int mValue;
-    protected int type;
+    protected int mType;
 
     public ResEmptyValue(int value, String rawValue, int type) {
         this(value, rawValue, "integer");
-        this.type = type;
+        mType = type;
     }
 
     public ResEmptyValue(int value, String rawValue, String type) {
         super(type, value, rawValue);
         if (value != 1)
             throw new UnsupportedOperationException();
-        this.mValue = value;
+        mValue = value;
     }
 
     public int getValue() {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResFileValue.java
Patch:
@@ -23,7 +23,7 @@ public class ResFileValue extends ResIntBasedValue {
 
     public ResFileValue(String path, int rawIntValue) {
         super(rawIntValue);
-        this.mPath = path;
+        mPath = path;
     }
 
     public String getStrippedPath() throws AndrolibException {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResFloatValue.java
Patch:
@@ -21,7 +21,7 @@ public class ResFloatValue extends ResScalarValue {
 
     public ResFloatValue(float value, int rawIntValue, String rawValue) {
         super("float", rawIntValue, rawValue);
-        this.mValue = value;
+        mValue = value;
     }
 
     public float getValue() {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResFractionValue.java
Patch:
@@ -20,6 +20,7 @@
 import brut.androlib.exceptions.AndrolibException;
 
 public class ResFractionValue extends ResIntValue {
+
     public ResFractionValue(int value, String rawValue) {
         super(value, rawValue, "fraction");
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResIdValue.java
Patch:
@@ -23,6 +23,7 @@
 import java.io.IOException;
 
 public class ResIdValue extends ResValue implements ResValuesXmlSerializable {
+
     @Override
     public void serializeToResValuesXml(XmlSerializer serializer, ResResource res) throws IOException {
         serializer.startTag(null, "item");

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResScalarValue.java
Patch:
@@ -115,8 +115,9 @@ public String getType() {
         return mType;
     }
 
-    protected void serializeExtraXmlAttrs(XmlSerializer serializer,
-                                          ResResource res) throws IOException {
+    protected void serializeExtraXmlAttrs(XmlSerializer serializer, ResResource res)
+            throws IOException {
+        // stub
     }
 
     protected abstract String encodeAsResXml() throws AndrolibException;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResStringValue.java
Patch:
@@ -25,6 +25,8 @@
 import java.util.regex.Pattern;
 
 public class ResStringValue extends ResScalarValue {
+    private static final Pattern ALL_DIGITS = Pattern.compile("\\d{9,}");
+
     public ResStringValue(String value, int rawValue) {
         this(value, rawValue, "string");
     }
@@ -64,8 +66,6 @@ private String checkIfStringIsNumeric(String val) {
         if (val == null || val.isEmpty()) {
             return val;
         }
-        return allDigits.matcher(val).matches() ? "\\ " + val : val;
+        return ALL_DIGITS.matcher(val).matches() ? "\\ " + val : val;
     }
-
-    private static final Pattern allDigits = Pattern.compile("\\d{9,}");
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValue.java
Patch:
@@ -19,6 +19,7 @@
 import brut.androlib.Config;
 
 public class ResValue {
+
     public boolean shouldRemoveUnknownRes() {
         return Config.getInstance().isDecodeResolveModeRemoving();
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -25,8 +25,8 @@
 public class ResValueFactory {
     private final ResPackage mPackage;
 
-    public ResValueFactory(ResPackage package_) {
-        this.mPackage = package_;
+    public ResValueFactory(ResPackage pkg) {
+        mPackage = pkg;
     }
 
     public ResScalarValue factory(int type, int value, String rawValue) throws AndrolibException {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResRawStreamDecoder.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.*;
 
 public class ResRawStreamDecoder implements ResStreamDecoder {
+
     @Override
     public void decode(InputStream in, OutputStream out) throws AndrolibException {
         try {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResValuesXmlSerializable.java
Patch:
@@ -23,6 +23,6 @@
 import java.io.IOException;
 
 public interface ResValuesXmlSerializable {
-    void serializeToResValuesXml(XmlSerializer serializer,
-                                 ResResource res) throws IOException, AndrolibException;
+    void serializeToResValuesXml(XmlSerializer serializer, ResResource res)
+            throws IOException, AndrolibException;
 }

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/AndroidOreoNotSparseTest.java
Patch:
@@ -30,6 +30,7 @@
 import static org.junit.Assert.assertTrue;
 
 public class AndroidOreoNotSparseTest extends BaseTest {
+
     @BeforeClass
     public static void beforeClass() throws Exception {
         TestUtils.cleanFrameworkFile();

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/AndroidOreoSparseTest.java
Patch:
@@ -30,6 +30,7 @@
 import static org.junit.Assert.assertTrue;
 
 public class AndroidOreoSparseTest extends BaseTest {
+
     @BeforeClass
     public static void beforeClass() throws Exception {
         TestUtils.cleanFrameworkFile();

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt2/NonStandardPkgIdTest.java
Patch:
@@ -31,6 +31,7 @@
 import static org.junit.Assert.*;
 
 public class NonStandardPkgIdTest extends BaseTest {
+    private static ResTable mResTable;
 
     @BeforeClass
     public static void beforeClass() throws Exception {
@@ -90,6 +91,4 @@ public void confirmResourcesAreFromPkgId8() throws AndrolibException {
         assertEquals(0x80, mResTable.getResSpec(0x80020001).getPackage().getId());
         assertEquals(0x80, mResTable.getResSpec(0x80030000).getPackage().getId());
     }
-
-    private static ResTable mResTable;
 }

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/apk/ConsistentPropertyTest.java
Patch:
@@ -26,7 +26,7 @@ public class ConsistentPropertyTest {
     @Test
     public void testAssertingAllKnownApkInfoProperties() throws AndrolibException {
         ApkInfo apkInfo = ApkInfo.load(
-            this.getClass().getResourceAsStream("/apk/basic.yml"));
+            getClass().getResourceAsStream("/apk/basic.yml"));
 
         assertEquals("2.8.0", apkInfo.version);
         assertEquals("basic.apk", apkInfo.apkFileName);

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/apk/DoNotCompressHieroglyphTest.java
Patch:
@@ -26,7 +26,7 @@ public class DoNotCompressHieroglyphTest {
     @Test
     public void testHieroglyph() throws AndrolibException {
         ApkInfo apkInfo = ApkInfo.load(
-            this.getClass().getResourceAsStream("/apk/donotcompress_with_hieroglyph.yml"));
+            getClass().getResourceAsStream("/apk/donotcompress_with_hieroglyph.yml"));
         assertEquals("2.0.0", apkInfo.version);
         assertEquals("testapp.apk", apkInfo.apkFileName);
         assertEquals(2, apkInfo.doNotCompress.size());

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/apk/MaliciousYamlTest.java
Patch:
@@ -26,7 +26,7 @@ public class MaliciousYamlTest {
     @Test
     public void testMaliciousYaml() throws AndrolibException {
         ApkInfo apkInfo = ApkInfo.load(
-            this.getClass().getResourceAsStream("/apk/cve20220476.yml"));
+            getClass().getResourceAsStream("/apk/cve20220476.yml"));
         assertEquals("2.6.1-ddc4bb-SNAPSHOT", apkInfo.version);
     }
 }

File: brut.j.common/src/main/java/brut/common/InvalidUnknownFileException.java
Patch:
@@ -17,6 +17,7 @@
 package brut.common;
 
 public class InvalidUnknownFileException extends BrutException {
+
     public InvalidUnknownFileException(String message) {
         super(message);
     }

File: brut.j.common/src/main/java/brut/common/RootUnknownFileException.java
Patch:
@@ -17,6 +17,7 @@
 package brut.common;
 
 public class RootUnknownFileException extends BrutException {
+
     public RootUnknownFileException(String message) {
         super(message);
     }

File: brut.j.common/src/main/java/brut/common/TraversalUnknownFileException.java
Patch:
@@ -17,6 +17,7 @@
 package brut.common;
 
 public class TraversalUnknownFileException extends BrutException {
+
     public TraversalUnknownFileException(String message) {
         super(message);
     }

File: brut.j.dir/src/main/java/brut/directory/DirUtils.java
Patch:
@@ -28,10 +28,10 @@
 import java.nio.file.Files;
 import java.util.logging.Logger;
 
-public class DirUtil {
+public final class DirUtils {
     private static final Logger LOGGER = Logger.getLogger("");
 
-    private DirUtil() {
+    private DirUtils() {
         // Private constructor for utility class
     }
 

File: brut.j.dir/src/main/java/brut/directory/Directory.java
Patch:
@@ -24,6 +24,8 @@
 import java.util.Set;
 
 public interface Directory {
+    char separator = '/';
+
     Set<String> getFiles();
 
     Set<String> getFiles(boolean recursive);
@@ -65,6 +67,4 @@ public interface Directory {
     int getCompressionLevel(String fileName) throws DirectoryException;
 
     void close() throws IOException;
-
-    char separator = '/';
 }

File: brut.j.dir/src/main/java/brut/directory/ExtFile.java
Patch:
@@ -21,6 +21,8 @@
 import java.net.URI;
 
 public class ExtFile extends File {
+    private Directory mDirectory;
+
     public ExtFile(File file) {
         super(file.getPath());
     }
@@ -66,6 +68,4 @@ public boolean delete() {
 
         return super.delete();
     }
-
-    private Directory mDirectory;
 }

File: brut.j.dir/src/main/java/brut/directory/FileDirectory.java
Patch:
@@ -36,7 +36,6 @@ public FileDirectory(String dir) throws DirectoryException, UnsupportedEncodingE
     }
 
     public FileDirectory(File dir) throws DirectoryException {
-        super();
         if (!dir.isDirectory()) {
             throw new DirectoryException("file must be a directory: " + dir);
         }

File: brut.j.dir/src/main/java/brut/directory/ZipRODirectory.java
Patch:
@@ -48,7 +48,6 @@ public ZipRODirectory(String zipFileName, String path)
     }
 
     public ZipRODirectory(File zipFile, String path) throws DirectoryException {
-        super();
         try {
             mZipFile = new ZipFile(zipFile);
         } catch (IOException ex) {
@@ -58,7 +57,6 @@ public ZipRODirectory(File zipFile, String path) throws DirectoryException {
     }
 
     public ZipRODirectory(ZipFile zipFile, String path) {
-        super();
         mZipFile = zipFile;
         mPath = path;
     }

File: brut.j.dir/src/main/java/brut/directory/ZipUtils.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipOutputStream;
 
-public class ZipUtils {
+public final class ZipUtils {
     private static final Logger LOGGER = Logger.getLogger("");
 
     private ZipUtils() {
@@ -95,8 +95,8 @@ private static void zipFile(File baseDir, String fileName, ZipOutputStream out,
             if (doNotCompress.test(entryName)) {
                 zipEntry.setMethod(ZipEntry.STORED);
                 zipEntry.setSize(file.length());
-                try (BufferedInputStream bis = new BufferedInputStream(Files.newInputStream(file.toPath()))) {
-                    CRC32 crc = BrutIO.calculateCrc(bis);
+                try (BufferedInputStream in = new BufferedInputStream(Files.newInputStream(file.toPath()))) {
+                    CRC32 crc = BrutIO.calculateCrc(in);
                     zipEntry.setCrc(crc.getValue());
                 }
             } else {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Config.java
Patch:
@@ -67,7 +67,7 @@ public class Config {
     public boolean baksmaliDebugMode = true;
 
     // Common options
-    public int jobs = Runtime.getRuntime().availableProcessors();
+    public int jobs = Math.min(Runtime.getRuntime().availableProcessors(), 8);
     public String frameworkDirectory = null;
     public String frameworkTag = null;
     public String aaptPath = "";

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -501,8 +501,8 @@ private ResConfigFlags readConfigFlags() throws IOException, AndrolibException {
         char[] language = new char[0];
         char[] country = new char[0];
         if (size >= 12) {
-            language = this.unpackLanguageOrRegion(mIn.readByte(), mIn.readByte(), 'a');
-            country = this.unpackLanguageOrRegion(mIn.readByte(), mIn.readByte(), '0');
+            language = unpackLanguageOrRegion(mIn.readByte(), mIn.readByte(), 'a');
+            country = unpackLanguageOrRegion(mIn.readByte(), mIn.readByte(), '0');
             read = 12;
         }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResFileDecoder.java
Patch:
@@ -36,7 +36,7 @@ public class ResFileDecoder {
     private final ResStreamDecoderContainer mDecoders;
 
     public ResFileDecoder(ResStreamDecoderContainer decoders) {
-        this.mDecoders = decoders;
+        mDecoders = decoders;
     }
 
     public void decode(ResResource res, Directory inDir, Directory outDir, Map<String, String> resFileMapping)

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/StyledString.java
Patch:
@@ -31,8 +31,8 @@ public class StyledString {
     private final List<Span> mSpans;
 
     public StyledString(String text, List<Span> spans) {
-        this.mText = text;
-        this.mSpans = spans;
+        mText = text;
+        mSpans = spans;
     }
 
     String getText() {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/AXmlResourceParser.java
Patch:
@@ -611,12 +611,12 @@ public void setProperty(String name, Object value) throws XmlPullParserException
     }
 
     @Override
-    public boolean getFeature(String feature) {
+    public boolean getFeature(String name) {
         return false;
     }
 
     @Override
-    public void setFeature(String name, boolean value) throws XmlPullParserException {
+    public void setFeature(String name, boolean state) throws XmlPullParserException {
         throw new XmlPullParserException(E_NOT_SUPPORTED);
     }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/AXmlResourceParser.java
Patch:
@@ -863,5 +863,5 @@ private void setFirstError(AndrolibException error) {
     private static final int PRIVATE_PKG_ID = 0x7F;
 
     private static final String ANDROID_RES_NS_AUTO = "http://schemas.android.com/apk/res-auto";
-    private static final String ANDROID_RES_NS = "http://schemas.android.com/apk/res/android";
+    public static final String ANDROID_RES_NS = "http://schemas.android.com/apk/res/android";
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApktoolProperties.java
Patch:
@@ -65,7 +65,7 @@ private static void loadProps() {
                 properties.load(templateStream);
                 version = properties.getProperty("application.version");
                 templateStream.close();
-            } catch (IOException ignored) { }
+            } catch (IOException ignored) {}
         }
         sProps.put("baksmaliVersion", version);
 
@@ -83,7 +83,7 @@ private static void loadProps() {
                 properties.load(templateStream);
                 version = properties.getProperty("application.version");
                 templateStream.close();
-            } catch (IOException ignored) { }
+            } catch (IOException ignored) {}
         }
         sProps.put("smaliVersion", version);
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/BackgroundWorker.java
Patch:
@@ -34,8 +34,8 @@ public void waitForFinish() {
         for (Future<?> future : mWorkerFutures) {
             try {
                 future.get();
-            } catch (InterruptedException | ExecutionException e) {
-                throw new RuntimeException(e);
+            } catch (InterruptedException | ExecutionException ex) {
+                throw new RuntimeException(ex);
             }
         }
         mWorkerFutures.clear();

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/apk/YamlWriter.java
Patch:
@@ -89,9 +89,9 @@ public <T> void writeList(String key, List<T> list) {
         }
         writeIndent();
         mWriter.println(escape(key) + ":");
-        for (T item: list) {
+        for (T item : list) {
             writeIndent();
-            mWriter.println("- " +  item);
+            mWriter.println("- " + item);
         }
     }
 
@@ -102,7 +102,7 @@ public void writeStringMap(String key, Map<String, String> map) {
         writeIndent();
         mWriter.println(escape(key) + ":");
         nextIndent();
-        for (String mapKey: map.keySet()) {
+        for (String mapKey : map.keySet()) {
             writeString(mapKey, map.get(mapKey));
         }
         prevIndent();

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/Framework.java
Patch:
@@ -52,7 +52,7 @@ public void installFramework(File frameFile) throws AndrolibException {
     public void installFramework(File frameFile, String tag) throws AndrolibException {
         InputStream in = null;
         ZipOutputStream out = null;
-        try(ZipFile zip = new ZipFile(frameFile)) {
+        try (ZipFile zip = new ZipFile(frameFile)) {
             ZipEntry entry = zip.getEntry("resources.arsc");
 
             if (entry == null) {
@@ -247,8 +247,8 @@ public void emptyFrameworkDirectory() throws AndrolibException {
                         }
                     }
                 }
-            } catch (NullPointerException e) {
-                throw new AndrolibException(e);
+            } catch (NullPointerException ex) {
+                throw new AndrolibException(ex);
             }
         }
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResConfigFlags.java
Patch:
@@ -501,7 +501,7 @@ private String getLocaleString() {
 
     private String toUpper(char[] character) {
         StringBuilder sb = new StringBuilder();
-        for (char ch: character) {
+        for (char ch : character) {
             sb.append(Character.toUpperCase(ch));
         }
         return sb.toString();

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResTypeSpec.java
Patch:
@@ -48,7 +48,7 @@ public int getId() {
     }
 
     public boolean isString() {
-        return mName.equalsIgnoreCase(RES_TYPE_NAME_STRING);
+        return mName.equals(RES_TYPE_NAME_STRING);
     }
 
     public ResResSpec getResSpec(String name) throws AndrolibException {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResArrayValue.java
Patch:
@@ -41,8 +41,8 @@ public ResArrayValue(ResReferenceValue parent, ResScalarValue[] items) {
     }
 
     @Override
-    public void serializeToResValuesXml(XmlSerializer serializer,
-                                        ResResource res) throws IOException, AndrolibException {
+    public void serializeToResValuesXml(XmlSerializer serializer, ResResource res)
+            throws IOException, AndrolibException {
         String type = getType();
         type = (type == null ? "" : type + "-") + "array";
         serializer.startTag(null, type);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResScalarValue.java
Patch:
@@ -73,7 +73,7 @@ public void serializeToResValuesXml(XmlSerializer serializer,
         String body = encodeAsResXmlValue();
 
         // check for resource reference
-        if (!type.equalsIgnoreCase("color")) {
+        if (!type.equals("color")) {
             if (body.contains("@")) {
                 if (!res.getFilePath().contains("string")) {
                     item = true;
@@ -89,7 +89,7 @@ public void serializeToResValuesXml(XmlSerializer serializer,
         // Android does not allow values (false) for ids.xml anymore
         // https://issuetracker.google.com/issues/80475496
         // But it decodes as a ResBoolean, which makes no sense. So force it to empty
-        if (type.equalsIgnoreCase("id") && !body.isEmpty()) {
+        if (type.equals("id") && !body.isEmpty()) {
             body = "";
         }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -79,7 +79,7 @@ public ResIntBasedValue factory(String value, int rawValue) {
     }
 
     public ResBagValue bagFactory(int parent, Duo<Integer, ResScalarValue>[] items, ResTypeSpec resTypeSpec)
-        throws AndrolibException {
+            throws AndrolibException {
         ResReferenceValue parentVal = newReference(parent, null);
 
         if (items.length == 0) {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -317,7 +317,7 @@ private ResType readTableType() throws IOException, AndrolibException {
         int entriesStartAligned = mHeader.startPosition + entriesStart;
         if (mIn.position() < entriesStartAligned) {
             long bytesSkipped = mIn.skip(entriesStartAligned - mIn.position());
-            LOGGER.fine("Skipping: " + bytesSkipped + " byte(s) to align with ResTable_entry start.");
+            LOGGER.fine(String.format("Skipping: %d byte(s) to align with ResTable_entry start.", bytesSkipped));
         }
 
         for (int i : entryOffsetMap.keySet()) {
@@ -377,7 +377,7 @@ private EntryData readEntryData() throws IOException, AndrolibException {
             byte type = (byte) ((flags >> 8) & 0xFF);
             value = readCompactValue(type, specNamesId);
 
-            // To keep code below happy - we know if compact that the size has the key index encoded.
+            // To keep code below happy - we know if compact then the size has the key index encoded.
             specNamesId = size;
         } else if (isComplex) {
             value = readComplexEntry();
@@ -469,7 +469,7 @@ private ResIntBasedValue readCompactValue(byte type, int data) throws AndrolibEx
     }
 
     private ResIntBasedValue readValue() throws IOException, AndrolibException {
-		int size = mIn.readShort();
+		short size = mIn.readShort();
         if (size < 8) {
             return null;
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResStreamDecoder.java
Patch:
@@ -20,6 +20,5 @@
 import java.io.*;
 
 public interface ResStreamDecoder {
-    void decode(InputStream in, OutputStream out)
-            throws AndrolibException;
+    void decode(InputStream in, OutputStream out) throws AndrolibException;
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/StringBlock.java
Patch:
@@ -25,7 +25,6 @@
 import java.nio.ByteBuffer;
 import java.nio.charset.*;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 import java.util.logging.Logger;
 
@@ -139,7 +138,7 @@ public String getHTML(int index) {
         for (int i = 0; i < style.length; i += 3) {
             spans.add(new StyledString.Span(getString(style[i]), style[i + 1], style[i + 2]));
         }
-        Collections.sort(spans);
+        spans.sort(null);
 
         StyledString styledString = new StyledString(text, spans);
         return styledString.toString();
@@ -240,7 +239,7 @@ String decodeString(int offset, int length) {
             // in some places, Android uses 3-byte UTF-8 sequences instead of 4-bytes.
             // If decoding failed, we try to use CESU-8 decoder, which is closer to what Android actually uses.
             return CESU8_DECODER.decode(wrappedBufferRetry).toString();
-        } catch (CharacterCodingException e) {
+        } catch (CharacterCodingException ex) {
             LOGGER.warning("Failed to decode a string with CESU-8 decoder.");
             return null;
         }

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/AndroidOreoNotSparseTest.java
Patch:
@@ -39,16 +39,16 @@ public static void beforeClass() throws Exception {
         LOGGER.info("Unpacking not_sparse.apk...");
         TestUtils.copyResourceDir(AndroidOreoNotSparseTest.class, "aapt1/issue1594", sTestOrigDir);
 
-        File testApk = new File(sTestOrigDir, "not_sparse.apk");
+        ExtFile testApk = new ExtFile(sTestOrigDir, "not_sparse.apk");
 
         LOGGER.info("Decoding not_sparse.apk...");
         ApkDecoder apkDecoder = new ApkDecoder(testApk);
         apkDecoder.decode(sTestNewDir);
 
         LOGGER.info("Building not_sparse.apk...");
         Config config = Config.getDefaultConfig();
-        config.useAapt2 = false;
-        new ApkBuilder(config, sTestNewDir).build(testApk);
+        config.aaptVersion = 1;
+        new ApkBuilder(sTestNewDir, config).build(testApk);
     }
 
     @AfterClass

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/AndroidOreoSparseTest.java
Patch:
@@ -39,16 +39,16 @@ public static void beforeClass() throws Exception {
         LOGGER.info("Unpacking sparse.apk...");
         TestUtils.copyResourceDir(AndroidOreoSparseTest.class, "aapt1/issue1594", sTestOrigDir);
 
-        File testApk = new File(sTestOrigDir, "sparse.apk");
+        ExtFile testApk = new ExtFile(sTestOrigDir, "sparse.apk");
 
         LOGGER.info("Decoding sparse.apk...");
         ApkDecoder apkDecoder = new ApkDecoder(testApk);
         apkDecoder.decode(sTestNewDir);
 
         LOGGER.info("Building sparse.apk...");
         Config config = Config.getDefaultConfig();
-        config.useAapt2 = false;
-        new ApkBuilder(config, sTestNewDir).build(testApk);
+        config.aaptVersion = 1;
+        new ApkBuilder(sTestNewDir, config).build(testApk);
     }
 
     @AfterClass

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/BuildAndDecodeJarTest.java
Patch:
@@ -40,10 +40,10 @@ public static void beforeClass() throws Exception {
         TestUtils.copyResourceDir(BuildAndDecodeJarTest.class, "aapt1/testjar/", sTestOrigDir);
 
         LOGGER.info("Building testjar.jar...");
-        File testJar = new File(sTmpDir, "testjar.jar");
+        ExtFile testJar = new ExtFile(sTmpDir, "testjar.jar");
         Config config = Config.getDefaultConfig();
-        config.useAapt2 = false;
-        new ApkBuilder(config, sTestOrigDir).build(testJar);
+        config.aaptVersion = 1;
+        new ApkBuilder(sTestOrigDir, config).build(testJar);
 
         LOGGER.info("Decoding testjar.jar...");
         ApkDecoder apkDecoder = new ApkDecoder(testJar);

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/DebugTagRetainedTest.java
Patch:
@@ -48,11 +48,11 @@ public static void beforeClass() throws Exception {
 
         LOGGER.info("Building issue1235.apk...");
         Config config = Config.getDefaultConfig();
-        config.useAapt2 = false;
+        config.aaptVersion = 1;
         config.debugMode = true;
 
-        File testApk = new File(sTmpDir, "issue1235.apk");
-        new ApkBuilder(config, sTestOrigDir).build(testApk);
+        ExtFile testApk = new ExtFile(sTmpDir, "issue1235.apk");
+        new ApkBuilder(sTestOrigDir, config).build(testApk);
 
         LOGGER.info("Decoding issue1235.apk...");
         ApkDecoder apkDecoder = new ApkDecoder(testApk);

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/DefaultBaksmaliVariableTest.java
Patch:
@@ -42,10 +42,10 @@ public static void beforeClass() throws Exception {
         TestUtils.copyResourceDir(DefaultBaksmaliVariableTest.class, "aapt1/issue1481/", sTestOrigDir);
 
         LOGGER.info("Building issue1481.jar...");
-        File testJar = new File(sTmpDir, "issue1481.jar");
+        ExtFile testJar = new ExtFile(sTmpDir, "issue1481.jar");
         Config config = Config.getDefaultConfig();
-        config.useAapt2 = false;
-        new ApkBuilder(config, sTestOrigDir).build(testJar);
+        config.aaptVersion = 1;
+        new ApkBuilder(sTestOrigDir, config).build(testJar);
 
         LOGGER.info("Decoding issue1481.jar...");
         ApkDecoder apkDecoder = new ApkDecoder(testJar);

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/EmptyResourcesArscTest.java
Patch:
@@ -42,16 +42,16 @@ public static void beforeClass() throws Exception {
         LOGGER.info("Unpacking issue1730.apk...");
         TestUtils.copyResourceDir(EmptyResourcesArscTest.class, "aapt1/issue1730", sTestOrigDir);
 
-        File testApk = new File(sTestOrigDir, "issue1730.apk");
+        ExtFile testApk = new ExtFile(sTestOrigDir, "issue1730.apk");
 
         LOGGER.info("Decoding issue1730.apk...");
         ApkDecoder apkDecoder = new ApkDecoder(testApk);
         apkDecoder.decode(sTestNewDir);
 
         LOGGER.info("Building issue1730.apk...");
         Config config = Config.getDefaultConfig();
-        config.useAapt2 = false;
-        new ApkBuilder(config, sTestNewDir).build(testApk);
+        config.aaptVersion = 1;
+        new ApkBuilder(sTestNewDir, config).build(testApk);
     }
 
     @AfterClass

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/ExternalEntityTest.java
Patch:
@@ -39,10 +39,10 @@ public static void beforeClass() throws Exception {
         TestUtils.copyResourceDir(ExternalEntityTest.class, "decode/doctype/", sTestOrigDir);
 
         LOGGER.info("Building doctype.apk...");
-        File testApk = new File(sTestOrigDir, "doctype.apk");
+        ExtFile testApk = new ExtFile(sTestOrigDir, "doctype.apk");
         Config config = Config.getDefaultConfig();
-        config.useAapt2 = false;
-        new ApkBuilder(config, sTestOrigDir).build(testApk);
+        config.aaptVersion = 1;
+        new ApkBuilder(sTestOrigDir, config).build(testApk);
 
         LOGGER.info("Decoding doctype.apk...");
         ApkDecoder apkDecoder = new ApkDecoder(testApk);

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/SkipAssetTest.java
Patch:
@@ -52,7 +52,7 @@ public void checkIfEnablingSkipAssetWorks() throws BrutException, IOException {
         config.forceDelete = true;
 
         // decode issue1605.apk
-        ApkDecoder apkDecoder = new ApkDecoder(config, new ExtFile(sTmpDir + File.separator + apk));
+        ApkDecoder apkDecoder = new ApkDecoder(new ExtFile(sTmpDir + File.separator + apk), config);
         sTestOrigDir = new ExtFile(sTmpDir + File.separator + apk + ".out");
         apkDecoder.decode(sTestOrigDir);
 
@@ -69,7 +69,7 @@ public void checkControl() throws BrutException, IOException {
         config.forceDelete = true;
 
         // decode issue1605.apk
-        ApkDecoder apkDecoder = new ApkDecoder(config, new ExtFile(sTmpDir + File.separator + apk));
+        ApkDecoder apkDecoder = new ApkDecoder(new ExtFile(sTmpDir + File.separator + apk), config);
         sTestOrigDir = new ExtFile(sTmpDir + File.separator + apk + ".out");
         apkDecoder.decode(sTestOrigDir);
 

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt2/DebuggableFalseChangeToTrueTest.java
Patch:
@@ -49,11 +49,10 @@ public static void beforeClass() throws Exception {
         LOGGER.info("Building issue2328-debuggable-flase.apk...");
         Config config = Config.getDefaultConfig();
         config.debugMode = true;
-        config.useAapt2 = true;
         config.verbose = true;
 
-        File testApk = new File(sTmpDir, "issue2328-debuggable-flase.apk");
-        new ApkBuilder(config, sTestOrigDir).build(testApk);
+        ExtFile testApk = new ExtFile(sTmpDir, "issue2328-debuggable-flase.apk");
+        new ApkBuilder(sTestOrigDir, config).build(testApk);
 
         LOGGER.info("Decoding issue2328-debuggable-flase.apk...");
         ApkDecoder apkDecoder = new ApkDecoder(testApk);

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt2/DebuggableTrueAddedTest.java
Patch:
@@ -49,11 +49,10 @@ public static void beforeClass() throws Exception {
         LOGGER.info("Building issue2328-debuggable-missing.apk...");
         Config config = Config.getDefaultConfig();
         config.debugMode = true;
-        config.useAapt2 = true;
         config.verbose = true;
 
-        File testApk = new File(sTmpDir, "issue2328-debuggable-missing.apk");
-        new ApkBuilder(config, sTestOrigDir).build(testApk);
+        ExtFile testApk = new ExtFile(sTmpDir, "issue2328-debuggable-missing.apk");
+        new ApkBuilder(sTestOrigDir, config).build(testApk);
 
         LOGGER.info("Decoding issue2328-debuggable-missing.apk...");
         ApkDecoder apkDecoder = new ApkDecoder(testApk);

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt2/DebuggableTrueRetainedTest.java
Patch:
@@ -49,11 +49,10 @@ public static void beforeClass() throws Exception {
         LOGGER.info("Building issue2328-debuggable-true.apk...");
         Config config = Config.getDefaultConfig();
         config.debugMode = true;
-        config.useAapt2 = true;
         config.verbose = true;
 
-        File testApk = new File(sTmpDir, "issue2328-debuggable-true.apk");
-        new ApkBuilder(config, sTestOrigDir).build(testApk);
+        ExtFile testApk = new ExtFile(sTmpDir, "issue2328-debuggable-true.apk");
+        new ApkBuilder(sTestOrigDir, config).build(testApk);
 
         LOGGER.info("Decoding issue2328-debuggable-true.apk...");
         ApkDecoder apkDecoder = new ApkDecoder(testApk);

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt2/NetworkConfigTest.java
Patch:
@@ -53,9 +53,8 @@ public static void beforeClass() throws Exception {
         LOGGER.info("Building testapp.apk...");
         Config config = Config.getDefaultConfig();
         config.netSecConf = true;
-        config.useAapt2 = true;
-        File testApk = new File(sTmpDir, "testapp.apk");
-        new ApkBuilder(config, sTestOrigDir).build(testApk);
+        ExtFile testApk = new ExtFile(sTmpDir, "testapp.apk");
+        new ApkBuilder(sTestOrigDir, config).build(testApk);
 
         LOGGER.info("Decoding testapp.apk...");
         ApkDecoder apkDecoder = new ApkDecoder(testApk);

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt2/NoNetworkConfigTest.java
Patch:
@@ -55,9 +55,8 @@ public static void beforeClass() throws Exception {
         LOGGER.info("Building testapp.apk...");
         Config config = Config.getDefaultConfig();
         config.netSecConf = true;
-        config.useAapt2 = true;
-        File testApk = new File(sTmpDir, "testapp.apk");
-        new ApkBuilder(config, sTestOrigDir).build(testApk);
+        ExtFile testApk = new ExtFile(sTmpDir, "testapp.apk");
+        new ApkBuilder(sTestOrigDir, config).build(testApk);
 
         LOGGER.info("Decoding testapp.apk...");
         ApkDecoder apkDecoder = new ApkDecoder(testApk);

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt2/NonStandardPkgIdTest.java
Patch:
@@ -45,12 +45,11 @@ public static void beforeClass() throws Exception {
         TestUtils.copyResourceDir(BuildAndDecodeTest.class, "aapt2/pkgid8/", sTestOrigDir);
 
         Config config = Config.getDefaultConfig();
-        config.useAapt2 = true;
         config.verbose = true;
 
         LOGGER.info("Building pkgid8.apk...");
         ExtFile testApk = new ExtFile(sTmpDir, "pkgid8.apk");
-        new ApkBuilder(config, sTestOrigDir).build(testApk);
+        new ApkBuilder(sTestOrigDir, config).build(testApk);
 
         LOGGER.info("Decoding pkgid8.apk...");
         ApkInfo testInfo = new ApkInfo(testApk);

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/apk/ConsistentPropertyTest.java
Patch:
@@ -40,11 +40,8 @@ public void testAssertingAllKnownApkInfoProperties() throws AndrolibException {
         assertEquals("com.test.basic", apkInfo.packageInfo.renameManifestPackage);
         assertEquals("71", apkInfo.versionInfo.versionCode);
         assertEquals("1.0.70", apkInfo.versionInfo.versionName);
-        assertFalse(apkInfo.resourcesAreCompressed);
         assertFalse(apkInfo.sharedLibrary);
         assertTrue(apkInfo.sparseResources);
-        assertEquals(1, apkInfo.unknownFiles.size());
         assertEquals(2, apkInfo.doNotCompress.size());
-        assertFalse(apkInfo.compressionType);
     }
 }

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/AndResGuardTest.java
Patch:
@@ -48,7 +48,7 @@ public void checkifAndResDecodeRemapsRFolder() throws BrutException, IOException
         String apk = "issue1170.apk";
 
         // decode issue1170.apk
-        ApkDecoder apkDecoder = new ApkDecoder(new File(sTmpDir + File.separator + apk));
+        ApkDecoder apkDecoder = new ApkDecoder(new ExtFile(sTmpDir + File.separator + apk));
         sTestOrigDir = new ExtFile(sTmpDir + File.separator + apk + ".out");
 
         File outDir = new File(sTmpDir + File.separator + apk + ".out");
@@ -65,7 +65,7 @@ public void checkIfAndResDecodeRemapsRFolderInRawMode() throws BrutException, IO
         config.forceDelete = true;
         config.decodeResources = Config.DECODE_RESOURCES_NONE;
         String apk = "issue1170.apk";
-        ApkDecoder apkDecoder = new ApkDecoder(config, new File(sTmpDir + File.separator + apk));
+        ApkDecoder apkDecoder = new ApkDecoder(new ExtFile(sTmpDir + File.separator + apk), config);
         sTestOrigDir = new ExtFile(sTmpDir + File.separator + apk + ".raw.out");
         File outDir = new File(sTmpDir + File.separator + apk + ".raw.out");
         apkDecoder.decode(outDir);

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/CompactResourceTest.java
Patch:
@@ -48,7 +48,7 @@ public static void afterClass() throws BrutException {
     @Test
     public void checkIfDecodeSucceeds() throws BrutException, IOException, ParserConfigurationException, SAXException {
         String apk = "issue3366.apk";
-        File testApk = new File(sTmpDir, apk);
+        ExtFile testApk = new ExtFile(sTmpDir, apk);
 
         // decode issue3366.apk
         ApkDecoder apkDecoder = new ApkDecoder(testApk);
@@ -62,6 +62,6 @@ public void checkIfDecodeSucceeds() throws BrutException, IOException, ParserCon
 
         Config config = Config.getDefaultConfig();
         LOGGER.info("Building duplicatedex.apk...");
-        new ApkBuilder(config, sTestOrigDir).build(testApk);
+        new ApkBuilder(sTestOrigDir, config).build(testApk);
     }
 }

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/DecodeKotlinTest.java
Patch:
@@ -43,7 +43,7 @@ public static void beforeClass() throws Exception {
         String apk = "testkotlin.apk";
 
         // decode testkotlin.apk
-        ApkDecoder apkDecoder = new ApkDecoder(new File(sTmpDir + File.separator + apk));
+        ApkDecoder apkDecoder = new ApkDecoder(new ExtFile(sTmpDir + File.separator + apk));
         sTestNewDir = new ExtFile(sTmpDir + File.separator + apk + ".out");
 
         File outDir = new File(sTmpDir + File.separator + apk + ".out");

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/DoubleExtensionUnknownFileTest.java
Patch:
@@ -52,15 +52,15 @@ public void multipleExtensionUnknownFileTest() throws BrutException, IOException
         String apk = "issue1244.apk";
 
         // decode issue1244.apk
-        ApkDecoder apkDecoder = new ApkDecoder(new File(sTmpDir + File.separator + apk));
+        ApkDecoder apkDecoder = new ApkDecoder(new ExtFile(sTmpDir + File.separator + apk));
         ExtFile decodedApk = new ExtFile(sTmpDir + File.separator + apk + ".out");
         File outDir = new File(sTmpDir + File.separator + apk + ".out");
         apkDecoder.decode(outDir);
 
         ApkInfo apkInfo = ApkInfo.load(decodedApk);
         for (String string : apkInfo.doNotCompress) {
             if (StringUtils.countMatches(string, ".") > 1) {
-                assertTrue(string.equalsIgnoreCase("assets/bin/Data/sharedassets1.assets.split0"));
+                assertTrue(string.equals("assets/bin/Data/sharedassets1.assets.split0"));
             }
         }
     }

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/Empty9PatchTest.java
Patch:
@@ -51,7 +51,7 @@ public void decodeWithEmpty9PatchFile() throws BrutException, IOException {
         String apk = "empty9patch.apk";
 
         // decode empty9patch.apk
-        ApkDecoder apkDecoder = new ApkDecoder(new File(sTmpDir + File.separator + apk));
+        ApkDecoder apkDecoder = new ApkDecoder(new ExtFile(sTmpDir + File.separator + apk));
         sTestOrigDir = new ExtFile(sTmpDir + File.separator + apk + ".out");
 
         File outDir = new File(sTmpDir + File.separator + apk + ".out");

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/EmptyArscTest.java
Patch:
@@ -50,7 +50,7 @@ public void decodeWithEmptyArscFile() throws BrutException, IOException {
         String apk = "test.apk";
 
         // decode test.apk
-        ApkDecoder apkDecoder = new ApkDecoder(new File(sTmpDir + File.separator + apk));
+        ApkDecoder apkDecoder = new ApkDecoder(new ExtFile(sTmpDir + File.separator + apk));
         sTestOrigDir = new ExtFile(sTmpDir + File.separator + apk + ".out");
 
         File outDir = new File(sTmpDir + File.separator + apk + ".out");

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/ForceManifestDecodeNoResourcesTest.java
Patch:
@@ -139,7 +139,7 @@ private void decodeFile(String apk, short decodeResources, short decodeManifest,
         config.forceDelete = true;
         config.decodeResources = decodeResources;
         config.forceDecodeManifest = decodeManifest;
-        ApkDecoder apkDecoder = new ApkDecoder(config, new File(apk));
+        ApkDecoder apkDecoder = new ApkDecoder(new ExtFile(apk), config);
         apkDecoder.decode(new File(output));
     }
 }

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/MinifiedArscTest.java
Patch:
@@ -48,7 +48,7 @@ public static void beforeClass() throws Exception {
         Config config = Config.getDefaultConfig();
         config.forceDelete = true;
         // decode issue1157.apk
-        ApkDecoder apkDecoder = new ApkDecoder(config, new ExtFile(sTmpDir, apk));
+        ApkDecoder apkDecoder = new ApkDecoder(new ExtFile(sTmpDir, apk), config);
         // this should not raise an exception:
         apkDecoder.decode(sTestNewDir);
     }

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/MissingVersionManifestTest.java
Patch:
@@ -51,7 +51,7 @@ public void missingVersionParsesCorrectlyTest() throws BrutException, IOExceptio
         String apk = "issue1264.apk";
 
         // decode issue1264.apk
-        ApkDecoder apkDecoder = new ApkDecoder(new File(sTmpDir + File.separator + apk));
+        ApkDecoder apkDecoder = new ApkDecoder(new ExtFile(sTmpDir + File.separator + apk));
         ExtFile decodedApk = new ExtFile(sTmpDir + File.separator + apk + ".out");
         File outDir = new File(sTmpDir + File.separator + apk + ".out");
         apkDecoder.decode(outDir);

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/OutsideOfDirectoryEntryTest.java
Patch:
@@ -42,7 +42,7 @@ public static void beforeClass() throws Exception {
         String apk = "issue1589.apk";
 
         // decode issue1589.apk
-        ApkDecoder apkDecoder = new ApkDecoder(new File(sTmpDir + File.separator + apk));
+        ApkDecoder apkDecoder = new ApkDecoder(new ExtFile(sTmpDir + File.separator + apk));
         sTestNewDir = new ExtFile(sTmpDir + File.separator + apk + ".out");
 
         File outDir = new File(sTmpDir + File.separator + apk + ".out");

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/ParentDirectoryTraversalTest.java
Patch:
@@ -52,7 +52,7 @@ public void checkIfDrawableFileDecodesProperly() throws BrutException, IOExcepti
         config.forceDelete = true;
         config.decodeResources = Config.DECODE_RESOURCES_NONE;
         // decode issue1498.apk
-        ApkDecoder apkDecoder = new ApkDecoder(config, new File(sTmpDir + File.separator + apk));
+        ApkDecoder apkDecoder = new ApkDecoder(new ExtFile(sTmpDir + File.separator + apk), config);
         File outDir = new File(sTmpDir + File.separator + apk + ".out");
         // this should not raise an exception:
         apkDecoder.decode(outDir);

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/ProtectedApkTest.java
Patch:
@@ -47,7 +47,7 @@ public void checkIfDecodeWorksWithoutCrash() throws BrutException, IOException {
         String apk = "protected-v1.apk";
 
         // decode protected-v1.apk
-        ApkDecoder apkDecoder = new ApkDecoder(new File(sTmpDir + File.separator + apk));
+        ApkDecoder apkDecoder = new ApkDecoder(new ExtFile(sTmpDir + File.separator + apk));
         sTestOrigDir = new ExtFile(sTmpDir + File.separator + apk + ".out");
 
         File outDir = new File(sTmpDir + File.separator + apk + ".out");

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/ResourceDirectoryTraversalTest.java
Patch:
@@ -52,7 +52,7 @@ public void checkIfMaliciousRawFileIsDisassembledProperly() throws BrutException
 
         Config config = Config.getDefaultConfig();
         config.forceDelete = true;
-        ApkDecoder apkDecoder = new ApkDecoder(config, new File(sTmpDir + File.separator + apk));
+        ApkDecoder apkDecoder = new ApkDecoder(new ExtFile(sTmpDir + File.separator + apk), config);
         File outDir = new File(sTmpDir + File.separator + apk + ".out");
         apkDecoder.decode(outDir);
 

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/ResourceModeTest.java
Patch:
@@ -53,7 +53,7 @@ public void checkDecodingModeAsRemove() throws BrutException, IOException {
         config.setDecodeResolveMode(Config.DECODE_RES_RESOLVE_REMOVE);
 
         // decode issue2836.apk
-        ApkDecoder apkDecoder = new ApkDecoder(config, new File(sTmpDir + File.separator + apk));
+        ApkDecoder apkDecoder = new ApkDecoder(new ExtFile(sTmpDir + File.separator + apk), config);
         sTestOrigDir = new ExtFile(sTmpDir + File.separator + apk + "remove.out");
 
         File outDir = new File(sTmpDir + File.separator + apk + "remove.out");
@@ -84,7 +84,7 @@ public void checkDecodingModeAsDummies() throws BrutException, IOException {
         config.setDecodeResolveMode(Config.DECODE_RES_RESOLVE_DUMMY);
 
         // decode issue2836.apk
-        ApkDecoder apkDecoder = new ApkDecoder(config, new File(sTmpDir + File.separator + apk));
+        ApkDecoder apkDecoder = new ApkDecoder(new ExtFile(sTmpDir + File.separator + apk), config);
         sTestOrigDir = new ExtFile(sTmpDir + File.separator + apk + "dummies.out");
 
         File outDir = new File(sTmpDir + File.separator + apk + "dummies.out");
@@ -115,7 +115,7 @@ public void checkDecodingModeAsLeave() throws BrutException, IOException {
         config.setDecodeResolveMode(Config.DECODE_RES_RESOLVE_RETAIN);
 
         // decode issue2836.apk
-        ApkDecoder apkDecoder = new ApkDecoder(config, new File(sTmpDir + File.separator + apk));
+        ApkDecoder apkDecoder = new ApkDecoder(new ExtFile(sTmpDir + File.separator + apk), config);
         sTestOrigDir = new ExtFile(sTmpDir + File.separator + apk + "leave.out");
 
         File outDir = new File(sTmpDir + File.separator + apk + "leave.out");

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/VectorDrawableTest.java
Patch:
@@ -50,7 +50,7 @@ public void checkIfDrawableFileDecodesProperly() throws BrutException, IOExcepti
         String apk = "issue1456.apk";
 
         // decode issue1456.apk
-        ApkDecoder apkDecoder = new ApkDecoder(new File(sTmpDir + File.separator + apk));
+        ApkDecoder apkDecoder = new ApkDecoder(new ExtFile(sTmpDir + File.separator + apk));
         sTestOrigDir = new ExtFile(sTmpDir + File.separator + apk + ".out");
 
         File outDir = new File(sTmpDir + File.separator + apk + ".out");

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/res/src/DexStaticFieldValueTest.java
Patch:
@@ -49,11 +49,11 @@ public static void beforeClass() throws Exception {
 
         LOGGER.info("Building issue2543.apk...");
         File testApk = new File(sTmpDir, "issue2543.apk");
-        new ApkBuilder(config, sTestOrigDir).build(testApk);
+        new ApkBuilder(sTestOrigDir, config).build(testApk);
 
         LOGGER.info("Decoding issue2543.apk...");
         config.baksmaliDebugMode = false;
-        ApkDecoder apkDecoder = new ApkDecoder(config, new ExtFile(testApk));
+        ApkDecoder apkDecoder = new ApkDecoder(new ExtFile(testApk), config);
         apkDecoder.decode(sTestNewDir);
     }
 

File: brut.j.util/src/main/java/brut/util/OS.java
Patch:
@@ -126,7 +126,7 @@ public static String execAndReturn(String[] cmd) {
                 System.err.println("Stream collector did not terminate.");
             }
             return collector.get();
-        } catch (IOException | InterruptedException e) {
+        } catch (IOException | InterruptedException ex) {
             return null;
         }
     }
@@ -149,8 +149,8 @@ public static File createTempDirectory() throws BrutException {
 
     static class StreamForwarder extends Thread {
 
-        StreamForwarder(InputStream is, String type) {
-            mIn = is;
+        StreamForwarder(InputStream in, String type) {
+            mIn = in;
             mType = type;
         }
 

File: brut.j.util/src/main/java/brut/util/OSDetection.java
Patch:
@@ -39,7 +39,7 @@ public static boolean is64Bit() {
 
             return arch != null && arch.endsWith("64") || wow64Arch != null && wow64Arch.endsWith("64");
         }
-        return BIT.equalsIgnoreCase("64");
+        return BIT.equals("64");
     }
 
     public static String returnOS() {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/apk/ApkInfo.java
Patch:
@@ -194,6 +194,8 @@ private int mapSdkShorthandToVersion(String sdkVersion) {
                 return ResConfigFlags.SDK_UPSIDEDOWN_CAKE;
             case "VANILLAICECREAM":
             case "VANILLA_ICE_CREAM":
+                return ResConfigFlags.SDK_VANILLA_ICE_CREAM;
+            case "SDK_CUR_DEVELOPMENT":
                 return ResConfigFlags.SDK_DEVELOPMENT;
             default:
                 return Integer.parseInt(sdkVersion);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResConfigFlags.java
Patch:
@@ -569,6 +569,7 @@ public int hashCode() {
     public final static byte SDK_S_V2 = 32;
     public final static byte SDK_TIRAMISU = 33;
     public final static byte SDK_UPSIDEDOWN_CAKE = 34;
+    public final static byte SDK_VANILLA_ICE_CREAM = 35;
 
     // AOSP has this as 10,000 for dev purposes.
     // platform_frameworks_base/commit/c7a1109a1fe0771d4c9b572dcf178e2779fc4f2d

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/apk/InvalidSdkBoundingTest.java
Patch:
@@ -100,7 +100,7 @@ public void checkForSdkDevelopmentInsaneTestValue() {
         ApkInfo apkInfo = new ApkInfo();
 
         Map<String, String> sdkInfo = new LinkedHashMap<>();
-        sdkInfo.put("targetSdkVersion", "VANILLAICECREAM");
+        sdkInfo.put("targetSdkVersion", "SDK_CUR_DEVELOPMENT");
 
         apkInfo.setSdkInfo(sdkInfo);
         assertEquals("10000", apkInfo.checkTargetSdkVersionBounds());

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkDecoder.java
Patch:
@@ -49,7 +49,7 @@ public class ApkDecoder {
     private final static String UNK_DIRNAME = "unknown";
     private final static String[] APK_STANDARD_ALL_FILENAMES = new String[] {
         "classes.dex", "AndroidManifest.xml", "resources.arsc", "res", "r", "R",
-        "lib", "libs", "assets", "META-INF", "kotlin" };
+        "lib", "libs", "assets", "META-INF", "kotlin", "stamp-cert-sha256" };
     private final static String[] APK_RESOURCES_FILENAMES = new String[] {
         "resources.arsc", "res", "r", "R" };
     private final static String[] APK_MANIFEST_FILENAMES = new String[] {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkBuilder.java
Patch:
@@ -482,7 +482,7 @@ private void copyUnknownFiles(ZipOutputStream outputFile, Map<String, String> fi
             File inputFile;
 
             try {
-                inputFile = new File(unknownFileDir, BrutIO.sanitizeUnknownFile(unknownFileDir, unknownFileInfo.getKey()));
+                inputFile = new File(unknownFileDir, BrutIO.sanitizeFilepath(unknownFileDir, unknownFileInfo.getKey()));
             } catch (RootUnknownFileException | InvalidUnknownFileException | TraversalUnknownFileException exception) {
                 LOGGER.warning(String.format("Skipping file %s (%s)", unknownFileInfo.getKey(), exception.getMessage()));
                 continue;

File: brut.j.dir/src/main/java/brut/directory/DirUtil.java
Patch:
@@ -89,7 +89,7 @@ public static void copyToDir(Directory in, File out, String fileName)
             } else if (!in.containsDir(fileName) && !in.containsFile(fileName)) {
                 // Skip copies of directories/files not found.
             } else {
-                String cleanedFilename = BrutIO.sanitizeUnknownFile(out, fileName);
+                String cleanedFilename = BrutIO.sanitizeFilepath(out, fileName);
                 if (! cleanedFilename.isEmpty()) {
                     File outFile = new File(out, cleanedFilename);
                     //noinspection ResultOfMethodCallIgnored

File: brut.j.dir/src/main/java/brut/directory/FileDirectory.java
Patch:
@@ -119,7 +119,7 @@ private void loadAll() {
         }
     }
 
-    private File getDir() {
+    public File getDir() {
         return mDir;
     }
 }

File: brut.j.dir/src/main/java/brut/directory/ZipUtils.java
Patch:
@@ -59,8 +59,8 @@ private static void processFolder(final File folder, final ZipOutputStream zipOu
             throws BrutException, IOException {
         for (final File file : folder.listFiles()) {
             if (file.isFile()) {
-                final String cleanedPath = BrutIO.sanitizeUnknownFile(folder, file.getPath().substring(prefixLength));
-                final ZipEntry zipEntry = new ZipEntry(BrutIO.normalizePath(cleanedPath));
+                final String cleanedPath = BrutIO.sanitizeFilepath(folder, file.getPath().substring(prefixLength));
+                final ZipEntry zipEntry = new ZipEntry(BrutIO.adaptSeparatorToUnix(cleanedPath));
 
                 // aapt binary by default takes in parameters via -0 arsc to list extensions that shouldn't be
                 // compressed. We will replicate that behavior

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkBuilder.java
Patch:
@@ -480,7 +480,7 @@ private void copyUnknownFiles(ZipOutputStream outputFile, Map<String, String> fi
             File inputFile;
 
             try {
-                inputFile = new File(unknownFileDir, BrutIO.sanitizeUnknownFile(unknownFileDir, unknownFileInfo.getKey()));
+                inputFile = new File(unknownFileDir, BrutIO.sanitizeFilepath(unknownFileDir, unknownFileInfo.getKey()));
             } catch (RootUnknownFileException | InvalidUnknownFileException | TraversalUnknownFileException exception) {
                 LOGGER.warning(String.format("Skipping file %s (%s)", unknownFileInfo.getKey(), exception.getMessage()));
                 continue;

File: brut.j.dir/src/main/java/brut/directory/DirUtil.java
Patch:
@@ -89,7 +89,7 @@ public static void copyToDir(Directory in, File out, String fileName)
             } else if (!in.containsDir(fileName) && !in.containsFile(fileName)) {
                 // Skip copies of directories/files not found.
             } else {
-                String cleanedFilename = BrutIO.sanitizeUnknownFile(out, fileName);
+                String cleanedFilename = BrutIO.sanitizeFilepath(out, fileName);
                 if (! cleanedFilename.isEmpty()) {
                     File outFile = new File(out, cleanedFilename);
                     //noinspection ResultOfMethodCallIgnored

File: brut.j.dir/src/main/java/brut/directory/FileDirectory.java
Patch:
@@ -119,7 +119,7 @@ private void loadAll() {
         }
     }
 
-    private File getDir() {
+    public File getDir() {
         return mDir;
     }
 }

File: brut.j.dir/src/main/java/brut/directory/ZipUtils.java
Patch:
@@ -57,8 +57,8 @@ private static void processFolder(final File folder, final ZipOutputStream zipOu
             throws BrutException, IOException {
         for (final File file : folder.listFiles()) {
             if (file.isFile()) {
-                final String cleanedPath = BrutIO.sanitizeUnknownFile(folder, file.getPath().substring(prefixLength));
-                final ZipEntry zipEntry = new ZipEntry(BrutIO.normalizePath(cleanedPath));
+                final String cleanedPath = BrutIO.sanitizeFilepath(folder, file.getPath().substring(prefixLength));
+                final ZipEntry zipEntry = new ZipEntry(BrutIO.adaptSeparatorToUnix(cleanedPath));
 
                 // aapt binary by default takes in parameters via -0 arsc to list extensions that shouldn't be
                 // compressed. We will replicate that behavior

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/apk/ApkInfo.java
Patch:
@@ -42,7 +42,7 @@ public class ApkInfo implements YamlSerializable {
     public Map<String, String> unknownFiles = new LinkedHashMap<>();
     public List<String> doNotCompress;
 
-    /** @Deprecated use {@link #resourcesAreCompressed} */
+    /** @deprecated use {@link #resourcesAreCompressed} */
     public boolean compressionType;
 
     public ApkInfo() {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -32,9 +32,7 @@ public ResValueFactory(ResPackage package_) {
     public ResScalarValue factory(int type, int value, String rawValue) throws AndrolibException {
         switch (type) {
             case TypedValue.TYPE_NULL:
-                if (value == TypedValue.DATA_NULL_UNDEFINED) { // Special case $empty as explicitly defined empty value
-                    return new ResStringValue(null, value);
-                } else if (value == TypedValue.DATA_NULL_EMPTY) {
+                if (value == TypedValue.DATA_NULL_EMPTY) {
                     return new ResEmptyValue(value, rawValue, type);
                 }
                 return new ResReferenceValue(mPackage, 0, null);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Config.java
Patch:
@@ -51,7 +51,7 @@ public class Config {
     public boolean verbose = false;
     public boolean copyOriginalFiles = false;
     public boolean updateFiles = false;
-    public boolean useAapt2 = false;
+    public boolean useAapt2 = true;
     public boolean noCrunch = false;
     public int forceApi = 0;
 

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/AndroidOreoNotSparseTest.java
Patch:
@@ -47,6 +47,7 @@ public static void beforeClass() throws Exception {
 
         LOGGER.info("Building not_sparse.apk...");
         Config config = Config.getDefaultConfig();
+        config.useAapt2 = false;
         new ApkBuilder(config, sTestNewDir).build(testApk);
     }
 

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/AndroidOreoSparseTest.java
Patch:
@@ -47,6 +47,7 @@ public static void beforeClass() throws Exception {
 
         LOGGER.info("Building sparse.apk...");
         Config config = Config.getDefaultConfig();
+        config.useAapt2 = false;
         new ApkBuilder(config, sTestNewDir).build(testApk);
     }
 

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/DebugTagRetainedTest.java
Patch:
@@ -48,6 +48,7 @@ public static void beforeClass() throws Exception {
 
         LOGGER.info("Building issue1235.apk...");
         Config config = Config.getDefaultConfig();
+        config.useAapt2 = false;
         config.debugMode = true;
 
         File testApk = new File(sTmpDir, "issue1235.apk");

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/EmptyResourcesArscTest.java
Patch:
@@ -50,6 +50,7 @@ public static void beforeClass() throws Exception {
 
         LOGGER.info("Building issue1730.apk...");
         Config config = Config.getDefaultConfig();
+        config.useAapt2 = false;
         new ApkBuilder(config, sTestNewDir).build(testApk);
     }
 

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/SharedLibraryTest.java
Patch:
@@ -81,6 +81,7 @@ public void isSharedResourceDecodingAndRebuildingWorking() throws IOException, B
         Config config = Config.getDefaultConfig();
         config.frameworkDirectory = sTmpDir.getAbsolutePath();
         config.frameworkTag = "shared";
+        config.useAapt2 = false;
 
         // install library/framework
         new Framework(config).installFramework(new File(sTmpDir + File.separator + library));

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/UnknownCompressionTest.java
Patch:
@@ -42,6 +42,7 @@ public static void beforeClass() throws Exception {
         String apk = "deflated_unknowns.apk";
         Config config = Config.getDefaultConfig();
         config.frameworkDirectory = sTmpDir.getAbsolutePath();
+        config.useAapt2 = false;
 
         sTestOrigDir = new ExtFile(sTmpDir, apk);
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/apk/ApkInfo.java
Patch:
@@ -191,6 +191,7 @@ private int mapSdkShorthandToVersion(String sdkVersion) {
                 return ResConfigFlags.SDK_TIRAMISU;
             case "UPSIDEDOWNCAKE":
             case "UPSIDE_DOWN_CAKE":
+                return ResConfigFlags.SDK_UPSIDEDOWN_CAKE;
             case "VANILLAICECREAM":
             case "VANILLA_ICE_CREAM":
                 return ResConfigFlags.SDK_DEVELOPMENT;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResArrayValue.java
Patch:
@@ -91,6 +91,4 @@ public String getType() throws AndrolibException {
 
     private final ResScalarValue[] mItems;
     private final String[] AllowedArrayTypes = {"string", "integer"};
-
-    public static final int BAG_KEY_ARRAY_START = 0x02000000;
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResFlagsAttr.java
Patch:
@@ -29,12 +29,12 @@
 
 public class ResFlagsAttr extends ResAttr {
     ResFlagsAttr(ResReferenceValue parent, int type, Integer min, Integer max,
-                 Boolean l10n, Duo<ResReferenceValue, ResIntValue>[] items) {
+                 Boolean l10n, Duo<ResReferenceValue, ResScalarValue>[] items) {
         super(parent, type, min, max, l10n);
 
         mItems = new FlagItem[items.length];
         for (int i = 0; i < items.length; i++) {
-            mItems[i] = new FlagItem(items[i].m1, items[i].m2.getValue());
+            mItems[i] = new FlagItem(items[i].m1, items[i].m2.getRawIntValue());
         }
     }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResPluralsValue.java
Patch:
@@ -59,6 +59,5 @@ public void serializeToResValuesXml(XmlSerializer serializer,
     private final ResScalarValue[] mItems;
 
     public static final int BAG_KEY_PLURALS_START = 0x01000004;
-    public static final int BAG_KEY_PLURALS_END = 0x01000009;
     private static final String[] QUANTITY_MAP = new String[] { "other", "zero", "one", "two", "few", "many" };
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResStyleValue.java
Patch:
@@ -53,7 +53,7 @@ public void serializeToResValuesXml(XmlSerializer serializer,
             ResResSpec spec = mItem.m1.getReferent();
 
             if (spec == null) {
-                LOGGER.fine(String.format("null reference: m1=0x%08x(%s), m2=0x%08x(%s)",
+                LOGGER.fine(String.format("null style reference: m1=0x%08x(%s), m2=0x%08x(%s)",
                     mItem.m1.getRawIntValue(), mItem.m1.getType(), mItem.m2.getRawIntValue(), mItem.m2.getType()));
                 continue;
             }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlPatcher.java
Patch:
@@ -365,7 +365,7 @@ public static void renameManifestPackage(File file, String packageOriginal) {
      * @throws SAXException
      * @throws ParserConfigurationException
      */
-    private static Document loadDocument(File file)
+    public static Document loadDocument(File file)
             throws IOException, SAXException, ParserConfigurationException {
 
         DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -270,7 +270,9 @@ private ResType readTableType() throws IOException, AndrolibException {
 
         mHeader.checkForUnreadHeader(mIn);
 
-        if ((typeFlags & 0x01) != 0) {
+        // Be sure we don't poison mResTable by marking the application as sparse
+        // Only flag the ResTable as sparse if the main package is not loaded.
+        if ((typeFlags & 0x01) != 0 && !mResTable.isMainPkgLoaded()) {
             mResTable.setSparseResources(true);
         }
 

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/SparseFlagTest.java
Patch:
@@ -54,6 +54,7 @@ public void decodeWithExpectationOfSparseResources() throws BrutException, IOExc
 
         LOGGER.info("Decoding sparse.apk...");
         Config config = Config.getDefaultConfig();
+        config.frameworkTag = "issue-3298";
 
         ApkDecoder apkDecoder = new ApkDecoder(config, testApk);
         ApkInfo apkInfo = apkDecoder.decode(sTestNewDir);
@@ -70,6 +71,7 @@ public void decodeWithExpectationOfNoSparseResources() throws BrutException, IOE
 
         LOGGER.info("Decoding not-sparse.apk...");
         Config config = Config.getDefaultConfig();
+        config.frameworkTag = "issue-3298";
 
         ApkDecoder apkDecoder = new ApkDecoder(config, testApk);
         ApkInfo apkInfo = apkDecoder.decode(sTestNewDir);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/apk/ApkInfo.java
Patch:
@@ -42,7 +42,7 @@ public class ApkInfo implements YamlSerializable {
     public Map<String, String> unknownFiles = new LinkedHashMap<>();
     public List<String> doNotCompress;
 
-    /** @deprecated use {@link #resourcesAreCompressed} */
+    /** @Deprecated use {@link #resourcesAreCompressed} */
     public boolean compressionType;
 
     public ApkInfo() {

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -235,7 +235,6 @@ private static void cmdBuild(CommandLine cli, Config config) {
             config.aaptPath = cli.getOptionValue("a");
         }
         if (cli.hasOption("c") || cli.hasOption("copy-original")) {
-            System.err.println("-c/--copy-original has been deprecated. Removal planned for v3.0.0 (#2129)");
             config.copyOriginalFiles = true;
         }
         if (cli.hasOption("nc") || cli.hasOption("no-crunch")) {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -122,7 +122,7 @@ private ResPackage[] readResourceTable() throws IOException, AndrolibException {
             }
         }
 
-        if (mPkg.getResSpecCount() > 0) {
+        if (mPkg != null && mPkg.getResSpecCount() > 0) {
             addMissingResSpecs();
         }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/apk/ApkInfo.java
Patch:
@@ -146,15 +146,13 @@ public void save(File file) throws AndrolibException {
     }
 
     public static ApkInfo load(InputStream is) throws AndrolibException {
-        // return getYaml().loadAs(is, ApkInfo.class);
         YamlReader reader = new YamlReader(is);
         ApkInfo apkInfo = new ApkInfo();
         reader.readRoot(apkInfo);
         return apkInfo;
     }
 
-    public static ApkInfo load(File appDir)
-        throws AndrolibException {
+    public static ApkInfo load(File appDir) throws AndrolibException {
         try(
             InputStream in = new FileDirectory(appDir).getFileInput("apktool.yml");
         ) {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/apk/VersionInfo.java
Patch:
@@ -16,14 +16,12 @@
  */
 package brut.androlib.apk;
 
-import brut.androlib.exceptions.AndrolibException;
-
 public class VersionInfo implements YamlSerializable {
     public String versionCode;
     public String versionName;
 
     @Override
-    public void readItem(YamlReader reader) throws AndrolibException {
+    public void readItem(YamlReader reader) {
         YamlLine line = reader.getLine();
         switch (line.getKey()) {
             case "versionCode": {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkDecoder.java
Patch:
@@ -72,7 +72,7 @@ public ApkDecoder(Config config, File apkFile) {
         this(config, new ExtFile(apkFile));
     }
 
-    public void decode(File outDir) throws AndrolibException, IOException, DirectoryException {
+    public ApkInfo decode(File outDir) throws AndrolibException, IOException, DirectoryException {
         try {
             if (!mConfig.forceDelete && outDir.exists()) {
                 throw new OutDirExistsException();
@@ -145,6 +145,8 @@ public void decode(File outDir) throws AndrolibException, IOException, Directory
             recordUncompressedFiles(apkInfo, resourcesDecoder.getResFileMapping(), mUncompressedFiles);
             copyOriginalFiles(outDir);
             writeApkInfo(apkInfo, outDir);
+
+            return apkInfo;
         } finally {
             try {
                 mApkFile.close();

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/ResourcesDecoder.java
Patch:
@@ -243,9 +243,6 @@ public ResTable decodeResources(File outDir) throws AndrolibException {
                     break;
             }
             mResTable.initApkInfo(mApkInfo, outDir);
-            if (mConfig.frameworkTag != null) {
-                mApkInfo.usesFramework.tag = mConfig.frameworkTag;
-            }
         }
         return mResTable;
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResAttrDecoder.java
Patch:
@@ -46,10 +46,8 @@ public String decodeFromResourceId(int attrResId)
         throws AndrolibException {
 
         if (attrResId != 0) {
-            ResID resId = new ResID(attrResId);
-
             try {
-                ResResSpec resResSpec = mResTable.getResSpec(resId);
+                ResResSpec resResSpec = mResTable.getResSpec(attrResId);
                 if (resResSpec != null) {
                     return resResSpec.getName();
                 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkDecoder.java
Patch:
@@ -135,7 +135,7 @@ public void decode(File outDir) throws AndrolibException, IOException, Directory
 
             // In case we have no resources. We should store the minSdk we pulled from the source opcode api level
             ApkInfo apkInfo = resourcesDecoder.getApkInfo();
-            if (mMinSdkVersion > 0) {
+            if (! resourcesDecoder.hasResources() && mMinSdkVersion > 0) {
                 apkInfo.setSdkInfoField("minSdkVersion", Integer.toString(mMinSdkVersion));
             }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/ResourcesDecoder.java
Patch:
@@ -65,15 +65,15 @@ public ResourcesDecoder(Config config, ExtFile apkFile) {
         mResTable = new ResTable(mConfig, mApkInfo);
     }
 
-    private boolean hasManifest() throws AndrolibException {
+    public boolean hasManifest() throws AndrolibException {
         try {
             return mApkFile.getDirectory().containsFile("AndroidManifest.xml");
         } catch (DirectoryException ex) {
             throw new AndrolibException(ex);
         }
     }
 
-    private boolean hasResources() throws AndrolibException {
+    public boolean hasResources() throws AndrolibException {
         try {
             return mApkFile.getDirectory().containsFile("resources.arsc");
         } catch (DirectoryException ex) {

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -183,7 +183,8 @@ private static void cmdDecode(CommandLine cli, Config config) throws AndrolibExc
             outDir = new File(outName);
         }
 
-        ApkDecoder decoder = new ApkDecoder(config, new ExtFile(apkName));
+        ExtFile apkFile = new ExtFile(apkName);
+        ApkDecoder decoder = new ApkDecoder(config, apkFile);
 
         try {
             decoder.decode(outDir);
@@ -195,7 +196,7 @@ private static void cmdDecode(CommandLine cli, Config config) throws AndrolibExc
                             + "already exists. Use -f switch if you want to overwrite it.");
             System.exit(1);
         } catch (InFileNotFoundException ex) {
-            System.err.println("Input file (" + apkName + ") " + "was not found or was not readable.");
+            System.err.println("Input file (" + apkFile.getAbsolutePath() + ") " + "was not found or was not readable.");
             System.exit(1);
         } catch (CantFindFrameworkResException ex) {
             System.err

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -573,8 +573,8 @@ private static void usage() {
 
         // print out more information
         System.out.println(
-                "For additional info, see: https://ibotpeaches.github.io/Apktool/ \n"
-                        + "For smali/baksmali info, see: https://github.com/JesusFreke/smali");
+                "For additional info, see: https://apktool.org/ \n"
+                        + "For smali/baksmali info, see: https://github.com/google/smali");
     }
 
     private static void setupLogging(final Verbosity verbosity) {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResTable.java
Patch:
@@ -364,7 +364,7 @@ private void initPackageInfo() throws AndrolibException {
         }
 
         // only put rename-manifest-package into apktool.yml, if the change will be required
-        if (!renamed.equalsIgnoreCase(original)) {
+        if (renamed != null && !renamed.equalsIgnoreCase(original)) {
             mApkInfo.packageInfo.renameManifestPackage = renamed;
         }
         mApkInfo.packageInfo.forcedPackageId = String.valueOf(id);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResFileDecoder.java
Patch:
@@ -62,6 +62,8 @@ public void decode(ResResource res, Directory inDir, Directory outDir, Map<Strin
             resFileMapping.put(inFilePath, outFilePath);
         }
 
+        LOGGER.fine("Decoding file: " + inFilePath + " to: " + outFilePath);
+
         try {
             if (typeName.equals("raw")) {
                 decode(inDir, inFilePath, outDir, outFileName, "raw");

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResTable.java
Patch:
@@ -82,7 +82,7 @@ public ResResSpec getResSpec(int resID) throws AndrolibException {
     }
 
     public ResResSpec getResSpec(ResID resID) throws AndrolibException {
-        return getPackage(resID.package_).getResSpec(resID);
+        return getPackage(resID.pkgId).getResSpec(resID);
     }
 
     public Set<ResPackage> listMainPackages() {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/XmlPullStreamDecoder.java
Patch:
@@ -45,7 +45,7 @@ public void decode(InputStream in, OutputStream out)
         try {
             XmlPullWrapperFactory factory = XmlPullWrapperFactory.newInstance();
             XmlPullParserWrapper par = factory.newPullParserWrapper(mParser);
-            final ResTable resTable = ((AXmlResourceParser) mParser).getAttrDecoder().getCurrentPackage().getResTable();
+            final ResTable resTable = ((AXmlResourceParser) mParser).getAttrDecoder().getResTable();
 
             XmlSerializerWrapper ser = new StaticXmlSerializerWrapper(mSerial, factory) {
                 boolean hideSdkInfo = false;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -276,7 +276,7 @@ private ResType readTableType() throws IOException, AndrolibException {
         }
 
         if ((typeFlags & 0x01) != 0) {
-            LOGGER.info("Sparse type flags detected: " + mTypeSpec.getName());
+            LOGGER.fine("Sparse type flags detected: " + mTypeSpec.getName());
         }
 
         HashMap<Integer, Integer> entryOffsetMap = new LinkedHashMap();

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/AXmlResourceParser.java
Patch:
@@ -289,7 +289,7 @@ public String getAttributeNamespace(int index) {
         // unless the pkgId of the resource is private. We will grab the non-standard one.
         String value = m_strings.getString(namespace);
 
-        if (value.length() == 0) {
+        if (value == null || value.length() == 0) {
             ResID resourceId = new ResID(getAttributeNameResource(index));
             if (resourceId.package_ == PRIVATE_PKG_ID) {
                 value = getNonDefaultNamespaceUri(offset);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -776,7 +776,7 @@ public void emptyFrameworkDirectory() throws AndrolibException {
 
     public boolean isFrameworkApk(ResTable resTable) {
         for (ResPackage pkg : resTable.listMainPackages()) {
-            if (pkg.getId() < 64) {
+            if (pkg.getId() > 0 && pkg.getId() < 64) {
                 return true;
             }
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/mod/SmaliMod.java
Patch:
@@ -30,7 +30,7 @@
 import java.nio.charset.StandardCharsets;
 
 public class SmaliMod {
-    public static boolean assembleSmaliFile(File smaliFile,DexBuilder dexBuilder, int apiLevel, boolean verboseErrors,
+    public static boolean assembleSmaliFile(File smaliFile, DexBuilder dexBuilder, int apiLevel, boolean verboseErrors,
                                             boolean printTokens) throws IOException, RecognitionException {
 
         CommonTokenStream tokens;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -842,7 +842,7 @@ public void close() throws IOException {
     private final static String APK_DIRNAME = "build/apk";
     private final static String UNK_DIRNAME = "unknown";
     private final static String[] APK_RESOURCES_FILENAMES = new String[] {
-            "resources.arsc", "AndroidManifest.xml", "res" };
+            "resources.arsc", "AndroidManifest.xml", "res", "r", "R" };
     private final static String[] APK_RESOURCES_WITHOUT_RES_FILENAMES = new String[] {
             "resources.arsc", "AndroidManifest.xml" };
     private final static String[] APP_RESOURCES_FILENAMES = new String[] {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResResSpec.java
Patch:
@@ -36,6 +36,8 @@ public ResResSpec(ResID id, String name, ResPackage pkg, ResTypeSpec type) {
         this.mId = id;
         String cleanName;
 
+        name = (("(name removed)".equals(name)) ? null : name);
+
         ResResSpec resResSpec = type.getResSpecUnsafe(name);
         if (resResSpec != null) {
             cleanName = String.format("APKTOOL_DUPLICATE_%s_%s", type, id.toString());

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResEnumAttr.java
Patch:
@@ -71,7 +71,7 @@ private String decodeValue(int value) throws AndrolibException {
                     break;
                 }
             }
-            if (ref != null) {
+            if (ref != null && !ref.referentIsNull()) {
                 value2 = ref.getReferent().getName();
                 mItemsCache.put(value, value2);
             }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -184,6 +184,9 @@ public void recordUncompressedFiles(ExtFile apkFile, Collection<String> uncompre
 
                     if (ext.isEmpty() || !NO_COMPRESS_PATTERN.matcher(ext).find()) {
                         ext = file;
+                        if (mAndRes.ObfFiles.containsKey(ext)) {
+                            ext = mAndRes.ObfFiles.get(ext);
+                        }
                     }
                     if (!uncompressedFilesOrExts.contains(ext)) {
                         uncompressedFilesOrExts.add(ext);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -247,7 +247,7 @@ public void decode(ResTable resTable, ExtFile apkFile, File outDir)
 
             LOGGER.info("Decoding file-resources...");
             for (ResResource res : pkg.listFiles()) {
-                fileDecoder.decode(res, in, out);
+                fileDecoder.decode(res, in, out, ObfFiles);
             }
 
             LOGGER.info("Decoding values */* XMLs...");
@@ -1041,6 +1041,8 @@ public void close() throws IOException {
 
     public BuildOptions buildOptions;
 
+    public Map<String, String> ObfFiles = new HashMap();
+
     // TODO: dirty static hack. I have to refactor decoding mechanisms.
     public static boolean sKeepBroken = false;
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/StyledString.java
Patch:
@@ -50,7 +50,7 @@ public String toString() {
 
     public static class Span implements Comparable<Span> {
         private static final MapSplitter ATTRIBUTES_SPLITTER =
-            Splitter.on(';').withKeyValueSeparator(Splitter.on('=').limit(2));
+            Splitter.on(';').omitEmptyStrings().withKeyValueSeparator(Splitter.on('=').limit(2));
 
         private final String tag;
         private final int firstChar;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -65,6 +65,9 @@ public ResPackage loadMainPkg(ResTable resTable, ExtFile apkFile)
         ResPackage pkg;
 
         switch (pkgs.length) {
+            case 0:
+                pkg = null;
+                break;
             case 1:
                 pkg = pkgs[0];
                 break;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -337,7 +337,7 @@ public void build(ExtFile appDir, File outFile)
                 throw new AndrolibException(ex.getMessage());
             }
         }
-        LOGGER.info("Built apk...");
+        LOGGER.info("Built apk into: " + outFile.getPath());
     }
 
     private void buildManifestFile(File appDir, File manifest, File manifestOriginal)

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/options/BuildOptions.java
Patch:
@@ -22,6 +22,7 @@ public class BuildOptions {
     public boolean forceBuildAll = false;
     public boolean forceDeleteFramework = false;
     public boolean debugMode = false;
+    public boolean netSecConf = false;
     public boolean verbose = false;
     public boolean copyOriginalFiles = false;
     public final boolean updateFiles = false;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -705,6 +705,7 @@ private void copyUnknownFiles(File appDir, ZipOutputStream outputFile, Map<Strin
                 BufferedInputStream unknownFile = new BufferedInputStream(new FileInputStream(inputFile));
                 CRC32 crc = BrutIO.calculateCrc(unknownFile);
                 newEntry.setCrc(crc.getValue());
+                unknownFile.close();
             } else {
                 newEntry.setMethod(ZipEntry.DEFLATED);
             }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/EscapedStringRepresenter.java
Patch:
@@ -19,8 +19,8 @@
 import org.yaml.snakeyaml.nodes.Node;
 import org.yaml.snakeyaml.representer.Representer;
 
-public class StringExRepresent extends Representer {
-    public StringExRepresent() {
+public class EscapedStringRepresenter extends Representer {
+    public EscapedStringRepresenter() {
         RepresentStringEx representStringEx = new RepresentStringEx();
         multiRepresenters.put(String.class, representStringEx);
         representers.put(String.class, representStringEx);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/MetaInfo.java
Patch:
@@ -43,11 +43,11 @@ private static Yaml getYaml() {
         DumperOptions options = new DumperOptions();
         options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
 
-        StringExRepresent representer = new StringExRepresent();
+        EscapedStringRepresenter representer = new EscapedStringRepresenter();
         PropertyUtils propertyUtils = representer.getPropertyUtils();
         propertyUtils.setSkipMissingProperties(true);
 
-        return new Yaml(new StringExConstructor(), representer, options);
+        return new Yaml(new ClassSafeConstructor(), representer, options);
     }
 
     public void save(Writer output) {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -562,6 +562,8 @@ public boolean buildManifest(ExtFile appDir, UsesFramework usesFramework)
 
                 Directory tmpDir = new ExtFile(apkFile).getDirectory();
                 tmpDir.copyToDir(apkDir, APK_MANIFEST_FILENAMES);
+
+                apkFile.delete();
             }
             return true;
         } catch (IOException | DirectoryException ex) {

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.logging.*;
 
 public class Main {
-    public static void main(String[] args) throws IOException, InterruptedException, BrutException {
+    public static void main(String[] args) throws BrutException {
 
         // headless
         System.setProperty("java.awt.headless", "true");
@@ -204,7 +204,7 @@ private static void cmdDecode(CommandLine cli) throws AndrolibException {
         }
     }
 
-    private static void cmdBuild(CommandLine cli) throws BrutException {
+    private static void cmdBuild(CommandLine cli) {
         String[] args = cli.getArgs();
         String appDirName = args.length < 2 ? "." : args[1];
         File outFile;
@@ -234,7 +234,7 @@ private static void cmdBuild(CommandLine cli) throws BrutException {
             buildOptions.noCrunch = true;
         }
 
-        // Temporary flag to enable the use of aapt2. This will tranform in time to a use-aapt1 flag, which will be
+        // Temporary flag to enable the use of aapt2. This will transform in time to a use-aapt1 flag, which will be
         // legacy and eventually removed.
         if (cli.hasOption("use-aapt2")) {
             buildOptions.useAapt2 = true;

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -50,7 +50,7 @@ public static void main(String[] args) throws IOException, InterruptedException,
             commandLine = parser.parse(allOptions, args, false);
 
             if (! OSDetection.is64Bit()) {
-                System.err.println("32 bit support is deprecated. Apktool will not support 32bit on v2.6.0.");
+                System.err.println("32 bit support is deprecated. Apktool will not support 32bit on v3.0.0.");
             }
         } catch (ParseException ex) {
             System.err.println(ex.getMessage());
@@ -223,7 +223,7 @@ private static void cmdBuild(CommandLine cli) throws BrutException {
             apkOptions.aaptPath = cli.getOptionValue("a");
         }
         if (cli.hasOption("c") || cli.hasOption("copy-original")) {
-            System.err.println("-c/--copy-original has been deprecated. Removal planned for v2.6.0 (#2129)");
+            System.err.println("-c/--copy-original has been deprecated. Removal planned for v3.0.0 (#2129)");
             apkOptions.copyOriginalFiles = true;
         }
         if (cli.hasOption("p") || cli.hasOption("frame-path")) {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkDecoder.java
Patch:
@@ -165,12 +165,10 @@ public void decode() throws AndrolibException, IOException, DirectoryException {
 
             mAndrolib.decodeRawFiles(mApkFile, outDir, mDecodeAssets);
             mAndrolib.decodeUnknownFiles(mApkFile, outDir);
-            mUncompressedFiles = new ArrayList<String>();
+            mUncompressedFiles = new ArrayList<>();
             mAndrolib.recordUncompressedFiles(mApkFile, mUncompressedFiles);
             mAndrolib.writeOriginalFiles(mApkFile, outDir);
             writeMetaFile();
-        } catch (Exception ex) {
-            throw ex;
         } finally {
             try {
                 mApkFile.close();

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkOptions.java
Patch:
@@ -24,7 +24,7 @@ public class ApkOptions {
     public boolean debugMode = false;
     public boolean verbose = false;
     public boolean copyOriginalFiles = false;
-    public boolean updateFiles = false;
+    public final boolean updateFiles = false;
     public boolean isFramework = false;
     public boolean resourcesAreCompressed = false;
     public boolean useAapt2 = false;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/StringExConstructor.java
Patch:
@@ -29,7 +29,7 @@ public StringExConstructor() {
 
     private class ConstructStringEx extends AbstractConstruct {
         public Object construct(Node node) {
-            String val = (String) constructScalar((ScalarNode) node);
+            String val = constructScalar((ScalarNode) node);
             return YamlStringEscapeUtils.unescapeString(val);
         }
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResResSpec.java
Patch:
@@ -30,15 +30,15 @@ public class ResResSpec {
     private final String mName;
     private final ResPackage mPackage;
     private final ResTypeSpec mType;
-    private final Map<ResConfigFlags, ResResource> mResources = new LinkedHashMap<ResConfigFlags, ResResource>();
+    private final Map<ResConfigFlags, ResResource> mResources = new LinkedHashMap<>();
 
     public ResResSpec(ResID id, String name, ResPackage pkg, ResTypeSpec type) {
         this.mId = id;
         String cleanName;
 
         ResResSpec resResSpec = type.getResSpecUnsafe(name);
         if (resResSpec != null) {
-            cleanName = String.format("APKTOOL_DUPLICATE_%s_%s", type.toString(), id.toString());
+            cleanName = String.format("APKTOOL_DUPLICATE_%s_%s", type, id.toString());
         } else {
             cleanName = ((name == null || name.isEmpty()) ? ("APKTOOL_DUMMYVAL_" + id.toString()) : name);
         }
@@ -49,7 +49,7 @@ public ResResSpec(ResID id, String name, ResPackage pkg, ResTypeSpec type) {
     }
 
     public Set<ResResource> listResources() {
-        return new LinkedHashSet<ResResource>(mResources.values());
+        return new LinkedHashSet<>(mResources.values());
     }
 
     public ResResource getResource(ResType config) throws AndrolibException {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResType.java
Patch:
@@ -22,7 +22,7 @@
 
 public class ResType {
     private final ResConfigFlags mFlags;
-    private final Map<ResResSpec, ResResource> mResources = new LinkedHashMap<ResResSpec, ResResource>();
+    private final Map<ResResSpec, ResResource> mResources = new LinkedHashMap<>();
 
     public ResType(ResConfigFlags flags) {
         this.mFlags = flags;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResTypeSpec.java
Patch:
@@ -28,7 +28,7 @@ public final class ResTypeSpec {
     public static final String RES_TYPE_NAME_ATTR = "attr";
 
     private final String mName;
-    private final Map<String, ResResSpec> mResSpecs = new LinkedHashMap<String, ResResSpec>();
+    private final Map<String, ResResSpec> mResSpecs = new LinkedHashMap<>();
 
     private final ResTable mResTable;
     private final ResPackage mPackage;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResEnumAttr.java
Patch:
@@ -80,5 +80,5 @@ private String decodeValue(int value) throws AndrolibException {
     }
 
     private final Duo<ResReferenceValue, ResIntValue>[] mItems;
-    private final Map<Integer, String> mItemsCache = new HashMap<Integer, String>();
+    private final Map<Integer, String> mItemsCache = new HashMap<>();
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResPluralsValue.java
Patch:
@@ -32,8 +32,8 @@ public class ResPluralsValue extends ResBagValue implements
         super(parent);
 
         mItems = new ResScalarValue[6];
-        for (int i = 0; i < items.length; i++) {
-            mItems[items[i].m1 - BAG_KEY_PLURALS_START] = items[i].m2;
+        for (Duo<Integer, ResScalarValue> item : items) {
+            mItems[item.m1 - BAG_KEY_PLURALS_START] = item.m2;
         }
     }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResStreamDecoder.java
Patch:
@@ -21,6 +21,6 @@
 import java.io.OutputStream;
 
 public interface ResStreamDecoder {
-    public void decode(InputStream in, OutputStream out)
+    void decode(InputStream in, OutputStream out)
             throws AndrolibException;
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResStreamDecoderContainer.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Map;
 
 public class ResStreamDecoderContainer {
-    private final Map<String, ResStreamDecoder> mDecoders = new HashMap<String, ResStreamDecoder>();
+    private final Map<String, ResStreamDecoder> mDecoders = new HashMap<>();
 
     public void decode(InputStream in, OutputStream out, String decoderName)
             throws AndrolibException {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResValuesXmlSerializable.java
Patch:
@@ -23,6 +23,6 @@
 import java.io.IOException;
 
 public interface ResValuesXmlSerializable {
-    public void serializeToResValuesXml(XmlSerializer serializer,
-                                        ResResource res) throws IOException, AndrolibException;
+    void serializeToResValuesXml(XmlSerializer serializer,
+                                 ResResource res) throws IOException, AndrolibException;
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlEncodable.java
Patch:
@@ -19,7 +19,7 @@
 import brut.androlib.AndrolibException;
 
 public interface ResXmlEncodable {
-    public String encodeAsResXmlAttr() throws AndrolibException;
+    String encodeAsResXmlAttr() throws AndrolibException;
 
-    public String encodeAsResXmlValue() throws AndrolibException;
+    String encodeAsResXmlValue() throws AndrolibException;
 }

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/TestUtils.java
Patch:
@@ -45,7 +45,7 @@ public static Map<String, String> parseStringsXml(File file)
 
             int eventType;
             String key = null;
-            Map<String, String> map = new HashMap<String, String>();
+            Map<String, String> map = new HashMap<>();
             while ((eventType = xpp.next()) != XmlPullParser.END_DOCUMENT) {
                 switch (eventType) {
                     case XmlPullParser.START_TAG:
@@ -78,14 +78,14 @@ public static Map<String, String> parseStringsXml(File file)
         }
     }
 
-    public static void copyResourceDir(Class class_, String dirPath, File out) throws BrutException {
+    public static void copyResourceDir(Class<?> class_, String dirPath, File out) throws BrutException {
         if (!out.exists()) {
             out.mkdirs();
         }
         copyResourceDir(class_, dirPath, new FileDirectory(out));
     }
 
-    public static void copyResourceDir(Class class_, String dirPath, Directory out) throws BrutException {
+    public static void copyResourceDir(Class<?> class_, String dirPath, Directory out) throws BrutException {
         if (class_ == null) {
             class_ = Class.class;
         }

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/BuildAndDecodeTest.java
Patch:
@@ -176,7 +176,7 @@ public void valuesExtraLongExactLengthTest() throws BrutException {
     public void storedMp3FilesAreNotCompressedTest() throws BrutException {
         ExtFile extFile = new ExtFile(sTmpDir, "testapp.apk");
         Integer built = extFile.getDirectory().getCompressionLevel("res/raw/rain.mp3");
-        assertEquals(new Integer(0), built);
+        assertEquals(Integer.valueOf(0), built);
     }
 
     @Test

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/UnknownCompressionTest.java
Patch:
@@ -79,7 +79,7 @@ public void doubleExtensionStoredTest() throws BrutException, IOException {
         // Check that control = rebuilt (both stored)
         // Add extra check for checking = 0 to enforce check for stored just in case control breaks
         assertEquals(control, rebuilt);
-        assertEquals(new Integer(0), rebuilt);
+        assertEquals(Integer.valueOf(0), rebuilt);
     }
 
     @Test
@@ -88,7 +88,7 @@ public void confirmJsonFileIsDeflatedTest() throws BrutException, IOException {
         Integer rebuilt = sTestNewDir.getDirectory().getCompressionLevel("test.json");
 
         assertEquals(control, rebuilt);
-        assertEquals(new Integer(8), rebuilt);
+        assertEquals(Integer.valueOf(8), rebuilt);
     }
 
     @Test
@@ -97,6 +97,6 @@ public void confirmPngFileIsCorrectlyDeflatedTest() throws BrutException, IOExce
         Integer rebuilt = sTestNewDir.getDirectory().getCompressionLevel("950x150.png");
 
         assertEquals(control, rebuilt);
-        assertEquals(new Integer(8), rebuilt);
+        assertEquals(Integer.valueOf(8), rebuilt);
     }
 }

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/DecodeKotlinCoroutinesTest.java
Patch:
@@ -33,7 +33,7 @@
 import static org.junit.Assert.assertTrue;
 
 public class DecodeKotlinCoroutinesTest extends BaseTest {
-    private static String apk = "test-kotlin-coroutines.apk";
+    private static final String apk = "test-kotlin-coroutines.apk";
 
     @BeforeClass
     public static void beforeClass() throws Exception {

File: brut.j.util/src/main/java/brut/util/ExtDataInput.java
Patch:
@@ -80,9 +80,9 @@ public void skipCheckChunkTypeInt(int expected, int possible) throws IOException
      */
     public final int skipBytes(int n) throws IOException {
         int total = 0;
-        int cur = 0;
+        int cur;
 
-        while ((total < n) && ((cur = (int) super.skipBytes(n - total)) > 0)) {
+        while ((total < n) && ((cur = super.skipBytes(n - total)) > 0)) {
             total += cur;
         }
 

File: brut.j.util/src/main/java/brut/util/Jar.java
Patch:
@@ -27,7 +27,7 @@
 public abstract class Jar {
     private static final Map<String, File> mExtracted = new HashMap<>();
 
-    public static File getResourceAsFile(String name, Class clazz) throws BrutException {
+    public static File getResourceAsFile(String name, Class<?> clazz) throws BrutException {
         File file = mExtracted.get(name);
         if (file == null) {
             file = extractToTmp(name, clazz);
@@ -36,11 +36,11 @@ public static File getResourceAsFile(String name, Class clazz) throws BrutExcept
         return file;
     }
 
-    public static File extractToTmp(String resourcePath, Class clazz) throws BrutException {
+    public static File extractToTmp(String resourcePath, Class<?> clazz) throws BrutException {
         return extractToTmp(resourcePath, "brut_util_Jar_", clazz);
     }
 
-    public static File extractToTmp(String resourcePath, String tmpPrefix, Class clazz) throws BrutException {
+    public static File extractToTmp(String resourcePath, String tmpPrefix, Class<?> clazz) throws BrutException {
         try {
             InputStream in = clazz.getResourceAsStream(resourcePath);
             if (in == null) {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -671,6 +671,9 @@ private int mapSdkShorthandToVersion(String sdkVersion) {
                 return ResConfigFlags.SDK_R;
             case "S":
                 return ResConfigFlags.SDK_S;
+            case "T":
+            case "Tiramisu":
+                return ResConfigFlags.SDK_DEVELOPMENT;
             default:
                 return Integer.parseInt(sdkVersion);
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResConfigFlags.java
Patch:
@@ -536,6 +536,8 @@ public int hashCode() {
     public final static byte SDK_P = 28;
     public final static byte SDK_Q = 29;
     public final static byte SDK_R = 30;
+    public final static byte SDK_S = 31;
+    public final static byte SDK_T = 32;
 
     // AOSP has this as 10,000 for dev purposes.
     // platform_frameworks_base/commit/c7a1109a1fe0771d4c9b572dcf178e2779fc4f2d

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -149,10 +149,10 @@ private static void cmdDecode(CommandLine cli) throws AndrolibException {
             decoder.setFrameworkDir(cli.getOptionValue("p"));
         }
         if (cli.hasOption("m") || cli.hasOption("match-original")) {
-            decoder.setAnalysisMode(true, false);
+            decoder.setAnalysisMode(true);
         }
         if (cli.hasOption("api") || cli.hasOption("api-level")) {
-            decoder.setApi(Integer.parseInt(cli.getOptionValue("api")));
+            decoder.setApiLevel(Integer.parseInt(cli.getOptionValue("api")));
         }
         if (cli.hasOption("o") || cli.hasOption("output")) {
             outDir = new File(cli.getOptionValue("o"));

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -26,12 +26,12 @@
 import brut.androlib.res.decoder.*;
 import brut.androlib.res.decoder.ARSCDecoder.ARSCData;
 import brut.androlib.res.decoder.ARSCDecoder.FlagsOffset;
-import brut.directory.*;
 import brut.androlib.res.util.ExtMXSerializer;
 import brut.androlib.res.util.ExtXmlSerializer;
 import brut.androlib.res.xml.ResValuesXmlSerializable;
 import brut.androlib.res.xml.ResXmlPatcher;
 import brut.common.BrutException;
+import brut.directory.*;
 import brut.util.*;
 import org.apache.commons.io.IOUtils;
 import org.xmlpull.v1.XmlSerializer;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/src/SmaliDecoder.java
Patch:
@@ -67,7 +67,7 @@ private void decode() throws AndrolibException {
             }
 
             // create the container
-            MultiDexContainer<? extends DexBackedDexFile> container = DexFileFactory.loadDexContainer(mApkFile, Opcodes.forApi(mApiLevel));
+            MultiDexContainer<? extends DexBackedDexFile> container = DexFileFactory.loadDexContainer(mApkFile, mApiLevel > 0 ? Opcodes.forApi(mApiLevel) : null);
             MultiDexContainer.DexEntry<? extends DexBackedDexFile> dexEntry;
             DexBackedDexFile dexFile;
 

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/res/decoder/StringBlockWithSurrogatePairInUtf8Test.java
Patch:
@@ -57,12 +57,13 @@ public void decodeSurrogatePair_when_givesAsThreeOctetsFromInvalidRangeOfUtf8()
         final byte[] bytesWithCharactersBeforeSurrogatePair = {'G', 'o', 'o', 'd', ' ', 'm', 'o', 'r', 'n', 'i', 'n', 'g', '!', ' ',
                 (byte) 0xED, (byte) 0xA0, (byte) 0xBD, (byte) 0xED, (byte) 0xB1, (byte) 0x8B,
                 ' ', 'S', 'u', 'n', ' ',
-                (byte) 0xED, (byte) 0xA0, (byte) 0xBD, (byte) 0xED, (byte) 0xBC, (byte) 0x9E
+                (byte) 0xED, (byte) 0xA0, (byte) 0xBC, (byte) 0xED, (byte) 0xBC, (byte) 0x9E
         };
         final String actual2 = new StringBlock(bytesWithCharactersBeforeSurrogatePair, true).decodeString(0, 31);
 
-        // D83D -> ED 0xA0 0xBD
+        // D83D -> 0xED 0xA0 0xBD
         // DC4B -> 0xED 0xB1 0x8B
+        // D83C -> 0xED 0xA0 0xBC
         // DF1E -> 0xED 0xBC 0x9E
         assertEquals("Incorrect decoding when there are valid characters before the surrogate pair",
                 "Good morning! \uD83D\uDC4B Sun \uD83C\uDF1E", actual2);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/StringBlock.java
Patch:
@@ -284,8 +284,8 @@ private int[] getStyle(int index) {
 
     @VisibleForTesting
     String decodeString(int offset, int length) {
-        final ByteBuffer wrappedBuffer = ByteBuffer.wrap(m_strings, offset, length);
         try {
+            final ByteBuffer wrappedBuffer = ByteBuffer.wrap(m_strings, offset, length);
             return (m_isUTF8 ? UTF8_DECODER : UTF16LE_DECODER).decode(wrappedBuffer).toString();
         } catch (CharacterCodingException ex) {
             if (!m_isUTF8) {
@@ -295,9 +295,10 @@ String decodeString(int offset, int length) {
         }
 
         try {
+            final ByteBuffer wrappedBufferRetry = ByteBuffer.wrap(m_strings, offset, length);
             // in some places, Android uses 3-byte UTF-8 sequences instead of 4-bytes.
             // If decoding failed, we try to use CESU-8 decoder, which is closer to what Android actually uses.
-            return CESU8_DECODER.decode(wrappedBuffer).toString();
+            return CESU8_DECODER.decode(wrappedBufferRetry).toString();
         } catch (CharacterCodingException e) {
             LOGGER.warning("Failed to decode a string with CESU-8 decoder.");
             return null;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -332,7 +332,6 @@ private void readEntry(EntryData entryData) throws AndrolibException {
                 throw ex;
             }
         }
-        mPkg.addResource(res);
     }
 
     private ResBagValue readComplexEntry() throws IOException, AndrolibException {
@@ -530,7 +529,6 @@ private void addMissingResSpecs() throws AndrolibException {
                 ResValue value = new ResReferenceValue(mPkg, 0, "");
 
                 ResResource res = new ResResource(mType, spec, value);
-                mPkg.addResource(res);
                 mType.addResource(res);
                 spec.addResource(res);
             }

File: brut.j.dir/src/main/java/brut/directory/FileDirectory.java
Patch:
@@ -24,7 +24,7 @@
 public class FileDirectory extends AbstractDirectory {
     private File mDir;
 
-    public FileDirectory(ExtFile dir, String folder) throws DirectoryException, UnsupportedEncodingException {
+    public FileDirectory(ExtFile dir, String folder) throws DirectoryException {
         this(new File(dir.toString().replaceAll("%20", " "), folder));
     }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -1017,9 +1017,9 @@ public File getFrameworkDir() throws AndrolibException {
     private File getAaptBinaryFile() throws AndrolibException {
         try {
             if (getAaptVersion() == 2) {
-                return AaptManager.getAppt2();
+                return AaptManager.getAapt2();
             }
-            return AaptManager.getAppt1();
+            return AaptManager.getAapt1();
         } catch (BrutException ex) {
             throw new AndrolibException(ex);
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -92,8 +92,7 @@ public ResPackage loadMainPkg(ResTable resTable, ExtFile apkFile)
         return pkg;
     }
 
-    public ResPackage selectPkgWithMostResSpecs(ResPackage[] pkgs)
-            throws AndrolibException {
+    public ResPackage selectPkgWithMostResSpecs(ResPackage[] pkgs) {
         int id = 0;
         int value = 0;
         int index = 0;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/StringBlock.java
Patch:
@@ -302,8 +302,8 @@ String decodeString(int offset, int length) {
         try {
             return (m_isUTF8 ? UTF8_DECODER : UTF16LE_DECODER).decode(wrappedBuffer).toString();
         } catch (CharacterCodingException ex) {
-            LOGGER.warning("Failed to decode a string at offset " + offset + " of length " + length);
             if (!m_isUTF8) {
+                LOGGER.warning("Failed to decode a string at offset " + offset + " of length " + length);
                 return null;
             }
         }

File: brut.j.util/src/main/java/brut/util/BrutIO.java
Patch:
@@ -79,18 +79,18 @@ public static CRC32 calculateCrc(InputStream input) throws IOException {
 
     public static String sanitizeUnknownFile(final File directory, final String entry) throws IOException, BrutException {
         if (entry.length() == 0) {
-            throw new InvalidUnknownFileException("Invalid Unknown File - " + entry);
+            throw new InvalidUnknownFileException("Invalid Unknown File");
         }
 
         if (new File(entry).isAbsolute()) {
-            throw new RootUnknownFileException("Absolute Unknown Files is not allowed - " + entry);
+            throw new RootUnknownFileException("Absolute Unknown Files is not allowed");
         }
 
         final String canonicalDirPath = directory.getCanonicalPath() + File.separator;
         final String canonicalEntryPath = new File(directory, entry).getCanonicalPath();
 
         if (!canonicalEntryPath.startsWith(canonicalDirPath)) {
-            throw new TraversalUnknownFileException("Directory Traversal is not allowed - " + entry);
+            throw new TraversalUnknownFileException("Directory Traversal is not allowed");
         }
 
         // https://stackoverflow.com/q/2375903/455008

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResResSpec.java
Patch:
@@ -37,7 +37,7 @@ public ResResSpec(ResID id, String name, ResPackage pkg, ResTypeSpec type) {
 
         ResResSpec resResSpec = type.getResSpecUnsafe(name);
         if (resResSpec != null) {
-            cleanName = name + "_APKTOOL_DUPLICATENAME_" + id.toString();
+            cleanName = String.format("APKTOOL_DUPLICATE_%s_%s", type.toString(), id.toString());
         } else {
             cleanName = ((name == null || name.isEmpty()) ? ("APKTOOL_DUMMYVAL_" + id.toString()) : name);
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResFlagsAttr.java
Patch:
@@ -155,6 +155,9 @@ public FlagItem(ResReferenceValue ref, int flag) {
 
         public String getValue() throws AndrolibException {
             if (value == null) {
+                if (ref.referentIsNull()) {
+                    return "@null";
+                }
                 value = ref.getReferent().getName();
             }
             return value;

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -54,7 +54,7 @@ public static void main(String[] args) throws IOException, InterruptedException,
             commandLine = parser.parse(allOptions, args, false);
 
             if (! OSDetection.is64Bit()) {
-                System.err.println("32 bit support is deprecated. Apktool will not support 32bit on v1.6.0.");
+                System.err.println("32 bit support is deprecated. Apktool will not support 32bit on v2.6.0.");
             }
         } catch (ParseException ex) {
             System.err.println(ex.getMessage());

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -984,7 +984,9 @@ public File getFrameworkDir() throws AndrolibException {
                 if (apkOptions.frameworkFolderLocation != null) {
                     LOGGER.severe("Can't create Framework directory: " + dir);
                 }
-                throw new AndrolibException("Can't create directory: " + dir);
+                throw new AndrolibException(String.format(
+                        "Can't create directory: (%s). Pass a writable path with --frame-path {DIR}. ", dir
+                ));
             }
         }
 

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -543,7 +543,7 @@ private static void usage() {
                         "Copyright 2010 Ryszard Wiśniewski <brut.alll@gmail.com>\n" +
                         "Copyright 2010 Connor Tumbleson <connor.tumbleson@gmail.com>" );
         if (isAdvanceMode()) {
-            System.out.println("Apache License 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\n");
+            System.out.println("Apache License 2.0 (https://www.apache.org/licenses/LICENSE-2.0)\n");
         }else {
             System.out.println("");
         }
@@ -563,7 +563,7 @@ private static void usage() {
 
         // print out more information
         System.out.println(
-                "For additional info, see: http://ibotpeaches.github.io/Apktool/ \n"
+                "For additional info, see: https://ibotpeaches.github.io/Apktool/ \n"
                         + "For smali/baksmali info, see: https://github.com/JesusFreke/smali");
     }
 

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -210,7 +210,6 @@ private static void cmdBuild(CommandLine cli) throws BrutException {
             apkOptions.forceBuildAll = true;
         }
         if (cli.hasOption("d") || cli.hasOption("debug")) {
-            System.out.println("SmaliDebugging has been removed in 2.1.0 onward. Please see: https://github.com/iBotPeaches/Apktool/issues/1061");
             apkOptions.debugMode = true;
         }
         if (cli.hasOption("v") || cli.hasOption("verbose")) {

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -220,7 +220,7 @@ private static void cmdBuild(CommandLine cli) throws BrutException {
             apkOptions.aaptPath = cli.getOptionValue("a");
         }
         if (cli.hasOption("c") || cli.hasOption("copy-original")) {
-            System.err.println("-c/--copy-original has been deprecated. Removal planned for v2.5.0 (#2129)");
+            System.err.println("-c/--copy-original has been deprecated. Removal planned for v2.6.0 (#2129)");
             apkOptions.copyOriginalFiles = true;
         }
         if (cli.hasOption("p") || cli.hasOption("frame-path")) {

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/androlib/InvalidSdkBoundingTest.java
Patch:
@@ -88,11 +88,11 @@ public void checkForShortHandSdkTag() {
     }
 
     @Test
-    public void checkForSdkQInsaneTestValue() {
+    public void checkForSdkDevelopmentInsaneTestValue() {
         AndrolibResources androlibResources = new AndrolibResources();
 
         Map<String, String> sdkInfo = new LinkedHashMap<>();
-        sdkInfo.put("targetSdkVersion", "Q");
+        sdkInfo.put("targetSdkVersion", "S");
 
         androlibResources.setSdkInfo(sdkInfo);
         assertEquals("10000", androlibResources.checkTargetSdkVersionBounds());

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResArrayValue.java
Patch:
@@ -95,7 +95,7 @@ public String getType() throws AndrolibException {
     }
 
     private final ResScalarValue[] mItems;
-    private final String AllowedArrayTypes[] = {"string", "integer"};
+    private final String[] AllowedArrayTypes = {"string", "integer"};
 
     public static final int BAG_KEY_ARRAY_START = 0x02000000;
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkDecoder.java
Patch:
@@ -18,7 +18,7 @@
 
 import brut.androlib.err.InFileNotFoundException;
 import brut.androlib.err.OutDirExistsException;
-import brut.androlib.err.UndefinedResObject;
+import brut.androlib.err.UndefinedResObjectException;
 import brut.androlib.meta.MetaInfo;
 import brut.androlib.meta.PackageInfo;
 import brut.androlib.meta.UsesFramework;
@@ -416,7 +416,7 @@ private void putPackageInfo(MetaInfo meta) throws AndrolibException {
         int id = getResTable().getPackageId();
         try {
             id = getResTable().getPackage(renamed).getId();
-        } catch (UndefinedResObject ignored) {}
+        } catch (UndefinedResObjectException ignored) {}
 
         if (Strings.isNullOrEmpty(original)) {
             return;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResResSpec.java
Patch:
@@ -17,7 +17,7 @@
 package brut.androlib.res.data;
 
 import brut.androlib.AndrolibException;
-import brut.androlib.err.UndefinedResObject;
+import brut.androlib.err.UndefinedResObjectException;
 import java.util.*;
 import org.apache.commons.lang3.StringUtils;
 
@@ -58,7 +58,7 @@ public ResResource getResource(ResType config) throws AndrolibException {
     public ResResource getResource(ResConfigFlags config) throws AndrolibException {
         ResResource res = mResources.get(config);
         if (res == null) {
-            throw new UndefinedResObject(String.format("resource: spec=%s, config=%s", this, config));
+            throw new UndefinedResObjectException(String.format("resource: spec=%s, config=%s", this, config));
         }
         return res;
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResTable.java
Patch:
@@ -17,7 +17,7 @@
 package brut.androlib.res.data;
 
 import brut.androlib.AndrolibException;
-import brut.androlib.err.UndefinedResObject;
+import brut.androlib.err.UndefinedResObjectException;
 import brut.androlib.meta.VersionInfo;
 import brut.androlib.res.AndrolibResources;
 import brut.androlib.res.data.value.ResValue;
@@ -83,7 +83,7 @@ public ResPackage getPackage(int id) throws AndrolibException {
         if (mAndRes != null) {
             return mAndRes.loadFrameworkPkg(this, id, mAndRes.apkOptions.frameworkTag);
         }
-        throw new UndefinedResObject(String.format("package: id=%d", id));
+        throw new UndefinedResObjectException(String.format("package: id=%d", id));
     }
 
     public ResPackage getHighestSpecPackage() throws AndrolibException {
@@ -115,7 +115,7 @@ public ResPackage getCurrentResPackage() throws AndrolibException {
     public ResPackage getPackage(String name) throws AndrolibException {
         ResPackage pkg = mPackagesByName.get(name);
         if (pkg == null) {
-            throw new UndefinedResObject("package: name=" + name);
+            throw new UndefinedResObjectException("package: name=" + name);
         }
         return pkg;
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResType.java
Patch:
@@ -17,7 +17,7 @@
 package brut.androlib.res.data;
 
 import brut.androlib.AndrolibException;
-import brut.androlib.err.UndefinedResObject;
+import brut.androlib.err.UndefinedResObjectException;
 import java.util.*;
 
 /**
@@ -38,7 +38,7 @@ public Set<ResResource> listResources() {
     public ResResource getResource(ResResSpec spec) throws AndrolibException {
         ResResource res = mResources.get(spec);
         if (res == null) {
-            throw new UndefinedResObject(String.format("resource: spec=%s, config=%s", spec, this));
+            throw new UndefinedResObjectException(String.format("resource: spec=%s, config=%s", spec, this));
         }
         return res;
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResTypeSpec.java
Patch:
@@ -17,7 +17,7 @@
 package brut.androlib.res.data;
 
 import brut.androlib.AndrolibException;
-import brut.androlib.err.UndefinedResObject;
+import brut.androlib.err.UndefinedResObjectException;
 import java.util.*;
 
 /**
@@ -70,7 +70,7 @@ public Set<ResResSpec> listResSpecs() {
     public ResResSpec getResSpec(String name) throws AndrolibException {
         ResResSpec spec = getResSpecUnsafe(name);
         if (spec == null) {
-            throw new UndefinedResObject(String.format("resource spec: %s/%s", getName(), name));
+            throw new UndefinedResObjectException(String.format("resource spec: %s/%s", getName(), name));
         }
         return spec;
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResReferenceValue.java
Patch:
@@ -17,7 +17,7 @@
 package brut.androlib.res.data.value;
 
 import brut.androlib.AndrolibException;
-import brut.androlib.err.UndefinedResObject;
+import brut.androlib.err.UndefinedResObjectException;
 import brut.androlib.res.data.ResPackage;
 import brut.androlib.res.data.ResResSpec;
 
@@ -60,7 +60,7 @@ protected String encodeAsResXml() throws AndrolibException {
     public ResResSpec getReferent() throws AndrolibException {
         try {
             return mPackage.getResTable().getResSpec(getValue());
-        } catch (UndefinedResObject ex) {
+        } catch (UndefinedResObjectException ex) {
             return null;
         }
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResAttrDecoder.java
Patch:
@@ -17,7 +17,7 @@
 package brut.androlib.res.decoder;
 
 import brut.androlib.AndrolibException;
-import brut.androlib.err.UndefinedResObject;
+import brut.androlib.err.UndefinedResObjectException;
 import brut.androlib.res.data.ResPackage;
 import brut.androlib.res.data.ResResSpec;
 import brut.androlib.res.data.value.ResAttr;
@@ -39,7 +39,7 @@ public String decode(int type, int value, String rawValue, int attrResId)
                         .getResSpec(attrResId).getDefaultResource().getValue();
 
                 decoded = attr.convertToResXmlFormat(resValue);
-            } catch (UndefinedResObject | ClassCastException ex) {
+            } catch (UndefinedResObjectException | ClassCastException ex) {
                 // ignored
             }
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResFileDecoder.java
Patch:
@@ -17,7 +17,7 @@
 package brut.androlib.res.decoder;
 
 import brut.androlib.AndrolibException;
-import brut.androlib.err.CantFind9PatchChunk;
+import brut.androlib.err.CantFind9PatchChunkException;
 import brut.androlib.err.RawXmlEncounteredException;
 import brut.androlib.res.data.ResResource;
 import brut.androlib.res.data.value.ResBoolValue;
@@ -93,7 +93,7 @@ public void decode(ResResource res, Directory inDir, Directory outDir)
                     try {
                         decode(inDir, inFileName, outDir, outFileName, "9patch");
                         return;
-                    } catch (CantFind9PatchChunk ex) {
+                    } catch (CantFind9PatchChunkException ex) {
                         LOGGER.log(
                                 Level.WARNING,
                                 String.format(

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/XmlPullStreamDecoder.java
Patch:
@@ -115,7 +115,8 @@ private boolean parseAttr(XmlPullParser pp)
                             if (name != null && value != null) {
                                 if (name.equalsIgnoreCase("minSdkVersion")
                                         || name.equalsIgnoreCase("targetSdkVersion")
-                                        || name.equalsIgnoreCase("maxSdkVersion")) {
+                                        || name.equalsIgnoreCase("maxSdkVersion")
+                                        || name.equalsIgnoreCase("compileSdkVersion")) {
                                     resTable.addSdkInfo(name, value);
                                 } else {
                                     resTable.clearSdkInfo();

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -163,10 +163,10 @@ public void recordUncompressedFiles(ExtFile apkFile, Collection<String> uncompre
         try {
             Directory unk = apkFile.getDirectory();
             Set<String> files = unk.getFiles(true);
-            String ext = "";
 
             for (String file : files) {
                 if (isAPKFileNames(file) && unk.getCompressionLevel(file) == 0) {
+                    String ext = "";
                     if (unk.getSize(file) != 0) {
                         ext = FilenameUtils.getExtension(file);
                     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -883,6 +883,7 @@ public void installFramework(File frameFile, String tag)
             crc.update(data);
             entry = new ZipEntry("resources.arsc");
             entry.setSize(data.length);
+            entry.setMethod(ZipOutputStream.STORED);
             entry.setCrc(crc.getValue());
             out.putNextEntry(entry);
             out.write(data);

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/AndrolibException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkDecoder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkOptions.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApktoolProperties.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/err/AXmlDecodingException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/err/CantFind9PatchChunk.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/err/CantFindFrameworkResException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/err/InFileNotFoundException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/err/OutDirExistsException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/err/RawXmlEncounteredException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/err/UndefinedResObject.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/MetaInfo.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/PackageInfo.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/StringExConstructor.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/StringExRepresent.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/UsesFramework.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/VersionInfo.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/YamlStringEscapeUtils.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/mod/SmaliMod.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResConfigFlags.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResID.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResPackage.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResResSpec.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResResource.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResTable.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResType.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResTypeSpec.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResUnknownFiles.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResValuesFile.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResArrayValue.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResAttr.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResBagValue.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResBoolValue.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResColorValue.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResDimenValue.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResEmptyValue.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResEnumAttr.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResFileValue.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResFlagsAttr.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResFloatValue.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResFractionValue.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResIdValue.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResIntBasedValue.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResIntValue.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResPluralsValue.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResReferenceValue.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResScalarValue.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResStringValue.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResStyleValue.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValue.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/AXmlResourceParser.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/Res9patchStreamDecoder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResAttrDecoder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResFileDecoder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResRawStreamDecoder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResStreamDecoder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResStreamDecoderContainer.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/StringBlock.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/XmlPullStreamDecoder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/util/ExtFile.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/util/ExtMXSerializer.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/util/ExtXmlSerializer.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResValuesXmlSerializable.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlEncodable.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlEncoders.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlPatcher.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/src/SmaliBuilder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/src/SmaliDecoder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/main/java/org/xmlpull/renamed/MXSerializer.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/BaseTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/TestUtils.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/AndroidOreoNotSparseTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/AndroidOreoSparseTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/BuildAndDecodeJarTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/BuildAndDecodeTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/DebugTagRetainedTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/DefaultBaksmaliVariableTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/EmptyResourcesArscTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/LargeIntsInManifestTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/ProviderAttributeTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/ReferenceVersionCodeTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/SharedLibraryTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/SkipAssetTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/UnknownCompressionTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt2/BuildAndDecodeTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt2/NonStandardPkgIdTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/androlib/InvalidSdkBoundingTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/AndResGuardTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/DecodeArrayTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/DecodeKotlinCoroutinesTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/DecodeKotlinTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/DoubleExtensionUnknownFileTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/DuplicateDexTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/Empty9PatchTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/ExternalEntityTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/ForceManifestDecodeNoResourcesTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/MinifiedArscTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/MissingDiv9PatchTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/MissingVersionManifestTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/OutsideOfDirectoryEntryTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/ParentDirectoryTraversalTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/VectorDrawableTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/encoders/PositionalEnumerationTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/util/AaptVersionTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/util/UnknownDirectoryTraversalTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.common/src/main/java/brut/common/BrutException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.common/src/main/java/brut/common/InvalidUnknownFileException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.common/src/main/java/brut/common/RootUnknownFileException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.common/src/main/java/brut/common/TraversalUnknownFileException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.dir/src/main/java/brut/directory/AbstractDirectory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.dir/src/main/java/brut/directory/DirUtil.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.dir/src/main/java/brut/directory/Directory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.dir/src/main/java/brut/directory/DirectoryException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.dir/src/main/java/brut/directory/ExtFile.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.dir/src/main/java/brut/directory/FileDirectory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.dir/src/main/java/brut/directory/PathAlreadyExists.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.dir/src/main/java/brut/directory/PathNotExist.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.dir/src/main/java/brut/directory/ZipRODirectory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.dir/src/main/java/brut/directory/ZipUtils.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.util/src/main/java/brut/util/AaptManager.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.util/src/main/java/brut/util/BrutIO.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.util/src/main/java/brut/util/DataInputDelegate.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.util/src/main/java/brut/util/Duo.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.util/src/main/java/brut/util/ExtDataInput.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.util/src/main/java/brut/util/Jar.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.util/src/main/java/brut/util/OS.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.j.util/src/main/java/brut/util/OSDetection.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
  *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -519,6 +519,7 @@ private static void _Options() {
         allOptions.addOption(quietOption);
         allOptions.addOption(aapt2Option);
         allOptions.addOption(noCrunchOption);
+        allOptions.addOption(onlyMainClassesOption);
     }
 
     private static String verbosityHelp() {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/AXmlResourceParser.java
Patch:
@@ -339,13 +339,12 @@ public String getAttributeName(int index) {
 
         // some attributes will return "", we must rely on the resource_id and refer to the frameworks
         // to match the resource id to the name. ex: 0x101021C = versionName
-        if (value.length() != 0) {
+        if (value.length() != 0 && !android_ns.equals(getAttributeNamespace(index))) {
             return value;
         } else {
             try {
                 value = mAttrDecoder.decodeManifestAttr(getAttributeNameResource(index));
             } catch (AndrolibException e) {
-                value = "";
             }
             return value;
         }

File: brut.j.dir/src/main/java/brut/directory/DirUtil.java
Patch:
@@ -81,7 +81,8 @@ public static void copyToDir(Directory in, File out, String fileName)
                 if (fileName.equals("res") && !in.containsFile(fileName)) {
                     return;
                 }
-                File outFile = new File(out, fileName);
+                String cleanedFilename = BrutIO.sanitizeUnknownFile(out, fileName);
+                File outFile = new File(out, cleanedFilename);
                 outFile.getParentFile().mkdirs();
                 BrutIO.copyAndClose(in.getFileInput(fileName),
                     new FileOutputStream(outFile));

File: brut.j.dir/src/main/java/brut/directory/DirUtil.java
Patch:
@@ -81,7 +81,8 @@ public static void copyToDir(Directory in, File out, String fileName)
                 if (fileName.equals("res") && !in.containsFile(fileName)) {
                     return;
                 }
-                File outFile = new File(out, fileName);
+                String cleanedFilename = BrutIO.sanitizeUnknownFile(out, fileName);
+                File outFile = new File(out, cleanedFilename);
                 outFile.getParentFile().mkdirs();
                 BrutIO.copyAndClose(in.getFileInput(fileName),
                     new FileOutputStream(outFile));

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/DuplicateDexTest.java
Patch:
@@ -1,5 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -112,7 +112,7 @@ private static void cmdDecode(CommandLine cli) throws AndrolibException {
         if (cli.hasOption("s") || cli.hasOption("no-src")) {
             decoder.setDecodeSources(ApkDecoder.DECODE_SOURCES_NONE);
         }
-        if (cli.hasOption("onlymainclasses")) {
+        if (cli.hasOption("only-main-classes")) {
             decoder.setDecodeSources(ApkDecoder.DECODE_SOURCES_SMALI_ONLY_MAIN_CLASSES);
         }
         if (cli.hasOption("d") || cli.hasOption("debug")) {

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/AndrolibException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkDecoder.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkOptions.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApktoolProperties.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/err/AXmlDecodingException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/err/CantFind9PatchChunk.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/err/CantFindFrameworkResException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/err/InFileNotFoundException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/err/OutDirExistsException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/err/RawXmlEncounteredException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/err/UndefinedResObject.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/MetaInfo.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/PackageInfo.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/StringExConstructor.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/StringExRepresent.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/UsesFramework.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/VersionInfo.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/YamlStringEscapeUtils.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/mod/SmaliMod.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResConfigFlags.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResID.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResPackage.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResResSpec.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResResource.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResTable.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResType.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResTypeSpec.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResUnknownFiles.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResValuesFile.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResArrayValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResAttr.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResBagValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResBoolValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResColorValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResDimenValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResEmptyValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResEnumAttr.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResFileValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResFlagsAttr.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResFloatValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResFractionValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResIdValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResIntBasedValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResIntValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResPluralsValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResReferenceValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResScalarValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResStringValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResStyleValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/AXmlResourceParser.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/Res9patchStreamDecoder.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResAttrDecoder.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResFileDecoder.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResRawStreamDecoder.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResStreamDecoder.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResStreamDecoderContainer.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/StringBlock.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/XmlPullStreamDecoder.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/util/ExtFile.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/util/ExtMXSerializer.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/util/ExtXmlSerializer.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResValuesXmlSerializable.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlEncodable.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlEncoders.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlPatcher.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/src/SmaliBuilder.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/src/SmaliDecoder.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/org/xmlpull/renamed/MXSerializer.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/BaseTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/TestUtils.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/AndroidOreoNotSparseTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/AndroidOreoSparseTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/BuildAndDecodeJarTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/BuildAndDecodeTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/DebugTagRetainedTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/DefaultBaksmaliVariableTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/EmptyResourcesArscTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/LargeIntsInManifestTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/ProviderAttributeTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/ReferenceVersionCodeTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/SharedLibraryTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/SkipAssetTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/UnknownCompressionTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt2/BuildAndDecodeTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt2/NonStandardPkgIdTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/androlib/InvalidSdkBoundingTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/AndResGuardTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/DecodeKotlinTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/DoubleExtensionUnknownFileTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/ExternalEntityTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/ForceManifestDecodeNoResourcesTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/MinifiedArscTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/MissingDiv9PatchTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/MissingVersionManifestTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/OutsideOfDirectoryEntryTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/ParentDirectoryTraversalTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/VectorDrawableTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/encoders/PositionalEnumerationTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/util/AaptVersionTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/util/UnknownDirectoryTraversalTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.common/src/main/java/brut/common/BrutException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.common/src/main/java/brut/common/InvalidUnknownFileException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.common/src/main/java/brut/common/RootUnknownFileException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.common/src/main/java/brut/common/TraversalUnknownFileException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.dir/src/main/java/brut/directory/AbstractDirectory.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.dir/src/main/java/brut/directory/DirUtil.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.dir/src/main/java/brut/directory/Directory.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.dir/src/main/java/brut/directory/DirectoryException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.dir/src/main/java/brut/directory/ExtFile.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.dir/src/main/java/brut/directory/FileDirectory.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.dir/src/main/java/brut/directory/PathAlreadyExists.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.dir/src/main/java/brut/directory/PathNotExist.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.dir/src/main/java/brut/directory/ZipRODirectory.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.dir/src/main/java/brut/directory/ZipUtils.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.util/src/main/java/brut/util/AaptManager.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.util/src/main/java/brut/util/BrutIO.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.util/src/main/java/brut/util/DataInputDelegate.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.util/src/main/java/brut/util/Duo.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.util/src/main/java/brut/util/ExtDataInput.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.util/src/main/java/brut/util/Jar.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.util/src/main/java/brut/util/OS.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.util/src/main/java/brut/util/OSDetection.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/android/content/res/XmlResourceParser.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/android/util/AttributeSet.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/android/util/TypedValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/AndrolibException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkDecoder.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkOptions.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApktoolProperties.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/err/AXmlDecodingException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/err/CantFind9PatchChunk.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/err/CantFindFrameworkResException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/err/InFileNotFoundException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/err/OutDirExistsException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/err/RawXmlEncounteredException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/err/UndefinedResObject.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/MetaInfo.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/PackageInfo.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/StringExConstructor.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/StringExRepresent.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/UsesFramework.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/VersionInfo.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/YamlStringEscapeUtils.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/mod/SmaliMod.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResConfigFlags.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResID.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResPackage.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResResSpec.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResResource.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResTable.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResType.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResTypeSpec.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResUnknownFiles.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResValuesFile.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResArrayValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResAttr.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResBagValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResBoolValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResColorValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResDimenValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResEmptyValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResEnumAttr.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResFileValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResFlagsAttr.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResFloatValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResFractionValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResIdValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResIntBasedValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResIntValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResPluralsValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResReferenceValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResScalarValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResStringValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResStyleValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValue.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/AXmlResourceParser.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/Res9patchStreamDecoder.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResAttrDecoder.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResFileDecoder.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResRawStreamDecoder.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResStreamDecoder.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResStreamDecoderContainer.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/StringBlock.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/XmlPullStreamDecoder.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/util/ExtFile.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/util/ExtMXSerializer.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/util/ExtXmlSerializer.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResValuesXmlSerializable.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlEncodable.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlEncoders.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlPatcher.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/src/SmaliBuilder.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/src/SmaliDecoder.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/main/java/org/xmlpull/renamed/MXSerializer.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/BaseTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/TestUtils.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/AndroidOreoNotSparseTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/AndroidOreoSparseTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/BuildAndDecodeJarTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/BuildAndDecodeTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/DebugTagRetainedTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/DefaultBaksmaliVariableTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/EmptyResourcesArscTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/LargeIntsInManifestTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/ProviderAttributeTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/ReferenceVersionCodeTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/SharedLibraryTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/SkipAssetTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/UnknownCompressionTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt2/BuildAndDecodeTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt2/NonStandardPkgIdTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/androlib/InvalidSdkBoundingTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/AndResGuardTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/DecodeKotlinTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/DoubleExtensionUnknownFileTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/ExternalEntityTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/ForceManifestDecodeNoResourcesTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/MinifiedArscTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/MissingDiv9PatchTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/MissingVersionManifestTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/OutsideOfDirectoryEntryTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/ParentDirectoryTraversalTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/VectorDrawableTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/encoders/PositionalEnumerationTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/util/AaptVersionTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/util/UnknownDirectoryTraversalTest.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.common/src/main/java/brut/common/BrutException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.common/src/main/java/brut/common/InvalidUnknownFileException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.common/src/main/java/brut/common/RootUnknownFileException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.common/src/main/java/brut/common/TraversalUnknownFileException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.dir/src/main/java/brut/directory/AbstractDirectory.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.dir/src/main/java/brut/directory/DirUtil.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.dir/src/main/java/brut/directory/Directory.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.dir/src/main/java/brut/directory/DirectoryException.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.dir/src/main/java/brut/directory/ExtFile.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.dir/src/main/java/brut/directory/FileDirectory.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.dir/src/main/java/brut/directory/PathAlreadyExists.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.dir/src/main/java/brut/directory/PathNotExist.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.dir/src/main/java/brut/directory/ZipRODirectory.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.dir/src/main/java/brut/directory/ZipUtils.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.util/src/main/java/brut/util/AaptManager.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.util/src/main/java/brut/util/BrutIO.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.util/src/main/java/brut/util/DataInputDelegate.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.util/src/main/java/brut/util/Duo.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.util/src/main/java/brut/util/ExtDataInput.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.util/src/main/java/brut/util/Jar.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.util/src/main/java/brut/util/OS.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.j.util/src/main/java/brut/util/OSDetection.java
Patch:
@@ -1,6 +1,6 @@
 /**
- *  Copyright (C) 2018 Ryszard Wiśniewski <brut.alll@gmail.com>
- *  Copyright (C) 2018 Connor Tumbleson <connor.tumbleson@gmail.com>
+ *  Copyright (C) 2019 Ryszard Wiśniewski <brut.alll@gmail.com>
+ *  Copyright (C) 2019 Connor Tumbleson <connor.tumbleson@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -216,6 +216,7 @@ private static void cmdBuild(CommandLine cli) throws BrutException {
             apkOptions.aaptPath = cli.getOptionValue("a");
         }
         if (cli.hasOption("c") || cli.hasOption("copy-original")) {
+            System.err.println("-c/--copy-original has been deprecated. Removal planned for v2.5.0 (#2129)");
             apkOptions.copyOriginalFiles = true;
         }
         if (cli.hasOption("p") || cli.hasOption("frame-path")) {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResTypeSpec.java
Patch:
@@ -28,6 +28,7 @@ public final class ResTypeSpec {
     public static final String RES_TYPE_NAME_ARRAY = "array";
     public static final String RES_TYPE_NAME_PLURALS = "plurals";
     public static final String RES_TYPE_NAME_STYLES = "style";
+    public static final String RES_TYPE_NAME_ATTR = "attr";
 
     private final String mName;
     private final Map<String, ResResSpec> mResSpecs = new LinkedHashMap<String, ResResSpec>();

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -568,7 +568,6 @@ public void buildLibs(File appDir) throws AndrolibException {
         buildLibrary(appDir, "lib");
         buildLibrary(appDir, "libs");
         buildLibrary(appDir, "kotlin");
-        buildLibrary(appDir, "META-INF/services");
     }
 
     public void buildLibrary(File appDir, String folder) throws AndrolibException {
@@ -579,7 +578,7 @@ public void buildLibrary(File appDir, String folder) throws AndrolibException {
         }
 
         File stored = new File(appDir, APK_DIRNAME + "/" + folder);
-        if (apkOptions.forceBuildAll || isModified(working, stored) || folder.contains("services")) {
+        if (apkOptions.forceBuildAll || isModified(working, stored)) {
             LOGGER.info("Copying libs... (/" + folder + ")");
             try {
                 OS.rmdir(stored);
@@ -797,5 +796,5 @@ public void close() throws IOException {
             "AndroidManifest.xml" };
     private final static String[] APK_STANDARD_ALL_FILENAMES = new String[] {
             "classes.dex", "AndroidManifest.xml", "resources.arsc", "res", "r", "R",
-            "lib", "libs", "assets", "META-INF", "kotlin"};
+            "lib", "libs", "assets", "META-INF", "kotlin" };
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -633,6 +633,8 @@ private int mapSdkShorthandToVersion(String sdkVersion) {
                 return ResConfigFlags.SDK_OREO;
             case "P":
                 return ResConfigFlags.SDK_P;
+            case "Q":
+                return ResConfigFlags.SDK_Q;
             default:
                 return Integer.parseInt(sdkVersion);
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -633,6 +633,8 @@ private int mapSdkShorthandToVersion(String sdkVersion) {
                 return ResConfigFlags.SDK_OREO;
             case "P":
                 return ResConfigFlags.SDK_P;
+            case "Q":
+                return ResConfigFlags.SDK_Q;
             default:
                 return Integer.parseInt(sdkVersion);
         }

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -449,6 +449,7 @@ private static void _Options() {
             DecodeOptions.addOption(noAssetOption);
             DecodeOptions.addOption(forceManOption);
 
+            BuildOptions.addOption(apiLevelOption);
             BuildOptions.addOption(debugBuiOption);
             BuildOptions.addOption(aaptOption);
             BuildOptions.addOption(originalOption);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResResSpec.java
Patch:
@@ -39,7 +39,7 @@ public ResResSpec(ResID id, String name, ResPackage pkg, ResTypeSpec type) {
         if (resResSpec != null) {
             cleanName = name + "_APKTOOL_DUPLICATENAME_" + id.toString();
         } else {
-            cleanName = (name.isEmpty() ? ("APKTOOL_DUMMYVAL_" + id.toString()) : name);
+            cleanName = ((name == null || name.isEmpty()) ? ("APKTOOL_DUMMYVAL_" + id.toString()) : name);
         }
         
         this.mName = cleanName;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -42,7 +42,7 @@ public ResScalarValue factory(int type, int value, String rawValue) throws Andro
                 }
                 return new ResReferenceValue(mPackage, 0, null);
             case TypedValue.TYPE_REFERENCE:
-                return newReference(value, rawValue);
+                return newReference(value, null);
             case TypedValue.TYPE_ATTRIBUTE:
                 return newReference(value, rawValue, true);
             case TypedValue.TYPE_STRING:

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -347,7 +347,7 @@ private ResBagValue readComplexEntry() throws IOException, AndrolibException {
             }
         }
 
-        return factory.bagFactory(parent, items);
+        return factory.bagFactory(parent, items, mTypeSpec);
     }
 
     private ResIntBasedValue readValue() throws IOException, AndrolibException {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -347,7 +347,7 @@ private ResBagValue readComplexEntry() throws IOException, AndrolibException {
             }
         }
 
-        return factory.bagFactory(parent, items);
+        return factory.bagFactory(parent, items, mTypeSpec);
     }
 
     private ResIntBasedValue readValue() throws IOException, AndrolibException {

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -36,6 +36,9 @@
 public class Main {
     public static void main(String[] args) throws IOException, InterruptedException, BrutException {
 
+        // headless
+        System.setProperty("java.awt.headless", "true");
+
         // set verbosity default
         Verbosity verbosity = Verbosity.NORMAL;
 

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -36,6 +36,9 @@
 public class Main {
     public static void main(String[] args) throws IOException, InterruptedException, BrutException {
 
+        // headless
+        System.setProperty("java.awt.headless", "true");
+
         // set verbosity default
         Verbosity verbosity = Verbosity.NORMAL;
 

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/BuildAndDecodeTest.java
Patch:
@@ -241,7 +241,7 @@ public void xmlCustomAttrsNotAndroidTest() throws BrutException {
     @Test
     public void qualifiersTest() throws BrutException {
         compareValuesFiles("values-mcc004-mnc4-en-rUS-ldrtl-sw100dp-w200dp-h300dp"
-                + "-xlarge-long-round-highdr-land-desk-night-xhdpi-finger-keyssoft-12key"
+                + "-long-round-highdr-land-desk-night-xhdpi-finger-keyssoft-12key"
                 + "-navhidden-dpad-v26/strings.xml");
     }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/AXmlResourceParser.java
Patch:
@@ -852,7 +852,7 @@ private final void resetEventInfo() {
     private final void doNext() throws IOException {
         // Delayed initialization.
         if (m_strings == null) {
-            m_reader.skipCheckInt(CHUNK_AXML_FILE);
+            m_reader.skipCheckInt(CHUNK_AXML_FILE, CHUNK_AXML_FILE_BROKEN);
 
 			/*
 			 * chunkSize
@@ -1004,7 +1004,7 @@ private void setFirstError(AndrolibException error) {
             ATTRIBUTE_IX_VALUE_TYPE = 3, ATTRIBUTE_IX_VALUE_DATA = 4,
             ATTRIBUTE_LENGTH = 5;
 
-    private static final int CHUNK_AXML_FILE = 0x00080003,
+    private static final int CHUNK_AXML_FILE = 0x00080003, CHUNK_AXML_FILE_BROKEN = 0x00080001,
             CHUNK_RESOURCEIDS = 0x00080180, CHUNK_XML_FIRST = 0x00100100,
             CHUNK_XML_START_NAMESPACE = 0x00100100,
             CHUNK_XML_END_NAMESPACE = 0x00100101,

File: brut.j.util/src/main/java/brut/util/ExtDataInput.java
Patch:
@@ -42,11 +42,11 @@ public void skipInt() throws IOException {
         skipBytes(4);
     }
 
-    public void skipCheckInt(int expected) throws IOException {
+    public void skipCheckInt(int expected1, int expected2) throws IOException {
         int got = readInt();
-        if (got != expected) {
+        if (got != expected1 && got != expected2) {
             throw new IOException(String.format(
-                "Expected: 0x%08x, got: 0x%08x", expected, got));
+                "Expected: 0x%08x or 0x%08x, got: 0x%08x", expected1, expected2, got));
         }
     }
 

File: brut.j.util/src/main/java/brut/util/AaptManager.java
Patch:
@@ -41,11 +41,11 @@ private static File getAppt(Integer version) throws BrutException {
 
         try {
             if (OSDetection.isMacOSX()) {
-                aaptBinary = Jar.getResourceAsFile("/prebuilt/" + aaptVersion + "/macosx/" + aaptVersion, AaptManager.class);
+                aaptBinary = Jar.getResourceAsFile("/prebuilt/macosx/" + aaptVersion, AaptManager.class);
             } else if (OSDetection.isUnix()) {
-                aaptBinary = Jar.getResourceAsFile("/prebuilt/" + aaptVersion + "/linux/" + aaptVersion, AaptManager.class);
+                aaptBinary = Jar.getResourceAsFile("/prebuilt/linux/" + aaptVersion, AaptManager.class);
             } else if (OSDetection.isWindows()) {
-                aaptBinary = Jar.getResourceAsFile("/prebuilt/" + aaptVersion + "/windows/" + aaptVersion + ".exe", AaptManager.class);
+                aaptBinary = Jar.getResourceAsFile("/prebuilt/windows/" + aaptVersion + ".exe", AaptManager.class);
             } else {
                 throw new BrutException("Could not identify platform: " + OSDetection.returnOS());
             }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResResSpec.java
Patch:
@@ -39,7 +39,7 @@ public ResResSpec(ResID id, String name, ResPackage pkg, ResTypeSpec type) {
         if (resResSpec != null) {
             cleanName = name + "_APKTOOL_DUPLICATENAME_" + id.toString();
         } else {
-            cleanName = (name.isEmpty() ? ("APKTOOL_DUMMYVAL_" + id.toString()) : name);
+            cleanName = ((name == null || name.isEmpty()) ? ("APKTOOL_DUMMYVAL_" + id.toString()) : name);
         }
         
         this.mName = cleanName;

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/BaseTest.java
Patch:
@@ -117,6 +117,8 @@ private void compareXmlFiles(String path, ElementQualifier qualifier) throws Bru
 
             if (qualifier == null) {
                 XMLUnit.setIgnoreWhitespace(true);
+                XMLUnit.setIgnoreAttributeOrder(true);
+                XMLUnit.setCompareUnmatched(false);
                 assertXMLEqual(control, test);
                 return;
             }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/StringBlock.java
Patch:
@@ -41,7 +41,7 @@ public class StringBlock {
      * be at the chunk type.
      */
     public static StringBlock read(ExtDataInput reader) throws IOException {
-        reader.skipCheckInt(CHUNK_STRINGPOOL_TYPE);
+        reader.skipCheckChunkTypeInt(CHUNK_STRINGPOOL_TYPE, CHUNK_NULL_TYPE);
         int chunkSize = reader.readInt();
 
         // ResStringPool_header

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -168,7 +168,9 @@ public void recordUncompressedFiles(ExtFile apkFile, Collection<String> uncompre
             String ext;
 
             for (String file : files) {
-                if (isAPKFileNames(file) && unk.getCompressionLevel(file) == 0) {
+                if (isAPKFileNames(file) &&
+                    unk.getCompressionLevel(file) == 0 &&
+                    unk.getSize(file) != 0) {
 
                     if (StringUtils.countMatches(file, ".") > 1) {
                         ext = file;

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/aapt1/UnknownCompressionTest.java
Patch:
@@ -88,7 +88,7 @@ public void doubleExtensionStoredTest() throws BrutException, IOException {
     @Test
     public void confirmJsonFileIsDeflatedTest() throws BrutException, IOException {
         Integer control = sTestOrigDir.getDirectory().getCompressionLevel("test.json");
-        Integer rebuilt = sTestOrigDir.getDirectory().getCompressionLevel("test.json");
+        Integer rebuilt = sTestNewDir.getDirectory().getCompressionLevel("test.json");
 
         assertEquals(control, rebuilt);
         assertEquals(new Integer(8), rebuilt);
@@ -97,7 +97,7 @@ public void confirmJsonFileIsDeflatedTest() throws BrutException, IOException {
     @Test
     public void confirmPngFileIsCorrectlyDeflatedTest() throws BrutException, IOException {
         Integer control = sTestOrigDir.getDirectory().getCompressionLevel("950x150.png");
-        Integer rebuilt = sTestOrigDir.getDirectory().getCompressionLevel("950x150.png");
+        Integer rebuilt = sTestNewDir.getDirectory().getCompressionLevel("950x150.png");
 
         assertEquals(control, rebuilt);
         assertEquals(new Integer(8), rebuilt);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -168,7 +168,9 @@ public void recordUncompressedFiles(ExtFile apkFile, Collection<String> uncompre
             String ext;
 
             for (String file : files) {
-                if (isAPKFileNames(file) && unk.getCompressionLevel(file) == 0) {
+                if (isAPKFileNames(file) &&
+                    unk.getCompressionLevel(file) == 0 &&
+                    unk.getSize(file) != 0) {
 
                     if (StringUtils.countMatches(file, ".") > 1) {
                         ext = file;

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/util/AaptVersionTest.java
Patch:
@@ -29,5 +29,6 @@ public void testAapt2Iterations() throws BrutException {
         assertEquals(2, AaptManager.getAppVersionFromString("Android Asset Packaging Tool (aapt) 2:17"));
         assertEquals(2, AaptManager.getAppVersionFromString("Android Asset Packaging Tool (aapt) 2.17"));
         assertEquals(1, AaptManager.getAppVersionFromString("Android Asset Packaging Tool, v0.9"));
+        assertEquals(1, AaptManager.getAppVersionFromString("Android Asset Packaging Tool, v0.2-2679779"));
     }
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResUnknownFiles.java
Patch:
@@ -16,7 +16,6 @@
  */
 package brut.androlib.res.data;
 
-import brut.util.BrutIO;
 import java.util.LinkedHashMap;
 import java.util.Map;
 
@@ -28,7 +27,7 @@ public class ResUnknownFiles {
     private final Map<String, String> mUnknownFiles = new LinkedHashMap<>();
 
     public void addUnknownFileInfo(String file, String value) {
-        mUnknownFiles.put(BrutIO.normalizePath(file), value);
+        mUnknownFiles.put(file, value);
     }
 
     public Map<String, String> getUnknownFiles() {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -601,7 +601,7 @@ public void zipPackage(File apkFile, File rawDir, File assetDir)
             throws AndrolibException {
 
         try {
-            ZipUtils.zipFolders(rawDir, apkFile, assetDir, apkOptions.noCompressAssets);
+            ZipUtils.zipFolders(rawDir, apkFile, assetDir, apkOptions.doNotCompress);
         } catch (IOException | BrutException ex) {
             throw new AndrolibException(ex);
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -1006,7 +1006,7 @@ public void close() throws IOException {
 
     private final static String[] IGNORED_PACKAGES = new String[] {
             "android", "com.htc", "miui", "com.lge", "com.lge.internal", "yi", "com.miui.core", "flyme",
-            "air.com.adobe.appentry" };
+            "air.com.adobe.appentry", "FFFFFFFFFFFFFFFFFFFFFF" };
 
     private final static String[] ALLOWED_PACKAGES = new String[] {
             "com.miui" };

File: brut.j.util/src/main/java/brut/util/OS.java
Patch:
@@ -122,6 +122,7 @@ public static String execAndReturn(String[] cmd) {
     public static File createTempDirectory() throws BrutException {
         try {
             File tmp = File.createTempFile("BRUT", null);
+            tmp.deleteOnExit();
             if (!tmp.delete()) {
                 throw new BrutException("Could not delete tmp file: " + tmp.getAbsolutePath());
             }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -601,7 +601,7 @@ public void zipPackage(File apkFile, File rawDir, File assetDir)
             throws AndrolibException {
 
         try {
-            ZipUtils.zipFolders(rawDir, apkFile, assetDir, apkOptions.doNotCompress);
+            ZipUtils.zipFolders(rawDir, apkFile, assetDir, apkOptions.noCompressAssets);
         } catch (IOException | BrutException ex) {
             throw new AndrolibException(ex);
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkDecoder.java
Patch:
@@ -418,7 +418,7 @@ private void putUnknownInfo(MetaInfo meta) throws AndrolibException {
 
     private void putFileCompressionInfo(MetaInfo meta) throws AndrolibException {
         if (mUncompressedFiles != null && !mUncompressedFiles.isEmpty()) {
-            meta.doNotCompress = mUncompressedFiles;
+            meta.noCompressAssets = mUncompressedFiles;
         }
     }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkOptions.java
Patch:
@@ -28,7 +28,10 @@ public class ApkOptions {
     public boolean isFramework = false;
     public boolean resourcesAreCompressed = false;
     public boolean useAapt2 = false;
+
+    @Deprecated
     public Collection<String> doNotCompress;
+    public Collection<String> noCompressAssets;
 
     public String frameworkFolderLocation = null;
     public String frameworkTag = null;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/meta/MetaInfo.java
Patch:
@@ -37,7 +37,10 @@ public class MetaInfo {
     public boolean sharedLibrary;
     public boolean sparseResources;
     public Map<String, String> unknownFiles;
+
+    @Deprecated
     public Collection<String> doNotCompress;
+    public Collection<String> noCompressAssets;
 
     private static Yaml getYaml() {
         DumperOptions options = new DumperOptions();

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResUnknownFiles.java
Patch:
@@ -16,6 +16,7 @@
  */
 package brut.androlib.res.data;
 
+import brut.util.BrutIO;
 import java.util.LinkedHashMap;
 import java.util.Map;
 
@@ -27,7 +28,7 @@ public class ResUnknownFiles {
     private final Map<String, String> mUnknownFiles = new LinkedHashMap<>();
 
     public void addUnknownFileInfo(String file, String value) {
-        mUnknownFiles.put(file, value);
+        mUnknownFiles.put(BrutIO.normalizePath(file), value);
     }
 
     public Map<String, String> getUnknownFiles() {

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/BaseTest.java
Patch:
@@ -31,6 +31,7 @@
 import java.util.Set;
 import java.util.logging.Logger;
 
+import static junit.framework.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 import static org.custommonkey.xmlunit.XMLAssert.assertXMLEqual;
@@ -45,11 +46,11 @@ protected void compareUnknownFiles() throws BrutException {
 
         Map<String, String> controlFiles = control.unknownFiles;
         Map<String, String> testFiles = test.unknownFiles;
-        assertTrue(controlFiles.size() == testFiles.size());
+        assertEquals(controlFiles.size(), testFiles.size());
 
         // Make sure that the compression methods are still the same
         for (Map.Entry<String, String> controlEntry : controlFiles.entrySet()) {
-            assertTrue(controlEntry.getValue().equals(testFiles.get(controlEntry.getKey())));
+            assertEquals(controlEntry.getValue(), testFiles.get(controlEntry.getKey()));
         }
     }
 

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/decode/DoubleExtensionUnknownFileTest.java
Patch:
@@ -62,7 +62,7 @@ public void multipleExtensionUnknownFileTest() throws BrutException, IOException
         apkDecoder.decode();
 
         MetaInfo metaInfo = new Androlib().readMetaFile(decodedApk);
-        for (String string : metaInfo.doNotCompress) {
+        for (String string : metaInfo.noCompressAssets) {
             if (StringUtils.countMatches(string, ".") > 1) {
                 assertTrue(string.equalsIgnoreCase("assets/bin/Data/sharedassets1.assets.split0"));
             }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResUnknownFiles.java
Patch:
@@ -16,6 +16,7 @@
  */
 package brut.androlib.res.data;
 
+import brut.util.BrutIO;
 import java.util.LinkedHashMap;
 import java.util.Map;
 
@@ -27,7 +28,7 @@ public class ResUnknownFiles {
     private final Map<String, String> mUnknownFiles = new LinkedHashMap<>();
 
     public void addUnknownFileInfo(String file, String value) {
-        mUnknownFiles.put(file, value);
+        mUnknownFiles.put(BrutIO.normalizePath(file), value);
     }
 
     public Map<String, String> getUnknownFiles() {

File: brut.j.dir/src/main/java/brut/directory/ZipUtils.java
Patch:
@@ -54,7 +54,8 @@ private static void processFolder(final File folder, final ZipOutputStream zipOu
             throws BrutException, IOException {
         for (final File file : folder.listFiles()) {
             if (file.isFile()) {
-                final ZipEntry zipEntry = new ZipEntry(BrutIO.sanitizeUnknownFile(folder, file.getPath().substring(prefixLength)));
+                final String cleanedPath = BrutIO.sanitizeUnknownFile(folder, file.getPath().substring(prefixLength));
+                final ZipEntry zipEntry = new ZipEntry(BrutIO.normalizePath(cleanedPath));
 
                 // aapt binary by default takes in parameters via -0 arsc to list extensions that shouldn't be
                 // compressed. We will replicate that behavior

File: brut.j.dir/src/main/java/brut/directory/ZipUtils.java
Patch:
@@ -54,8 +54,8 @@ private static void processFolder(final File folder, final ZipOutputStream zipOu
             throws BrutException, IOException {
         for (final File file : folder.listFiles()) {
             if (file.isFile()) {
-                final String normalizedPath = BrutIO.normalizePath(file.getPath().substring(prefixLength));
-                final ZipEntry zipEntry = new ZipEntry(BrutIO.sanitizeUnknownFile(folder, normalizedPath));
+                final String cleanedPath = BrutIO.sanitizeUnknownFile(folder, file.getPath().substring(prefixLength));
+                final ZipEntry zipEntry = new ZipEntry(BrutIO.normalizePath(cleanedPath));
 
                 // aapt binary by default takes in parameters via -0 arsc to list extensions that shouldn't be
                 // compressed. We will replicate that behavior

File: brut.j.dir/src/main/java/brut/directory/ZipUtils.java
Patch:
@@ -54,7 +54,8 @@ private static void processFolder(final File folder, final ZipOutputStream zipOu
             throws BrutException, IOException {
         for (final File file : folder.listFiles()) {
             if (file.isFile()) {
-                final ZipEntry zipEntry = new ZipEntry(BrutIO.sanitizeUnknownFile(folder, file.getPath().substring(prefixLength)));
+                final String normalizedPath = BrutIO.normalizePath(file.getPath().substring(prefixLength));
+                final ZipEntry zipEntry = new ZipEntry(BrutIO.sanitizeUnknownFile(folder, normalizedPath));
 
                 // aapt binary by default takes in parameters via -0 arsc to list extensions that shouldn't be
                 // compressed. We will replicate that behavior

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/StringBlock.java
Patch:
@@ -41,7 +41,7 @@ public class StringBlock {
      * be at the chunk type.
      */
     public static StringBlock read(ExtDataInput reader) throws IOException {
-        reader.skipCheckChunkTypeInt(CHUNK_STRINGPOOL_TYPE, CHUNK_NULL_TYPE);
+        reader.skipCheckInt(CHUNK_STRINGPOOL_TYPE);
         int chunkSize = reader.readInt();
 
         // ResStringPool_header

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/StringBlock.java
Patch:
@@ -41,7 +41,7 @@ public class StringBlock {
      * be at the chunk type.
      */
     public static StringBlock read(ExtDataInput reader) throws IOException {
-        reader.skipCheckChunkTypeInt(CHUNK_STRINGPOOL_TYPE, CHUNK_NULL_TYPE);
+        reader.skipCheckInt(CHUNK_STRINGPOOL_TYPE);
         int chunkSize = reader.readInt();
 
         // ResStringPool_header

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -104,7 +104,6 @@ public void decodeSourcesSmali(File apkFile, File outDir, String filename, boole
     public void decodeManifestRaw(ExtFile apkFile, File outDir)
             throws AndrolibException {
         try {
-            Directory apk = apkFile.getDirectory();
             LOGGER.info("Copying raw manifest...");
             apkFile.getDirectory().copyToDir(outDir, APK_MANIFEST_FILENAMES);
         } catch (DirectoryException ex) {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -790,7 +790,7 @@ public File getFrameworkDir() throws AndrolibException {
 
         File dir = new File(path);
 
-        if (!dir.isDirectory()) {
+        if (!dir.isDirectory() && dir.isFile()) {
             throw new AndrolibException("--frame-path is set to a file, not a directory.");
         }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -790,7 +790,7 @@ public File getFrameworkDir() throws AndrolibException {
 
         File dir = new File(path);
 
-        if (!dir.isDirectory()) {
+        if (!dir.isDirectory() && dir.isFile()) {
             LOGGER.severe("--frame-path is set to a file, not a directory.");
             System.exit(1);
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlEncoders.java
Patch:
@@ -143,12 +143,12 @@ public static String encodeAsXmlValue(String str) {
     }
 
     public static boolean hasMultipleNonPositionalSubstitutions(String str) {
-        Duo<List<Integer>, List<Integer>> tuple = findSubstitutions(str, 3);
+        Duo<List<Integer>, List<Integer>> tuple = findSubstitutions(str, 4);
         return ! tuple.m1.isEmpty() && tuple.m1.size() + tuple.m2.size() > 1;
     }
 
     public static String enumerateNonPositionalSubstitutionsIfRequired(String str) {
-        Duo<List<Integer>, List<Integer>> tuple = findSubstitutions(str, 3);
+        Duo<List<Integer>, List<Integer>> tuple = findSubstitutions(str, 4);
         if (tuple.m1.isEmpty() || tuple.m1.size() + tuple.m2.size() < 2) {
             return str;
         }

File: brut.j.dir/src/main/java/brut/directory/ZipRODirectory.java
Patch:
@@ -120,7 +120,7 @@ private void loadAll() {
             ZipEntry entry = entries.nextElement();
             String name = entry.getName();
             
-            if (name.equals(getPath()) || ! name.startsWith(getPath())) {
+            if (name.equals(getPath()) || ! name.startsWith(getPath()) || name.contains(".." + separator)) {
                 continue;
             }
             
@@ -136,8 +136,7 @@ private void loadAll() {
                 subname = subname.substring(0, pos);
             }
             
-            boolean pointsToParentDirectory = (subname.equals("..") && prefixLen == 0);
-            if (! mDirs.containsKey(subname) && ! pointsToParentDirectory) {
+            if (! mDirs.containsKey(subname)) {
                 AbstractDirectory dir = new ZipRODirectory(getZipFile(), getPath() + subname + separator);
                 mDirs.put(subname, dir);                
             }

File: brut.j.dir/src/main/java/brut/directory/ZipRODirectory.java
Patch:
@@ -120,7 +120,7 @@ private void loadAll() {
             ZipEntry entry = entries.nextElement();
             String name = entry.getName();
             
-            if (name.equals(getPath()) || ! name.startsWith(getPath())) {
+            if (name.equals(getPath()) || ! name.startsWith(getPath()) || name.contains(".." + separator)) {
                 continue;
             }
             

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -133,14 +133,13 @@ private static void cmdDecode(CommandLine cli) throws AndrolibException {
         if (cli.hasOption("m") || cli.hasOption("match-original")) {
             decoder.setAnalysisMode(true, false);
         }
-        if (cli.hasOption("api")) {
+        if (cli.hasOption("api") || cli.hasOption("api-level")) {
             decoder.setApi(Integer.parseInt(cli.getOptionValue("api")));
         }
         if (cli.hasOption("o") || cli.hasOption("output")) {
             outDir = new File(cli.getOptionValue("o"));
             decoder.setOutDir(outDir);
         } else {
-
             // make out folder manually using name of apk
             String outName = apkName;
             outName = outName.endsWith(".apk") ? outName.substring(0,
@@ -295,7 +294,7 @@ private static void _Options() {
                 .build();
 
         Option apiLevelOption = Option.builder("api")
-                .longOpt("api")
+                .longOpt("api-level")
                 .desc("The numeric api-level of the file to generate, e.g. 14 for ICS.")
                 .hasArg(true)
                 .argName("API")
@@ -441,6 +440,7 @@ private static void _Options() {
         for (Object op : frameOptions.getOptions()) {
             allOptions.addOption((Option)op);
         }
+        allOptions.addOption(apiLevelOption);
         allOptions.addOption(analysisOption);
         allOptions.addOption(debugDecOption);
         allOptions.addOption(noDbgOption);

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -265,7 +265,7 @@ private static void _Options() {
 
         // create options
         Option versionOption = Option.builder("version")
-		        .longOpt("version")
+                .longOpt("version")
                 .desc("prints the version then exits")
                 .build();
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/mod/SmaliMod.java
Patch:
@@ -83,6 +83,7 @@ public static boolean assembleSmaliFile(File smaliFile,DexBuilder dexBuilder, bo
 
         if (parser.getNumberOfSyntaxErrors() > 0 || lexer.getNumberOfSyntaxErrors() > 0) {
             is.close();
+            reader.close();
             return false;
         }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -71,6 +71,9 @@ public ResScalarValue factory(int type, int value, String rawValue) throws Andro
     }
 
     public ResIntBasedValue factory(String value, int rawValue) {
+        if (value == null) {
+            return new ResFileValue("", rawValue);
+        }
         if (value.startsWith("res/")) {
             return new ResFileValue(value, rawValue);
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -71,6 +71,9 @@ public ResScalarValue factory(int type, int value, String rawValue) throws Andro
     }
 
     public ResIntBasedValue factory(String value, int rawValue) {
+        if (value == null) {
+            return new ResFileValue("", rawValue);
+        }
         if (value.startsWith("res/")) {
             return new ResFileValue(value, rawValue);
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlPatcher.java
Patch:
@@ -141,7 +141,7 @@ public static void fixingPublicAttrsInProviderAttributes(File file) throws Andro
      *
      * @param file File we are searching for value
      * @param saved boolean on whether we need to save
-     * @param provider Node we are attempign to replace
+     * @param provider Node we are attempting to replace
      * @return boolean
      * @throws AndrolibException setting node value failed
      */

File: brut.j.dir/src/main/java/brut/directory/ZipRODirectory.java
Patch:
@@ -136,7 +136,8 @@ private void loadAll() {
                 subname = subname.substring(0, pos);
             }
             
-            if (! mDirs.containsKey(subname)) {
+            boolean pointsToParentDirectory = (subname.equals("..") && prefixLen == 0);
+            if (! mDirs.containsKey(subname) && ! pointsToParentDirectory) {
                 AbstractDirectory dir = new ZipRODirectory(getZipFile(), getPath() + subname + separator);
                 mDirs.put(subname, dir);                
             }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResConfigFlags.java
Patch:
@@ -507,6 +507,9 @@ public int hashCode() {
     public final static byte SDK_LOLLIPOP = 21;
     public final static byte SDK_LOLLIPOP_MR1 = 22;
     public final static byte SDK_MNC = 23;
+    public final static byte SDK_NOUGAT = 24;
+    public final static byte SDK_NOUGAT_MR1 = 25;
+    public final static byte SDK_O = 26;
 
     public final static byte ORIENTATION_ANY = 0;
     public final static byte ORIENTATION_PORT = 1;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -90,7 +90,8 @@ public ResBagValue bagFactory(int parent, Duo<Integer, ResScalarValue>[] items)
         if (key == ResAttr.BAG_KEY_ATTR_TYPE) {
             return ResAttr.factory(parentVal, items, this, mPackage);
         }
-        if (key == ResArrayValue.BAG_KEY_ARRAY_START) {
+        // Android O Preview added an unknown enum for ResTable_map. This is hardcoded as 0 for now.
+        if (key == ResArrayValue.BAG_KEY_ARRAY_START || key == 0) {
             return new ResArrayValue(parentVal, items);
         }
         if (key >= ResPluralsValue.BAG_KEY_PLURALS_START && key <= ResPluralsValue.BAG_KEY_PLURALS_END) {

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/BuildAndDecodeJarTest.java
Patch:
@@ -33,7 +33,7 @@
 public class BuildAndDecodeJarTest {
 
     @BeforeClass
-    public static void beforeClass() throws Exception, BrutException {
+    public static void beforeClass() throws Exception {
         TestUtils.cleanFrameworkFile();
         sTmpDir = new ExtFile(OS.createTempDirectory());
         sTestOrigDir = new ExtFile(sTmpDir, "testjar-orig");
@@ -66,4 +66,4 @@ public void buildAndDecodeTest() throws BrutException {
     private static ExtFile sTestNewDir;
 
     private final static Logger LOGGER = Logger.getLogger(BuildAndDecodeJarTest.class.getName());
-}
+}
\ No newline at end of file

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/DebugTagRetainedTest.java
Patch:
@@ -37,7 +37,7 @@
 public class DebugTagRetainedTest {
 
     @BeforeClass
-    public static void beforeClass() throws Exception, BrutException {
+    public static void beforeClass() throws Exception {
         TestUtils.cleanFrameworkFile();
         sTmpDir = new ExtFile(OS.createTempDirectory());
         sTestOrigDir = new ExtFile(sTmpDir, "issue1235-orig");

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/DefaultBaksmaliVariableTest.java
Patch:
@@ -18,12 +18,12 @@
 public class DefaultBaksmaliVariableTest {
 
     @BeforeClass
-    public static void beforeClass() throws Exception, BrutException {
+    public static void beforeClass() throws Exception {
         sTmpDir = new ExtFile(OS.createTempDirectory());
         sTestOrigDir = new ExtFile(sTmpDir, "testjar-orig");
         sTestNewDir = new ExtFile(sTmpDir, "testjar-new");
         LOGGER.info("Unpacking testjar...");
-        TestUtils.copyResourceDir(BuildAndDecodeJarTest.class, "brut/apktool/issue1481/", sTestOrigDir);
+        TestUtils.copyResourceDir(DefaultBaksmaliVariableTest.class, "brut/apktool/issue1481/", sTestOrigDir);
 
         LOGGER.info("Building issue1481.jar...");
         File testJar = new File(sTmpDir, "issue1481.jar");
@@ -99,5 +99,5 @@ public void confirmBaksmaliParamsAreTheSame() throws BrutException, IOException
     private static ExtFile sTestOrigDir;
     private static ExtFile sTestNewDir;
 
-    private final static Logger LOGGER = Logger.getLogger(BuildAndDecodeJarTest.class.getName());
+    private final static Logger LOGGER = Logger.getLogger(DefaultBaksmaliVariableTest.class.getName());
 }

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/PositionalEnumerationTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import brut.androlib.res.xml.ResXmlEncoders;
 import org.junit.Test;
-import java.util.logging.Logger;
 
 import static org.junit.Assert.assertEquals;
 
@@ -54,6 +53,4 @@ public void threePositionalArgumentsTest() {
     private String enumerateArguments(String value) {
         return ResXmlEncoders.enumerateNonPositionalSubstitutionsIfRequired(value);
     }
-
-    private final static Logger LOGGER = Logger.getLogger(BuildAndDecodeJarTest.class.getName());
 }
\ No newline at end of file

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/ProviderAttributeTest.java
Patch:
@@ -84,4 +84,4 @@ private boolean fileExists(String filepath) {
     }
 
     private static ExtFile sTmpDir;
-}
+}
\ No newline at end of file

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/VectorDrawableTest.java
Patch:
@@ -25,7 +25,6 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.util.logging.Logger;
 
 import static org.junit.Assert.assertTrue;
 
@@ -66,6 +65,4 @@ private void checkFileExists(String path) throws BrutException {
 
     private static ExtFile sTmpDir;
     private static ExtFile sTestOrigDir;
-
-    private final static Logger LOGGER = Logger.getLogger(VectorDrawableTest.class.getName());
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResConfigFlags.java
Patch:
@@ -507,6 +507,9 @@ public int hashCode() {
     public final static byte SDK_LOLLIPOP = 21;
     public final static byte SDK_LOLLIPOP_MR1 = 22;
     public final static byte SDK_MNC = 23;
+    public final static byte SDK_NOUGAT = 24;
+    public final static byte SDK_NOUGAT_MR1 = 25;
+    public final static byte SDK_O = 26;
 
     public final static byte ORIENTATION_ANY = 0;
     public final static byte ORIENTATION_PORT = 1;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -90,7 +90,8 @@ public ResBagValue bagFactory(int parent, Duo<Integer, ResScalarValue>[] items)
         if (key == ResAttr.BAG_KEY_ATTR_TYPE) {
             return ResAttr.factory(parentVal, items, this, mPackage);
         }
-        if (key == ResArrayValue.BAG_KEY_ARRAY_START) {
+        // Android O Preview added an unknown enum for ResTable_map. This is hardcoded as 0 for now.
+        if (key == ResArrayValue.BAG_KEY_ARRAY_START || key == 0) {
             return new ResArrayValue(parentVal, items);
         }
         if (key >= ResPluralsValue.BAG_KEY_PLURALS_START && key <= ResPluralsValue.BAG_KEY_PLURALS_END) {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResConfigFlags.java
Patch:
@@ -507,6 +507,9 @@ public int hashCode() {
     public final static byte SDK_LOLLIPOP = 21;
     public final static byte SDK_LOLLIPOP_MR1 = 22;
     public final static byte SDK_MNC = 23;
+    public final static byte SDK_NOUGAT = 24;
+    public final static byte SDK_NOUGAT_MR1 = 25;
+    public final static byte SDK_O = 26;
 
     public final static byte ORIENTATION_ANY = 0;
     public final static byte ORIENTATION_PORT = 1;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -90,7 +90,8 @@ public ResBagValue bagFactory(int parent, Duo<Integer, ResScalarValue>[] items)
         if (key == ResAttr.BAG_KEY_ATTR_TYPE) {
             return ResAttr.factory(parentVal, items, this, mPackage);
         }
-        if (key == ResArrayValue.BAG_KEY_ARRAY_START) {
+        // Android O Preview added an unknown enum for ResTable_map. This is hardcoded as 0 for now.
+        if (key == ResArrayValue.BAG_KEY_ARRAY_START || key == 0) {
             return new ResArrayValue(parentVal, items);
         }
         if (key >= ResPluralsValue.BAG_KEY_PLURALS_START && key <= ResPluralsValue.BAG_KEY_PLURALS_END) {

File: brut.j.dir/src/main/java/brut/directory/ZipRODirectory.java
Patch:
@@ -136,7 +136,8 @@ private void loadAll() {
                 subname = subname.substring(0, pos);
             }
             
-            if (! mDirs.containsKey(subname)) {
+            boolean pointsToParentDirectory = (subname.equals("..") && prefixLen == 0);
+            if (! mDirs.containsKey(subname) && ! pointsToParentDirectory) {
                 AbstractDirectory dir = new ZipRODirectory(getZipFile(), getPath() + subname + separator);
                 mDirs.put(subname, dir);                
             }

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -190,10 +190,9 @@ private static void cmdDecode(CommandLine cli) throws AndrolibException {
         } finally {
             try {
                 decoder.close();
-            } catch (IOException e) {
-            }
+            } catch (IOException ignored) {}
         }
-
+        System.exit(0);
     }
 
     private static void cmdBuild(CommandLine cli) throws BrutException {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkDecoder.java
Patch:
@@ -286,7 +286,9 @@ public boolean hasResources() throws AndrolibException {
     }
 
     public void close() throws IOException {
-        mAndrolib.close();
+        if (mAndrolib != null) {
+            mAndrolib.close();
+        }
     }
 
     public final static short DECODE_SOURCES_NONE = 0x0000;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -819,7 +819,9 @@ public File getAndroidResourcesFile() throws AndrolibException {
     }
 
     public void close() throws IOException {
-        mFramework.close();
+        if (mFramework != null) {
+            mFramework.close();
+        }
     }
 
     public ApkOptions apkOptions;

File: brut.j.dir/src/main/java/brut/directory/Directory.java
Patch:
@@ -50,5 +50,8 @@ public void copyToDir(File out, String fileName)
     public int getCompressionLevel(String fileName)
             throws DirectoryException;
 
+
+    public void close() throws IOException;
+    
     public final char separator = '/';
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/src/SmaliDecoder.java
Patch:
@@ -48,12 +48,12 @@ private SmaliDecoder(File apkFile, File outDir, String dexName, boolean bakdeb,
 
     private void decode() throws AndrolibException {
         try {
-            BaksmaliOptions options = new BaksmaliOptions();
+            final BaksmaliOptions options = new BaksmaliOptions();
 
             // options
             options.deodex = false;
             options.implicitReferences = false;
-            options.parameterRegisters = false;
+            options.parameterRegisters = true;
             options.localsDirective = true;
             options.sequentialLabels = true;
             options.debugInfo = mBakDeb;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlEncoders.java
Patch:
@@ -143,12 +143,12 @@ public static String encodeAsXmlValue(String str) {
     }
 
     public static boolean hasMultipleNonPositionalSubstitutions(String str) {
-        Duo<List<Integer>, List<Integer>> tuple = findSubstitutions(str, 2);
+        Duo<List<Integer>, List<Integer>> tuple = findSubstitutions(str, 3);
         return ! tuple.m1.isEmpty() && tuple.m1.size() + tuple.m2.size() > 1;
     }
 
     public static String enumerateNonPositionalSubstitutionsIfRequired(String str) {
-        Duo<List<Integer>, List<Integer>> tuple = findSubstitutions(str, 2);
+        Duo<List<Integer>, List<Integer>> tuple = findSubstitutions(str, 3);
         if (tuple.m1.isEmpty() || tuple.m1.size() + tuple.m2.size() < 2) {
             return str;
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -22,7 +22,7 @@
 import brut.androlib.res.data.ResPackage;
 import brut.androlib.res.data.ResTable;
 import brut.androlib.res.data.ResUnknownFiles;
-import brut.androlib.res.util.ExtFile;
+import brut.directory.ExtFile;
 import brut.androlib.res.xml.ResXmlPatcher;
 import brut.androlib.src.SmaliBuilder;
 import brut.androlib.src.SmaliDecoder;
@@ -31,7 +31,6 @@
 import brut.util.BrutIO;
 import brut.util.OS;
 import java.io.*;
-import java.nio.file.Files;
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkDecoder.java
Patch:
@@ -26,7 +26,7 @@
 import brut.androlib.res.AndrolibResources;
 import brut.androlib.res.data.ResPackage;
 import brut.androlib.res.data.ResTable;
-import brut.androlib.res.util.ExtFile;
+import brut.directory.ExtFile;
 import brut.androlib.res.xml.ResXmlPatcher;
 import brut.common.BrutException;
 import brut.directory.DirectoryException;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -25,7 +25,7 @@
 import brut.androlib.res.decoder.*;
 import brut.androlib.res.decoder.ARSCDecoder.ARSCData;
 import brut.androlib.res.decoder.ARSCDecoder.FlagsOffset;
-import brut.androlib.res.util.ExtFile;
+import brut.directory.ExtFile;
 import brut.androlib.res.util.ExtMXSerializer;
 import brut.androlib.res.util.ExtXmlSerializer;
 import brut.androlib.res.xml.ResValuesXmlSerializable;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/src/SmaliBuilder.java
Patch:
@@ -18,14 +18,12 @@
 
 import brut.androlib.AndrolibException;
 import brut.androlib.mod.SmaliMod;
-import brut.androlib.res.util.ExtFile;
+import brut.directory.ExtFile;
 import brut.directory.DirectoryException;
 import java.io.*;
-import java.util.List;
 import java.util.logging.Logger;
 
 import org.antlr.runtime.RecognitionException;
-import org.apache.commons.io.IOUtils;
 import org.jf.dexlib2.Opcodes;
 import org.jf.dexlib2.writer.builder.DexBuilder;
 import org.jf.dexlib2.writer.io.FileDataStore;

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/AndResGuardTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package brut.androlib;
 
-import brut.androlib.res.util.ExtFile;
+import brut.directory.ExtFile;
 import brut.common.BrutException;
 import brut.util.OS;
 import java.io.File;

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/BuildAndDecodeJarTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package brut.androlib;
 
-import brut.androlib.res.util.ExtFile;
+import brut.directory.ExtFile;
 import brut.common.BrutException;
 import brut.util.OS;
 import org.junit.AfterClass;

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/BuildAndDecodeTest.java
Patch:
@@ -16,7 +16,7 @@
 package brut.androlib;
 
 import brut.androlib.meta.MetaInfo;
-import brut.androlib.res.util.ExtFile;
+import brut.directory.ExtFile;
 import brut.common.BrutException;
 import brut.directory.FileDirectory;
 import brut.util.OS;
@@ -31,7 +31,6 @@
 import org.junit.*;
 import static org.junit.Assert.*;
 
-import org.junit.rules.ExpectedException;
 import org.xml.sax.SAXException;
 
 import javax.imageio.ImageIO;
@@ -420,7 +419,7 @@ private void compareBinaryFolder(String path, boolean res) throws BrutException,
 
         String location = tmp + path;
 
-        FileDirectory fileDirectory = new FileDirectory(sTestOrigDir + location);
+        FileDirectory fileDirectory = new FileDirectory(sTestOrigDir, location);
 
         Set<String> files = fileDirectory.getFiles(true);
         for (String filename : files) {

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/DebugTagRetainedTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package brut.androlib;
 
-import brut.androlib.res.util.ExtFile;
+import brut.directory.ExtFile;
 import brut.common.BrutException;
 import brut.util.OS;
 import org.junit.AfterClass;

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/DoubleExtensionUnknownFileTest.java
Patch:
@@ -17,7 +17,7 @@
 package brut.androlib;
 
 import brut.androlib.meta.MetaInfo;
-import brut.androlib.res.util.ExtFile;
+import brut.directory.ExtFile;
 import brut.common.BrutException;
 import brut.util.OS;
 import org.apache.commons.lang3.StringUtils;

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/MissingVersionManifestTest.java
Patch:
@@ -16,7 +16,7 @@
 package brut.androlib;
 
 import brut.androlib.meta.MetaInfo;
-import brut.androlib.res.util.ExtFile;
+import brut.directory.ExtFile;
 import brut.common.BrutException;
 import brut.util.OS;
 import org.junit.AfterClass;

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/ProviderAttributeTest.java
Patch:
@@ -16,9 +16,8 @@
  */
 package brut.androlib;
 
-import brut.androlib.res.util.ExtFile;
+import brut.directory.ExtFile;
 import brut.common.BrutException;
-import brut.directory.DirectoryException;
 import brut.util.OS;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/ReferenceVersionCodeTest.java
Patch:
@@ -16,7 +16,7 @@
 package brut.androlib;
 
 import brut.androlib.meta.MetaInfo;
-import brut.androlib.res.util.ExtFile;
+import brut.directory.ExtFile;
 import brut.common.BrutException;
 import brut.util.OS;
 import org.junit.AfterClass;

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/SharedLibraryTest.java
Patch:
@@ -16,9 +16,8 @@
  */
 package brut.androlib;
 
-import brut.androlib.res.util.ExtFile;
+import brut.directory.ExtFile;
 import brut.common.BrutException;
-import brut.directory.DirectoryException;
 import brut.util.OS;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/UnknownCompressionTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package brut.androlib;
 
-import brut.androlib.res.util.ExtFile;
+import brut.directory.ExtFile;
 import brut.common.BrutException;
 import brut.util.OS;
 import org.junit.AfterClass;

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/BuildAndDecodeTest.java
Patch:
@@ -380,7 +380,7 @@ public void fileAssetTest() throws BrutException, IOException {
 
     @Test
     public void unicodeAssetTest() throws BrutException, IOException {
-        // failure using ∂ (unicode)
+        compareAssetsFolder("unicode-txt");
     }
 
     @Test

File: brut.j.dir/src/main/java/brut/directory/FileDirectory.java
Patch:
@@ -30,7 +30,7 @@ public class FileDirectory extends AbstractDirectory {
     private File mDir;
 
     public FileDirectory(String dir) throws DirectoryException {
-        this(new File(dir));
+        this(Paths.get(dir).toFile());
     }
 
     public FileDirectory(ExtFile dir, String folder) throws DirectoryException {

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/BuildAndDecodeTest.java
Patch:
@@ -380,7 +380,7 @@ public void fileAssetTest() throws BrutException, IOException {
 
     @Test
     public void unicodeAssetTest() throws BrutException, IOException {
-        // failure using ∂ (unicode)
+        compareAssetsFolder("unicode-txt");
     }
 
     @Test

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -390,6 +390,7 @@ public void aaptPackage(File apkFile, File manifest, File resDir, File rawDir, F
             cmd.add("--version-name");
             cmd.add(mVersionName);
         }
+        cmd.add("--no-version-vectors");
         cmd.add("-F");
         cmd.add(apkFile.getAbsolutePath());
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -55,8 +55,9 @@ public ResScalarValue factory(int type, int value, String rawValue) throws Andro
             case TypedValue.TYPE_INT_BOOLEAN:
                 return new ResBoolValue(value != 0, value, rawValue);
             case TypedValue.TYPE_DYNAMIC_REFERENCE:
-            case TypedValue.TYPE_DYNAMIC_ATTRIBUTE:
                 return newReference(value, rawValue);
+            case TypedValue.TYPE_DYNAMIC_ATTRIBUTE:
+                return newReference(value, rawValue, true);
         }
 
         if (type >= TypedValue.TYPE_FIRST_COLOR_INT && type <= TypedValue.TYPE_LAST_COLOR_INT) {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -55,8 +55,9 @@ public ResScalarValue factory(int type, int value, String rawValue) throws Andro
             case TypedValue.TYPE_INT_BOOLEAN:
                 return new ResBoolValue(value != 0, value, rawValue);
             case TypedValue.TYPE_DYNAMIC_REFERENCE:
-            case TypedValue.TYPE_DYNAMIC_ATTRIBUTE:
                 return newReference(value, rawValue);
+            case TypedValue.TYPE_DYNAMIC_ATTRIBUTE:
+                return newReference(value, rawValue, true);
         }
 
         if (type >= TypedValue.TYPE_FIRST_COLOR_INT && type <= TypedValue.TYPE_LAST_COLOR_INT) {

File: brut.j.util/src/main/java/brut/util/ExtDataInput.java
Patch:
@@ -69,7 +69,7 @@ public void skipCheckByte(byte expected) throws IOException {
     public void skipCheckChunkTypeInt(int expected, int possible) throws IOException {
         int got = readInt();
 
-        if (got == possible) {
+        if (got == possible || got < expected) {
             skipCheckChunkTypeInt(expected, -1);
         } else if (got != expected) {
             throw new IOException(String.format("Expected: 0x%08x, got: 0x%08x", expected, got));

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkOptions.java
Patch:
@@ -19,6 +19,7 @@
 
 public class ApkOptions {
     public boolean forceBuildAll = false;
+    public boolean forceDeleteFramework = false;
     public boolean debugMode = false;
     public boolean verbose = false;
     public boolean copyOriginalFiles = false;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -752,6 +752,6 @@ private File[] newFiles(String[] names, File dir) {
     // Taken from AOSP's frameworks/base/tools/aapt/Package.cpp
     private final static Pattern NO_COMPRESS_PATTERN = Pattern.compile("\\.(" +
             "jpg|jpeg|png|gif|wav|mp2|mp3|ogg|aac|mpg|mpeg|mid|midi|smf|jet|rtttl|imy|xmf|mp4|" +
-            "m4a|m4v|3gp|3gpp|3g2|3gpp2|amr|awb|wma|wmv)$");
+            "m4a|m4v|3gp|3gpp|3g2|3gpp2|amr|awb|wma|wmv|webm|mkv)$");
 
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -55,6 +55,7 @@ public ResScalarValue factory(int type, int value, String rawValue) throws Andro
             case TypedValue.TYPE_INT_BOOLEAN:
                 return new ResBoolValue(value != 0, value, rawValue);
             case TypedValue.TYPE_DYNAMIC_REFERENCE:
+            case TypedValue.TYPE_DYNAMIC_ATTRIBUTE:
                 return newReference(value, rawValue);
         }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -55,6 +55,7 @@ public ResScalarValue factory(int type, int value, String rawValue) throws Andro
             case TypedValue.TYPE_INT_BOOLEAN:
                 return new ResBoolValue(value != 0, value, rawValue);
             case TypedValue.TYPE_DYNAMIC_REFERENCE:
+            case TypedValue.TYPE_DYNAMIC_ATTRIBUTE:
                 return newReference(value, rawValue);
         }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResStyleValue.java
Patch:
@@ -45,7 +45,7 @@ public void serializeToResValuesXml(XmlSerializer serializer,
                                         ResResource res) throws IOException, AndrolibException {
         serializer.startTag(null, "style");
         serializer.attribute(null, "name", res.getResSpec().getName());
-        if (!mParent.isNull()) {
+        if (!mParent.isNull() && !mParent.referentIsNull()) {
             serializer.attribute(null, "parent", mParent.encodeAsResXmlAttr());
         } else if (res.getResSpec().getName().indexOf('.') != -1) {
             serializer.attribute(null, "parent", "");

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -72,7 +72,7 @@ public ResIntBasedValue factory(String value, int rawValue) {
         if (value.startsWith("res/")) {
             return new ResFileValue(value, rawValue);
         }
-        if (value.startsWith("r/")) { //AndroResGuard
+        if (value.startsWith("r/") || value.startsWith("R/")) { //AndroResGuard
             return new ResFileValue(value, rawValue);
         }
         return new ResStringValue(value, rawValue);

File: brut.apktool/apktool-lib/src/main/java/android/util/TypedValue.java
Patch:
@@ -269,7 +269,7 @@ public static final String coerceToString(int type, int data) {
                         + FRACTION_UNIT_STRS[(data >> COMPLEX_UNIT_SHIFT)
                         & COMPLEX_UNIT_MASK];
             case TYPE_INT_HEX:
-                return "0x" + Integer.toHexString(data);
+                return String.format("0x%08X", data);
             case TYPE_INT_BOOLEAN:
                 return data != 0 ? "true" : "false";
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResTypeSpec.java
Patch:
@@ -30,10 +30,10 @@ public final class ResTypeSpec {
     private final ResTable mResTable;
     private final ResPackage mPackage;
 
-    private final byte mId;
+    private final int mId;
     private final int mEntryCount;
 
-    public ResTypeSpec(String name, ResTable resTable, ResPackage package_, byte id, int entryCount) {
+    public ResTypeSpec(String name, ResTable resTable, ResPackage package_, int id, int entryCount) {
         this.mName = name;
         this.mResTable = resTable;
         this.mPackage = package_;
@@ -45,7 +45,7 @@ public String getName() {
         return mName;
     }
 
-    public byte getId() {
+    public int getId() {
         return mId;
     }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -161,7 +161,7 @@ private ResTypeSpec readTableTypeSpec() throws AndrolibException, IOException {
 
     private ResTypeSpec readSingleTableTypeSpec() throws AndrolibException, IOException {
         checkChunkType(Header.TYPE_SPEC_TYPE);
-        byte id = mIn.readByte();
+        int id = mIn.readUnsignedByte();
         mIn.skipBytes(3);
         int entryCount = mIn.readInt();
 
@@ -177,7 +177,7 @@ private ResTypeSpec readSingleTableTypeSpec() throws AndrolibException, IOExcept
 
     private ResType readTableType() throws IOException, AndrolibException {
         checkChunkType(Header.TYPE_TYPE);
-        byte typeId = mIn.readByte();
+        int typeId = mIn.readUnsignedByte();
         if (mResTypeSpecs.containsKey(typeId)) {
             mResId = (0xff000000 & mResId) | mResTypeSpecs.get(typeId).getId() << 16;
             mTypeSpec = mResTypeSpecs.get(typeId);
@@ -502,7 +502,7 @@ private void nextChunkCheckType(int expectedType) throws IOException, AndrolibEx
     private ResType mType;
     private int mResId;
     private boolean[] mMissingResSpecs;
-    private HashMap<Byte, ResTypeSpec> mResTypeSpecs = new HashMap<>();
+    private HashMap<Integer, ResTypeSpec> mResTypeSpecs = new HashMap<>();
 
     private final static short ENTRY_FLAG_COMPLEX = 0x0001;
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -703,8 +703,10 @@ public File getFrameworkDir() throws AndrolibException {
 
             if (OSDetection.isMacOSX()) {
                 path = parentPath.getAbsolutePath() + String.format("%1$sLibrary%1$sapktool%1$sframework", File.separatorChar);
+            } else if (OSDetection.isWindows()) {
+                path = parentPath.getAbsolutePath() + String.format("%1$sAppData%1$sLocal%1$sapktool%1$sframework", File.separatorChar);
             } else {
-                path = parentPath.getAbsolutePath() + String.format("%1$sapktool%1$sframework", File.separatorChar);
+                path = parentPath.getAbsolutePath() + String.format("%1$s.local%1$sshare%1$sapktool%1$sframework", File.separatorChar);
             }
         }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -37,8 +37,8 @@ public ResScalarValue factory(int type, int value, String rawValue) throws Andro
                 if (value == TypedValue.DATA_NULL_UNDEFINED) { // Special case $empty as explicitly defined empty value
                     return new ResStringValue(null, value);
                 } else if (value == TypedValue.DATA_NULL_EMPTY) {
-					return new ResEmptyValue(value, rawValue, type);
-				}
+                    return new ResEmptyValue(value, rawValue, type);
+                }
                 return new ResReferenceValue(mPackage, 0, null);
             case TypedValue.TYPE_REFERENCE:
                 return newReference(value, rawValue);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlPatcher.java
Patch:
@@ -125,7 +125,7 @@ public static void fixingPublicAttrsInProviderAttributes(File file) throws Andro
      * @throws AndrolibException
      */
     public static String pullValueFromStrings(File directory, String key) throws AndrolibException {
-        if (! key.contains("@")) {
+        if (key == null || ! key.contains("@")) {
             return null;
         }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -790,7 +790,8 @@ public File getAndroidResourcesFile() throws AndrolibException {
     private boolean mSharedLibrary = false;
 
     private final static String[] IGNORED_PACKAGES = new String[] {
-            "android", "com.htc", "miui", "com.lge", "com.lge.internal", "yi", "com.miui.core", "flyme"};
+            "android", "com.htc", "miui", "com.lge", "com.lge.internal", "yi", "com.miui.core", "flyme",
+            "air.com.adobe.appentry" };
 
     private final static String[] ALLOWED_PACKAGES = new String[] {
             "com.miui" };

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -199,8 +199,8 @@ private static void cmdBuild(CommandLine cli) throws BrutException {
             apkOptions.forceBuildAll = true;
         }
         if (cli.hasOption("d") || cli.hasOption("debug")) {
-            System.err.println("SmaliDebugging has been removed in 2.1.0 onward. Please see: https://github.com/iBotPeaches/Apktool/issues/1061");
-            System.exit(1);
+            System.out.println("SmaliDebugging has been removed in 2.1.0 onward. Please see: https://github.com/iBotPeaches/Apktool/issues/1061");
+            apkOptions.debugMode = true;
         }
         if (cli.hasOption("v") || cli.hasOption("verbose")) {
             apkOptions.verbose = true;
@@ -286,7 +286,7 @@ private static void _Options() {
                 .create();
 
         Option debugBuiOption = OptionBuilder.withLongOpt("debug")
-                .withDescription("Builds in debug mode. Check project page for more info.")
+                .withDescription("Sets android:debuggable to \"true\" in the APK's compiled manifest")
                 .create("d");
 
         Option noDbgOption = OptionBuilder.withLongOpt("no-debug-info")

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkOptions.java
Patch:
@@ -19,6 +19,7 @@
 
 public class ApkOptions {
     public boolean forceBuildAll = false;
+    public boolean debugMode = false;
     public boolean verbose = false;
     public boolean copyOriginalFiles = false;
     public boolean updateFiles = false;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -346,6 +346,9 @@ public void aaptPackage(File apkFile, File manifest, File resDir, File rawDir, F
         if (apkOptions.updateFiles) {
             cmd.add("-u");
         }
+        if (apkOptions.debugMode) { // inject debuggable="true" into manifest
+            cmd.add("--debug-mode");
+        }
         // force package id so that some frameworks build with correct id
         // disable if user adds own aapt (can't know if they have this feature)
         if (mPackageId != null && ! customAapt && ! mSharedLibrary) {

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -199,8 +199,8 @@ private static void cmdBuild(CommandLine cli) throws BrutException {
             apkOptions.forceBuildAll = true;
         }
         if (cli.hasOption("d") || cli.hasOption("debug")) {
-            System.err.println("SmaliDebugging has been removed in 2.1.0 onward. Please see: https://github.com/iBotPeaches/Apktool/issues/1061");
-            System.exit(1);
+            System.out.println("SmaliDebugging has been removed in 2.1.0 onward. Please see: https://github.com/iBotPeaches/Apktool/issues/1061");
+            apkOptions.debugMode = true;
         }
         if (cli.hasOption("v") || cli.hasOption("verbose")) {
             apkOptions.verbose = true;
@@ -286,7 +286,7 @@ private static void _Options() {
                 .create();
 
         Option debugBuiOption = OptionBuilder.withLongOpt("debug")
-                .withDescription("Builds in debug mode. Check project page for more info.")
+                .withDescription("Sets android:debuggable to \"true\" in the APK's compiled manifest")
                 .create("d");
 
         Option noDbgOption = OptionBuilder.withLongOpt("no-debug-info")

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkOptions.java
Patch:
@@ -19,6 +19,7 @@
 
 public class ApkOptions {
     public boolean forceBuildAll = false;
+    public boolean debugMode = false;
     public boolean verbose = false;
     public boolean copyOriginalFiles = false;
     public boolean updateFiles = false;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -346,6 +346,9 @@ public void aaptPackage(File apkFile, File manifest, File resDir, File rawDir, F
         if (apkOptions.updateFiles) {
             cmd.add("-u");
         }
+        if (apkOptions.debugMode) { // inject debuggable="true" into manifest
+            cmd.add("--debug-mode");
+        }
         // force package id so that some frameworks build with correct id
         // disable if user adds own aapt (can't know if they have this feature)
         if (mPackageId != null && ! customAapt && ! mSharedLibrary) {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -627,7 +627,7 @@ public void installFramework(File frameFile, String tag)
             byte[] manifest = createAndroidManifestFileData();
             entry = createAndroidManifestEntry(manifest);
             out.putNextEntry(entry);
-            out.write(data);
+            out.write(manifest);
             out.closeEntry();
 
             zip.close();

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResTable.java
Patch:
@@ -104,6 +104,9 @@ public ResPackage getCurrentResPackage() throws AndrolibException {
         if (pkg != null) {
             return pkg;
         } else {
+            if (mMainPackages.size() == 1) {
+                return mMainPackages.iterator().next();
+            }
             return getHighestSpecPackage();
         }
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -23,7 +23,7 @@
 import brut.util.Duo;
 import brut.androlib.res.data.ResTable;
 import brut.util.ExtDataInput;
-import com.mindprod.ledatastream.LEDataInputStream;
+import com.peterfranza.LittleEndianDataInputStream;
 import java.io.*;
 import java.math.BigInteger;
 import java.util.*;
@@ -61,7 +61,7 @@ private ARSCDecoder(InputStream arscStream, ResTable resTable, boolean storeFlag
             mCountIn = null;
             mFlagsOffsets = null;
         }
-        mIn = new ExtDataInput(new LEDataInputStream(arscStream));
+        mIn = new ExtDataInput(new LittleEndianDataInputStream(arscStream));
         mResTable = resTable;
         mKeepBroken = keepBroken;
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/AXmlResourceParser.java
Patch:
@@ -20,7 +20,7 @@
 import brut.androlib.AndrolibException;
 import brut.androlib.res.xml.ResXmlEncoders;
 import brut.util.ExtDataInput;
-import com.mindprod.ledatastream.LEDataInputStream;
+import com.peterfranza.LittleEndianDataInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.Reader;
@@ -69,7 +69,7 @@ public void setAttrDecoder(ResAttrDecoder attrDecoder) {
     public void open(InputStream stream) {
         close();
         if (stream != null) {
-            m_reader = new ExtDataInput(new LEDataInputStream(stream));
+            m_reader = new ExtDataInput(new LittleEndianDataInputStream(stream));
         }
     }
 
@@ -994,4 +994,4 @@ private void setFirstError(AndrolibException error) {
             CHUNK_XML_END_NAMESPACE = 0x00100101,
             CHUNK_XML_START_TAG = 0x00100102, CHUNK_XML_END_TAG = 0x00100103,
             CHUNK_XML_TEXT = 0x00100104, CHUNK_XML_LAST = 0x00100104;
-}
\ No newline at end of file
+}

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -708,7 +708,7 @@ private File[] newFiles(String[] names, File dir) {
     private final static String[] APK_MANIFEST_FILENAMES = new String[] {
             "AndroidManifest.xml" };
     private final static String[] APK_STANDARD_ALL_FILENAMES = new String[] {
-            "classes.dex", "AndroidManifest.xml", "resources.arsc", "res", "lib", "libs", "assets", "META-INF" };
+            "classes.dex", "AndroidManifest.xml", "resources.arsc", "res", "r", "lib", "libs", "assets", "META-INF" };
     // Taken from AOSP's frameworks/base/tools/aapt/Package.cpp
     private final static Pattern NO_COMPRESS_PATTERN = Pattern.compile("\\.(" +
             "jpg|jpeg|png|gif|wav|mp2|mp3|ogg|aac|mpg|mpeg|mid|midi|smf|jet|rtttl|imy|xmf|mp4|" +

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -70,6 +70,9 @@ public ResIntBasedValue factory(String value, int rawValue) {
         if (value.startsWith("res/")) {
             return new ResFileValue(value, rawValue);
         }
+        if (value.startsWith("r/")) { //AndroResGuard
+            return new ResFileValue(value, rawValue);
+        }
         return new ResStringValue(value, rawValue);
     }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -435,7 +435,7 @@ private void addMissingResSpecs() throws AndrolibException {
                 continue;
             }
 
-            ResResSpec spec = new ResResSpec(new ResID(resId | i), String.format("APKTOOL_DUMMY_%04x", i), mPkg, mTypeSpec);
+            ResResSpec spec = new ResResSpec(new ResID(resId | i), "APKTOOL_DUMMY_" + Integer.toHexString(i), mPkg, mTypeSpec);
 
             // If we already have this resID dont add it again.
             if (! mPkg.hasResSpec(new ResID(resId | i))) {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkOptions.java
Patch:
@@ -19,7 +19,6 @@
 
 public class ApkOptions {
     public boolean forceBuildAll = false;
-    public boolean debugMode = false;
     public boolean verbose = false;
     public boolean copyOriginalFiles = false;
     public boolean updateFiles = false;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkOptions.java
Patch:
@@ -19,7 +19,6 @@
 
 public class ApkOptions {
     public boolean forceBuildAll = false;
-    public boolean debugMode = false;
     public boolean verbose = false;
     public boolean copyOriginalFiles = false;
     public boolean updateFiles = false;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkDecoder.java
Patch:
@@ -72,8 +72,7 @@ public void setApi(int api) {
 
     public void decode() throws AndrolibException, IOException, DirectoryException {
         File outDir = getOutDir();
-
-	AndrolibResources.sKeepBroken = mKeepBrokenResources;
+        AndrolibResources.sKeepBroken = mKeepBrokenResources;
 
         if (!mForceDelete && outDir.exists()) {
             throw new OutDirExistsException();

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -628,7 +628,7 @@ private void copyUnknownFiles(File appDir, ZipOutputStream outputFile, Map<Strin
             }
 
             ZipEntry newEntry = new ZipEntry(unknownFileInfo.getKey());
-            int method = Integer.valueOf(unknownFileInfo.getValue());
+            int method = Integer.parseInt(unknownFileInfo.getValue());
             LOGGER.fine(String.format("Copying unknown file %s with method %d", unknownFileInfo.getKey(), method));
             if (method == ZipEntry.STORED) {
                 newEntry.setMethod(ZipEntry.STORED);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ResFileDecoder.java
Patch:
@@ -106,7 +106,7 @@ public void decode(ResResource res, Directory inDir, Directory outDir)
         } catch (AndrolibException ex) {
             LOGGER.log(Level.SEVERE, String.format(
                     "Could not decode file, replacing by FALSE value: %s",
-                    inFileName, outFileName), ex);
+                    inFileName), ex);
             res.replace(new ResBoolValue(false, 0, null));
         }
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/src/SmaliBuilder.java
Patch:
@@ -82,6 +82,7 @@ private void buildFile(String fileName, DexBuilder dexBuilder)
 
         StringBuilder out = new StringBuilder();
         List<String> lines = IOUtils.readLines(inStream);
+        inStream.close();
 
         if (! mDebug) {
             final String[] linesArray = lines.toArray(new String[0]);
@@ -107,9 +108,6 @@ private void buildFile(String fileName, DexBuilder dexBuilder)
                 out.append(line).append('\n');
             }
         }
-
-        inStream.close();
-
         try {
             if (!SmaliMod.assembleSmaliFile(out.toString(),dexBuilder, false, false, inFile)) {
                 throw new AndrolibException("Could not smali file: " + fileName);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResStringValue.java
Patch:
@@ -71,5 +71,5 @@ private String checkIfStringIsNumeric(String val) {
         return allDigits.matcher(val).matches() ? "\\ " + val : val;
     }
 
-    private static Pattern allDigits = Pattern.compile("\\d+");
+    private static Pattern allDigits = Pattern.compile("\\d{9,}");
 }

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -151,7 +151,7 @@ private static void cmdDecode(CommandLine cli) throws AndrolibException {
             // make out folder manually using name of apk
             String outName = apkName;
             outName = outName.endsWith(".apk") ? outName.substring(0,
-                    outName.length() - 4) : outName + ".out";
+                    outName.length() - 4).trim() : outName + ".out";
 
             // make file from path
             outName = new File(outName).getName();

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -151,7 +151,7 @@ private static void cmdDecode(CommandLine cli) throws AndrolibException {
             // make out folder manually using name of apk
             String outName = apkName;
             outName = outName.endsWith(".apk") ? outName.substring(0,
-                    outName.length() - 4) : outName + ".out";
+                    outName.length() - 4).trim() : outName + ".out";
 
             // make file from path
             outName = new File(outName).getName();

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/mod/SmaliMod.java
Patch:
@@ -96,6 +96,9 @@ public static boolean assembleSmaliFile(File smaliFile,DexBuilder dexBuilder, bo
         dexGen.setDexBuilder(dexBuilder);
         dexGen.smali_file();
 
+        is.close();
+        reader.close();
+
         return dexGen.getNumberOfSyntaxErrors() == 0;
     }
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/src/SmaliBuilder.java
Patch:
@@ -108,6 +108,8 @@ private void buildFile(String fileName, DexBuilder dexBuilder)
             }
         }
 
+        inStream.close();
+
         try {
             if (!SmaliMod.assembleSmaliFile(out.toString(),dexBuilder, false, false, inFile)) {
                 throw new AndrolibException("Could not smali file: " + fileName);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -34,7 +34,7 @@ public ResValueFactory(ResPackage package_) {
     public ResScalarValue factory(int type, int value, String rawValue) throws AndrolibException {
         switch (type) {
             case TypedValue.TYPE_NULL:
-                if (value == TypedValue.DATA_NULL_EMPTY) { // Special case $empty as explicitly defined empty value
+                if (value == TypedValue.DATA_NULL_UNDEFINED) { // Special case $empty as explicitly defined empty value
                     return new ResStringValue(null, value);
                 }
                 return new ResReferenceValue(mPackage, 0, null);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkDecoder.java
Patch:
@@ -377,7 +377,7 @@ private void putVersionInfo(Map<String, Object> meta) throws AndrolibException {
     }
 
     private void putUnknownInfo(Map<String, Object> meta) throws AndrolibException {
-        Map<String,String> info = mAndrolib.mResUnknownFiles.getUnknownFiles();
+        Map<byte[], String> info = mAndrolib.mResUnknownFiles.getUnknownFiles();
         if (info.size() > 0) {
             meta.put("unknownFiles", info);
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkDecoder.java
Patch:
@@ -377,7 +377,7 @@ private void putVersionInfo(Map<String, Object> meta) throws AndrolibException {
     }
 
     private void putUnknownInfo(Map<String, Object> meta) throws AndrolibException {
-        Map<String,String> info = mAndrolib.mResUnknownFiles.getUnknownFiles();
+        Map<byte[], String> info = mAndrolib.mResUnknownFiles.getUnknownFiles();
         if (info.size() > 0) {
             meta.put("unknownFiles", info);
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResResource.java
Patch:
@@ -23,11 +23,11 @@
  * @author Ryszard Wiśniewski <brut.alll@gmail.com>
  */
 public class ResResource {
-    private final ResConfig mConfig;
+    private final ResType mConfig;
     private final ResResSpec mResSpec;
     private final ResValue mValue;
 
-    public ResResource(ResConfig config, ResResSpec spec, ResValue value) {
+    public ResResource(ResType config, ResResSpec spec, ResValue value) {
         this.mConfig = config;
         this.mResSpec = spec;
         this.mValue = value;
@@ -38,7 +38,7 @@ public String getFilePath() {
                 + mConfig.getFlags().getQualifiers() + "/" + mResSpec.getName();
     }
 
-    public ResConfig getConfig() {
+    public ResType getConfig() {
         return mConfig;
     }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -264,7 +264,7 @@ private ResIntBasedValue readValue() throws IOException, AndrolibException {
     private ResConfigFlags readConfigFlags() throws IOException,
             AndrolibException {
         int size = mIn.readInt();
-        int read = 0;
+        int read = 28;
 
         if (size < 28) {
             throw new AndrolibException("Config size < 28");

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -264,7 +264,7 @@ private ResIntBasedValue readValue() throws IOException, AndrolibException {
     private ResConfigFlags readConfigFlags() throws IOException,
             AndrolibException {
         int size = mIn.readInt();
-        int read = 0;
+        int read = 28;
 
         if (size < 28) {
             throw new AndrolibException("Config size < 28");

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkDecoder.java
Patch:
@@ -177,6 +177,7 @@ public void setDecodeResources(short mode) throws AndrolibException {
     }
 
     public void setDebugMode(boolean debug) {
+        LOGGER.warning("SmaliDebugging has been deprecated. It will be removed in Apktool 2.1 - https://github.com/iBotPeaches/Apktool/issues/1061");
         mDebug = debug;
     }
 

File: brut.apktool.smali/baksmali/src/main/java/org/jf/baksmali/Adaptors/ClassDefinition.java
Patch:
@@ -146,8 +146,7 @@ private void writeSourceFile(IndentingWriter writer) throws IOException {
     }
 
     private void writeInterfaces(IndentingWriter writer) throws IOException {
-        List<String> interfaces = Lists.newArrayList(classDef.getInterfaces());
-        Collections.sort(interfaces);
+        List<String> interfaces = classDef.getInterfaces();
 
         if (interfaces.size() != 0) {
             writer.write('\n');

File: brut.apktool.smali/dexlib2/src/main/java/org/jf/dexlib2/rewriter/ClassDefRewriter.java
Patch:
@@ -41,6 +41,7 @@
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Set;
 
 public class ClassDefRewriter implements Rewriter<ClassDef> {
@@ -73,8 +74,8 @@ public RewrittenClassDef(@Nonnull ClassDef classdef) {
             return RewriterUtils.rewriteNullable(rewriters.getTypeRewriter(), classDef.getSuperclass());
         }
 
-        @Override @Nonnull public Set<String> getInterfaces() {
-            return RewriterUtils.rewriteSet(rewriters.getTypeRewriter(), classDef.getInterfaces());
+        @Override @Nonnull public List<String> getInterfaces() {
+            return RewriterUtils.rewriteList(rewriters.getTypeRewriter(), classDef.getInterfaces());
         }
 
         @Override @Nullable public String getSourceFile() {

File: brut.apktool.smali/dexlib2/src/main/java/org/jf/dexlib2/writer/ClassSection.java
Patch:
@@ -53,7 +53,7 @@ public interface ClassSection<StringKey extends CharSequence, TypeKey extends Ch
     @Nonnull TypeKey getType(@Nonnull ClassKey key);
     int getAccessFlags(@Nonnull ClassKey key);
     @Nullable TypeKey getSuperclass(@Nonnull ClassKey key);
-    @Nullable TypeListKey getSortedInterfaces(@Nonnull ClassKey key);
+    @Nullable TypeListKey getInterfaces(@Nonnull ClassKey key);
     @Nullable StringKey getSourceFile(@Nonnull ClassKey key);
     @Nullable Collection<? extends EncodedValue> getStaticInitializers(@Nonnull ClassKey key);
 

File: brut.apktool.smali/dexlib2/src/main/java/org/jf/dexlib2/writer/DexWriter.java
Patch:
@@ -433,7 +433,7 @@ private int writeClass(@Nonnull DexDataWriter indexWriter, @Nonnull DexDataWrite
         nextIndex = writeClass(indexWriter, offsetWriter, nextIndex, superEntry);
 
         // then, try to write interfaces
-        for (TypeKey interfaceTypeKey: typeListSection.getTypes(classSection.getSortedInterfaces(key))) {
+        for (TypeKey interfaceTypeKey: typeListSection.getTypes(classSection.getInterfaces(key))) {
             Map.Entry<? extends ClassKey, Integer> interfaceEntry = classSection.getClassEntryByType(interfaceTypeKey);
             nextIndex = writeClass(indexWriter, offsetWriter, nextIndex, interfaceEntry);
         }
@@ -446,7 +446,7 @@ private int writeClass(@Nonnull DexDataWriter indexWriter, @Nonnull DexDataWrite
         indexWriter.writeInt(typeSection.getItemIndex(classSection.getType(key)));
         indexWriter.writeInt(classSection.getAccessFlags(key));
         indexWriter.writeInt(typeSection.getNullableItemIndex(classSection.getSuperclass(key)));
-        indexWriter.writeInt(typeListSection.getNullableItemOffset(classSection.getSortedInterfaces(key)));
+        indexWriter.writeInt(typeListSection.getNullableItemOffset(classSection.getInterfaces(key)));
         indexWriter.writeInt(stringSection.getNullableItemIndex(classSection.getSourceFile(key)));
         indexWriter.writeInt(classSection.getAnnotationDirectoryOffset(key));
 

File: brut.apktool.smali/dexlib2/src/main/java/org/jf/dexlib2/writer/builder/BuilderClassPool.java
Patch:
@@ -122,7 +122,7 @@ public Entry<? extends BuilderClassDef, Integer> getClassEntryByType(@Nullable B
         return builderClassDef.superclass;
     }
 
-    @Nullable @Override public BuilderTypeList getSortedInterfaces(@Nonnull BuilderClassDef builderClassDef) {
+    @Nullable @Override public BuilderTypeList getInterfaces(@Nonnull BuilderClassDef builderClassDef) {
         return builderClassDef.interfaces;
     }
 

File: brut.apktool.smali/dexlib2/src/main/java/org/jf/dexlib2/writer/pool/ClassPool.java
Patch:
@@ -250,7 +250,7 @@ public Map.Entry<? extends PoolClassDef, Integer> getClassEntryByType(@Nullable
         return classDef.getSuperclass();
     }
 
-    @Nullable @Override public TypeListPool.Key<SortedSet<String>> getSortedInterfaces(@Nonnull PoolClassDef classDef) {
+    @Nullable @Override public TypeListPool.Key<List<String>> getInterfaces(@Nonnull PoolClassDef classDef) {
         return classDef.interfaces;
     }
 

File: brut.apktool.smali/dexlib2/src/main/java/org/jf/dexlib2/writer/pool/PoolClassDef.java
Patch:
@@ -43,7 +43,7 @@
 
 class PoolClassDef extends BaseTypeReference implements ClassDef {
     @Nonnull final ClassDef classDef;
-    @Nonnull final TypeListPool.Key<SortedSet<String>> interfaces;
+    @Nonnull final TypeListPool.Key<List<String>> interfaces;
     @Nonnull final ImmutableSortedSet<Field> staticFields;
     @Nonnull final ImmutableSortedSet<Field> instanceFields;
     @Nonnull final ImmutableSortedSet<PoolMethod> directMethods;
@@ -56,7 +56,7 @@ class PoolClassDef extends BaseTypeReference implements ClassDef {
     PoolClassDef(@Nonnull ClassDef classDef) {
         this.classDef = classDef;
 
-        interfaces = new TypeListPool.Key<SortedSet<String>>(ImmutableSortedSet.copyOf(classDef.getInterfaces()));
+        interfaces = new TypeListPool.Key<List<String>>(ImmutableList.copyOf(classDef.getInterfaces()));
         staticFields = ImmutableSortedSet.copyOf(classDef.getStaticFields());
         instanceFields = ImmutableSortedSet.copyOf(classDef.getInstanceFields());
         directMethods = ImmutableSortedSet.copyOf(
@@ -77,7 +77,7 @@ class PoolClassDef extends BaseTypeReference implements ClassDef {
         return classDef.getSuperclass();
     }
 
-    @Nonnull @Override public SortedSet<String> getInterfaces() {
+    @Nonnull @Override public List<String> getInterfaces() {
         return interfaces.types;
     }
 

File: brut.apktool.smali/dexlib2/src/main/java/org/jf/dexlib2/dexbacked/raw/CodeItem.java
Patch:
@@ -100,10 +100,10 @@ public void annotateItem(@Nonnull AnnotatedBytes out, int itemIndex, @Nullable S
                     int triesCount = reader.readUshort();
                     out.annotate(2, "tries_size = %d", triesCount);
 
-                    int debugInfoOffset = reader.readSmallUint();
+                    int debugInfoOffset = reader.readInt();
                     out.annotate(4, "debug_info_off = 0x%x", debugInfoOffset);
 
-                    if (debugInfoOffset != 0) {
+                    if (debugInfoOffset > 0) {
                         addDebugInfoIdentity(debugInfoOffset, itemIdentity);
                     }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResFlagsAttr.java
Patch:
@@ -41,6 +41,9 @@ public class ResFlagsAttr extends ResAttr {
     @Override
     public String convertToResXmlFormat(ResScalarValue value)
             throws AndrolibException {
+        if(value instanceof ResReferenceValue) {
+            return value.encodeAsResXml();
+        }
         if (!(value instanceof ResIntValue)) {
             return super.convertToResXmlFormat(value);
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResFlagsAttr.java
Patch:
@@ -41,6 +41,9 @@ public class ResFlagsAttr extends ResAttr {
     @Override
     public String convertToResXmlFormat(ResScalarValue value)
             throws AndrolibException {
+        if(value instanceof ResReferenceValue) {
+            return value.encodeAsResXml();
+        }
         if (!(value instanceof ResIntValue)) {
             return super.convertToResXmlFormat(value);
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResFlagsAttr.java
Patch:
@@ -41,6 +41,9 @@ public class ResFlagsAttr extends ResAttr {
     @Override
     public String convertToResXmlFormat(ResScalarValue value)
             throws AndrolibException {
+        if(value instanceof ResReferenceValue) {
+            return value.encodeAsResXml();
+        }
         if (!(value instanceof ResIntValue)) {
             return super.convertToResXmlFormat(value);
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -323,6 +323,7 @@ private ResConfigFlags readConfigFlags() throws IOException,
         int exceedingSize = size - KNOWN_CONFIG_BYTES;
         if (exceedingSize > 0) {
             byte[] buf = new byte[exceedingSize];
+            read += exceedingSize;
             mIn.readFully(buf);
             BigInteger exceedingBI = new BigInteger(1, buf);
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -67,7 +67,7 @@ public ResScalarValue factory(int type, int value, String rawValue)
     }
 
     public ResValue factory(String value) {
-        if (value.startsWith("res/") && value.contains(".")) {
+        if (value.startsWith("res/")) {
             return new ResFileValue(value);
         }
         return new ResStringValue(value);

File: brut.apktool.smali/baksmali/src/main/java/org/jf/baksmali/Adaptors/Format/InstructionMethodItem.java
Patch:
@@ -246,7 +246,7 @@ public boolean writeTo(IndentingWriter writer) throws IOException {
                     boolean isResourceId = writeCommentIfResourceId(writer);
                     if (!isResourceId) writeCommentIfLikelyFloat(writer);
                 }
-                return true;
+                break;
             case Format21t:
             case Format31t:
                 writeOpcode(writer);

File: brut.apktool.smali/dexlib2/src/test/java/org/jf/dexlib2/AccessorTest.java
Patch:
@@ -79,7 +79,7 @@ public class AccessorTest {
     public void testAccessors() throws IOException {
         URL url = AccessorTest.class.getClassLoader().getResource("accessorTest.dex");
         Assert.assertNotNull(url);
-        DexFile f = DexFileFactory.loadDexFile(url.getFile(), 15);
+        DexFile f = DexFileFactory.loadDexFile(url.getFile(), 15, false);
 
         SyntheticAccessorResolver sar = new SyntheticAccessorResolver(f.getClasses());
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/src/SmaliDecoder.java
Patch:
@@ -91,7 +91,7 @@ private void decode() throws AndrolibException {
             }
 
             // create the dex
-            DexBackedDexFile dexFile = DexFileFactory.loadDexFile(mApkFile, mDexFile, mApi);
+            DexBackedDexFile dexFile = DexFileFactory.loadDexFile(mApkFile, mDexFile, mApi, false);
 
             if (dexFile.isOdexFile()) {
                 throw new AndrolibException("Warning: You are disassembling an odex file without deodexing it.");

File: brut.apktool.smali/util/src/main/java/org/jf/util/IndentingWriter.java
Patch:
@@ -120,7 +120,7 @@ public void write(String str, int start, int len) throws IOException {
         int pos = start;
         while (pos < end) {
             pos = str.indexOf('\n', start);
-            if (pos == -1) {
+            if (pos == -1 || pos >= end) {
                 writeLine(str, start, end-start);
                 return;
             } else {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResConfigFlags.java
Patch:
@@ -359,7 +359,7 @@ private String generateQualifiers() {
                 ret.append(String.format("-%dx%d", screenHeight, screenWidth));
             }
         }
-        if (sdkVersion > getNaturalSdkVersionRequirement()) {
+        if (sdkVersion > 0 && sdkVersion >= getNaturalSdkVersionRequirement()) {
             ret.append("-v").append(sdkVersion);
         }
         if (isInvalid) {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -280,7 +280,9 @@ public void build(ExtFile appDir, File outFile)
         new File(appDir, APK_DIRNAME).mkdirs();
         buildSources(appDir);
         buildNonDefaultSources(appDir);
+        mAndRes.fixing_public_attrs_in_providers(new File(appDir, "AndroidManifest.xml"));
         buildResources(appDir, (Map<String, Object>) meta.get("usesFramework"));
+
         buildLib(appDir);
         buildCopyOriginalFiles(appDir);
         buildApk(appDir, outFile);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -34,6 +34,8 @@ public ResValueFactory(ResPackage pakage_) {
     public ResScalarValue factory(int type, int value, String rawValue)
             throws AndrolibException {
         switch (type) {
+            case TypedValue.TYPE_NULL:
+                return new ResReferenceValue(mPackage, 0, null);
             case TypedValue.TYPE_REFERENCE:
                 return newReference(value, rawValue);
             case TypedValue.TYPE_ATTRIBUTE:

File: brut.apktool.smali/baksmali/src/main/java/org/jf/baksmali/baksmaliOptions.java
Patch:
@@ -75,7 +75,7 @@ public class baksmaliOptions {
     public boolean deodex = false;
     public boolean ignoreErrors = false;
     public boolean checkPackagePrivateAccess = false;
-    public boolean useImplicitReferences = true;
+    public boolean useImplicitReferences = false;
     public File customInlineDefinitions = null;
     public InlineMethodResolver inlineResolver = null;
     public int registerInfo = 0;

File: brut.apktool.smali/baksmali/src/main/java/org/jf/baksmali/main.java
Patch:
@@ -206,7 +206,7 @@ public static void main(String[] args) throws IOException {
                     options.setResourceIdFiles(rif);
                     break;
                 case 't':
-                    options.useImplicitReferences = false;
+                    options.useImplicitReferences = true;
                     break;
                 case 'e':
                     options.dexEntry = commandLine.getOptionValue("e");
@@ -425,8 +425,8 @@ private static void buildOptions() {
                 .withArgName("FILES")
                 .create("i");
 
-        Option noImplicitReferencesOption = OptionBuilder.withLongOpt("no-implicit-references")
-                .withDescription("Don't use implicit (type-less) method and field references")
+        Option noImplicitReferencesOption = OptionBuilder.withLongOpt("implicit-references")
+                .withDescription("Use implicit (type-less) method and field references")
                 .create("t");
 
         Option checkPackagePrivateAccessOption = OptionBuilder.withLongOpt("check-package-private-access")

File: brut.apktool.smali/dexlib2/src/main/java/org/jf/dexlib2/dexbacked/BaseDexReader.java
Patch:
@@ -48,7 +48,6 @@ public BaseDexReader(@Nonnull T dexBuf, int offset) {
     public int getOffset() { return offset; }
     public void setOffset(int offset) { this.offset = offset; }
 
-    /** {@inheritDoc} */
     public int readSleb128() {
         int end = offset;
         int currentByteValue;

File: brut.apktool.smali/dexlib2/src/main/java/org/jf/dexlib2/iface/debug/DebugItem.java
Patch:
@@ -48,8 +48,7 @@ public interface DebugItem {
     int getDebugItemType();
 
     /**
-     * The code address
-     * @return
+     * @return The code address
      */
     int getCodeAddress();
 }

File: brut.apktool.smali/dexlib2/src/main/java/org/jf/dexlib2/util/AnnotatedBytes.java
Patch:
@@ -268,8 +268,7 @@ public AnnotationItem(int  indentLevel, String annotation) {
     }
 
     /**
-     * Gets the width of the right side containing the annotations
-     * @return
+     * @return The width of the right side containing the annotations
      */
     public int getAnnotationWidth() {
         int leftWidth = 8 + (hexCols * 2) + (hexCols / 2);

File: brut.apktool.smali/util/src/main/java/ds/tree/RadixTree.java
Patch:
@@ -57,7 +57,7 @@ public interface RadixTree<T> {
     /**
      * Delete a key and its associated value from the tree.
      * @param key The key of the node that need to be deleted
-     * @return
+     * @return True if the key was deleted, false if not found
      */
     public boolean delete(String key);
 

File: brut.apktool.smali/util/src/main/java/ds/tree/RadixTreeImpl.java
Patch:
@@ -373,7 +373,7 @@ public long getSize() {
      * Display the Trie on console.
      *
      * WARNING! Do not use this for a large Trie, it's for testing purpose only.
-     * @see formatTo
+     * @see #formatTo
      */
     @Deprecated
     public void display() {

File: brut.apktool.smali/util/src/main/java/ds/tree/Visitor.java
Patch:
@@ -33,7 +33,8 @@ of this software and associated documentation files (the "Software"), to deal
  * @author Tahseen Ur Rehman (tahseen.ur.rehman {at.spam.me.not} gmail.com)
  * @author Javid Jamae
  * @author Dennis Heidsiek
- * @param <T,R>
+ * @param <T>
+ * @param <R>
  */
 public interface Visitor<T, R> {
     /**

File: brut.apktool.smali/util/src/main/java/ds/tree/VisitorImpl.java
Patch:
@@ -2,10 +2,11 @@
 
 
 /**
- * A simple standard implementation for a {@link visitor}.
+ * A simple standard implementation for a {@link Visitor}.
  *
  * @author Dennis Heidsiek
- * @param <T,R>
+ * @param <T>
+ * @param <R>
  */
 public abstract class VisitorImpl<T, R> implements Visitor<T, R> {
 

File: brut.apktool.smali/util/src/main/java/org/jf/util/ConsoleUtil.java
Patch:
@@ -35,7 +35,7 @@
 public class ConsoleUtil {
     /**
      * Attempt to find the width of the console. If it can't get the width, return a default of 80
-     * @return
+     * @return The current console width
      */
     public static int getConsoleWidth() {
         if (System.getProperty("os.name").toLowerCase().contains("windows")) {

File: brut.apktool.smali/dexlib2/src/main/java/org/jf/dexlib2/builder/MutableMethodImplementation.java
Patch:
@@ -213,8 +213,10 @@ public void addInstruction(int index, BuilderInstruction instruction) {
             return;
         }
         int codeAddress = instructionList.get(index).getCodeAddress();
+        MethodLocation newLoc = new MethodLocation(instruction, codeAddress, index);
+        instructionList.add(index, newLoc);
+        instruction.location = newLoc;
 
-        instructionList.add(index, new MethodLocation(instruction, codeAddress, index));
         codeAddress += instruction.getCodeUnits();
 
         for (int i=index+1; i<instructionList.size(); i++) {

File: brut.apktool.smali/baksmali/src/main/java/org/jf/baksmali/baksmaliOptions.java
Patch:
@@ -36,6 +36,7 @@
 import org.jf.dexlib2.analysis.InlineMethodResolver;
 import org.jf.dexlib2.util.SyntheticAccessorResolver;
 
+import java.io.File;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
@@ -73,6 +74,7 @@ public class baksmaliOptions {
     public boolean deodex = false;
     public boolean ignoreErrors = false;
     public boolean checkPackagePrivateAccess = false;
+    public File customInlineDefinitions = null;
     public InlineMethodResolver inlineResolver = null;
     public int registerInfo = 0;
     public ClassPath classPath = null;

File: brut.apktool.smali/dexlib2/src/main/java/org/jf/dexlib2/builder/MutableMethodImplementation.java
Patch:
@@ -96,8 +96,8 @@ public MutableMethodImplementation(@Nonnull MethodImplementation methodImplement
             index++;
         }
 
-        // the switch instructions must be converted last, so that any switch statements that refer to them have
-        // created the referring labels that we look for
+        // the switch payload instructions must be converted last, so that any switch statements that refer to them
+        // have created the referring labels that we look for
         for (Task switchPayloadTask: switchPayloadTasks) {
             switchPayloadTask.perform();
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -35,6 +35,8 @@
 import java.util.logging.Logger;
 import java.util.zip.ZipEntry;
 import java.nio.file.Files;
+import java.util.zip.ZipFile;
+
 import org.yaml.snakeyaml.DumperOptions;
 import org.yaml.snakeyaml.Yaml;
 
@@ -174,7 +176,7 @@ public void decodeUnknownFiles(ExtFile apkFile, File outDir, ResTable resTable)
         // with regular looping of apkFile for easy copy
         try {
             Directory unk = apkFile.getDirectory();
-            ZipExtFile apkZipFile = new ZipExtFile(apkFile.getAbsolutePath());
+            ZipFile apkZipFile = new ZipFile(apkFile.getAbsolutePath());
 
             // loop all items in container recursively, ignoring any that are pre-defined by aapt
             Set<String> files = unk.getFiles(true);
@@ -184,8 +186,6 @@ public void decodeUnknownFiles(ExtFile apkFile, File outDir, ResTable resTable)
                     // copy file out of archive into special "unknown" folder
                     unk.copyToDir(unknownOut, file);
                     try {
-                        // ignore encryption
-                        apkZipFile.getEntry(file).getGeneralPurposeBit().useEncryption(false);
                         invZipFile = apkZipFile.getEntry(file);
 
                         // lets record the name of the file, and its compression type

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -48,6 +48,8 @@ public ResScalarValue factory(int type, int value, String rawValue)
                 return new ResFractionValue(value, rawValue);
             case TypedValue.TYPE_INT_BOOLEAN:
                 return new ResBoolValue(value != 0, rawValue);
+            case TypedValue.TYPE_DYNAMIC_REFERENCE:
+                return newReference(value, rawValue);
         }
 
         if (type >= TypedValue.TYPE_FIRST_COLOR_INT

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkDecoder.java
Patch:
@@ -21,7 +21,6 @@
 import brut.androlib.res.AndrolibResources;
 import brut.androlib.res.data.ResPackage;
 import brut.androlib.res.data.ResTable;
-import brut.androlib.res.data.ResUnknownFiles;
 import brut.androlib.res.util.ExtFile;
 import brut.common.BrutException;
 import brut.directory.DirectoryException;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResPluralsValue.java
Patch:
@@ -22,7 +22,6 @@
 import brut.androlib.res.xml.ResXmlEncoders;
 import brut.util.Duo;
 import java.io.IOException;
-import org.apache.commons.lang3.StringUtils;
 import org.xmlpull.v1.XmlSerializer;
 
 /**
@@ -65,6 +64,5 @@ public void serializeToResValuesXml(XmlSerializer serializer,
 
     public static final int BAG_KEY_PLURALS_START = 0x01000004;
     public static final int BAG_KEY_PLURALS_END = 0x01000009;
-    private static final String[] QUANTITY_MAP = new String[] { "other",
-            "zero", "one", "two", "few", "many" };
+    private static final String[] QUANTITY_MAP = new String[] { "other", "zero", "one", "two", "few", "many" };
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/StringBlock.java
Patch:
@@ -61,8 +61,7 @@ public static StringBlock read(ExtDataInput reader) throws IOException {
             block.m_styleOffsets = reader.readIntArray(styleCount);
         }
         {
-            int size = ((stylesOffset == 0) ? chunkSize : stylesOffset)
-                    - stringsOffset;
+            int size = ((stylesOffset == 0) ? chunkSize : stylesOffset) - stringsOffset;
             if ((size % 4) != 0) {
                 throw new IOException("String data size is not multiple of 4 (" + size + ").");
             }
@@ -240,7 +239,6 @@ public int find(String string) {
         return -1;
     }
 
-    // /////////////////////////////////////////// implementation
     private StringBlock() {
     }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -818,7 +818,7 @@ public void setFrameworkFolder(String path) {
     private File mAaptBinary = null;
 
     private final static String[] IGNORED_PACKAGES = new String[] {
-            "android", "com.htc", "miui", "com.lge", "com.lge.internal" };
+            "android", "com.htc", "miui", "com.lge", "com.lge.internal", "yi" };
 
     private final static String[] ALLOWED_PACKAGES = new String[] {
             "com.miui" };

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -839,15 +839,13 @@ public void setFrameworkFolder(String path) {
     public static boolean sKeepBroken = false;
     public static String sFrameworkFolder = null;
 
-    private final static Logger LOGGER = Logger
-            .getLogger(AndrolibResources.class.getName());
+    private final static Logger LOGGER = Logger.getLogger(AndrolibResources.class.getName());
 
     private String mMinSdkVersion = null;
     private String mMaxSdkVersion = null;
     private String mTargetSdkVersion = null;
     private String mVersionCode = null;
     private String mVersionName = null;
-
     private String mPackageRenamed = null;
     private String mPackageOriginal = null;
     private String mPackageId = null;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkDecoder.java
Patch:
@@ -165,7 +165,6 @@ public void decode() throws AndrolibException, IOException, DirectoryException {
                     }
                 }
             }
-
         }
 
         mAndrolib.decodeRawFiles(mApkFile, outDir);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/XmlPullStreamDecoder.java
Patch:
@@ -130,7 +130,7 @@ private boolean parseAttr(XmlPullParser pp)
                         }
                     }
 
-                    return resTable.getAnalysisMode();
+                    return ! resTable.getAnalysisMode();
                 }
             };
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResArrayValue.java
Patch:
@@ -66,8 +66,7 @@ public String getType() throws AndrolibException {
             return null;
         }
         String type = mItems[0].getType();
-        for (int i = 1; i < mItems.length; i++) {
-
+        for (int i = 0; i < mItems.length; i++) {
             if (mItems[i].encodeAsResXmlItemValue().startsWith("@string")) {
                 return "string";
             } else if (mItems[i].encodeAsResXmlItemValue().startsWith("@drawable")) {

File: brut.j.dir/src/main/java/brut/directory/DirUtil.java
Patch:
@@ -76,6 +76,9 @@ public static void copyToDir(Directory in, File out, String fileName)
                 OS.rmdir(new File(out, fileName));
                 in.getDir(fileName).copyToDir(new File(out, fileName));
             } else {
+                if (fileName.equals("res") && !in.containsFile(fileName)) {
+                    return;
+                }
                 File outFile = new File(out, fileName);
                 outFile.getParentFile().mkdirs();
                 BrutIO.copyAndClose(in.getFileInput(fileName),

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -855,7 +855,7 @@ public void setFrameworkFolder(String path) {
     private File mAaptBinary = null;
 
     private final static String[] IGNORED_PACKAGES = new String[] {
-            "android", "com.htc", "miui" };
+            "android", "com.htc", "miui", "com.lge" };
 
     private final static String[] ALLOWED_PACKAGES = new String[] {
             "com.miui" };

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/BuildAndDecodeJarTest.java
Patch:
@@ -40,7 +40,7 @@ public static void beforeClass() throws Exception, BrutException {
         LOGGER.info("Unpacking testjar...");
         TestUtils.copyResourceDir(BuildAndDecodeJarTest.class, "brut/apktool/testjar/", sTestOrigDir);
 
-        LOGGER.info("Building testjar.apk...");
+        LOGGER.info("Building testjar.jar...");
         File testJar = new File(sTmpDir, "testjar.jar");
         new Androlib().build(sTestOrigDir, testJar, TestUtils.returnStockHashMap(),"");
 

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/BuildAndDecodeJarTest.java
Patch:
@@ -64,5 +64,5 @@ public void buildAndDecodeTest() throws BrutException {
     private static ExtFile sTestOrigDir;
     private static ExtFile sTestNewDir;
 
-    private final static Logger LOGGER = Logger.getLogger(BuildAndDecodeTest.class.getName());
+    private final static Logger LOGGER = Logger.getLogger(BuildAndDecodeJarTest.class.getName());
 }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkDecoder.java
Patch:
@@ -276,9 +276,8 @@ private void writeMetaFile() throws AndrolibException {
             putPackageInfo(meta);
             putVersionInfo(meta);
             putCompressionInfo(meta);
-            putUnknownInfo(meta);
-            //meta.put("packageId", getResTable().getPackageInfo().get("cur_package_id"));
         }
+        putUnknownInfo(meta);
 
         mAndrolib.writeMetaFile(mOutDir, meta);
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -137,7 +137,7 @@ public void decodeRawFiles(ExtFile apkFile, File outDir)
 
     private boolean isAPKFileNames(String file) {
         for (String apkFile : APK_STANDARD_ALL_FILENAMES) {
-            if (apkFile.equals(file) || file.startsWith(apkFile)) {
+            if (apkFile.equals(file) || file.startsWith(apkFile + "/")) {
                 return true;
             }
         }
@@ -146,7 +146,7 @@ private boolean isAPKFileNames(String file) {
 
     public void decodeUnknownFiles(ExtFile apkFile, File outDir, ResTable resTable)
             throws AndrolibException {
-        LOGGER.info("Copying unknown files/dir...");
+        LOGGER.info("Copying unknown files...");
         File unknownOut = new File(outDir, UNK_DIRNAME);
         ZipEntry invZipFile;
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApktoolProperties.java
Patch:
@@ -62,7 +62,6 @@ private static void loadProps() {
         }
         sProps.put("baksmaliVersion", version);
 
-
         templateStream = main.class.getClassLoader().getResourceAsStream("smali.properties");
         properties = new Properties();
         version = "(unknown)";

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -272,6 +272,7 @@ public void build(ExtFile appDir, File outFile,
 				: Boolean.valueOf(meta.get("compressionType").toString()));
 		mAndRes.setSdkInfo((Map<String, String>) meta.get("sdkInfo"));
 		mAndRes.setPackageId((Map<String, String>) meta.get("packageInfo"));
+        mAndRes.setPackageInfo((Map<String, String>) meta.get("packageInfo"));
 		mAndRes.setVersionInfo((Map<String, String>) meta.get("versionInfo"));
 
 		if (outFile == null) {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -585,7 +585,7 @@ private void insertFile(URI apkFileSystem, Map<String,String> zip_properties, Fi
 
             // in order to get the path relative to the zip, we strip off the absolute path, minus what we
             // already have in the zip. thus /var/files/apktool/apk/unknown/folder/file => /folder/file
-            Path dest = fs.getPath(root.toString() + insert.getAbsolutePath().replace(location.toString(),""));
+            Path dest = fs.getPath(root.toString(), insert.getAbsolutePath().replace(location.toString(),""));
             Path newFile = Paths.get(insert.getAbsolutePath());
             Files.copy(newFile,dest, StandardCopyOption.REPLACE_EXISTING);
             fs.close();
@@ -598,7 +598,7 @@ private void insertFolder(URI apkFileSystem, Map<String,String> zip_properties,
         try(FileSystem fs = FileSystems.newFileSystem(apkFileSystem, zip_properties)) {
 
             Path root = fs.getPath("/");
-            Path dest = fs.getPath(root.toString() + insert.getAbsolutePath().replace(location.toString(),""));
+            Path dest = fs.getPath(root.toString(), insert.getAbsolutePath().replace(location.toString(),""));
             Path parent = dest.normalize();
 
             // check for folder existing in apkFileSystem

File: brut.apktool.smali/baksmali/src/test/java/org/jf/baksmali/AnalysisTest.java
Patch:
@@ -104,7 +104,8 @@ public void runTest(String test, boolean registerInfo) throws IOException, URISy
                     className.substring(1, className.length() - 1));
             String smaliContents = readResource(smaliPath);
 
-            Assert.assertEquals(smaliContents.replace("\r\n", "\n"), stringWriter.toString().replace("\r\n", "\n"));
+            Assert.assertEquals(smaliContents.replace("\r", "").replace("\n", System.lineSeparator()),
+                    stringWriter.toString().replace("\r", "").replace("\n", System.lineSeparator()));
         }
     }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -781,8 +781,7 @@ private File getFrameworkDir() throws AndrolibException {
         if (sFrameworkFolder != null) {
             path = sFrameworkFolder;
         } else if (OSDetection.isMacOSX()) {
-            // store in user-home, for Mac OS X
-            path = System.getProperty("user.home") + File.separatorChar + "Library/apktool/framework";
+            path = System.getProperty("user.home") + File.separatorChar + "Library" + File.separatorChar + "apktool" + File.separatorChar + "framework";
         } else {
             path = System.getProperty("user.home") + File.separatorChar + "apktool" + File.separatorChar + "framework";
         }
@@ -807,7 +806,6 @@ private File getFrameworkDir() throws AndrolibException {
      * Aapt can still be overridden via --aapt/-a on build, but specific features will be disabled
      *
      * @url https://github.com/iBotPeaches/platform_frameworks_base
-     * @return
      * @throws AndrolibException
      */
     public File getAaptBinaryFile() throws AndrolibException {
@@ -822,6 +820,7 @@ public File getAaptBinaryFile() throws AndrolibException {
                 mAaptBinary = Jar
                         .getResourceAsFile("/prebuilt/aapt/windows/aapt.exe");
             } else {
+                LOGGER.warning("Unknown Operating System: " + OSDetection.returnOS());
                 return null;
             }
         } catch (BrutException ex) {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -337,8 +337,8 @@ public void setSdkInfo(Map<String, String> map) {
 
     public void setVersionInfo(Map<String, String> map) {
         if (map != null) {
-            mVersionCode = map.get("versionCode").toString();
-            mVersionName = map.get("versionName").toString();
+            mVersionCode = map.get("versionCode");
+            mVersionName = map.get("versionName");
         }
     }
 

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -791,7 +791,7 @@ private File getFrameworkDir() throws AndrolibException {
         if (!dir.exists()) {
             if (!dir.mkdirs()) {
                 if (sFrameworkFolder != null) {
-                    System.out.println("Can't create Framework directory: "
+                    System.err.println("Can't create Framework directory: "
                             + dir);
                 }
                 throw new AndrolibException("Can't create directory: " + dir);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/src/DebugInjector.java
Patch:
@@ -155,9 +155,9 @@ private boolean processComment(String line) {
                     localType = "D";
                     break;
                 default:
-                    System.out.println(line);
-                    System.out.println(m.group(2));
-                    System.out.println(m.group(3));
+                    System.err.println(line);
+                    System.err.println(m.group(2));
+                    System.err.println(m.group(3));
                     assert false;
             }
 

File: brut.apktool/apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -145,7 +145,8 @@ private static void cmdDecode(CommandLine cli) throws AndrolibException {
             decoder.setAnalysisMode(true, false);
         }
         if (cli.hasOption("o") || cli.hasOption("output")) {
-            decoder.setOutDir(new File(cli.getOptionValue("o")));
+            outDir = new File(cli.getOptionValue("o"));
+            decoder.setOutDir(outDir);
         } else {
 
             // make out folder manually using name of apk

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/src/SmaliDecoder.java
Patch:
@@ -96,7 +96,7 @@ private void decode() throws AndrolibException {
                 throw new AndrolibException("Warning: You are disassembling an odex file without deodexing it.");
             }
 
-            if (options.inlineResolver == null && dexFile instanceof DexBackedOdexFile) {
+            if (dexFile instanceof DexBackedOdexFile) {
                 options.inlineResolver =
                         InlineMethodResolver.createInlineMethodResolver(((DexBackedOdexFile)dexFile).getOdexVersion());
             }

File: brut.apktool.smali/dexlib2/src/main/java/org/jf/dexlib2/analysis/ClassPath.java
Patch:
@@ -139,7 +139,7 @@ public TypeProto getClass(CharSequence type) {
     @Nonnull
     public ClassDef getClassDef(String type) {
         if (dontLoadClassPath) {
-            return null;
+            throw new UnresolvedClassException("Could not resolve class %s", type);
         }
 
         ClassDef ret = availableClasses.get(type);

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/BuildAndDecodeTest.java
Patch:
@@ -60,7 +60,7 @@ public static void afterClass() throws BrutException {
 
     @Test
     public void buildAndDecodeTest() throws BrutException {
-        assertTrue(sTestNewDir.hashCode() == sTestNewDir.hashCode());
+        assertTrue(sTestNewDir.isDirectory());
     }
 
 	@Test

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -266,7 +266,7 @@ public void build(ExtFile appDir, File outFile,
 		Object t1 = meta.get("isFrameworkApk");
 		flags.put("framework", t1 == null ? false : (Boolean) t1);
 		flags.put("compression", meta.get("compressionType") == null ? false
-				: (Boolean) meta.get("compressionType"));
+				: Boolean.valueOf(meta.get("compressionType").toString()));
 		mAndRes.setSdkInfo((Map<String, String>) meta.get("sdkInfo"));
 		mAndRes.setPackageId((Map<String, String>) meta.get("packageInfo"));
 		mAndRes.setVersionInfo((Map<String, String>) meta.get("versionInfo"));

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkDecoder.java
Patch:
@@ -65,7 +65,6 @@ public void setOutDir(File outDir) throws AndrolibException {
 
 	public void decode() throws AndrolibException, IOException {
 		File outDir = getOutDir();
-        setAnalysisMode(mAnalysisMode, true);
 
 		if (!mForceDelete && outDir.exists()) {
 			throw new OutDirExistsException();
@@ -97,6 +96,7 @@ public void decode() throws AndrolibException, IOException {
 		}
 
 		if (hasResources()) {
+            setAnalysisMode(mAnalysisMode, true);
 			// read the resources.arsc checking for STORED vs DEFLATE
 			// compression
 			// this will determine whether we compress on rebuild or not.

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResArrayValue.java
Patch:
@@ -49,11 +49,9 @@ public void serializeToResValuesXml(XmlSerializer serializer,
 			ResResource res) throws IOException, AndrolibException {
 		String type = getType();
 		type = (type == null ? "" : type + "-") + "array";
-		// reference array (04 10 2012, BurgerZ)
 		if ("reference-array".equals(type)) {
 			type = "string-array";
 		}
-		// reference array (04 10 2012, BurgerZ)
 		serializer.startTag(null, type);
 		serializer.attribute(null, "name", res.getResSpec().getName());
 		for (int i = 0; i < mItems.length; i++) {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/value/ResReferenceValue.java
Patch:
@@ -50,7 +50,6 @@ protected String encodeAsResXml() throws AndrolibException {
 
 		// generate the beginning to fix @android
 		String mStart = (mTheme ? '?' : '@') + (newId ? "+" : "");
-		// mStart = mStart.replace("@android", "@*android");
 
 		return mStart
 				+ spec.getFullName(mPackage, mTheme

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -576,7 +576,7 @@ public void buildUnknownFiles(File appDir, File outFile, Map<String, Object> met
     public void insertFile(FileSystem zipfs, File insert, String method, Path root)
             throws AndrolibException, IOException {
         Path zipRoot = zipfs.getPath(zipfs.getSeparator());
-        Path zipPath = zipfs.getPath(zipRoot + insert.getAbsolutePath().replace(root.toString(),""));
+        Path zipPath = zipfs.getPath(zipRoot.toString() + insert.getAbsolutePath().replace(root.toString(),""));
         Path tmp = zipPath.normalize().getParent();
 
         if (!Files.isDirectory(tmp, LinkOption.NOFOLLOW_LINKS)) {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -551,7 +551,8 @@ public void buildUnknownFiles(File appDir, File outFile, Map<String, Object> met
                 zip_properties.put("encoding", "UTF-8");
 
                 // create filesystem
-                URI apkFileSystem = URI.create("jar:file:" + outFile.getAbsolutePath());
+                Path path = Paths.get(outFile.getAbsolutePath());
+                URI apkFileSystem = URI.create("jar:file:" + path.toUri().getPath());
                 try(FileSystem zipFS = FileSystems.newFileSystem(apkFileSystem, zip_properties)) {
 
                     // loop through files inside

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -268,7 +268,7 @@ public void build(ExtFile appDir, File outFile,
 		flags.put("compression", meta.get("compressionType") == null ? false
 				: (Boolean) meta.get("compressionType"));
 		mAndRes.setSdkInfo((Map<String, String>) meta.get("sdkInfo"));
-		mAndRes.setPackageId((String)meta.get("packageId"));
+		mAndRes.setPackageId((Map<String, String>) meta.get("packageInfo"));
 		mAndRes.setVersionInfo((Map<String, String>) meta.get("versionInfo"));
 
 		if (outFile == null) {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/data/ResConfigFlags.java
Patch:
@@ -416,7 +416,7 @@ public int hashCode() {
     public final static int DENSITY_HIGH = 240;
     public final static int DENSITY_XHIGH = 320;
     public final static int DENSITY_XXHIGH = 480;
-    public final static int DENSITY_NONE = -1;
+    public final static int DENSITY_NONE = 0xFFFF;
 
     public final static short MASK_LAYOUTDIR = 0xc0;
     public final static short SCREENLAYOUT_LAYOUTDIR_ANY = 0x00;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -64,14 +64,14 @@ public void decodeSourcesRaw(ExtFile apkFile, File outDir, boolean debug)
 		}
 	}
 
-	public void decodeSourcesSmali(File apkFile, File outDir, boolean debug,
+	public void decodeSourcesSmali(File apkFile, File outDir, boolean debug, String debugLinePrefix,
 			boolean bakdeb) throws AndrolibException {
 		try {
 			File smaliDir = new File(outDir, SMALI_DIRNAME);
 			OS.rmdir(smaliDir);
 			smaliDir.mkdirs();
 			LOGGER.info("Baksmaling...");
-			SmaliDecoder.decode(apkFile, smaliDir, debug, bakdeb);
+			SmaliDecoder.decode(apkFile, smaliDir, debug, debugLinePrefix, bakdeb);
 		} catch (BrutException ex) {
 			throw new AndrolibException(ex);
 		}

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -64,14 +64,14 @@ public void decodeSourcesRaw(ExtFile apkFile, File outDir, boolean debug)
 		}
 	}
 
-	public void decodeSourcesSmali(File apkFile, File outDir, boolean debug,
+	public void decodeSourcesSmali(File apkFile, File outDir, boolean debug, String debugLinePrefix,
 			boolean bakdeb) throws AndrolibException {
 		try {
 			File smaliDir = new File(outDir, SMALI_DIRNAME);
 			OS.rmdir(smaliDir);
 			smaliDir.mkdirs();
 			LOGGER.info("Baksmaling...");
-			SmaliDecoder.decode(apkFile, smaliDir, debug, bakdeb);
+			SmaliDecoder.decode(apkFile, smaliDir, debug, debugLinePrefix, bakdeb);
 		} catch (BrutException ex) {
 			throw new AndrolibException(ex);
 		}

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -23,17 +23,14 @@
 import brut.androlib.res.util.ExtFile;
 import brut.androlib.src.SmaliBuilder;
 import brut.androlib.src.SmaliDecoder;
-import brut.androlib.src.TypeName;
 import brut.common.BrutException;
 import brut.directory.*;
 import brut.util.BrutIO;
 import brut.util.OS;
 import java.io.*;
 import java.net.URI;
-import java.nio.charset.Charset;
 import java.nio.file.*;
 import java.nio.file.Path;
-import java.nio.file.attribute.BasicFileAttributes;
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.zip.ZipEntry;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/src/SmaliDecoder.java
Patch:
@@ -86,17 +86,17 @@ public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IO
                             file.resolveSibling(fileName + ".java"), Charset.defaultCharset())
             ) {
                 TypeName type = TypeName.fromPath(mOutDir.relativize(file.resolveSibling(fileName)));
-                out.write("package " + type.package_ + "; class " + type.getName(true, true) + " {");
+                out.write("package " + type.package_ + "; class " + type.getName(true, true) + " { void a() { int a;");
                 out.newLine();
 
                 String line;
                 while ((line = in.readLine()) != null) {
-                    out.write("// ");
+                    out.write(";// ");
                     out.write(line);
                     out.newLine();
                 }
 
-                out.write("}");
+                out.write("}}");
                 out.newLine();
             }
             Files.delete(file);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/src/SmaliBuilder.java
Patch:
@@ -74,7 +74,7 @@ private void buildFile(String fileName) throws AndrolibException,
 		StringBuilder out = new StringBuilder();
 		List<String> lines = IOUtils.readLines(inStream);
 
-		if (!mFlags.containsKey("debug")) {
+		if (!mFlags.get("debug")) {
 			final String[] linesArray = lines.toArray(new String[0]);
 			for (int i = 1; i < linesArray.length - 1; i++) {
 				out.append(linesArray[i].split("//", 2)[1]).append('\n');

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/src/DebugInjector.java
Patch:
@@ -193,7 +193,7 @@ private boolean processInstruction(String line) {
 	}
 
 	private String next() {
-		return mIt.next().trim();
+		return mIt.next().split("//", 2)[1].trim();
 	}
 
 	private String nextAndAppend() {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -553,6 +553,7 @@ public void buildUnknownFiles(File appDir, File outFile, Map<String, Object> met
                         // might need to use Zip4j
                     }
                 }
+                apkZipFile.close();
             } catch (IOException ex) {
                 throw new AndrolibException(ex);
             }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -151,7 +151,7 @@ public void decodeUnknownFiles(ExtFile apkFile, File outDir, ResTable resTable)
         // with regular looping of apkFile for easy copy
         try {
             Directory unk = apkFile.getDirectory();
-            ZipFile apkZipFile = new ZipFile(apkFile.getAbsolutePath());
+            ZipExtFile apkZipFile = new ZipExtFile(apkFile.getAbsolutePath());
 
             // loop all items in container recursively, ignoring any that are pre-defined by aapt
             Set<String> files = unk.getFiles(true);
@@ -162,6 +162,8 @@ public void decodeUnknownFiles(ExtFile apkFile, File outDir, ResTable resTable)
                     // to be re-included on build
                     unk.copyToDir(unknownOut,file);
                     try {
+                        // ignore encryption
+                        apkZipFile.getEntry(file.toString()).getGeneralPurposeBit().useEncryption(false);
                         invZipFile = apkZipFile.getEntry(file.toString());
 
                         // lets record the name of the file, and its compression type

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -761,7 +761,8 @@ private File getFrameworkDir() throws AndrolibException {
 	 * Using a prebuilt aapt and forcing its use, allows us to prevent bugs from older aapt's
      * along with having a finer control over the build procedure.
      *
-     * Aapt can still be over
+     * Aapt can still be overridden via --aapt/-a on build, but specific features will be disabled
+     *
 	 * @url https://github.com/iBotPeaches/platform_frameworks_base
 	 * @return
 	 * @throws AndrolibException

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -192,13 +192,13 @@ public Map<String, Object> readMetaFile(ExtFile appDir)
 	}
 
 	public void build(File appDir, File outFile,
-			HashMap<String, Boolean> flags, ExtFile origApk, String aaptPath)
+			HashMap<String, Boolean> flags, String aaptPath)
 			throws BrutException {
-		build(new ExtFile(appDir), outFile, flags, origApk, aaptPath);
+		build(new ExtFile(appDir), outFile, flags, aaptPath);
 	}
 
 	public void build(ExtFile appDir, File outFile,
-			HashMap<String, Boolean> flags, ExtFile origApk, String aaptPath)
+			HashMap<String, Boolean> flags, String aaptPath)
 			throws BrutException {
 
 		mAaptPath = aaptPath;

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/BuildAndDecodeTest.java
Patch:
@@ -56,9 +56,8 @@ public void encodeAndDecodeTest() throws BrutException, IOException {
 
 		LOGGER.info("Building testapp.apk...");
 		File testApk = new File(sTmpDir, "testapp.apk");
-		ExtFile blank = null;
 		new Androlib().build(sTestOrigDir, testApk,
-				BuildAndDecodeTest.returnStock(), blank, "");
+				BuildAndDecodeTest.returnStock(),"");
 
 		LOGGER.info("Decoding testapp.apk...");
 		ApkDecoder apkDecoder = new ApkDecoder(testApk);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -208,6 +208,7 @@ public void build(ExtFile appDir, File outFile,
 		flags.put("compression", meta.get("compressionType") == null ? false
 				: (Boolean) meta.get("compressionType"));
 		mAndRes.setSdkInfo((Map<String, String>) meta.get("sdkInfo"));
+		mAndRes.setPackageId((String)meta.get("packageId"));
 
 		if (outFile == null) {
 			String outFileName = (String) meta.get("apkFileName");

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkDecoder.java
Patch:
@@ -246,6 +246,7 @@ private void writeMetaFile() throws AndrolibException {
 			putSdkInfo(meta);
 			putPackageInfo(meta);
 			putCompressionInfo(meta);
+			meta.put("packageId", getResTable().getPackageInfo().get("cur_package_id"));
 		}
 
 		mAndrolib.writeMetaFile(mOutDir, meta);

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -84,6 +84,7 @@ private ResPackage[] readTable() throws IOException, AndrolibException {
 		// store package
 		if (this.mResTable.isPackageInfoValueSet("cur_package") != true) {
 			this.mResTable.addPackageInfo("cur_package", packages[0].getName());
+			this.mResTable.addPackageInfo("cur_package_id", String.valueOf(packages[0].getId()));
 		}
 		return packages;
 	}
@@ -440,4 +441,4 @@ public ResTable getResTable() {
 		private final FlagsOffset[] mFlagsOffsets;
 		private final ResTable mResTable;
 	}
-}
\ No newline at end of file
+}

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -183,6 +183,7 @@ public void build(ExtFile appDir, File outFile,
         Map<String, Object> meta = readMetaFile(appDir);
         Object t1 = meta.get("isFrameworkApk");
         flags.put("framework", t1 == null ? false : (Boolean) t1);
+        flags.put("compression", meta.get("compressionType") == null ? false : (Boolean) meta.get("compressionType"));
         mAndRes.setSdkInfo((Map<String, String>) meta.get("sdkInfo"));
         
         // check the orig apk

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/BuildAndDecodeTest.java
Patch:
@@ -33,7 +33,7 @@
 public class BuildAndDecodeTest {
 
     @BeforeClass
-    public static void beforeClass() throws BrutException {
+    public static void beforeClass() throws BrutException, IOException {
         sTmpDir = new ExtFile(OS.createTempDirectory());
         sTestOrigDir = new ExtFile(sTmpDir, "testapp-orig");
         sTestNewDir = new ExtFile(sTmpDir, "testapp-new");

File: brut.apktool/apktool-lib/src/test/java/brut/androlib/BuildAndDecodeTest.java
Patch:
@@ -45,7 +45,7 @@ public static void beforeClass() throws BrutException {
 
         LOGGER.info("Building testapp.apk...");
         ExtFile blank = null;
-        new Androlib().build(sTestOrigDir, testApk, BuildAndDecodeTest.returnStock(),blank);
+        new Androlib().build(sTestOrigDir, testApk, BuildAndDecodeTest.returnStock(),blank,"");
 
         LOGGER.info("Decoding testapp.apk...");
         ApkDecoder apkDecoder = new ApkDecoder(testApk);
@@ -118,7 +118,7 @@ public void xmlReferencesTest() throws BrutException {
 
     @Test
     public void qualifiersTest() throws BrutException {
-        compareValuesFiles("values-mcc004-mnc4-en-rUS-sw100dp-w200dp-h300dp" +
+        compareValuesFiles("values-mcc004-mnc4-en-rUS-ldrtl-sw100dp-w200dp-h300dp" +
                 "-xlarge-long-land-desk-night-xhdpi-finger-keyssoft-12key" +
                 "-navhidden-dpad/strings.xml");
     }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -344,7 +344,7 @@ ninePatch, null, parseUsesFramework(usesFramework),
                     APK_RESOURCES_WITHOUT_RES_FILENAMES);
                 
                 // delete tmpDir
-                OS.rmdir(tmpDir.toString());
+                apkFile.delete();
             }
             return true;
         } catch (IOException ex) {
@@ -404,8 +404,6 @@ ninePatch, null, parseUsesFramework(usesFramework),
                 Directory tmpDir = new ExtFile(apkFile).getDirectory();
                 tmpDir.copyToDir(apkDir, APK_MANIFEST_FILENAMES);
                 
-                // delete tmp
-                OS.rmdir(apkDir.getAbsolutePath());
             }
             return true;
         } catch (IOException ex) {
@@ -454,6 +452,8 @@ public void buildApk(File appDir, File outApk,  HashMap<String, Boolean> flags)
         mAndRes.aaptPackage(outApk, null, null,
             new File(appDir, APK_DIRNAME), assetDir, null, flags);
         
+        
+        
         /* check for re-insert */
         if (flags.get("injectOriginal")) {
             //try {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/ApkDecoder.java
Patch:
@@ -101,8 +101,7 @@ public void decode() throws AndrolibException {
 			}
 		} else {
 			// if there's no resources.asrc, decode the manifest without looking
-			// up
-			// attribute references
+			// up attribute references
 			if (hasManifest()) {
 				switch (mDecodeResources) {
 				case DECODE_RESOURCES_NONE:

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/src/SmaliDecoder.java
Patch:
@@ -49,7 +49,7 @@ private void decode() throws AndrolibException {
             baksmali.disassembleDexFile(mApkFile.getAbsolutePath(),
                 new DexFile(mApkFile), false, mOutDir.getAbsolutePath(), null,
                 null, null, false, true, true, mBakDeb, false, false, 
-                mDebug ? main.DIFFPRE: 0, false, false, null);
+                mDebug ? main.DIFFPRE: 0, false, false, null, false);
         } catch (IOException ex) {
             throw new AndrolibException(ex);
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/src/SmaliDecoder.java
Patch:
@@ -49,7 +49,7 @@ private void decode() throws AndrolibException {
             baksmali.disassembleDexFile(mApkFile.getAbsolutePath(),
                 new DexFile(mApkFile), false, mOutDir.getAbsolutePath(), null,
                 null, null, false, true, true, mBakDeb, false, false, 
-                mDebug ? main.DIFFPRE: 0, false, false, null);
+                mDebug ? main.DIFFPRE: 0, false, false, null, false);
         } catch (IOException ex) {
             throw new AndrolibException(ex);
         }

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -546,7 +546,7 @@ private File getFrameworkDir() throws AndrolibException {
         /* store in user-home, for Mac OS X */
         if (System.getProperty("os.name").equals("Mac OS X")) {
            path = System.getProperty("user.home") + File.separatorChar +
-                "Library/Application Support/apktool/framework"; }
+                "Library/apktool/framework"; }
         else {
             path = System.getProperty("user.home") + File.separatorChar +	
                 "apktool" + File.separatorChar + "framework";
@@ -580,4 +580,4 @@ public File getAndroidResourcesFile() throws AndrolibException {
     private String mMaxSdkVersion = null;
     private String mTargetSdkVersion = null;
 
-}
\ No newline at end of file
+}

File: brut.apktool.smali/baksmali/src/main/java/org/jf/baksmali/Adaptors/ClassDefinition.java
Patch:
@@ -262,7 +262,7 @@ private void writeInstanceFields(IndentingWriter writer) throws IOException {
                         classDefItem.getClassType().getTypeDescriptor(), field.field.getShortFieldString()));
             }
 
-			FieldDefinition.writeTo(fieldWriter, field, null, fieldAnnotations, false);
+            FieldDefinition.writeTo(fieldWriter, field, null, fieldAnnotations, false);
         }
     }
 

File: brut.apktool.smali/dexlib/src/main/java/org/jf/dexlib/Code/Format/Instruction10t.java
Patch:
@@ -34,7 +34,7 @@
 import org.jf.dexlib.DexFile;
 import org.jf.dexlib.Util.AnnotatedOutput;
 
-public class Instruction10t extends Instruction implements OffsetInstruction {
+public class Instruction10t extends OffsetInstruction {
     public static final InstructionFactory Factory = new Factory();
     private int targetAddressOffset;
 

File: brut.apktool.smali/dexlib/src/main/java/org/jf/dexlib/Code/Format/Instruction20t.java
Patch:
@@ -35,7 +35,7 @@
 import org.jf.dexlib.Util.AnnotatedOutput;
 import org.jf.dexlib.Util.NumberUtils;
 
-public class Instruction20t extends Instruction implements OffsetInstruction {
+public class Instruction20t extends OffsetInstruction {
     public static final InstructionFactory Factory = new Factory();
     private int targetAddressOffset;
 

File: brut.apktool.smali/dexlib/src/main/java/org/jf/dexlib/Code/Format/Instruction21t.java
Patch:
@@ -36,7 +36,7 @@
 import org.jf.dexlib.Util.AnnotatedOutput;
 import org.jf.dexlib.Util.NumberUtils;
 
-public class Instruction21t extends Instruction implements OffsetInstruction, SingleRegisterInstruction {
+public class Instruction21t extends OffsetInstruction implements SingleRegisterInstruction {
     public static final Instruction.InstructionFactory Factory = new Factory();
     private byte regA;
     private short targetAddressOffset;

File: brut.apktool.smali/dexlib/src/main/java/org/jf/dexlib/Code/Format/Instruction22t.java
Patch:
@@ -36,7 +36,7 @@
 import org.jf.dexlib.Util.AnnotatedOutput;
 import org.jf.dexlib.Util.NumberUtils;
 
-public class Instruction22t extends Instruction implements OffsetInstruction, TwoRegisterInstruction {
+public class Instruction22t extends OffsetInstruction implements TwoRegisterInstruction {
     public static final Instruction.InstructionFactory Factory = new Factory();
     private byte regA;
     private byte regB;

File: brut.apktool.smali/dexlib/src/main/java/org/jf/dexlib/Code/Format/Instruction30t.java
Patch:
@@ -35,7 +35,7 @@
 import org.jf.dexlib.Util.AnnotatedOutput;
 import org.jf.dexlib.Util.NumberUtils;
 
-public class Instruction30t extends Instruction implements OffsetInstruction {
+public class Instruction30t extends OffsetInstruction {
     public static final InstructionFactory Factory = new Factory();
     private int targetAddressOffset;
 

File: brut.apktool.smali/dexlib/src/main/java/org/jf/dexlib/Code/Format/Instruction31t.java
Patch:
@@ -36,7 +36,7 @@
 import org.jf.dexlib.Util.AnnotatedOutput;
 import org.jf.dexlib.Util.NumberUtils;
 
-public class Instruction31t extends Instruction implements OffsetInstruction, SingleRegisterInstruction {
+public class Instruction31t extends OffsetInstruction implements SingleRegisterInstruction {
     public static final Instruction.InstructionFactory Factory = new Factory();
     private byte regA;
     private int targetAddressOffset;

File: brut.apktool.smali/smali/src/main/java/org/jf/smali/InvalidToken.java
Patch:
@@ -28,7 +28,6 @@
 
 package org.jf.smali;
 
-import org.antlr.runtime.CharStream;
 import org.antlr.runtime.CommonToken;
 
 public class InvalidToken extends CommonToken {
@@ -37,13 +36,13 @@ public class InvalidToken extends CommonToken {
     public InvalidToken(String message) {
         super(smaliParser.INVALID_TOKEN);
         this.message = message;
-        this.channel = smaliLexer.ERROR_CHANNEL;
+        this.channel = smaliParser.ERROR_CHANNEL;
     }
 
     public InvalidToken(String message, String text) {
         super(smaliParser.INVALID_TOKEN, text);
         this.message = message;
-        this.channel = smaliLexer.ERROR_CHANNEL;
+        this.channel = smaliParser.ERROR_CHANNEL;
     }
 
     public String getMessage() {

File: brut.apktool.smali/smali/src/test/java/LexerTest.java
Patch:
@@ -165,7 +165,7 @@ public void runTest(String test, boolean discardHiddenTokens) {
         for (int i=0; i<tokens.size(); i++) {
             token = (CommonToken)tokens.get(i);
 
-            if (discardHiddenTokens && token.getChannel() == smaliLexer.HIDDEN) {
+            if (discardHiddenTokens && token.getChannel() == smaliParser.HIDDEN) {
                 continue;
             }
 
@@ -175,7 +175,7 @@ public void runTest(String test, boolean discardHiddenTokens) {
 
             if (token.getType() == smaliParser.INVALID_TOKEN) {
                 Assert.assertTrue("Encountered an INVALID_TOKEN not on the error channel",
-                        token.getChannel() == smaliLexer.ERROR_CHANNEL);
+                        token.getChannel() == smaliParser.ERROR_CHANNEL);
             }
 
             ExpectedToken expectedToken = expectedTokens.get(expectedTokenIndex++);

File: brut.apktool.smali/util/src/main/java/org/jf/util/ClassFileNameHandler.java
Patch:
@@ -114,7 +114,7 @@ private static boolean testForWindowsReservedFileNames(File path) {
 
         try {
             FileWriter writer = new FileWriter(f);
-            //writer.write("test");
+            writer.write("test");
             writer.flush();
             writer.close();
             f.delete(); //doesn't throw IOException

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -465,6 +465,7 @@ public void buildApk(File appDir, File outApk,  HashMap<String, Boolean> flags)
                 
                 // add res folder
                 editOrig.addFolder(new File(appDir,  APK_DIRNAME + "/res").getAbsolutePath(), parameters);
+                System.out.println("file: " + new File(appDir,  APK_DIRNAME + "/res").getAbsolutePath());
                 
                 // add assets, if there
                 if (assetDir != null) {

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/AXmlResourceParser.java
Patch:
@@ -770,7 +770,7 @@ private final int findAttribute(String namespace, String attribute) {
         int uri = (namespace != null)
                 ? m_strings.find(namespace)
                 : -1;
-        for (int o = 0; o != m_attributes.length; ++o) {
+        for (int o = 0; o != m_attributes.length; o+=ATTRIBUTE_LENGHT) {
             if (name == m_attributes[o + ATTRIBUTE_IX_NAME]
                     && (uri == -1 || uri == m_attributes[o + ATTRIBUTE_IX_NAMESPACE_URI])) {
                 return o / ATTRIBUTE_LENGHT;

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -417,7 +417,8 @@ public File getFrameworkApk(int id, String frameTag)
             InputStream in = null;
             OutputStream out = null;
             try {
-                in = AndrolibResources.class.getResourceAsStream("/brut/androlib/android-framework.jar");
+                in = AndrolibResources.class.getResourceAsStream(
+		      "/brut/androlib/android-framework.jar");
                 out = new FileOutputStream(apk);
                 IOUtils.copy(in, out);
                 return apk;
@@ -579,4 +580,4 @@ public File getAndroidResourcesFile() throws AndrolibException {
     private String mMaxSdkVersion = null;
     private String mTargetSdkVersion = null;
 
-}
+}
\ No newline at end of file

File: brut.apktool/apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -417,7 +417,7 @@ public File getFrameworkApk(int id, String frameTag)
             InputStream in = null;
             OutputStream out = null;
             try {
-                in = AndrolibResources.class.getResourceAsStream("brut/androlib/android-framework.jar");
+                in = AndrolibResources.class.getResourceAsStream("/brut/androlib/android-framework.jar");
                 out = new FileOutputStream(apk);
                 IOUtils.copy(in, out);
                 return apk;

File: brut.apktool.smali/util/src/main/java/org/jf/util/ClassFileNameHandler.java
Patch:
@@ -114,7 +114,7 @@ private static boolean testForWindowsReservedFileNames(File path) {
 
         try {
             FileWriter writer = new FileWriter(f);
-            writer.write("test");
+            //writer.write("test");
             writer.flush();
             writer.close();
             f.delete(); //doesn't throw IOException

File: apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -62,14 +62,14 @@ public void decodeSourcesRaw(ExtFile apkFile, File outDir, boolean debug)
         }
     }
 
-    public void decodeSourcesSmali(File apkFile, File outDir, boolean debug)
+    public void decodeSourcesSmali(File apkFile, File outDir, boolean debug, boolean bakdeb)
             throws AndrolibException {
         try {
             File smaliDir = new File(outDir, SMALI_DIRNAME);
             OS.rmdir(smaliDir);
             smaliDir.mkdirs();
             LOGGER.info("Baksmaling...");
-            SmaliDecoder.decode(apkFile, smaliDir, debug);
+            SmaliDecoder.decode(apkFile, smaliDir, debug, bakdeb);
         } catch (BrutException ex) {
             throw new AndrolibException(ex);
         }

File: apktool-lib/src/test/java/brut/androlib/BuildAndDecodeTest.java
Patch:
@@ -44,7 +44,7 @@ public static void beforeClass() throws BrutException {
                 "brut/apktool/testapp/", sTestOrigDir);
 
         LOGGER.info("Building testapp.apk...");
-        new Androlib().build(sTestOrigDir, testApk, false, false);
+        new Androlib().build(sTestOrigDir, testApk, false, false, false);
 
         LOGGER.info("Decoding testapp.apk...");
         ApkDecoder apkDecoder = new ApkDecoder(testApk);

File: apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -215,7 +215,7 @@ private static void usage() {
             "Copyright 2010 Ryszard Wiśniewski <brut.alll@gmail.com>\n" +
             "with smali v" + ApktoolProperties.get("smaliVersion") +
             ", and baksmali v" + ApktoolProperties.get("baksmaliVersion") + "\n" +
-            "Updated by iBotPeaches (@iBotPeaches)\n" +
+            "Updated by iBotPeaches <connor.tumbleson@gmail.com> \n" +
             "Apache License 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\n" +
             "\n" +
             "Usage: apktool [-q|--quiet OR -v|--verbose] COMMAND [...]\n" +

File: apktool-lib/src/main/java/brut/androlib/res/data/value/ResScalarValue.java
Patch:
@@ -41,18 +41,18 @@ public String encodeAsResXmlAttr() throws AndrolibException {
         if (mRawValue != null) {
             return mRawValue;
         }
-        return encodeAsResXml();
+        return encodeAsResXml().replace("@android:", "@*android:");
     }
 
     public String encodeAsResXmlItemValue() throws AndrolibException {
-        return encodeAsResXmlValue();
+        return encodeAsResXmlValue().replace("@android:", "@*android:");
     }
 
     public String encodeAsResXmlValue() throws AndrolibException {
         if (mRawValue != null) {
             return mRawValue;
         }
-         return encodeAsResXmlValueExt();
+         return encodeAsResXmlValueExt().replace("@android:", "@*android:");
     }
 
     public String encodeAsResXmlValueExt() throws AndrolibException {

File: apktool-lib/src/main/java/brut/androlib/src/SmaliDecoder.java
Patch:
@@ -44,7 +44,7 @@ private void decode() throws AndrolibException {
             baksmali.disassembleDexFile(mApkFile.getAbsolutePath(),
                 new DexFile(mApkFile), false, mOutDir.getAbsolutePath(), null,
                 null, null, false, true, true, true, false, false, 
-                mDebug ? main.DIFFPRE : 0, false, false, null);
+                mDebug ? main.DIFFPRE : 0, false, mDebug ? true : false, null);
         } catch (IOException ex) {
             throw new AndrolibException(ex);
         }

File: apktool-lib/src/test/java/brut/androlib/BuildAndDecodeTest.java
Patch:
@@ -60,6 +60,7 @@ public static void afterClass() throws BrutException {
     @Test
     public void valuesArraysTest() throws BrutException {
         compareValuesFiles("values-mcc001/arrays.xml");
+        compareValuesFiles("values-mcc002/arrays.xml");
     }
 
     @Test

File: apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -199,6 +199,7 @@ public void aaptPackage(File apkFile, File manifest, File resDir,
 
         cmd.add("aapt");
         cmd.add("p");
+        cmd.add("-v"); //mega debug mode.@todo REMOVE ON FINAL
         if (update) {
             cmd.add("-u");
         }

File: apktool-lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -170,7 +170,7 @@ public void decode(ResTable resTable, ExtFile apkFile, File outDir)
                 fileDecoder.decode(res, in, out);
             }
 
-            LOGGER.info("Decoding values*/* XMLs...");
+            LOGGER.info("Decoding values */* XMLs...");
             for (ResValuesFile valuesFile : pkg.listValuesFiles()) {
                 generateValuesFile(valuesFile, out, xmlSerializer);
             }

File: apktool-lib/src/main/java/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -395,7 +395,7 @@ public FlagsOffset(int offset, int count) {
 
     private static final Logger LOGGER =
         Logger.getLogger(ARSCDecoder.class.getName());
-    private static final int KNOWN_CONFIG_BYTES = 36;
+    private static final int KNOWN_CONFIG_BYTES = 36; // 42 now. Just need to map them out.
 
 
     public static class ARSCData {

File: apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -52,7 +52,7 @@ public ResScalarValue factory(int type, int value, String rawValue)
 
         if (type >= TypedValue.TYPE_FIRST_COLOR_INT
                 && type <= TypedValue.TYPE_LAST_COLOR_INT) {
-            return new ResColorValue(value, rawValue, type);
+            return new ResColorValue(value, rawValue);
         }
         if (type >= TypedValue.TYPE_FIRST_INT
                 && type <= TypedValue.TYPE_LAST_INT) {

File: apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -207,7 +207,6 @@ private static void cmdPublicizeResources(String[] args)
     }
 
     private static void usage() {
-        String smaliVersion = "1.3.4-dev";
         System.out.println(
             "Apktool v" + Androlib.getVersion() + " - a tool for reengineering Android apk files\n" +
             "Copyright 2010 Ryszard Wiśniewski <brut.alll@gmail.com>\n" +

File: apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.logging.Logger;
 import org.yaml.snakeyaml.DumperOptions;
 import org.yaml.snakeyaml.Yaml;
+import org.apache.commons.lang3.StringUtils;
 
 /**
  * @author Ryszard Wiśniewski <brut.alll@gmail.com>

File: apktool-lib/src/main/java/brut/androlib/res/data/value/ResScalarValue.java
Patch:
@@ -52,15 +52,15 @@ public String encodeAsResXmlValue() throws AndrolibException {
         if (mRawValue != null) {
             return mRawValue;
         }
-        return encodeAsResXml();
+        return encodeAsResXmlValueExt();
     }
 
     public String encodeAsResXmlValueExt() throws AndrolibException {
         String rawValue = mRawValue;
         if (rawValue != null) {
             if (ResXmlEncoders.hasMultipleNonPositionalSubstitutions(rawValue)) {
                 int count = 1;
-                StringBuffer result = new StringBuffer();
+                StringBuilder result = new StringBuilder();
                 String tmp1[] = rawValue.split("%%", -1);
                 int tmp1_sz = tmp1.length;
                 for(int i=0;i<tmp1_sz;i++) {

File: apktool-lib/src/main/java/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -247,13 +247,13 @@ private ResConfigFlags readConfigFlags() throws IOException, AndrolibException {
         byte keyboard = mIn.readByte();
         byte navigation = mIn.readByte();
         byte inputFlags = mIn.readByte();
-        /*inputPad0*/ mIn.skipBytes(1);
+        mIn.skipBytes(1);
 
         short screenWidth = mIn.readShort();
         short screenHeight = mIn.readShort();
 
         short sdkVersion = mIn.readShort();
-        /*minorVersion, now must always be 0*/ mIn.skipBytes(2);
+        mIn.skipBytes(2);
 
         byte screenLayout = 0;
         byte uiMode = 0;

File: apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -179,6 +179,7 @@ public void build(ExtFile appDir, File outFile, boolean forceBuildAll,
         Map<String, Object> meta = readMetaFile(appDir);
         Object t1 = meta.get("isFrameworkApk");
         boolean framework = t1 == null ? false : (Boolean) t1;
+        mAndRes.setSdkInfo((Map<String, String>) meta.get("sdkInfo"));
 
         if (outFile == null) {
             String outFileName = (String) meta.get("apkFileName");

File: apktool-lib/src/main/java/brut/androlib/Androlib.java
Patch:
@@ -93,7 +93,7 @@ public void decodeManifestRaw(ExtFile apkFile, File outDir)
     }
 
     public void decodeManifestFull(ExtFile apkFile, File outDir,
-           ResTable resTable) throws AndrolibException {
+            ResTable resTable) throws AndrolibException {
         mAndRes.decodeManifest(resTable, apkFile, outDir);
     }
 
@@ -523,4 +523,4 @@ private File[] newFiles(String[] names, File dir) {
         new String[]{"AndroidManifest.xml", "res"};
     private final static String[] APK_MANIFEST_FILENAMES =
         new String[]{"AndroidManifest.xml"};
-}
\ No newline at end of file
+}

File: apktool-lib/src/main/java/brut/androlib/res/data/ResConfigFlags.java
Patch:
@@ -196,7 +196,9 @@ private String generateQualifiers() {
             case UI_MODE_TYPE_DESK:
                 ret.append("-desk");
                 break;
-
+            case UI_MODE_TYPE_TELEVISION:
+                ret.append("-television");
+                break;
             case UI_MODE_TYPE_APPLIANCE:
                 ret.append("-appliance");
                 break;

File: apktool-lib/src/main/java/brut/androlib/res/data/value/ResScalarValue.java
Patch:
@@ -18,9 +18,9 @@
 
 import brut.androlib.res.xml.ResValuesXmlSerializable;
 import brut.androlib.res.xml.ResXmlEncodable;
+import brut.androlib.res.xml.ResXmlEncoders;
 import brut.androlib.AndrolibException;
 import brut.androlib.res.data.ResResource;
-import brut.androlib.res.xml.ResXmlEncoders;
 import java.io.IOException;
 import org.xmlpull.v1.XmlSerializer;
 
@@ -54,7 +54,7 @@ public String encodeAsResXmlValue() throws AndrolibException {
         }
         return encodeAsResXml();
     }
-    
+
     public String encodeAsResXmlValueExt() throws AndrolibException {
         String rawValue = mRawValue;
         if (rawValue != null) {

File: apktool-lib/src/main/java/brut/androlib/res/util/ExtXmlSerializer.java
Patch:
@@ -26,6 +26,8 @@ public interface ExtXmlSerializer extends XmlSerializer {
 
     public ExtXmlSerializer newLine() throws IOException;
     public void setDisabledAttrEscape(boolean disabled);
+    public ExtXmlSerializer setLineNumber(int newLine, int event) throws IOException;
+	public ExtXmlSerializer dbg(String str) throws IOException;
 
     public static final String PROPERTY_SERIALIZER_INDENTATION =
             "http://xmlpull.org/v1/doc/properties.html#serializer-indentation";

File: apktool-lib/src/main/java/brut/androlib/src/SmaliDecoder.java
Patch:
@@ -44,7 +44,7 @@ private void decode() throws AndrolibException {
             baksmali.disassembleDexFile(mApkFile.getAbsolutePath(),
                 new DexFile(mApkFile), false, mOutDir.getAbsolutePath(), null,
                 null, null, false, true, true, true, false, false, 
-                mDebug ? main.FULLMERGE : 0, false, false, null);
+                mDebug ? main.ALLPRE : 0, false, false, null);
         } catch (IOException ex) {
             throw new AndrolibException(ex);
         }

File: apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -211,8 +211,9 @@ private static void usage() {
         System.out.println(
             "Apktool v" + Androlib.getVersion() + " - a tool for reengineering Android apk files\n" +
             "Copyright 2010 Ryszard Wiśniewski <brut.alll@gmail.com>\n" +
-            "with baksmali/smali " + smaliVersion + " (http://smali.googlecode.com)\n" +
-            "Updated by iBotPeaches (@iBotPeaches) \n" +
+            "with smali v" + ApktoolProperties.get("smaliVersion") +
+            ", and baksmali v" + ApktoolProperties.get("baksmaliVersion") + "\n" +
+            "Updated by iBotPeaches (@iBotPeaches) and yyj \n" +
             "Apache License 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\n" +
             "\n" +
             "Usage: apktool [-q|--quiet OR -v|--verbose] COMMAND [...]\n" +

File: apktool-lib/src/main/java/android/util/AttributeSet.java
Patch:
@@ -46,4 +46,4 @@ public interface AttributeSet {
     //TODO: remove
     int getAttributeValueType(int index);
     int getAttributeValueData(int index);
-}
+}
\ No newline at end of file

File: apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -52,11 +52,11 @@ public ResScalarValue factory(int type, int value, String rawValue)
 
         if (type >= TypedValue.TYPE_FIRST_COLOR_INT
                 && type <= TypedValue.TYPE_LAST_COLOR_INT) {
-            return new ResColorValue(value, rawValue);
+            return new ResColorValue(value, rawValue, type);
         }
         if (type >= TypedValue.TYPE_FIRST_INT
                 && type <= TypedValue.TYPE_LAST_INT) {
-            return new ResIntValue(value, rawValue);
+            return new ResIntValue(value, rawValue, type);
         }
 
         throw new AndrolibException("Invalid value type: "+ type);
@@ -98,4 +98,4 @@ public ResReferenceValue newReference(int resID, String rawValue,
             boolean theme) {
         return new ResReferenceValue(mPackage, resID, rawValue, theme);
     }
-}
+}
\ No newline at end of file

File: apktool-lib/src/main/java/com/mindprod/ledatastream/LEDataInputStream.java
Patch:
@@ -316,4 +316,4 @@ public final int skipBytes( int n ) throws IOException
         {
         return dis.skipBytes( n );
         }
-    }
+    }
\ No newline at end of file

File: apktool-lib/src/test/java/brut/androlib/TestUtils.java
Patch:
@@ -1,4 +1,4 @@
-/**
+ /**
  *  Copyright 2011 Ryszard Wiśniewski <brut.alll@gmail.com>
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");

File: apktool-lib/src/main/java/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -267,15 +267,15 @@ private ResConfigFlags readConfigFlags() throws IOException, AndrolibException {
         if (exceedingSize > 0) {
             byte[] buf = new byte[exceedingSize];
             mIn.readFully(buf);
-            BigInteger exceedingBI = new BigInteger(buf);
+            BigInteger exceedingBI = new BigInteger(1, buf);
 
             if (exceedingBI.equals(BigInteger.ZERO)) {
                 LOGGER.fine(String.format(
                     "Config flags size > %d, but exceeding bytes are all zero, so it should be ok.",
                     KNOWN_CONFIG_BYTES));
             } else {
                 LOGGER.warning(String.format(
-                    "Config flags size > %d. Exceeding bytes: %0" + (exceedingSize * 2) + "X.",
+                    "Config flags size > %d. Exceeding bytes: 0x%X.",
                     KNOWN_CONFIG_BYTES, exceedingBI));
                 isInvalid = true;
             }

File: apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlEncoders.java
Patch:
@@ -92,7 +92,6 @@ public static String encodeAsXmlValue(String str) {
                     isInStyleTag = false;
                     startPos = out.length() + 1;
                     enclose = false;
-                    wasSpace = true;
                 }
             } else if (c == ' ') {
                 if (wasSpace) {
@@ -114,7 +113,7 @@ public static String encodeAsXmlValue(String str) {
                         break;
                     case '<':
                         isInStyleTag = true;
-                        if (enclose || wasSpace) {
+                        if (enclose) {
                             out.insert(startPos, '"').append('"');
                         }
                         break;
@@ -129,7 +128,7 @@ public static String encodeAsXmlValue(String str) {
         }
 
         if (enclose || wasSpace) {
-            out.insert(0, '"').append('"');
+            out.insert(startPos, '"').append('"');
         }
 
         return out.toString();

File: apktool-lib/src/main/java/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -38,6 +38,8 @@ public ResScalarValue factory(int type, int value, String rawValue)
                 return newReference(value, rawValue);
             case TypedValue.TYPE_ATTRIBUTE:
                 return newReference(value, rawValue, true);
+            case TypedValue.TYPE_STRING:
+                return new ResStringValue(rawValue);
             case TypedValue.TYPE_FLOAT:
                 return new ResFloatValue(Float.intBitsToFloat(value), rawValue);
             case TypedValue.TYPE_DIMENSION:

File: apktool-cli/src/main/java/brut/apktool/Main.java
Patch:
@@ -255,8 +255,10 @@ private static void usage() {
 
     private static void setupLogging(boolean verbose) {
         Logger logger = Logger.getLogger("");
+        for (Handler handler : logger.getHandlers()) {
+            logger.removeHandler(handler);
+        }
         Handler handler = new ConsoleHandler();
-        logger.removeHandler(logger.getHandlers()[0]);
         logger.addHandler(handler);
 
         if (verbose) {

File: apktool-lib/src/main/java/brut/androlib/res/data/value/ResScalarValue.java
Patch:
@@ -37,7 +37,7 @@ protected ResScalarValue(String type) {
     public void serializeToXml(XmlSerializer serializer, ResResource res)
             throws IOException, AndrolibException {
         String type = res.getResSpec().getType().getName();
-        boolean item = ! type.equals(mType);
+        boolean item = ! "reference".equals(mType) && ! type.equals(mType);
         String tagName = item ? "item" : type;
         
         serializer.startTag(null, tagName);

File: apktool-lib/src/main/java/brut/androlib/res/data/ResConfigFlags.java
Patch:
@@ -125,7 +125,7 @@ public String getQualifiers() {
     private String generateQualifiers() {
         StringBuilder ret = new StringBuilder();
         if (mcc != 0) {
-            ret.append("-mcc").append(mcc);
+            ret.append("-mcc").append(String.format("%03d", mcc));
             if (mnc != 0) {
                 ret.append("-mnc").append(mnc);
             }

File: lib/src/main/java/brut/androlib/res/AndrolibResources.java
Patch:
@@ -242,8 +242,8 @@ public Duo<ResFileDecoder, AXmlResourceParser> getResFileDecoder() {
 
     public ExtMXSerializer getResXmlSerializer() {
         ExtMXSerializer serial = new ExtMXSerializer();
-        serial.setProperty(serial.PROPERTY_SERIALIZER_INDENTATION, "    ");
-        serial.setProperty(serial.PROPERTY_SERIALIZER_LINE_SEPARATOR,
+        serial.setProperty(serial.EXT_PROPERTY_SERIALIZER_INDENTATION, "    ");
+        serial.setProperty(serial.EXT_PROPERTY_SERIALIZER_LINE_SEPARATOR,
             System.getProperty("line.separator"));
         serial.setProperty(ExtMXSerializer.PROPERTY_DEFAULT_ENCODING, "UTF-8");
         return serial;

File: src/brut/androlib/res/decoder/ResFileDecoder.java
Patch:
@@ -20,6 +20,7 @@
 import brut.androlib.AndrolibException;
 import brut.androlib.err.CantFind9PatchChunk;
 import brut.androlib.res.data.ResResource;
+import brut.androlib.res.data.value.ResBoolValue;
 import brut.androlib.res.data.value.ResFileValue;
 import brut.directory.Directory;
 import brut.directory.DirectoryException;
@@ -86,8 +87,9 @@ public void decode(ResResource res, Directory inDir, Directory outDir)
             decode(inDir, inFileName, outDir, outFileName, "xml");
         } catch (AndrolibException ex) {
             LOGGER.log(Level.SEVERE, String.format(
-                "Could not decode file \"%s\" to \"%s\"",
+                "Could not decode file, replacing by FALSE value: %s",
                 inFileName, outFileName), ex);
+            res.replace(new ResBoolValue(false));
         }
     }
 

File: src/brut/androlib/res/decoder/ARSCDecoder.java
Patch:
@@ -302,7 +302,7 @@ private void addMissingResSpecs() throws AndrolibException {
 
             ResValue value = new ResBoolValue(false);
             ResResource res = new ResResource(
-                mPkg.getConfig(new ResConfigFlags()), spec, value);
+                mPkg.getOrCreateConfig(new ResConfigFlags()), spec, value);
             mPkg.addResource(res);
             mConfig.addResource(res);
             spec.addResource(res);

File: src/brut/androlib/res/decoder/ResFileDecoder.java
Patch:
@@ -77,7 +77,7 @@ public void decode(ResResource res, Directory inDir, Directory outDir)
                         outFileName = outResName + ext;
                     }
                 }
-                if (! ext.equals(".xml")) {
+                if (! ".xml".equals(ext)) {
                     decode(inDir, inFileName, outDir, outFileName, "raw");
                     return;
                 }

File: src/brut/androlib/res/decoder/Res9patchStreamDecoder.java
Patch:
@@ -18,6 +18,7 @@
 package brut.androlib.res.decoder;
 
 import brut.androlib.AndrolibException;
+import brut.androlib.err.CantFind9PatchChunk;
 import brut.util.ExtDataInput;
 import java.awt.image.BufferedImage;
 import java.io.*;
@@ -79,7 +80,7 @@ private void find9patchChunk(DataInput di)
             try {
                 size = di.readInt();
             } catch (IOException ex) {
-                throw new AndrolibException("Cant find nine patch chunk", ex);
+                throw new CantFind9PatchChunk("Cant find nine patch chunk", ex);
             }
             if (di.readInt() == NP_CHUNK_TYPE) {
                 return;

File: src/brut/androlib/ApkDecoder.java
Patch:
@@ -123,7 +123,7 @@ public void setForceDelete(boolean forceDelete) {
 
     public void setFrameworkTag(String tag) throws AndrolibException {
         mFrameTag = tag;
-        if (hasResources()) {
+        if (mResTable != null) {
             getResTable().setFrameTag(tag);
         }
     }

File: src/brut/androlib/ApkDecoder.java
Patch:
@@ -174,6 +174,7 @@ private File getOutDir() throws AndrolibException {
     private void writeMetaFile() throws AndrolibException {
         Map<String, Object> meta = new LinkedHashMap<String, Object>();
         meta.put("version", Androlib.getVersion());
+        meta.put("apkFileName", mApkFile.getName());
 
         if (hasResources()) {
             meta.put("isFrameworkApk",

File: src/brut/androlib/Androlib.java
Patch:
@@ -119,7 +119,7 @@ public void writeMetaFile(File mOutDir, Map<String, Object> meta)
             throws AndrolibException {
         DumperOptions options = new DumperOptions();
         options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
-        options.setIndent(4);
+//        options.setIndent(4);
         Yaml yaml = new Yaml(options);
         try {
             yaml.dump(meta, new FileWriter(new File(mOutDir, "apktool.yml")));

File: src/brut/androlib/src/DebugInjector.java
Patch:
@@ -161,8 +161,9 @@ private boolean processDirective(String line) {
         if (
             line2.startsWith("line ") ||
             line2.equals("prologue") ||
+            line2.startsWith("parameter") ||
             line2.startsWith("local ") ||
-            line2.startsWith("parameter")
+            line2.startsWith("end local ")
         ) {
             return false;
         }

File: src/brut/androlib/res/AndrolibResources.java
Patch:
@@ -365,7 +365,7 @@ public static String escapeForResXml(String value) {
             out.append(c);
         }
 
-        if (space) {
+        if (space && out.charAt(out.length() - 1) == ' ') {
             out.deleteCharAt(out.length() - 1);
             out.append("\\u0020");
         }

File: src/brut/androlib/res/data/value/ResReferenceValue.java
Patch:
@@ -52,7 +52,8 @@ public String toResXmlFormat() throws AndrolibException {
         return
             (mTheme ? '?' : '@') +
             (newId ? "+" : "") +
-            spec.getFullName(mPackage, mTheme);
+            spec.getFullName(mPackage,
+                mTheme && spec.getType().getName().equals("attr"));
     }
 
     public ResResSpec getReferent() throws AndrolibException {

File: src/brut/androlib/Androlib.java
Patch:
@@ -196,6 +196,9 @@ public boolean buildResourcesRaw(ExtFile appDir, boolean forceBuildAll)
     public boolean buildResourcesFull(File appDir, boolean forceBuildAll,
             boolean framework) throws AndrolibException {
         try {
+            if (! new File(appDir, "res").exists()) {
+                return false;
+            }
             if (! forceBuildAll) {
                 LOGGER.info("Checking whether resources has changed...");
             }

File: src/brut/androlib/res/data/value/ResReferenceValue.java
Patch:
@@ -33,7 +33,7 @@ public ResReferenceValue(ResPackage package_, int value) {
     }
     
     public ResReferenceValue(ResPackage package_, int value, boolean theme) {
-        super(value);
+        super(value, "reference");
         mPackage = package_;
         mTheme = theme;
     }

File: src/brut/androlib/res/AndrolibResources.java
Patch:
@@ -279,6 +279,9 @@ private File getAndroidResourcesFile() throws AndrolibException {
     }
 
     public static String escapeForResXml(String value) {
+        if (value.isEmpty()) {
+            return value;
+        }
         value = value.replace("'", "\\'");
         value = value.replace("\n", "\\n\n");
         char c = value.charAt(0);

File: src/brut/androlib/res/util/ExtMXSerializer.java
Patch:
@@ -51,8 +51,9 @@ public void setProperty(String name, Object value)
             throws IllegalArgumentException, IllegalStateException {
         if (PROPERTY_DEFAULT_ENCODING.equals(name)) {
             mDefaultEncoding = (String) value;
+        } else {
+            super.setProperty(name, value);
         }
-        super.setProperty(name, value);
     }
 
     public final static String PROPERTY_DEFAULT_ENCODING = "DEFAULT_ENCODING";

File: src/brut/androlib/res/AndrolibResources.java
Patch:
@@ -145,6 +145,7 @@ public ExtMXSerializer getResXmlSerializer() {
         serial.setProperty(serial.PROPERTY_SERIALIZER_INDENTATION, "    ");
         serial.setProperty(serial.PROPERTY_SERIALIZER_LINE_SEPARATOR,
             System.getProperty("line.separator"));
+        serial.setProperty(ExtMXSerializer.PROPERTY_DEFAULT_ENCODING, "UTF-8");
         return serial;
     }
 

File: src/brut/androlib/res/decoder/AXmlResourceParser.java
Patch:
@@ -296,7 +296,7 @@ public String getAttributeValue(int index) {
             return m_strings.getString(valueString);
         }
         int valueData = m_attributes[offset + ATTRIBUTE_IX_VALUE_DATA];
-        return "";//TypedValue.coerceToString(valueType,valueData);
+        return TypedValue.coerceToString(valueType, valueData);
     }
 
     public boolean getAttributeBooleanValue(int index, boolean defaultValue) {

File: src/brut/androlib/res/decoder/ResStreamDecoderContainer.java
Patch:
@@ -37,7 +37,7 @@ public void decode(InputStream in, OutputStream out, String decoderName)
 
     public ResStreamDecoder getDecoder(String name) throws AndrolibException {
         ResStreamDecoder decoder = mDecoders.get(name);
-        if (decoder== null) {
+        if (decoder == null) {
             throw new AndrolibException("Undefined decoder: " + name);
         }
         return decoder;

File: src/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -19,8 +19,6 @@
 
 import brut.androlib.AndrolibException;
 import brut.androlib.res.data.ResPackage;
-import brut.androlib.res.data.ResTable;
-import brut.androlib.res.data.ResType;
 import brut.androlib.res.jni.JniBagItem;
 import brut.androlib.res.jni.JniEntry;
 import java.util.LinkedHashMap;
@@ -103,8 +101,9 @@ public ResValue factory(JniEntry entry)
                     return new ResFileValue(entry.strVal);
                 }
             case TYPE_DIMENSION:
+                return new ResStringValue(entry.strVal, "dimen");
             case TYPE_FRACTION:
-                return new ResStringValue(entry.strVal);
+                return new ResStringValue(entry.strVal, "fraction");
         }
         throw new AndrolibException(String.format(
             "Unknown value type for %s/%s: ",

File: src/brut/androlib/AndrolibSmali.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * @author Ryszard Wiśniewski <brut.alll@gmail.com>
  */
-class AndrolibSmali {
+public class AndrolibSmali {
     public void baksmali(File apkFile, File dir) throws AndrolibException {
         baksmali(apkFile.getAbsolutePath(), dir.getAbsolutePath());
     }
@@ -45,6 +45,6 @@ public void smali(File dir, File dexFile) throws AndrolibException {
     }
 
     public void smali(String dir, String dexFile) throws AndrolibException {
-        main.main(new String[]{"smali", dir, "-o", dexFile});
+        main.main(new String[]{dir, "-o", dexFile});
     }
 }

File: src/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -79,9 +79,6 @@ public ResScalarValue factory(String string) throws AndrolibException {
     
     public ResValue factory(JniEntry entry)
             throws AndrolibException {
-        if ("id".equals(entry.type)) {
-            return new ResIdValue();
-        }
         switch (entry.valueType) {
             case TYPE_BAG:
                 return bagFactory(entry);

File: src/brut/androlib/res/decoder/ResXmlSerializer.java
Patch:
@@ -61,7 +61,7 @@ public XmlSerializer attribute(String namespace, String name, String value)
         } catch (AndrolibException ex) {
             throw new IllegalArgumentException(String.format(
                 "could not decode attribute: ns=%s, name=%s, value=%s",
-                getPrefix(namespace, false), name, value), ex);
+                namespace, name, value), ex);
         }
 
         if (value == null) {

File: src/brut/androlib/res/data/value/ResValueFactory.java
Patch:
@@ -177,7 +177,7 @@ private static Integer parseInt(String s, boolean hex) {
     private final static Pattern hexPattern =
         Pattern.compile("-?[0-9a-fA-F]{1,8}");
     private final static Pattern resIdPattern =
-        Pattern.compile("\\+?(?:|(.+?):)(.+?)/(.+?)");
+        Pattern.compile("\\+?(?:(.+?):|)([^:]+?)/(.+?)");
 
     private final static int TYPE_NULL = 0x00;
     private final static int TYPE_REFERENCE = 0x01;

