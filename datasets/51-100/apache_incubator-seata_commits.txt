File: tcc/src/test/java/org/apache/seata/rm/tcc/interceptor/parser/TccActionInterceptorParserTest.java
Patch:
@@ -65,7 +65,7 @@ public void clearTccResource(){
     }
 
     @Test
-    void parserInterfaceToProxy() {
+    void parserInterfaceToProxy() throws Exception {
 
         //given
         TccActionInterceptorParser tccActionInterceptorParser = new TccActionInterceptorParser();

File: seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/main/java/org/apache/seata/spring/boot/autoconfigure/StarterConstants.java
Patch:
@@ -73,6 +73,9 @@ public interface StarterConstants {
     String SERVER_PREFIX = SEATA_PREFIX + ".server";
     String SERVER_UNDO_PREFIX = SERVER_PREFIX + ".undo";
     String SERVER_RAFT_PREFIX = SERVER_PREFIX + ".raft";
+    String SERVER_RAFT_SSL_PREFIX = SERVER_RAFT_PREFIX + ".ssl";
+    String SERVER_RAFT_SSL_CLIENT_KEYSTORE_PREFIX = SERVER_RAFT_SSL_PREFIX + ".client.keystore";
+    String SERVER_RAFT_SSL_SERVER_KEYSTORE_PREFIX = SERVER_RAFT_SSL_PREFIX + ".server.keystore";
     String SERVER_RECOVERY_PREFIX = SERVER_PREFIX + ".recovery";
 
     String METRICS_PREFIX = SEATA_PREFIX + ".metrics";

File: seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/org/apache/seata/spring/boot/autoconfigure/properties/server/raft/ServerRaftProperties.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.seata.spring.boot.autoconfigure.properties.server;
+package org.apache.seata.spring.boot.autoconfigure.properties.server.raft;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.stereotype.Component;

File: seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/test/java/org/apache/seata/spring/boot/autoconfigure/properties/server/ServerRaftPropertiesTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.seata.spring.boot.autoconfigure.properties.server;
 
+import org.apache.seata.spring.boot.autoconfigure.properties.server.raft.ServerRaftProperties;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: server/src/main/java/org/apache/seata/server/instance/ServerInstanceFactory.java
Patch:
@@ -61,7 +61,6 @@ public class ServerInstanceFactory {
     private static final Logger LOGGER = LoggerFactory.getLogger(Server.class);
 
     public void serverInstanceInit() {
-        VGroupMappingStoreManager vGroupMappingStoreManager = SessionHolder.getRootVGroupMappingManager();
         ConfigurableEnvironment environment =
             (ConfigurableEnvironment)ObjectHolder.INSTANCE.getObject(OBJECT_KEY_SPRING_CONFIGURABLE_ENVIRONMENT);
 
@@ -101,6 +100,7 @@ public void serverInstanceInit() {
         }
         instance.setTransaction(new Node.Endpoint(XID.getIpAddress(), XID.getPort(), "netty"));
         if (StringUtils.equals(registryProperties.getType(), NAMING_SERVER)) {
+            VGroupMappingStoreManager vGroupMappingStoreManager = SessionHolder.getRootVGroupMappingManager();
             // load vgroup mapping relationship
             instance.addMetadata("vGroup", vGroupMappingStoreManager.loadVGroups());
             EXECUTOR_SERVICE =

File: compatible/src/main/java/io/seata/saga/statelang/domain/State.java
Patch:
@@ -43,7 +43,7 @@ public interface State {
      *
      * @return the state type
      */
-    String getType();
+    StateType getType();
 
     /**
      * next state name

File: compatible/src/main/java/io/seata/saga/statelang/domain/StateInstance.java
Patch:
@@ -72,14 +72,14 @@ public interface StateInstance {
      *
      * @return state instance type
      */
-    String getType();
+    StateType getType();
 
     /**
      * set type
      *
      * @param type state instance type
      */
-    void setType(String type);
+    void setType(StateType type);
 
     /**
      * get service name

File: compatible/src/main/java/io/seata/saga/statelang/domain/impl/StateImpl.java
Patch:
@@ -20,6 +20,7 @@
 
 import io.seata.saga.statelang.domain.State;
 import io.seata.saga.statelang.domain.StateMachine;
+import io.seata.saga.statelang.domain.StateType;
 
 /**
  * The type State.
@@ -45,8 +46,8 @@ public String getComment() {
     }
 
     @Override
-    public String getType() {
-        return actual.getType();
+    public StateType getType() {
+        return StateType.wrap(actual.getType());
     }
 
     @Override

File: saga/seata-saga-engine/src/main/java/org/apache/seata/saga/engine/impl/ProcessCtrlStateMachineEngine.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.seata.saga.proctrl.ProcessContext;
 import org.apache.seata.saga.proctrl.ProcessType;
 import org.apache.seata.saga.statelang.domain.DomainConstants;
+import org.apache.seata.saga.statelang.domain.StateType;
 import org.apache.seata.saga.statelang.domain.ExecutionStatus;
 import org.apache.seata.saga.statelang.domain.State;
 import org.apache.seata.saga.statelang.domain.StateInstance;
@@ -280,7 +281,7 @@ protected StateMachineInstance forwardInternal(String stateMachineInstId, Map<St
 
         context.setVariable(lastForwardState.getName() + DomainConstants.VAR_NAME_RETRIED_STATE_INST_ID,
             lastForwardState.getId());
-        if (DomainConstants.STATE_TYPE_SUB_STATE_MACHINE.equals(lastForwardState.getType()) && !ExecutionStatus.SU
+        if (StateType.SUB_STATE_MACHINE.equals(lastForwardState.getType()) && !ExecutionStatus.SU
             .equals(lastForwardState.getCompensationStatus())) {
 
             context.setVariable(DomainConstants.VAR_NAME_IS_FOR_SUB_STATMACHINE_FORWARD, true);
@@ -418,7 +419,7 @@ public StateInstance findOutLastForwardStateInstance(List<StateInstance> stateIn
                     continue;
                 }
 
-                if (DomainConstants.STATE_TYPE_SUB_STATE_MACHINE.equals(stateInstance.getType())) {
+                if (StateType.SUB_STATE_MACHINE.equals(stateInstance.getType())) {
 
                     StateInstance finalState = stateInstance;
 

File: saga/seata-saga-engine/src/main/java/org/apache/seata/saga/engine/pcext/utils/CompensationHolder.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.seata.common.util.CollectionUtils;
 import org.apache.seata.common.util.StringUtils;
 import org.apache.seata.saga.engine.exception.EngineExecutionException;
+import org.apache.seata.saga.statelang.domain.StateType;
 import org.apache.seata.saga.engine.utils.ExceptionUtils;
 import org.apache.seata.saga.proctrl.ProcessContext;
 import org.apache.seata.saga.statelang.domain.DomainConstants;
@@ -125,13 +126,13 @@ private static boolean stateNeedToCompensate(StateInstance stateInstance) {
         if (stateInstance.isIgnoreStatus()) {
             return false;
         }
-        if (DomainConstants.STATE_TYPE_SUB_STATE_MACHINE.equals(stateInstance.getType())) {
+        if (StateType.SUB_STATE_MACHINE.equals(stateInstance.getType())) {
 
             return (!ExecutionStatus.FA.equals(stateInstance.getStatus())) && (!ExecutionStatus.SU.equals(
                 stateInstance.getCompensationStatus()));
         } else {
 
-            return DomainConstants.STATE_TYPE_SERVICE_TASK.equals(stateInstance.getType()) && !stateInstance
+            return StateType.SERVICE_TASK.equals(stateInstance.getType()) && !stateInstance
                 .isForCompensation() && (!ExecutionStatus.FA.equals(stateInstance.getStatus())) && (!ExecutionStatus.SU
                 .equals(stateInstance.getCompensationStatus()));
         }

File: saga/seata-saga-engine/src/main/java/org/apache/seata/saga/engine/strategy/impl/DefaultStatusDecisionStrategy.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.seata.common.exception.FrameworkErrorCode;
 import org.apache.seata.common.util.CollectionUtils;
 import org.apache.seata.saga.engine.exception.EngineExecutionException;
+import org.apache.seata.saga.statelang.domain.StateType;
 import org.apache.seata.saga.engine.pcext.utils.CompensationHolder;
 import org.apache.seata.saga.engine.strategy.StatusDecisionStrategy;
 import org.apache.seata.saga.engine.utils.ExceptionUtils;
@@ -110,7 +111,7 @@ public static void setMachineStatusBasedOnStateListAndException(StateMachineInst
                     stateMachineInstance.setStatus(ExecutionStatus.UN);
                     hasSetStatus = true;
                 } else if (ExecutionStatus.SU.equals(stateInstance.getStatus())) {
-                    if (DomainConstants.STATE_TYPE_SERVICE_TASK.equals(stateInstance.getType())) {
+                    if (StateType.SERVICE_TASK.equals(stateInstance.getType())) {
                         if (stateInstance.isForUpdate() && !stateInstance.isForCompensation()) {
                             hasSuccessUpdateService = true;
                         }

File: saga/seata-saga-spring/src/main/java/org/apache/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java
Patch:
@@ -53,6 +53,7 @@
 import org.apache.seata.saga.statelang.domain.StateInstance;
 import org.apache.seata.saga.statelang.domain.StateMachine;
 import org.apache.seata.saga.statelang.domain.StateMachineInstance;
+import org.apache.seata.saga.statelang.domain.StateType;
 import org.apache.seata.saga.statelang.domain.impl.ServiceTaskStateImpl;
 import org.apache.seata.saga.statelang.domain.impl.StateInstanceImpl;
 import org.apache.seata.saga.statelang.domain.impl.StateMachineInstanceImpl;
@@ -843,7 +844,7 @@ public void toStatement(StateInstance stateInstance, PreparedStatement statement
             statement.setString(1, stateInstance.getId());
             statement.setString(2, stateInstance.getMachineInstanceId());
             statement.setString(3, stateInstance.getName());
-            statement.setString(4, stateInstance.getType());
+            statement.setString(4, stateInstance.getType().getValue());
             statement.setTimestamp(5, new Timestamp(stateInstance.getGmtStarted().getTime()));
             statement.setString(6, stateInstance.getServiceName());
             statement.setString(7, stateInstance.getServiceMethod());
@@ -908,7 +909,7 @@ public StateInstance toObject(ResultSet resultSet) throws SQLException {
             stateInstance.setId(resultSet.getString("id"));
             stateInstance.setMachineInstanceId(resultSet.getString("machine_inst_id"));
             stateInstance.setName(resultSet.getString("name"));
-            stateInstance.setType(resultSet.getString("type"));
+            stateInstance.setType(StateType.getStateType(resultSet.getString("type")));
             stateInstance.setBusinessKey(resultSet.getString("business_key"));
             stateInstance.setStatus(ExecutionStatus.valueOf(resultSet.getString("status")));
             stateInstance.setGmtStarted(resultSet.getTimestamp("gmt_started"));

File: saga/seata-saga-statelang/src/main/java/org/apache/seata/saga/statelang/domain/State.java
Patch:
@@ -43,7 +43,7 @@ public interface State {
      *
      * @return the state type
      */
-    String getType();
+    StateType getType();
 
     /**
      * next state name

File: saga/seata-saga-statelang/src/main/java/org/apache/seata/saga/statelang/domain/StateInstance.java
Patch:
@@ -71,14 +71,14 @@ public interface StateInstance {
      *
      * @return state instance type
      */
-    String getType();
+    StateType getType();
 
     /**
      * set type
      *
      * @param type state instance type
      */
-    void setType(String type);
+    void setType(StateType type);
 
     /**
      * get service name

File: saga/seata-saga-statelang/src/main/java/org/apache/seata/saga/statelang/domain/impl/ChoiceStateImpl.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Map;
 
 import org.apache.seata.saga.statelang.domain.ChoiceState;
-import org.apache.seata.saga.statelang.domain.DomainConstants;
+import org.apache.seata.saga.statelang.domain.StateType;
 
 /**
  * Single selection status
@@ -36,7 +36,7 @@ public class ChoiceStateImpl extends BaseState implements ChoiceState {
     private Map<Object, String> choiceEvaluators;
 
     public ChoiceStateImpl() {
-        setType(DomainConstants.STATE_TYPE_CHOICE);
+        setType(StateType.CHOICE);
     }
 
     @Override

File: saga/seata-saga-statelang/src/main/java/org/apache/seata/saga/statelang/domain/impl/CompensateSubStateMachineStateImpl.java
Patch:
@@ -17,14 +17,14 @@
 package org.apache.seata.saga.statelang.domain.impl;
 
 import org.apache.seata.saga.statelang.domain.CompensateSubStateMachineState;
-import org.apache.seata.saga.statelang.domain.DomainConstants;
+import org.apache.seata.saga.statelang.domain.StateType;
 
 /**
  * Used to compensate the state of the sub state machine, inherited from ServiceTaskState
  *
  */
 public class CompensateSubStateMachineStateImpl extends ServiceTaskStateImpl implements CompensateSubStateMachineState {
     public CompensateSubStateMachineStateImpl() {
-        setType(DomainConstants.STATE_TYPE_SUB_MACHINE_COMPENSATION);
+        setType(StateType.SUB_MACHINE_COMPENSATION);
     }
 }

File: saga/seata-saga-statelang/src/main/java/org/apache/seata/saga/statelang/domain/impl/CompensationTriggerStateImpl.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.seata.saga.statelang.domain.impl;
 
 import org.apache.seata.saga.statelang.domain.CompensationTriggerState;
-import org.apache.seata.saga.statelang.domain.DomainConstants;
+import org.apache.seata.saga.statelang.domain.StateType;
 
 /**
  * Triggering the "compensation" process for the state machine
@@ -26,6 +26,6 @@
 public class CompensationTriggerStateImpl extends BaseState implements CompensationTriggerState {
 
     public CompensationTriggerStateImpl() {
-        setType(DomainConstants.STATE_TYPE_COMPENSATION_TRIGGER);
+        setType(StateType.COMPENSATION_TRIGGER);
     }
 }

File: saga/seata-saga-statelang/src/main/java/org/apache/seata/saga/statelang/domain/impl/FailEndStateImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.seata.saga.statelang.domain.impl;
 
-import org.apache.seata.saga.statelang.domain.DomainConstants;
+import org.apache.seata.saga.statelang.domain.StateType;
 import org.apache.seata.saga.statelang.domain.FailEndState;
 
 /**
@@ -29,7 +29,7 @@ public class FailEndStateImpl extends BaseState implements FailEndState {
     private String message;
 
     public FailEndStateImpl() {
-        setType(DomainConstants.STATE_TYPE_FAIL);
+        setType(StateType.FAIL);
     }
 
     @Override

File: saga/seata-saga-statelang/src/main/java/org/apache/seata/saga/statelang/domain/impl/LoopStartStateImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.seata.saga.statelang.domain.impl;
 
-import org.apache.seata.saga.statelang.domain.DomainConstants;
+import org.apache.seata.saga.statelang.domain.StateType;
 import org.apache.seata.saga.statelang.domain.LoopStartState;
 
 /**
@@ -26,7 +26,7 @@
 public class LoopStartStateImpl extends BaseState implements LoopStartState {
 
     public LoopStartStateImpl() {
-        setType(DomainConstants.STATE_TYPE_LOOP_START);
+        setType(StateType.LOOP_START);
     }
 
 }

File: saga/seata-saga-statelang/src/main/java/org/apache/seata/saga/statelang/domain/impl/ScriptTaskStateImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.seata.saga.statelang.domain.impl;
 
-import org.apache.seata.saga.statelang.domain.DomainConstants;
+import org.apache.seata.saga.statelang.domain.StateType;
 import org.apache.seata.saga.statelang.domain.ScriptTaskState;
 
 /**
@@ -32,7 +32,7 @@ public class ScriptTaskStateImpl extends AbstractTaskState implements ScriptTask
     private String scriptContent;
 
     public ScriptTaskStateImpl() {
-        setType(DomainConstants.STATE_TYPE_SCRIPT_TASK);
+        setType(StateType.SCRIPT_TASK);
     }
 
     @Override

File: saga/seata-saga-statelang/src/main/java/org/apache/seata/saga/statelang/domain/impl/ServiceTaskStateImpl.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.seata.saga.statelang.domain.DomainConstants;
+import org.apache.seata.saga.statelang.domain.StateType;
 import org.apache.seata.saga.statelang.domain.ServiceTaskState;
 
 /**
@@ -38,7 +38,7 @@ public class ServiceTaskStateImpl extends AbstractTaskState implements ServiceTa
     private boolean isAsync;
 
     public ServiceTaskStateImpl() {
-        setType(DomainConstants.STATE_TYPE_SERVICE_TASK);
+        setType(StateType.SERVICE_TASK);
     }
 
     @Override

File: saga/seata-saga-statelang/src/main/java/org/apache/seata/saga/statelang/domain/impl/SubStateMachineImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.seata.saga.statelang.domain.impl;
 
-import org.apache.seata.saga.statelang.domain.DomainConstants;
+import org.apache.seata.saga.statelang.domain.StateType;
 import org.apache.seata.saga.statelang.domain.SubStateMachine;
 import org.apache.seata.saga.statelang.domain.TaskState;
 
@@ -31,7 +31,7 @@ public class SubStateMachineImpl extends ServiceTaskStateImpl implements SubStat
     private TaskState compensateStateObject;
 
     public SubStateMachineImpl() {
-        setType(DomainConstants.STATE_TYPE_SUB_STATE_MACHINE);
+        setType(StateType.SUB_STATE_MACHINE);
     }
 
     @Override

File: saga/seata-saga-statelang/src/main/java/org/apache/seata/saga/statelang/domain/impl/SucceedEndStateImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.seata.saga.statelang.domain.impl;
 
-import org.apache.seata.saga.statelang.domain.DomainConstants;
+import org.apache.seata.saga.statelang.domain.StateType;
 import org.apache.seata.saga.statelang.domain.SucceedEndState;
 
 /**
@@ -26,6 +26,6 @@
 public class SucceedEndStateImpl extends BaseState implements SucceedEndState {
 
     public SucceedEndStateImpl() {
-        setType(DomainConstants.STATE_TYPE_SUCCEED);
+        setType(StateType.SUCCEED);
     }
 }

File: saga/seata-saga-statelang/src/main/java/org/apache/seata/saga/statelang/parser/impl/StateMachineParserImpl.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.seata.saga.statelang.domain.DomainConstants;
 import org.apache.seata.saga.statelang.domain.RecoverStrategy;
 import org.apache.seata.saga.statelang.domain.State;
+import org.apache.seata.saga.statelang.domain.StateType;
 import org.apache.seata.saga.statelang.domain.StateMachine;
 import org.apache.seata.saga.statelang.domain.impl.AbstractTaskState;
 import org.apache.seata.saga.statelang.domain.impl.BaseState;
@@ -97,7 +98,7 @@ public StateMachine parse(String json) {
         Map<String, Object> statesNode = (Map<String, Object>) node.get("States");
         statesNode.forEach((stateName, value) -> {
             Map<String, Object> stateNode = (Map<String, Object>) value;
-            String stateType = (String) stateNode.get("Type");
+            StateType stateType = StateType.getStateType((String) stateNode.get("Type"));
             StateParser<?> stateParser = StateParserFactory.getStateParser(stateType);
             if (stateParser == null) {
                 throw new IllegalArgumentException("State Type [" + stateType + "] is not support");

File: saga/seata-saga-statelang/src/main/java/org/apache/seata/saga/statelang/validator/impl/NoRecursiveSubStateMachineRule.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.seata.saga.statelang.validator.impl;
 
-import org.apache.seata.saga.statelang.domain.DomainConstants;
+import org.apache.seata.saga.statelang.domain.StateType;
 import org.apache.seata.saga.statelang.domain.State;
 import org.apache.seata.saga.statelang.domain.StateMachine;
 import org.apache.seata.saga.statelang.domain.SubStateMachine;
@@ -30,7 +30,7 @@ public class NoRecursiveSubStateMachineRule extends AbstractRule {
     @Override
     public boolean validate(StateMachine stateMachine) {
         for (State state: stateMachine.getStates().values()) {
-            if (!DomainConstants.STATE_TYPE_SUB_STATE_MACHINE.equals(state.getType())) {
+            if (!StateType.SUB_STATE_MACHINE.equals(state.getType())) {
                 continue;
             }
             if (stateMachine.getName().equals(((SubStateMachine) state).getStateMachineName())) {

File: core/src/main/java/org/apache/seata/core/rpc/netty/grpc/GrpcDecoder.java
Patch:
@@ -94,7 +94,8 @@ public void onDataRead(ChannelHandlerContext ctx, Http2DataFrame msg) throws Exc
                         bodyBytes = compressor.decompress(bodyBytes);
                     }
                     String codecValue = headMap.get(GrpcHeaderEnum.CODEC_TYPE.header);
-                    int codec = Integer.parseInt(codecValue);
+                    int codec = StringUtils.isBlank(codecValue) ? SerializerType.PROTOBUF.getCode()
+                        : Integer.parseInt(codecValue);
                     SerializerType serializerType = SerializerType.getByCode(codec);
                     rpcMsg.setCodec(serializerType.getCode());
                     Serializer serializer = SerializerServiceLoader.load(serializerType);

File: discovery/seata-discovery-nacos/src/main/java/org/apache/seata/discovery/registry/nacos/NacosRegistryServiceImpl.java
Patch:
@@ -147,6 +147,7 @@ public void unsubscribe(String cluster, EventListener listener) throws Exception
 
     @Override
     public List<InetSocketAddress> lookup(String key) throws Exception {
+        transactionServiceGroup = key;
         String clusterName = getServiceGroup(key);
         if (clusterName == null) {
             String missingDataId = PREFIX_SERVICE_ROOT + CONFIG_SPLIT_CHAR + PREFIX_SERVICE_MAPPING + key;

File: discovery/seata-discovery-nacos/src/main/java/org/apache/seata/discovery/registry/nacos/NacosRegistryServiceImpl.java
Patch:
@@ -194,8 +194,9 @@ public List<InetSocketAddress> lookup(String key) throws Exception {
                                     .map(eachInstance -> new InetSocketAddress(eachInstance.getIp(), eachInstance.getPort()))
                                     .collect(Collectors.toList());
                             CLUSTER_ADDRESS_MAP.put(clusterName, newAddressList);
-
-                            removeOfflineAddressesIfNecessary(transactionServiceGroup, clusterName, newAddressList);
+                            if (StringUtils.isNotEmpty(transactionServiceGroup)) {
+                                removeOfflineAddressesIfNecessary(transactionServiceGroup, clusterName, newAddressList);
+                            }
                         }
                     });
                 }

File: server/src/main/java/org/apache/seata/server/storage/SessionConverter.java
Patch:
@@ -213,9 +213,10 @@ public static Set<BranchSessionVO> convertBranchSession(List<BranchSession> bran
             return Collections.emptySet();
         }
 
-        final Set<BranchSessionVO> result = new HashSet<>(branchSessions.size());
+        List<BranchSession> safeBranchSessions = new ArrayList<>(branchSessions);
+        final Set<BranchSessionVO> result = new HashSet<>(safeBranchSessions.size());
 
-        for (BranchSession session : branchSessions) {
+        for (BranchSession session : safeBranchSessions) {
             result.add(new BranchSessionVO(
                     session.getXid(),
                     session.getTransactionId(),

File: discovery/seata-discovery-raft/src/main/java/org/apache/seata/discovery/registry/raft/RaftRegistryServiceImpl.java
Patch:
@@ -414,7 +414,6 @@ private static void refreshToken(String tcAddress) throws RetryableException {
         Map<String, String> header = new HashMap<>();
         header.put(HTTP.CONTENT_TYPE, ContentType.APPLICATION_JSON.getMimeType());
         String response = null;
-        tokenTimeStamp = System.currentTimeMillis();
         try (CloseableHttpResponse httpResponse =
             HttpClientUtil.doPost("http://" + tcAddress + "/api/v1/auth/login", param, header, 1000)) {
             if (httpResponse != null) {
@@ -427,6 +426,7 @@ private static void refreshToken(String tcAddress) throws RetryableException {
                         throw new AuthenticationFailedException("Authentication failed! you should configure the correct username and password.");
                     }
                     jwtToken = jsonNode.get("data").asText();
+                    tokenTimeStamp = System.currentTimeMillis();
                 } else {
                     //authorized failed,throw exception to kill process
                     throw new AuthenticationFailedException("Authentication failed! you should configure the correct username and password.");

File: compatible/src/main/java/io/seata/tm/api/GlobalTransaction.java
Patch:
@@ -82,7 +82,7 @@ public interface GlobalTransaction extends BaseTransaction {
     /**
      * Suspend the global transaction.
      *
-     * @param clean the clean if true, clean the transaction context. otherwise,supend only
+     * @param clean the clean if true, clean the transaction context. otherwise,suspend only
      * @return the SuspendedResourcesHolder which holds the suspend resources
      * @throws TransactionException Any exception that fails this will be wrapped with TransactionException and thrown
      * @see SuspendedResourcesHolder

File: config/seata-config-core/src/main/java/org/apache/seata/config/ConfigurationFactory.java
Patch:
@@ -59,7 +59,7 @@ public final class ConfigurationFactory {
     public static volatile FileConfiguration ORIGIN_FILE_INSTANCE = null;
 
     static {
-        initOriginConfiguraction();
+        initOriginConfiguration();
         load();
         maybeNeedOriginFileInstance();
     }
@@ -83,7 +83,7 @@ private static void load() {
         CURRENT_FILE_INSTANCE = extConfiguration == null ? configuration : extConfiguration;
     }
 
-    private static void initOriginConfiguraction() {
+    private static void initOriginConfiguration() {
         String seataConfigName = System.getProperty(SYSTEM_PROPERTY_SEATA_CONFIG_NAME);
         if (seataConfigName == null) {
             seataConfigName = System.getenv(ENV_SEATA_CONFIG_NAME);
@@ -225,7 +225,7 @@ private static Configuration getNonSpringConfiguration(String configTypeName) {
 
     public static void reload() {
         ConfigurationCache.clear();
-        initOriginConfiguraction();
+        initOriginConfiguration();
         load();
         maybeNeedOriginFileInstance();
         instance = null;

File: console/src/main/java/org/apache/seata/console/security/CustomUserDetails.java
Patch:
@@ -23,7 +23,7 @@
 import org.springframework.security.core.userdetails.UserDetails;
 
 /**
- * custem user
+ * custom user
  *
  */
 public class CustomUserDetails implements UserDetails {

File: console/src/main/java/org/apache/seata/console/security/CustomUserDetailsServiceImpl.java
Patch:
@@ -26,7 +26,7 @@
 import org.springframework.stereotype.Service;
 
 /**
- * Custem user service
+ * Custom user service
  *
  */
 @Service

File: core/src/main/java/org/apache/seata/core/exception/TransactionExceptionCode.java
Patch:
@@ -105,7 +105,7 @@ public enum TransactionExceptionCode {
     /**
      * Failed to lock global transaction exception code.
      */
-    FailedLockGlobalTranscation,
+    FailedLockGlobalTransaction,
 
     /**
      * FailedWriteSession

File: core/src/main/java/org/apache/seata/core/protocol/Protocol.java
Patch:
@@ -24,7 +24,7 @@ public enum Protocol {
     /**
      * grpc
      */
-    GPRC("grpc"),
+    GRPC("grpc"),
 
     /**
      * seata

File: core/src/main/java/org/apache/seata/core/rpc/netty/NettyClientBootstrap.java
Patch:
@@ -139,7 +139,7 @@ public void start() {
                 @Override
                 public void initChannel(SocketChannel ch) {
                     ChannelPipeline pipeline = ch.pipeline();
-                    if (nettyClientConfig.getProtocol().equals(Protocol.GPRC.value)) {
+                    if (nettyClientConfig.getProtocol().equals(Protocol.GRPC.value)) {
                         pipeline.addLast(Http2FrameCodecBuilder.forClient().build())
                                 .addLast(new Http2MultiplexHandler(new ChannelDuplexHandler()));
                     } else {
@@ -191,7 +191,7 @@ public Channel getNewChannel(InetSocketAddress address) {
                 channel = f.channel();
             }
 
-            if (nettyClientConfig.getProtocol().equals(Protocol.GPRC.value)) {
+            if (nettyClientConfig.getProtocol().equals(Protocol.GRPC.value)) {
                 Http2StreamChannelBootstrap bootstrap = new Http2StreamChannelBootstrap(channel);
                 bootstrap.handler(new ChannelInboundHandlerAdapter() {
                     @Override

File: rm-datasource/src/main/java/org/apache/seata/rm/datasource/undo/oracle/OracleUndoInsertExecutor.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.seata.sqlparser.util.JdbcConstants;
 
 /**
- * The type oralce undo insert executor.
+ * The type oracle undo insert executor.
  *
  */
 public class OracleUndoInsertExecutor extends AbstractUndoExecutor {

File: rm-datasource/src/test/java/org/apache/seata/rm/datasource/exec/MySQLInsertExecutorTest.java
Patch:
@@ -225,7 +225,7 @@ public void testBeforeAndAfterImageColumnWithQuote() throws SQLException {
 
     @Test
     public void testBeforeAndAfterImageUpperColumn() throws SQLException {
-        String sql = "insert into table_insert_executor_test(ID, USER_ID, NMAE, SEX) values (1, 1, 'will', 1)";
+        String sql = "insert into table_insert_executor_test(ID, USER_ID, NAME, SEX) values (1, 1, 'will', 1)";
         List<SQLStatement> asts = SQLUtils.parseStatements(sql, JdbcConstants.MYSQL);
         MySQLInsertRecognizer recognizer = new MySQLInsertRecognizer(sql, asts.get(0));
         newInsertExecutor = new MySQLInsertExecutor(newStatementProxy, (statement, args) -> null, recognizer);

File: saga/seata-saga-processctrl/src/main/java/org/apache/seata/saga/proctrl/eventing/impl/ProcessCtrlEventPublisher.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.seata.saga.proctrl.eventing.EventPublisher;
 
 /**
- * ProcessCtrl Event Pulisher
+ * ProcessCtrl Event Publisher
  *
  */
 public class ProcessCtrlEventPublisher implements EventPublisher<ProcessContext> {

File: saga/seata-saga-statelang/src/main/java/org/apache/seata/saga/statelang/parser/impl/ServiceTaskStateParser.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.seata.saga.statelang.parser.StateParser;
 
 /**
- * ServcieTaskTask parser
+ * ServiceTaskTask parser
  *
  */
 public class ServiceTaskStateParser extends AbstractTaskStateParser implements StateParser<ServiceTaskState> {

File: server/src/main/java/org/apache/seata/server/session/GlobalSession.java
Patch:
@@ -757,7 +757,7 @@ public void lock() throws TransactionException {
             } catch (InterruptedException e) {
                 LOGGER.error("Interrupted error", e);
             }
-            throw new GlobalTransactionException(TransactionExceptionCode.FailedLockGlobalTranscation, "Lock global session failed");
+            throw new GlobalTransactionException(TransactionExceptionCode.FailedLockGlobalTransaction, "Lock global session failed");
         }
 
         public void unlock() {

File: server/src/main/java/org/apache/seata/server/storage/SessionConverter.java
Patch:
@@ -149,13 +149,13 @@ public static void convertToGlobalSessionVo(List<GlobalSessionVO> result, List<G
                 BeanUtils.copyProperties(globalSession,globalSessionVO);
                 globalSessionVO.setStatus(globalSession.getStatus().getCode());
                 globalSessionVO.setTimeout(Long.valueOf(globalSession.getTimeout()));
-                globalSessionVO.setBranchSessionVOs(converToBranchSession(globalSession.getBranchSessions()));
+                globalSessionVO.setBranchSessionVOs(convertToBranchSession(globalSession.getBranchSessions()));
                 result.add(globalSessionVO);
             }
         }
     }
 
-    public static Set<BranchSessionVO> converToBranchSession(List<BranchSession> branchSessions) {
+    public static Set<BranchSessionVO> convertToBranchSession(List<BranchSession> branchSessions) {
         Set<BranchSessionVO> branchSessionVOs = new HashSet<>(branchSessions.size());
         if (CollectionUtils.isNotEmpty(branchSessions)) {
             for (BranchSession branchSession : branchSessions) {

File: sqlparser/seata-sqlparser-core/src/test/java/org/apache/seata/sqlparser/struct/ColumnMetaTest.java
Patch:
@@ -108,7 +108,7 @@ public void testSetGetColumnSize() {
     }
 
     @Test
-    public void testSetGetDemicalDigits() {
+    public void testSetGetDecimalDigits() {
         ColumnMeta columnMeta = new ColumnMeta();
         columnMeta.setDecimalDigits(2);
         assertEquals(2, columnMeta.getDecimalDigits());

File: test-mock-server/src/main/java/org/apache/seata/mockserver/MockCoordinator.java
Patch:
@@ -245,7 +245,7 @@ public void setRemotingServer(RemotingServer remotingServer) {
     }
 
 
-    public void setExepectedResult(String xid, ResultCode expected) {
+    public void setExpectedResult(String xid, ResultCode expected) {
         expectedResultMap.put(xid, expected);
     }
 

File: test-mock-server/src/main/java/org/apache/seata/mockserver/controller/MockHelpController.java
Patch:
@@ -39,7 +39,7 @@ public String health() {
 
     @PostMapping("/expect/result")
     public String expectResult(@RequestParam String xid, @RequestParam int code) {
-        MockCoordinator.getInstance().setExepectedResult(xid, ResultCode.get(code));
+        MockCoordinator.getInstance().setExpectedResult(xid, ResultCode.get(code));
         return OK;
     }
 

File: test/src/test/java/org/apache/seata/core/rpc/netty/TmNettyClientTest.java
Patch:
@@ -180,7 +180,7 @@ public void testSendMsgWithResponse() throws Exception {
         BranchRegisterRequest request = new BranchRegisterRequest();
         request.setXid("127.0.0.1:8091:1249853");
         request.setLockKey("lock key testSendMsgWithResponse");
-        request.setResourceId("resoutceId1");
+        request.setResourceId("resourceId1");
         BranchRegisterResponse branchRegisterResponse = (BranchRegisterResponse) tmNettyRemotingClient.sendSyncRequest(request);
         Assertions.assertNotNull(branchRegisterResponse);
         Assertions.assertEquals(ResultCode.Failed, branchRegisterResponse.getResultCode());

File: test/src/test/java/org/apache/seata/core/rpc/netty/mockserver/MockGrpcServerTest.java
Patch:
@@ -49,7 +49,7 @@ public class MockGrpcServerTest {
     public static void before() {
         ConfigurationFactory.reload();
         ConfigurationTestHelper.putConfig(ConfigurationKeys.SERVER_SERVICE_PORT_CAMEL, String.valueOf(ProtocolTestConstants.MOCK_SERVER_PORT));
-        ConfigurationTestHelper.putConfig(ConfigurationKeys.TRANSPORT_PROTOCOL, Protocol.GPRC.value);
+        ConfigurationTestHelper.putConfig(ConfigurationKeys.TRANSPORT_PROTOCOL, Protocol.GRPC.value);
         MockServer.start(ProtocolTestConstants.MOCK_SERVER_PORT);
         TmNettyRemotingClient.getInstance().destroy();
         RmNettyRemotingClient.getInstance().destroy();

File: test/src/test/java/org/apache/seata/core/rpc/netty/mockserver/TmClientTest.java
Patch:
@@ -64,7 +64,7 @@ public static void testTm() throws Exception {
         LOGGER.info("globalReport ok:" + globalReport);
         Assertions.assertEquals(globalReport, GlobalStatus.Committed);
 
-        MockCoordinator.getInstance().setExepectedResult(xid, ResultCode.Failed);
+        MockCoordinator.getInstance().setExpectedResult(xid, ResultCode.Failed);
 //        GlobalStatus globalReport2 = tm.globalReport(xid, GlobalStatus.Committed);
 
         GlobalStatus rollback2 = tm.rollback(xid);

File: tm/src/main/java/org/apache/seata/tm/api/GlobalTransaction.java
Patch:
@@ -81,7 +81,7 @@ public interface GlobalTransaction extends BaseTransaction {
     /**
      * Suspend the global transaction.
      *
-     * @param clean the clean if true, clean the transaction context. otherwise,supend only
+     * @param clean the clean if true, clean the transaction context. otherwise,suspend only
      * @return the SuspendedResourcesHolder which holds the suspend resources
      * @throws TransactionException Any exception that fails this will be wrapped with TransactionException and thrown
      * @see SuspendedResourcesHolder

File: saga/seata-saga-statelang/src/main/java/org/apache/seata/saga/statelang/parser/utils/DesignerJsonTransformer.java
Patch:
@@ -122,7 +122,7 @@ private static void transformEdge(Map<String, Object> machineJsonObject, List<Ob
                     machineJsonObject.put("StartState", targetStateId);
                     //Make sure 'StartState' is before 'States'
                     machineJsonObject.put("States", machineJsonObject.remove("States"));
-                } else if ("ServiceTask".equals(sourceType)) {
+                } else if ("ServiceTask".equals(sourceType) || "SubStateMachine".equals(sourceType)) {
                     if (targetNode != null && "Compensation".equals(targetNode.get("stateType"))) {
                         sourceState.put("CompensateState", targetStateId);
                     } else {

File: saga/seata-saga-engine/src/main/java/org/apache/seata/saga/engine/impl/ProcessCtrlStateMachineEngine.java
Patch:
@@ -263,7 +263,7 @@ protected StateMachineInstance forwardInternal(String stateMachineInstId, Map<St
         if (replaceParams != null) {
             contextVariables.putAll(replaceParams);
         }
-        putBusinesskeyToContextariables(stateMachineInstance, contextVariables);
+        putBusinessKeyToContextVariables(stateMachineInstance, contextVariables);
 
         ConcurrentHashMap<String, Object> concurrentContextVariables = new ConcurrentHashMap<>(contextVariables.size());
         nullSafeCopy(contextVariables, concurrentContextVariables);
@@ -508,7 +508,7 @@ public StateMachineInstance compensateInternal(String stateMachineInstId, Map<St
         if (replaceParams != null) {
             contextVariables.putAll(replaceParams);
         }
-        putBusinesskeyToContextariables(stateMachineInstance, contextVariables);
+        putBusinessKeyToContextVariables(stateMachineInstance, contextVariables);
 
         ConcurrentHashMap<String, Object> concurrentContextVariables = new ConcurrentHashMap<>(contextVariables.size());
         nullSafeCopy(contextVariables, concurrentContextVariables);
@@ -696,7 +696,7 @@ private String buildExceptionMessage(StateMachineInstance stateMachineInstance,
         return stringBuilder.toString();
     }
 
-    private void putBusinesskeyToContextariables(StateMachineInstance stateMachineInstance,
+    private void putBusinessKeyToContextVariables(StateMachineInstance stateMachineInstance,
                                                  Map<String, Object> contextVariables) {
         if (StringUtils.hasText(stateMachineInstance.getBusinessKey()) && !contextVariables.containsKey(
             DomainConstants.VAR_NAME_BUSINESSKEY)) {

File: common/src/main/java/org/apache/seata/common/metadata/Node.java
Patch:
@@ -122,7 +122,6 @@ public boolean equals(Object o) {
         return Objects.equals(control, node.control) && Objects.equals(transaction, node.transaction);
     }
 
-
     // convert to String
     public String toJsonString(ObjectMapper objectMapper) {
         try {

File: server/src/main/java/org/apache/seata/server/cluster/raft/serializer/CustomDeserializer.java
Patch:
@@ -40,4 +40,5 @@ public Class<?> deserialize(JsonParser jsonParser, DeserializationContext deseri
             throw new RuntimeException(e.getMessage(), e);
         }
     }
+
 }

File: server/src/main/java/org/apache/seata/server/instance/ServerInstance.java
Patch:
@@ -61,8 +61,8 @@ public class ServerInstance {
     private static final Logger LOGGER = LoggerFactory.getLogger(Server.class);
 
     public void serverInstanceInit() {
-        VGroupMappingStoreManager vGroupMappingStoreManager = SessionHolder.getRootVGroupMappingManager();
         if (StringUtils.equals(registryProperties.getType(), NAMING_SERVER)) {
+            VGroupMappingStoreManager vGroupMappingStoreManager = SessionHolder.getRootVGroupMappingManager();
             EXECUTOR_SERVICE = new ScheduledThreadPoolExecutor(1, new NamedThreadFactory("scheduledExcuter", 1, true));
             ConfigurableEnvironment environment = (ConfigurableEnvironment) ObjectHolder.INSTANCE.getObject(OBJECT_KEY_SPRING_CONFIGURABLE_ENVIRONMENT);
 

File: console/src/main/java/org/apache/seata/console/config/WebSecurityConfig.java
Patch:
@@ -35,6 +35,7 @@
 import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
 import org.springframework.security.crypto.password.PasswordEncoder;
 import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
+import org.springframework.security.web.csrf.CookieCsrfTokenRepository;
 
 /**
  * Spring security config
@@ -101,7 +102,8 @@ protected void configure(HttpSecurity http) throws Exception {
             // custom token authorize exception handler
             .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()
             // since we use jwt, session is not necessary
-            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).disable();
+            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).disable()
+            .csrf().csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());
             // don't disable csrf, jwt may be implemented based on cookies
         http.addFilterBefore(new JwtAuthenticationTokenFilter(tokenProvider),
             UsernamePasswordAuthenticationFilter.class);

File: tm/src/main/java/org/apache/seata/tm/api/DefaultGlobalTransaction.java
Patch:
@@ -227,7 +227,7 @@ public void resume(SuspendedResourcesHolder suspendedResourcesHolder) throws Tra
         String xid = suspendedResourcesHolder.getXid();
         RootContext.bind(xid);
         if (LOGGER.isDebugEnabled()) {
-            LOGGER.debug("Resumimg the transaction,xid = {}", xid);
+            LOGGER.debug("Resuming the transaction,xid = {}", xid);
         }
     }
 

File: config/seata-config-core/src/main/java/org/apache/seata/config/processor/ProcessorYaml.java
Patch:
@@ -19,7 +19,9 @@
 
 import org.apache.seata.common.loader.LoadLevel;
 import org.apache.seata.common.util.MapUtil;
+import org.yaml.snakeyaml.LoaderOptions;
 import org.yaml.snakeyaml.Yaml;
+import org.yaml.snakeyaml.constructor.SafeConstructor;
 
 import java.util.Map;
 import java.util.Properties;
@@ -34,7 +36,7 @@ public class ProcessorYaml implements Processor {
     @Override
     public Properties processor(String config) {
         Properties properties = new Properties();
-        Map<String, Object> configMap = MapUtil.asMap(new Yaml().load(config));
+        Map<String, Object> configMap = MapUtil.asMap(new Yaml(new SafeConstructor(new LoaderOptions())).load(config));
         properties.putAll(MapUtil.getFlattenedMap(configMap));
         return properties;
     }

File: common/src/main/java/org/apache/seata/common/DefaultValues.java
Patch:
@@ -259,7 +259,7 @@ public interface DefaultValues {
     /**
      * the const DEFAULT_METRICS_ENABLED
      */
-    boolean DEFAULT_METRICS_ENABLED = false;
+    boolean DEFAULT_METRICS_ENABLED = true;
 
     /**
      * the const DEFAULT_METRICS_REGISTRY_TYPE

File: common/src/main/java/org/apache/seata/common/ConfigurationKeys.java
Patch:
@@ -814,7 +814,7 @@ public interface ConfigurationKeys {
     /**
      * The constant NAMING_SERVER
      */
-    String NAMING_SERVER = "namingserver";
+    String NAMING_SERVER = "seata";
 
     /**
      * The constant APPLICATION_ID.

File: discovery/seata-discovery-core/src/main/java/org/apache/seata/discovery/registry/RegistryType.java
Patch:
@@ -62,9 +62,9 @@ public enum RegistryType {
      */
     Custom,
     /**
-     * NamingServer registry type
+     * Seata namingServer registry type
      */
-    NamingServer;
+    Seata;
 
     /**
      * Gets type.

File: discovery/seata-discovery-namingserver/src/main/java/org/apache/seata/discovery/registry/namingserver/NamingserverRegistryProvider.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.seata.discovery.registry.RegistryService;
 
 
-@LoadLevel(name = "NamingServer", order = 1)
+@LoadLevel(name = "Seata", order = 1)
 public class NamingserverRegistryProvider implements RegistryProvider {
     @Override
     public RegistryService provide() {

File: discovery/seata-discovery-namingserver/src/main/java/org/apache/seata/discovery/registry/namingserver/NamingserverRegistryServiceImpl.java
Patch:
@@ -73,7 +73,7 @@ public class NamingserverRegistryServiceImpl implements RegistryService<NamingLi
     private static final String NAMING_SERVICE_URL_KEY = "server-addr";
     private static final String FILE_ROOT_REGISTRY = "registry";
     private static final String FILE_CONFIG_SPLIT_CHAR = ".";
-    private static final String REGISTRY_TYPE = "namingserver";
+    private static final String REGISTRY_TYPE = "seata";
     private static final String HTTP_PREFIX = "http://";
     private static final String TIME_OUT_KEY = "timeout";
 

File: seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/main/java/org/apache/seata/spring/boot/autoconfigure/StarterConstants.java
Patch:
@@ -53,7 +53,7 @@ public interface StarterConstants {
     String REGISTRY_REDIS_PREFIX = REGISTRY_PREFIX + ".redis";
     String REGISTRY_ZK_PREFIX = REGISTRY_PREFIX + ".zk";
     String REGISTRY_CONSUL_PREFIX = REGISTRY_PREFIX + ".consul";
-    String REGISTRY_NAMINGSERVER_PREFIX = REGISTRY_PREFIX + ".namingserver";
+    String REGISTRY_NAMINGSERVER_PREFIX = REGISTRY_PREFIX + ".seata";
     String REGISTRY_ETCD3_PREFIX = REGISTRY_PREFIX + ".etcd3";
     String REGISTRY_SOFA_PREFIX = REGISTRY_PREFIX + ".sofa";
     String REGISTRY_CUSTOM_PREFIX = REGISTRY_PREFIX + ".custom";

File: discovery/seata-discovery-namingserver/src/main/java/org/apache/seata/discovery/registry/namingserver/NamingserverRegistryServiceImpl.java
Patch:
@@ -362,7 +362,6 @@ public List<InetSocketAddress> refreshGroup(String vGroup) throws IOException {
                 throw new NamingRegistryException("cannot lookup server list in vgroup: " + vGroup);
             }
             String jsonResponse = EntityUtils.toString(response.getEntity(), "UTF-8");
-            response.close();
             // jsonResponse -> MetaResponse
             MetaResponse metaResponse = OBJECT_MAPPER.readValue(jsonResponse, new TypeReference<MetaResponse>() {
             });
@@ -375,6 +374,7 @@ public List<InetSocketAddress> refreshGroup(String vGroup) throws IOException {
                 term = metaResponse.getTerm();
             }
             VGROUP_ADDRESS_MAP.put(vGroup, newAddressList);
+            removeOfflineAddressesIfNecessary(vGroup,vGroup,newAddressList);
         } catch (IOException e) {
             LOGGER.error(e.getMessage());
             throw new RemoteException();

File: rm-datasource/src/main/java/org/apache/seata/rm/datasource/sql/struct/cache/DmTableMetaCache.java
Patch:
@@ -59,6 +59,7 @@ protected TableMeta resultSetMetaToSchema(DatabaseMetaData dbmd, String tableNam
 
         TableNameMeta tableNameMeta = toTableNameMeta(tableName, dbmd.getConnection().getSchema());
         result.setTableName(tableNameMeta.getTableName());
+        result.setOriginalTableName(tableName);
         try (ResultSet rsColumns = dbmd.getColumns("", tableNameMeta.getSchema(), tableNameMeta.getTableName(), "%");
              ResultSet rsIndex = dbmd.getIndexInfo(null, tableNameMeta.getSchema(), tableNameMeta.getTableName(), false, true);
              ResultSet rsPrimary = dbmd.getPrimaryKeys(null, tableNameMeta.getSchema(), tableNameMeta.getTableName())) {
@@ -67,7 +68,6 @@ protected TableMeta resultSetMetaToSchema(DatabaseMetaData dbmd, String tableNam
             processIndexes(result, rsIndex);
 
             processPrimaries(result, rsPrimary);
-
             if (result.getAllIndexes().isEmpty()) {
                 throw new ShouldNeverHappenException(String.format("Could not found any index in the table: %s", tableName));
             }

File: rm-datasource/src/main/java/org/apache/seata/rm/datasource/sql/struct/cache/MariadbTableMetaCache.java
Patch:
@@ -38,7 +38,7 @@ protected TableMeta fetchSchema(Connection connection, String tableName) throws
         String sql = "SELECT * FROM " + ColumnUtils.addEscape(tableName, JdbcConstants.MARIADB) + " LIMIT 1";
         try (Statement stmt = connection.createStatement();
              ResultSet rs = stmt.executeQuery(sql)) {
-            return resultSetMetaToSchema(rs.getMetaData(), connection.getMetaData());
+            return resultSetMetaToSchema(rs.getMetaData(), connection.getMetaData(), tableName);
         } catch (SQLException sqlEx) {
             throw sqlEx;
         } catch (Exception e) {

File: rm-datasource/src/main/java/org/apache/seata/rm/datasource/sql/struct/cache/PolarDBXTableMetaCache.java
Patch:
@@ -37,7 +37,7 @@ protected TableMeta fetchSchema(Connection connection, String tableName) throws
         String sql = "SELECT * FROM " + ColumnUtils.addEscape(tableName, JdbcConstants.POLARDBX) + " LIMIT 1";
         try (Statement stmt = connection.createStatement();
              ResultSet rs = stmt.executeQuery(sql)) {
-            return resultSetMetaToSchema(rs.getMetaData(), connection.getMetaData());
+            return resultSetMetaToSchema(rs.getMetaData(), connection.getMetaData(), tableName);
         } catch (SQLException sqlEx) {
             throw sqlEx;
         } catch (Exception e) {

File: rm-datasource/src/test/java/org/apache/seata/rm/datasource/exec/MariadbInsertExecutorTest.java
Patch:
@@ -98,9 +98,9 @@ public void init() throws SQLException {
                 new Object[]{0, "update_time", Types.INTEGER, "INTEGER", 64, 10, 0, 0}
         };
 
-        MockDriver mockDriver = new MockDriver(returnValueColumnLabels, returnValue, columnMetas, indexMetas, null, onUpdateColumnsReturnValue);
+        MockDriver mockDriver = new MockDriver(returnValueColumnLabels, returnValue, columnMetas, indexMetas, null, onUpdateColumnsReturnValue, new Object[][]{});
         DruidDataSource dataSource = new DruidDataSource();
-        dataSource.setUrl("jdbc:mock:xxx");
+        dataSource.setUrl("jdbc:mock:xxx2");
         dataSource.setDriver(mockDriver);
 
         DataSourceProxy newDataSourceProxy = DataSourceProxyTest.getDataSourceProxy(dataSource);

File: rm-datasource/src/test/java/org/apache/seata/rm/datasource/exec/MySQLInsertExecutorTest.java
Patch:
@@ -139,7 +139,7 @@ public void init() throws SQLException {
                 new Object[]{0, "update_time", Types.INTEGER, "INTEGER", 64, 10, 0, 0}
         };
 
-        MockDriver mockDriver = new MockDriver(returnValueColumnLabels, returnValue, columnMetas, indexMetas, null, onUpdateColumnsReturnValue);
+        MockDriver mockDriver = new MockDriver(returnValueColumnLabels, returnValue, columnMetas, indexMetas, null, onUpdateColumnsReturnValue, new Object[][]{});
         DruidDataSource dataSource = new DruidDataSource();
         dataSource.setUrl("jdbc:mock:xxx");
         dataSource.setDriver(mockDriver);
@@ -159,6 +159,7 @@ public void init() throws SQLException {
 
     @Test
     public void testBeforeAndAfterImage() throws SQLException {
+        System.out.println(newStatementProxy);
         String sql = "insert into table_insert_executor_test(id, user_id, name, sex) values (1, 1, 'will', 1)";
         List<SQLStatement> asts = SQLUtils.parseStatements(sql, JdbcConstants.MYSQL);
         MySQLInsertRecognizer recognizer = new MySQLInsertRecognizer(sql, asts.get(0));

File: rm-datasource/src/test/java/org/apache/seata/rm/datasource/exec/PolarDBXInsertExecutorTest.java
Patch:
@@ -101,9 +101,9 @@ public void init() throws SQLException {
                 new Object[]{0, "update_time", Types.INTEGER, "INTEGER", 64, 10, 0, 0}
         };
 
-        MockDriver mockDriver = new MockDriver(returnValueColumnLabels, returnValue, columnMetas, indexMetas, null, onUpdateColumnsReturnValue);
+        MockDriver mockDriver = new MockDriver(returnValueColumnLabels, returnValue, columnMetas, indexMetas, null, onUpdateColumnsReturnValue, new Object[][]{});
         DruidDataSource dataSource = new DruidDataSource();
-        dataSource.setUrl("jdbc:mock:xxx");
+        dataSource.setUrl("jdbc:mock:xxx1");
         dataSource.setDriver(mockDriver);
 
         DataSourceProxy newDataSourceProxy = DataSourceProxyTest.getDataSourceProxy(dataSource);

File: rm-datasource/src/test/java/org/apache/seata/rm/datasource/exec/UpdateExecutorTest.java
Patch:
@@ -68,7 +68,7 @@ public static void init() {
             new Object[]{0, "updated", Types.INTEGER, "INTEGER", 64, 10, 0, 0}
         };
 
-        MockDriver mockDriver = new MockDriver(returnValueColumnLabels, returnValue, columnMetas, indexMetas, null, onUpdateColumnsReturnValue);
+        MockDriver mockDriver = new MockDriver(returnValueColumnLabels, returnValue, columnMetas, indexMetas, null, onUpdateColumnsReturnValue, new Object[][]{});
         DruidDataSource dataSource = new DruidDataSource();
         dataSource.setUrl("jdbc:mock:xxx");
         dataSource.setDriver(mockDriver);

File: rm-datasource/src/test/java/org/apache/seata/rm/datasource/mock/MockDatabaseMetaData.java
Patch:
@@ -79,8 +79,9 @@ public class MockDatabaseMetaData implements DatabaseMetaData {
     );
 
     private static List<String> tableMetaColumnLabels = Arrays.asList(
-            "TABLE_NAME",
-            "TABLE_SCHEM"
+            "TABLE_CAT",
+            "TABLE_SCHEM",
+            "TABLE_NAME"
     );
 
     private Object[][] columnsMetasReturnValue;

File: rm-datasource/src/test/java/org/apache/seata/rm/datasource/mock/MockDriver.java
Patch:
@@ -79,19 +79,19 @@ public MockDriver() {
     }
 
     public MockDriver(Object[][] mockColumnsMetasReturnValue, Object[][] mockIndexMetasReturnValue) {
-        this(Lists.newArrayList(), new Object[][]{}, mockColumnsMetasReturnValue, mockIndexMetasReturnValue,  new Object[][]{});
+        this(Lists.newArrayList(), new Object[][]{}, mockColumnsMetasReturnValue, mockIndexMetasReturnValue,  new Object[][]{}, new Object[][]{});
     }
 
     public MockDriver(Object[][] mockColumnsMetasReturnValue, Object[][] mockIndexMetasReturnValue, Object[][] mockPkMetasReturnValue) {
-        this(Lists.newArrayList(), new Object[][]{}, mockColumnsMetasReturnValue, mockIndexMetasReturnValue, mockPkMetasReturnValue);
+        this(Lists.newArrayList(), new Object[][]{}, mockColumnsMetasReturnValue, mockIndexMetasReturnValue, mockPkMetasReturnValue, new Object[][]{});
     }
 
     public MockDriver(Object[][] mockColumnsMetasReturnValue, Object[][] mockIndexMetasReturnValue, Object[][] mockPkMetasReturnValue, Object[][] mockTableMetasReturnValue) {
         this(Lists.newArrayList(), new Object[][]{}, mockColumnsMetasReturnValue, mockIndexMetasReturnValue, mockPkMetasReturnValue, mockTableMetasReturnValue);
     }
 
     public MockDriver(List<String> mockReturnValueColumnLabels, Object[][] mockReturnValue, Object[][] mockColumnsMetasReturnValue, Object[][] mockIndexMetasReturnValue) {
-        this(mockReturnValueColumnLabels, mockReturnValue, mockColumnsMetasReturnValue, mockIndexMetasReturnValue, new Object[][]{});
+        this(mockReturnValueColumnLabels, mockReturnValue, mockColumnsMetasReturnValue, mockIndexMetasReturnValue, new Object[][]{}, new Object[][]{});
     }
 
     public MockDriver(List<String> mockReturnValueColumnLabels, Object[][] mockReturnValue, Object[][] mockColumnsMetasReturnValue, Object[][] mockIndexMetasReturnValue, Object[][] mockPkMetasReturnValue) {

File: rm-datasource/src/test/java/org/apache/seata/rm/datasource/sql/struct/cache/PostgresqlTableMetaCacheTest.java
Patch:
@@ -61,7 +61,7 @@ public class PostgresqlTableMetaCacheTest {
 
     private static Object[][] tableMetas =
             new Object[][]{
-                    new Object[]{"pt1", "public"}
+                    new Object[]{"", "public", "pt1"}
             };
 
     @Test
@@ -76,11 +76,13 @@ public void getTableMetaTest() throws SQLException {
         TableMetaCache tableMetaCache = TableMetaCacheFactory.getTableMetaCache(JdbcConstants.POSTGRESQL);
 
         TableMeta tableMeta = tableMetaCache.getTableMeta(proxy.getPlainConnection(), "pt1", proxy.getResourceId());
+        Assertions.assertEquals("pt1", tableMeta.getOriginalTableName());
 
         Assertions.assertNotNull(tableMeta);
         tableMeta = tableMetaCache.getTableMeta(proxy.getPlainConnection(), "Pt1", proxy.getResourceId());
         Assertions.assertNotNull(tableMeta);
         Assertions.assertEquals("pt1", tableMeta.getTableName());
+        Assertions.assertEquals("pt1", tableMeta.getOriginalTableName());
 
         tableMeta = tableMetaCache.getTableMeta(proxy.getPlainConnection(), "t.pt1", proxy.getResourceId());
 

File: rm-datasource/src/test/java/org/apache/seata/rm/datasource/sql/struct/cache/SqlServerTableMetaCacheTest.java
Patch:
@@ -63,7 +63,7 @@ public class SqlServerTableMetaCacheTest {
 
     private static Object[][] tableMetas =
             new Object[][]{
-                    new Object[]{"st1", "m"}
+                    new Object[]{"", "m", "st1"}
             };
 
     private TableMetaCache getTableMetaCache() {
@@ -94,6 +94,7 @@ public void getTableMetaTest_0() throws SQLException {
         TableMeta tableMeta = getTableMetaCache().getTableMeta(proxy.getPlainConnection(), "m.st1", proxy.getResourceId());
 
         Assertions.assertEquals("m.st1", tableMeta.getTableName());
+        Assertions.assertEquals("m.st1", tableMeta.getOriginalTableName());
         Assertions.assertEquals("id", tableMeta.getPrimaryKeyOnlyName().get(0));
 
         Assertions.assertEquals("id", tableMeta.getColumnMeta("id").getColumnName());

File: seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/main/java/org/apache/seata/spring/boot/autoconfigure/SeataCoreEnvironmentPostProcessor.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.seata.spring.boot.autoconfigure.properties.registry.RegistryEtcd3Properties;
 import org.apache.seata.spring.boot.autoconfigure.properties.registry.RegistryEurekaProperties;
 import org.apache.seata.spring.boot.autoconfigure.properties.registry.RegistryNacosProperties;
+import org.apache.seata.spring.boot.autoconfigure.properties.registry.RegistryNamingServerProperties;
 import org.apache.seata.spring.boot.autoconfigure.properties.registry.RegistryProperties;
 import org.apache.seata.spring.boot.autoconfigure.properties.registry.RegistryRaftProperties;
 import org.apache.seata.spring.boot.autoconfigure.properties.registry.RegistryRedisProperties;
@@ -59,6 +60,7 @@
 import static org.apache.seata.spring.boot.autoconfigure.StarterConstants.REGISTRY_ETCD3_PREFIX;
 import static org.apache.seata.spring.boot.autoconfigure.StarterConstants.REGISTRY_EUREKA_PREFIX;
 import static org.apache.seata.spring.boot.autoconfigure.StarterConstants.REGISTRY_NACOS_PREFIX;
+import static org.apache.seata.spring.boot.autoconfigure.StarterConstants.REGISTRY_NAMINGSERVER_PREFIX;
 import static org.apache.seata.spring.boot.autoconfigure.StarterConstants.REGISTRY_PREFIX;
 import static org.apache.seata.spring.boot.autoconfigure.StarterConstants.REGISTRY_RAFT_PREFIX;
 import static org.apache.seata.spring.boot.autoconfigure.StarterConstants.REGISTRY_REDIS_PREFIX;
@@ -100,6 +102,7 @@ public static void init() {
             PROPERTY_BEAN_MAP.put(REGISTRY_ETCD3_PREFIX, RegistryEtcd3Properties.class);
             PROPERTY_BEAN_MAP.put(REGISTRY_EUREKA_PREFIX, RegistryEurekaProperties.class);
             PROPERTY_BEAN_MAP.put(REGISTRY_NACOS_PREFIX, RegistryNacosProperties.class);
+            PROPERTY_BEAN_MAP.put(REGISTRY_NAMINGSERVER_PREFIX, RegistryNamingServerProperties.class);
             PROPERTY_BEAN_MAP.put(REGISTRY_REDIS_PREFIX, RegistryRedisProperties.class);
             PROPERTY_BEAN_MAP.put(REGISTRY_SOFA_PREFIX, RegistrySofaProperties.class);
             PROPERTY_BEAN_MAP.put(REGISTRY_ZK_PREFIX, RegistryZooKeeperProperties.class);

File: seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/main/java/org/apache/seata/spring/boot/autoconfigure/StarterConstants.java
Patch:
@@ -53,6 +53,7 @@ public interface StarterConstants {
     String REGISTRY_REDIS_PREFIX = REGISTRY_PREFIX + ".redis";
     String REGISTRY_ZK_PREFIX = REGISTRY_PREFIX + ".zk";
     String REGISTRY_CONSUL_PREFIX = REGISTRY_PREFIX + ".consul";
+    String REGISTRY_NAMINGSERVER_PREFIX = REGISTRY_PREFIX + ".namingserver";
     String REGISTRY_ETCD3_PREFIX = REGISTRY_PREFIX + ".etcd3";
     String REGISTRY_SOFA_PREFIX = REGISTRY_PREFIX + ".sofa";
     String REGISTRY_CUSTOM_PREFIX = REGISTRY_PREFIX + ".custom";
@@ -96,4 +97,5 @@ public interface StarterConstants {
     String SPECIAL_KEY_GROUPLIST = "grouplist";
     String SPECIAL_KEY_SERVICE = "service";
     String SPECIAL_KEY_VGROUP_MAPPING = "vgroupMapping";
+
 }

File: server/src/main/java/org/apache/seata/server/storage/db/store/DataBaseVGroupMappingStoreManager.java
Patch:
@@ -16,12 +16,12 @@
  */
 package org.apache.seata.server.storage.db.store;
 
+import org.apache.seata.common.ConfigurationKeys;
 import org.apache.seata.common.loader.EnhancedServiceLoader;
 import org.apache.seata.common.loader.LoadLevel;
 import org.apache.seata.common.metadata.namingserver.Instance;
 import org.apache.seata.config.Configuration;
 import org.apache.seata.config.ConfigurationFactory;
-import org.apache.seata.core.constants.ConfigurationKeys;
 import org.apache.seata.core.store.MappingDO;
 import org.apache.seata.core.store.db.DataSourceProvider;
 import org.apache.seata.server.store.VGroupMappingStoreManager;

File: server/src/main/java/org/apache/seata/server/storage/db/store/VGroupMappingDataBaseDAO.java
Patch:
@@ -42,7 +42,7 @@
 public class VGroupMappingDataBaseDAO {
     private static final Logger LOGGER = LoggerFactory.getLogger(VGroupMappingDataBaseDAO.class);
 
-    protected DataSource vGroupMappingDataSource = null;
+    protected DataSource vGroupMappingDataSource;
 
     protected final String vMapping;
 
@@ -98,7 +98,6 @@ public boolean deleteMappingDOByVGroup(String vGroup) {
         PreparedStatement ps = null;
         try {
             conn = vGroupMappingDataSource.getConnection();
-            conn.setAutoCommit(true);
             ps = conn.prepareStatement(sql);
             ps.setString(1, vGroup);
             ps.setString(2, instance.getClusterName());

File: discovery/seata-discovery-namingserver/src/main/java/org/apache/seata/discovery/registry/namingserver/NamingserverRegistryServiceImpl.java
Patch:
@@ -196,7 +196,7 @@ public void doRegister(Instance instance, List<String> urlList) {
     }
 
     public boolean doHealthCheck(String url) {
-        url = HTTP_PREFIX + url + "/health";
+        url = HTTP_PREFIX + url + "/naming/v1/health";
         Map<String, String> header = new HashMap<>();
         header.put(HTTP.CONTENT_TYPE, ContentType.APPLICATION_JSON.getMimeType());
         try (CloseableHttpResponse response = HttpClientUtil.doGet(url, null, header, 3000)) {

File: namingserver/src/main/java/org/apache/seata/namingserver/controller/HealthController.java
Patch:
@@ -18,9 +18,11 @@
 
 import org.apache.seata.common.result.Result;
 import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
 @RestController
+@RequestMapping("/naming/v1")
 public class HealthController {
 
     @GetMapping("/health")

File: namingserver/src/main/java/org/apache/seata/namingserver/controller/NamingController.java
Patch:
@@ -132,11 +132,10 @@ public Result<String> changeGroup(@RequestParam String namespace,
     public void watch(@RequestParam String clientTerm,
                       @RequestParam String vGroup,
                       @RequestParam String timeout,
-                      @RequestParam String clientAddr,
                       HttpServletRequest request) {
         AsyncContext context = request.startAsync();
         context.setTimeout(0L);
-        Watcher<AsyncContext> watcher = new Watcher<>(vGroup, context, Integer.parseInt(timeout), Long.parseLong(clientTerm), clientAddr);
+        Watcher<AsyncContext> watcher = new Watcher<>(vGroup, context, Integer.parseInt(timeout), Long.parseLong(clientTerm), request.getRemoteAddr());
         clusterWatcherManager.registryWatcher(watcher);
     }
 

File: server/src/main/java/org/apache/seata/server/Server.java
Patch:
@@ -93,6 +93,8 @@ public static void metadataInit() {
             // load unit name
             instance.setUnit(String.valueOf(UUID.randomUUID()));
 
+            instance.setTerm(System.currentTimeMillis());
+
             // load node Endpoint
             instance.setControl(new Node.Endpoint(NetUtil.getLocalIp(), Integer.parseInt(Objects.requireNonNull(environment.getProperty("server.port"))), "http"));
 

File: common/src/main/java/org/apache/seata/common/ConfigurationKeys.java
Patch:
@@ -1033,9 +1033,9 @@ public interface ConfigurationKeys {
     String REGISTRY_NAMINGSERVER_CLUSTER = NAMINGSERVER_REGISTRY_PREFIX + "cluster";
 
     /**
-     * The constant MAPPING_TABLE_NAME
+     * The constant VGROUP_TABLE_NAME
      */
-    String MAPPING_TABLE_NAME = STORE_DB_PREFIX + "mapping-table";
+    String VGROUP_TABLE_NAME = STORE_DB_PREFIX + FILE_CONFIG_SPLIT_CHAR + "vgroup-table";
 
     /**
      * The constant NAMESPACE_KEY

File: discovery/seata-discovery-namingserver/src/main/java/org/apache/seata/discovery/registry/namingserver/NamingserverRegistryServiceImpl.java
Patch:
@@ -152,7 +152,6 @@ static NamingserverRegistryServiceImpl getInstance() {
 
     @Override
     public void register(InetSocketAddress address) throws Exception {
-        unregister(address);
         NetUtil.validAddress(address);
         Instance instance = Instance.getInstance();
         instance.setTransaction(new Node.Endpoint(address.getAddress().getHostAddress(), address.getPort(), "netty"));
@@ -207,7 +206,7 @@ public void doRegister(Instance instance, List<String> urlList) {
     }
 
     public boolean doHealthCheck(String url) {
-        url = HTTP_PREFIX + url + "/naming/v1/health";
+        url = HTTP_PREFIX + url + "/health";
         Map<String, String> header = new HashMap<>();
         header.put(HTTP.CONTENT_TYPE, ContentType.APPLICATION_JSON.getMimeType());
         try (CloseableHttpResponse response = HttpClientUtil.doGet(url, null, header, 3000)) {
@@ -233,6 +232,8 @@ public void unregister(InetSocketAddress address) {
             String unit = instance.getUnit();
             String jsonBody = instance.toJsonString();
             String params = "unit=" + unit;
+            params = params + "&cluster=" + instance.getClusterName();
+            params = params + "&namespace=" + instance.getNamespace();
             url += params;
             Map<String, String> header = new HashMap<>();
             header.put(HTTP.CONTENT_TYPE, ContentType.APPLICATION_JSON.getMimeType());

File: server/src/main/java/org/apache/seata/server/storage/db/store/VGroupMappingDataBaseDAO.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.apache.seata.common.ConfigurationKeys.MAPPING_TABLE_NAME;
+import static org.apache.seata.common.ConfigurationKeys.VGROUP_TABLE_NAME;
 import static org.apache.seata.common.ConfigurationKeys.REGISTRY_NAMINGSERVER_CLUSTER;
 import static org.apache.seata.common.NamingServerConstants.DEFAULT_VGROUP_MAPPING;
 
@@ -50,7 +50,7 @@ public class VGroupMappingDataBaseDAO {
 
     public VGroupMappingDataBaseDAO(DataSource vGroupMappingDataSource) {
         this.vGroupMappingDataSource = vGroupMappingDataSource;
-        this.vMapping = CONFIG.getConfig(MAPPING_TABLE_NAME, DEFAULT_VGROUP_MAPPING);
+        this.vMapping = CONFIG.getConfig(VGROUP_TABLE_NAME, DEFAULT_VGROUP_MAPPING);
     }
 
     public boolean insertMappingDO(MappingDO mappingDO) {

File: common/src/main/java/org/apache/seata/common/util/CollectionUtils.java
Patch:
@@ -203,9 +203,9 @@ public static boolean isSizeEquals(Collection<?> col0, Collection<?> col1) {
         }
     }
 
-    private static final String KV_SPLIT = "=";
+    public static final String KV_SPLIT = "=";
 
-    private static final String PAIR_SPLIT = "&";
+    public static final String PAIR_SPLIT = "&";
 
     /**
      * Encode map to string

File: server/src/main/java/org/apache/seata/server/Server.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.seata.common.thread.NamedThreadFactory;
 import org.apache.seata.common.util.NetUtil;
 import org.apache.seata.common.util.StringUtils;
+import org.apache.seata.common.util.UUIDGenerator;
 import org.apache.seata.config.ConfigurationFactory;
 import org.apache.seata.core.rpc.netty.NettyRemotingServer;
 import org.apache.seata.core.rpc.netty.NettyServerConfig;

File: server/src/main/java/org/apache/seata/server/session/GlobalSession.java
Patch:
@@ -41,7 +41,7 @@
 import org.apache.seata.core.model.BranchType;
 import org.apache.seata.core.model.GlobalStatus;
 import org.apache.seata.core.model.LockStatus;
-import org.apache.seata.server.UUIDGenerator;
+import org.apache.seata.common.util.UUIDGenerator;
 import org.apache.seata.server.cluster.raft.RaftServerManager;
 import org.apache.seata.server.lock.LockerManagerFactory;
 import org.apache.seata.server.store.SessionStorable;

File: server/src/main/java/org/apache/seata/server/session/SessionHelper.java
Patch:
@@ -37,7 +37,7 @@
 import org.apache.seata.core.model.BranchType;
 import org.apache.seata.core.model.GlobalStatus;
 import org.apache.seata.metrics.IdConstants;
-import org.apache.seata.server.UUIDGenerator;
+import org.apache.seata.common.util.UUIDGenerator;
 import org.apache.seata.server.cluster.raft.context.SeataClusterContext;
 import org.apache.seata.server.coordinator.DefaultCoordinator;
 import org.apache.seata.server.metrics.MetricsPublisher;

File: server/src/test/java/ServerTest.java
Patch:
@@ -17,7 +17,7 @@
 import org.apache.seata.common.XID;
 import org.apache.seata.common.util.NetUtil;
 import org.apache.seata.core.rpc.netty.NettyRemotingServer;
-import org.apache.seata.server.UUIDGenerator;
+import org.apache.seata.common.util.UUIDGenerator;
 import org.apache.seata.server.coordinator.DefaultCoordinator;
 
 import java.util.concurrent.LinkedBlockingQueue;

File: server/src/test/java/org/apache/seata/server/UUIDGeneratorOverflowTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.seata.server;
 
+import org.apache.seata.common.util.UUIDGenerator;
 import org.junit.jupiter.api.Test;
 
 /**

File: server/src/test/java/org/apache/seata/server/lock/LockManagerTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.seata.common.result.PageResult;
 import org.apache.seata.core.exception.TransactionException;
 import org.apache.seata.core.model.BranchType;
-import org.apache.seata.server.UUIDGenerator;
+import org.apache.seata.common.util.UUIDGenerator;
 import org.apache.seata.server.console.param.GlobalLockParam;
 import org.apache.seata.server.console.service.GlobalLockService;
 import org.apache.seata.server.console.vo.GlobalLockVO;

File: server/src/test/java/org/apache/seata/server/lock/file/FileLockManagerImplTest.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.seata.common.XID;
 import org.apache.seata.core.model.BranchType;
-import org.apache.seata.server.UUIDGenerator;
+import org.apache.seata.common.util.UUIDGenerator;
 import org.apache.seata.server.lock.LockManager;
 import org.apache.seata.server.session.BranchSession;
 import org.junit.jupiter.api.Assertions;

File: server/src/test/java/org/apache/seata/server/session/BranchSessionTest.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.stream.Stream;
 
 import org.apache.seata.core.model.BranchType;
-import org.apache.seata.server.UUIDGenerator;
+import org.apache.seata.common.util.UUIDGenerator;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.params.ParameterizedTest;

File: server/src/test/java/org/apache/seata/server/session/db/DataBaseSessionManagerTest.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.seata.core.model.BranchStatus;
 import org.apache.seata.core.model.BranchType;
 import org.apache.seata.core.model.GlobalStatus;
-import org.apache.seata.server.UUIDGenerator;
+import org.apache.seata.common.util.UUIDGenerator;
 import org.apache.seata.server.session.BranchSession;
 import org.apache.seata.server.session.GlobalSession;
 import org.apache.seata.server.session.SessionCondition;

File: server/src/test/java/org/apache/seata/server/session/redis/RedisSessionManagerTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.seata.core.model.BranchStatus;
 import org.apache.seata.core.model.BranchType;
 import org.apache.seata.core.model.GlobalStatus;
-import org.apache.seata.server.UUIDGenerator;
+import org.apache.seata.common.util.UUIDGenerator;
 import org.apache.seata.server.session.BranchSession;
 import org.apache.seata.server.session.GlobalSession;
 import org.apache.seata.server.session.SessionCondition;

File: server/src/test/java/org/apache/seata/server/store/file/FileTransactionStoreManagerTest.java
Patch:
@@ -33,7 +33,7 @@
 import org.springframework.boot.test.context.SpringBootTest;
 
 import org.apache.seata.common.util.BufferUtils;
-import org.apache.seata.server.UUIDGenerator;
+import org.apache.seata.common.util.UUIDGenerator;
 import org.apache.seata.server.session.BranchSession;
 import org.apache.seata.server.session.GlobalSession;
 import org.apache.seata.server.session.SessionManager;

File: test-mock-server/src/main/java/org/apache/seata/mockserver/MockCoordinator.java
Patch:
@@ -53,7 +53,7 @@
 import org.apache.seata.core.rpc.TransactionMessageHandler;
 import org.apache.seata.mockserver.call.CallRm;
 import org.apache.seata.server.AbstractTCInboundHandler;
-import org.apache.seata.server.UUIDGenerator;
+import org.apache.seata.common.util.UUIDGenerator;
 import org.apache.seata.server.session.BranchSession;
 import org.apache.seata.server.session.GlobalSession;
 import org.slf4j.Logger;

File: test-mock-server/src/main/java/org/apache/seata/mockserver/MockServer.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.seata.common.thread.NamedThreadFactory;
 import org.apache.seata.common.util.NetUtil;
 import org.apache.seata.server.ParameterParser;
-import org.apache.seata.server.UUIDGenerator;
+import org.apache.seata.common.util.UUIDGenerator;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.boot.SpringApplication;

File: test/src/test/java/org/apache/seata/at/mysql/MysqlUpdateJoinTest.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.seata.rm.datasource.DataSourceProxy;
 import org.apache.seata.rm.datasource.sql.struct.TableMetaCacheFactory;
 import org.apache.seata.rm.datasource.sql.struct.TableRecords;
-import org.apache.seata.server.UUIDGenerator;
+import org.apache.seata.common.util.UUIDGenerator;
 import org.apache.seata.sqlparser.struct.TableMeta;
 import org.apache.seata.sqlparser.util.JdbcConstants;
 import org.junit.jupiter.api.Assertions;

File: test/src/test/java/org/apache/seata/core/rpc/netty/TmNettyClientTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.seata.core.protocol.transaction.BranchRegisterResponse;
 import org.apache.seata.mockserver.MockServer;
 import org.apache.seata.saga.engine.db.AbstractServerTest;
-import org.apache.seata.server.UUIDGenerator;
+import org.apache.seata.common.util.UUIDGenerator;
 import org.apache.seata.server.coordinator.DefaultCoordinator;
 import org.apache.seata.server.session.SessionHolder;
 import org.junit.jupiter.api.AfterAll;

File: test/src/test/java/org/apache/seata/saga/engine/db/AbstractServerTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.seata.core.rpc.netty.NettyRemotingServer;
 import org.apache.seata.core.rpc.netty.NettyServerConfig;
 import org.apache.seata.server.ParameterParser;
-import org.apache.seata.server.UUIDGenerator;
+import org.apache.seata.common.util.UUIDGenerator;
 import org.apache.seata.server.coordinator.DefaultCoordinator;
 import org.apache.seata.server.metrics.MetricsManager;
 import org.apache.seata.server.session.SessionHolder;

File: test/src/test/java/org/apache/seata/saga/engine/mock/MockSagaTransactionTemplate.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.seata.core.model.BranchStatus;
 import org.apache.seata.core.model.GlobalStatus;
 import org.apache.seata.saga.engine.tm.SagaTransactionalTemplate;
-import org.apache.seata.server.UUIDGenerator;
+import org.apache.seata.common.util.UUIDGenerator;
 import org.apache.seata.tm.api.GlobalTransaction;
 import org.apache.seata.tm.api.TransactionalExecutor.ExecutionException;
 import org.apache.seata.tm.api.transaction.TransactionInfo;

File: core/src/main/java/org/apache/seata/core/protocol/Version.java
Patch:
@@ -88,8 +88,7 @@ public static String getChannelVersion(Channel c) {
     public static void checkVersion(String version) throws IncompatibleVersionException {
         long current = convertVersion(CURRENT);
         long clientVersion = convertVersion(version);
-        long divideVersion = convertVersion(VERSION_0_7_1);
-        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {
+        if (current < clientVersion) {
             throw new IncompatibleVersionException("incompatible client version:" + version);
         }
     }

File: rm-datasource/src/main/java/org/apache/seata/rm/datasource/sql/struct/cache/DmTableMetaCache.java
Patch:
@@ -56,9 +56,9 @@ public String getTableName() {
     @Override
     protected TableMeta resultSetMetaToSchema(DatabaseMetaData dbmd, String tableName) throws SQLException {
         TableMeta result = new TableMeta();
-        result.setTableName(tableName);
 
         TableNameMeta tableNameMeta = toTableNameMeta(tableName, dbmd.getConnection().getSchema());
+        result.setTableName(tableNameMeta.getTableName());
         try (ResultSet rsColumns = dbmd.getColumns("", tableNameMeta.getSchema(), tableNameMeta.getTableName(), "%");
              ResultSet rsIndex = dbmd.getIndexInfo(null, tableNameMeta.getSchema(), tableNameMeta.getTableName(), false, true);
              ResultSet rsPrimary = dbmd.getPrimaryKeys(null, tableNameMeta.getSchema(), tableNameMeta.getTableName())) {

File: namingserver/src/main/java/org/apache/seata/namingserver/entity/vo/monitor/ClusterVO.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.seata.namingserver.vo.monitor;
+package org.apache.seata.namingserver.entity.vo.monitor;
 
 import org.apache.seata.common.metadata.namingserver.Unit;
-import org.apache.seata.namingserver.pojo.ClusterData;
+import org.apache.seata.namingserver.entity.pojo.ClusterData;
 
 import java.util.ArrayList;
 import java.util.List;

File: namingserver/src/main/java/org/apache/seata/namingserver/entity/vo/monitor/WatcherVO.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.seata.namingserver.vo.monitor;
+package org.apache.seata.namingserver.entity.vo.monitor;
 
 import java.util.List;
 

File: tcc/src/main/java/org/apache/seata/rm/tcc/TCCResourceManager.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.seata.common.Constants;
+import org.apache.seata.common.exception.ExceptionUtil;
 import org.apache.seata.common.exception.RepeatRegistrationException;
 import org.apache.seata.common.exception.ShouldNeverHappenException;
 import org.apache.seata.common.exception.SkipCallbackWrapperException;
@@ -143,7 +144,7 @@ public BranchStatus branchCommit(BranchType branchType, String xid, long branchI
             return result ? BranchStatus.PhaseTwo_Committed : BranchStatus.PhaseTwo_CommitFailed_Retryable;
         } catch (Throwable t) {
             String msg = String.format("commit TCC resource error, resourceId: %s, xid: %s.", resourceId, xid);
-            LOGGER.error(msg, t);
+            LOGGER.error(msg, ExceptionUtil.unwrap(t));
             return BranchStatus.PhaseTwo_CommitFailed_Retryable;
         }
     }
@@ -202,7 +203,7 @@ public BranchStatus branchRollback(BranchType branchType, String xid, long branc
             return result ? BranchStatus.PhaseTwo_Rollbacked : BranchStatus.PhaseTwo_RollbackFailed_Retryable;
         } catch (Throwable t) {
             String msg = String.format("rollback TCC resource error, resourceId: %s, xid: %s.", resourceId, xid);
-            LOGGER.error(msg, t);
+            LOGGER.error(msg, ExceptionUtil.unwrap(t));
             return BranchStatus.PhaseTwo_RollbackFailed_Retryable;
         }
     }

File: discovery/seata-discovery-raft/src/main/java/org/apache/seata/discovery/registry/raft/RaftRegistryServiceImpl.java
Patch:
@@ -234,8 +234,8 @@ private static String queryHttpAddress(String clusterName, String group) {
             Map<String, Node> map = new HashMap<>();
             if (CollectionUtils.isNotEmpty(nodeList)) {
                 for (Node node : nodeList) {
-                    map.put(node.getTransaction().getHost() + IP_PORT_SPLIT_CHAR + node.getTransaction().getPort(),
-                        node);
+                    map.put(new InetSocketAddress(node.getTransaction().getHost(), node.getTransaction().getPort()).getAddress().getHostAddress()
+                            + IP_PORT_SPLIT_CHAR + node.getTransaction().getPort(), node);
                 }
             }
             addressList = stream.map(inetSocketAddress -> {

File: rm-datasource/src/main/java/org/apache/seata/rm/datasource/xa/ConnectionProxyXA.java
Patch:
@@ -290,6 +290,7 @@ private synchronized void end(int flags) throws XAException, SQLException {
     }
 
     private void cleanXABranchContext() {
+        xaEnded = false;
         branchRegisterTime = null;
         prepareTime = null;
         xaActive = false;
@@ -323,7 +324,6 @@ protected synchronized void closeForce() throws SQLException {
         }
         // Force close the physical connection
         physicalConn.close();
-        xaEnded = false;
         rollBacked = false;
         cleanXABranchContext();
         originalConnection.close();

File: compatible/src/main/java/io/seata/integration/tx/api/interceptor/ActionInterceptorHandler.java
Patch:
@@ -74,7 +74,7 @@ protected Map<String, Object> fetchActionRequestContext(Method method, Object[]
         Annotation[][] parameterAnnotations = method.getParameterAnnotations();
         for (int i = 0; i < parameterAnnotations.length; i++) {
             for (int j = 0; j < parameterAnnotations[i].length; j++) {
-                if (parameterAnnotations[i][j] instanceof org.apache.seata.rm.tcc.api.BusinessActionContextParameter) {
+                if (parameterAnnotations[i][j] instanceof BusinessActionContextParameter) {
                     // get annotation
                     BusinessActionContextParameter annotation = (BusinessActionContextParameter) parameterAnnotations[i][j];
                     if (arguments[i] == null) {

File: test/src/test/java/org/apache/seata/core/rpc/netty/mockserver/MockServerTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.seata.common.ConfigurationKeys;
 import org.apache.seata.common.ConfigurationTestHelper;
+import org.apache.seata.config.ConfigurationFactory;
 import org.apache.seata.core.exception.TransactionException;
 import org.apache.seata.core.model.BranchType;
 import org.apache.seata.core.model.GlobalStatus;
@@ -30,6 +31,7 @@
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Order;
 import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -45,6 +47,7 @@ public class MockServerTest {
 
     @BeforeAll
     public static void before() {
+        ConfigurationFactory.reload();
         ConfigurationTestHelper.putConfig(ConfigurationKeys.SERVER_SERVICE_PORT_CAMEL, String.valueOf(ProtocolTestConstants.MOCK_SERVER_PORT));
         MockServer.start(ProtocolTestConstants.MOCK_SERVER_PORT);
         TmNettyRemotingClient.getInstance().destroy();

File: test-mock-server/src/main/java/org/apache/seata/mockserver/MockServer.java
Patch:
@@ -83,7 +83,7 @@ public static void start(int port) {
                     Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
                         @Override
                         public void run() {
-                            close();
+                            LOGGER.info("system is closing , pid info: " + ManagementFactory.getRuntimeMXBean().getName());
                         }
                     }));
                     LOGGER.info("pid info: " + ManagementFactory.getRuntimeMXBean().getName());

File: test/src/test/java/org/apache/seata/core/rpc/netty/mockserver/ProtocolTestConstants.java
Patch:
@@ -20,7 +20,7 @@
  * Mock Constants
  **/
 public class ProtocolTestConstants {
-    public static final String APPLICATION_ID = "my_app_test";
+    public static final String APPLICATION_ID = "mock_tx_app_id";
     public static final String SERVICE_GROUP = "mock_tx_group";
     public static final int MOCK_SERVER_PORT = 8099;
     public static final String MOCK_SERVER_ADDRESS = "0.0.0.0:" + MOCK_SERVER_PORT;

File: core/src/main/java/org/apache/seata/core/protocol/ProtocolConstants.java
Patch:
@@ -76,7 +76,7 @@ public interface ProtocolConstants {
      * 
      * @see SerializerType#SEATA
      */
-    byte CONFIGURED_CODEC = SerializerServiceLoader.getSupportedSerializers().iterator().next().getCode();
+    byte CONFIGURED_CODEC = SerializerServiceLoader.getDefaultSerializerType().getCode();
 
     /**
      * Configured compressor by user, default is NONE

File: core/src/main/java/org/apache/seata/core/rpc/netty/v1/ProtocolV1Decoder.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.apache.seata.core.rpc.netty.v1;
 
+import java.util.List;
 import java.util.Map;
-import java.util.Set;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandlerContext;
@@ -64,7 +64,7 @@ public class ProtocolV1Decoder extends LengthFieldBasedFrameDecoder {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(ProtocolV1Decoder.class);
 
-    private final Set<SerializerType> supportDeSerializerTypes;
+    private final List<SerializerType> supportDeSerializerTypes;
 
 
     public ProtocolV1Decoder() {
@@ -155,7 +155,7 @@ public Object decodeFrame(ByteBuf frame) {
                     Serializer serializer = SerializerServiceLoader.load(protocolType);
                     rpcMessage.setBody(serializer.deserialize(bs));
                 } else {
-                    throw new IllegalArgumentException("SerializerType not match");
+                    throw new IllegalArgumentException("SerializerType not match: " + protocolType.name());
                 }
             }
         }

File: saga/seata-saga-engine/src/main/java/org/apache/seata/saga/engine/pcext/interceptors/ServiceTaskHandlerInterceptor.java
Patch:
@@ -337,9 +337,9 @@ private void decideExecutionStatus(ProcessContext context, StateInstance stateIn
                     Object elContext;
 
                     Class<? extends Expression> expressionClass = evaluator.getClass();
-                    if (expressionClass.isAssignableFrom(ExceptionMatchExpression.class)) {
+                    if (ExceptionMatchExpression.class.isAssignableFrom(expressionClass)) {
                         elContext = context.getVariable(DomainConstants.VAR_NAME_CURRENT_EXCEPTION);
-                    } else if (expressionClass.isAssignableFrom(ELExpression.class)) {
+                    } else if (ELExpression.class.isAssignableFrom(expressionClass)) {
                         elContext = context.getVariable(DomainConstants.VAR_NAME_OUTPUT_PARAMS);
                     } else {
                         elContext = context.getVariables();

File: common/src/main/java/org/apache/seata/common/util/PageUtil.java
Patch:
@@ -76,9 +76,9 @@ public class PageUtil {
             + SOURCE_SQL_PLACE_HOLD + ") temp ) where rn between " + START_PLACE_HOLD + " and " + END_PLACE_HOLD;
 
     /**
-     * The constant SQLSERVER_PAGE_TEMPLATE
+     * The constant SQLSERVER_PAGE_TEMPLATE. Currently, it only works for order-by condition of "ORDER BY gmt_create desc"
      */
-    private static final String SQLSERVER_PAGE_TEMPLATE = "select * from (select temp.*, ROW_NUMBER() OVER(ORDER BY (select NULL)) AS rowId from ("
+    private static final String SQLSERVER_PAGE_TEMPLATE = "select * from (select temp.*, ROW_NUMBER() OVER(ORDER BY gmt_create desc) AS rowId from ("
             + SOURCE_SQL_PLACE_HOLD + ") temp ) t where t.rowId between " + START_PLACE_HOLD + " and " + END_PLACE_HOLD;
     /**
      * check page parm

File: common/src/test/java/org/apache/seata/common/util/PageUtilTest.java
Patch:
@@ -37,7 +37,7 @@ public void testPageSql() {
         String oracleTargetSql = "select * from " +
                 "( select ROWNUM rn, temp.* from (select * from test where a = 1) temp )" +
                 " where rn between 1 and 5";
-        String sqlserverTargetSql = "select * from (select temp.*, ROW_NUMBER() OVER(ORDER BY (select NULL)) AS rowId from (select * from test where a = 1) temp ) t where t.rowId between 1 and 5";
+        String sqlserverTargetSql = "select * from (select temp.*, ROW_NUMBER() OVER(ORDER BY gmt_create desc) AS rowId from (select * from test where a = 1) temp ) t where t.rowId between 1 and 5";
 
         assertEquals(PageUtil.pageSql(sourceSql, "mysql", 1, 5), mysqlTargetSql);
         assertEquals(PageUtil.pageSql(sourceSql, "h2", 1, 5), mysqlTargetSql);

File: core/src/main/java/org/apache/seata/core/store/db/sql/distributed/lock/BaseDistributedLockSql.java
Patch:
@@ -16,9 +16,10 @@
  */
 package org.apache.seata.core.store.db.sql.distributed.lock;
 
+import org.apache.seata.common.loader.LoadLevel;
 import org.apache.seata.core.constants.ServerTableColumnsName;
 
-
+@LoadLevel(name = "default")
 public class BaseDistributedLockSql implements DistributedLockSql {
     protected static final String DISTRIBUTED_LOCK_TABLE_PLACE_HOLD = " #distributed_lock_table# ";
 

File: seata-spring-autoconfigure/seata-spring-autoconfigure-client/src/main/java/org/apache/seata/spring/boot/autoconfigure/SeataClientEnvironmentPostProcessor.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.seata.saga.engine.StateMachineConfig;
 import org.apache.seata.spring.boot.autoconfigure.properties.SagaAsyncThreadPoolProperties;
 import org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties;
+import org.apache.seata.spring.boot.autoconfigure.properties.SeataTccProperties;
 import org.apache.seata.spring.boot.autoconfigure.properties.client.LoadBalanceProperties;
 import org.apache.seata.spring.boot.autoconfigure.properties.client.LockProperties;
 import org.apache.seata.spring.boot.autoconfigure.properties.client.RmProperties;
@@ -45,10 +46,10 @@
 import static org.apache.seata.spring.boot.autoconfigure.StarterConstants.SEATA_PREFIX;
 import static org.apache.seata.spring.boot.autoconfigure.StarterConstants.SERVICE_PREFIX;
 import static org.apache.seata.spring.boot.autoconfigure.StarterConstants.TCC_FENCE_PREFIX;
+import static org.apache.seata.spring.boot.autoconfigure.StarterConstants.TCC_PREFIX;
 import static org.apache.seata.spring.boot.autoconfigure.StarterConstants.UNDO_PREFIX;
 
 
-
 public class SeataClientEnvironmentPostProcessor implements EnvironmentPostProcessor, Ordered {
 
     @Override
@@ -66,6 +67,7 @@ public void postProcessEnvironment(ConfigurableEnvironment environment, SpringAp
         PROPERTY_BEAN_MAP.put(TCC_FENCE_PREFIX, SpringFenceConfig.class);
         PROPERTY_BEAN_MAP.put(SAGA_STATE_MACHINE_PREFIX, StateMachineConfig.class);
         PROPERTY_BEAN_MAP.put(SAGA_ASYNC_THREAD_POOL_PREFIX, SagaAsyncThreadPoolProperties.class);
+        PROPERTY_BEAN_MAP.put(TCC_PREFIX, SeataTccProperties.class);
     }
 
     @Override

File: server/src/test/java/org/apache/seata/server/session/redis/RedisDistributedLockerTest.java
Patch:
@@ -121,9 +121,8 @@ public void test_acquireLock_concurrent() {
         boolean d = distributedLocker.acquireLock(new DistributedLockDO(retryRollbacking, lockValue + 2, 2000L));
         Assertions.assertFalse(d);
 
-       //sleep 60s
         try {
-            Thread.sleep(2000);
+            Thread.sleep(2100);
         } catch (InterruptedException e) {
             e.printStackTrace();
         }

File: test/src/test/java/org/apache/seata/core/rpc/netty/TmNettyClientTest.java
Patch:
@@ -59,7 +59,7 @@ public static void after() {
 
     public static ThreadPoolExecutor initMessageExecutor() {
         return new ThreadPoolExecutor(100, 500, 500, TimeUnit.SECONDS,
-                new LinkedBlockingQueue(20000), new ThreadPoolExecutor.CallerRunsPolicy());
+            new LinkedBlockingQueue(20000), new ThreadPoolExecutor.CallerRunsPolicy());
     }
 
     /**
@@ -185,7 +185,7 @@ public void testSendMsgWithResponse() throws Exception {
         Assertions.assertNotNull(branchRegisterResponse);
         Assertions.assertEquals(ResultCode.Failed, branchRegisterResponse.getResultCode());
         Assertions.assertEquals("TransactionException[Could not found global transaction xid = 127.0.0.1:8091:1249853, may be has finished.]",
-                branchRegisterResponse.getMsg());
+            branchRegisterResponse.getMsg());
         nettyRemotingServer.destroy();
         tmNettyRemotingClient.destroy();
     }

File: test/src/test/java/org/apache/seata/integration/rocketmq/SeataMQProducerSendTest.java
Patch:
@@ -49,6 +49,7 @@
 /**
  * seata mq producer test
  **/
+@Disabled
 public class SeataMQProducerSendTest {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(SeataMQProducerSendTest.class);
@@ -75,7 +76,6 @@ public static void after() {
     }
 
     @Test
-    @Disabled
     public void testSendCommit() throws MQBrokerException, RemotingException, InterruptedException, MQClientException, TransactionException {
         TransactionManager tm = getTmAndBegin();
 
@@ -91,7 +91,6 @@ public void testSendCommit() throws MQBrokerException, RemotingException, Interr
     }
 
     @Test
-    @Disabled
     public void testSendRollback()
         throws MQBrokerException, RemotingException, InterruptedException, MQClientException, TransactionException {
         TransactionManager tm = getTmAndBegin();

File: core/src/main/java/org/apache/seata/core/store/db/sql/lock/AbstractLockStoreSql.java
Patch:
@@ -65,7 +65,7 @@ public class AbstractLockStoreSql implements LockStoreSql {
 
     /**
      * The constant ALL_COLUMNS.
-     * xid, transaction_id, branch_id, resource_id, table_name, pk, row_key, gmt_create, gmt_modified
+     * xid, transaction_id, branch_id, resource_id, table_name, pk, row_key, gmt_create, gmt_modified, status
      */
     protected static final String ALL_COLUMNS =
         ServerTableColumnsName.LOCK_TABLE_XID + ", " + ServerTableColumnsName.LOCK_TABLE_TRANSACTION_ID + ", "

File: core/src/main/java/org/apache/seata/core/store/db/sql/lock/SqlServerLockStoreSql.java
Patch:
@@ -29,7 +29,7 @@ public class SqlServerLockStoreSql extends AbstractLockStoreSql {
      * The constant INSERT_LOCK_SQL_MYSQL.
      */
     private static final String INSERT_LOCK_SQL_SQLSERVER = "insert into " + LOCK_TABLE_PLACE_HOLD + "(" + ALL_COLUMNS + ")"
-            + " values (?, ?, ?, ?, ?, ?, ?, SYSDATETIME(), SYSDATETIME())";
+            + " values (?, ?, ?, ?, ?, ?, ?, SYSDATETIME(), SYSDATETIME(), ?)";
 
     @Override
     public String getInsertLockSQL(String lockTable) {

File: saga/seata-saga-engine/src/main/java/org/apache/seata/saga/engine/impl/ProcessCtrlStateMachineEngine.java
Patch:
@@ -358,7 +358,7 @@ private Map<String, Object> getStateMachineContextVariables(StateMachineInstance
 
     protected Map<String, Object> replayContextVariables(StateMachineInstance stateMachineInstance) {
         Map<String, Object> contextVariables = new HashMap<>();
-        if (stateMachineInstance.getStartParams() == null) {
+        if (stateMachineInstance.getStartParams() != null) {
             contextVariables.putAll(stateMachineInstance.getStartParams());
         }
 

File: saga/seata-saga-engine-store/src/main/java/org/apache/seata/saga/engine/store/StateLogStore.java
Patch:
@@ -113,5 +113,5 @@ public interface StateLogStore {
     /**
      * clear the LocalThread
      */
-    void clearUp();
+    void clearUp(ProcessContext context);
 }
\ No newline at end of file

File: saga/seata-saga-spring/src/main/java/org/apache/seata/saga/engine/tm/SagaTransactionalTemplate.java
Patch:
@@ -50,5 +50,5 @@ void branchReport(String xid, long branchId, BranchStatus status, String applica
 
     void triggerAfterCompletion(GlobalTransaction tx);
 
-    void cleanUp();
+    void cleanUp(GlobalTransaction tx);
 }
\ No newline at end of file

File: test/src/test/java/org/apache/seata/saga/engine/mock/MockSagaTransactionTemplate.java
Patch:
@@ -76,7 +76,7 @@ public void triggerAfterCompletion(GlobalTransaction tx) {
     }
 
     @Override
-    public void cleanUp() {
+    public void cleanUp(GlobalTransaction tx) {
 
     }
 }

File: compatible/src/main/java/io/seata/integration/tx/api/interceptor/ActionContextUtil.java
Patch:
@@ -32,6 +32,7 @@
 /**
  * Extracting TCC Context from Method
  */
+@Deprecated
 public final class ActionContextUtil {
 
     private ActionContextUtil() {

File: compatible/src/main/java/io/seata/integration/tx/api/interceptor/ActionInterceptorHandler.java
Patch:
@@ -27,6 +27,7 @@
 /**
  * Handler the Tx Participant Aspect : Setting Context, Creating Branch Record
  */
+@Deprecated
 public class ActionInterceptorHandler extends org.apache.seata.integration.tx.api.interceptor.ActionInterceptorHandler {
 
 

File: compatible/src/main/java/io/seata/integration/tx/api/json/JsonParser.java
Patch:
@@ -16,7 +16,6 @@
  */
 package io.seata.integration.tx.api.json;
 
-
-
+@Deprecated
 public interface JsonParser extends org.apache.seata.integration.tx.api.json.JsonParser {
 }

File: compatible/src/main/java/io/seata/integration/tx/api/remoting/RemotingParser.java
Patch:
@@ -21,5 +21,6 @@
  * extract remoting bean info
  *
  */
+@Deprecated
 public interface RemotingParser extends org.apache.seata.integration.tx.api.remoting.RemotingParser {
 }

File: compatible/src/main/java/io/seata/tm/api/FailureHandler.java
Patch:
@@ -16,5 +16,5 @@
  */
 package io.seata.tm.api;
 
-public interface FailureHandler extends org.apache.seata.tm.api.FailureHandler {
+public interface FailureHandler extends org.apache.seata.tm.api.FailureHandler<GlobalTransaction> {
 }

File: compatible/src/main/java/io/seata/tm/api/GlobalTransaction.java
Patch:
@@ -19,11 +19,12 @@
 import io.seata.core.exception.TransactionException;
 import io.seata.core.model.GlobalStatus;
 import io.seata.tm.api.transaction.SuspendedResourcesHolder;
+import org.apache.seata.tm.api.BaseTransaction;
 
 /**
  * Global transaction.
  */
-public interface GlobalTransaction {
+public interface GlobalTransaction extends BaseTransaction {
 
     /**
      * Begin a new global transaction with default timeout and name.

File: integration-tx-api/src/main/java/org/apache/seata/integration/tx/api/interceptor/parser/InterfaceParser.java
Patch:
@@ -25,5 +25,4 @@ public interface InterfaceParser {
 
     IfNeedEnhanceBean parseIfNeedEnhancement(Class<?> beanClass);
 
-
 }

File: integration-tx-api/src/test/java/org/apache/seata/integration/tx/api/interceptor/parser/GlobalTransactionalInterceptorParserTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.jupiter.api.Test;
 
 
-class GlobalTransactionalInterceptorParserTest {
+public class GlobalTransactionalInterceptorParserTest {
 
     @Test
     void parserInterfaceToProxy() throws Exception {

File: tm/src/main/java/org/apache/seata/tm/api/BaseTransaction.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.seata.integration.tx.api.interceptor.parser;
+package org.apache.seata.tm.api;
 
-public interface TargetClassParser extends org.apache.seata.integration.tx.api.interceptor.parser.TargetClassParser {
+public interface BaseTransaction {
 }

File: tm/src/main/java/org/apache/seata/tm/api/DefaultFailureHandlerImpl.java
Patch:
@@ -33,7 +33,7 @@
  * The type Default failure handler.
  *
  */
-public class DefaultFailureHandlerImpl implements FailureHandler {
+public class DefaultFailureHandlerImpl implements TMFailureHandler {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(DefaultFailureHandlerImpl.class);
 

File: tm/src/main/java/org/apache/seata/tm/api/FailureHandlerHolder.java
Patch:
@@ -19,15 +19,15 @@
 
 public class FailureHandlerHolder {
 
-    private static FailureHandler FAILURE_HANDLER_HOLDER = new DefaultFailureHandlerImpl();
+    private static FailureHandler<?> FAILURE_HANDLER_HOLDER = new DefaultFailureHandlerImpl();
 
-    public static void setFailureHandler(FailureHandler failureHandler) {
+    public static void setFailureHandler(FailureHandler<?> failureHandler) {
         if (failureHandler != null) {
             FAILURE_HANDLER_HOLDER = failureHandler;
         }
     }
 
-    public static FailureHandler getFailureHandler() {
+    public static FailureHandler<?> getFailureHandler() {
         return FAILURE_HANDLER_HOLDER;
     }
 

File: tm/src/main/java/org/apache/seata/tm/api/GlobalTransaction.java
Patch:
@@ -24,7 +24,7 @@
  * Global transaction.
  *
  */
-public interface GlobalTransaction {
+public interface GlobalTransaction extends BaseTransaction {
 
     /**
      * Begin a new global transaction with default timeout and name.

File: test/src/test/java/org/apache/seata/core/rpc/netty/ChannelManagerTestHelper.java
Patch:
@@ -32,7 +32,7 @@ public static ConcurrentMap<String, Channel> getChannelConcurrentMap(AbstractNet
 
     public static Channel getChannel(TmNettyRemotingClient client) {
         return getChannelManager(client)
-                .acquireChannel(ProtocolTestConstants.SERVER_ADDRESS);
+                .acquireChannel(ProtocolTestConstants.MOCK_SERVER_ADDRESS);
     }
     private static NettyClientChannelManager getChannelManager(AbstractNettyRemotingClient remotingClient) {
         return remotingClient.getClientChannelManager();

File: test/src/test/java/org/apache/seata/core/rpc/netty/mockserver/Action1Impl.java
Patch:
@@ -41,17 +41,16 @@ public String insert(Long reqId, Map<String, String> params) {
     @Override
     public boolean commitTcc(BusinessActionContext actionContext) {
         String xid = actionContext.getXid();
-        System.out.println("commitTcc:" + xid);
+        System.out.println("commitTcc:" + xid + "," + actionContext.getActionContext());
         commitMap.compute(xid, (k, v) -> v == null ? 1 : v + 1);
         return true;
     }
 
     @Override
     public boolean cancel(BusinessActionContext actionContext) {
         String xid = actionContext.getXid();
-        System.out.println("commitTcc:" + xid);
+        System.out.println("cancelTcc:" + xid + "," + actionContext.getActionContext());
         rollbackMap.compute(xid, (k, v) -> v == null ? 1 : v + 1);
-        System.out.println("cancel");
         return true;
     }
 

File: test/src/test/java/org/apache/seata/core/rpc/netty/mockserver/ProtocolTestConstants.java
Patch:
@@ -18,10 +18,10 @@
 
 /**
  * Mock Constants
- *
  **/
 public class ProtocolTestConstants {
     public static final String APPLICATION_ID = "my_app_test";
-    public static final String SERVICE_GROUP = "default_tx_group";
-    public static final String SERVER_ADDRESS = "0.0.0.0:8091";
+    public static final String SERVICE_GROUP = "mock_tx_group";
+    public static final int MOCK_SERVER_PORT = 8099;
+    public static final String MOCK_SERVER_ADDRESS = "0.0.0.0:" + MOCK_SERVER_PORT;
 }

File: integration-tx-api/src/main/java/org/apache/seata/integration/tx/api/interceptor/parser/GlobalTransactionalInterceptorParser.java
Patch:
@@ -19,7 +19,6 @@
 import java.lang.reflect.Method;
 import java.util.HashSet;
 import java.util.Set;
-
 import org.apache.seata.common.ConfigurationKeys;
 import org.apache.seata.common.util.CollectionUtils;
 import org.apache.seata.common.util.ReflectionUtil;
@@ -31,7 +30,6 @@
 import org.apache.seata.spring.annotation.GlobalTransactional;
 import org.apache.seata.tm.api.FailureHandlerHolder;
 
-
 public class GlobalTransactionalInterceptorParser implements InterfaceParser {
 
     protected final Set<String> methodsToProxy = new HashSet<>();

File: tcc/src/main/java/org/apache/seata/rm/tcc/interceptor/parser/TccActionInterceptorParser.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
-
 import org.apache.seata.common.util.ReflectionUtil;
 import org.apache.seata.integration.tx.api.interceptor.handler.ProxyInvocationHandler;
 import org.apache.seata.integration.tx.api.interceptor.parser.DefaultResourceRegisterParser;
@@ -34,7 +33,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-
 public class TccActionInterceptorParser implements InterfaceParser {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(TccActionInterceptorParser.class);

File: core/src/main/java/io/seata/core/rpc/netty/v1/ProtocolV1Decoder.java
Patch:
@@ -71,8 +71,6 @@ public class ProtocolV1Decoder extends LengthFieldBasedFrameDecoder {
     public ProtocolV1Decoder() {
         // default is 8M
         this(ProtocolConstants.MAX_FRAME_LENGTH);
-        String serializerName = CONFIG.getConfig(ConfigurationKeys.SERIALIZE_FOR_RPC, SerializerType.SEATA.name());
-        this.serializerType = SerializerType.getByName(serializerName);
     }
 
     public ProtocolV1Decoder(int maxFrameLength) {
@@ -84,6 +82,8 @@ int lengthFieldLength,  FullLength is int(4B). so values is 4
         int initialBytesToStrip we will check magic code and version self, so do not strip any bytes. so values is 0
         */
         super(maxFrameLength, 3, 4, -7, 0);
+        String serializerName = CONFIG.getConfig(ConfigurationKeys.SERIALIZE_FOR_RPC, SerializerType.SEATA.name());
+        this.serializerType = SerializerType.getByName(serializerName);
     }
 
     @Override

File: rm-datasource/src/main/java/io/seata/rm/datasource/DataSourceProxy.java
Patch:
@@ -352,6 +352,9 @@ private void initPGResourceId() {
         } else {
             resourceId = jdbcUrl;
         }
+        if (resourceId.contains(",")) {
+            resourceId = resourceId.replace(",", "|");
+        }
     }
 
     /**

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoDeleteExecutor.java
Patch:
@@ -74,7 +74,7 @@ protected String buildUndoSQL() {
         String insertColumns = fields.stream()
             .map(field -> ColumnUtils.addEscape(field.getName(), JdbcConstants.MYSQL))
             .collect(Collectors.joining(", "));
-        String insertValues = fields.stream().map(field -> "?")
+        String insertValues = fields.stream().map(field -> MySQLJsonHelper.convertIfJson(field, beforeImage.getTableMeta()))
             .collect(Collectors.joining(", "));
 
         return String.format(INSERT_SQL_TEMPLATE, sqlUndoLog.getTableName(), insertColumns, insertValues);

File: server/src/main/java/io/seata/server/session/GlobalSession.java
Patch:
@@ -613,8 +613,8 @@ public byte[] encode() {
             applicationDataBytes);
 
         if (size > MAX_GLOBAL_SESSION_SIZE) {
-            throw new RuntimeException("global session size exceeded, size : " + size + " maxBranchSessionSize : " +
-                MAX_GLOBAL_SESSION_SIZE);
+            throw new RuntimeException("global session size exceeded, size : " + size + " byte, maxGlobalSessionSize : " +
+                MAX_GLOBAL_SESSION_SIZE + " byte");
         }
         ByteBuffer byteBuffer = byteBufferThreadLocal.get();
         //recycle

File: discovery/seata-discovery-raft/src/main/java/io/seata/discovery/registry/raft/RaftRegistryServiceImpl.java
Patch:
@@ -91,7 +91,7 @@ public class RaftRegistryServiceImpl implements RegistryService<ConfigChangeList
 
     private static volatile RaftRegistryServiceImpl instance;
 
-    private static final Configuration CONFIG = ConfigurationFactory.getInstance();
+    private static final Configuration CONFIG = ConfigurationFactory.CURRENT_FILE_INSTANCE;
 
     private static final String IP_PORT_SPLIT_CHAR = ":";
 

File: common/src/main/java/io/seata/common/DefaultValues.java
Patch:
@@ -47,7 +47,7 @@ public interface DefaultValues {
     /**
      * Shutdown timeout default 3s
      */
-    int DEFAULT_SHUTDOWN_TIMEOUT_SEC = 3;
+    int DEFAULT_SHUTDOWN_TIMEOUT_SEC = 13;
     int DEFAULT_SELECTOR_THREAD_SIZE = 1;
     int DEFAULT_BOSS_THREAD_SIZE = 1;
 

File: discovery/seata-discovery-etcd3/src/main/java/io/seata/discovery/registry/etcd3/EtcdRegistryServiceImpl.java
Patch:
@@ -252,6 +252,8 @@ private void refreshCluster(String cluster) throws Exception {
             return new InetSocketAddress(instanceInfo[0], Integer.parseInt(instanceInfo[1]));
         }).collect(Collectors.toList());
         clusterAddressMap.put(cluster, new Pair<>(getResponse.getHeader().getRevision(), instanceList));
+
+        removeOfflineAddressesIfNecessary(cluster, instanceList);
     }
 
     /**

File: discovery/seata-discovery-eureka/src/main/java/io/seata/discovery/registry/eureka/EurekaRegistryServiceImpl.java
Patch:
@@ -168,6 +168,8 @@ private void refreshCluster(String clusterName) {
                     .map(instance -> new InetSocketAddress(instance.getIPAddr(), instance.getPort()))
                     .collect(Collectors.toList());
             CLUSTER_ADDRESS_MAP.put(clusterName, newAddressList);
+
+            removeOfflineAddressesIfNecessary(clusterName, newAddressList);
         }
     }
 

File: discovery/seata-discovery-nacos/src/main/java/io/seata/discovery/registry/nacos/NacosRegistryServiceImpl.java
Patch:
@@ -192,6 +192,8 @@ public List<InetSocketAddress> lookup(String key) throws Exception {
                                     .map(eachInstance -> new InetSocketAddress(eachInstance.getIp(), eachInstance.getPort()))
                                     .collect(Collectors.toList());
                             CLUSTER_ADDRESS_MAP.put(clusterName, newAddressList);
+
+                            removeOfflineAddressesIfNecessary(clusterName, newAddressList);
                         }
                     });
                 }

File: discovery/seata-discovery-redis/src/main/java/io/seata/discovery/registry/redis/RedisRegistryServiceImpl.java
Patch:
@@ -278,7 +278,9 @@ private void removeServerAddressByPushEmptyProtection(String notifyCluserName, S
                 }
             }
         }
-        CLUSTER_ADDRESS_MAP.get(notifyCluserName).remove(inetSocketAddress);
+        socketAddresses.remove(inetSocketAddress);
+
+        removeOfflineAddressesIfNecessary(notifyCluserName, socketAddresses);
     }
 
     @Override

File: discovery/seata-discovery-sofa/src/main/java/io/seata/discovery/registry/sofa/SofaRegistryServiceImpl.java
Patch:
@@ -17,9 +17,9 @@
 package io.seata.discovery.registry.sofa;
 
 import java.net.InetSocketAddress;
-import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
+import java.util.ArrayList;
 import java.util.Properties;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
@@ -173,6 +173,8 @@ public List<InetSocketAddress> lookup(String key) throws Exception {
                 } else {
                     List<InetSocketAddress> newAddressList = flatData(instances);
                     CLUSTER_ADDRESS_MAP.put(clusterName, newAddressList);
+
+                    removeOfflineAddressesIfNecessary(clusterName, newAddressList);
                 }
                 respondRegistries.countDown();
             });

File: discovery/seata-discovery-zk/src/main/java/io/seata/discovery/registry/zk/ZookeeperRegisterServiceImpl.java
Patch:
@@ -308,6 +308,8 @@ private void refreshClusterAddressMap(String clusterName, List<String> instances
             }
         }
         CLUSTER_ADDRESS_MAP.put(clusterName, newAddressList);
+
+        removeOfflineAddressesIfNecessary(clusterName, newAddressList);
     }
 
     private String getClusterName() {

File: seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/CorePropertiesTest.java
Patch:
@@ -75,7 +75,7 @@ public void testTransportProperties() {
 
     @Test
     public void testShutdownProperties() {
-        assertEquals(3L, context.getBean(ShutdownProperties.class).getWait());
+        assertEquals(13L, context.getBean(ShutdownProperties.class).getWait());
     }
 
     @Test

File: server/src/test/java/io/seata/server/session/db/DataBaseSessionManagerTest.java
Patch:
@@ -89,9 +89,10 @@ public static void start(ApplicationContext context) throws Exception {
 
     private static void prepareTable(BasicDataSource dataSource) {
         Connection conn = null;
+        Statement s = null;
         try {
             conn = dataSource.getConnection();
-            Statement s = conn.createStatement();
+            s = conn.createStatement();
             try {
                 s.execute("drop table global_table");
             } catch (Exception e) {
@@ -109,7 +110,7 @@ private static void prepareTable(BasicDataSource dataSource) {
         } catch (Exception e) {
             e.printStackTrace();
         } finally {
-            IOUtil.close(conn);
+            IOUtil.close(s, conn);
         }
     }
 

File: core/src/main/java/io/seata/core/rpc/RemotingServer.java
Patch:
@@ -37,7 +37,7 @@ public interface RemotingServer {
      * @param resourceId rm client resourceId
      * @param clientId   rm client id
      * @param msg        transaction message {@code io.seata.core.protocol}
-     * @param tryOtherApp   try other app
+     * @param tryOtherApp try other app
      * @return client result message
      * @throws TimeoutException TimeoutException
      */

File: core/src/main/java/io/seata/core/rpc/netty/ChannelManager.java
Patch:
@@ -285,6 +285,7 @@ private static Channel getChannelFromSameClientMap(Map<Integer, RpcContext> clie
      *
      * @param resourceId Resource ID
      * @param clientId   Client ID - ApplicationId:IP:Port
+     * @param tryOtherApp try other app
      * @return Corresponding channel, NULL if not found.
      */
     public static Channel getChannel(String resourceId, String clientId, boolean tryOtherApp) {

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/util/DubboUtil.java
Patch:
@@ -34,6 +34,8 @@ private DubboUtil() {
     private static final String ALIBABA_DUBBO_PROXY_NAME_PREFIX = "com.alibaba.dubbo.common.bytecode.proxy";
     private static final String APACHE_DUBBO_PROXY_NAME_PREFIX = "org.apache.dubbo.common.bytecode.proxy";
 
+    private static final String DUBBO_3_X_PARTIAL_PROXY_NAME = "DubboProxy";
+
     /**
      * get the interface class of the dubbo proxy which be  generated by javaassist
      *
@@ -69,6 +71,6 @@ public static Class<?> getAssistInterface(Object proxyBean)
     }
 
     public static boolean isDubboProxyName(String name) {
-        return name.startsWith(ALIBABA_DUBBO_PROXY_NAME_PREFIX) || name.startsWith(APACHE_DUBBO_PROXY_NAME_PREFIX);
+        return name.startsWith(ALIBABA_DUBBO_PROXY_NAME_PREFIX) || name.startsWith(APACHE_DUBBO_PROXY_NAME_PREFIX) || name.contains(DUBBO_3_X_PARTIAL_PROXY_NAME);
     }
 }

File: core/src/main/java/io/seata/core/rpc/netty/AbstractNettyRemoting.java
Patch:
@@ -92,7 +92,7 @@ public abstract class AbstractNettyRemoting implements Disposable {
     /**
      * The Is sending.
      */
-    protected static volatile boolean isSending = false;
+    protected volatile boolean isSending = false;
     private String group = "DEFAULT";
 
     /**

File: server/src/main/java/io/seata/server/coordinator/DefaultCore.java
Patch:
@@ -307,7 +307,7 @@ public boolean doGlobalRollback(GlobalSession globalSession, boolean retrying) t
         if (globalSession.isSaga()) {
             success = getCore(BranchType.SAGA).doGlobalRollback(globalSession, retrying);
         } else {
-            List<BranchSession> branchSessions = globalSession.getSortedBranches();
+            List<BranchSession> branchSessions = globalSession.getReverseSortedBranches();
             Boolean result = SessionHelper.forEach(branchSessions, branchSession -> {
                 BranchStatus currentBranchStatus = branchSession.getStatus();
                 if (currentBranchStatus == BranchStatus.PhaseOne_Failed) {

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/interceptor/InvocationWrapper.java
Patch:
@@ -30,7 +30,7 @@ public interface InvocationWrapper {
 
     Object[] getArguments();
 
-    Object proceed();
+    Object proceed() throws Throwable;
 
 
 }

File: rm-datasource/src/test/java/io/seata/rm/datasource/ColumnUtilsTest.java
Patch:
@@ -240,7 +240,7 @@ public void test_addEscape_byDbType() throws Exception {
         cols = new ArrayList<>();
         cols.add("SCHEME.\"ID\"");
         cols = ColumnUtils.addEscape(cols, JdbcConstants.POSTGRESQL);
-        Assertions.assertEquals("\"SCHEME\".\"ID\"", cols.get(0));
+        Assertions.assertEquals("SCHEME.\"ID\"", cols.get(0));
 
         cols = new ArrayList<>();
         cols.add("\"SCHEME\".ID");
@@ -255,7 +255,7 @@ public void test_addEscape_byDbType() throws Exception {
         cols = new ArrayList<>();
         cols.add("schEme.id");
         cols = ColumnUtils.addEscape(cols, JdbcConstants.POSTGRESQL);
-        Assertions.assertEquals("\"schEme\".\"id\"", cols.get(0));
+        Assertions.assertEquals("schEme.id", cols.get(0));
 
     }
 

File: server/src/main/java/io/seata/server/session/BranchSession.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
-
+import io.seata.common.util.BufferUtils;
 import io.seata.common.util.CompressUtil;
 import io.seata.core.exception.TransactionException;
 import io.seata.core.model.BranchStatus;
@@ -407,7 +407,7 @@ public byte[] encode() {
 
         byteBuffer.put((byte)status.getCode());
         byteBuffer.put((byte)lockStatus.getCode());
-        byteBuffer.flip();
+        BufferUtils.flip(byteBuffer);
         byte[] result = new byte[byteBuffer.limit()];
         byteBuffer.get(result);
         return result;

File: server/src/main/java/io/seata/server/session/GlobalSession.java
Patch:
@@ -30,6 +30,7 @@
 import io.seata.common.Constants;
 import io.seata.common.DefaultValues;
 import io.seata.common.XID;
+import io.seata.common.util.BufferUtils;
 import io.seata.common.util.StringUtils;
 import io.seata.config.ConfigurationFactory;
 import io.seata.core.exception.GlobalTransactionException;
@@ -653,7 +654,7 @@ public byte[] encode() {
         }
         byteBuffer.putLong(beginTime);
         byteBuffer.put((byte)status.getCode());
-        byteBuffer.flip();
+        BufferUtils.flip(byteBuffer);
         byte[] result = new byte[byteBuffer.limit()];
         byteBuffer.get(result);
         return result;

File: core/src/main/java/io/seata/core/rpc/netty/AbstractNettyRemoting.java
Patch:
@@ -92,7 +92,7 @@ public abstract class AbstractNettyRemoting implements Disposable {
     /**
      * The Is sending.
      */
-    protected volatile boolean isSending = false;
+    protected static volatile boolean isSending = false;
     private String group = "DEFAULT";
 
     /**

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/remoting/parser/HSFRemotingParser.java
Patch:
@@ -55,7 +55,7 @@ public boolean isRemoting(Object bean, String beanName) {
     @Override
     public boolean isReference(Object bean, String beanName) {
         String beanClassName = bean.getClass().getName();
-        return isHsf && ("com.taobao.hsf.app.spring.util.HSFSpringConsumerBean".equals(beanClassName) || "org.springframework.beans.factory.FactoryBean".equals(beanClassName));
+        return isHsf && "com.taobao.hsf.app.spring.util.HSFSpringConsumerBean".equals(beanClassName);
     }
 
     @Override

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/interceptor/parser/DefaultInterfaceParser.java
Patch:
@@ -53,9 +53,9 @@ protected void initInterfaceParser() {
     }
 
     @Override
-    public ProxyInvocationHandler parserInterfaceToProxy(Object target) throws Exception {
+    public ProxyInvocationHandler parserInterfaceToProxy(Object target, String objectName) throws Exception {
         for (InterfaceParser interfaceParser : ALL_INTERFACE_PARSERS) {
-            ProxyInvocationHandler proxyInvocationHandler = interfaceParser.parserInterfaceToProxy(target);
+            ProxyInvocationHandler proxyInvocationHandler = interfaceParser.parserInterfaceToProxy(target, objectName);
             if (proxyInvocationHandler != null) {
                 return proxyInvocationHandler;
             }

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/interceptor/parser/DefaultResourceRegisterParser.java
Patch:
@@ -28,9 +28,9 @@ public class DefaultResourceRegisterParser {
 
     protected static List<RegisterResourceParser> allRegisterResourceParsers = new ArrayList<>();
 
-    public void registerResource(Object target) {
+    public void registerResource(Object target, String beanName) {
         for (RegisterResourceParser registerResourceParser : allRegisterResourceParsers) {
-            registerResourceParser.registerResource(target);
+            registerResourceParser.registerResource(target, beanName);
         }
     }
 

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/interceptor/parser/GlobalTransactionalInterceptorParser.java
Patch:
@@ -46,7 +46,7 @@ public class GlobalTransactionalInterceptorParser implements InterfaceParser {
      * @see GlobalLock // GlobalLock annotation
      */
     @Override
-    public ProxyInvocationHandler parserInterfaceToProxy(Object target) throws Exception {
+    public ProxyInvocationHandler parserInterfaceToProxy(Object target, String objectName) throws Exception {
         Class<?> serviceInterface = DefaultTargetClassParser.get().findTargetClass(target);
         Class<?>[] interfacesIfJdk = DefaultTargetClassParser.get().findInterfaces(target);
 

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/interceptor/parser/InterfaceParser.java
Patch:
@@ -22,7 +22,7 @@
  */
 public interface InterfaceParser {
 
-    ProxyInvocationHandler parserInterfaceToProxy(Object target) throws Exception;
+    ProxyInvocationHandler parserInterfaceToProxy(Object target, String objectName) throws Exception;
 
 
 }

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/interceptor/parser/RegisterResourceParser.java
Patch:
@@ -20,6 +20,6 @@
  */
 public interface RegisterResourceParser {
 
-    void registerResource(Object target);
+    void registerResource(Object target, String beanName);
 
 }

File: integration-tx-api/src/test/java/io/seata/integration/tx/api/interceptor/parser/GlobalTransactionalInterceptorParserTest.java
Patch:
@@ -33,7 +33,7 @@ void parserInterfaceToProxy() throws Exception {
         GlobalTransactionalInterceptorParser globalTransactionalInterceptorParser = new GlobalTransactionalInterceptorParser();
 
         //when
-        ProxyInvocationHandler proxyInvocationHandler = globalTransactionalInterceptorParser.parserInterfaceToProxy(business);
+        ProxyInvocationHandler proxyInvocationHandler = globalTransactionalInterceptorParser.parserInterfaceToProxy(business, business.getClass().getName());
 
         //then
         Assertions.assertNotNull(proxyInvocationHandler);

File: spring/src/main/java/io/seata/spring/tcc/TccAnnotationProcessor.java
Patch:
@@ -103,7 +103,7 @@ public void addTccAdvise(Object bean, String beanName, Field field, Class servic
                 RemotingDesc remotingDesc = new RemotingDesc();
                 remotingDesc.setServiceClass(serviceClass);
 
-                Object proxyBean = ProxyUtil.createProxy(bean);
+                Object proxyBean = ProxyUtil.createProxy(bean, beanName);
                 field.setAccessible(true);
                 field.set(bean, proxyBean);
                 LOGGER.info("Bean[" + bean.getClass().getName() + "] with name [" + field.getName() + "] would use proxy");

File: tcc/src/main/java/io/seata/rm/tcc/interceptor/parser/TccActionInterceptorParser.java
Patch:
@@ -37,13 +37,13 @@
 public class TccActionInterceptorParser implements InterfaceParser {
 
     @Override
-    public ProxyInvocationHandler parserInterfaceToProxy(Object target) {
-        boolean isTxRemotingBean = TxBeanParserUtils.isTxRemotingBean(target, target.toString());
+    public ProxyInvocationHandler parserInterfaceToProxy(Object target, String objectName) {
+        boolean isTxRemotingBean = TxBeanParserUtils.isTxRemotingBean(target, objectName);
         if (isTxRemotingBean) {
             RemotingDesc remotingDesc = DefaultRemotingParser.get().getRemotingBeanDesc(target);
             if (remotingDesc != null) {
                 if (remotingDesc.isService()) {
-                    DefaultResourceRegisterParser.get().registerResource(target);
+                    DefaultResourceRegisterParser.get().registerResource(target, objectName);
                 }
                 if (remotingDesc.isReference()) {
                     //if it is a tcc remote reference

File: tcc/src/main/java/io/seata/rm/tcc/resource/parser/TccRegisterResourceParser.java
Patch:
@@ -41,8 +41,8 @@
 public class TccRegisterResourceParser implements RegisterResourceParser {
 
     @Override
-    public void registerResource(Object target) {
-        boolean isTxRemotingBean = TxBeanParserUtils.isTxRemotingBean(target, target.toString());
+    public void registerResource(Object target, String beanName) {
+        boolean isTxRemotingBean = TxBeanParserUtils.isTxRemotingBean(target, beanName);
         if (isTxRemotingBean) {
             RemotingDesc remotingDesc = DefaultRemotingParser.get().getRemotingBeanDesc(target);
             if (remotingDesc != null) {

File: tcc/src/test/java/io/seata/rm/tcc/interceptor/parser/TccActionInterceptorParserTest.java
Patch:
@@ -33,7 +33,7 @@ void parserInterfaceToProxy() {
         NormalTccActionImpl tccAction = new NormalTccActionImpl();
 
         //when
-        ProxyInvocationHandler proxyInvocationHandler = tccActionInterceptorParser.parserInterfaceToProxy(tccAction);
+        ProxyInvocationHandler proxyInvocationHandler = tccActionInterceptorParser.parserInterfaceToProxy(tccAction, tccAction.getClass().getName());
 
         //then
         Assertions.assertNotNull(proxyInvocationHandler);

File: server/src/main/java/io/seata/server/session/SessionHelper.java
Patch:
@@ -147,7 +147,7 @@ public static void endCommitted(GlobalSession globalSession, boolean retryGlobal
             }
             globalSession.end();
             if (!DELAY_HANDLE_SESSION) {
-                MetricsPublisher.postSessionDoneEvent(globalSession, false, false);
+                MetricsPublisher.postSessionDoneEvent(globalSession, retryGlobal, false);
             }
             MetricsPublisher.postSessionDoneEvent(globalSession, IdConstants.STATUS_VALUE_AFTER_COMMITTED_KEY, true,
                 beginTime, retryBranch);
@@ -219,7 +219,7 @@ public static void endRollbacked(GlobalSession globalSession, boolean retryGloba
             }
             globalSession.end();
             if (!DELAY_HANDLE_SESSION && !timeoutDone) {
-                MetricsPublisher.postSessionDoneEvent(globalSession, false, false);
+                MetricsPublisher.postSessionDoneEvent(globalSession, retryGlobal, false);
             }
             MetricsPublisher.postSessionDoneEvent(globalSession, IdConstants.STATUS_VALUE_AFTER_ROLLBACKED_KEY, true,
                     beginTime, retryBranch);
@@ -331,7 +331,7 @@ public static void forEach(Collection<GlobalSession> sessions, GlobalSessionHand
     public static Boolean forEach(Collection<BranchSession> sessions, BranchSessionHandler handler) throws TransactionException {
         return forEach(sessions, handler, false);
     }
-    
+
     /**
      * Foreach branch sessions.
      *

File: saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java
Patch:
@@ -197,8 +197,9 @@ public void recordStateMachineFinished(StateMachineInstance machineInstance, Pro
 
     protected void reportTransactionFinished(StateMachineInstance machineInstance, ProcessContext context) {
         if (sagaTransactionalTemplate != null) {
+            GlobalTransaction globalTransaction = null;
             try {
-                GlobalTransaction globalTransaction = getGlobalTransaction(machineInstance, context);
+                globalTransaction = getGlobalTransaction(machineInstance, context);
                 if (globalTransaction == null) {
 
                     throw new EngineExecutionException("Global transaction is not exists",
@@ -234,7 +235,7 @@ protected void reportTransactionFinished(StateMachineInstance machineInstance, P
                 // clear
                 RootContext.unbind();
                 RootContext.unbindBranchType();
-                sagaTransactionalTemplate.triggerAfterCompletion();
+                sagaTransactionalTemplate.triggerAfterCompletion(globalTransaction);
                 sagaTransactionalTemplate.cleanUp();
             }
         }

File: saga/seata-saga-tm/src/main/java/io/seata/saga/tm/SagaTransactionalTemplate.java
Patch:
@@ -48,7 +48,7 @@ long branchRegister(String resourceId, String clientId, String xid, String appli
     void branchReport(String xid, long branchId, BranchStatus status, String applicationData)
         throws TransactionException;
 
-    void triggerAfterCompletion();
+    void triggerAfterCompletion(GlobalTransaction tx);
 
     void cleanUp();
 }
\ No newline at end of file

File: test/src/test/java/io/seata/saga/engine/mock/MockSagaTransactionTemplate.java
Patch:
@@ -73,7 +73,7 @@ public void branchReport(String xid, long branchId, BranchStatus status, String
     }
 
     @Override
-    public void triggerAfterCompletion() {
+    public void triggerAfterCompletion(GlobalTransaction tx) {
 
     }
 

File: server/src/main/java/io/seata/server/cluster/raft/RaftServer.java
Patch:
@@ -18,6 +18,7 @@
 import java.io.Closeable;
 import java.io.File;
 import java.io.IOException;
+import java.util.Optional;
 import java.util.concurrent.TimeUnit;
 import com.alipay.sofa.jraft.Node;
 import com.alipay.sofa.jraft.RaftGroupService;
@@ -104,9 +105,7 @@ public void close() {
 
     @Override
     public void destroy() {
-        if (raftGroupService != null) {
-            raftGroupService.shutdown();
-        }
+        Optional.ofNullable(raftGroupService).ifPresent(RaftGroupService::shutdown);
     }
 
 }

File: server/src/main/java/io/seata/server/session/GlobalSession.java
Patch:
@@ -314,7 +314,6 @@ public void addBranch(BranchSession branchSession) throws TransactionException {
             lifecycleListener.onAddBranch(this, branchSession);
         }
         if (!RaftServerFactory.getInstance().isRaftMode()) {
-            branchSession.setStatus(BranchStatus.Registered);
             add(branchSession);
         }
     }

File: server/src/main/java/io/seata/server/session/SessionHelper.java
Patch:
@@ -32,6 +32,7 @@
 import io.seata.config.ConfigurationFactory;
 import io.seata.core.context.RootContext;
 import io.seata.core.exception.TransactionException;
+import io.seata.core.model.BranchStatus;
 import io.seata.core.model.BranchType;
 import io.seata.core.model.GlobalStatus;
 import io.seata.metrics.IdConstants;
@@ -104,6 +105,7 @@ public static BranchSession newBranchByGlobal(GlobalSession globalSession, Branc
         branchSession.setLockKey(lockKeys);
         branchSession.setClientId(clientId);
         branchSession.setApplicationData(applicationData);
+        branchSession.setStatus(BranchStatus.Registered);
 
         return branchSession;
     }

File: server/src/main/java/io/seata/server/session/BranchSession.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
-import io.seata.common.util.CollectionUtils;
+
 import io.seata.common.util.CompressUtil;
 import io.seata.core.exception.TransactionException;
 import io.seata.core.model.BranchStatus;
@@ -304,7 +304,7 @@ public boolean lock(boolean autoCommit, boolean skipCheckLock) throws Transactio
 
     @Override
     public boolean unlock() throws TransactionException {
-        if (this.branchType == BranchType.AT && CollectionUtils.isNotEmpty(this.lockHolder)) {
+        if (this.branchType == BranchType.AT) {
             return lockManager.releaseLock(this);
         }
         return true;

File: common/src/test/java/io/seata/common/util/ReflectionUtilTest.java
Patch:
@@ -28,7 +28,7 @@
 import io.seata.common.BranchDO;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.DisabledOnJre;
+import org.junit.jupiter.api.condition.EnabledOnJre;
 import org.junit.jupiter.api.condition.JRE;
 
 public class ReflectionUtilTest {
@@ -124,7 +124,7 @@ public void testGetInterfaces() {
     }
 
     @Test
-    @DisabledOnJre(JRE.JAVA_17) // `ReflectionUtil.modifyStaticFinalField` does not supported java17
+    @EnabledOnJre({JRE.JAVA_8, JRE.JAVA_11}) // `ReflectionUtil.modifyStaticFinalField` does not supported java17 and above versions
     public void testModifyStaticFinalField() throws NoSuchFieldException, IllegalAccessException {
         Assertions.assertEquals("hello", testValue);
         ReflectionUtil.modifyStaticFinalField(ReflectionUtilTest.class, "testValue", "hello world");
@@ -189,7 +189,7 @@ public void testAnnotationToString() throws NoSuchMethodException {
     }
 
     @Test
-    @DisabledOnJre(JRE.JAVA_17) // `ReflectionUtil.getAnnotationValues` does not supported java17
+    @EnabledOnJre({JRE.JAVA_8, JRE.JAVA_11}) // `ReflectionUtil.modifyStaticFinalField` does not supported java17 and above versions
     public void testGetAnnotationValues() throws NoSuchMethodException, NoSuchFieldException {
         Assertions.assertEquals(new LinkedHashMap<>(), ReflectionUtil
             .getAnnotationValues(this.getClass().getMethod("testGetAnnotationValues").getAnnotation(Test.class)));

File: rm-datasource/src/test/java/io/seata/rm/datasource/ConnectionProxyTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.DisabledOnJre;
+import org.junit.jupiter.api.condition.EnabledOnJre;
 import org.junit.jupiter.api.condition.JRE;
 import org.mockito.Mockito;
 
@@ -43,7 +43,7 @@
  *
  * @author ggndnn
  */
-@DisabledOnJre(JRE.JAVA_17) // `ReflectionUtil.modifyStaticFinalField` does not supported java17
+@EnabledOnJre({JRE.JAVA_8, JRE.JAVA_11}) // `ReflectionUtil.modifyStaticFinalField` does not supported java17 and above versions
 public class ConnectionProxyTest {
     private DataSourceProxy dataSourceProxy;
 

File: rm-datasource/src/test/java/io/seata/rm/datasource/exec/AbstractDMLBaseExecutorTest.java
Patch:
@@ -29,7 +29,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.DisabledOnJre;
+import org.junit.jupiter.api.condition.EnabledOnJre;
 import org.junit.jupiter.api.condition.JRE;
 import org.mockito.Mockito;
 
@@ -44,7 +44,7 @@
  *
  * @author ggndnn
  */
-@DisabledOnJre(JRE.JAVA_17) // `ReflectionUtil.modifyStaticFinalField` does not supported java17
+@EnabledOnJre({JRE.JAVA_8, JRE.JAVA_11}) // `ReflectionUtil.modifyStaticFinalField` does not supported java17 and above versions
 public class AbstractDMLBaseExecutorTest {
     private ConnectionProxy connectionProxy;
 

File: server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorTest.java
Patch:
@@ -53,7 +53,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.DisabledOnJre;
+import org.junit.jupiter.api.condition.EnabledOnJre;
 import org.junit.jupiter.api.condition.JRE;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.Arguments;
@@ -159,7 +159,7 @@ public void test_handleRetryRollbacking() throws TransactionException, Interrupt
     }
 
     @Test
-    @DisabledOnJre(JRE.JAVA_17) // `ReflectionUtil.modifyStaticFinalField` does not supported java17
+    @EnabledOnJre({JRE.JAVA_8, JRE.JAVA_11}) // `ReflectionUtil.modifyStaticFinalField` does not supported java17 and above versions
     public void test_handleRetryRollbackingTimeOut() throws TransactionException, InterruptedException, NoSuchFieldException, IllegalAccessException {
         String xid = core.begin(applicationId, txServiceGroup, txName, 10);
         Long branchId = core.branchRegister(BranchType.AT, "abcd", clientId, xid, applicationData, lockKeys_2);
@@ -185,7 +185,7 @@ public void test_handleRetryRollbackingTimeOut() throws TransactionException, In
     }
 
     @Test
-    @DisabledOnJre(JRE.JAVA_17) // `ReflectionUtil.modifyStaticFinalField` does not supported java17
+    @EnabledOnJre({JRE.JAVA_8, JRE.JAVA_11}) // `ReflectionUtil.modifyStaticFinalField` does not supported java17 and above versions
     public void test_handleRetryRollbackingTimeOut_unlock() throws TransactionException, InterruptedException,
         NoSuchFieldException, IllegalAccessException {
         String xid = core.begin(applicationId, txServiceGroup, txName, 10);

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/mysql/MySQLUpdateJoinExecutor.java
Patch:
@@ -130,7 +130,7 @@ private String buildBeforeImageSQL(String joinTable, String itemTable,String suf
         //maybe duplicate row for select join sql.remove duplicate row by 'group by' condition
         suffix.append(GROUP_BY);
         List<String> pkColumnNames = getColumnNamesWithTablePrefixList(itemTable, recognizer.getTableAlias(itemTable), itemTableMeta.getPrimaryKeyOnlyName());
-        List<String> needUpdateColumns = getNeedUpdateColumns(itemTable, recognizer.getTableAlias(itemTable), itemTableUpdateColumns);
+        List<String> needUpdateColumns = getNeedColumns(itemTable, recognizer.getTableAlias(itemTable), itemTableUpdateColumns);
         suffix.append(buildGroupBy(pkColumnNames,needUpdateColumns));
         suffix.append(" FOR UPDATE");
         StringJoiner selectSQLJoin = new StringJoiner(", ", prefix.toString(), suffix.toString());
@@ -200,7 +200,7 @@ private String buildAfterImageSQL(String joinTable, String itemTable,
         //maybe duplicate row for select join sql.remove duplicate row by 'group by' condition
         suffix += GROUP_BY;
         List<String> itemTableUpdateColumns = getItemUpdateColumns(itemTableMeta, recognizer.getUpdateColumns());
-        List<String> needUpdateColumns = getNeedUpdateColumns(itemTable, recognizer.getTableAlias(itemTable), itemTableUpdateColumns);
+        List<String> needUpdateColumns = getNeedColumns(itemTable, recognizer.getTableAlias(itemTable), itemTableUpdateColumns);
         suffix += buildGroupBy(pkColumns, needUpdateColumns);
         StringJoiner selectSQLJoiner = new StringJoiner(", ", prefix.toString(), suffix);
         needUpdateColumns.forEach(selectSQLJoiner::add);

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/sqlserver/SqlServerUpdateExecutor.java
Patch:
@@ -61,7 +61,7 @@ protected String buildBeforeImageSQL(TableMeta tableMeta, ArrayList<List<Object>
             suffix.append(WHERE).append(whereCondition);
         }
         StringJoiner selectSQLJoin = new StringJoiner(", ", prefix.toString(), suffix.toString());
-        List<String> needUpdateColumns = getNeedUpdateColumns(tableMeta.getTableName(), sqlRecognizer.getTableAlias(), recognizer.getUpdateColumnsUnEscape());
+        List<String> needUpdateColumns = getNeedColumns(tableMeta.getTableName(), sqlRecognizer.getTableAlias(), recognizer.getUpdateColumnsUnEscape());
         for (String needUpdateColumn : needUpdateColumns) {
             selectSQLJoin.add(needUpdateColumn);
         }

File: rm-datasource/src/main/java/io/seata/rm/datasource/util/JdbcUtils.java
Patch:
@@ -68,7 +68,7 @@ public static void initDataSourceResource(BaseDataSourceResource dataSourceResou
             dataSourceResource.setResourceId(buildResourceId(jdbcUrl));
             String driverClassName = com.alibaba.druid.util.JdbcUtils.getDriverClassName(jdbcUrl);
             dataSourceResource.setDriver(loadDriver(driverClassName));
-            dataSourceResource.setDbType(com.alibaba.druid.util.JdbcUtils.getDbType(jdbcUrl, driverClassName));
+            dataSourceResource.setDbType(JdbcUtils.getDbType(jdbcUrl));
         } catch (SQLException e) {
             throw new IllegalStateException("can not init DataSourceResource with " + dataSource, e);
         }
@@ -84,7 +84,7 @@ public static void initXADataSourceResource(BaseDataSourceResource dataSourceRes
                 dataSourceResource.setResourceId(buildResourceId(jdbcUrl));
                 String driverClassName = com.alibaba.druid.util.JdbcUtils.getDriverClassName(jdbcUrl);
                 dataSourceResource.setDriver(loadDriver(driverClassName));
-                dataSourceResource.setDbType(com.alibaba.druid.util.JdbcUtils.getDbType(jdbcUrl, driverClassName));
+                dataSourceResource.setDbType(JdbcUtils.getDbType(jdbcUrl));
             } finally {
                 if (xaConnection != null) {
                     xaConnection.close();

File: rm-datasource/src/main/java/io/seata/rm/datasource/xa/ConnectionProxyXA.java
Patch:
@@ -22,7 +22,6 @@
 import javax.transaction.xa.XAException;
 import javax.transaction.xa.XAResource;
 
-import com.alibaba.druid.util.JdbcConstants;
 import io.seata.common.DefaultValues;
 import io.seata.common.util.StringUtils;
 import io.seata.config.ConfigurationFactory;
@@ -32,6 +31,7 @@
 import io.seata.rm.BaseDataSourceResource;
 import io.seata.rm.DefaultResourceManager;
 import io.seata.rm.datasource.util.SeataXAResource;
+import io.seata.sqlparser.util.JdbcConstants;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: core/src/main/java/io/seata/core/protocol/MergeMessage.java
Patch:
@@ -15,10 +15,12 @@
  */
 package io.seata.core.protocol;
 
+import java.io.Serializable;
+
 /**
  * The interface Merge message.
  *
  * @author slievrly
  */
-public interface MergeMessage {
+public interface MergeMessage extends Serializable {
 }

File: core/src/main/java/io/seata/core/protocol/RpcMessage.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.seata.common.util.StringUtils;
 
+import java.io.Serializable;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -25,7 +26,7 @@
  *
  * @author slievrly
  */
-public class RpcMessage {
+public class RpcMessage implements Serializable {
 
     private int id;
     private byte messageType;

File: serializer/seata-serializer-fst/src/main/java/io/seata/serializer/fst/FstSerializerFactory.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.seata.serializer.fst;
 
-import io.seata.core.serializer.SerializerClassRegistry;
+import io.seata.core.serializer.SerializerSecurityRegistry;
 import org.nustaq.serialization.FSTConfiguration;
 
 /**
@@ -33,7 +33,7 @@ public static FstSerializerFactory getDefaultFactory() {
     }
 
     public FstSerializerFactory() {
-        SerializerClassRegistry.getRegisteredClasses().keySet().forEach(conf::registerClass);
+        SerializerSecurityRegistry.getAllowClassType().forEach(conf::registerClass);
     }
 
     public <T> byte[] serialize(T t) {

File: discovery/seata-discovery-redis/src/main/java/io/seata/discovery/registry/redis/RedisRegistryServiceImpl.java
Patch:
@@ -195,7 +195,7 @@ public void subscribe(String cluster, RedisListener listener) {
             try {
                 try (Jedis jedis = jedisPool.getResource()) {
                     // try update Map every 2s
-                    updateClusterAddressMap(jedis, redisRegistryKey);
+                    updateClusterAddressMap(jedis, redisRegistryKey, cluster);
                 }
             } catch (Exception e) {
                 LOGGER.error(e.getMessage(), e);
@@ -232,7 +232,7 @@ List<InetSocketAddress> lookupByCluster(String clusterName) {
         if (!LISTENER_SERVICE_MAP.containsKey(clusterName)) {
             String redisRegistryKey = REDIS_FILEKEY_PREFIX + clusterName;
             try (Jedis jedis = jedisPool.getResource()) {
-                updateClusterAddressMap(jedis, redisRegistryKey);
+                updateClusterAddressMap(jedis, redisRegistryKey, clusterName);
             }
             subscribe(clusterName, msg -> {
                 String[] msgr = msg.split("-");
@@ -286,7 +286,7 @@ public void onMessage(String key, String msg) {
         }
     }
 
-    private void updateClusterAddressMap(Jedis jedis, String redisRegistryKey) {
+    private void updateClusterAddressMap(Jedis jedis, String redisRegistryKey, String clusterName) {
         ScanParams scanParams = new ScanParams();
         scanParams.count(10);
         scanParams.match(redisRegistryKey + "_*");

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/cache/MysqlTableMetaCache.java
Patch:
@@ -169,7 +169,7 @@ private TableMeta resultSetMetaToSchema(ResultSetMetaData rsmd, DatabaseMetaData
                     index.setType(rsIndex.getShort("TYPE"));
                     index.setOrdinalPosition(rsIndex.getShort("ORDINAL_POSITION"));
                     index.setAscOrDesc(rsIndex.getString("ASC_OR_DESC"));
-                    index.setCardinality(rsIndex.getInt("CARDINALITY"));
+                    index.setCardinality(rsIndex.getLong("CARDINALITY"));
                     index.getValues().add(col);
                     if ("PRIMARY".equalsIgnoreCase(indexName)) {
                         index.setIndextype(IndexType.PRIMARY);

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/cache/OracleTableMetaCache.java
Patch:
@@ -142,7 +142,7 @@ private TableMeta resultSetMetaToSchema(DatabaseMetaData dbmd, String tableName)
                     index.setType(rsIndex.getShort("TYPE"));
                     index.setOrdinalPosition(rsIndex.getShort("ORDINAL_POSITION"));
                     index.setAscOrDesc(rsIndex.getString("ASC_OR_DESC"));
-                    index.setCardinality(rsIndex.getInt("CARDINALITY"));
+                    index.setCardinality(rsIndex.getLong("CARDINALITY"));
                     index.getValues().add(col);
                     if (!index.isNonUnique()) {
                         index.setIndextype(IndexType.UNIQUE);

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/cache/PostgresqlTableMetaCache.java
Patch:
@@ -160,7 +160,7 @@ private TableMeta resultSetMetaToSchema(Connection connection, String tableName)
                     index.setType(rsIndex.getShort("type"));
                     index.setOrdinalPosition(rsIndex.getShort("ordinal_position"));
                     index.setAscOrDesc(rsIndex.getString("asc_or_desc"));
-                    index.setCardinality(rsIndex.getInt("cardinality"));
+                    index.setCardinality(rsIndex.getLong("cardinality"));
                     index.getValues().add(col);
                     if (!index.isNonUnique()) {
                         index.setIndextype(IndexType.UNIQUE);

File: rm-datasource/src/test/java/io/seata/rm/datasource/sql/struct/cache/MysqlTableMetaCacheTest.java
Patch:
@@ -55,9 +55,9 @@ public class MysqlTableMetaCacheTest {
 
     private static Object[][] indexMetas =
         new Object[][] {
-            new Object[] {"PRIMARY", "id", false, "", 3, 0, "A", 34},
-            new Object[] {"name1", "name1", false, "", 3, 1, "A", 34},
-            new Object[] {"name2", "name2", true, "", 3, 2, "A", 34},
+            new Object[] {"PRIMARY", "id", false, "", 3, 0, "A", 34L},
+            new Object[] {"name1", "name1", false, "", 3, 1, "A", 34L},
+            new Object[] {"name2", "name2", true, "", 3, 2, "A", 34L},
         };
 
     @Test

File: rm-datasource/src/test/java/io/seata/rm/datasource/sql/struct/cache/SqlServerTableMetaCacheTest.java
Patch:
@@ -49,9 +49,9 @@ public class SqlServerTableMetaCacheTest {
             };
     private static Object[][] indexMetas =
             new Object[][]{
-                    new Object[]{"id", "id", false, "", 3, 0, "A", 34},
-                    new Object[]{"name1", "name1", false, "", 3, 1, "A", 34},
-                    new Object[]{"name2", "name2", true, "", 3, 2, "A", 34},
+                    new Object[]{"id", "id", false, "", 3, 0, "A", 34L},
+                    new Object[]{"name1", "name1", false, "", 3, 1, "A", 34L},
+                    new Object[]{"name2", "name2", true, "", 3, 2, "A", 34L},
             };
 
     private static Object[][] pkMetas =

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/struct/IndexMeta.java
Patch:
@@ -35,7 +35,7 @@ public class IndexMeta {
     private short type;
     private IndexType indextype;
     private String ascOrDesc;
-    private int cardinality;
+    private long cardinality;
     private int ordinalPosition;
 
     /**
@@ -157,7 +157,7 @@ public void setAscOrDesc(String ascOrDesc) {
      *
      * @return the cardinality
      */
-    public int getCardinality() {
+    public long getCardinality() {
         return cardinality;
     }
 
@@ -166,7 +166,7 @@ public int getCardinality() {
      *
      * @param cardinality the cardinality
      */
-    public void setCardinality(int cardinality) {
+    public void setCardinality(long cardinality) {
         this.cardinality = cardinality;
     }
 

File: integration/sofa-rpc/src/main/java/io/seata/integration/sofa/rpc/TransactionContextConsumerFilter.java
Patch:
@@ -105,14 +105,14 @@ public SofaResponse invoke(FilterInvoker filterInvoker, SofaRequest sofaRequest)
      * @return
      */
     private String getRpcXid() {
-        String rpcXid = (String) RpcInternalContext.getContext().getAttachment(RootContext.KEY_XID);
+        String rpcXid = (String) RpcInternalContext.getContext().getAttachment(RootContext.HIDDEN_KEY_XID);
         if (rpcXid == null) {
-            rpcXid = (String) RpcInternalContext.getContext().getAttachment(RootContext.KEY_XID.toLowerCase());
+            rpcXid = (String) RpcInternalContext.getContext().getAttachment(RootContext.HIDDEN_KEY_XID.toLowerCase());
         }
         return rpcXid;
     }
     private String getBranchType() {
-        return (String) RpcInternalContext.getContext().getAttachment(RootContext.KEY_BRANCH_TYPE);
+        return (String) RpcInternalContext.getContext().getAttachment(RootContext.HIDDEN_KEY_BRANCH_TYPE);
     }
 
 }

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/TableRecords.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import javax.sql.rowset.serial.SerialBlob;
 import javax.sql.rowset.serial.SerialClob;
 import javax.sql.rowset.serial.SerialDatalink;
@@ -193,7 +194,7 @@ public static TableRecords empty(TableMeta tableMeta) {
     public static TableRecords buildRecords(TableMeta tmeta, ResultSet resultSet) throws SQLException {
         TableRecords records = new TableRecords(tmeta);
         ResultSetMetaData resultSetMetaData = resultSet.getMetaData();
-        Map<String, ColumnMeta> primaryKeyMap = tmeta.getPrimaryKeyMap();
+        Set<String> ignoreCasePKs = tmeta.getCaseInsensitivePKs();
         int columnCount = resultSetMetaData.getColumnCount();
 
         while (resultSet.next()) {
@@ -204,7 +205,7 @@ public static TableRecords buildRecords(TableMeta tmeta, ResultSet resultSet) th
                 int dataType = col.getDataType();
                 Field field = new Field();
                 field.setName(col.getColumnName());
-                if (primaryKeyMap.containsKey(colName)) {
+                if (ignoreCasePKs.contains(colName)) {
                     field.setKeyType(KeyType.PRIMARY_KEY);
                 }
                 field.setType(dataType);

File: discovery/seata-discovery-consul/src/main/java/io/seata/discovery/registry/consul/ConsulRegistryServiceImpl.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
 
+import io.seata.config.exception.ConfigNotFoundException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -163,7 +164,8 @@ public void unsubscribe(String cluster, ConsulListener listener) throws Exceptio
     public List<InetSocketAddress> lookup(String key) throws Exception {
         final String cluster = getServiceGroup(key);
         if (cluster == null) {
-            return null;
+            String missingDataId = PREFIX_SERVICE_ROOT + CONFIG_SPLIT_CHAR + PREFIX_SERVICE_MAPPING + key;
+            throw new ConfigNotFoundException("%s configuration item is required", missingDataId);
         }
         return lookupByCluster(cluster);
 

File: discovery/seata-discovery-etcd3/src/main/java/io/seata/discovery/registry/etcd3/EtcdRegistryServiceImpl.java
Patch:
@@ -33,6 +33,7 @@
 import io.seata.common.util.StringUtils;
 import io.seata.config.Configuration;
 import io.seata.config.ConfigurationFactory;
+import io.seata.config.exception.ConfigNotFoundException;
 import io.seata.discovery.registry.RegistryHeartBeats;
 import io.seata.discovery.registry.RegistryService;
 
@@ -183,7 +184,8 @@ public void unsubscribe(String cluster, Watch.Listener listener) throws Exceptio
     public List<InetSocketAddress> lookup(String key) throws Exception {
         final String cluster = getServiceGroup(key);
         if (cluster == null) {
-            return null;
+            String missingDataId = PREFIX_SERVICE_ROOT + CONFIG_SPLIT_CHAR + PREFIX_SERVICE_MAPPING + key;
+            throw new ConfigNotFoundException("%s configuration item is required", missingDataId);
         }
         return lookupByCluster(cluster);
     }

File: discovery/seata-discovery-eureka/src/main/java/io/seata/discovery/registry/eureka/EurekaRegistryServiceImpl.java
Patch:
@@ -30,6 +30,7 @@
 import io.seata.common.util.StringUtils;
 import io.seata.config.Configuration;
 import io.seata.config.ConfigurationFactory;
+import io.seata.config.exception.ConfigNotFoundException;
 import io.seata.discovery.registry.RegistryService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -131,7 +132,8 @@ public void unsubscribe(String cluster, EurekaEventListener listener) throws Exc
     public List<InetSocketAddress> lookup(String key) throws Exception {
         String clusterName = getServiceGroup(key);
         if (clusterName == null) {
-            return null;
+            String missingDataId = PREFIX_SERVICE_ROOT + CONFIG_SPLIT_CHAR + PREFIX_SERVICE_MAPPING + key;
+            throw new ConfigNotFoundException("%s configuration item is required", missingDataId);
         }
         String clusterUpperName = clusterName.toUpperCase();
         if (!LISTENER_SERVICE_MAP.containsKey(clusterUpperName)) {

File: discovery/seata-discovery-nacos/src/main/java/io/seata/discovery/registry/nacos/NacosRegistryServiceImpl.java
Patch:
@@ -38,6 +38,7 @@
 import io.seata.config.Configuration;
 import io.seata.config.ConfigurationFactory;
 import io.seata.config.ConfigurationKeys;
+import io.seata.config.exception.ConfigNotFoundException;
 import io.seata.discovery.registry.RegistryService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -145,7 +146,8 @@ public void unsubscribe(String cluster, EventListener listener) throws Exception
     public List<InetSocketAddress> lookup(String key) throws Exception {
         String clusterName = getServiceGroup(key);
         if (clusterName == null) {
-            return null;
+            String missingDataId = PREFIX_SERVICE_ROOT + CONFIG_SPLIT_CHAR + PREFIX_SERVICE_MAPPING + key;
+            throw new ConfigNotFoundException("%s configuration item is required", missingDataId);
         }
         if (useSLBWay) {
             if (LOGGER.isDebugEnabled()) {

File: discovery/seata-discovery-redis/src/main/java/io/seata/discovery/registry/redis/RedisRegistryServiceImpl.java
Patch:
@@ -35,6 +35,7 @@
 import io.seata.common.util.StringUtils;
 import io.seata.config.Configuration;
 import io.seata.config.ConfigurationFactory;
+import io.seata.config.exception.ConfigNotFoundException;
 import io.seata.discovery.registry.RegistryHeartBeats;
 import io.seata.discovery.registry.RegistryService;
 import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
@@ -220,7 +221,8 @@ public void unsubscribe(String cluster, RedisListener listener) {
     public List<InetSocketAddress> lookup(String key) {
         String clusterName = getServiceGroup(key);
         if (clusterName == null) {
-            return null;
+            String missingDataId = PREFIX_SERVICE_ROOT + CONFIG_SPLIT_CHAR + PREFIX_SERVICE_MAPPING + key;
+            throw new ConfigNotFoundException("%s configuration item is required", missingDataId);
         }
         return lookupByCluster(clusterName);
     }

File: discovery/seata-discovery-sofa/src/main/java/io/seata/discovery/registry/sofa/SofaRegistryServiceImpl.java
Patch:
@@ -37,6 +37,7 @@
 import io.seata.common.util.NetUtil;
 import io.seata.config.Configuration;
 import io.seata.config.ConfigurationFactory;
+import io.seata.config.exception.ConfigNotFoundException;
 import io.seata.discovery.registry.RegistryService;
 import org.apache.commons.lang.StringUtils;
 
@@ -160,7 +161,8 @@ public void unsubscribe(String cluster, SubscriberDataObserver listener) throws
     public List<InetSocketAddress> lookup(String key) throws Exception {
         String clusterName = getServiceGroup(key);
         if (clusterName == null) {
-            return null;
+            String missingDataId = PREFIX_SERVICE_ROOT + CONFIG_SPLIT_CHAR + PREFIX_SERVICE_MAPPING + key;
+            throw new ConfigNotFoundException("%s configuration item is required", missingDataId);
         }
         if (!LISTENER_SERVICE_MAP.containsKey(clusterName)) {
             CountDownLatch respondRegistries = new CountDownLatch(1);

File: discovery/seata-discovery-zk/src/main/java/io/seata/discovery/registry/zk/ZookeeperRegisterServiceImpl.java
Patch:
@@ -33,6 +33,7 @@
 import io.seata.common.util.StringUtils;
 import io.seata.config.Configuration;
 import io.seata.config.ConfigurationFactory;
+import io.seata.config.exception.ConfigNotFoundException;
 import io.seata.discovery.registry.RegistryService;
 import org.I0Itec.zkclient.IZkChildListener;
 import org.I0Itec.zkclient.IZkStateListener;
@@ -179,7 +180,8 @@ public List<InetSocketAddress> lookup(String key) throws Exception {
         String clusterName = getServiceGroup(key);
 
         if (clusterName == null) {
-            return null;
+            String missingDataId = PREFIX_SERVICE_ROOT + CONFIG_SPLIT_CHAR + PREFIX_SERVICE_MAPPING + key;
+            throw new ConfigNotFoundException("%s configuration item is required", missingDataId);
         }
 
         return doLookup(clusterName);

File: rm-datasource/src/main/java/io/seata/rm/datasource/AbstractConnectionProxy.java
Patch:
@@ -18,7 +18,7 @@
 import io.seata.core.context.RootContext;
 import io.seata.core.model.BranchType;
 import io.seata.rm.datasource.sql.SQLVisitorFactory;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableMetaCacheFactory;
 import io.seata.sqlparser.SQLRecognizer;
 import io.seata.sqlparser.SQLType;

File: rm-datasource/src/main/java/io/seata/rm/datasource/DataCompareUtils.java
Patch:
@@ -20,7 +20,7 @@
 import io.seata.core.model.Result;
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.Row;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.rm.datasource.undo.AbstractUndoLogManager;
 import io.seata.rm.datasource.undo.parser.FastjsonUndoLogParser;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseInsertExecutor.java
Patch:
@@ -34,7 +34,7 @@
 import io.seata.sqlparser.util.ColumnUtils;
 import io.seata.rm.datasource.PreparedStatementProxy;
 import io.seata.rm.datasource.StatementProxy;
-import io.seata.rm.datasource.sql.struct.ColumnMeta;
+import io.seata.sqlparser.struct.ColumnMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.sqlparser.SQLInsertRecognizer;
 import io.seata.sqlparser.SQLRecognizer;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseTransactionalExecutor.java
Patch:
@@ -39,7 +39,7 @@
 import io.seata.rm.datasource.SqlGenerateUtils;
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.sql.struct.Field;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableMetaCacheFactory;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.rm.datasource.undo.SQLUndoLog;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/DeleteExecutor.java
Patch:
@@ -24,7 +24,7 @@
 import io.seata.common.util.StringUtils;
 import io.seata.sqlparser.util.ColumnUtils;
 import io.seata.rm.datasource.StatementProxy;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.sqlparser.SQLDeleteRecognizer;
 import io.seata.sqlparser.SQLRecognizer;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/MultiDeleteExecutor.java
Patch:
@@ -21,7 +21,7 @@
 
 import io.seata.sqlparser.util.ColumnUtils;
 import io.seata.rm.datasource.StatementProxy;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.sqlparser.SQLDeleteRecognizer;
 import io.seata.sqlparser.SQLRecognizer;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/MultiUpdateExecutor.java
Patch:
@@ -35,7 +35,7 @@
 import io.seata.sqlparser.util.ColumnUtils;
 import io.seata.rm.datasource.SqlGenerateUtils;
 import io.seata.rm.datasource.StatementProxy;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.sqlparser.SQLRecognizer;
 import io.seata.sqlparser.SQLUpdateRecognizer;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/mysql/MySQLInsertExecutor.java
Patch:
@@ -36,7 +36,7 @@
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.exec.BaseInsertExecutor;
 import io.seata.rm.datasource.exec.StatementCallback;
-import io.seata.rm.datasource.sql.struct.ColumnMeta;
+import io.seata.sqlparser.struct.ColumnMeta;
 import io.seata.sqlparser.SQLRecognizer;
 import io.seata.sqlparser.struct.Defaultable;
 import io.seata.sqlparser.struct.Null;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/mysql/MySQLInsertOnDuplicateUpdateExecutor.java
Patch:
@@ -41,12 +41,12 @@
 import io.seata.rm.datasource.PreparedStatementProxy;
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.exec.StatementCallback;
-import io.seata.rm.datasource.sql.struct.ColumnMeta;
+import io.seata.sqlparser.struct.ColumnMeta;
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.Row;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
-import io.seata.rm.datasource.sql.struct.IndexMeta;
+import io.seata.sqlparser.struct.IndexMeta;
 import io.seata.rm.datasource.undo.SQLUndoLog;
 import io.seata.sqlparser.SQLInsertRecognizer;
 import io.seata.sqlparser.SQLRecognizer;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/mysql/MySQLUpdateJoinExecutor.java
Patch:
@@ -41,7 +41,7 @@
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.exec.StatementCallback;
 import io.seata.rm.datasource.exec.UpdateExecutor;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.sqlparser.SQLRecognizer;
 import io.seata.sqlparser.SQLUpdateRecognizer;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/postgresql/PostgresqlInsertExecutor.java
Patch:
@@ -23,7 +23,7 @@
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.exec.BaseInsertExecutor;
 import io.seata.rm.datasource.exec.StatementCallback;
-import io.seata.rm.datasource.sql.struct.ColumnMeta;
+import io.seata.sqlparser.struct.ColumnMeta;
 import io.seata.sqlparser.SQLInsertRecognizer;
 import io.seata.sqlparser.SQLRecognizer;
 import io.seata.sqlparser.struct.Defaultable;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/sqlserver/SqlServerDeleteExecutor.java
Patch:
@@ -24,7 +24,7 @@
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.exec.DeleteExecutor;
 import io.seata.rm.datasource.exec.StatementCallback;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.sqlparser.SQLDeleteRecognizer;
 import io.seata.sqlparser.SQLRecognizer;
 import io.seata.sqlparser.util.ColumnUtils;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/sqlserver/SqlServerInsertExecutor.java
Patch:
@@ -33,7 +33,7 @@
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.exec.BaseInsertExecutor;
 import io.seata.rm.datasource.exec.StatementCallback;
-import io.seata.rm.datasource.sql.struct.ColumnMeta;
+import io.seata.sqlparser.struct.ColumnMeta;
 import io.seata.sqlparser.SQLInsertRecognizer;
 import io.seata.sqlparser.SQLRecognizer;
 import io.seata.sqlparser.struct.Defaultable;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/sqlserver/SqlServerMultiDeleteExecutor.java
Patch:
@@ -26,7 +26,7 @@
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.exec.MultiDeleteExecutor;
 import io.seata.rm.datasource.exec.StatementCallback;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.sqlparser.SQLDeleteRecognizer;
 import io.seata.sqlparser.SQLRecognizer;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/sqlserver/SqlServerUpdateExecutor.java
Patch:
@@ -26,7 +26,7 @@
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.exec.StatementCallback;
 import io.seata.rm.datasource.exec.UpdateExecutor;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.sqlparser.SQLRecognizer;
 import io.seata.sqlparser.SQLUpdateRecognizer;
 import io.seata.sqlparser.util.JdbcConstants;

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/TableMetaCacheFactory.java
Patch:
@@ -30,6 +30,7 @@
 import io.seata.common.util.CollectionUtils;
 import io.seata.config.ConfigurationFactory;
 import io.seata.rm.datasource.DataSourceProxy;
+import io.seata.sqlparser.struct.TableMetaCache;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/TableRecords.java
Patch:
@@ -36,6 +36,9 @@
 import io.seata.common.exception.ShouldNeverHappenException;
 import io.seata.rm.datasource.exception.TableMetaException;
 import io.seata.rm.datasource.sql.serial.SerialArray;
+import io.seata.sqlparser.struct.ColumnMeta;
+import io.seata.sqlparser.struct.TableMeta;
+
 import static io.seata.rm.datasource.exec.oracle.OracleJdbcType.TIMESTAMP_WITH_LOCAL_TIME_ZONE;
 import static io.seata.rm.datasource.exec.oracle.OracleJdbcType.TIMESTAMP_WITH_TIME_ZONE;
 import static io.seata.rm.datasource.util.OffsetTimeUtils.convertOffSetTime;

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/cache/AbstractTableMetaCache.java
Patch:
@@ -26,8 +26,8 @@
 import io.seata.common.exception.ShouldNeverHappenException;
 import io.seata.common.util.StringUtils;
 import io.seata.core.context.RootContext;
-import io.seata.rm.datasource.sql.struct.TableMeta;
-import io.seata.rm.datasource.sql.struct.TableMetaCache;
+import io.seata.sqlparser.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMetaCache;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoExecutor.java
Patch:
@@ -42,7 +42,7 @@
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.KeyType;
 import io.seata.rm.datasource.sql.struct.Row;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java
Patch:
@@ -39,7 +39,7 @@
 import io.seata.rm.datasource.ConnectionContext;
 import io.seata.rm.datasource.ConnectionProxy;
 import io.seata.rm.datasource.DataSourceProxy;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableMetaCacheFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/SQLUndoLog.java
Patch:
@@ -16,7 +16,7 @@
 package io.seata.rm.datasource.undo;
 
 
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.sqlparser.SQLType;
 

File: rm-datasource/src/test/java/io/seata/rm/datasource/DataCompareUtilsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.Row;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;

File: rm-datasource/src/test/java/io/seata/rm/datasource/exec/AbstractDMLBaseExecutorTest.java
Patch:
@@ -21,7 +21,7 @@
 import io.seata.rm.datasource.PreparedStatementProxy;
 import io.seata.rm.datasource.exec.mysql.MySQLInsertExecutor;
 import io.seata.rm.datasource.exec.oracle.OracleInsertExecutor;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.sqlparser.SQLInsertRecognizer;
 import io.seata.sqlparser.util.JdbcConstants;

File: rm-datasource/src/test/java/io/seata/rm/datasource/exec/BaseTransactionalExecutorTest.java
Patch:
@@ -21,7 +21,7 @@
 import io.seata.rm.datasource.ConnectionProxy;
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.sql.struct.Field;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.sqlparser.SQLRecognizer;
 import org.junit.jupiter.api.Assertions;

File: rm-datasource/src/test/java/io/seata/rm/datasource/exec/BatchInsertExecutorTest.java
Patch:
@@ -25,7 +25,7 @@
 import io.seata.rm.datasource.ConnectionProxy;
 import io.seata.rm.datasource.PreparedStatementProxy;
 import io.seata.rm.datasource.exec.mysql.MySQLInsertExecutor;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.sqlparser.SQLInsertRecognizer;
 import io.seata.sqlparser.struct.Null;
 import io.seata.sqlparser.util.JdbcConstants;

File: rm-datasource/src/test/java/io/seata/rm/datasource/exec/MariadbInsertExecutorTest.java
Patch:
@@ -24,7 +24,7 @@
 import io.seata.rm.datasource.exec.mysql.MySQLInsertExecutor;
 import io.seata.rm.datasource.mock.MockMariadbDataSource;
 import io.seata.rm.datasource.mock.MockResultSet;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.sqlparser.SQLInsertRecognizer;
 import io.seata.sqlparser.util.JdbcConstants;
 import org.junit.jupiter.api.Assertions;

File: rm-datasource/src/test/java/io/seata/rm/datasource/exec/MySQLInsertExecutorTest.java
Patch:
@@ -34,9 +34,9 @@
 import io.seata.rm.datasource.exec.mysql.MySQLInsertExecutor;
 import io.seata.rm.datasource.mock.MockDataSource;
 import io.seata.rm.datasource.mock.MockResultSet;
-import io.seata.rm.datasource.sql.struct.ColumnMeta;
+import io.seata.sqlparser.struct.ColumnMeta;
 import io.seata.rm.datasource.sql.struct.Row;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.sqlparser.SQLInsertRecognizer;
 import io.seata.sqlparser.struct.Null;

File: rm-datasource/src/test/java/io/seata/rm/datasource/exec/OracleInsertExecutorTest.java
Patch:
@@ -20,8 +20,8 @@
 import io.seata.rm.datasource.PreparedStatementProxy;
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.exec.oracle.OracleInsertExecutor;
-import io.seata.rm.datasource.sql.struct.ColumnMeta;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.ColumnMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.sqlparser.SQLInsertRecognizer;
 import io.seata.sqlparser.struct.Null;
 import io.seata.sqlparser.struct.SqlSequenceExpr;

File: rm-datasource/src/test/java/io/seata/rm/datasource/exec/PostgresqlInsertExecutorTest.java
Patch:
@@ -19,8 +19,8 @@
 import io.seata.rm.datasource.PreparedStatementProxy;
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.exec.postgresql.PostgresqlInsertExecutor;
-import io.seata.rm.datasource.sql.struct.ColumnMeta;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.ColumnMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.sqlparser.SQLInsertRecognizer;
 import io.seata.sqlparser.struct.SqlDefaultExpr;
 import io.seata.sqlparser.util.JdbcConstants;

File: rm-datasource/src/test/java/io/seata/rm/datasource/exec/SqlServerInsertExecutorTest.java
Patch:
@@ -27,8 +27,8 @@
 import io.seata.rm.datasource.PreparedStatementProxy;
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.exec.sqlserver.SqlServerInsertExecutor;
-import io.seata.rm.datasource.sql.struct.ColumnMeta;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.ColumnMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.sqlparser.SQLInsertRecognizer;
 import io.seata.sqlparser.struct.Null;
 import io.seata.sqlparser.struct.SqlSequenceExpr;

File: rm-datasource/src/test/java/io/seata/rm/datasource/mock/MockResultSet.java
Patch:
@@ -26,7 +26,7 @@
 import com.alibaba.druid.util.jdbc.ResultSetBase;
 
 import com.google.common.collect.Lists;
-import io.seata.rm.datasource.sql.struct.ColumnMeta;
+import io.seata.sqlparser.struct.ColumnMeta;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: rm-datasource/src/test/java/io/seata/rm/datasource/mock/MockResultSetMetaData.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.List;
 
 import io.seata.common.util.ReflectionUtil;
-import io.seata.rm.datasource.sql.struct.ColumnMeta;
+import io.seata.sqlparser.struct.ColumnMeta;
 
 /**
  * @author will

File: rm-datasource/src/test/java/io/seata/rm/datasource/sql/struct/ColumnMetaTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.seata.rm.datasource.sql.struct;
 
+import io.seata.sqlparser.struct.ColumnMeta;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: rm-datasource/src/test/java/io/seata/rm/datasource/sql/struct/IndexMetaTest.java
Patch:
@@ -16,6 +16,9 @@
 package io.seata.rm.datasource.sql.struct;
 
 import com.google.common.collect.Lists;
+import io.seata.sqlparser.struct.ColumnMeta;
+import io.seata.sqlparser.struct.IndexMeta;
+import io.seata.sqlparser.struct.IndexType;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: rm-datasource/src/test/java/io/seata/rm/datasource/sql/struct/IndexTypeTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.seata.rm.datasource.sql.struct;
 
+import io.seata.sqlparser.struct.IndexType;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: rm-datasource/src/test/java/io/seata/rm/datasource/sql/struct/TableRecordsTest.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.List;
 
 import io.seata.rm.datasource.exception.TableMetaException;
+import io.seata.sqlparser.struct.TableMeta;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: rm-datasource/src/test/java/io/seata/rm/datasource/sql/struct/cache/OracleTableMetaCacheTest.java
Patch:
@@ -25,8 +25,8 @@
 
 import io.seata.rm.datasource.DataSourceProxy;
 import io.seata.rm.datasource.mock.MockDriver;
-import io.seata.rm.datasource.sql.struct.TableMeta;
-import io.seata.rm.datasource.sql.struct.TableMetaCache;
+import io.seata.sqlparser.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMetaCache;
 import io.seata.rm.datasource.sql.struct.TableMetaCacheFactory;
 import io.seata.sqlparser.util.JdbcConstants;
 

File: rm-datasource/src/test/java/io/seata/rm/datasource/sql/struct/cache/PostgresqlTableMetaCacheTest.java
Patch:
@@ -25,8 +25,8 @@
 
 import io.seata.rm.datasource.DataSourceProxy;
 import io.seata.rm.datasource.mock.MockDriver;
-import io.seata.rm.datasource.sql.struct.TableMeta;
-import io.seata.rm.datasource.sql.struct.TableMetaCache;
+import io.seata.sqlparser.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMetaCache;
 import io.seata.rm.datasource.sql.struct.TableMetaCacheFactory;
 import io.seata.sqlparser.util.JdbcConstants;
 

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/AbstractUndoExecutorTest.java
Patch:
@@ -19,7 +19,7 @@
 import io.seata.sqlparser.SQLType;
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.Row;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/BaseH2Test.java
Patch:
@@ -18,11 +18,11 @@
 import io.seata.common.util.IOUtil;
 import io.seata.rm.datasource.ConnectionProxy;
 import io.seata.rm.datasource.DataSourceProxy;
-import io.seata.rm.datasource.sql.struct.ColumnMeta;
+import io.seata.sqlparser.struct.ColumnMeta;
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.KeyType;
 import io.seata.rm.datasource.sql.struct.Row;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import org.apache.commons.dbcp2.BasicDataSource;
 import org.h2.store.fs.FileUtils;
@@ -31,7 +31,6 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.mockito.Mockito;
 
-import java.sql.Connection;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/BaseUndoLogParserTest.java
Patch:
@@ -25,7 +25,7 @@
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.KeyType;
 import io.seata.rm.datasource.sql.struct.Row;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.sqlparser.SQLType;
 import org.junit.jupiter.api.Assertions;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/BranchUndoLogTest.java
Patch:
@@ -21,7 +21,7 @@
 import io.seata.sqlparser.SQLType;
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.Row;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/UndoExecutorTest.java
Patch:
@@ -56,7 +56,7 @@
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.KeyType;
 import io.seata.rm.datasource.sql.struct.Row;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.sqlparser.util.JdbcConstants;
 import org.junit.jupiter.api.Assertions;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/mysql/MySQLUndoDeleteExecutorTest.java
Patch:
@@ -19,7 +19,7 @@
 import io.seata.rm.datasource.undo.SQLUndoLog;
 import io.seata.sqlparser.SQLType;
 import io.seata.rm.datasource.sql.struct.Row;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
@@ -30,8 +30,6 @@
 import java.util.Arrays;
 import java.util.List;
 
-import static org.mockito.Mockito.when;
-
 /**
  * @author Geng Zhang
  */

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/mysql/MySQLUndoInsertExecutorTest.java
Patch:
@@ -19,7 +19,7 @@
 import io.seata.rm.datasource.undo.SQLUndoLog;
 import io.seata.sqlparser.SQLType;
 import io.seata.rm.datasource.sql.struct.Row;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/mysql/MySQLUndoLogManagerTest.java
Patch:
@@ -35,7 +35,7 @@
 import io.seata.rm.datasource.DataSourceProxy;
 import io.seata.rm.datasource.mock.MockDriver;
 import io.seata.rm.datasource.sql.struct.Row;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.rm.datasource.undo.AbstractUndoLogManager;
 import io.seata.rm.datasource.undo.BranchUndoLog;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/mysql/MySQLUndoUpdateExecutorTest.java
Patch:
@@ -19,7 +19,7 @@
 import io.seata.rm.datasource.undo.SQLUndoLog;
 import io.seata.sqlparser.SQLType;
 import io.seata.rm.datasource.sql.struct.Row;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/oracle/OracleUndoDeleteExecutorTest.java
Patch:
@@ -16,13 +16,12 @@
 package io.seata.rm.datasource.undo.oracle;
 
 import io.seata.rm.datasource.sql.struct.Row;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.rm.datasource.undo.BaseExecutorTest;
 import io.seata.rm.datasource.undo.SQLUndoLog;
 import io.seata.sqlparser.SQLType;
 import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/oracle/OracleUndoInsertExecutorTest.java
Patch:
@@ -16,13 +16,12 @@
 package io.seata.rm.datasource.undo.oracle;
 
 import io.seata.rm.datasource.sql.struct.Row;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.rm.datasource.undo.BaseExecutorTest;
 import io.seata.rm.datasource.undo.SQLUndoLog;
 import io.seata.sqlparser.SQLType;
 import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/oracle/OracleUndoUpdateExecutorTest.java
Patch:
@@ -16,13 +16,12 @@
 package io.seata.rm.datasource.undo.oracle;
 
 import io.seata.rm.datasource.sql.struct.Row;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.rm.datasource.undo.BaseExecutorTest;
 import io.seata.rm.datasource.undo.SQLUndoLog;
 import io.seata.sqlparser.SQLType;
 import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/sqlserver/SqlServerUndoDeleteExecutorTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.List;
 
 import io.seata.rm.datasource.sql.struct.Row;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.rm.datasource.undo.BaseExecutorTest;
 import io.seata.rm.datasource.undo.SQLUndoLog;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/sqlserver/SqlServerUndoInsertExecutorTest.java
Patch:
@@ -25,7 +25,7 @@
 import io.seata.rm.datasource.mock.MockDriver;
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.Row;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.rm.datasource.undo.BaseExecutorTest;
 import io.seata.rm.datasource.undo.SQLUndoLog;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/sqlserver/SqlServerUndoUpdateExecutorTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.List;
 
 import io.seata.rm.datasource.sql.struct.Row;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.rm.datasource.undo.BaseExecutorTest;
 import io.seata.rm.datasource.undo.SQLUndoLog;

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/struct/ColumnMeta.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.sql.struct;
+package io.seata.sqlparser.struct;
 
 import java.util.Objects;
 

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/struct/IndexMeta.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.sql.struct;
+package io.seata.sqlparser.struct;
 
 import java.util.ArrayList;
 import java.util.List;

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/struct/IndexType.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.sql.struct;
+package io.seata.sqlparser.struct;
 
 /**
  * The enum Index type.

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/struct/TableMeta.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.sql.struct;
+package io.seata.sqlparser.struct;
 
 import java.util.ArrayList;
 import java.util.HashMap;

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/struct/TableMetaCache.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.sql.struct;
+package io.seata.sqlparser.struct;
 
 import java.sql.Connection;
 

File: test/src/test/java/io/seata/at/ATModeSupportDataBaseDataTypeTest.java
Patch:
@@ -33,7 +33,7 @@
 import io.seata.rm.datasource.DataCompareUtils;
 import io.seata.rm.datasource.DataSourceManager;
 import io.seata.rm.datasource.DataSourceProxy;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableMetaCacheFactory;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import static io.seata.at.DruidDataSourceUtils.ORACLE;

File: test/src/test/java/io/seata/at/mysql/MysqlUpdateJoinTest.java
Patch:
@@ -29,7 +29,7 @@
 import io.seata.rm.datasource.DataCompareUtils;
 import io.seata.rm.datasource.DataSourceManager;
 import io.seata.rm.datasource.DataSourceProxy;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableMetaCacheFactory;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.server.UUIDGenerator;

File: test/src/test/java/io/seata/at/oracle/SupportOracleDataTypeTest.java
Patch:
@@ -16,7 +16,6 @@
 package io.seata.at.oracle;
 
 import com.alibaba.druid.pool.DruidDataSource;
-import io.seata.common.exception.NotSupportYetException;
 import io.seata.core.context.RootContext;
 import io.seata.core.exception.TransactionException;
 import io.seata.core.model.BranchStatus;
@@ -25,7 +24,7 @@
 import io.seata.rm.datasource.DataCompareUtils;
 import io.seata.rm.datasource.DataSourceManager;
 import io.seata.rm.datasource.DataSourceProxy;
-import io.seata.rm.datasource.sql.struct.TableMeta;
+import io.seata.sqlparser.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableMetaCacheFactory;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import org.junit.jupiter.api.Assertions;
@@ -39,7 +38,6 @@
 import java.sql.Statement;
 
 import static io.seata.at.DruidDataSourceUtils.ORACLE;
-import static io.seata.at.DruidDataSourceUtils.POSTGRESQL;
 import static io.seata.at.DruidDataSourceUtils.createNewDruidDataSource;
 import static io.seata.at.oracle.OracleSqlConstant.BINARY_TABLE_NAME;
 import static io.seata.at.oracle.OracleSqlConstant.BINARY_TYPE;

File: server/src/main/java/io/seata/server/session/GlobalSession.java
Patch:
@@ -761,13 +761,11 @@ public List<BranchSession> getBranchSessions() {
     }
 
     public void asyncCommit() throws TransactionException {
-        this.setStatus(GlobalStatus.AsyncCommitting);
         // [optimize-session-manager] add--> root manager.update
         SessionHolder.getRootSessionManager().updateGlobalSessionStatus(this, GlobalStatus.AsyncCommitting);
     }
 
     public void queueToRetryCommit() throws TransactionException {
-        this.setStatus(GlobalStatus.CommitRetrying);
         // [optimize-session-manager] add--> root manager.update
         SessionHolder.getRootSessionManager().updateGlobalSessionStatus(this,GlobalStatus.CommitRetrying);
     }

File: server/src/main/java/io/seata/server/storage/db/store/LogStoreDataBaseDAO.java
Patch:
@@ -254,7 +254,7 @@ public boolean updateGlobalTransactionDO(GlobalTransactionDO globalTransactionDO
             ps = conn.prepareStatement(sql);
             ps.setInt(1, globalTransactionDO.getStatus());
             ps.setString(2, globalTransactionDO.getXid());
-            ps.setInt(3, expectedStatus.intValue());
+            ps.setInt(3, expectedStatus);
             return ps.executeUpdate() > 0;
         } catch (SQLException e) {
             throw new StoreException(e);

File: server/src/main/java/io/seata/server/session/GlobalSession.java
Patch:
@@ -246,6 +246,7 @@ public void close() throws TransactionException {
     @Override
     public void end() throws TransactionException {
         if (GlobalStatus.isTwoPhaseSuccess(status)) {
+            // TODO: Non AT mode does not need to be unlocked
             // Clean locks first
             clean();
             SessionHolder.getRootSessionManager().onSuccessEnd(this);

File: server/src/main/java/io/seata/server/session/SessionHelper.java
Patch:
@@ -132,6 +132,7 @@ public static void endCommitted(GlobalSession globalSession, boolean retryGlobal
         if (retryGlobal || !DELAY_HANDLE_SESSION) {
             long beginTime = System.currentTimeMillis();
             boolean retryBranch = globalSession.getStatus() == GlobalStatus.CommitRetrying;
+            // TODO: If the globalSession status in the database is Committed, don't set status again
             globalSession.changeGlobalStatus(GlobalStatus.Committed);
             globalSession.end();
             if (!DELAY_HANDLE_SESSION) {

File: server/src/test/java/io/seata/server/store/file/FileTransactionStoreManagerTest.java
Patch:
@@ -35,6 +35,7 @@
 import org.junit.jupiter.api.*;
 import org.mockito.Mockito;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.ApplicationContext;
 
 /**
  * @author ggndnn
@@ -43,7 +44,7 @@
 public class FileTransactionStoreManagerTest {
 
     @BeforeAll
-    public static void init(){
+    public static void init(ApplicationContext context){
         SessionHolder.init(StoreConfig.SessionMode.FILE);
     }
     @AfterAll

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/mysql/MySQLUpdateJoinExecutor.java
Patch:
@@ -257,6 +257,7 @@ protected TableMeta getTableMeta(String tableName) {
      * @param afterImage  the after image
      * @return sql undo log
      */
+    @Override
     protected SQLUndoLog buildUndoItem(TableRecords beforeImage, TableRecords afterImage) {
         SQLType sqlType = sqlRecognizer.getSQLType();
         String tableName = beforeImage.getTableName();

File: rm-datasource/src/test/java/io/seata/rm/datasource/DataSourceProxyTest.java
Patch:
@@ -22,6 +22,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import io.seata.rm.datasource.mock.MockDataSource;
 import io.seata.rm.datasource.mock.MockDriver;
+import io.seata.rm.datasource.sql.struct.TableMetaCacheFactory;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -44,7 +45,7 @@ public void test_constructor() {
     @Test
     public void getResourceIdTest() throws SQLException, NoSuchFieldException, IllegalAccessException {
         // Disable 'DataSourceProxy.tableMetaExecutor' to prevent unit tests from being affected
-        Field enableField = DataSourceProxy.class.getDeclaredField("ENABLE_TABLE_META_CHECKER_ENABLE");
+        Field enableField = TableMetaCacheFactory.class.getDeclaredField("ENABLE_TABLE_META_CHECKER_ENABLE");
         enableField.setAccessible(true);
         enableField.set(null, false);
 

File: tm/src/main/java/io/seata/tm/api/TransactionalTemplate.java
Patch:
@@ -202,8 +202,9 @@ private void commitTransaction(GlobalTransaction tx, TransactionInfo txInfo)
             throws TransactionalExecutor.ExecutionException, TransactionException {
         if (isTimeout(tx.getCreateTime(), txInfo)) {
             // business execution timeout
-            LOGGER.info("TM detected timeout, xid = {}", tx.getXid());
-            tx.rollback();
+            Exception exx = new TmTransactionException(TransactionExceptionCode.TransactionTimeout,
+                String.format("client detected transaction timeout before commit, so change to rollback, xid = %s", tx.getXid()));
+            rollbackTransaction(tx, exx);
             return;
         }
 

File: config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java
Patch:
@@ -104,7 +104,7 @@ private static Configuration buildConfiguration() {
         String configTypeName = CURRENT_FILE_INSTANCE.getConfig(
                 ConfigurationKeys.FILE_ROOT_CONFIG + ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR
                         + ConfigurationKeys.FILE_ROOT_TYPE);
-
+        LOGGER.info("use configuration center type: {}", configTypeName);
         if (StringUtils.isBlank(configTypeName)) {
             throw new NotSupportYetException("config type can not be null");
         }

File: server/src/main/java/io/seata/server/session/SessionHolder.java
Patch:
@@ -99,6 +99,7 @@ public static void init(SessionMode sessionMode) {
         if (null == sessionMode) {
             sessionMode = StoreConfig.getSessionMode();
         }
+        LOGGER.info("use session store mode: {}", sessionMode.getName());
         if (SessionMode.DB.equals(sessionMode)) {
             ROOT_SESSION_MANAGER = EnhancedServiceLoader.load(SessionManager.class, SessionMode.DB.getName());
 

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/annotation/BusinessActionContextParameterDesc.java
Patch:
@@ -15,14 +15,13 @@
  */
 package io.seata.integration.tx.api.annotation;
 
+import java.lang.annotation.Annotation;
+
 import io.seata.common.util.StringUtils;
 import io.seata.rm.tcc.api.BusinessActionContextParameter;
 
-import java.lang.annotation.Annotation;
-
 /**
  * @author leezongjie
- * @date 2022/12/23
  */
 public class BusinessActionContextParameterDesc {
     private String paramName;

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/fence/DefaultCommonFenceHandler.java
Patch:
@@ -15,14 +15,13 @@
  */
 package io.seata.integration.tx.api.fence;
 
-import io.seata.common.executor.Callback;
-
 import java.lang.reflect.Method;
 import java.util.Date;
 
+import io.seata.common.executor.Callback;
+
 /**
  * @author leezongjie
- * @date 2022/12/17
  */
 public class DefaultCommonFenceHandler implements FenceHandler {
 

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/fence/FenceHandler.java
Patch:
@@ -22,7 +22,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/12/17
  */
 public interface FenceHandler {
 

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/interceptor/DefaultInvocationWrapper.java
Patch:
@@ -19,7 +19,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/11/26
  */
 public class DefaultInvocationWrapper implements InvocationWrapper {
     private Object proxy;

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/interceptor/InvocationWrapper.java
Patch:
@@ -19,7 +19,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/11/26
  */
 public interface InvocationWrapper {
 

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/interceptor/SeataInterceptorPosition.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.spring.annotation;
+package io.seata.integration.tx.api.interceptor;
 
 /**
  * The enum Seata interceptor position.

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/interceptor/handler/DefaultInvocationHandler.java
Patch:
@@ -23,7 +23,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/11/26
  */
 public class DefaultInvocationHandler implements InvocationHandler {
 

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/interceptor/parser/DefaultInterfaceParser.java
Patch:
@@ -24,7 +24,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/11/26
  */
 public class DefaultInterfaceParser implements InterfaceParser {
 

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/interceptor/parser/DefaultResourceRegisterParser.java
Patch:
@@ -23,7 +23,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/11/26
  */
 public class DefaultResourceRegisterParser {
 

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/interceptor/parser/DefaultTargetClassParser.java
Patch:
@@ -23,7 +23,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/12/17
  */
 public class DefaultTargetClassParser implements TargetClassParser {
 

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/interceptor/parser/GlobalTransactionalInterceptorParser.java
Patch:
@@ -31,7 +31,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/11/26
  */
 public class GlobalTransactionalInterceptorParser implements InterfaceParser {
 

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/interceptor/parser/InterfaceParser.java
Patch:
@@ -19,7 +19,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/11/26
  */
 public interface InterfaceParser {
 

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/interceptor/parser/RegisterResourceParser.java
Patch:
@@ -17,7 +17,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/12/17
  */
 public interface RegisterResourceParser {
 

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/interceptor/parser/TargetClassParser.java
Patch:
@@ -17,7 +17,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/12/17
  */
 public interface TargetClassParser {
 

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/json/DefaultJsonParser.java
Patch:
@@ -25,7 +25,6 @@
 
 /**
  * @author leezongjie
- * @date 2023/1/13
  */
 public class DefaultJsonParser implements JsonParser {
 

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/json/JsonParser.java
Patch:
@@ -17,7 +17,6 @@
 
 /**
  * @author leezongjie
- * @date 2023/1/13
  */
 public interface JsonParser {
 

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/util/JsonUtil.java
Patch:
@@ -19,7 +19,6 @@
 
 /**
  * @author leezongjie
- * @date 2023/1/13
  */
 public class JsonUtil {
 

File: integration-tx-api/src/main/java/io/seata/integration/tx/api/util/ProxyUtil.java
Patch:
@@ -28,7 +28,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/11/26
  */
 public class ProxyUtil {
 

File: integration-tx-api/src/test/java/io/seata/integration/tx/api/interceptor/parser/GlobalTransactionalInterceptorParserTest.java
Patch:
@@ -21,7 +21,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/12/15
  */
 class GlobalTransactionalInterceptorParserTest {
 

File: integration-tx-api/src/test/java/io/seata/integration/tx/api/interceptor/parser/ProxyUtilsGlobalTransactionalTest.java
Patch:
@@ -27,7 +27,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/12/14
  */
 public class ProxyUtilsGlobalTransactionalTest {
 

File: spring/src/main/java/io/seata/rm/fence/SpringFenceConfig.java
Patch:
@@ -26,7 +26,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/12/17
  */
 public class SpringFenceConfig extends CommonFenceConfig implements InitializingBean {
 

File: spring/src/main/java/io/seata/spring/SpringTargetClassParser.java
Patch:
@@ -20,7 +20,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/12/17
  */
 public class SpringTargetClassParser implements TargetClassParser {
     @Override

File: spring/src/main/java/io/seata/spring/remoting/parser/RemotingFactoryBeanParser.java
Patch:
@@ -24,7 +24,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/11/26
  */
 public class RemotingFactoryBeanParser extends AbstractedRemotingParser {
 

File: tcc/src/main/java/io/seata/rm/tcc/interceptor/parser/TccActionInterceptorParser.java
Patch:
@@ -33,7 +33,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/11/26
  */
 public class TccActionInterceptorParser implements InterfaceParser {
 

File: tcc/src/main/java/io/seata/rm/tcc/json/FastJsonParser.java
Patch:
@@ -20,7 +20,6 @@
 
 /**
  * @author leezongjie
- * @date 2023/1/13
  */
 public class FastJsonParser implements JsonParser {
 

File: tcc/src/main/java/io/seata/rm/tcc/resource/parser/TccRegisterResourceParser.java
Patch:
@@ -36,7 +36,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/12/17
  */
 public class TccRegisterResourceParser implements RegisterResourceParser {
 

File: tcc/src/test/java/io/seata/rm/tcc/NormalTccActionImpl.java
Patch:
@@ -22,7 +22,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/12/9
  */
 public class NormalTccActionImpl implements NormalTccAction {
 

File: tcc/src/test/java/io/seata/rm/tcc/interceptor/ProxyUtilsTccTest.java
Patch:
@@ -36,7 +36,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/12/14
  */
 public class ProxyUtilsTccTest {
 

File: tcc/src/test/java/io/seata/rm/tcc/interceptor/parser/TccActionInterceptorParserTest.java
Patch:
@@ -22,7 +22,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/12/8
  */
 class TccActionInterceptorParserTest {
 

File: tcc/src/test/java/io/seata/rm/tcc/resource/parser/TccRegisterResourceParserTest.java
Patch:
@@ -24,7 +24,6 @@
 
 /**
  * @author leezongjie
- * @date 2022/12/23
  */
 class TccRegisterResourceParserTest {
 

File: tm/src/main/java/io/seata/tm/api/FailureHandlerHolder.java
Patch:
@@ -17,7 +17,6 @@
 
 /**
  * @author leezongjie
- * @date 2023/1/13
  */
 public class FailureHandlerHolder {
 

File: common/src/main/java/io/seata/common/loader/ExtensionDefinition.java
Patch:
@@ -82,7 +82,7 @@ public boolean equals(Object obj) {
         if (!order.equals(other.order)) {
             return false;
         }
-        return !scope.equals(other.scope);
+        return scope.equals(other.scope);
     }
 
     public String getName() {

File: common/src/main/java/io/seata/common/util/LowerCaseLinkHashMap.java
Patch:
@@ -68,7 +68,7 @@ public boolean containsKey(Object o) {
 
     @Override
     public boolean containsValue(Object o) {
-        return targetMap.containsKey(o);
+        return targetMap.containsValue(o);
     }
 
     @Override

File: server/src/main/java/io/seata/server/storage/file/session/FileSessionManager.java
Patch:
@@ -232,6 +232,7 @@ private boolean checkSessionStatus(GlobalSession globalSession) {
             case RollbackFailed:
             case TimeoutRollbacked:
             case TimeoutRollbackFailed:
+            case RollbackRetryTimeout:
             case Finished:
                 return false;
             default:

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoUpdateExecutor.java
Patch:
@@ -37,7 +37,7 @@
 public class MySQLUndoUpdateExecutor extends AbstractUndoExecutor {
 
     /**
-     * UPDATE a SET x = ?, y = ?, z = ? WHERE pk1 in (?) pk2 in (?)
+     * UPDATE a SET x = ?, y = ?, z = ? WHERE pk1 =? and pk2 =?
      */
     private static final String UPDATE_SQL_TEMPLATE = "UPDATE %s SET %s WHERE %s ";
 

File: core/src/main/java/io/seata/core/rpc/processor/server/ServerOnRequestProcessor.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
-import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.LinkedBlockingQueue;

File: server/src/main/java/io/seata/server/console/impl/file/GlobalLockFileServiceImpl.java
Patch:
@@ -80,6 +80,9 @@ public PageResult<GlobalLockVO> query(GlobalLockParam param) {
      * @return the RowLock list
      */
     private Stream<RowLock> filterAndMap(GlobalLockParam param, BranchSession branchSession) {
+        if (CollectionUtils.isEmpty(branchSession.getLockHolder())) {
+            return Stream.empty();
+        }
 
         final String tableName = param.getTableName();
 

File: seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/main/java/io/seata/spring/boot/autoconfigure/properties/ShutdownProperties.java
Patch:
@@ -30,13 +30,13 @@ public class ShutdownProperties {
     /**
      * when destroy server, wait seconds
      */
-    private long wait = DEFAULT_SHUTDOWN_TIMEOUT_SEC;
+    private int wait = DEFAULT_SHUTDOWN_TIMEOUT_SEC;
 
-    public long getWait() {
+    public int getWait() {
         return wait;
     }
 
-    public ShutdownProperties setWait(long wait) {
+    public ShutdownProperties setWait(int wait) {
         this.wait = wait;
         return this;
     }

File: seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/BasePropertiesTest.java
Patch:
@@ -43,8 +43,8 @@ public class BasePropertiesTest {
     protected static final String STR_TEST_EEE = "eee";
     protected static final String STR_TEST_FFF = "fff";
 
-    protected static final long LONG_TEST_ONE = 1L;
-    protected static final long LONG_TEST_TWO = 2L;
+    protected static final int LONG_TEST_ONE = 1;
+    protected static final int LONG_TEST_TWO = 2;
 
     @BeforeEach
     public void setUp() throws IOException {

File: seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/ZooKeeperPropertiesTest.java
Patch:
@@ -49,8 +49,8 @@ public void testConfigZooKeeperProperties() {
         assertEquals(STR_TEST_BBB, currentConfiguration.getConfig("config.zk.serverAddr"));
         assertEquals(STR_TEST_CCC, currentConfiguration.getConfig("config.zk.username"));
         assertEquals(STR_TEST_DDD, currentConfiguration.getConfig("config.zk.password"));
-        assertEquals(LONG_TEST_ONE, currentConfiguration.getLong("config.zk.connectTimeout"));
-        assertEquals(LONG_TEST_TWO, currentConfiguration.getLong("config.zk.sessionTimeout"));
+        assertEquals(LONG_TEST_ONE, currentConfiguration.getInt("config.zk.connectTimeout"));
+        assertEquals(LONG_TEST_TWO, currentConfiguration.getInt("config.zk.sessionTimeout"));
     }
 
 }

File: seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/ServerUndoProperties.java
Patch:
@@ -28,14 +28,14 @@
 @Component
 @ConfigurationProperties(prefix = SERVER_UNDO_PREFIX)
 public class ServerUndoProperties {
-    private int logSaveDays = DEFAULT_SAVE_DAYS;
+    private short logSaveDays = DEFAULT_SAVE_DAYS;
     private long logDeletePeriod = DEFAULT_UNDO_LOG_DELETE_PERIOD;
 
-    public int getLogSaveDays() {
+    public short getLogSaveDays() {
         return logSaveDays;
     }
 
-    public ServerUndoProperties setLogSaveDays(int logSaveDays) {
+    public ServerUndoProperties setLogSaveDays(short logSaveDays) {
         this.logSaveDays = logSaveDays;
         return this;
     }

File: seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreDBProperties.java
Patch:
@@ -42,7 +42,7 @@ public class StoreDBProperties {
     private String lockTable = "lock_table";
     private String distributedLockTable = "distributed_lock";
     private Integer queryLimit = DEFAULT_QUERY_LIMIT;
-    private Integer maxWait = 5000;
+    private Long maxWait = 5000L;
 
     public String getDatasource() {
         return datasource;
@@ -160,11 +160,11 @@ public StoreDBProperties setQueryLimit(Integer queryLimit) {
         return this;
     }
 
-    public Integer getMaxWait() {
+    public Long getMaxWait() {
         return maxWait;
     }
 
-    public StoreDBProperties setMaxWait(Integer maxWait) {
+    public StoreDBProperties setMaxWait(Long maxWait) {
         this.maxWait = maxWait;
         return this;
     }

File: spring/src/main/java/io/seata/spring/annotation/datasource/SeataAutoDataSourceProxyCreator.java
Patch:
@@ -88,6 +88,7 @@ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey)
             DataSource origin = (DataSource) bean;
             SeataDataSourceProxy proxy = buildProxy(origin, dataSourceProxyMode);
             DataSourceProxyHolder.put(origin, proxy);
+            LOGGER.info("Auto proxy data source '{}' by '{}' mode.", beanName, dataSourceProxyMode);
             return enhancer;
         }
 

File: common/src/main/java/io/seata/common/DefaultValues.java
Patch:
@@ -141,7 +141,7 @@ public interface DefaultValues {
      * the constant TM_INTERCEPTOR_ORDER
      */
     int TM_INTERCEPTOR_ORDER = Integer.MIN_VALUE + 1000;
-  
+
     /**
      * the constant TCC_ACTION_INTERCEPTOR_ORDER
      */

File: discovery/seata-discovery-core/src/main/java/io/seata/discovery/loadbalance/ConsistentHashLoadBalance.java
Patch:
@@ -37,13 +37,13 @@
 public class ConsistentHashLoadBalance implements LoadBalance {
 
     /**
-     * The constant LOAD_BALANCE_CONSISTENT_HASH_VISUAL_NODES.
+     * The constant LOAD_BALANCE_CONSISTENT_HASH_VIRTUAL_NODES.
      */
-    public static final String LOAD_BALANCE_CONSISTENT_HASH_VISUAL_NODES = LOAD_BALANCE_PREFIX + "visualNodes";
+    public static final String LOAD_BALANCE_CONSISTENT_HASH_VIRTUAL_NODES = LOAD_BALANCE_PREFIX + "virtualNodes";
     /**
      * The constant VIRTUAL_NODES_NUM.
      */
-    private static final int VIRTUAL_NODES_NUM = ConfigurationFactory.getInstance().getInt(LOAD_BALANCE_CONSISTENT_HASH_VISUAL_NODES, VIRTUAL_NODES_DEFAULT);
+    private static final int VIRTUAL_NODES_NUM = ConfigurationFactory.getInstance().getInt(LOAD_BALANCE_CONSISTENT_HASH_VIRTUAL_NODES, VIRTUAL_NODES_DEFAULT);
 
     @Override
     public <T> T select(List<T> invokers, String xid) {

File: core/src/main/java/io/seata/core/rpc/processor/server/ServerOnRequestProcessor.java
Patch:
@@ -102,7 +102,7 @@ public class ServerOnRequestProcessor implements RemotingProcessor, Disposable {
     private static final long KEEP_ALIVE_TIME = Integer.MAX_VALUE;
     private static final String BATCH_RESPONSE_THREAD_PREFIX = "rpcBatchResponse";
     private static final boolean PARALLEL_REQUEST_HANDLE =
-        ConfigurationFactory.getInstance().getBoolean(ConfigurationKeys.ENABLE_PARALLEL_REQUEST_HANDLE_KEY, false);
+        ConfigurationFactory.getInstance().getBoolean(ConfigurationKeys.ENABLE_PARALLEL_REQUEST_HANDLE_KEY, true);
 
     public ServerOnRequestProcessor(RemotingServer remotingServer, TransactionMessageHandler transactionMessageHandler) {
         this.remotingServer = remotingServer;

File: rm-datasource/src/main/java/io/seata/rm/datasource/xa/ConnectionProxyXA.java
Patch:
@@ -132,7 +132,6 @@ public synchronized void xaCommit(String xid, long branchId, String applicationD
      * @param xid global transaction xid
      * @param branchId transaction branch id
      * @param applicationData application data
-     * @throws SQLException  SQLException
      */
     public synchronized void xaRollback(String xid, long branchId, String applicationData) throws XAException {
         XAXid xaXid = XAXidBuilder.build(xid, branchId);
@@ -209,6 +208,7 @@ public synchronized void commit() throws SQLException {
             throw new SQLException("should NOT commit on an inactive session", SQLSTATE_XA_NOT_END);
         }
         try {
+            // XA End: Success
             end(XAResource.TMSUCCESS);
             long now = System.currentTimeMillis();
             checkTimeout(now);
@@ -277,9 +277,8 @@ private synchronized void start() throws XAException, SQLException {
     }
 
     private synchronized void end(int flags) throws XAException, SQLException {
-        termination();
-        // XA End: Success
         xaResource.end(xaBranchXid, flags);
+        termination();
     }
 
     private void cleanXABranchContext() {

File: spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java
Patch:
@@ -239,7 +239,7 @@ private void registerSpringShutdownHook() {
             ((ConfigurableApplicationContext) applicationContext).registerShutdownHook();
             ShutdownHook.removeRuntimeShutdownHook();
         }
-        ShutdownHook.getInstance().addDisposable(TmNettyRemotingClient.getInstance(applicationId, txServiceGroup));
+        ShutdownHook.getInstance().addDisposable(TmNettyRemotingClient.getInstance(applicationId, txServiceGroup, accessKey, secretKey));
         ShutdownHook.getInstance().addDisposable(RmNettyRemotingClient.getInstance(applicationId, txServiceGroup));
     }
 

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseTransactionalExecutor.java
Patch:
@@ -412,7 +412,7 @@ protected String buildLockKey(TableRecords rowsIncludingPK) {
         sb.append(":");
         int rowSequence = 0;
         List<Map<String, Field>> pksRows = rowsIncludingPK.pkRows();
-        List<String> primaryKeysOnlyName = getTableMeta().getPrimaryKeyOnlyName();
+        List<String> primaryKeysOnlyName = rowsIncludingPK.getTableMeta().getPrimaryKeyOnlyName();
         for (Map<String, Field> rowMap : pksRows) {
             int pkSplitIndex = 0;
             for (String pkName : primaryKeysOnlyName) {

File: seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/SeataSagaAutoConfiguration.java
Patch:
@@ -36,7 +36,6 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
 import org.springframework.boot.context.properties.ConfigurationProperties;
-import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean;
@@ -98,7 +97,6 @@ public StateMachineEngine stateMachineEngine(StateMachineConfig config) {
      */
     @Configuration(proxyBeanMethods = false)
     @ConditionalOnProperty(name = StarterConstants.SAGA_STATE_MACHINE_PREFIX + ".enable-async", havingValue = "true")
-    @EnableConfigurationProperties({SagaAsyncThreadPoolProperties.class})
     static class SagaAsyncThreadPoolExecutorConfiguration {
 
         /**

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/mysql/MySQLInsertOnDuplicateUpdateExecutor.java
Patch:
@@ -363,7 +363,8 @@ public Map<String, ArrayList<Object>> buildImageParameters(SQLInsertRecognizer r
         Map<Integer, ArrayList<Object>> parameters = ((PreparedStatementProxy) statementProxy).getParameters();
         //  VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)   VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
         List<String> insertParamsList = recognizer.getInsertParamsValue();
-        List<String> insertColumns = recognizer.getInsertColumns();
+        List<String> sqlRecognizerColumns = recognizer.getInsertColumns();
+        List<String> insertColumns = CollectionUtils.isEmpty(sqlRecognizerColumns) ? new ArrayList<>(getTableMeta().getAllColumns().keySet()) : sqlRecognizerColumns;
         int paramsindex = 1;
         for (String insertParams : insertParamsList) {
             String[] insertParamsArray = insertParams.split(",");

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/AbstractDMLBaseExecutor.java
Patch:
@@ -48,6 +48,8 @@ public abstract class AbstractDMLBaseExecutor<T, S extends Statement> extends Ba
 
     protected static final String WHERE = " WHERE ";
 
+    protected static final String GROUP_BY = " GROUP BY ";
+
 
     /**
      * Instantiates a new Abstract dml base executor.

File: server/src/main/java/io/seata/server/coordinator/DefaultCoordinator.java
Patch:
@@ -366,7 +366,7 @@ protected void handleRetryRollbacking() {
         SessionHelper.forEach(rollbackingSessions, rollbackingSession -> {
             try {
                 // prevent repeated rollback
-                if (rollbackingSession.getStatus().equals(GlobalStatus.Rollbacking)
+                if (rollbackingSession.getStatus() == GlobalStatus.Rollbacking
                     && !rollbackingSession.isDeadSession()) {
                     // The function of this 'return' is 'continue'.
                     return;
@@ -410,7 +410,7 @@ protected void handleRetryCommitting() {
         SessionHelper.forEach(committingSessions, committingSession -> {
             try {
                 // prevent repeated commit
-                if (committingSession.getStatus().equals(GlobalStatus.Committing)
+                if (committingSession.getStatus() == GlobalStatus.Committing
                     && !committingSession.isDeadSession()) {
                     // The function of this 'return' is 'continue'.
                     return;

File: server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorTest.java
Patch:
@@ -172,7 +172,7 @@ public void test_handleRetryRollbackingTimeOut() throws TransactionException, In
         ReflectionUtil.modifyStaticFinalField(defaultCoordinator.getClass(), "MAX_ROLLBACK_RETRY_TIMEOUT", Duration.ofMillis(10));
         ReflectionUtil.modifyStaticFinalField(defaultCoordinator.getClass(), "ROLLBACK_RETRY_TIMEOUT_UNLOCK_ENABLE", false);
         TimeUnit.MILLISECONDS.sleep(100);
-        defaultCoordinator.timeoutCheck();
+        globalSession.queueToRetryRollback();
         defaultCoordinator.handleRetryRollbacking();
         int lockSize = globalSession.getBranchSessions().get(0).getLockHolder().size();
         try {
@@ -200,7 +200,7 @@ public void test_handleRetryRollbackingTimeOut_unlock() throws TransactionExcept
         ReflectionUtil.modifyStaticFinalField(defaultCoordinator.getClass(), "ROLLBACK_RETRY_TIMEOUT_UNLOCK_ENABLE", true);
         TimeUnit.MILLISECONDS.sleep(100);
 
-        defaultCoordinator.timeoutCheck();
+        globalSession.queueToRetryRollback();
         defaultCoordinator.handleRetryRollbacking();
 
         int lockSize = globalSession.getBranchSessions().get(0).getLockHolder().size();

File: rm-datasource/src/main/java/io/seata/rm/datasource/SqlGenerateUtils.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Map;
 
 import io.seata.rm.datasource.sql.struct.Field;
+import io.seata.sqlparser.util.ColumnUtils;
 
 /**
  * generate sql and set value to sql

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseInsertExecutor.java
Patch:
@@ -31,7 +31,7 @@
 import io.seata.common.exception.ShouldNeverHappenException;
 import io.seata.common.util.CollectionUtils;
 import io.seata.common.util.StringUtils;
-import io.seata.rm.datasource.ColumnUtils;
+import io.seata.sqlparser.util.ColumnUtils;
 import io.seata.rm.datasource.PreparedStatementProxy;
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.sql.struct.ColumnMeta;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseTransactionalExecutor.java
Patch:
@@ -35,7 +35,7 @@
 import io.seata.config.ConfigurationFactory;
 import io.seata.core.constants.ConfigurationKeys;
 import io.seata.core.context.RootContext;
-import io.seata.rm.datasource.ColumnUtils;
+import io.seata.sqlparser.util.ColumnUtils;
 import io.seata.rm.datasource.ConnectionProxy;
 import io.seata.rm.datasource.SqlGenerateUtils;
 import io.seata.rm.datasource.StatementProxy;
@@ -432,7 +432,7 @@ protected TableRecords buildTableRecords(Map<String, List<Object>> pkValuesMap)
         List<String> insertColumns = recognizer.getInsertColumns();
         if (ONLY_CARE_UPDATE_COLUMNS && CollectionUtils.isNotEmpty(insertColumns)) {
             Set<String> columns = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);
-            columns.addAll(recognizer.getInsertColumns());
+            columns.addAll(recognizer.getInsertColumnsIsSimplified());
             columns.addAll(pkColumnNameList);
             for (String columnName : columns) {
                 selectSQLJoin.add(columnName);

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/DeleteExecutor.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.StringJoiner;
 
 import io.seata.common.util.StringUtils;
-import io.seata.rm.datasource.ColumnUtils;
+import io.seata.sqlparser.util.ColumnUtils;
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/MultiDeleteExecutor.java
Patch:
@@ -19,7 +19,7 @@
 import io.seata.common.util.StringUtils;
 
 
-import io.seata.rm.datasource.ColumnUtils;
+import io.seata.sqlparser.util.ColumnUtils;
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/MultiUpdateExecutor.java
Patch:
@@ -32,7 +32,7 @@
 import io.seata.config.ConfigurationFactory;
 import io.seata.core.constants.ConfigurationKeys;
 import io.seata.common.DefaultValues;
-import io.seata.rm.datasource.ColumnUtils;
+import io.seata.sqlparser.util.ColumnUtils;
 import io.seata.rm.datasource.SqlGenerateUtils;
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.sql.struct.TableMeta;
@@ -88,7 +88,7 @@ protected TableRecords beforeImage() throws SQLException {
                 throw new NotSupportYetException("Multi update SQL with orderBy condition is not support yet !");
             }
 
-            List<String> updateColumns = sqlUpdateRecognizer.getUpdateColumns();
+            List<String> updateColumns = sqlUpdateRecognizer.getUpdateColumnsIsSimplified();
             updateColumnsSet.addAll(updateColumns);
             if (noWhereCondition) {
                 continue;
@@ -155,7 +155,7 @@ private String buildAfterImageSQL(TableMeta tableMeta, TableRecords beforeImage)
         for (SQLRecognizer recognizer : sqlRecognizers) {
             sqlRecognizer = recognizer;
             SQLUpdateRecognizer sqlUpdateRecognizer = (SQLUpdateRecognizer) sqlRecognizer;
-            updateColumnsSet.addAll(sqlUpdateRecognizer.getUpdateColumns());
+            updateColumnsSet.addAll(sqlUpdateRecognizer.getUpdateColumnsIsSimplified());
         }
         StringBuilder prefix = new StringBuilder("SELECT ");
         String suffix = " FROM " + getFromTableInSQL() + " WHERE " + SqlGenerateUtils.buildWhereConditionByPKs(tableMeta.getPrimaryKeyOnlyName(), beforeImage.pkRows().size(), getDbType());

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/UpdateExecutor.java
Patch:
@@ -29,7 +29,7 @@
 import io.seata.config.ConfigurationFactory;
 import io.seata.core.constants.ConfigurationKeys;
 import io.seata.common.DefaultValues;
-import io.seata.rm.datasource.ColumnUtils;
+import io.seata.sqlparser.util.ColumnUtils;
 import io.seata.rm.datasource.SqlGenerateUtils;
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.sql.struct.TableMeta;
@@ -73,7 +73,7 @@ protected TableRecords beforeImage() throws SQLException {
 
     private String buildBeforeImageSQL(TableMeta tableMeta, ArrayList<List<Object>> paramAppenderList) {
         SQLUpdateRecognizer recognizer = (SQLUpdateRecognizer) sqlRecognizer;
-        List<String> updateColumns = recognizer.getUpdateColumns();
+        List<String> updateColumns = recognizer.getUpdateColumnsIsSimplified();
         StringBuilder prefix = new StringBuilder("SELECT ");
         StringBuilder suffix = new StringBuilder(" FROM ").append(getFromTableInSQL());
         String whereCondition = buildWhereCondition(recognizer, paramAppenderList);
@@ -136,7 +136,7 @@ private String buildAfterImageSQL(TableMeta tableMeta, TableRecords beforeImage)
         StringJoiner selectSQLJoiner = new StringJoiner(", ", prefix.toString(), suffix);
         if (ONLY_CARE_UPDATE_COLUMNS) {
             SQLUpdateRecognizer recognizer = (SQLUpdateRecognizer) sqlRecognizer;
-            List<String> updateColumns = recognizer.getUpdateColumns();
+            List<String> updateColumns = recognizer.getUpdateColumnsIsSimplified();
             if (!containsPK(updateColumns)) {
                 selectSQLJoiner.add(getColumnNamesInSQL(tableMeta.getEscapePkNameList(getDbType())));
             }

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/TableMeta.java
Patch:
@@ -26,7 +26,7 @@
 import io.seata.common.exception.NotSupportYetException;
 import io.seata.common.util.CollectionUtils;
 import io.seata.common.util.LowerCaseLinkHashMap;
-import io.seata.rm.datasource.ColumnUtils;
+import io.seata.sqlparser.util.ColumnUtils;
 
 /**
  * The type Table meta.

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/cache/MysqlTableMetaCache.java
Patch:
@@ -25,7 +25,7 @@
 import io.seata.common.exception.NotSupportYetException;
 import io.seata.common.exception.ShouldNeverHappenException;
 import io.seata.common.loader.LoadLevel;
-import io.seata.rm.datasource.ColumnUtils;
+import io.seata.sqlparser.util.ColumnUtils;
 import io.seata.rm.datasource.sql.struct.ColumnMeta;
 import io.seata.rm.datasource.sql.struct.IndexMeta;
 import io.seata.rm.datasource.sql.struct.IndexType;

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoExecutor.java
Patch:
@@ -34,7 +34,7 @@
 import io.seata.config.ConfigurationFactory;
 import io.seata.core.constants.ConfigurationKeys;
 import io.seata.core.model.Result;
-import io.seata.rm.datasource.ColumnUtils;
+import io.seata.sqlparser.util.ColumnUtils;
 import io.seata.rm.datasource.DataCompareUtils;
 import io.seata.rm.datasource.SqlGenerateUtils;
 import io.seata.rm.datasource.sql.serial.SerialArray;

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoDeleteExecutor.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.seata.common.exception.ShouldNeverHappenException;
 import io.seata.common.util.CollectionUtils;
-import io.seata.rm.datasource.ColumnUtils;
+import io.seata.sqlparser.util.ColumnUtils;
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.Row;
 import io.seata.rm.datasource.sql.struct.TableRecords;

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoUpdateExecutor.java
Patch:
@@ -20,7 +20,7 @@
 
 import io.seata.common.exception.ShouldNeverHappenException;
 import io.seata.common.util.CollectionUtils;
-import io.seata.rm.datasource.ColumnUtils;
+import io.seata.sqlparser.util.ColumnUtils;
 import io.seata.rm.datasource.SqlGenerateUtils;
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.Row;

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/keyword/MySQLKeywordChecker.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.stream.Collectors;
 
 import io.seata.common.loader.LoadLevel;
-import io.seata.rm.datasource.undo.KeywordChecker;
+import io.seata.sqlparser.KeywordChecker;
 import io.seata.sqlparser.util.JdbcConstants;
 
 /**

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/oracle/OracleUndoDeleteExecutor.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.seata.common.exception.ShouldNeverHappenException;
 import io.seata.common.util.CollectionUtils;
-import io.seata.rm.datasource.ColumnUtils;
+import io.seata.sqlparser.util.ColumnUtils;
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.Row;
 import io.seata.rm.datasource.sql.struct.TableRecords;

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/oracle/OracleUndoUpdateExecutor.java
Patch:
@@ -20,7 +20,7 @@
 
 import io.seata.common.exception.ShouldNeverHappenException;
 import io.seata.common.util.CollectionUtils;
-import io.seata.rm.datasource.ColumnUtils;
+import io.seata.sqlparser.util.ColumnUtils;
 import io.seata.rm.datasource.SqlGenerateUtils;
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.Row;

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/oracle/keyword/OracleKeywordChecker.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.stream.Collectors;
 
 import io.seata.common.loader.LoadLevel;
-import io.seata.rm.datasource.undo.KeywordChecker;
+import io.seata.sqlparser.KeywordChecker;
 import io.seata.sqlparser.util.JdbcConstants;
 
 /**

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/postgresql/PostgresqlUndoDeleteExecutor.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.seata.common.exception.ShouldNeverHappenException;
 import io.seata.common.util.CollectionUtils;
-import io.seata.rm.datasource.ColumnUtils;
+import io.seata.sqlparser.util.ColumnUtils;
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.Row;
 import io.seata.rm.datasource.sql.struct.TableRecords;

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/postgresql/PostgresqlUndoUpdateExecutor.java
Patch:
@@ -20,7 +20,7 @@
 
 import io.seata.common.exception.ShouldNeverHappenException;
 import io.seata.common.util.CollectionUtils;
-import io.seata.rm.datasource.ColumnUtils;
+import io.seata.sqlparser.util.ColumnUtils;
 import io.seata.rm.datasource.SqlGenerateUtils;
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.Row;

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/postgresql/keyword/PostgresqlKeywordChecker.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.stream.Collectors;
 
 import io.seata.common.loader.LoadLevel;
-import io.seata.rm.datasource.undo.KeywordChecker;
+import io.seata.sqlparser.KeywordChecker;
 import io.seata.sqlparser.util.JdbcConstants;
 
 /**

File: rm-datasource/src/test/java/io/seata/rm/datasource/ColumnUtilsTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.seata.rm.datasource;
 
+import io.seata.sqlparser.util.ColumnUtils;
 import io.seata.sqlparser.util.JdbcConstants;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/KeywordCheckerFactoryTest.java
Patch:
@@ -16,6 +16,7 @@
 package io.seata.rm.datasource.undo;
 
 import io.seata.common.loader.EnhancedServiceNotFoundException;
+import io.seata.sqlparser.KeywordCheckerFactory;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/mysql/keyword/MySQLKeywordCheckerTest.java
Patch:
@@ -15,11 +15,10 @@
  */
 package io.seata.rm.datasource.undo.mysql.keyword;
 
-import java.sql.SQLException;
 import java.sql.Types;
 
-import io.seata.rm.datasource.undo.KeywordChecker;
-import io.seata.rm.datasource.undo.KeywordCheckerFactory;
+import io.seata.sqlparser.KeywordChecker;
+import io.seata.sqlparser.KeywordCheckerFactory;
 import io.seata.rm.datasource.undo.SQLUndoLog;
 import io.seata.rm.datasource.undo.mysql.MySQLUndoDeleteExecutor;
 import io.seata.rm.datasource.undo.mysql.MySQLUndoInsertExecutor;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/oracle/keyword/OracleKeywordCheckerTest.java
Patch:
@@ -18,8 +18,8 @@
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
-import io.seata.rm.datasource.undo.KeywordChecker;
-import io.seata.rm.datasource.undo.KeywordCheckerFactory;
+import io.seata.sqlparser.KeywordChecker;
+import io.seata.sqlparser.KeywordCheckerFactory;
 import io.seata.sqlparser.util.JdbcConstants;
 
 /**

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/postgresql/keyword/PostgresqlKeywordCheckerTest.java
Patch:
@@ -18,8 +18,8 @@
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
-import io.seata.rm.datasource.undo.KeywordChecker;
-import io.seata.rm.datasource.undo.KeywordCheckerFactory;
+import io.seata.sqlparser.KeywordChecker;
+import io.seata.sqlparser.KeywordCheckerFactory;
 import io.seata.sqlparser.util.JdbcConstants;
 
 /**

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/KeywordChecker.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.undo;
+package io.seata.sqlparser;
 
 /**
  * The interface Keyword checker.

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/KeywordCheckerFactory.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.undo;
+package io.seata.sqlparser;
 
 import io.seata.common.loader.EnhancedServiceLoader;
 import io.seata.common.util.CollectionUtils;

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/parser/KryoSerializerFactory.java
Patch:
@@ -47,6 +47,7 @@ public class KryoSerializerFactory {
         @Override
         public Kryo create() {
             Kryo kryo = new Kryo();
+            kryo.setReferences(true);
             kryo.setRegistrationRequired(false);
 
             for (Map.Entry<Class, Serializer> entry : TYPE_MAP.entrySet()) {

File: serializer/seata-serializer-kryo/src/main/java/io/seata/serializer/kryo/KryoSerializerFactory.java
Patch:
@@ -48,6 +48,7 @@ public class KryoSerializerFactory {
         @Override
         protected Kryo create() {
             Kryo kryo = new Kryo();
+            kryo.setReferences(true);
             kryo.setRegistrationRequired(false);
 
             // register serializer

File: saga/seata-saga-engine/src/main/java/io/seata/saga/engine/pcext/interceptors/ServiceTaskHandlerInterceptor.java
Patch:
@@ -264,6 +264,7 @@ public void postProcess(ProcessContext context, Exception exp) throws EngineExec
                 if (stateMachineInstance.getStateMachine().isPersist() && state.isPersist()
                     && stateMachineConfig.getStateLogStore() != null) {
 
+                    stateInstance.setGmtEnd(new Date());
                     stateMachineConfig.getStateLogStore().recordStateFinished(stateInstance, context);
                 }
 

File: metrics/seata-metrics-core/src/main/java/io/seata/metrics/exporter/ExporterFactory.java
Patch:
@@ -26,6 +26,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import static io.seata.common.DefaultValues.DEFAULT_METRICS_EXPORTER_LIST;
+
 /**
  * Exporter Factory for load all configured exporters
  *
@@ -37,7 +39,7 @@ public class ExporterFactory {
     public static List<Exporter> getInstanceList() {
         List<Exporter> exporters = new ArrayList<>();
         String exporterTypeNameList = ConfigurationFactory.getInstance().getConfig(
-            ConfigurationKeys.METRICS_PREFIX + ConfigurationKeys.METRICS_EXPORTER_LIST, null);
+            ConfigurationKeys.METRICS_PREFIX + ConfigurationKeys.METRICS_EXPORTER_LIST, DEFAULT_METRICS_EXPORTER_LIST);
         if (!StringUtils.isNullOrEmpty(exporterTypeNameList)) {
             String[] exporterTypeNames = exporterTypeNameList.split(",");
             for (String exporterTypeName : exporterTypeNames) {

File: metrics/seata-metrics-core/src/main/java/io/seata/metrics/registry/RegistryFactory.java
Patch:
@@ -23,6 +23,8 @@
 import io.seata.config.ConfigurationFactory;
 import io.seata.core.constants.ConfigurationKeys;
 
+import static io.seata.common.DefaultValues.DEFAULT_METRICS_REGISTRY_TYPE;
+
 /**
  * Registry Factory for load configured metrics registry
  *
@@ -32,7 +34,7 @@ public class RegistryFactory {
     public static Registry getInstance() {
         RegistryType registryType;
         String registryTypeName = ConfigurationFactory.getInstance().getConfig(
-            ConfigurationKeys.METRICS_PREFIX + ConfigurationKeys.METRICS_REGISTRY_TYPE, null);
+            ConfigurationKeys.METRICS_PREFIX + ConfigurationKeys.METRICS_REGISTRY_TYPE, DEFAULT_METRICS_REGISTRY_TYPE);
         if (!StringUtils.isNullOrEmpty(registryTypeName)) {
             try {
                 registryType = RegistryType.getType(registryTypeName);

File: metrics/seata-metrics-exporter-prometheus/src/main/java/io/seata/metrics/exporter/prometheus/PrometheusExporter.java
Patch:
@@ -30,6 +30,7 @@
 import io.seata.metrics.exporter.Exporter;
 import io.seata.metrics.registry.Registry;
 
+import static io.seata.common.DefaultValues.DEFAULT_PROMETHEUS_PORT;
 import static io.seata.core.constants.ConfigurationKeys.METRICS_EXPORTER_PROMETHEUS_PORT;
 
 /**
@@ -46,7 +47,7 @@ public class PrometheusExporter extends Collector implements Collector.Describab
 
     public PrometheusExporter() throws IOException {
         int port = ConfigurationFactory.getInstance().getInt(
-            ConfigurationKeys.METRICS_PREFIX + METRICS_EXPORTER_PROMETHEUS_PORT, 9898);
+            ConfigurationKeys.METRICS_PREFIX + METRICS_EXPORTER_PROMETHEUS_PORT, DEFAULT_PROMETHEUS_PORT);
         this.server = new HTTPServer(port, true);
         this.register();
     }

File: seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreFileProperties.java
Patch:
@@ -18,6 +18,7 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.stereotype.Component;
 
+import static io.seata.common.DefaultValues.DEFAULT_SERVICE_SESSION_RELOAD_READ_SIZE;
 import static io.seata.spring.boot.autoconfigure.StarterConstants.STORE_FILE_PREFIX;
 
 /**
@@ -30,7 +31,7 @@ public class StoreFileProperties {
     private Integer maxBranchSessionSize = 16384;
     private Integer maxGlobalSessionSize = 512;
     private Integer fileWriteBufferCacheSize = 16384;
-    private Integer sessionReloadReadSize = 100;
+    private Integer sessionReloadReadSize = DEFAULT_SERVICE_SESSION_RELOAD_READ_SIZE;
     private String flushDiskMode = "async";
 
     public String getDir() {

File: server/src/main/java/io/seata/server/ServerApplicationListener.java
Patch:
@@ -34,6 +34,7 @@
 import static io.seata.common.ConfigurationKeys.STORE_MODE;
 import static io.seata.common.ConfigurationKeys.STORE_SESSION_MODE;
 import static io.seata.common.Constants.OBJECT_KEY_SPRING_CONFIGURABLE_ENVIRONMENT;
+import static io.seata.common.DefaultValues.SERVER_DEFAULT_STORE_MODE;
 import static io.seata.common.DefaultValues.SERVICE_OFFSET_SPRING_BOOT;
 import static io.seata.core.constants.ConfigurationKeys.ENV_SEATA_PORT_KEY;
 import static io.seata.core.constants.ConfigurationKeys.SERVER_SERVICE_PORT_CAMEL;
@@ -64,9 +65,9 @@ public void onApplicationEvent(ApplicationEvent event) {
         Configuration config  = ConfigurationFactory.getInstance();
         // Load by priority
         System.setProperty("sessionMode",
-                config.getConfig(STORE_SESSION_MODE, config.getConfig(STORE_MODE, "file")));
+                config.getConfig(STORE_SESSION_MODE, config.getConfig(STORE_MODE, SERVER_DEFAULT_STORE_MODE)));
         System.setProperty("lockMode",
-                config.getConfig(STORE_LOCK_MODE, config.getConfig(STORE_MODE, "file")));
+                config.getConfig(STORE_LOCK_MODE, config.getConfig(STORE_MODE, SERVER_DEFAULT_STORE_MODE)));
 
         String[] args = environmentPreparedEvent.getArgs();
 

File: server/src/main/java/io/seata/server/metrics/MetricsManager.java
Patch:
@@ -25,6 +25,8 @@
 import io.seata.metrics.registry.RegistryFactory;
 import io.seata.server.event.EventBusManager;
 
+import static io.seata.common.DefaultValues.DEFAULT_METRICS_ENABLED;
+
 /**
  * Metrics manager for init
  *
@@ -47,7 +49,7 @@ public Registry getRegistry() {
 
     public void init() {
         boolean enabled = ConfigurationFactory.getInstance().getBoolean(
-            ConfigurationKeys.METRICS_PREFIX + ConfigurationKeys.METRICS_ENABLED, true);
+            ConfigurationKeys.METRICS_PREFIX + ConfigurationKeys.METRICS_ENABLED, DEFAULT_METRICS_ENABLED);
         if (enabled) {
             registry = RegistryFactory.getInstance();
             if (registry != null) {

File: server/src/main/java/io/seata/server/session/SessionHelper.java
Patch:
@@ -37,6 +37,8 @@
 import org.slf4j.LoggerFactory;
 import org.slf4j.MDC;
 
+import static io.seata.common.DefaultValues.DEFAULT_ENABLE_BRANCH_ASYNC_REMOVE;
+
 /**
  * The type Session helper.
  *
@@ -51,7 +53,7 @@ public class SessionHelper {
     private static final Configuration CONFIG = ConfigurationFactory.getInstance();
 
     private static final Boolean ENABLE_BRANCH_ASYNC_REMOVE = CONFIG.getBoolean(
-            ConfigurationKeys.ENABLE_BRANCH_ASYNC_REMOVE, false);
+            ConfigurationKeys.ENABLE_BRANCH_ASYNC_REMOVE, DEFAULT_ENABLE_BRANCH_ASYNC_REMOVE);
 
     /**
      * The instance of DefaultCoordinator

File: server/src/main/java/io/seata/server/session/SessionHolder.java
Patch:
@@ -40,6 +40,7 @@
 import io.seata.server.lock.distributed.DistributedLockerFactory;
 import io.seata.core.store.StoreMode;
 
+import static io.seata.common.DefaultValues.DEFAULT_DISTRIBUTED_LOCK_EXPIRE_TIME;
 import static io.seata.common.DefaultValues.SERVER_DEFAULT_STORE_MODE;
 
 /**
@@ -80,7 +81,7 @@ public class SessionHolder {
     /**
      * The redis distributed lock expire time
      */
-    private static long DISTRIBUTED_LOCK_EXPIRE_TIME = CONFIG.getLong(ConfigurationKeys.DISTRIBUTED_LOCK_EXPIRE_TIME, 10000);
+    private static long DISTRIBUTED_LOCK_EXPIRE_TIME = CONFIG.getLong(ConfigurationKeys.DISTRIBUTED_LOCK_EXPIRE_TIME, DEFAULT_DISTRIBUTED_LOCK_EXPIRE_TIME);
 
     private static SessionManager ROOT_SESSION_MANAGER;
     private static SessionManager ASYNC_COMMITTING_SESSION_MANAGER;

File: server/src/main/java/io/seata/server/storage/file/session/FileSessionManager.java
Patch:
@@ -49,6 +49,8 @@
 import io.seata.server.store.SessionStorable;
 import io.seata.server.store.TransactionStoreManager;
 
+import static io.seata.common.DefaultValues.DEFAULT_SERVICE_SESSION_RELOAD_READ_SIZE;
+
 
 /**
  * The type File based session manager.
@@ -59,7 +61,7 @@
 public class FileSessionManager extends AbstractSessionManager implements Reloadable {
 
     private static final int READ_SIZE = ConfigurationFactory.getInstance().getInt(
-        ConfigurationKeys.SERVICE_SESSION_RELOAD_READ_SIZE, 100);
+        ConfigurationKeys.SERVICE_SESSION_RELOAD_READ_SIZE, DEFAULT_SERVICE_SESSION_RELOAD_READ_SIZE);
     /**
      * The Session map.
      */

File: core/src/main/java/io/seata/core/rpc/netty/NettyServerBootstrap.java
Patch:
@@ -167,7 +167,6 @@ public void initChannel(SocketChannel ch) {
 
         try {
             this.serverBootstrap.bind(getListenPort()).sync();
-            XID.setPort(getListenPort());
             LOGGER.info("Server started, service listen port: {}", getListenPort());
             InetSocketAddress address = new InetSocketAddress(XID.getIpAddress(), XID.getPort());
             for (RegistryService registryService : MultiRegistryFactory.getInstances()) {

File: common/src/main/java/io/seata/common/ConfigurationKeys.java
Patch:
@@ -370,7 +370,7 @@ public interface ConfigurationKeys {
     /**
      * The constant ASYN_COMMITING_RETRY_PERIOD.
      */
-    String ASYN_COMMITING_RETRY_PERIOD = RECOVERY_PREFIX + "asynCommittingRetryPeriod";
+    String ASYNC_COMMITING_RETRY_PERIOD = RECOVERY_PREFIX + "asyncCommittingRetryPeriod";
 
     /**
      * The constant ROLLBACKING_RETRY_PERIOD.

File: server/src/main/java/io/seata/server/coordinator/DefaultCoordinator.java
Patch:
@@ -95,7 +95,7 @@ public class DefaultCoordinator extends AbstractTCInboundHandler implements Tran
      * The constant ASYNC_COMMITTING_RETRY_PERIOD.
      */
     protected static final long ASYNC_COMMITTING_RETRY_PERIOD = CONFIG.getLong(
-        ConfigurationKeys.ASYN_COMMITING_RETRY_PERIOD, 1000L);
+        ConfigurationKeys.ASYNC_COMMITING_RETRY_PERIOD, 1000L);
 
     /**
      * The constant ROLLBACKING_RETRY_PERIOD.

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/ExecuteTemplate.java
Patch:
@@ -25,7 +25,7 @@
 import io.seata.core.context.RootContext;
 import io.seata.core.model.BranchType;
 import io.seata.rm.datasource.StatementProxy;
-import io.seata.rm.datasource.exec.mysql.MySQLInsertOrUpdateExecutor;
+import io.seata.rm.datasource.exec.mysql.MySQLInsertOnDuplicateUpdateExecutor;
 import io.seata.rm.datasource.sql.SQLVisitorFactory;
 import io.seata.sqlparser.SQLRecognizer;
 import io.seata.sqlparser.util.JdbcConstants;
@@ -107,7 +107,7 @@ public static <T, S extends Statement> T execute(List<SQLRecognizer> sqlRecogniz
                             case JdbcConstants.MYSQL:
                             case JdbcConstants.MARIADB:
                                 executor =
-                                    new MySQLInsertOrUpdateExecutor(statementProxy, statementCallback, sqlRecognizer);
+                                    new MySQLInsertOnDuplicateUpdateExecutor(statementProxy, statementCallback, sqlRecognizer);
                                 break;
                             default:
                                 throw new NotSupportYetException(dbType + " not support to INSERT_ON_DUPLICATE_UPDATE");

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoExecutor.java
Patch:
@@ -172,7 +172,7 @@ protected void undoPrepare(PreparedStatement undoPST, ArrayList<Field> undoValue
                 } else {
                     undoPST.setObject(undoIndex, null);
                 }
-            } else if (type == JDBCType.CLOB.getVendorTypeNumber()) {
+            } else if (type == JDBCType.CLOB.getVendorTypeNumber() || type == JDBCType.NCLOB.getVendorTypeNumber()) {
                 SerialClob serialClob = (SerialClob) value;
                 if (serialClob != null) {
                     undoPST.setClob(undoIndex, serialClob.getCharacterStream());

File: server/src/main/java/io/seata/server/metrics/MetricsManager.java
Patch:
@@ -47,7 +47,7 @@ public Registry getRegistry() {
 
     public void init() {
         boolean enabled = ConfigurationFactory.getInstance().getBoolean(
-            ConfigurationKeys.METRICS_PREFIX + ConfigurationKeys.METRICS_ENABLED, false);
+            ConfigurationKeys.METRICS_PREFIX + ConfigurationKeys.METRICS_ENABLED, true);
         if (enabled) {
             registry = RegistryFactory.getInstance();
             if (registry != null) {

File: rm-datasource/src/test/java/io/seata/rm/datasource/exec/AbstractDMLBaseExecutorTest.java
Patch:
@@ -142,6 +142,8 @@ public void testExecuteAutoCommitFalse() throws Exception {
         Mockito.when(executor.getDbType()).thenReturn(JdbcConstants.ORACLE);
         Mockito.doReturn(tableMeta).when(executor).getTableMeta();
         Mockito.when(tableMeta.getPrimaryKeyOnlyName()).thenReturn(Collections.singletonList("id"));
+        TableRecords tableRecords = Mockito.mock(TableRecords.class);
+        Mockito.doReturn(tableRecords).when(executor).afterImage(Mockito.any());
         Assertions.assertNull(executor.executeAutoCommitFalse(null));
     }
 

File: spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java
Patch:
@@ -160,7 +160,7 @@ public Object invoke(final MethodInvocation methodInvocation) throws Throwable {
                     if (globalTransactionalAnnotation != null) {
                         transactional = new AspectTransactional(globalTransactionalAnnotation.timeoutMills(),
                             globalTransactionalAnnotation.name(), globalTransactionalAnnotation.rollbackFor(),
-                            globalTransactionalAnnotation.noRollbackForClassName(),
+                            globalTransactionalAnnotation.rollbackForClassName(),
                             globalTransactionalAnnotation.noRollbackFor(),
                             globalTransactionalAnnotation.noRollbackForClassName(),
                             globalTransactionalAnnotation.propagation(),

File: core/src/main/java/io/seata/core/rpc/netty/AbstractNettyRemotingClient.java
Patch:
@@ -375,7 +375,8 @@ public void run() {
                         for (Integer msgId : mergeMessage.msgIds) {
                             MessageFuture messageFuture = futures.remove(msgId);
                             if (messageFuture != null) {
-                                messageFuture.setResultMessage(null);
+                                messageFuture.setResultMessage(
+                                    new RuntimeException(String.format("%s is unreachable", address), e));
                             }
                         }
                         LOGGER.error("client merge call failed: {}", e.getMessage(), e);

File: core/src/main/java/io/seata/core/store/db/sql/distributed/lock/BaseDistributedLockSql.java
Patch:
@@ -30,7 +30,7 @@ public class BaseDistributedLockSql implements DistributedLockSql {
             + " WHERE " + ServerTableColumnsName.DISTRIBUTED_LOCK_KEY + " = ? FOR UPDATE";
 
     protected static final String INSERT_DISTRIBUTED_LOCK_SQL = "INSERT INTO " + DISTRIBUTED_LOCK_TABLE_PLACE_HOLD + "("
-            + ALL_COLUMNS + ") VALUE (?, ?, ?)";
+            + ALL_COLUMNS + ") VALUES (?, ?, ?)";
 
     protected static final String UPDATE_DISTRIBUTED_LOCK_SQL = "UPDATE " + DISTRIBUTED_LOCK_TABLE_PLACE_HOLD + " SET "
             + ServerTableColumnsName.DISTRIBUTED_LOCK_VALUE + "=?, " + ServerTableColumnsName.DISTRIBUTED_LOCK_EXPIRE + "=?"

File: core/src/main/java/io/seata/core/rpc/netty/AbstractNettyRemotingClient.java
Patch:
@@ -105,6 +105,7 @@ public abstract class AbstractNettyRemotingClient extends AbstractNettyRemoting
     private final NettyPoolKey.TransactionRole transactionRole;
     private ExecutorService mergeSendExecutorService;
     private TransactionMessageHandler transactionMessageHandler;
+    protected volatile boolean enableClientBatchSendRequest;
 
     @Override
     public void init() {

File: seata-spring-autoconfigure/seata-spring-autoconfigure-client/src/main/java/io/seata/spring/boot/autoconfigure/SeataTCCFenceAutoConfiguration.java
Patch:
@@ -36,15 +36,15 @@
  * @author kaka2code
  */
 @ConditionalOnExpression("${seata.enabled:true}")
+@ConditionalOnBean(type = {"javax.sql.DataSource", "org.springframework.transaction.PlatformTransactionManager"})
+@ConditionalOnMissingBean(TCCFenceConfig.class)
 @AutoConfigureAfter({SeataCoreAutoConfiguration.class, DataSourceAutoConfiguration.class, DataSourceTransactionManagerAutoConfiguration.class})
 public class SeataTCCFenceAutoConfiguration {
 
     public static final String TCC_FENCE_DATA_SOURCE_BEAN_NAME = "seataTCCFenceDataSource";
     public static final String TCC_FENCE_TRANSACTION_MANAGER_BEAN_NAME = "seataTCCFenceTransactionManager";
 
     @Bean
-    @ConditionalOnMissingBean(TCCFenceConfig.class)
-    @ConditionalOnBean({DataSource.class, PlatformTransactionManager.class})
     @ConfigurationProperties(StarterConstants.TCC_FENCE_PREFIX)
     public TCCFenceConfig tccFenceConfig(
             DataSource dataSource,

File: core/src/main/java/io/seata/core/protocol/Version.java
Patch:
@@ -36,7 +36,7 @@ public class Version {
     /**
      * The constant CURRENT.
      */
-    private static final String CURRENT = "1.5.0";
+    private static final String CURRENT = "1.5.2-SNAPSHOT";
     private static final String VERSION_0_7_1 = "0.7.1";
     private static final String VERSION_1_5_0 = "1.5.0";
     private static final int MAX_VERSION_DOT = 3;

File: server/src/main/java/io/seata/server/coordinator/DefaultCoordinator.java
Patch:
@@ -544,6 +544,7 @@ public void destroy() {
         }
         // 3. third destroy SessionHolder
         SessionHolder.destroy();
+        instance = null;
     }
 
     /**

File: server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorTest.java
Patch:
@@ -97,7 +97,7 @@ public static void beforeClass(ApplicationContext context) throws Exception {
         EnhancedServiceLoader.unload(AbstractCore.class);
         XID.setIpAddress(NetUtil.getLocalIp());
         RemotingServer remotingServer = new MockServerMessageSender();
-        defaultCoordinator =DefaultCoordinator.getInstance(null);
+        defaultCoordinator =DefaultCoordinator.getInstance(remotingServer);
         defaultCoordinator.setRemotingServer(remotingServer);
         core = new DefaultCore(remotingServer);
     }

File: server/src/test/java/io/seata/server/store/db/LogStoreDataBaseDAOTest.java
Patch:
@@ -629,7 +629,8 @@ public void deleteBranchTransactionDO() throws SQLException {
     }
 
     @AfterAll
-    public static void clearStoreDB(){
+    public static void clearStoreDB() throws SQLException {
+        dataSource.close();
         FileUtils.deleteRecursive("db_store", true);
     }
 

File: common/src/main/java/io/seata/common/DefaultValues.java
Patch:
@@ -30,7 +30,7 @@ public interface DefaultValues {
     int DEFAULT_TM_DEGRADE_CHECK_PERIOD = 2000;
     int DEFAULT_CLIENT_REPORT_RETRY_COUNT = 5;
     boolean DEFAULT_CLIENT_REPORT_SUCCESS_ENABLE = false;
-    boolean DEFAULT_CLIENT_TABLE_META_CHECK_ENABLE = false;
+    boolean DEFAULT_CLIENT_TABLE_META_CHECK_ENABLE = true;
     long DEFAULT_TABLE_META_CHECKER_INTERVAL = 60000L;
     boolean DEFAULT_TM_DEGRADE_CHECK = false;
     boolean DEFAULT_CLIENT_SAGA_BRANCH_REGISTER_ENABLE = false;

File: seata-spring-autoconfigure/seata-spring-autoconfigure-client/src/test/java/io/seata/spring/boot/autoconfigure/ClientPropertiesTest.java
Patch:
@@ -73,7 +73,7 @@ public void testLockProperties() {
     public void testRmProperties() {
         assertEquals(10000, context.getBean(RmProperties.class).getAsyncCommitBufferLimit());
         assertEquals(5, context.getBean(RmProperties.class).getReportRetryCount());
-        assertFalse(context.getBean(RmProperties.class).isTableMetaCheckEnable());
+        assertTrue(context.getBean(RmProperties.class).isTableMetaCheckEnable());
         assertFalse(context.getBean(RmProperties.class).isReportSuccessEnable());
         assertEquals(60000L,context.getBean(RmProperties.class).getTableMetaCheckerInterval());
         assertFalse(context.getBean(RmProperties.class).isSagaRetryPersistModeUpdate());

File: seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/session/SessionProperties.java
Patch:
@@ -38,7 +38,7 @@ public class SessionProperties {
     /**
      * enable to asynchronous remove branchSession
      */
-    private Boolean enableBranchAsyncRemove = true;
+    private Boolean enableBranchAsyncRemove = false;
 
     public Integer getBranchAsyncQueueSize() {
         return branchAsyncQueueSize;

File: server/src/main/java/io/seata/server/coordinator/DefaultCoordinator.java
Patch:
@@ -350,6 +350,9 @@ protected void handleRetryRollbacking() {
         sessionCondition.setLazyLoadBranch(true);
         Collection<GlobalSession> rollbackingSessions =
             SessionHolder.getRetryRollbackingSessionManager().findGlobalSessions(sessionCondition);
+        if (CollectionUtils.isEmpty(rollbackingSessions)) {
+            return;
+        }
         long now = System.currentTimeMillis();
         SessionHelper.forEach(rollbackingSessions, rollbackingSession -> {
             try {

File: core/src/main/java/io/seata/core/protocol/transaction/BranchRegisterResponse.java
Patch:
@@ -28,6 +28,7 @@ public class BranchRegisterResponse extends AbstractTransactionResponse implemen
 
     private long branchId;
 
+
     /**
      * Gets branch id.
      *

File: core/src/main/java/io/seata/core/rpc/netty/AbstractNettyRemotingClient.java
Patch:
@@ -488,4 +488,5 @@ public void close(ChannelHandlerContext ctx, ChannelPromise future) throws Excep
             super.close(ctx, future);
         }
     }
+
 }

File: serializer/seata-serializer-seata/src/main/java/io/seata/serializer/seata/protocol/transaction/BranchRegisterResponseCodec.java
Patch:
@@ -38,8 +38,7 @@ public <T> void encode(T t, ByteBuf out) {
         super.encode(t, out);
 
         BranchRegisterResponse branchRegisterResponse = (BranchRegisterResponse)t;
-        long branchId = branchRegisterResponse.getBranchId();
-        out.writeLong(branchId);
+        out.writeLong(branchRegisterResponse.getBranchId());
     }
 
     @Override

File: server/src/main/java/io/seata/server/coordinator/AbstractCore.java
Patch:
@@ -91,7 +91,7 @@ public Long branchRegister(BranchType branchType, String resourceId, String clie
             }
             if (LOGGER.isInfoEnabled()) {
                 LOGGER.info("Register branch successfully, xid = {}, branchId = {}, resourceId = {} ,lockKeys = {}",
-                    globalSession.getXid(), branchSession.getBranchId(), resourceId, lockKeys);
+                        globalSession.getXid(), branchSession.getBranchId(), resourceId, lockKeys);
             }
             return branchSession.getBranchId();
         });

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/DeleteExecutor.java
Patch:
@@ -46,7 +46,7 @@ public class DeleteExecutor<T, S extends Statement> extends AbstractDMLBaseExecu
      * @param statementCallback the statement callback
      * @param sqlRecognizer     the sql recognizer
      */
-    public DeleteExecutor(StatementProxy<S> statementProxy, StatementCallback<T,S> statementCallback,
+    public DeleteExecutor(StatementProxy<S> statementProxy, StatementCallback<T, S> statementCallback,
                           SQLRecognizer sqlRecognizer) {
         super(statementProxy, statementCallback, sqlRecognizer);
     }

File: core/src/main/java/io/seata/core/rpc/netty/NettyClientChannelManager.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Set;
+import java.util.HashSet;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import java.util.function.Function;
@@ -187,17 +188,18 @@ void reconnect(String transactionServiceGroup) {
             }
             return;
         }
+        Set<String> channelAddress = new HashSet<>(availList.size());
         try {
             for (String serverAddress : availList) {
                 try {
                     acquireChannel(serverAddress);
+                    channelAddress.add(serverAddress);
                 } catch (Exception e) {
                     LOGGER.error("{} can not connect to {} cause:{}", FrameworkErrorCode.NetConnect.getErrCode(),
                         serverAddress, e.getMessage(), e);
                 }
             }
         } finally {
-            Set<String> channelAddress = channels.keySet();
             if (CollectionUtils.isNotEmpty(channelAddress)) {
                 List<InetSocketAddress> aliveAddress = new ArrayList<>(channelAddress.size());
                 for (String address : channelAddress) {

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoExecutor.java
Patch:
@@ -196,6 +196,8 @@ protected void undoPrepare(PreparedStatement undoPST, ArrayList<Field> undoValue
                 }
             } else if (undoValue.getType() == JDBCType.OTHER.getVendorTypeNumber()) {
                 undoPST.setObject(undoIndex, value);
+            } else if (undoValue.getType() == JDBCType.BIT.getVendorTypeNumber()) {
+                undoPST.setObject(undoIndex, value);
             } else {
                 // JDBCType.REF, JDBCType.JAVA_OBJECT etc...
                 undoPST.setObject(undoIndex, value, type);

File: spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java
Patch:
@@ -523,9 +523,10 @@ public void onChangeEvent(ConfigurationChangeEvent event) {
         if (ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION.equals(event.getDataId())) {
             disableGlobalTransaction = Boolean.parseBoolean(event.getNewValue().trim());
             if (!disableGlobalTransaction && initialized.compareAndSet(false, true)) {
-                LOGGER.info("{} config changed, old value:{}, new value:{}", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,
-                        disableGlobalTransaction, event.getNewValue());
+                LOGGER.info("{} config changed, old value:true, new value:{}", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,
+                        event.getNewValue());
                 initClient();
+                ConfigurationCache.removeConfigListener(ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION, this);
             }
         }
     }

File: seata-spring-autoconfigure/seata-spring-autoconfigure-client/src/main/java/io/seata/spring/boot/autoconfigure/SeataClientEnvironmentPostProcessor.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.seata.spring.boot.autoconfigure;
 
+import io.seata.common.holder.ObjectHolder;
 import io.seata.rm.tcc.config.TCCFenceConfig;
 import io.seata.saga.engine.StateMachineConfig;
 import io.seata.spring.boot.autoconfigure.properties.SagaAsyncThreadPoolProperties;
@@ -31,6 +32,7 @@
 import org.springframework.core.Ordered;
 import org.springframework.core.env.ConfigurableEnvironment;
 
+import static io.seata.common.Constants.OBJECT_KEY_SPRING_CONFIGURABLE_ENVIRONMENT;
 import static io.seata.spring.boot.autoconfigure.StarterConstants.CLIENT_RM_PREFIX;
 import static io.seata.spring.boot.autoconfigure.StarterConstants.CLIENT_TM_PREFIX;
 import static io.seata.spring.boot.autoconfigure.StarterConstants.COMPRESS_PREFIX;
@@ -52,6 +54,7 @@ public class SeataClientEnvironmentPostProcessor implements EnvironmentPostProce
 
     @Override
     public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {
+        ObjectHolder.INSTANCE.setObject(OBJECT_KEY_SPRING_CONFIGURABLE_ENVIRONMENT, environment);
         PROPERTY_BEAN_MAP.put(SEATA_PREFIX, SeataProperties.class);
 
         PROPERTY_BEAN_MAP.put(CLIENT_RM_PREFIX, RmProperties.class);

File: seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/main/java/io/seata/spring/boot/autoconfigure/StarterConstants.java
Patch:
@@ -92,5 +92,6 @@ public interface StarterConstants {
      * The following special keys need to be normalized.
      */
     String SPECIAL_KEY_GROUPLIST = "grouplist";
+    String SPECIAL_KEY_SERVICE = "service";
     String SPECIAL_KEY_VGROUP_MAPPING = "vgroupMapping";
 }

File: server/src/test/java/io/seata/server/coordinator/DefaultCoreTest.java
Patch:
@@ -262,7 +262,7 @@ public void doGlobalRollBackRollbackedTest(String xid) throws Exception {
         core.mockCore(BranchType.AT,
                 new MockCore(BranchStatus.PhaseTwo_Committed, BranchStatus.PhaseTwo_Rollbacked));
         core.doGlobalRollback(globalSession, false);
-        Assertions.assertEquals(globalSession.getStatus(), GlobalStatus.Rollbacked);
+        Assertions.assertEquals(globalSession.getStatus(), GlobalStatus.Begin);
     }
 
     /**

File: rm-datasource/src/main/java/io/seata/rm/datasource/DataSourceProxy.java
Patch:
@@ -104,6 +104,8 @@ private void init(DataSource dataSource, String resourceGroupId) {
             dbType = JdbcUtils.getDbType(jdbcUrl);
             if (JdbcConstants.ORACLE.equals(dbType)) {
                 userName = connection.getMetaData().getUserName();
+            } else if (JdbcConstants.MARIADB.equals(dbType)) {
+                dbType = JdbcConstants.MYSQL;
             }
         } catch (SQLException e) {
             throw new IllegalStateException("can not init dataSource", e);

File: server/src/main/java/io/seata/server/coordinator/DefaultCoordinator.java
Patch:
@@ -160,7 +160,7 @@ public class DefaultCoordinator extends AbstractTCInboundHandler implements Tran
             Integer.MAX_VALUE, TimeUnit.MILLISECONDS,
             new ArrayBlockingQueue<>(
                     CONFIG.getInt(ConfigurationKeys.SESSION_BRANCH_ASYNC_QUEUE_SIZE, DEFAULT_BRANCH_ASYNC_QUEUE_SIZE)
-            ), new NamedThreadFactory("branchSessionRemove", 2, true),
+            ), new NamedThreadFactory("branchSessionRemove", BRANCH_ASYNC_POOL_SIZE),
             new ThreadPoolExecutor.CallerRunsPolicy());
 
 

File: server/src/main/java/io/seata/server/Server.java
Patch:
@@ -82,7 +82,6 @@ public static void start(String[] args) {
 
         // let ServerRunner do destroy instead ShutdownHook, see https://github.com/seata/seata/issues/4028
         ServerRunner.addDisposable(coordinator);
-        ServerRunner.addDisposable(nettyRemotingServer);
 
         //127.0.0.1 and 0.0.0.0 are not valid here.
         if (NetUtil.isValidIp(parameterParser.getHost(), false)) {

File: saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/parser/impl/FastjsonParser.java
Patch:
@@ -80,7 +80,7 @@ public String toJsonString(Object o, boolean ignoreAutoType, boolean prettyPrint
     @Override
     public <T> T parse(String json, Class<T> type, boolean ignoreAutoType) {
         if (ignoreAutoType) {
-            return JSON.parseObject(json, type, Feature.DisableSpecialKeyDetect, Feature.OrderedField);
+            return JSON.parseObject(json, type, Feature.IgnoreAutoType, Feature.OrderedField);
         }
         else {
             return JSON.parseObject(json, type, Feature.SupportAutoType, Feature.OrderedField);

File: core/src/main/java/io/seata/core/lock/AbstractLocker.java
Patch:
@@ -94,7 +94,7 @@ public boolean releaseLock(String xid, Long branchId) {
     }
 
     @Override
-    public boolean releaseLock(String xid, List<Long> branchIds) {
+    public boolean releaseLock(String xid) {
         return false;
     }
 

File: core/src/main/java/io/seata/core/lock/Locker.java
Patch:
@@ -62,10 +62,9 @@ public interface Locker {
      * Release lock boolean.
      *
      * @param xid       the xid
-     * @param branchIds the branch ids
      * @return the boolean
      */
-    boolean releaseLock(String xid, List<Long> branchIds);
+    boolean releaseLock(String xid);
 
     /**
      * Is lockable boolean.

File: core/src/main/java/io/seata/core/store/LockStore.java
Patch:
@@ -70,7 +70,7 @@ public interface LockStore {
 
     boolean unLock(String xid, Long branchId);
 
-    boolean unLock(String xid, List<Long> branchIds);
+    boolean unLock(String xid);
 
     /**
      * Is lockable boolean.

File: core/src/main/java/io/seata/core/store/db/sql/lock/LockStoreSql.java
Patch:
@@ -69,10 +69,9 @@ public interface LockStoreSql {
      * Get batch delete lock sql string.
      *
      * @param lockTable      the lock table
-     * @param branchSize the size of branch
      * @return the string
      */
-    String getBatchDeleteLockSqlByBranchs(String lockTable, int branchSize);
+    String getBatchDeleteLockSqlByXid(String lockTable);
 
     /**
      * Get query lock sql string.

File: server/src/test/java/io/seata/server/coordinator/DefaultCoreTest.java
Patch:
@@ -229,7 +229,7 @@ public void doGlobalCommitExpTest(String xid) throws Exception {
     @MethodSource("xidProvider")
     public void rollBackTest(String xid) throws Exception {
         GlobalStatus globalStatus = core.rollback(xid);
-        Assertions.assertEquals(globalStatus, GlobalStatus.Rollbacked);
+        Assertions.assertEquals(globalStatus, GlobalStatus.Rollbacking);
     }
 
     /**
@@ -249,7 +249,7 @@ public void doGlobalRollBackRollbackedTest(String xid) throws Exception {
         core.mockCore(BranchType.AT,
                 new MockCore(BranchStatus.PhaseTwo_Committed, BranchStatus.PhaseTwo_Rollbacked));
         core.doGlobalRollback(globalSession, false);
-        Assertions.assertEquals(globalSession.getStatus(), GlobalStatus.Rollbacked);
+        Assertions.assertEquals(globalSession.getStatus(), GlobalStatus.Begin);
     }
 
     /**

File: server/src/test/java/io/seata/server/event/DefaultCoreForEventBusTest.java
Patch:
@@ -126,8 +126,7 @@ public void resetDownLatch() {
             subscriber.getDownLatch().await(1000, TimeUnit.MILLISECONDS);
             Assertions.assertEquals(2, subscriber.getEventCounters().get(GlobalStatus.Begin).get());
             Assertions.assertEquals(1, subscriber.getEventCounters().get(GlobalStatus.Rollbacking).get());
-            Assertions.assertEquals(1, subscriber.getEventCounters().get(GlobalStatus.Rollbacked).get());
-
+            Assertions.assertNull(subscriber.getEventCounters().get(GlobalStatus.Rollbacked));
 
             //start more one new transaction for test timeout and let this transaction immediately timeout
             subscriber.setDownLatch(new CountDownLatch(1));

File: compressor/seata-compressor-zstd/src/main/java/io/seata/compressor/zstd/ZstdCompressor.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.compressor.zip;
+package io.seata.compressor.zstd;
 
 import io.seata.common.loader.LoadLevel;
 import io.seata.core.compressor.Compressor;

File: compressor/seata-compressor-zstd/src/main/java/io/seata/compressor/zstd/ZstdUtil.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.compressor.zip;
+package io.seata.compressor.zstd;
 
 import com.github.luben.zstd.Zstd;
 

File: compressor/seata-compressor-zstd/src/test/java/io/seata/compressor/zstd/ZstdCompressorTest.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.compressor.zip;
+package io.seata.compressor.zstd;
 
 import org.junit.jupiter.api.Test;
 

File: compressor/seata-compressor-zstd/src/test/java/io/seata/compressor/zstd/ZstdUtilTest.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.compressor.zip;
+package io.seata.compressor.zstd;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/TableMeta.java
Patch:
@@ -17,14 +17,14 @@
 
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.TreeMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Objects;
 
 import io.seata.common.exception.NotSupportYetException;
 import io.seata.common.util.CollectionUtils;
+import io.seata.common.util.LowerCaseLinkHashMap;
 import io.seata.rm.datasource.ColumnUtils;
 
 /**
@@ -38,12 +38,12 @@ public class TableMeta {
     /**
      * key: column name
      */
+    private final Map<String, ColumnMeta> allColumns = new LowerCaseLinkHashMap<>();
 
-    private Map<String, ColumnMeta> allColumns = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
     /**
      * key: index name
      */
-    private Map<String, IndexMeta> allIndexes = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
+    private final Map<String, IndexMeta> allIndexes = new LowerCaseLinkHashMap<>();
 
     /**
      * Gets table name.

File: core/src/main/java/io/seata/core/rpc/netty/TmNettyRemotingClient.java
Patch:
@@ -197,7 +197,7 @@ public boolean isEnableClientBatchSendRequest() {
 
     @Override
     public long getRpcRequestTimeout() {
-        return NettyClientConfig.getRpcRmRequestTimeout();
+        return NettyClientConfig.getRpcTmRequestTimeout();
     }
 
     @Override

File: server/src/main/java/io/seata/server/coordinator/DefaultCore.java
Patch:
@@ -150,9 +150,9 @@ public GlobalStatus commit(String xid) throws TransactionException {
         // just lock changeStatus
 
         boolean shouldCommit = SessionHolder.lockAndExecute(globalSession, () -> {
-            // Highlight: Firstly, close the session, then no more branch can be registered.
-            globalSession.closeAndClean();
             if (globalSession.getStatus() == GlobalStatus.Begin) {
+                // Highlight: Firstly, close the session, then no more branch can be registered.
+                globalSession.closeAndClean();
                 if (globalSession.canBeCommittedAsync()) {
                     globalSession.asyncCommit();
                     return false;

File: common/src/main/java/io/seata/common/util/StringUtils.java
Patch:
@@ -220,7 +220,7 @@ public static String toString(final Object obj) {
             return CollectionUtils.toString((Collection<?>)obj);
         }
         if (obj.getClass().isArray()) {
-            return ArrayUtils.toString((Object[])obj);
+            return ArrayUtils.toString(obj);
         }
         if (obj instanceof Map) {
             return CollectionUtils.toString((Map<?, ?>)obj);

File: common/src/main/java/io/seata/common/DefaultValues.java
Patch:
@@ -84,7 +84,9 @@ public interface DefaultValues {
     int DEFAULT_TM_ROLLBACK_RETRY_COUNT = 5;
     int DEFAULT_GLOBAL_TRANSACTION_TIMEOUT = 60000;
 
-    String DEFAULT_TX_GROUP = "my_test_tx_group";
+    String DEFAULT_TX_GROUP = "default_tx_group";
+    @Deprecated
+    String DEFAULT_TX_GROUP_OLD = "my_test_tx_group";
     String DEFAULT_TC_CLUSTER = "default";
     String DEFAULT_GROUPLIST = "127.0.0.1:8091";
 

File: core/src/main/java/io/seata/core/rpc/netty/NettyClientChannelManager.java
Patch:
@@ -103,7 +103,7 @@ Channel acquireChannel(String serverAddress) {
             }
         }
         if (LOGGER.isInfoEnabled()) {
-            LOGGER.info("will connect to " + serverAddress);
+            LOGGER.info("will connect to {}", serverAddress);
         }
         Object lockObj = CollectionUtils.computeIfAbsent(channelLocks, serverAddress, key -> new Object());
         synchronized (lockObj) {
@@ -206,7 +206,7 @@ void reconnect(String transactionServiceGroup) {
                 }
                 RegistryFactory.getInstance().refreshAliveLookup(transactionServiceGroup, aliveAddress);
             } else {
-                RegistryFactory.getInstance().refreshAliveLookup(transactionServiceGroup, Collections.EMPTY_LIST);
+                RegistryFactory.getInstance().refreshAliveLookup(transactionServiceGroup, Collections.emptyList());
             }
         }
     }

File: core/src/test/java/io/seata/core/rpc/netty/NettyClientChannelManagerTest.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.concurrent.ConcurrentMap;
 import java.util.function.Function;
 
+import static io.seata.common.DefaultValues.DEFAULT_TX_GROUP;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.ArgumentMatchers.anyString;
@@ -111,7 +112,7 @@ void assertAcquireChannelFromPoolContainsInactiveCache() {
     @Test
     void assertReconnect() {
         channelManager.getChannels().putIfAbsent("127.0.0.1:8091", channel);
-        channelManager.reconnect("my_test_tx_group");
+        channelManager.reconnect(DEFAULT_TX_GROUP);
     }
     
     @Test

File: discovery/seata-discovery-etcd3/src/test/java/io/seata/discovery/registry/etcd/EtcdRegistryServiceImplTest.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.concurrent.TimeUnit;
 
 import static io.netty.util.CharsetUtil.UTF_8;
+import static io.seata.common.DefaultValues.DEFAULT_TX_GROUP;
 import static org.assertj.core.api.Assertions.assertThat;
 
 /**
@@ -148,7 +149,7 @@ public void testLookup() throws Exception {
         //1.register
         registryService.register(inetSocketAddress);
         //2.lookup
-        List<InetSocketAddress> inetSocketAddresses = registryService.lookup("my_test_tx_group");
+        List<InetSocketAddress> inetSocketAddresses = registryService.lookup(DEFAULT_TX_GROUP);
         assertThat(inetSocketAddresses).size().isEqualTo(1);
     }
 

File: seata-spring-autoconfigure/seata-spring-autoconfigure-client/src/main/java/io/seata/spring/boot/autoconfigure/properties/SeataProperties.java
Patch:
@@ -91,7 +91,7 @@ public SeataProperties setApplicationId(String applicationId) {
 
     public String getTxServiceGroup() {
         if (txServiceGroup == null) {
-            txServiceGroup = springCloudAlibabaConfiguration.getTxServiceGroup();
+            txServiceGroup = DefaultValues.DEFAULT_TX_GROUP;
         }
         return txServiceGroup;
     }

File: seata-spring-autoconfigure/seata-spring-autoconfigure-client/src/main/java/io/seata/spring/boot/autoconfigure/properties/client/ServiceProperties.java
Patch:
@@ -26,6 +26,7 @@
 import static io.seata.common.DefaultValues.DEFAULT_GROUPLIST;
 import static io.seata.common.DefaultValues.DEFAULT_TC_CLUSTER;
 import static io.seata.common.DefaultValues.DEFAULT_TX_GROUP;
+import static io.seata.common.DefaultValues.DEFAULT_TX_GROUP_OLD;
 import static io.seata.spring.boot.autoconfigure.StarterConstants.SERVICE_PREFIX;
 
 /**
@@ -89,6 +90,8 @@ public ServiceProperties setDisableGlobalTransaction(boolean disableGlobalTransa
     public void afterPropertiesSet() throws Exception {
         if (0 == vgroupMapping.size()) {
             vgroupMapping.put(DEFAULT_TX_GROUP, DEFAULT_TC_CLUSTER);
+            //compatible with old value, will remove next version
+            vgroupMapping.put(DEFAULT_TX_GROUP_OLD, DEFAULT_TC_CLUSTER);
         }
         if (0 == grouplist.size()) {
             grouplist.put(DEFAULT_TC_CLUSTER, DEFAULT_GROUPLIST);

File: server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorTest.java
Patch:
@@ -75,7 +75,7 @@ public class DefaultCoordinatorTest {
 
     private static final String applicationId = "demo-child-app";
 
-    private static final String txServiceGroup = "my_test_tx_group";
+    private static final String txServiceGroup = "default_tx_group";
 
     private static final String txName = "tx-1";
 

File: server/src/test/java/io/seata/server/coordinator/DefaultCoreTest.java
Patch:
@@ -52,7 +52,7 @@ public class DefaultCoreTest {
 
     private static final String applicationId = "demo-child-app";
 
-    private static final String txServiceGroup = "my_test_tx_group";
+    private static final String txServiceGroup = "default_tx_group";
 
     private static final String txName = "tx-1";
 

File: server/src/test/java/io/seata/server/lock/file/FileLockManagerImplTest.java
Patch:
@@ -30,6 +30,8 @@
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.context.ApplicationContext;
 
+import static io.seata.common.DefaultValues.DEFAULT_TX_GROUP;
+
 
 /**
  * The type Default lock manager impl test.
@@ -91,7 +93,7 @@ static Stream<BranchSession> branchSessionProvider() {
         branchSession.setBranchId(1L);
         branchSession.setTransactionId(transactionId);
         branchSession.setClientId("c1");
-        branchSession.setResourceGroupId("my_test_tx_group");
+        branchSession.setResourceGroupId(DEFAULT_TX_GROUP);
         branchSession.setResourceId(resourceId);
         branchSession.setLockKey(lockKey);
         branchSession.setBranchType(BranchType.AT);

File: server/src/test/java/io/seata/server/session/BranchSessionTest.java
Patch:
@@ -27,6 +27,8 @@
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.context.ApplicationContext;
 
+import static io.seata.common.DefaultValues.DEFAULT_TX_GROUP;
+
 /**
  * The type Branch session test.
  *
@@ -72,7 +74,7 @@ static Stream<Arguments> branchSessionProvider() {
         branchSession.setTransactionId(UUIDGenerator.generateUUID());
         branchSession.setBranchId(1L);
         branchSession.setClientId("c1");
-        branchSession.setResourceGroupId("my_test_tx_group");
+        branchSession.setResourceGroupId(DEFAULT_TX_GROUP);
         branchSession.setResourceId("tb_1");
         branchSession.setLockKey("t_1");
         branchSession.setBranchType(BranchType.AT);

File: test/src/test/java/AppTest.java
Patch:
@@ -35,7 +35,7 @@ public class AppTest {
     private static final Logger LOGGER = LoggerFactory.getLogger(AppTest.class);
 
     private static final String APPLICATION_ID = "my_test_app";
-    private static final String TX_SERVICE_GROUP = "my_test_tx_group";
+    private static final String TX_SERVICE_GROUP = "default_tx_group";
     private static final String TX_NAME = "my_tx_instance";
     private static final int TX_TIME_OUT = 60000;
 

File: test/src/test/java/LocalTransactionWithGlobalLockDataSourceBasicTest.java
Patch:
@@ -45,7 +45,7 @@ public class LocalTransactionWithGlobalLockDataSourceBasicTest {
     private static JdbcTemplate jdbcTemplate;
     private static JdbcTemplate directJdbcTemplate;
     private static final String APPLICATION_ID = "my_test_app";
-    private static final String TX_SERVICE_GROUP = "my_test_tx_group";
+    private static final String TX_SERVICE_GROUP = "default_tx_group";
 
     /**
      * Before.

File: test/src/test/java/io/seata/core/rpc/netty/TmNettyClientTest.java
Patch:
@@ -106,7 +106,7 @@ public void testReconnect() throws Exception {
         Thread.sleep(3000);
 
         String applicationId = "app 1";
-        String transactionServiceGroup = "my_test_tx_group";
+        String transactionServiceGroup = "default_tx_group";
         TmNettyRemotingClient tmNettyRemotingClient = TmNettyRemotingClient.getInstance(applicationId, transactionServiceGroup);
 
         tmNettyRemotingClient.init();
@@ -132,7 +132,7 @@ public void testSendMsgWithResponse() throws Exception {
         Thread.sleep(3000);
 
         String applicationId = "app 1";
-        String transactionServiceGroup = "my_test_tx_group";
+        String transactionServiceGroup = "default_tx_group";
         TmNettyRemotingClient tmNettyRemotingClient = TmNettyRemotingClient.getInstance(applicationId, transactionServiceGroup);
         tmNettyRemotingClient.init();
 

File: test/src/test/java/io/seata/xa/XAModeTest2.java
Patch:
@@ -610,7 +610,7 @@ private DataSourceProxyXA createDataSourceProxyXA() throws Throwable {
     }
 
     private GlobalTransaction createGlobalTransaction() {
-        String vgroup = "my_test_tx_group";
+        String vgroup = "default_tx_group";
         GlobalTransactionScanner scanner = new GlobalTransactionScanner(vgroup);
         scanner.afterPropertiesSet();
 

File: saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/parser/impl/FastjsonParser.java
Patch:
@@ -80,7 +80,7 @@ public String toJsonString(Object o, boolean ignoreAutoType, boolean prettyPrint
     @Override
     public <T> T parse(String json, Class<T> type, boolean ignoreAutoType) {
         if (ignoreAutoType) {
-            return JSON.parseObject(json, type, Feature.IgnoreAutoType, Feature.OrderedField);
+            return JSON.parseObject(json, type, Feature.DisableSpecialKeyDetect, Feature.OrderedField);
         }
         else {
             return JSON.parseObject(json, type, Feature.SupportAutoType, Feature.OrderedField);

File: common/src/main/java/io/seata/common/loader/EnhancedServiceNotFoundException.java
Patch:
@@ -75,7 +75,7 @@ public EnhancedServiceNotFoundException(Throwable cause) {
     }
 
     @Override
-    public Throwable fillInStackTrace() {
+    public synchronized Throwable fillInStackTrace() {
         return this;
     }
 }

File: config/seata-config-apollo/src/main/java/io/seata/config/apollo/ApolloConfiguration.java
Patch:
@@ -72,6 +72,7 @@ public class ApolloConfiguration extends AbstractConfiguration {
     private static final int MAX_CONFIG_OPERATE_THREAD = 2;
     private static volatile ApolloConfiguration instance;
 
+    @SuppressWarnings("lgtm[java/unsafe-double-checked-locking-init-order]")
     private ApolloConfiguration() {
         readyApolloConfig();
         if (config == null) {

File: config/seata-config-zk/src/main/java/io/seata/config/zk/ZookeeperConfiguration.java
Patch:
@@ -88,6 +88,7 @@ public class ZookeeperConfiguration extends AbstractConfiguration {
     /**
      * Instantiates a new Zookeeper configuration.
      */
+    @SuppressWarnings("lgtm[java/unsafe-double-checked-locking-init-order]")
     public ZookeeperConfiguration() {
         if (zkClient == null) {
             synchronized (ZookeeperConfiguration.class) {

File: discovery/seata-discovery-consul/src/main/java/io/seata/discovery/registry/consul/ConsulRegistryServiceImpl.java
Patch:
@@ -343,7 +343,7 @@ private void processService() {
             if ((currentIndex != null && currentIndex > consulIndex) || hasError) {
                 hasError = false;
                 List<HealthService> services = response.getValue();
-                consulIndex = currentIndex;
+                consulIndex = currentIndex;/*lgtm[java/dereferenced-value-may-be-null]*/
                 for (ConsulListener listener : listenerMap.get(cluster)) {
                     listener.onEvent(services);
                 }

File: discovery/seata-discovery-core/src/main/java/io/seata/discovery/loadbalance/ConsistentHashLoadBalance.java
Patch:
@@ -70,6 +70,7 @@ public T select(String objectKey) {
         }
     }
 
+    @SuppressWarnings("lgtm[java/weak-cryptographic-algorithm]")
     private static class MD5Hash implements HashFunction {
         MessageDigest instance;
         public MD5Hash() {

File: discovery/seata-discovery-nacos/src/main/java/io/seata/discovery/registry/nacos/NacosRegistryServiceImpl.java
Patch:
@@ -20,7 +20,8 @@
 import com.alibaba.nacos.api.naming.listener.EventListener;
 import com.alibaba.nacos.api.naming.listener.NamingEvent;
 import com.alibaba.nacos.api.naming.pojo.Instance;
-import com.alibaba.nacos.client.naming.utils.CollectionUtils;
+
+import io.seata.common.util.CollectionUtils;
 import io.seata.common.util.NetUtil;
 import io.seata.common.util.StringUtils;
 import io.seata.config.Configuration;

File: integration/http/src/main/java/io/seata/integration/http/AbstractHttpExecutor.java
Patch:
@@ -152,6 +152,7 @@ public static Map<String, String> convertParamOfBean(Object sourceParam) {
         return CollectionUtils.toStringMap(JSON.parseObject(JSON.toJSONString(sourceParam, SerializerFeature.WriteNullStringAsEmpty, SerializerFeature.WriteMapNullValue), Map.class));
     }
 
+    @SuppressWarnings("lgtm[java/unsafe-deserialization]")
     public static <T> Map<String, String> convertParamOfJsonString(String jsonStr, Class<T> returnType) {
         return convertParamOfBean(JSON.parseObject(jsonStr, returnType));
     }

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseInsertExecutor.java
Patch:
@@ -335,6 +335,7 @@ protected boolean checkPkValues(Map<String, List<Object>> pkValues, boolean ps)
      * @param ps       true: is prepared statement. false: normal statement.
      * @return true: support. false: not support.
      */
+    @SuppressWarnings("lgtm[java/constant-comparison]")
     protected boolean checkPkValuesForSinglePk(List<Object> pkValues, boolean ps) {
         /*
         ps = true

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/mysql/MySQLInsertOrUpdateExecutor.java
Patch:
@@ -324,6 +324,7 @@ public String buildImageSQL(TableMeta tableMeta) {
      * @param recognizer
      * @return map, key is column, value is paramperter
      */
+    @SuppressWarnings("lgtm[java/dereferenced-value-may-be-null]")
     public Map<String, ArrayList<Object>> buildImageParamperters(SQLInsertRecognizer recognizer) {
         List<String> duplicateKeyUpdateCloms = recognizer.getDuplicateKeyUpdate();
         if (CollectionUtils.isNotEmpty(duplicateKeyUpdateCloms)) {
@@ -349,11 +350,11 @@ public Map<String, ArrayList<Object>> buildImageParamperters(SQLInsertRecognizer
                 String m = insertColumns.get(i);
                 String params = insertParamsArray[i];
                 ArrayList<Object> imageListTemp = imageParamperterMap.computeIfAbsent(m, k -> new ArrayList<>());
-                if ("?".equals(params.toString().trim())) {
+                if ("?".equals(params.trim())) {
                     ArrayList<Object> objects = parameters.get(paramsindex);
                     imageListTemp.addAll(objects);
                     paramsindex++;
-                } else if (params != null && params instanceof String) {
+                } else if (params instanceof String) {
                     // params is characterstring constant
                     if ((params.trim().startsWith("'") && params.trim().endsWith("'")) || params.trim().startsWith("\"") && params.trim().endsWith("\"")) {
                         params = params.trim();

File: saga/seata-saga-engine/src/main/java/io/seata/saga/engine/impl/DefaultStateMachineConfig.java
Patch:
@@ -355,6 +355,7 @@ public void setStatusDecisionStrategy(StatusDecisionStrategy statusDecisionStrat
         this.statusDecisionStrategy = statusDecisionStrategy;
     }
 
+    @SuppressWarnings("lgtm[java/unsafe-double-checked-locking]")
     @Override
     public SeqGenerator getSeqGenerator() {
         if (seqGenerator == null) {

File: saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/parser/utils/DesignerJsonTransformer.java
Patch:
@@ -104,6 +104,7 @@ private static void transformNode(Map<String, Object> machineJsonObject, Map<Str
         }
     }
 
+    @SuppressWarnings("lgtm[java/dereferenced-value-may-be-null]")
     private static void transformEdge(Map<String, Object> machineJsonObject, List<Object> nodes, Map<String, Object> nodeMap, Map<String, Object> edgeObj) {
         String sourceId = (String) edgeObj.get("source");
         String targetId = (String) edgeObj.get("target");
@@ -211,6 +212,7 @@ private static boolean isBordersCoincided(Number xyA, Number xyB, Number lengthA
      * @param stateMachineInstance
      * @return
      */
+    @SuppressWarnings("lgtm[java/dereferenced-value-may-be-null]")
     public static String generateTracingGraphJson(StateMachineInstance stateMachineInstance, JsonParser jsonParser) {
 
         if (stateMachineInstance == null) {
@@ -276,7 +278,7 @@ public static String generateTracingGraphJson(StateMachineInstance stateMachineI
             }
         }
 
-        if (stateMachineJsonObj != null) {
+        if (stateMachineJsonObj != null) { /*lgtm[java/useless-null-check]*/
             return jsonParser.toJsonString(stateMachineJsonObj, true);
         }
         return "";

File: tm/src/main/java/io/seata/tm/api/DefaultGlobalTransaction.java
Patch:
@@ -110,6 +110,7 @@ public void begin(int timeout, String name) throws TransactionException {
         }
     }
 
+    @SuppressWarnings("lgtm[java/constant-comparison]")
     @Override
     public void commit() throws TransactionException {
         if (role == GlobalTransactionRole.Participant) {
@@ -144,6 +145,7 @@ public void commit() throws TransactionException {
         }
     }
 
+    @SuppressWarnings("lgtm[java/constant-comparison]")
     @Override
     public void rollback() throws TransactionException {
         if (role == GlobalTransactionRole.Participant) {

File: server/src/main/java/io/seata/server/ServerApplication.java
Patch:
@@ -28,6 +28,5 @@ public class ServerApplication {
     public static void main(String[] args) throws IOException {
         // run the spring-boot application
         SpringApplication.run(ServerApplication.class, args);
-
     }
 }

File: integration/http/src/main/java/io/seata/integration/http/XidResource.java
Patch:
@@ -32,14 +32,14 @@ public class XidResource {
 
     public static void cleanXid(String rpcXid) {
         String xid = RootContext.getXID();
-        if (xid != null) {
+        if (StringUtils.isNotBlank(xid)) {
             String unbindXid = RootContext.unbind();
             if (LOGGER.isDebugEnabled()) {
                 LOGGER.debug("unbind[{}] from RootContext", unbindXid);
             }
             if (!StringUtils.equalsIgnoreCase(rpcXid, unbindXid)) {
                 LOGGER.warn("xid in change during RPC from {} to {}", rpcXid, unbindXid);
-                if (unbindXid != null) {
+                if (StringUtils.isNotBlank(unbindXid)) {
                     RootContext.bind(unbindXid);
                     LOGGER.warn("bind [{}] back to RootContext", unbindXid);
                 }

File: metrics/seata-metrics-api/src/main/java/io/seata/metrics/registry/Registry.java
Patch:
@@ -39,4 +39,6 @@ public interface Registry {
     Timer getTimer(Id id);
 
     Iterable<Measurement> measure();
+
+    void clearUp();
 }

File: server/src/main/java/io/seata/server/Server.java
Patch:
@@ -64,7 +64,6 @@ public static void start(String[] args) {
         } else {
             XID.setIpAddress(NetUtil.getLocalIp());
         }
-        XID.setPort(parameterParser.getPort());
 
         //initialize the metrics
         MetricsManager.get().init();
@@ -81,7 +80,7 @@ public static void start(String[] args) {
         //log store mode : file, db, redis
         SessionHolder.init(parameterParser.getSessionStoreMode());
         LockerManagerFactory.init(parameterParser.getLockStoreMode());
-        DefaultCoordinator coordinator = new DefaultCoordinator(nettyRemotingServer);
+        DefaultCoordinator coordinator = DefaultCoordinator.getInstance(nettyRemotingServer);
         coordinator.init();
         nettyRemotingServer.setHandler(coordinator);
         // register ShutdownHook

File: server/src/main/java/io/seata/server/event/EventBusManager.java
Patch:
@@ -25,7 +25,7 @@
  */
 public class EventBusManager {
     private static class SingletonHolder {
-        private static EventBus INSTANCE = new GuavaEventBus("tc");
+        private static EventBus INSTANCE = new GuavaEventBus("tc",true);
     }
 
     public static EventBus get() {

File: server/src/test/java/ServerTest.java
Patch:
@@ -42,7 +42,7 @@ public class ServerTest {
     public static void main(String[] args) {
 
         NettyRemotingServer nettyServer = new NettyRemotingServer(workingThreads);
-        nettyServer.setHandler(new DefaultCoordinator(nettyServer));
+        nettyServer.setHandler(DefaultCoordinator.getInstance(nettyServer));
         UUIDGenerator.init(1L);
         XID.setIpAddress(NetUtil.getLocalIp());
         XID.setPort(nettyServer.getListenPort());

File: server/src/test/java/io/seata/server/ParameterParserTest.java
Patch:
@@ -19,12 +19,14 @@
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.springframework.boot.test.context.SpringBootTest;
 
 /**
  * The type parameter parser test
  *
  * @author xingfudeshi@gmail.com
  */
+@SpringBootTest
 public class ParameterParserTest {
     private static ParameterParser parameterParser = null;
 

File: test/src/test/java/io/seata/core/rpc/netty/TmNettyClientTest.java
Patch:
@@ -53,7 +53,7 @@ public void testDoConnect() throws Exception {
             @Override
             public void run() {
                 NettyRemotingServer nettyRemotingServer = new NettyRemotingServer(workingThreads);
-                nettyRemotingServer.setHandler(new DefaultCoordinator(nettyRemotingServer));
+                nettyRemotingServer.setHandler(DefaultCoordinator.getInstance(nettyRemotingServer));
                 UUIDGenerator.init(1L);
                 nettyRemotingServer.init();
             }
@@ -88,7 +88,7 @@ public void testReconnect() throws Exception {
             @Override
             public void run() {
                 NettyRemotingServer nettyRemotingServer = new NettyRemotingServer(workingThreads);
-                nettyRemotingServer.setHandler(new DefaultCoordinator(nettyRemotingServer));
+                nettyRemotingServer.setHandler(DefaultCoordinator.getInstance(nettyRemotingServer));
                 UUIDGenerator.init(1L);
                 nettyRemotingServer.init();
             }
@@ -114,7 +114,7 @@ public void testSendMsgWithResponse() throws Exception {
             @Override
             public void run() {
                 NettyRemotingServer nettyRemotingServer = new NettyRemotingServer(workingThreads);
-                nettyRemotingServer.setHandler(new DefaultCoordinator(nettyRemotingServer));
+                nettyRemotingServer.setHandler(DefaultCoordinator.getInstance(nettyRemotingServer));
                 UUIDGenerator.init(1L);
                 nettyRemotingServer.init();
             }

File: common/src/main/java/io/seata/common/io/FileLoader.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.common.io;
 
 import org.slf4j.Logger;

File: common/src/test/java/io/seata/common/BranchDO.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.common;
 
 import java.util.Date;

File: common/src/test/java/io/seata/common/rpc/RpcStatusTest.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.common.rpc;
 
 import org.junit.jupiter.api.Assertions;

File: config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.config;
 
 import java.util.HashMap;

File: config/seata-config-core/src/test/java/io.seata.config/ConfigurationCacheTests.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.config;
 
 import io.seata.common.util.DurationUtil;

File: core/src/main/java/io/seata/core/auth/AuthSigner.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.core.auth;
 
 /**

File: core/src/main/java/io/seata/core/auth/DefaultAuthSigner.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.core.auth;
 
 import io.seata.common.loader.LoadLevel;

File: core/src/main/java/io/seata/core/exception/DecodeException.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.core.exception;
 
 /**

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/parser/spi/FstSerializer.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.rm.datasource.undo.parser.spi;
 
 import org.nustaq.serialization.FSTObjectSerializer;

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/parser/spi/JacksonSerializer.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.rm.datasource.undo.parser.spi;
 
 import com.fasterxml.jackson.databind.JsonDeserializer;

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/parser/spi/KryoTypeSerializer.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.rm.datasource.undo.parser.spi;
 
 import com.esotericsoftware.kryo.Serializer;

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/parser/spi/ProtostuffDelegate.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.rm.datasource.undo.parser.spi;
 
 import io.protostuff.runtime.Delegate;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/h2/keyword/H2KeywordChecker.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.rm.datasource.undo.h2.keyword;
 
 import io.seata.common.loader.LoadLevel;

File: seata-plugin/seata-jackson-parser-oracle/src/main/java/io.seata.plugin.jackson.parser.oracle/OracleTimestampJacksonSerializer.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.plugin.jackson.parser.oracle;
 
 import com.fasterxml.jackson.core.JsonGenerator;

File: server/src/main/java/io/seata/server/auth/AbstractCheckAuthHandler.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.server.auth;
 
 import io.seata.config.ConfigurationFactory;

File: server/src/main/java/io/seata/server/auth/DefaultCheckAuthHandler.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.server.auth;
 
 import io.seata.common.loader.LoadLevel;

File: server/src/test/java/io/seata/server/lock/redis/RedisLockManagerTest.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.server.lock.redis;
 
 import java.io.IOException;

File: server/src/test/java/io/seata/server/session/redis/RedisSessionManagerTest.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.server.session.redis;
 
 import java.io.IOException;

File: spring/src/main/java/io/seata/spring/event/DegradeCheckEvent.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.spring.event;
 
 import io.seata.core.event.Event;

File: common/src/main/java/io/seata/common/util/BeanUtils.java
Patch:
@@ -45,9 +45,9 @@ public static String beanToString(Object o) {
         for (Field field : fields) {
             Object val = null;
             try {
-                val = ReflectionUtil.getFieldValue(o, field.getName());
-            } catch (NoSuchFieldException e) {
-                LOGGER.warn(e.getMessage(), e);
+                val = ReflectionUtil.getFieldValue(o, field);
+            } catch (RuntimeException e) {
+                LOGGER.warn("get field value failed", e);
             }
             if (val != null) {
                 buffer.append(field.getName()).append("=").append(val).append(", ");

File: ext/apm-seata-skywalking-plugin/src/main/java/io/seata/apm/skywalking/plugin/NettyRemotingClientSendSyncInterceptor.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.skywalking.apm.agent.core.context.ContextCarrier;
 import org.apache.skywalking.apm.agent.core.context.ContextManager;
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;
+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
@@ -47,6 +48,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         AbstractSpan activeSpan = ContextManager.createExitSpan(operationName, contextCarrier, peer);
 //        activeSpan.setComponent(ComponentsDefine.SEATA);
         activeSpan.setPeer(peer);
+        SpanLayer.asRPCFramework(activeSpan);
         CarrierItem next = contextCarrier.items();
         while (next.hasNext()) {
             next = next.next();

File: tcc/src/main/java/io/seata/rm/tcc/interceptor/ActionContextUtil.java
Patch:
@@ -203,7 +203,8 @@ public static boolean putActionContext(Map<String, Object> actionContext, @Nonnu
      * @see BusinessActionContext#getActionContext(String, Class)
      */
     public static Object handleActionContext(@Nonnull Object actionContext) {
-        if (actionContext instanceof CharSequence || actionContext instanceof Number || actionContext instanceof Boolean) {
+        if (actionContext instanceof CharSequence || actionContext instanceof Number || actionContext instanceof Boolean
+                || actionContext instanceof Character) {
             return actionContext;
         } else {
             return JSON.toJSONString(actionContext);
@@ -241,7 +242,7 @@ public static <T> T convertActionContext(String key, @Nullable Object value, @No
 
         // JSON to Object
         try {
-            if (value instanceof CharSequence) {
+            if (value instanceof CharSequence || value instanceof Character) {
                 return JSON.parseObject(value.toString(), targetClazz);
             } else {
                 return JSON.parseObject(JSON.toJSONString(value), targetClazz);

File: seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreProperties.java
Patch:
@@ -57,7 +57,7 @@ public StoreProperties setPublicKey(String publicKey) {
     @Component
     @ConfigurationProperties(prefix = STORE_SESSION_PREFIX)
     public static class Session {
-        private String mode = "file";
+        private String mode;
 
         public String getMode() {
             return mode;
@@ -73,7 +73,7 @@ public StoreProperties.Session setMode(String mode) {
     @Component
     @ConfigurationProperties(prefix = STORE_LOCK_PREFIX)
     public static class Lock {
-        private String mode = "file";
+        private String mode;
 
         public String getMode() {
             return mode;

File: server/src/main/java/io/seata/server/ParameterParser.java
Patch:
@@ -135,7 +135,6 @@ public int getPort() {
      *
      * @return the store mode
      */
-    @Deprecated
     public String getStoreMode() {
         return storeMode;
     }

File: core/src/main/java/io/seata/core/rpc/netty/AbstractNettyRemoting.java
Patch:
@@ -89,7 +89,7 @@ public abstract class AbstractNettyRemoting implements Disposable {
      * The Now mills.
      */
     protected volatile long nowMills = 0;
-    private static final int TIMEOUT_CHECK_INTERNAL = 3000;
+    private static final int TIMEOUT_CHECK_INTERVAL = 3000;
     protected final Object lock = new Object();
     /**
      * The Is sending.
@@ -121,7 +121,7 @@ public void run() {
 
                 nowMills = System.currentTimeMillis();
             }
-        }, TIMEOUT_CHECK_INTERNAL, TIMEOUT_CHECK_INTERNAL, TimeUnit.MILLISECONDS);
+        }, TIMEOUT_CHECK_INTERVAL, TIMEOUT_CHECK_INTERVAL, TimeUnit.MILLISECONDS);
     }
 
     public AbstractNettyRemoting(ThreadPoolExecutor messageExecutor) {

File: core/src/main/java/io/seata/core/rpc/netty/NettyClientChannelManager.java
Patch:
@@ -246,7 +246,7 @@ private Channel getExistAliveChannel(Channel rmChannel, String serverAddress) {
             int i = 0;
             for (; i < NettyClientConfig.getMaxCheckAliveRetry(); i++) {
                 try {
-                    Thread.sleep(NettyClientConfig.getCheckAliveInternal());
+                    Thread.sleep(NettyClientConfig.getCheckAliveInterval());
                 } catch (InterruptedException exx) {
                     LOGGER.error(exx.getMessage());
                 }

File: rm-datasource/src/test/java/io/seata/rm/GlobalLockTemplateTest.java
Patch:
@@ -108,8 +108,8 @@ void tearDown() {
 
     private GlobalLockConfig generateGlobalLockConfig() {
         GlobalLockConfig config = new GlobalLockConfig();
-        config.setLockRetryInternal(100);
+        config.setLockRetryInterval(100);
         config.setLockRetryTimes(3);
         return config;
     }
-}
\ No newline at end of file
+}

File: server/src/main/java/io/seata/server/storage/file/store/FileTransactionStoreManager.java
Patch:
@@ -69,7 +69,7 @@ public class FileTransactionStoreManager extends AbstractTransactionStoreManager
 
     private static final int MAX_SHUTDOWN_RETRY = 3;
 
-    private static final int SHUTDOWN_CHECK_INTERNAL = 1 * 1000;
+    private static final int SHUTDOWN_CHECK_INTERVAL = 1 * 1000;
 
     private static final int MAX_WRITE_RETRY = 5;
 
@@ -326,7 +326,7 @@ public void shutdown() {
             while (!fileWriteExecutor.isTerminated() && retry < MAX_SHUTDOWN_RETRY) {
                 ++retry;
                 try {
-                    Thread.sleep(SHUTDOWN_CHECK_INTERNAL);
+                    Thread.sleep(SHUTDOWN_CHECK_INTERVAL);
                 } catch (InterruptedException ignore) {
                 }
             }

File: spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java
Patch:
@@ -167,7 +167,7 @@ public Object execute() throws Throwable {
             @Override
             public GlobalLockConfig getGlobalLockConfig() {
                 GlobalLockConfig config = new GlobalLockConfig();
-                config.setLockRetryInternal(globalLockAnno.lockRetryInternal());
+                config.setLockRetryInterval(globalLockAnno.lockRetryInterval());
                 config.setLockRetryTimes(globalLockAnno.lockRetryTimes());
                 return config;
             }
@@ -204,7 +204,7 @@ public TransactionInfo getTransactionInfo() {
                     transactionInfo.setTimeOut(timeout);
                     transactionInfo.setName(name());
                     transactionInfo.setPropagation(globalTrxAnno.propagation());
-                    transactionInfo.setLockRetryInternal(globalTrxAnno.lockRetryInternal());
+                    transactionInfo.setLockRetryInterval(globalTrxAnno.lockRetryInterval());
                     transactionInfo.setLockRetryTimes(globalTrxAnno.lockRetryTimes());
                     Set<RollbackRule> rollbackRules = new LinkedHashSet<>();
                     for (Class<?> rbRule : globalTrxAnno.rollbackFor()) {

File: tm/src/main/java/io/seata/tm/api/TransactionalTemplate.java
Patch:
@@ -159,7 +159,7 @@ private boolean notExistingTransaction(GlobalTransaction tx) {
 
     private GlobalLockConfig replaceGlobalLockConfig(TransactionInfo info) {
         GlobalLockConfig myConfig = new GlobalLockConfig();
-        myConfig.setLockRetryInternal(info.getLockRetryInternal());
+        myConfig.setLockRetryInterval(info.getLockRetryInterval());
         myConfig.setLockRetryTimes(info.getLockRetryTimes());
         return GlobalLockConfigHolder.setAndReturnPrevious(myConfig);
     }

File: core/src/main/java/io/seata/core/rpc/netty/RmNettyRemotingClient.java
Patch:
@@ -271,7 +271,7 @@ private void registerProcessor() {
         // 1.registry rm client handle branch commit processor
         RmBranchCommitProcessor rmBranchCommitProcessor = new RmBranchCommitProcessor(getTransactionMessageHandler(), this);
         super.registerProcessor(MessageType.TYPE_BRANCH_COMMIT, rmBranchCommitProcessor, messageExecutor);
-        // 2.registry rm client handle branch commit processor
+        // 2.registry rm client handle branch rollback processor
         RmBranchRollbackProcessor rmBranchRollbackProcessor = new RmBranchRollbackProcessor(getTransactionMessageHandler(), this);
         super.registerProcessor(MessageType.TYPE_BRANCH_ROLLBACK, rmBranchRollbackProcessor, messageExecutor);
         // 3.registry rm handler undo log processor

File: core/src/main/java/io/seata/core/protocol/Version.java
Patch:
@@ -32,7 +32,7 @@ public class Version {
     /**
      * The constant CURRENT.
      */
-    private static final String CURRENT = "1.4.2";
+    private static final String CURRENT = "1.5.0-SNAPSHOT";
     private static final String VERSION_0_7_1 = "0.7.1";
     private static final int MAX_VERSION_DOT = 3;
 

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/AbstractDMLBaseExecutor.java
Patch:
@@ -172,10 +172,9 @@ protected T executeAutoCommitTrue(Object[] args) throws Throwable {
     protected abstract TableRecords afterImage(TableRecords beforeImage) throws SQLException;
 
     private static class LockRetryPolicy extends ConnectionProxy.LockRetryPolicy {
-        private final ConnectionProxy connection;
 
         LockRetryPolicy(final ConnectionProxy connection) {
-            this.connection = connection;
+            super(connection);
         }
 
         @Override

File: seata-spring-boot-starter/src/test/java/io/seata/spring/boot/autoconfigure/RedisAutoInjectionTypeConvertTest.java
Patch:
@@ -39,11 +39,11 @@
 @Import(SpringApplicationContextProvider.class)
 @org.springframework.context.annotation.Configuration
 public class RedisAutoInjectionTypeConvertTest {
-    private static AnnotationConfigApplicationContext applicationContex;
+    private static AnnotationConfigApplicationContext applicationContext;
 
     @BeforeAll
     public static void initContext() {
-        applicationContex = new AnnotationConfigApplicationContext(RedisAutoInjectionTypeConvertTest.class);
+        applicationContext = new AnnotationConfigApplicationContext(RedisAutoInjectionTypeConvertTest.class);
     }
 
     @Bean
@@ -65,6 +65,6 @@ public void testReadConfigurationItems() {
 
     @AfterAll
     public static void closeContext() {
-        applicationContex.close();
+        applicationContext.close();
     }
 }

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/AbstractDMLBaseExecutor.java
Patch:
@@ -172,9 +172,10 @@ protected T executeAutoCommitTrue(Object[] args) throws Throwable {
     protected abstract TableRecords afterImage(TableRecords beforeImage) throws SQLException;
 
     private static class LockRetryPolicy extends ConnectionProxy.LockRetryPolicy {
+        private final ConnectionProxy connection;
 
         LockRetryPolicy(final ConnectionProxy connection) {
-            super(connection);
+            this.connection = connection;
         }
 
         @Override

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/AbstractDMLBaseExecutor.java
Patch:
@@ -172,10 +172,9 @@ protected T executeAutoCommitTrue(Object[] args) throws Throwable {
     protected abstract TableRecords afterImage(TableRecords beforeImage) throws SQLException;
 
     private static class LockRetryPolicy extends ConnectionProxy.LockRetryPolicy {
-        private final ConnectionProxy connection;
 
         LockRetryPolicy(final ConnectionProxy connection) {
-            this.connection = connection;
+            super(connection);
         }
 
         @Override

File: server/src/test/java/io/seata/server/event/DefaultCoreForEventBusTest.java
Patch:
@@ -66,6 +66,8 @@ public void processGlobalTransactionEvent(GlobalTransactionEvent event) {
             DefaultCore core = new DefaultCore(remotingServer);
 
             GlobalTransactionEventSubscriber subscriber = new GlobalTransactionEventSubscriber();
+            // avoid transactional interference from other unit tests
+            Thread.sleep(1500);
             EventBusManager.get().register(subscriber);
 
             //start a transaction

File: core/src/main/java/io/seata/core/event/EventBus.java
Patch:
@@ -16,7 +16,7 @@
 package io.seata.core.event;
 
 /**
- * The interface fot event bus.
+ * The interface for event bus.
  *
  * @author zhengyangyong
  */

File: rm-datasource/src/test/java/io/seata/rm/datasource/exec/MySQLInsertExecutorTest.java
Patch:
@@ -85,7 +85,8 @@ public class MySQLInsertExecutorTest {
     public void init() throws SQLException {
         ConnectionProxy connectionProxy = mock(ConnectionProxy.class);
         when(connectionProxy.getDbType()).thenReturn(JdbcConstants.MYSQL);
-        when(connectionProxy.getDataSourceProxy()).thenReturn(new DataSourceProxy(new MockDataSource()));
+        DataSourceProxy dataSourceProxy = new DataSourceProxy(new MockDataSource());
+        when(connectionProxy.getDataSourceProxy()).thenReturn(dataSourceProxy);
 
         statementProxy = mock(PreparedStatementProxy.class);
         when(statementProxy.getConnectionProxy()).thenReturn(connectionProxy);

File: server/src/main/java/io/seata/server/session/GlobalSession.java
Patch:
@@ -157,10 +157,10 @@ public boolean isTimeout() {
     }
 
     /**
-     * prevent could not handle rollbacking transaction
-     * @return if true force roll back
+     * prevent could not handle committing and rollbacking transaction
+     * @return if true retry commit or roll back
      */
-    public boolean isRollbackingDead() {
+    public boolean isDeadSession() {
         return (System.currentTimeMillis() - beginTime) > (2 * 6000);
     }
 

File: server/src/main/java/io/seata/server/storage/db/session/DataBaseSessionManager.java
Patch:
@@ -168,7 +168,7 @@ public Collection<GlobalSession> allSessions() {
         if (SessionHolder.ASYNC_COMMITTING_SESSION_MANAGER_NAME.equalsIgnoreCase(taskName)) {
             return findGlobalSessions(new SessionCondition(GlobalStatus.AsyncCommitting));
         } else if (SessionHolder.RETRY_COMMITTING_SESSION_MANAGER_NAME.equalsIgnoreCase(taskName)) {
-            return findGlobalSessions(new SessionCondition(new GlobalStatus[] {GlobalStatus.CommitRetrying}));
+            return findGlobalSessions(new SessionCondition(new GlobalStatus[] {GlobalStatus.CommitRetrying, GlobalStatus.Committing}));
         } else if (SessionHolder.RETRY_ROLLBACKING_SESSION_MANAGER_NAME.equalsIgnoreCase(taskName)) {
             return findGlobalSessions(new SessionCondition(new GlobalStatus[] {GlobalStatus.RollbackRetrying,
                 GlobalStatus.Rollbacking, GlobalStatus.TimeoutRollbacking, GlobalStatus.TimeoutRollbackRetrying}));

File: server/src/main/java/io/seata/server/storage/redis/session/RedisSessionManager.java
Patch:
@@ -166,7 +166,7 @@ public Collection<GlobalSession> allSessions() {
         if (SessionHolder.ASYNC_COMMITTING_SESSION_MANAGER_NAME.equalsIgnoreCase(taskName)) {
             return findGlobalSessions(new SessionCondition(GlobalStatus.AsyncCommitting));
         } else if (SessionHolder.RETRY_COMMITTING_SESSION_MANAGER_NAME.equalsIgnoreCase(taskName)) {
-            return findGlobalSessions(new SessionCondition(new GlobalStatus[] {GlobalStatus.CommitRetrying}));
+            return findGlobalSessions(new SessionCondition(new GlobalStatus[] {GlobalStatus.CommitRetrying, GlobalStatus.Committing}));
         } else if (SessionHolder.RETRY_ROLLBACKING_SESSION_MANAGER_NAME.equalsIgnoreCase(taskName)) {
             return findGlobalSessions(new SessionCondition(new GlobalStatus[] {GlobalStatus.RollbackRetrying,
                 GlobalStatus.Rollbacking, GlobalStatus.TimeoutRollbacking, GlobalStatus.TimeoutRollbackRetrying}));

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoExecutor.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.List;
 
 import com.alibaba.fastjson.JSON;
+import io.seata.common.util.BlobUtils;
 import io.seata.common.util.IOUtil;
 import io.seata.common.util.StringUtils;
 import io.seata.config.ConfigurationFactory;
@@ -162,7 +163,7 @@ protected void undoPrepare(PreparedStatement undoPST, ArrayList<Field> undoValue
             if (type == JDBCType.BLOB.getVendorTypeNumber()) {
                 SerialBlob serialBlob = (SerialBlob) value;
                 if (serialBlob != null) {
-                    undoPST.setBlob(undoIndex, serialBlob.getBinaryStream());
+                    undoPST.setBytes(undoIndex, BlobUtils.blob2Bytes(serialBlob));
                 } else {
                     undoPST.setObject(undoIndex, null);
                 }

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoLogManager.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.Date;
 
 import io.seata.common.loader.LoadLevel;
-import io.seata.common.util.BlobUtils;
 import io.seata.core.compressor.CompressorType;
 import io.seata.core.constants.ClientTableColumnsName;
 import io.seata.rm.datasource.undo.AbstractUndoLogManager;
@@ -86,7 +85,7 @@ private void insertUndoLog(String xid, long branchId, String rollbackCtx, byte[]
             pst.setLong(1, branchId);
             pst.setString(2, xid);
             pst.setString(3, rollbackCtx);
-            pst.setBlob(4, BlobUtils.bytes2Blob(undoLogContent));
+            pst.setBytes(4, undoLogContent);
             pst.setInt(5, state.getValue());
             pst.executeUpdate();
         } catch (Exception e) {

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/oracle/OracleUndoLogManager.java
Patch:
@@ -16,7 +16,6 @@
 package io.seata.rm.datasource.undo.oracle;
 
 
-import java.io.ByteArrayInputStream;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
@@ -87,8 +86,7 @@ private void insertUndoLog(String xid, long branchID, String rollbackCtx, byte[]
             pst.setLong(1, branchID);
             pst.setString(2, xid);
             pst.setString(3, rollbackCtx);
-            ByteArrayInputStream inputStream = new ByteArrayInputStream(undoLogContent);
-            pst.setBlob(4, inputStream);
+            pst.setBytes(4, undoLogContent);
             pst.setInt(5, state.getValue());
             pst.executeUpdate();
         } catch (Exception e) {

File: sqlparser/seata-sqlparser-druid/src/main/java/io/seata/sqlparser/druid/mysql/MySQLUpdateRecognizer.java
Patch:
@@ -72,6 +72,9 @@ public List<String> getUpdateColumns() {
                 SQLExpr owner = ((SQLPropertyExpr)expr).getOwner();
                 if (owner instanceof SQLIdentifierExpr) {
                     list.add(((SQLIdentifierExpr)owner).getName() + "." + ((SQLPropertyExpr)expr).getName());
+                    //This is table Field Full path, like update xxx_database.xxx_tbl set xxx_database.xxx_tbl.xxx_field...
+                } else if (((SQLPropertyExpr)expr).getOwnernName().split("\\.").length > 1) {
+                    list.add(((SQLPropertyExpr)expr).getOwnernName() + "." + ((SQLPropertyExpr)expr).getName());
                 }
             } else {
                 throw new SQLParsingException("Unknown SQLExpr: " + expr.getClass() + " " + expr);

File: sqlparser/seata-sqlparser-druid/src/main/java/io/seata/sqlparser/druid/oracle/OracleUpdateRecognizer.java
Patch:
@@ -72,6 +72,9 @@ public List<String> getUpdateColumns() {
                 SQLExpr owner = ((SQLPropertyExpr)expr).getOwner();
                 if (owner instanceof SQLIdentifierExpr) {
                     list.add(((SQLIdentifierExpr)owner).getName() + "." + ((SQLPropertyExpr)expr).getName());
+                    //This is table Field Full path, like update xxx_database.xxx_tbl set xxx_database.xxx_tbl.xxx_field...
+                } else if (((SQLPropertyExpr) expr).getOwnernName().split("\\.").length > 1) {
+                    list.add(((SQLPropertyExpr)expr).getOwnernName()  + "." + ((SQLPropertyExpr)expr).getName());
                 }
             } else {
                 throw new SQLParsingException("Unknown SQLExpr: " + expr.getClass() + " " + expr);

File: sqlparser/seata-sqlparser-druid/src/main/java/io/seata/sqlparser/druid/postgresql/PostgresqlUpdateRecognizer.java
Patch:
@@ -68,6 +68,9 @@ public List<String> getUpdateColumns() {
                 SQLExpr owner = ((SQLPropertyExpr) expr).getOwner();
                 if (owner instanceof SQLIdentifierExpr) {
                     list.add(((SQLIdentifierExpr) owner).getName() + "." + ((SQLPropertyExpr) expr).getName());
+                    //This is table Field Full path, like update xxx_database.xxx_tbl set xxx_database.xxx_tbl.xxx_field...
+                } else if (((SQLPropertyExpr) expr).getOwnernName().split("\\.").length > 1) {
+                    list.add(((SQLPropertyExpr)expr).getOwnernName()  + "." + ((SQLPropertyExpr)expr).getName());
                 }
             } else {
                 throw new SQLParsingException("Unknown SQLExpr: " + expr.getClass() + " " + expr);

File: rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java
Patch:
@@ -70,7 +70,7 @@ private BranchStatus finishBranch(boolean committed, BranchType branchType, Stri
                     return BranchStatus.PhaseTwo_Committed;
                 } else {
                     connectionProxyXA.xaRollback(xid, branchId, applicationData);
-                    LOGGER.info(xaBranchXid + " was rolled back.");
+                    LOGGER.info(xaBranchXid + " was rollbacked");
                     return BranchStatus.PhaseTwo_Rollbacked;
                 }
             } catch (XAException | SQLException sqle) {

File: core/src/main/java/io/seata/core/store/db/AbstractDataSourceProvider.java
Patch:
@@ -205,7 +205,7 @@ protected String getPassword() {
                 password = ConfigTools.publicDecrypt(password, publicKey);
             } catch (Exception e) {
                 LOGGER.error(
-                    "decryption failed,please confirm whether the ciphertext and secret key are correct! error msg: ",
+                    "decryption failed,please confirm whether the ciphertext and secret key are correct! error msg: {}",
                     e.getMessage());
             }
         }

File: server/src/main/java/io/seata/server/storage/redis/JedisPooledFactory.java
Patch:
@@ -84,7 +84,7 @@ public static JedisPoolAbstract getJedisPoolInstance(JedisPoolAbstract... jedisP
                                     password = ConfigTools.publicDecrypt(password, publicKey);
                                 } catch (Exception e) {
                                     LOGGER.error(
-                                        "decryption failed,please confirm whether the ciphertext and secret key are correct! error msg: ",
+                                        "decryption failed,please confirm whether the ciphertext and secret key are correct! error msg: {}",
                                         e.getMessage());
                                 }
                             }

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/cache/AbstractTableMetaCache.java
Patch:
@@ -60,13 +60,14 @@ public TableMeta getTableMeta(final Connection connection, final String tableNam
             try {
                 return fetchSchema(connection, tableName);
             } catch (SQLException e) {
-                LOGGER.error("get table meta error:{}", e.getMessage(), e);
+                LOGGER.error("get table meta of the table `{}` error: {}", tableName, e.getMessage(), e);
                 return null;
             }
         });
 
         if (tmeta == null) {
-            throw new ShouldNeverHappenException(String.format("[xid:%s]get tablemeta failed", RootContext.getXID()));
+            throw new ShouldNeverHappenException(String.format("[xid:%s]get table meta failed," +
+                " please check whether the table `%s` exists.", RootContext.getXID(), tableName));
         }
         return tmeta;
     }

File: server/src/main/java/io/seata/server/coordinator/AbstractCore.java
Patch:
@@ -60,6 +60,9 @@ public abstract class AbstractCore implements Core {
     protected RemotingServer remotingServer;
 
     public AbstractCore(RemotingServer remotingServer) {
+        if (remotingServer == null) {
+            throw new IllegalArgumentException("remotingServer must be not null");
+        }
         this.remotingServer = remotingServer;
     }
 

File: server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorTest.java
Patch:
@@ -65,7 +65,6 @@
  * @author leizhiyuan
  */
 public class DefaultCoordinatorTest {
-    private static RemotingServer remotingServer;
     private static DefaultCoordinator defaultCoordinator;
 
     private static final String applicationId = "demo-child-app";
@@ -159,7 +158,6 @@ public void test_handleRetryRollbacking() throws TransactionException, Interrupt
 
     @Test
     public void test_handleRetryRollbackingTimeOut() throws TransactionException, InterruptedException, NoSuchFieldException, IllegalAccessException {
-        defaultCoordinator = new DefaultCoordinator(remotingServer);
         String xid = core.begin(applicationId, txServiceGroup, txName, 10);
         Long branchId = core.branchRegister(BranchType.AT, "abcd", clientId, xid, applicationData, lockKeys_2);
 
@@ -186,7 +184,6 @@ public void test_handleRetryRollbackingTimeOut() throws TransactionException, In
     @Test
     public void test_handleRetryRollbackingTimeOut_unlock() throws TransactionException, InterruptedException,
         NoSuchFieldException, IllegalAccessException {
-        defaultCoordinator = new DefaultCoordinator(remotingServer);
         String xid = core.begin(applicationId, txServiceGroup, txName, 10);
         Long branchId = core.branchRegister(BranchType.AT, "abcd", clientId, xid, applicationData, lockKeys_2);
 

File: server/src/test/java/io/seata/server/coordinator/DefaultCoreTest.java
Patch:
@@ -348,7 +348,7 @@ private static class MockCore extends AbstractCore {
          * @param rollbackStatus the rollback status
          */
         public MockCore(BranchStatus commitStatus, BranchStatus rollbackStatus) {
-            super(null);
+            super(new DefaultCoordinatorTest.MockServerMessageSender());
             this.commitStatus = commitStatus;
             this.rollbackStatus = rollbackStatus;
         }

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/AbstractDMLBaseExecutor.java
Patch:
@@ -135,7 +135,7 @@ private static <T> Predicate<T> distinctByKey(Function<? super T, ?> keyExtracto
     protected T executeAutoCommitTrue(Object[] args) throws Throwable {
         ConnectionProxy connectionProxy = statementProxy.getConnectionProxy();
         try {
-            connectionProxy.setAutoCommit(false);
+            connectionProxy.changeAutoCommit();
             return new LockRetryPolicy(connectionProxy).execute(() -> {
                 T result = executeAutoCommitFalse(args);
                 connectionProxy.commit();

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/AbstractDMLBaseExecutor.java
Patch:
@@ -191,8 +191,7 @@ public <T> T execute(Callable<T> callable) throws Exception {
         protected void onException(Exception e) throws Exception {
             ConnectionContext context = connection.getContext();
             //UndoItems can't use the Set collection class to prevent ABA
-            context.getUndoItems().clear();
-            context.getLockKeysBuffer().clear();
+            context.removeSavepoint(null);
             connection.getTargetConnection().rollback();
         }
 

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/SQLType.java
Patch:
@@ -205,9 +205,9 @@ public enum SQLType {
     SELECT_FOUND_ROWS(44),
 
     /**
-     * Insert ingore sql type.
+     * Insert ignore sql type.
      */
-    INSERT_INGORE(101),
+    INSERT_IGNORE(101),
     /**
      * Insert on duplicate update sql type.
      */

File: seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/StarterConstants.java
Patch:
@@ -16,7 +16,6 @@
 package io.seata.spring.boot.autoconfigure;
 
 import java.util.HashMap;
-import java.util.concurrent.CompletableFuture;
 
 /**
  * @author xingfudeshi@gmail.com
@@ -57,8 +56,7 @@ public interface StarterConstants {
     String CONFIG_CUSTOM_PREFIX = CONFIG_PREFIX + ".custom";
 
     int MAP_CAPACITY = 64;
-    HashMap<String, CompletableFuture<Object>> PROPERTY_BEAN_MAP = new HashMap<>(MAP_CAPACITY);
-
+    HashMap<String, Class<?>> PROPERTY_BEAN_MAP = new HashMap<>(MAP_CAPACITY);
     /**
      * The following special keys need to be normalized.
      */

File: seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/properties/SeataProperties.java
Patch:
@@ -18,15 +18,15 @@
 import io.seata.common.DefaultValues;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.context.properties.ConfigurationProperties;
-import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.stereotype.Component;
 
 import static io.seata.spring.boot.autoconfigure.StarterConstants.SEATA_PREFIX;
 
 /**
  * @author xingfudeshi@gmail.com
  */
+@Component
 @ConfigurationProperties(prefix = SEATA_PREFIX)
-@EnableConfigurationProperties(SpringCloudAlibabaConfiguration.class)
 public class SeataProperties {
     /**
      * whether enable auto configuration

File: seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/properties/SpringCloudAlibabaConfiguration.java
Patch:
@@ -22,12 +22,14 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.ApplicationContextAware;
+import org.springframework.stereotype.Component;
 
 /**
  * The type Spring cloud alibaba configuration.
  *
  * @author slievrly
  */
+@Component
 @ConfigurationProperties(prefix = StarterConstants.SEATA_SPRING_CLOUD_ALIBABA_PREFIX)
 public class SpringCloudAlibabaConfiguration implements ApplicationContextAware {
 

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/h2/keyword/H2KeywordChecker.java
Patch:
@@ -13,6 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
+
 package io.seata.rm.datasource.undo.h2.keyword;
 
 import io.seata.common.loader.LoadLevel;

File: saga/seata-saga-engine/src/main/java/io/seata/saga/engine/pcext/handlers/SubStateMachineHandler.java
Patch:
@@ -190,9 +190,8 @@ private StateMachineInstance forwardStateMachine(Map<String, Object> startParams
 
             return engine.forward(subInstId, startParams);
         } else {
-            throw new ForwardInvalidException(
-                "Cannot find sub statemachine [" + subStateMachine.getStateMachineName() + "]",
-                FrameworkErrorCode.ObjectNotExists);
+            originalStateInst.setStateMachineInstance(stateInstance.getStateMachineInstance());
+            return startNewStateMachine(startParams, engine, originalStateInst, subStateMachine);
         }
     }
 

File: core/src/main/java/io/seata/core/context/RootContext.java
Patch:
@@ -89,7 +89,7 @@ public static String getXID() {
      */
     public static void bind(@Nonnull String xid) {
         if (StringUtils.isBlank(xid)) {
-            throw new IllegalArgumentException("xid must be not blank");
+            xid = null;
         }
         if (LOGGER.isDebugEnabled()) {
             LOGGER.debug("bind {}", xid);

File: test/src/test/java/io/seata/saga/engine/mock/MockGlobalTransaction.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.seata.saga.engine.mock;
 
+import io.seata.core.context.RootContext;
 import io.seata.core.exception.TransactionException;
 import io.seata.core.model.GlobalStatus;
 import io.seata.saga.engine.sequence.SpringJvmUUIDSeqGenerator;
@@ -52,6 +53,7 @@ public void begin() throws TransactionException {
     public void begin(int timeout) throws TransactionException {
         status = GlobalStatus.Begin;
         xid = uuidSeqGenerator.generate(null).toString();
+        RootContext.bind(xid);
     }
 
     @Override

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/MultiUpdateExecutor.java
Patch:
@@ -80,7 +80,6 @@ protected TableRecords beforeImage() throws SQLException {
             sqlRecognizer = recognizer;
             SQLUpdateRecognizer sqlUpdateRecognizer = (SQLUpdateRecognizer) recognizer;
             List<String> updateColumns = sqlUpdateRecognizer.getUpdateColumns();
-            assertContainsPKColumnName(updateColumns);
             updateColumnsSet.addAll(updateColumns);
             if (noWhereCondition) {
                 continue;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/UpdateExecutor.java
Patch:
@@ -75,7 +75,6 @@ protected TableRecords beforeImage() throws SQLException {
     private String buildBeforeImageSQL(TableMeta tableMeta, ArrayList<List<Object>> paramAppenderList) {
         SQLUpdateRecognizer recognizer = (SQLUpdateRecognizer) sqlRecognizer;
         List<String> updateColumns = recognizer.getUpdateColumns();
-        assertContainsPKColumnName(updateColumns);
         StringBuilder prefix = new StringBuilder("SELECT ");
         StringBuilder suffix = new StringBuilder(" FROM ").append(getFromTableInSQL());
         String whereCondition = buildWhereCondition(recognizer, paramAppenderList);

File: saga/seata-saga-engine/src/main/java/io/seata/saga/engine/StateMachineEngine.java
Patch:
@@ -134,7 +134,7 @@ StateMachineInstance compensateAsync(String stateMachineInstId, Map<String, Obje
      * @return
      * @throws EngineExecutionException
      */
-    StateMachineInstance skipAndForward(String stateMachineInstId) throws EngineExecutionException;
+    StateMachineInstance skipAndForward(String stateMachineInstId, Map<String, Object> replaceParams) throws EngineExecutionException;
 
     /**
      * skip current failed state instance and forward restart state machine instance asynchronously

File: saga/seata-saga-engine/src/main/java/io/seata/saga/engine/impl/ProcessCtrlStateMachineEngine.java
Patch:
@@ -519,8 +519,8 @@ public StateMachineInstance compensateInternal(String stateMachineInstId, Map<St
     }
 
     @Override
-    public StateMachineInstance skipAndForward(String stateMachineInstId) throws EngineExecutionException {
-        return forwardInternal(stateMachineInstId, null, false, true, null);
+    public StateMachineInstance skipAndForward(String stateMachineInstId, Map<String, Object> replaceParams) throws EngineExecutionException {
+        return forwardInternal(stateMachineInstId, replaceParams, false, true, null);
     }
 
     @Override

File: saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/parser/StateMachineParserFactory.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class StateMachineParserFactory {
 
-    public static StateMachineParser getStateMachineParser() {
-        return new StateMachineParserImpl();
+    public static StateMachineParser getStateMachineParser(String jsonParserName) {
+        return new StateMachineParserImpl(jsonParserName);
     }
 }
\ No newline at end of file

File: saga/seata-saga-statelang/src/test/java/io/seata/saga/statelang/parser/StateParserTests.java
Patch:
@@ -37,7 +37,7 @@ public void testParser() throws IOException {
 
         ClassPathResource resource = new ClassPathResource("statelang/simple_statemachine.json");
         String json = io.seata.saga.statelang.parser.utils.IOUtils.toString(resource.getInputStream(), "UTF-8");
-        StateMachine stateMachine = StateMachineParserFactory.getStateMachineParser().parse(json);
+        StateMachine stateMachine = StateMachineParserFactory.getStateMachineParser(null).parse(json);
         stateMachine.setGmtCreate(new Date());
         Assertions.assertNotNull(stateMachine);
 

File: discovery/seata-discovery-zk/src/main/java/io/seata/discovery/registry/zk/ZookeeperRegisterServiceImpl.java
Patch:
@@ -260,6 +260,7 @@ private void recover() throws Exception {
         // recover client
         if (!LISTENER_SERVICE_MAP.isEmpty()) {
             Map<String, List<IZkChildListener>> listenerMap = new HashMap<>(LISTENER_SERVICE_MAP);
+            LISTENER_SERVICE_MAP.clear();
             for (Map.Entry<String, List<IZkChildListener>> listenerEntry : listenerMap.entrySet()) {
                 List<IZkChildListener> iZkChildListeners = listenerEntry.getValue();
                 if (CollectionUtils.isEmpty(iZkChildListeners)) {

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/DeleteExecutor.java
Patch:
@@ -26,6 +26,7 @@
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
+import io.seata.sqlparser.ParametersHolder;
 import io.seata.sqlparser.SQLDeleteRecognizer;
 import io.seata.sqlparser.SQLRecognizer;
 
@@ -70,7 +71,8 @@ private String buildBeforeImageSQL(SQLDeleteRecognizer visitor, TableMeta tableM
         if (StringUtils.isNotBlank(orderBy)) {
             suffix.append(orderBy);
         }
-        String limit = visitor.getLimit();
+        ParametersHolder parametersHolder = statementProxy instanceof ParametersHolder ? (ParametersHolder)statementProxy : null;
+        String limit = visitor.getLimit(parametersHolder, paramAppenderList);
         if (StringUtils.isNotBlank(limit)) {
             suffix.append(limit);
         }

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/UpdateExecutor.java
Patch:
@@ -34,6 +34,7 @@
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
+import io.seata.sqlparser.ParametersHolder;
 import io.seata.sqlparser.SQLRecognizer;
 import io.seata.sqlparser.SQLUpdateRecognizer;
 
@@ -85,7 +86,8 @@ private String buildBeforeImageSQL(TableMeta tableMeta, ArrayList<List<Object>>
         if (StringUtils.isNotBlank(orderBy)) {
             suffix.append(orderBy);
         }
-        String limit = recognizer.getLimit();
+        ParametersHolder parametersHolder = statementProxy instanceof ParametersHolder ? (ParametersHolder)statementProxy : null;
+        String limit = recognizer.getLimit(parametersHolder, paramAppenderList);
         if (StringUtils.isNotBlank(limit)) {
             suffix.append(limit);
         }

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/WhereRecognizer.java
Patch:
@@ -46,7 +46,7 @@ public interface WhereRecognizer extends SQLRecognizer {
      *
      * @return The limit SQL.
      */
-    default String getLimit() {
+    default String getLimit(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {
         return null;
     }
 

File: sqlparser/seata-sqlparser-druid/src/main/java/io/seata/sqlparser/druid/mysql/MySQLDeleteRecognizer.java
Patch:
@@ -94,8 +94,8 @@ public String getWhereCondition() {
     }
 
     @Override
-    public String getLimit() {
-        return super.getLimit(ast, getSQLType());
+    public String getLimit(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {
+        return super.getLimit(ast, getSQLType(), parametersHolder, paramAppenderList);
     }
 
     @Override

File: sqlparser/seata-sqlparser-druid/src/main/java/io/seata/sqlparser/druid/mysql/MySQLUpdateRecognizer.java
Patch:
@@ -132,8 +132,8 @@ public boolean visit(SQLExprTableSource x) {
     }
 
     @Override
-    public String getLimit() {
-        return super.getLimit(ast, getSQLType());
+    public String getLimit(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {
+        return super.getLimit(ast, getSQLType(), parametersHolder, paramAppenderList);
     }
 
     @Override

File: spring/src/main/java/io/seata/spring/annotation/datasource/AutoDataSourceProxyRegistrar.java
Patch:
@@ -47,6 +47,7 @@ public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, B
         if (!registry.containsBeanDefinition(BEAN_NAME_SEATA_DATA_SOURCE_BEAN_POST_PROCESSOR)) {
             AbstractBeanDefinition beanDefinition = BeanDefinitionBuilder
                 .genericBeanDefinition(SeataDataSourceBeanPostProcessor.class)
+                .addConstructorArgValue(excludes)
                 .addConstructorArgValue(dataSourceProxyMode)
                 .getBeanDefinition();
             registry.registerBeanDefinition(BEAN_NAME_SEATA_DATA_SOURCE_BEAN_POST_PROCESSOR, beanDefinition);

File: seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/StarterConstants.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.util.HashMap;
 
+import io.seata.spring.boot.autoconfigure.properties.SeataProperties;
 import io.seata.spring.boot.autoconfigure.properties.client.LockProperties;
 import io.seata.spring.boot.autoconfigure.properties.client.LogProperties;
 import io.seata.spring.boot.autoconfigure.properties.client.RmProperties;
@@ -86,6 +87,8 @@ public interface StarterConstants {
         private static final long serialVersionUID = -8902807645596274597L;
 
         {
+            put(SEATA_PREFIX, SeataProperties.class);
+
             put(CLIENT_RM_PREFIX, RmProperties.class);
             put(CLIENT_TM_PREFIX, TmProperties.class);
             put(LOCK_PREFIX, LockProperties.class);

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseTransactionalExecutor.java
Patch:
@@ -244,11 +244,11 @@ protected boolean containPK(String columnName) {
 
 
     /**
-     * get standard column name from user sql column name
+     * get standard pk column name from user sql column name
      *
      * @return
      */
-    protected String getStandardColumnName(String userColumnName) {
+    protected String getStandardPkColumnName(String userColumnName) {
         String newUserColumnName = ColumnUtils.delEscape(userColumnName, getDbType());
         for (String cn : getTableMeta().getPrimaryKeyOnlyName()) {
             if (cn.toUpperCase().equals(newUserColumnName.toUpperCase())) {

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/MultiUpdateExecutor.java
Patch:
@@ -80,6 +80,7 @@ protected TableRecords beforeImage() throws SQLException {
             sqlRecognizer = recognizer;
             SQLUpdateRecognizer sqlUpdateRecognizer = (SQLUpdateRecognizer) recognizer;
             List<String> updateColumns = sqlUpdateRecognizer.getUpdateColumns();
+            assertContainsPKColumnName(updateColumns);
             updateColumnsSet.addAll(updateColumns);
             if (noWhereCondition) {
                 continue;
@@ -132,7 +133,7 @@ protected TableRecords afterImage(TableRecords beforeImage) throws SQLException
         String selectSQL = buildAfterImageSQL(tmeta, beforeImage);
         ResultSet rs = null;
         try (PreparedStatement pst = statementProxy.getConnection().prepareStatement(selectSQL);) {
-            SqlGenerateUtils.setParamForPk(beforeImage.pkRows(),getTableMeta().getPrimaryKeyOnlyName(),pst);
+            SqlGenerateUtils.setParamForPk(beforeImage.pkRows(), getTableMeta().getPrimaryKeyOnlyName(), pst);
             rs = pst.executeQuery();
             return TableRecords.buildRecords(tmeta, rs);
         } finally {
@@ -149,7 +150,7 @@ private String buildAfterImageSQL(TableMeta tableMeta, TableRecords beforeImage)
             updateColumnsSet.addAll(sqlUpdateRecognizer.getUpdateColumns());
         }
         StringBuilder prefix = new StringBuilder("SELECT ");
-        String suffix = " FROM " + getFromTableInSQL() + " WHERE " + SqlGenerateUtils.buildWhereConditionByPKs(tableMeta.getPrimaryKeyOnlyName(),beforeImage.pkRows().size(),getDbType());
+        String suffix = " FROM " + getFromTableInSQL() + " WHERE " + SqlGenerateUtils.buildWhereConditionByPKs(tableMeta.getPrimaryKeyOnlyName(), beforeImage.pkRows().size(), getDbType());
         StringJoiner selectSQLJoiner = new StringJoiner(", ", prefix.toString(), suffix);
         if (ONLY_CARE_UPDATE_COLUMNS) {
             if (!containsPK(new ArrayList<>(updateColumnsSet))) {

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/UpdateExecutor.java
Patch:
@@ -73,6 +73,8 @@ protected TableRecords beforeImage() throws SQLException {
 
     private String buildBeforeImageSQL(TableMeta tableMeta, ArrayList<List<Object>> paramAppenderList) {
         SQLUpdateRecognizer recognizer = (SQLUpdateRecognizer) sqlRecognizer;
+        List<String> updateColumns = recognizer.getUpdateColumns();
+        assertContainsPKColumnName(updateColumns);
         StringBuilder prefix = new StringBuilder("SELECT ");
         StringBuilder suffix = new StringBuilder(" FROM ").append(getFromTableInSQL());
         String whereCondition = buildWhereCondition(recognizer, paramAppenderList);
@@ -90,7 +92,6 @@ private String buildBeforeImageSQL(TableMeta tableMeta, ArrayList<List<Object>>
         suffix.append(" FOR UPDATE");
         StringJoiner selectSQLJoin = new StringJoiner(", ", prefix.toString(), suffix.toString());
         if (ONLY_CARE_UPDATE_COLUMNS) {
-            List<String> updateColumns = recognizer.getUpdateColumns();
             if (!containsPK(updateColumns)) {
                 selectSQLJoin.add(getColumnNamesInSQL(tableMeta.getEscapePkNameList(getDbType())));
             }

File: common/src/main/java/io/seata/common/util/BeanUtils.java
Patch:
@@ -39,7 +39,7 @@ public static String beanToString(Object o) {
         }
 
         Field[] fields = o.getClass().getDeclaredFields();
-        StringBuffer buffer = new StringBuffer();
+        StringBuilder buffer = new StringBuilder();
         buffer.append("[");
         for (Field field : fields) {
             Object val = null;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/AbstractDMLBaseExecutor.java
Patch:
@@ -15,12 +15,10 @@
  */
 package io.seata.rm.datasource.exec;
 
-
 import java.sql.SQLException;
 import java.sql.Statement;
 import java.util.List;
 import java.util.concurrent.Callable;
-
 import io.seata.common.exception.NotSupportYetException;
 import io.seata.rm.datasource.AbstractConnectionProxy;
 import io.seata.rm.datasource.ConnectionContext;
@@ -43,6 +41,9 @@ public abstract class AbstractDMLBaseExecutor<T, S extends Statement> extends Ba
 
     private static final Logger LOGGER = LoggerFactory.getLogger(AbstractDMLBaseExecutor.class);
 
+    protected static final String WHERE = " WHERE ";
+
+
     /**
      * Instantiates a new Abstract dml base executor.
      *

File: sqlparser/seata-sqlparser-druid/src/main/java/io/seata/sqlparser/druid/mysql/MySQLSelectForUpdateRecognizer.java
Patch:
@@ -58,7 +58,7 @@ public SQLType getSQLType() {
 
     @Override
     public String getWhereCondition(final ParametersHolder parametersHolder,
-                                    final ArrayList<List<Object>> paramAppenderList) {
+        final ArrayList<List<Object>> paramAppenderList) {
         SQLSelectQueryBlock selectQueryBlock = getSelect();
         SQLExpr where = selectQueryBlock.getWhere();
         return super.getWhereCondition(where, parametersHolder, paramAppenderList);

File: sqlparser/seata-sqlparser-druid/src/main/java/io/seata/sqlparser/druid/oracle/OracleDeleteRecognizer.java
Patch:
@@ -75,7 +75,7 @@ public boolean visit(SQLExprTableSource x) {
 
     @Override
     public String getWhereCondition(final ParametersHolder parametersHolder,
-                                    final ArrayList<List<Object>> paramAppenderList) {
+        final ArrayList<List<Object>> paramAppenderList) {
         SQLExpr where = ast.getWhere();
         return super.getWhereCondition(where, parametersHolder, paramAppenderList);
     }

File: sqlparser/seata-sqlparser-druid/src/main/java/io/seata/sqlparser/druid/oracle/OracleSelectForUpdateRecognizer.java
Patch:
@@ -59,7 +59,7 @@ public SQLType getSQLType() {
 
     @Override
     public String getWhereCondition(final ParametersHolder parametersHolder,
-                                    final ArrayList<List<Object>> paramAppenderList) {
+        final ArrayList<List<Object>> paramAppenderList) {
         SQLSelectQueryBlock selectQueryBlock = getSelect();
         SQLExpr where = selectQueryBlock.getWhere();
         return super.getWhereCondition(where, parametersHolder, paramAppenderList);

File: sqlparser/seata-sqlparser-druid/src/main/java/io/seata/sqlparser/druid/oracle/OracleUpdateRecognizer.java
Patch:
@@ -99,7 +99,7 @@ public List<Object> getUpdateValues() {
 
     @Override
     public String getWhereCondition(final ParametersHolder parametersHolder,
-                                    final ArrayList<List<Object>> paramAppenderList) {
+        final ArrayList<List<Object>> paramAppenderList) {
         SQLExpr where = ast.getWhere();
         return super.getWhereCondition(where, parametersHolder, paramAppenderList);
     }

File: spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java
Patch:
@@ -154,7 +154,7 @@ public Object invoke(final MethodInvocation methodInvocation) throws Throwable {
         return methodInvocation.proceed();
     }
 
-    private Object handleGlobalLock(final MethodInvocation methodInvocation) throws Exception {
+    Object handleGlobalLock(final MethodInvocation methodInvocation) throws Exception {
         return globalLockTemplate.execute(() -> {
             try {
                 return methodInvocation.proceed();
@@ -166,7 +166,7 @@ private Object handleGlobalLock(final MethodInvocation methodInvocation) throws
         });
     }
 
-    private Object handleGlobalTransaction(final MethodInvocation methodInvocation,
+    Object handleGlobalTransaction(final MethodInvocation methodInvocation,
         final GlobalTransactional globalTrxAnno) throws Throwable {
         boolean succeed = true;
         try {

File: tcc/src/main/java/io/seata/rm/tcc/api/LocalTCC.java
Patch:
@@ -25,6 +25,8 @@
  * Local TCC bean annotation, add on the TCC interface
  *
  * @author zhangsen
+ * @see io.seata.spring.annotation.GlobalTransactionScanner#wrapIfNecessary(Object, String, Object) // the scanner for TM, GlobalLock, and TCC mode
+ * @see io.seata.rm.tcc.remoting.parser.LocalTCCRemotingParser // the RemotingParser impl for LocalTCC
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)

File: tm/src/main/java/io/seata/tm/api/GlobalTransactionContext.java
Patch:
@@ -32,9 +32,9 @@ private GlobalTransactionContext() {
     /**
      * Try to create a new GlobalTransaction.
      *
-     * @return
+     * @return the new global transaction
      */
-    private static GlobalTransaction createNew() {
+    public static GlobalTransaction createNew() {
         return new DefaultGlobalTransaction();
     }
 
@@ -43,7 +43,7 @@ private static GlobalTransaction createNew() {
      *
      * @return null if no transaction context there.
      */
-    private static GlobalTransaction getCurrent() {
+    public static GlobalTransaction getCurrent() {
         String xid = RootContext.getXID();
         if (xid == null) {
             return null;

File: server/src/main/java/io/seata/server/storage/redis/store/RedisTransactionStoreManager.java
Patch:
@@ -51,7 +51,7 @@
 public class RedisTransactionStoreManager extends AbstractTransactionStoreManager implements TransactionStoreManager {
 
     // global transaction prefix
-    private static final String DEFAULT_REDIS_SEATA_GLOBAL_PREFIX = "SEATA_GLOBAL_";
+    private static final String DEFAULT_REDIS_SEATA_GLOBAL_SESSION_PREFIX = "SEATA_GLOBAL_SESSION_";
 
     // the prefix of the branchs transaction
     private static final String DEFAULT_REDIS_SEATA_XID_BRANCHS_PREFIX = "SEATA_XID_BRANCHS_";
@@ -394,7 +394,7 @@ private Set<String> lRange(Jedis jedis, String key) {
     }
 
     private String getGlobalKeyByXid(String xid) {
-        return DEFAULT_REDIS_SEATA_GLOBAL_PREFIX + xid;
+        return DEFAULT_REDIS_SEATA_GLOBAL_SESSION_PREFIX + xid;
     }
 
     private String getBranchListKeyByXid(String xid) {

File: server/src/main/java/io/seata/server/storage/redis/store/RedisTransactionStoreManager.java
Patch:
@@ -117,8 +117,9 @@ private boolean deleteBranchTransactionDO(BranchTransactionDO branchTransactionD
     private boolean insertOrUpdateBranchTransactionDO(BranchTransactionDO branchTransactionDO) {
         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {
             String key = getBranchKey(branchTransactionDO.getBranchId());
+            String branch = jedis.get(key);
             Pipeline pipeline = jedis.pipelined();
-            if (jedis.get(key) == null) {
+            if (StringUtils.isEmpty(branch)) {
                 pipeline.lpush(getBranchListKeyByXid(branchTransactionDO.getXid()), key);
             }
             pipeline.set(key, JSON.toJSONString(branchTransactionDO));

File: spring/src/main/java/io/seata/spring/tcc/TccActionInterceptor.java
Patch:
@@ -64,7 +64,7 @@ public TccActionInterceptor(RemotingDesc remotingDesc) {
 
     @Override
     public Object invoke(final MethodInvocation invocation) throws Throwable {
-        if (!RootContext.inGlobalTransaction()) {
+        if (!RootContext.inGlobalTransaction() || RootContext.inSagaBranch()) {
             //not in transaction
             return invocation.proceed();
         }

File: server/src/main/java/io/seata/server/env/ContainerHelper.java
Patch:
@@ -27,6 +27,7 @@
 import static io.seata.common.DefaultValues.SERVER_DEFAULT_PORT;
 
 /**
+ * @author xingfudeshi@gmail.com
  * @author wang.liang
  */
 public class ContainerHelper {

File: rm-datasource/src/main/java/io/seata/rm/datasource/xa/AbstractDataSourceProxyXA.java
Patch:
@@ -40,9 +40,11 @@ public ConnectionProxyXA getConnectionForXAFinish(XAXid xaXid) throws SQLExcepti
         if (connectionProxyXA != null) {
             return connectionProxyXA;
         }
-        return (ConnectionProxyXA)getConnection();
+        return (ConnectionProxyXA)getConnectionProxyXA();
     }
 
+    protected abstract Connection getConnectionProxyXA() throws SQLException;
+
     /**
      * Force close the physical connection kept for XA branch of given XAXid.
      * @param xaXid the given XAXid

File: common/src/main/java/io/seata/common/DefaultValues.java
Patch:
@@ -75,6 +75,7 @@ public class DefaultValues {
 
     public static final int DEFAULT_TM_COMMIT_RETRY_COUNT = 5;
     public static final int DEFAULT_TM_ROLLBACK_RETRY_COUNT = 5;
+    public static final int DEFAULT_GLOBAL_TRANSACTION_TIMEOUT = 60000;
 
     public static final String DEFAULT_TX_GROUP = "my_test_tx_group";
     public static final String DEFAULT_TC_CLUSTER = "default";

File: seata-spring-boot-starter/src/test/java/io/seata/spring/boot/autoconfigure/PropertiesTest.java
Patch:
@@ -49,6 +49,7 @@
 import org.springframework.beans.factory.support.BeanDefinitionBuilder;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 
+import static io.seata.common.DefaultValues.DEFAULT_GLOBAL_TRANSACTION_TIMEOUT;
 import static io.seata.common.DefaultValues.DEFAULT_TM_COMMIT_RETRY_COUNT;
 import static io.seata.common.DefaultValues.DEFAULT_TM_ROLLBACK_RETRY_COUNT;
 import static io.seata.common.DefaultValues.DEFAULT_TRANSACTION_UNDO_LOG_TABLE;
@@ -123,6 +124,7 @@ public void testThreadFactoryProperties() {
     public void testTmProperties() {
         assertEquals(DEFAULT_TM_COMMIT_RETRY_COUNT, context.getBean(TmProperties.class).getCommitRetryCount());
         assertEquals(DEFAULT_TM_ROLLBACK_RETRY_COUNT, context.getBean(TmProperties.class).getRollbackRetryCount());
+        assertEquals(DEFAULT_GLOBAL_TRANSACTION_TIMEOUT, context.getBean(TmProperties.class).getDefaultGlobalTransactionTimeout());
     }
 
     @Test

File: spring/src/test/java/io/seata/spring/annotation/MethodDescTest.java
Patch:
@@ -18,8 +18,8 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import io.seata.common.exception.FrameworkException;
+import io.seata.common.DefaultValues;
 import io.seata.core.context.RootContext;
-import io.seata.tm.api.transaction.TransactionInfo;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
@@ -53,7 +53,7 @@ public void testGetAnnotation() throws NoSuchMethodException {
         Assertions.assertEquals(transactional.timeoutMills(), 300000);
         method = null;
         transactional = globalTransactionalInterceptor.getAnnotation(method, targetClass, GlobalTransactional.class);
-        Assertions.assertEquals(transactional.timeoutMills(), TransactionInfo.DEFAULT_TIME_OUT * 2);
+        Assertions.assertEquals(transactional.timeoutMills(), DefaultValues.DEFAULT_GLOBAL_TRANSACTION_TIMEOUT * 2);
         targetClass = null;
         transactional = globalTransactionalInterceptor.getAnnotation(method, targetClass, GlobalTransactional.class);
         Assertions.assertNull(transactional);
@@ -133,7 +133,7 @@ private MethodDesc getMethodDesc() throws NoSuchMethodException, InvocationTarge
     /**
      * the type mock business
      */
-    @GlobalTransactional(timeoutMills = TransactionInfo.DEFAULT_TIME_OUT * 2)
+    @GlobalTransactional(timeoutMills = DefaultValues.DEFAULT_GLOBAL_TRANSACTION_TIMEOUT * 2)
     private static class MockBusiness {
         @GlobalTransactional(timeoutMills = 300000, name = "busi-doBiz")
         public String doBiz(String msg) {

File: tm/src/main/java/io/seata/tm/api/transaction/TransactionInfo.java
Patch:
@@ -25,8 +25,6 @@
  */
 public final class TransactionInfo implements Serializable {
 
-    public static final int DEFAULT_TIME_OUT = 60000;
-
     private int timeOut;
 
     private String name;

File: server/src/main/java/io/seata/server/session/GlobalSession.java
Patch:
@@ -246,10 +246,12 @@ public void addBranch(BranchSession branchSession) throws TransactionException {
 
     @Override
     public void removeBranch(BranchSession branchSession) throws TransactionException {
+        if (!branchSession.unlock()) {
+            throw new TransactionException("Unlock branch lock failed!");
+        }
         for (SessionLifecycleListener lifecycleListener : lifecycleListeners) {
             lifecycleListener.onRemoveBranch(this, branchSession);
         }
-        branchSession.unlock();
         remove(branchSession);
     }
 

File: server/src/main/java/io/seata/server/storage/redis/lock/RedisLocker.java
Patch:
@@ -168,12 +168,11 @@ public boolean releaseLock(String xid, List<Long> branchIds) {
                 List<String> values = jedis.mget(keys.toArray(new String[0]));
                 for (String value : values) {
                     Iterator<Long> it = branchIds.iterator();
+                    LockDO lock = JSON.parseObject(value, LockDO.class);
                     while (it.hasNext()) {
                         Long branchId = it.next();
-                        LockDO lock = JSON.parseObject(value, LockDO.class);
                         if (lock != null && Objects.equals(lock.getBranchId(), branchId)) {
                             delKeys.add(getLockKey(lock.getRowKey()));
-                            it.remove();
                             break;
                         }
                     }

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/AbstractUndoExecutorTest.java
Patch:
@@ -209,7 +209,7 @@ public void testBuildWhereConditionByPKs() throws SQLException {
         pkRowValues.put("id2",pkId2Values);
 
         String sql=SqlGenerateUtils.buildWhereConditionByPKs(pkNameList,pkRowValues.get("id1").size(),"mysql");
-        Assertions.assertEquals(" (id1,id2 ) in (  (?,?) , (?,?) , (?,?)  )",sql);
+        Assertions.assertEquals("(id1,id2) in ( (?,?),(?,?),(?,?) )",sql);
     }
 
     @Test
@@ -225,7 +225,7 @@ public void testBuildWhereConditionByPK() throws SQLException {
         pkRowValues.put("id1",pkId1Values);
 
         String sql=SqlGenerateUtils.buildWhereConditionByPKs(pkNameList,pkRowValues.get("id1").size(),"mysql");
-        Assertions.assertEquals(" (id1 ) in (  (?)  )",sql);
+        Assertions.assertEquals("(id1) in ( (?) )",sql);
     }
 }
 

File: config/seata-config-apollo/src/main/java/io/seata/config/apollo/ApolloConfiguration.java
Patch:
@@ -78,7 +78,7 @@ private ApolloConfiguration() {
                         MAX_CONFIG_OPERATE_THREAD, Integer.MAX_VALUE, TimeUnit.MILLISECONDS,
                         new LinkedBlockingQueue<>(),
                         new NamedThreadFactory("apolloConfigOperate", MAX_CONFIG_OPERATE_THREAD));
-                    config.addChangeListener((changeEvent) -> {
+                    config.addChangeListener(changeEvent -> {
                         for (String key : changeEvent.changedKeys()) {
                             if (!LISTENER_SERVICE_MAP.containsKey(key)) {
                                 continue;

File: core/src/main/java/io/seata/core/rpc/netty/RmNettyRemotingClient.java
Patch:
@@ -252,7 +252,7 @@ public void destroy() {
 
     @Override
     protected Function<String, NettyPoolKey> getPoolKeyFunction() {
-        return (serverAddress) -> {
+        return serverAddress -> {
             String resourceIds = getMergedResourceKeys();
             if (resourceIds != null && LOGGER.isInfoEnabled()) {
                 LOGGER.info("RM will register :{}", resourceIds);

File: core/src/main/java/io/seata/core/rpc/netty/TmNettyRemotingClient.java
Patch:
@@ -159,7 +159,7 @@ public void destroy() {
 
     @Override
     protected Function<String, NettyPoolKey> getPoolKeyFunction() {
-        return (severAddress) -> {
+        return severAddress -> {
             RegisterTMRequest message = new RegisterTMRequest(applicationId, transactionServiceGroup);
             return new NettyPoolKey(NettyPoolKey.TransactionRole.TMROLE, severAddress, message);
         };

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoExecutor.java
Patch:
@@ -68,7 +68,7 @@ public abstract class AbstractUndoExecutor {
      * template of check sql
      * TODO support multiple primary key
      */
-    private static final String CHECK_SQL_TEMPLATE = "SELECT * FROM %s WHERE %s";
+    private static final String CHECK_SQL_TEMPLATE = "SELECT * FROM %s WHERE %s FOR UPDATE";
 
     /**
      * Switch of undo data validation

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/parser/FastjsonUndoLogParser.java
Patch:
@@ -53,7 +53,7 @@ public byte[] getDefaultContent() {
 
     @Override
     public byte[] encode(BranchUndoLog branchUndoLog) {
-        String json = JSON.toJSONString(branchUndoLog, filter, SerializerFeature.WriteDateUseDateFormat);
+        String json = JSON.toJSONString(branchUndoLog, filter, SerializerFeature.WriteClassName, SerializerFeature.WriteDateUseDateFormat);
         return json.getBytes(Constants.DEFAULT_CHARSET);
     }
 

File: integration/dubbo-alibaba/src/main/java/io/seata/integration/dubbo/alibaba/AlibabaDubboTransactionPropagationFilter.java
Patch:
@@ -72,8 +72,8 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
             return invoker.invoke(invocation);
         } finally {
             if (bind) {
-                String unbindXid = RootContext.unbind();
                 String previousBranchType = RootContext.getBranchType();
+                String unbindXid = RootContext.unbind();
                 if (StringUtils.equals(BranchType.TCC.name(), previousBranchType)) {
                     RootContext.unbindBranchType();
                 }

File: integration/dubbo/src/main/java/io/seata/integration/dubbo/ApacheDubboTransactionPropagationFilter.java
Patch:
@@ -69,8 +69,8 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept
             return invoker.invoke(invocation);
         } finally {
             if (bind) {
-                String unbindXid = RootContext.unbind();
                 String previousBranchType = RootContext.getBranchType();
+                String unbindXid = RootContext.unbind();
                 if (StringUtils.equals(BranchType.TCC.name(), previousBranchType)) {
                     RootContext.unbindBranchType();
                 }

File: discovery/seata-discovery-core/src/main/java/io/seata/discovery/registry/RegistryType.java
Patch:
@@ -54,7 +54,7 @@ public enum RegistryType {
      */
     Sofa,
     /**
-     * Sofa registry type
+     * Custom registry type
      */
     Custom;
 

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/KeywordChecker.java
Patch:
@@ -33,7 +33,7 @@ public interface KeywordChecker {
     /**
      * check whether given field or table name use keywords. the method has database special logic.
      * @param fieldOrTableName
-     * @return
+     * @return true: need to escape. false: no need to escape.
      */
     boolean checkEscape(String fieldOrTableName);
 

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/postgresql/keyword/PostgresqlKeywordChecker.java
Patch:
@@ -371,7 +371,7 @@ public boolean check(String fieldOrTableName) {
     @Override
     public boolean checkEscape(String fieldOrTableName) {
         boolean check = check(fieldOrTableName);
-        if (!check && containsUppercase(fieldOrTableName)) {
+        if (!check && !containsUppercase(fieldOrTableName)) {
             // postgresql
             // we are recommend table name and column name must lowercase.
             // if exists uppercase character or full uppercase, the table name or column name must bundle escape symbol.

File: config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java
Patch:
@@ -88,7 +88,7 @@ public Configuration proxy(Configuration originalConfiguration) {
                             CONFIG_CACHE.put(rawDataId, result);
                         }
                     }
-                    if (method.getReturnType().equals(String.class)) {
+                    if (null != result && method.getReturnType().equals(String.class)) {
                         return String.valueOf(result);
                     }
                     return result;

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/cache/PostgresqlTableMetaCache.java
Patch:
@@ -22,7 +22,6 @@
 import io.seata.common.exception.ShouldNeverHappenException;
 import io.seata.common.loader.LoadLevel;
 import io.seata.common.util.StringUtils;
-import io.seata.rm.datasource.ColumnUtils;
 import io.seata.rm.datasource.sql.struct.ColumnMeta;
 import io.seata.rm.datasource.sql.struct.IndexMeta;
 import io.seata.rm.datasource.sql.struct.IndexType;
@@ -61,7 +60,6 @@ protected String getCacheKey(Connection connection, String tableName, String res
     protected TableMeta fetchSchema(Connection connection, String tableName) throws SQLException {
         try {
             DatabaseMetaData dbmd = connection.getMetaData();
-            tableName = ColumnUtils.addEscape(tableName, JdbcConstants.POSTGRESQL);
             return resultSetMetaToSchema(dbmd, tableName);
         } catch (SQLException sqlEx) {
             throw sqlEx;

File: rm/src/main/java/io/seata/rm/AbstractRMHandler.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.seata.rm;
 
-import io.seata.common.exception.ShouldNeverHappenException;
 import io.seata.core.exception.AbstractExceptionHandler;
 import io.seata.core.exception.TransactionException;
 import io.seata.core.model.BranchStatus;
@@ -153,7 +152,7 @@ public AbstractResultMessage onRequest(AbstractMessage request, RpcContext conte
 
     @Override
     public void onResponse(AbstractResultMessage response, RpcContext context) {
-        throw new ShouldNeverHappenException();
+        LOGGER.info("the rm client received response msg [{}] from tc server.", response.toString());
     }
 
     public abstract BranchType getBranchType();

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseInsertExecutor.java
Patch:
@@ -144,7 +144,7 @@ protected Map<String,List<Object>> parsePkValuesFromStatement() {
         if (statementProxy instanceof PreparedStatementProxy) {
             PreparedStatementProxy preparedStatementProxy = (PreparedStatementProxy) statementProxy;
 
-            List<List<Object>> insertRows = recognizer.getInsertRows();
+            List<List<Object>> insertRows = recognizer.getInsertRows(pkIndexMap.values());
             if (insertRows != null && !insertRows.isEmpty()) {
                 Map<Integer,ArrayList<Object>> parameters = preparedStatementProxy.getParameters();
                 final int rowSize = insertRows.size();
@@ -195,7 +195,7 @@ protected Map<String,List<Object>> parsePkValuesFromStatement() {
             }
         } else {
             ps = false;
-            List<List<Object>> insertRows = recognizer.getInsertRows();
+            List<List<Object>> insertRows = recognizer.getInsertRows(pkIndexMap.values());
             for (List<Object> row : insertRows) {
                 for (String pkKey:pkIndexMap.keySet()) {
                     int pkIndex = pkIndexMap.get(pkKey);

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/SQLInsertRecognizer.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.seata.sqlparser;
 
+import java.util.Collection;
 import java.util.List;
 
 /**
@@ -40,7 +41,8 @@ public interface SQLInsertRecognizer extends SQLRecognizer {
     /**
      * Gets insert rows.
      *
+     * @param primaryKeyIndex insert sql primary key index.
      * @return the insert rows
      */
-    List<List<Object>> getInsertRows();
+    List<List<Object>> getInsertRows(Collection<Integer> primaryKeyIndex);
 }

File: rm-datasource/src/main/java/io/seata/rm/datasource/AbstractConnectionProxy.java
Patch:
@@ -114,9 +114,8 @@ public PreparedStatement prepareStatement(String sql) throws SQLException {
             if (sqlRecognizers != null && sqlRecognizers.size() == 1) {
                 SQLRecognizer sqlRecognizer = sqlRecognizers.get(0);
                 if (sqlRecognizer != null && sqlRecognizer.getSQLType() == SQLType.INSERT) {
-                    String tableName = ColumnUtils.delEscape(sqlRecognizer.getTableName(), dbType);
                     TableMeta tableMeta = TableMetaCacheFactory.getTableMetaCache(dbType).getTableMeta(getTargetConnection(),
-                            tableName, getDataSourceProxy().getResourceId());
+                            sqlRecognizer.getTableName(), getDataSourceProxy().getResourceId());
                     String[] pkNameArray = new String[tableMeta.getPrimaryKeyOnlyName().size()];
                     tableMeta.getPrimaryKeyOnlyName().toArray(pkNameArray);
                     targetPreparedStatement = getTargetConnection().prepareStatement(sql,pkNameArray);

File: rm-datasource/src/main/java/io/seata/rm/datasource/AbstractConnectionProxy.java
Patch:
@@ -15,13 +15,14 @@
  */
 package io.seata.rm.datasource;
 
+import io.seata.common.util.StringUtils;
 import io.seata.core.context.RootContext;
+import io.seata.core.model.BranchType;
 import io.seata.rm.datasource.sql.SQLVisitorFactory;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableMetaCacheFactory;
 import io.seata.sqlparser.SQLRecognizer;
 import io.seata.sqlparser.SQLType;
-
 import java.sql.Array;
 import java.sql.Blob;
 import java.sql.CallableStatement;
@@ -108,7 +109,7 @@ public PreparedStatement prepareStatement(String sql) throws SQLException {
         String dbType = getDbType();
         // support oracle 10.2+
         PreparedStatement targetPreparedStatement = null;
-        if (RootContext.inGlobalTransaction()) {
+        if (StringUtils.equals(BranchType.AT.name(), RootContext.getBranchType())) {
             List<SQLRecognizer> sqlRecognizers = SQLVisitorFactory.get(sql, dbType);
             if (sqlRecognizers != null && sqlRecognizers.size() == 1) {
                 SQLRecognizer sqlRecognizer = sqlRecognizers.get(0);

File: saga/seata-saga-processctrl/src/main/java/io/seata/saga/proctrl/HierarchicalProcessContext.java
Patch:
@@ -66,8 +66,9 @@ public interface HierarchicalProcessContext extends ProcessContext {
      * Remove variable locally.
      *
      * @param name the name
+     * @return the removed variable or null
      */
-    void removeVariableLocally(String name);
+    Object removeVariableLocally(String name);
 
     /**
      * Clear locally.

File: saga/seata-saga-processctrl/src/main/java/io/seata/saga/proctrl/ProcessContext.java
Patch:
@@ -61,8 +61,9 @@ public interface ProcessContext {
      * Remove variable.
      *
      * @param name the name
+     * @return the removed variable or null
      */
-    void removeVariable(String name);
+    Object removeVariable(String name);
 
     /**
      * Has variable boolean.

File: saga/seata-saga-engine/src/main/java/io/seata/saga/engine/pcext/handlers/SubStateMachineHandler.java
Patch:
@@ -100,7 +100,7 @@ public void process(ProcessContext context) throws EngineExecutionException {
                 stateInstance, subStateMachine);
 
             Map<String, Object> outputParams = subStateMachineInstance.getEndParams();
-            boolean isForward = DomainConstants.VAR_NAME_OPERATION_NAME.equals(
+            boolean isForward = DomainConstants.OPERATION_NAME_FORWARD.equals(
                 context.getVariable(DomainConstants.VAR_NAME_OPERATION_NAME));
             ExecutionStatus callSubMachineStatus = decideStatus(subStateMachineInstance, isForward);
             stateInstance.setStatus(callSubMachineStatus);

File: test/src/test/java/io/seata/saga/engine/db/StateMachineDBTests.java
Patch:
@@ -515,6 +515,7 @@ public void run() {
     }
 
     @Test
+    @Disabled("https://github.com/seata/seata/issues/2414#issuecomment-651526068")
     public void testCompensationAndSubStateMachineAsync() throws Exception {
 
         long start = System.currentTimeMillis();

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/ColumnMeta.java
Patch:
@@ -37,7 +37,7 @@ public class ColumnMeta {
     private String columnDef;
     private int sqlDataType;
     private int sqlDatetimeSub;
-    private int charOctetLength;
+    private Object charOctetLength;
     private int ordinalPosition;
     private String isNullAble;
     private String isAutoincrement;
@@ -337,7 +337,7 @@ public void setSqlDatetimeSub(int sqlDatetimeSub) {
      *
      * @return the char octet length
      */
-    public int getCharOctetLength() {
+    public Object getCharOctetLength() {
         return charOctetLength;
     }
 
@@ -346,7 +346,7 @@ public int getCharOctetLength() {
      *
      * @param charOctetLength the char octet length
      */
-    public void setCharOctetLength(int charOctetLength) {
+    public void setCharOctetLength(Object charOctetLength) {
         this.charOctetLength = charOctetLength;
     }
 

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/cache/PostgresqlTableMetaCache.java
Patch:
@@ -128,7 +128,7 @@ private TableMeta resultSetMetaToSchema(DatabaseMetaData dbmd, String tableName)
                 col.setColumnDef(rsColumns.getString("COLUMN_DEF"));
                 col.setSqlDataType(rsColumns.getInt("SQL_DATA_TYPE"));
                 col.setSqlDatetimeSub(rsColumns.getInt("SQL_DATETIME_SUB"));
-                col.setCharOctetLength(rsColumns.getInt("CHAR_OCTET_LENGTH"));
+                col.setCharOctetLength(rsColumns.getObject("CHAR_OCTET_LENGTH"));
                 col.setOrdinalPosition(rsColumns.getInt("ORDINAL_POSITION"));
                 col.setIsNullAble(rsColumns.getString("IS_NULLABLE"));
                 col.setIsAutoincrement(rsColumns.getString("IS_AUTOINCREMENT"));

File: test/src/test/java/io/seata/saga/engine/db/StateMachineDBTests.java
Patch:
@@ -540,6 +540,7 @@ public void testCompensationAndSubStateMachineAsync() throws Exception {
     }
 
     @Test
+    @Disabled("https://github.com/seata/seata/issues/2414#issuecomment-640432396")
     public void testCompensationAndSubStateMachineAsyncWithLayout() throws Exception {
 
         long start = System.currentTimeMillis();

File: tm/src/main/java/io/seata/tm/api/DefaultGlobalTransaction.java
Patch:
@@ -120,7 +120,7 @@ public void commit() throws TransactionException {
             return;
         }
         assertXIDNotNull();
-        int retry = COMMIT_RETRY_COUNT;
+        int retry = COMMIT_RETRY_COUNT <= 0 ? DEFAULT_TM_COMMIT_RETRY_COUNT : COMMIT_RETRY_COUNT;
         try {
             while (retry > 0) {
                 try {
@@ -156,7 +156,7 @@ public void rollback() throws TransactionException {
         }
         assertXIDNotNull();
 
-        int retry = ROLLBACK_RETRY_COUNT;
+        int retry = ROLLBACK_RETRY_COUNT <= 0 ? DEFAULT_TM_ROLLBACK_RETRY_COUNT : ROLLBACK_RETRY_COUNT;
         try {
             while (retry > 0) {
                 try {

File: tcc/src/main/java/io/seata/rm/tcc/TCCResourceManager.java
Patch:
@@ -23,7 +23,6 @@
 import com.alibaba.fastjson.JSON;
 
 import io.seata.common.Constants;
-import io.seata.common.exception.FrameworkException;
 import io.seata.common.exception.ShouldNeverHappenException;
 import io.seata.common.util.StringUtils;
 import io.seata.core.exception.TransactionException;
@@ -109,7 +108,7 @@ public BranchStatus branchCommit(BranchType branchType, String xid, long branchI
         } catch (Throwable t) {
             String msg = String.format("commit TCC resource error, resourceId: %s, xid: %s.", resourceId, xid);
             LOGGER.error(msg, t);
-            throw new FrameworkException(t, msg);
+            return BranchStatus.PhaseTwo_CommitFailed_Retryable;
         }
     }
 
@@ -154,7 +153,7 @@ public BranchStatus branchRollback(BranchType branchType, String xid, long branc
         } catch (Throwable t) {
             String msg = String.format("rollback TCC resource error, resourceId: %s, xid: %s.", resourceId, xid);
             LOGGER.error(msg, t);
-            throw new FrameworkException(t, msg);
+            return BranchStatus.PhaseTwo_RollbackFailed_Retryable;
         }
     }
 

File: saga/seata-saga-processctrl/src/main/java/io/seata/saga/proctrl/process/impl/CustomizeBusinessProcessor.java
Patch:
@@ -23,7 +23,6 @@
 import io.seata.saga.proctrl.ProcessType;
 import io.seata.saga.proctrl.handler.ProcessHandler;
 import io.seata.saga.proctrl.handler.RouterHandler;
-import io.seata.saga.proctrl.impl.ProcessControllerImpl;
 import io.seata.saga.proctrl.process.BusinessProcessor;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -36,7 +35,7 @@
  */
 public class CustomizeBusinessProcessor implements BusinessProcessor {
 
-    private static final Logger LOGGER = LoggerFactory.getLogger(ProcessControllerImpl.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(CustomizeBusinessProcessor.class);
 
     private Map<String, ProcessHandler> processHandlers;
 

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/mysql/MySQLInsertExecutor.java
Patch:
@@ -81,7 +81,7 @@ public List<Object> getPkValuesByAuto() throws SQLException {
 
         ResultSet genKeys;
         try {
-            genKeys = statementProxy.getTargetStatement().getGeneratedKeys();
+            genKeys = statementProxy.getGeneratedKeys();
         } catch (SQLException e) {
             // java.sql.SQLException: Generated keys not requested. You need to
             // specify Statement.RETURN_GENERATED_KEYS to

File: config/seata-config-core/src/main/java/io/seata/config/ConfigType.java
Patch:
@@ -66,6 +66,6 @@ public static ConfigType getType(String name) {
                 return configType;
             }
         }
-        throw new IllegalArgumentException("illegal type:" + name);
+        throw new IllegalArgumentException("not support config type: " + name);
     }
 }

File: discovery/seata-discovery-core/src/main/java/io/seata/discovery/registry/RegistryType.java
Patch:
@@ -15,8 +15,6 @@
  */
 package io.seata.discovery.registry;
 
-import io.seata.common.exception.NotSupportYetException;
-
 /**
  * The enum Registry type.
  *
@@ -72,6 +70,6 @@ public static RegistryType getType(String name) {
                 return registryType;
             }
         }
-        throw new NotSupportYetException("unsupported type:" + name);
+        throw new IllegalArgumentException("not support registry type: " + name);
     }
 }

File: metrics/seata-metrics-core/src/main/java/io/seata/metrics/exporter/ExporterType.java
Patch:
@@ -15,8 +15,6 @@
  */
 package io.seata.metrics.exporter;
 
-import io.seata.common.exception.NotSupportYetException;
-
 /**
  * Supported metrics exporter type
  *
@@ -42,7 +40,7 @@ public static ExporterType getType(String name) {
         if (PROMETHEUS.name().equalsIgnoreCase(name)) {
             return PROMETHEUS;
         } else {
-            throw new NotSupportYetException("unsupported type:" + name);
+            throw new IllegalArgumentException("not support exporter type: " + name);
         }
     }
 }

File: metrics/seata-metrics-core/src/main/java/io/seata/metrics/registry/RegistryType.java
Patch:
@@ -15,8 +15,6 @@
  */
 package io.seata.metrics.registry;
 
-import io.seata.common.exception.NotSupportYetException;
-
 /**
  * Supported metrics registry type
  *
@@ -42,7 +40,7 @@ public static RegistryType getType(String name) {
         if (COMPACT.name().equalsIgnoreCase(name)) {
             return COMPACT;
         } else {
-            throw new NotSupportYetException("unsupported type:" + name);
+            throw new IllegalArgumentException("not support registry type: " + name);
         }
     }
 }

File: server/src/main/java/io/seata/server/storage/db/store/DataBaseTransactionStoreManager.java
Patch:
@@ -35,7 +35,7 @@
 import io.seata.core.store.BranchTransactionDO;
 import io.seata.core.store.GlobalTransactionDO;
 import io.seata.core.store.LogStore;
-import io.seata.core.store.db.DataSourceGenerator;
+import io.seata.core.store.db.DataSourceProvider;
 import io.seata.server.session.BranchSession;
 import io.seata.server.session.GlobalSession;
 import io.seata.server.session.SessionCondition;
@@ -94,8 +94,7 @@ private DataBaseTransactionStoreManager() {
         logQueryLimit = CONFIG.getInt(ConfigurationKeys.STORE_DB_LOG_QUERY_LIMIT, DEFAULT_LOG_QUERY_LIMIT);
         String datasourceType = CONFIG.getConfig(ConfigurationKeys.STORE_DB_DATASOURCE_TYPE);
         //init dataSource
-        DataSourceGenerator dataSourceGenerator = EnhancedServiceLoader.load(DataSourceGenerator.class, datasourceType);
-        DataSource logStoreDataSource = dataSourceGenerator.generateDataSource();
+        DataSource logStoreDataSource = EnhancedServiceLoader.load(DataSourceProvider.class, datasourceType).provide();
         logStore = new LogStoreDataBaseDAO(logStoreDataSource);
     }
 

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoLogManager.java
Patch:
@@ -47,7 +47,7 @@ public class MySQLUndoLogManager extends AbstractUndoLogManager {
             + ClientTableColumnsName.UNDO_LOG_CONTEXT + ", " + ClientTableColumnsName.UNDO_LOG_ROLLBACK_INFO + ", "
             + ClientTableColumnsName.UNDO_LOG_LOG_STATUS + ", " + ClientTableColumnsName.UNDO_LOG_LOG_CREATED + ", "
             + ClientTableColumnsName.UNDO_LOG_LOG_MODIFIED + ")" +
-            " VALUES (?, ?, ?, ?, ?, now(), now())";
+            " VALUES (?, ?, ?, ?, ?, now(6), now(6))";
 
     private static final String DELETE_UNDO_LOG_BY_CREATE_SQL = "DELETE FROM " + UNDO_LOG_TABLE_NAME +
             " WHERE log_created <= ? LIMIT ?";

File: discovery/seata-discovery-sofa/src/main/java/io/seata/discovery/registry/sofa/SofaRegistryServiceImpl.java
Patch:
@@ -131,8 +131,9 @@ private RegistryClient getRegistryInstance() {
                         .setRegistryEndpoint(StringUtils.substringBefore(address, HOST_SEPERATOR))
                         .setRegistryEndpointPort(Integer.parseInt(portStr)).build();
 
-                    registryClient = new DefaultRegistryClient(config);
-                    ((DefaultRegistryClient)registryClient).init();
+                    DefaultRegistryClient result = new DefaultRegistryClient(config);
+                    result.init();
+                    registryClient = result;
                 }
             }
         }

File: discovery/seata-discovery-zk/src/main/java/io/seata/discovery/registry/zk/ZookeeperRegisterServiceImpl.java
Patch:
@@ -223,15 +223,15 @@ private ZkClient getClientInstance() {
     // visible for test.
     ZkClient buildZkClient(String address, int sessionTimeout, int connectTimeout,String... authInfo) {
         ZkClient zkClient = new ZkClient(address, sessionTimeout, connectTimeout);
-        if (!zkClient.exists(ROOT_PATH_WITHOUT_SUFFIX)) {
-            zkClient.createPersistent(ROOT_PATH_WITHOUT_SUFFIX, true);
-        }
         if (null != authInfo && authInfo.length == 2) {
             if (!StringUtils.isBlank(authInfo[0]) && !StringUtils.isBlank(authInfo[1])) {
                 StringBuilder auth = new StringBuilder(authInfo[0]).append(":").append(authInfo[1]);
                 zkClient.addAuthInfo("digest", auth.toString().getBytes());
             }
         }
+        if (!zkClient.exists(ROOT_PATH_WITHOUT_SUFFIX)) {
+            zkClient.createPersistent(ROOT_PATH_WITHOUT_SUFFIX, true);
+        }
         zkClient.subscribeStateChanges(new IZkStateListener() {
 
             @Override

File: tm/src/test/java/io/seata/tm/api/APITest.java
Patch:
@@ -20,7 +20,6 @@
 import io.seata.core.model.GlobalStatus;
 import io.seata.core.model.TransactionManager;
 import io.seata.tm.TransactionManagerHolder;
-import io.seata.tm.api.transaction.RollbackRule;
 import io.seata.tm.api.transaction.TransactionInfo;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;

File: core/src/main/java/io/seata/core/rpc/netty/RpcServerBootstrap.java
Patch:
@@ -126,7 +126,7 @@ public int getListenPort() {
     @Override
     public void start() {
         this.serverBootstrap.group(this.eventLoopGroupBoss, this.eventLoopGroupWorker)
-            .channel(nettyServerConfig.SERVER_CHANNEL_CLAZZ)
+            .channel(NettyServerConfig.SERVER_CHANNEL_CLAZZ)
             .option(ChannelOption.SO_BACKLOG, nettyServerConfig.getSoBackLogSize())
             .option(ChannelOption.SO_REUSEADDR, true)
             .childOption(ChannelOption.SO_KEEPALIVE, true)

File: core/src/main/java/io/seata/core/store/BranchTransactionDO.java
Patch:
@@ -29,17 +29,17 @@ public class BranchTransactionDO {
 
     private String xid;
 
-    private long transactionId;
+    private Long transactionId;
 
-    private long branchId;
+    private Long branchId;
 
     private String resourceGroupId;
 
     private String resourceId;
 
     private String branchType;
 
-    private int status = BranchStatus.Unknown.getCode();
+    private Integer status = BranchStatus.Unknown.getCode();
 
     private String clientId;
 

File: core/src/main/java/io/seata/core/store/db/sql/log/AbstractLogStoreSqls.java
Patch:
@@ -177,10 +177,12 @@ public String getQueryBranchTransaction(String branchTable, String paramsPlaceHo
                 .replace(PRAMETER_PLACEHOLD, paramsPlaceHolder);
     }
 
+    @Override
     public String getQueryGlobalMax(String globalTable) {
         return QUERY_MAX_TRANS_ID.replace(GLOBAL_TABLE_PLACEHOLD, globalTable);
     }
 
+    @Override
     public String getQueryBranchMax(String branchTable) {
         return QUERY_MAX_BTANCH_ID.replace(BRANCH_TABLE_PLACEHOLD, branchTable);
     }

File: rm-datasource/src/main/java/io/seata/rm/datasource/xa/XABranchXid.java
Patch:
@@ -49,10 +49,12 @@ public class XABranchXid implements XAXid {
         decode();
     }
 
+    @Override
     public String getGlobalXid() {
         return xid;
     }
 
+    @Override
     public long getBranchId() {
         return branchId;
     }

File: tcc/src/main/java/io/seata/rm/tcc/interceptor/ActionInterceptorHandler.java
Patch:
@@ -61,7 +61,7 @@ public Map<String, Object> proceed(Method method, Object[] arguments, String xid
         String actionName = businessAction.name();
         BusinessActionContext actionContext = new BusinessActionContext();
         actionContext.setXid(xid);
-        //set action anme
+        //set action name
         actionContext.setActionName(actionName);
 
         //Creating Branch Record

File: rm-datasource/src/main/java/io/seata/rm/datasource/AbstractStatementProxy.java
Patch:
@@ -222,7 +222,7 @@ public void addBatch(String sql) throws SQLException {
     @Override
     public void clearBatch() throws SQLException {
         targetStatement.clearBatch();
-
+        targetSQL = null;
     }
 
     @Override

File: discovery/seata-discovery-redis/src/main/java/io/seata/discovery/registry/redis/RedisRegistryServiceImpl.java
Patch:
@@ -184,9 +184,10 @@ public List<InetSocketAddress> lookup(String key) {
             return null;
         }
         if (!LISTENER_SERVICE_MAP.containsKey(clusterName)) {
+            String redisRegistryKey = REDIS_FILEKEY_PREFIX + clusterName;
             Map<String, String> instances;
             try (Jedis jedis = jedisPool.getResource()) {
-                instances = jedis.hgetAll(getRedisRegistryKey());
+                instances = jedis.hgetAll(redisRegistryKey);
             }
             if (null != instances && !instances.isEmpty()) {
                 Set<InetSocketAddress> newAddressSet = instances.keySet().stream()

File: seata-spring-boot-starter/src/test/java/io/seata/spring/boot/autoconfigure/PropertiesTest.java
Patch:
@@ -204,6 +204,9 @@ public void testRegistryNacosProperties() {
         assertEquals("localhost", context.getBean(RegistryNacosProperties.class).getServerAddr());
         assertEquals("", context.getBean(RegistryNacosProperties.class).getNamespace());
         assertEquals("default", context.getBean(RegistryNacosProperties.class).getCluster());
+        assertEquals("", context.getBean(RegistryNacosProperties.class).getUsername());
+        assertEquals("", context.getBean(RegistryNacosProperties.class).getPassword());
+        assertEquals("seata-server", context.getBean(RegistryNacosProperties.class).getApplication());
     }
 
     @Test

File: server/src/main/java/io/seata/server/store/DruidDataSourceGenerator.java
Patch:
@@ -44,7 +44,7 @@ public DataSource generateDataSource() {
         ds.setTimeBetweenEvictionRunsMillis(120000);
         ds.setMinEvictableIdleTimeMillis(300000);
         ds.setTestWhileIdle(true);
-        ds.setTestOnBorrow(true);
+        ds.setTestOnBorrow(false);
         ds.setPoolPreparedStatements(true);
         ds.setMaxPoolPreparedStatementPerConnectionSize(20);
         ds.setValidationQuery(getValidationQuery(getDBType()));

File: core/src/test/java/io/seata/core/rpc/RpcContextTest.java
Patch:
@@ -121,10 +121,10 @@ public void testResourceSetsNull() {
 	 */
 	@Test
 	public void testAddResourceNull() {
-		rpcContext.addResource(null);
 		HashSet<String> resourceSet = new HashSet<String>();
-		resourceSet.add(null);
-		Assertions.assertEquals(resourceSet, rpcContext.getResourceSets());
+		rpcContext.setResourceSets(resourceSet);
+		rpcContext.addResource(null);
+		Assertions.assertEquals(0, rpcContext.getResourceSets().size());
 	}
 
 	/**

File: rm-datasource/src/main/java/io/seata/rm/datasource/ConnectionProxy.java
Patch:
@@ -108,6 +108,9 @@ public boolean isGlobalLockRequire() {
      * @throws SQLException the sql exception
      */
     public void checkLock(String lockKeys) throws SQLException {
+        if (StringUtils.isBlank(lockKeys)) {
+            return;
+        }
         // Just check lock without requiring lock by now.
         try {
             boolean lockable = DefaultResourceManager.get().lockQuery(BranchType.AT,
@@ -198,7 +201,6 @@ private void doCommit() throws SQLException {
     }
 
     private void processLocalCommitWithGlobalLocks() throws SQLException {
-
         checkLock(context.buildLockKeys());
         try {
             targetConnection.commit();

File: server/src/main/java/io/seata/server/coordinator/DefaultCore.java
Patch:
@@ -131,7 +131,6 @@ public String begin(String applicationId, String transactionServiceGroup, String
         eventBus.post(new GlobalTransactionEvent(session.getTransactionId(), GlobalTransactionEvent.ROLE_TC,
                 session.getTransactionName(), session.getBeginTime(), null, session.getStatus()));
 
-        LOGGER.info("Successfully begin global transaction xid = {}", session.getXid());
         return session.getXid();
     }
 

File: server/src/main/java/io/seata/server/session/SessionHolder.java
Patch:
@@ -98,7 +98,7 @@ public static void init(String mode) throws IOException {
             //file store
             String sessionStorePath = CONFIG.getConfig(ConfigurationKeys.STORE_FILE_DIR,
                 DEFAULT_SESSION_STORE_FILE_DIR);
-            if (sessionStorePath == null) {
+            if (StringUtils.isBlank(sessionStorePath)) {
                 throw new StoreException("the {store.file.dir} is empty.");
             }
             ROOT_SESSION_MANAGER = EnhancedServiceLoader.load(SessionManager.class, StoreMode.FILE.getName(),

File: server/src/main/java/io/seata/server/storage/db/store/LogStoreDataBaseDAO.java
Patch:
@@ -469,7 +469,7 @@ private ColumnInfo queryTableStructure(final String tableName, String colName) {
         try (Connection conn = logStoreDataSource.getConnection()) {
             DatabaseMetaData dbmd = conn.getMetaData();
             String schema = getSchema(conn);
-            ResultSet tableRs = dbmd.getTables(null, schema, null, new String[]{"TABLE"});
+            ResultSet tableRs = dbmd.getTables(null, schema, "%", new String[]{"TABLE"});
             while (tableRs.next()) {
                 String table = tableRs.getString("TABLE_NAME");
                 if (StringUtils.equalsIgnoreCase(table, tableName)) {

File: server/src/main/java/io/seata/server/session/GlobalSession.java
Patch:
@@ -70,7 +70,7 @@ public class GlobalSession implements SessionLifecycle, SessionStorable {
 
     private String applicationData;
 
-    private boolean active = true;
+    private volatile boolean active = true;
 
     private final ArrayList<BranchSession> branchSessions = new ArrayList<>();
 

File: spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java
Patch:
@@ -154,6 +154,9 @@ public TransactionInfo getTransactionInfo() {
                 case RollbackFailure:
                     failureHandler.onRollbackFailure(e.getTransaction(), e.getCause());
                     throw e.getCause();
+                case RollbackRetrying:
+                    failureHandler.onRollbackRetrying(e.getTransaction(), e.getCause());
+                    throw e.getCause();
                 default:
                     throw new ShouldNeverHappenException(String.format("Unknown TransactionalExecutor.Code: %s", code));
 

File: config/seata-config-apollo/src/main/java/io/seata/config/apollo/ApolloConfiguration.java
Patch:
@@ -50,8 +50,8 @@
 public class ApolloConfiguration extends AbstractConfiguration {
 
     private static final String REGISTRY_TYPE = "apollo";
-    private static final String APP_ID = "app.id";
-    private static final String APOLLO_META = "apollo.meta";
+    private static final String APP_ID = "appId";
+    private static final String APOLLO_META = "apolloMeta";
     private static final String NAMESPACE = "namespace";
     private static final String DEFAULT_NAMESPACE = "application";
     private static final Configuration FILE_CONFIG = ConfigurationFactory.CURRENT_FILE_INSTANCE;

File: config/seata-config-zk/src/main/java/io/seata/config/zk/ZookeeperConfiguration.java
Patch:
@@ -56,8 +56,8 @@ public class ZookeeperConfiguration extends AbstractConfiguration {
     private static final String ROOT_PATH = ZK_PATH_SPLIT_CHAR + SEATA_FILE_ROOT_CONFIG;
     private static final Configuration FILE_CONFIG = ConfigurationFactory.CURRENT_FILE_INSTANCE;
     private static final String SERVER_ADDR_KEY = "serverAddr";
-    private static final String SESSION_TIMEOUT_KEY = "session.timeout";
-    private static final String CONNECT_TIMEOUT_KEY = "connect.timeout";
+    private static final String SESSION_TIMEOUT_KEY = "sessionTimeout";
+    private static final String CONNECT_TIMEOUT_KEY = "connectTimeout";
     private static final String AUTH_USERNAME = "username";
     private static final String AUTH_PASSWORD = "password";
     private static final int THREAD_POOL_NUM = 1;

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/parser/FastjsonUndoLogParser.java
Patch:
@@ -18,6 +18,7 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.serializer.SerializerFeature;
 import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
+
 import io.seata.common.Constants;
 import io.seata.common.loader.LoadLevel;
 import io.seata.rm.datasource.undo.BranchUndoLog;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/parser/KryoUndoLogParserTest.java
Patch:
@@ -30,4 +30,5 @@ public UndoLogParser getParser() {
         return parser;
     }
 
+
 }

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/parser/ProtostuffUndoLogParserTest.java
Patch:
@@ -29,4 +29,5 @@ class ProtostuffUndoLogParserTest extends BaseUndoLogParserTest {
     public UndoLogParser getParser() {
         return parser;
     }
+
 }
\ No newline at end of file

File: seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/SeataAutoConfiguration.java
Patch:
@@ -59,7 +59,7 @@ public GlobalTransactionScanner globalTransactionScanner(SeataProperties seataPr
     }
 
     @Bean(BEAN_NAME_SEATA_DATA_SOURCE_BEAN_POST_PROCESSOR)
-    @ConditionalOnProperty(prefix = StarterConstants.SEATA_PREFIX, name = "enableAutoDataSourceProxy", havingValue = "true", matchIfMissing = true)
+    @ConditionalOnProperty(prefix = StarterConstants.SEATA_PREFIX, name = {"enableAutoDataSourceProxy", "enable-auto-data-source-proxy"}, havingValue = "true", matchIfMissing = true)
     @ConditionalOnMissingBean(SeataDataSourceBeanPostProcessor.class)
     public SeataDataSourceBeanPostProcessor seataDataSourceBeanPostProcessor(SeataProperties seataProperties) {
         return new SeataDataSourceBeanPostProcessor(seataProperties.isUseJdkProxy());

File: core/src/main/java/io/seata/core/rpc/netty/NettyBaseConfig.java
Patch:
@@ -182,7 +182,7 @@ private static void raiseUnsupportedTransportError() throws RuntimeException {
     /**
      * The enum Work thread mode.
      */
-    enum WorkThreadMode {
+    public enum WorkThreadMode {
 
         /**
          * Auto work thread mode.

File: core/src/main/java/io/seata/core/rpc/netty/AbstractRpcRemotingClient.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.function.Function;
 
 import io.netty.channel.Channel;
+import io.netty.channel.ChannelHandler.Sharable;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.timeout.IdleState;
 import io.netty.handler.timeout.IdleStateEvent;
@@ -273,6 +274,7 @@ private void printMergeMessageLog(MergedWarpMessage mergeMessage) {
     /**
      * The type ClientHandler.
      */
+    @Sharable
     class ClientHandler extends AbstractHandler {
 
         @Override

File: core/src/main/java/io/seata/core/rpc/netty/AbstractRpcRemotingClient.java
Patch:
@@ -67,7 +67,8 @@ public abstract class AbstractRpcRemotingClient extends AbstractRpcRemoting
 
     private static final int MAX_MERGE_SEND_THREAD = 1;
     private static final long KEEP_ALIVE_TIME = Integer.MAX_VALUE;
-    private static final int SCHEDULE_INTERVAL_MILLS = 5;
+    private static final long SCHEDULE_DELAY_MILLS = 60 * 1000L;
+    private static final long SCHEDULE_INTERVAL_MILLS = 10 * 1000L;
     private static final String MERGE_THREAD_PREFIX = "rpcMergeMessageSend";
 
     private final RpcClientBootstrap clientBootstrap;
@@ -112,7 +113,7 @@ public void init() {
             public void run() {
                 clientChannelManager.reconnect(getTransactionServiceGroup());
             }
-        }, SCHEDULE_INTERVAL_MILLS, SCHEDULE_INTERVAL_MILLS, TimeUnit.SECONDS);
+        }, SCHEDULE_DELAY_MILLS, SCHEDULE_INTERVAL_MILLS, TimeUnit.MILLISECONDS);
         if (NettyClientConfig.isEnableClientBatchSendRequest()) {
             mergeSendExecutorService = new ThreadPoolExecutor(MAX_MERGE_SEND_THREAD,
                 MAX_MERGE_SEND_THREAD,

File: core/src/main/java/io/seata/core/constants/DefaultValues.java
Patch:
@@ -25,7 +25,7 @@ public class DefaultValues {
     public static final int DEFAULT_LOG_EXCEPTION_RATE = 100;
     public static final int DEFAULT_CLIENT_ASYNC_COMMIT_BUFFER_LIMIT = 10000;
     public static final int DEFAULT_CLIENT_REPORT_RETRY_COUNT = 5;
-    public static final boolean DEFAULT_CLIENT_REPORT_SUCCESS_ENABLE = true;
+    public static final boolean DEFAULT_CLIENT_REPORT_SUCCESS_ENABLE = false;
     public static final boolean DEFAULT_CLIENT_TABLE_META_CHECK_ENABLE = false;
     /**
      * Shutdown timeout default 3s
@@ -66,8 +66,8 @@ public class DefaultValues {
      */
     public static final String DEFAULT_LOCK_DB_TABLE = "lock_table";
 
-    public static final int DEFAULT_TM_COMMIT_RETRY_COUNT = 1;
-    public static final int DEFAULT_TM_ROLLBACK_RETRY_COUNT = 1;
+    public static final int DEFAULT_TM_COMMIT_RETRY_COUNT = 5;
+    public static final int DEFAULT_TM_ROLLBACK_RETRY_COUNT = 5;
 
     public static final String DEFAULT_TX_GROUP = "my_test_tx_group";
     public static final String DEFAULT_TC_CLUSTER = "default";

File: core/src/main/java/io/seata/core/rpc/netty/NettyBaseConfig.java
Patch:
@@ -36,6 +36,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import static io.seata.core.constants.DefaultValues.DEFAULT_TRANSPORT_HEARTBEAT;
+
 /**
  * The type Netty base config.
  *
@@ -161,7 +163,7 @@ public class NettyBaseConfig {
             default:
                 throw new IllegalArgumentException("unsupported.");
         }
-        boolean enableHeartbeat = CONFIG.getBoolean(ConfigurationKeys.TRANSPORT_HEARTBEAT, false);
+        boolean enableHeartbeat = CONFIG.getBoolean(ConfigurationKeys.TRANSPORT_HEARTBEAT, DEFAULT_TRANSPORT_HEARTBEAT);
         if (enableHeartbeat) {
             MAX_WRITE_IDLE_SECONDS = DEFAULT_WRITE_IDLE_SECONDS;
         } else {

File: seata-spring-boot-starter/src/test/java/io/seata/spring/boot/autoconfigure/PropertiesTest.java
Patch:
@@ -87,7 +87,7 @@ public void testRmProperties() {
         assertEquals(10000, context.getBean(RmProperties.class).getAsyncCommitBufferLimit());
         assertEquals(5, context.getBean(RmProperties.class).getReportRetryCount());
         assertFalse(context.getBean(RmProperties.class).isTableMetaCheckEnable());
-        assertTrue(context.getBean(RmProperties.class).isReportSuccessEnable());
+        assertFalse(context.getBean(RmProperties.class).isReportSuccessEnable());
     }
 
     @Test

File: server/src/main/java/io/seata/server/Server.java
Patch:
@@ -41,7 +41,7 @@ public class Server {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(Server.class);
 
-    private static final int MIN_SERVER_POOL_SIZE = 100;
+    private static final int MIN_SERVER_POOL_SIZE = 50;
     private static final int MAX_SERVER_POOL_SIZE = 500;
     private static final int MAX_TASK_QUEUE_SIZE = 20000;
     private static final int KEEP_ALIVE_TIME = 500;

File: core/src/main/java/io/seata/core/logger/StackTraceLogger.java
Patch:
@@ -20,6 +20,8 @@
 import io.seata.core.constants.ConfigurationKeys;
 import org.slf4j.Logger;
 
+import static io.seata.core.constants.DefaultValues.DEFAULT_LOG_EXCEPTION_RATE;
+
 /**
  * @author jsbxyyx
  */
@@ -29,7 +31,7 @@ public final class StackTraceLogger {
 
     public static void info(Logger logger, Throwable cause, String format1, Object[] args1, String format2, Object[] args2) {
         if (logger.isInfoEnabled()) {
-            int rate = CONFIG.getInt(ConfigurationKeys.TRANSACTION_LOG_EXCEPTION_RATE, 100);
+            int rate = CONFIG.getInt(ConfigurationKeys.TRANSACTION_LOG_EXCEPTION_RATE, DEFAULT_LOG_EXCEPTION_RATE);
             if (System.currentTimeMillis() % rate == 0) {
                 logger.info(format1, args1, cause);
             } else {

File: core/src/main/java/io/seata/core/rpc/netty/NettyBaseConfig.java
Patch:
@@ -91,6 +91,7 @@ public class NettyBaseConfig {
 
     private static final int READIDLE_BASE_WRITEIDLE = 3;
 
+
     /**
      * The constant MAX_WRITE_IDLE_SECONDS.
      */

File: core/src/main/java/io/seata/core/store/db/LockStoreDataBaseDAO.java
Patch:
@@ -44,6 +44,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import static io.seata.core.constants.DefaultValues.DEFAULT_LOCK_DB_TABLE;
+
 /**
  * The type Data base lock store.
  *
@@ -85,7 +87,7 @@ public LockStoreDataBaseDAO(DataSource logStoreDataSource) {
 
     @Override
     public void init() {
-        lockTable = CONFIG.getConfig(ConfigurationKeys.LOCK_DB_TABLE, ConfigurationKeys.LOCK_DB_DEFAULT_TABLE);
+        lockTable = CONFIG.getConfig(ConfigurationKeys.LOCK_DB_TABLE, DEFAULT_LOCK_DB_TABLE);
         dbType = CONFIG.getConfig(ConfigurationKeys.STORE_DB_TYPE);
         if (StringUtils.isBlank(dbType)) {
             throw new StoreException("there must be db type.");

File: discovery/seata-discovery-redis/src/main/java/io/seata/discovery/registry/redis/RedisRegistryServiceImpl.java
Patch:
@@ -18,10 +18,10 @@
 import java.lang.management.ManagementFactory;
 import java.net.InetSocketAddress;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import java.util.Collections;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.ExecutorService;
@@ -62,6 +62,7 @@ public class RedisRegistryServiceImpl implements RegistryService<RedisListener>
     private static final ConcurrentMap<String, Set<InetSocketAddress>> CLUSTER_ADDRESS_MAP = new ConcurrentHashMap<>();
     private static volatile RedisRegistryServiceImpl instance;
     private static volatile JedisPool jedisPool;
+
     private ExecutorService threadPoolExecutor = new ScheduledThreadPoolExecutor(1,
         new NamedThreadFactory("RedisRegistryService", 1));
 

File: metrics/seata-metrics-exporter-prometheus/src/main/java/io/seata/metrics/exporter/prometheus/PrometheusExporter.java
Patch:
@@ -30,14 +30,15 @@
 import io.seata.metrics.exporter.Exporter;
 import io.seata.metrics.registry.Registry;
 
+import static io.seata.core.constants.ConfigurationKeys.METRICS_EXPORTER_PROMETHEUS_PORT;
+
 /**
  * Exporter for Prometheus
  *
  * @author zhengyangyong
  */
 @LoadLevel(name = "Prometheus", order = 1)
 public class PrometheusExporter extends Collector implements Collector.Describable, Exporter {
-    private static final String METRICS_EXPORTER_PROMETHEUS_PORT = "exporter-prometheus-port";
 
     private final HTTPServer server;
 

File: seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/properties/file/LogProperties.java
Patch:
@@ -18,6 +18,7 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.stereotype.Component;
 
+import static io.seata.core.constants.DefaultValues.DEFAULT_LOG_EXCEPTION_RATE;
 import static io.seata.spring.boot.autoconfigure.StarterConstants.LOG_PREFIX;
 
 /**
@@ -27,7 +28,7 @@
 @ConfigurationProperties(prefix = LOG_PREFIX)
 public class LogProperties {
 
-    private int exceptionRate = 100;
+    private int exceptionRate = DEFAULT_LOG_EXCEPTION_RATE;
 
     public int getExceptionRate() {
         return exceptionRate;

File: seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/properties/file/ShutdownProperties.java
Patch:
@@ -18,6 +18,7 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.stereotype.Component;
 
+import static io.seata.core.constants.DefaultValues.DEFAULT_SHUTDOWN_TIMEOUT_SEC;
 import static io.seata.spring.boot.autoconfigure.StarterConstants.SHUTDOWN_PREFIX;
 
 /**
@@ -29,7 +30,7 @@ public class ShutdownProperties {
     /**
      * when destroy server, wait seconds
      */
-    private long wait = 3L;
+    private long wait = DEFAULT_SHUTDOWN_TIMEOUT_SEC;
 
     public long getWait() {
         return wait;

File: spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java
Patch:
@@ -49,6 +49,8 @@
 import org.springframework.context.ApplicationContextAware;
 import org.springframework.context.ConfigurableApplicationContext;
 
+import static io.seata.core.constants.DefaultValues.DEFAULT_DISABLE_GLOBAL_TRANSACTION;
+
 /**
  * The type Global transaction scanner.
  *
@@ -80,7 +82,7 @@ public class GlobalTransactionScanner extends AbstractAutoProxyCreator
     private final String txServiceGroup;
     private final int mode;
     private final boolean disableGlobalTransaction = ConfigurationFactory.getInstance().getBoolean(
-        ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION, false);
+        ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION, DEFAULT_DISABLE_GLOBAL_TRANSACTION);
 
     private final FailureHandler failureHandlerHook;
 

File: common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java
Patch:
@@ -184,7 +184,7 @@ public static <S> List<S> loadAll(Class<S> service, Class[] argsType, Object[] a
      * @return all extension class
      */
     @SuppressWarnings("rawtypes")
-    public static <S> List<Class> getAllExtensionClass(Class<S> service) {
+    static <S> List<Class> getAllExtensionClass(Class<S> service) {
         return findAllExtensionClass(service, null, findClassLoader());
     }
 
@@ -197,7 +197,7 @@ public static <S> List<Class> getAllExtensionClass(Class<S> service) {
      * @return all extension class
      */
     @SuppressWarnings("rawtypes")
-    public static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {
+    static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {
         return findAllExtensionClass(service, null, loader);
     }
 

File: sqlparser/seata-sqlparser-druid/src/main/java/io/seata/sqlparser/druid/SQLOperateRecognizerHolderFactory.java
Patch:
@@ -39,7 +39,7 @@ public static SQLOperateRecognizerHolder getSQLRecognizerHolder(String dbType) {
         if (RECOGNIZER_HOLDER_MAP.get(dbType) != null) {
             return RECOGNIZER_HOLDER_MAP.get(dbType);
         }
-        SQLOperateRecognizerHolder recognizerHolder = EnhancedServiceLoader.load(SQLOperateRecognizerHolder.class, dbType);
+        SQLOperateRecognizerHolder recognizerHolder = EnhancedServiceLoader.load(SQLOperateRecognizerHolder.class, dbType, SQLOperateRecognizerHolderFactory.class.getClassLoader());
         RECOGNIZER_HOLDER_MAP.putIfAbsent(dbType, recognizerHolder);
         return recognizerHolder;
     }

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/UpdateExecutor.java
Patch:
@@ -68,7 +68,7 @@ private String buildBeforeImageSQL(TableMeta tableMeta, ArrayList<List<Object>>
         SQLUpdateRecognizer recognizer = (SQLUpdateRecognizer)sqlRecognizer;
         List<String> updateColumns = recognizer.getUpdateColumns();
         StringBuilder prefix = new StringBuilder("SELECT ");
-        if (!tableMeta.containsPK(updateColumns)) {
+        if (!containsPK(updateColumns)) {
             prefix.append(getColumnNameInSQL(tableMeta.getEscapePkName(getDbType()))).append(", ");
         }
         StringBuilder suffix = new StringBuilder(" FROM ").append(getFromTableInSQL());

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoExecutor.java
Patch:
@@ -21,7 +21,6 @@
 import io.seata.config.ConfigurationFactory;
 import io.seata.core.constants.ConfigurationKeys;
 import io.seata.core.model.Result;
-import io.seata.rm.datasource.ColumnUtils;
 import io.seata.rm.datasource.DataCompareUtils;
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.KeyType;
@@ -31,10 +30,11 @@
 import io.seata.rm.datasource.util.JdbcUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+
 import javax.sql.rowset.serial.SerialBlob;
 import javax.sql.rowset.serial.SerialClob;
-import java.sql.JDBCType;
 import java.sql.Connection;
+import java.sql.JDBCType;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
@@ -273,7 +273,7 @@ protected TableRecords queryCurrentRecords(Connection conn) throws SQLException
         }
         // build check sql
         String dbType = getDbType(conn);
-        String checkSQL = String.format(CHECK_SQL_TEMPLATE, ColumnUtils.addEscape(sqlUndoLog.getTableName(), dbType),
+        String checkSQL = String.format(CHECK_SQL_TEMPLATE, sqlUndoLog.getTableName(),
                 tableMeta.getEscapePkName(dbType), replace.substring(0, replace.length() - 1));
 
         PreparedStatement statement = null;

File: config/seata-config-spring-cloud/src/main/java/io/seata/config/springcloud/EnableSeataSpringConfig.java
Patch:
@@ -15,15 +15,15 @@
  */
 package io.seata.config.springcloud;
 
-import org.springframework.context.annotation.Import;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.springframework.context.annotation.Import;
+
 @Target({ElementType.TYPE})
 @Retention(RetentionPolicy.RUNTIME)
-@Import({SpringContextProvider.class})
+@Import({SpringApplicationContextProviderRegistrar.class})
 public @interface EnableSeataSpringConfig {
 }

File: seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/properties/registry/ConfigProperties.java
Patch:
@@ -27,7 +27,7 @@
 @ConfigurationProperties(prefix = CONFIG_PREFIX)
 public class ConfigProperties {
     /**
-     * file, nacos, apollo, zk, consul, etcd3
+     * file, nacos, apollo, zk, consul, etcd3, springCloudConfig
      */
     private String type = "file";
 

File: seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/provider/SpringBootConfigurationProvider.java
Patch:
@@ -21,14 +21,15 @@
 import java.util.Optional;
 import java.util.stream.Stream;
 
+import io.seata.common.holder.ObjectHolder;
 import io.seata.config.Configuration;
 import io.seata.config.ExtConfigurationProvider;
-import io.seata.spring.boot.autoconfigure.util.SpringUtils;
 import io.seata.spring.boot.autoconfigure.util.StringFormatUtils;
 import org.apache.commons.lang.StringUtils;
 import org.springframework.cglib.proxy.Enhancer;
 import org.springframework.cglib.proxy.MethodInterceptor;
 import org.springframework.cglib.proxy.MethodProxy;
+import org.springframework.context.ApplicationContext;
 
 import static io.seata.spring.boot.autoconfigure.StarterConstants.CLIENT_RM_PREFIX;
 import static io.seata.spring.boot.autoconfigure.StarterConstants.CLIENT_TM_PREFIX;
@@ -108,7 +109,7 @@ private Object get(String dataId) throws IllegalAccessException {
         String propertySuffix = getPropertySuffix(dataId);
         Class propertyClass = getPropertyClass(getPropertyPrefix(dataId));
         if (null != propertyClass) {
-            Object propertyObject = SpringUtils.getBean(propertyClass);
+            Object propertyObject = ObjectHolder.INSTANCE.getObject(ApplicationContext.class).getBean(propertyClass);
             Optional<Field> fieldOptional = Stream.of(propertyObject.getClass().getDeclaredFields()).filter(
                 f -> f.getName().equalsIgnoreCase(propertySuffix)).findAny();
             if (fieldOptional.isPresent()) {

File: seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/properties/registry/RegistryRedisProperties.java
Patch:
@@ -28,8 +28,8 @@
 public class RegistryRedisProperties {
     private String serverAddr = "localhost:6379";
     private int db = 0;
-    private String password;
-    private String cluster;
+    private String password = "";
+    private String cluster = "default";
     private int timeout = 0;
 
 

File: seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/util/StringFormatUtils.java
Patch:
@@ -21,7 +21,7 @@
 public class StringFormatUtils {
     private static final char MINUS = '-';
     private static final char UNDERLINE = '_';
-    private static final char DOT = '.';
+    public static final char DOT = '.';
 
     /**
      * camelTo underline format

File: config/seata-config-core/src/main/java/io/seata/config/FileConfiguration.java
Patch:
@@ -177,7 +177,7 @@ public void addConfigListener(String dataId, ConfigurationChangeListener listene
         }
         configListenersMap.putIfAbsent(dataId, new ConcurrentSet<>());
         configListenersMap.get(dataId).add(listener);
-        listenedConfigMap.put(dataId, getConfig(dataId));
+        listenedConfigMap.put(dataId, ConfigurationFactory.getInstance().getConfig(dataId));
         FileListener fileListener = new FileListener(dataId, listener);
         fileListener.onProcessEvent(new ConfigurationChangeEvent());
     }
@@ -306,7 +306,7 @@ public FileListener(String dataId, ConfigurationChangeListener listener) {
         public void onChangeEvent(ConfigurationChangeEvent event) {
             while (true) {
                 try {
-                    String currentConfig = getConfig(dataId);
+                    String currentConfig = ConfigurationFactory.getInstance().getConfig(dataId);
                     String oldConfig = listenedConfigMap.get(dataId);
                     if (ObjectUtils.notEqual(currentConfig, oldConfig)) {
                         listenedConfigMap.put(dataId, currentConfig);

File: rm-datasource/src/main/java/io/seata/rm/datasource/util/JdbcUtils.java
Patch:
@@ -31,7 +31,7 @@ private JdbcUtils() {
     }
 
     public static String getDbType(String jdbcUrl) {
-        return getDbTypeParser().parseFromJdbcUrl(jdbcUrl);
+        return getDbTypeParser().parseFromJdbcUrl(jdbcUrl).toLowerCase();
     }
 
     static DbTypeParser getDbTypeParser() {

File: rm-datasource/src/test/java/io/seata/rm/datasource/sql/SQLVisitorFactoryTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.seata.rm.datasource.sql;
 
+import io.seata.common.loader.EnhancedServiceNotFoundException;
 import io.seata.sqlparser.SQLRecognizer;
 import io.seata.sqlparser.SQLType;
 import io.seata.sqlparser.druid.mysql.MySQLDeleteRecognizer;
@@ -93,7 +94,7 @@ public void testSqlRecognizing() {
         Assertions.assertTrue(recognizer instanceof OracleSelectForUpdateRecognizer);
 
         //test for do not support db
-        Assertions.assertThrows(UnsupportedOperationException.class, () -> SQLVisitorFactory.get("select * from t", JdbcConstants.DB2));
+        Assertions.assertThrows(EnhancedServiceNotFoundException.class, () -> SQLVisitorFactory.get("select * from t", JdbcConstants.DB2));
     }
 
     @Test

File: rm-datasource/src/test/java/io/seata/rm/datasource/sql/struct/TableMetaCacheFactoryTest.java
Patch:
@@ -16,7 +16,7 @@
 package io.seata.rm.datasource.sql.struct;
 
 import com.alibaba.druid.util.JdbcConstants;
-import io.seata.common.exception.NotSupportYetException;
+import io.seata.common.loader.EnhancedServiceNotFoundException;
 import io.seata.rm.datasource.sql.struct.cache.MysqlTableMetaCache;
 import io.seata.rm.datasource.sql.struct.cache.OracleTableMetaCache;
 import org.junit.jupiter.api.Assertions;
@@ -35,7 +35,7 @@ public void getTableMetaCache() {
         Assertions.assertTrue(TableMetaCacheFactory.getTableMetaCache(JdbcConstants.ORACLE) instanceof OracleTableMetaCache);
         Assertions.assertEquals(TableMetaCacheFactory.getTableMetaCache(JdbcConstants.ORACLE), TableMetaCacheFactory.getTableMetaCache(JdbcConstants.ORACLE));
         Assertions.assertEquals(TableMetaCacheFactory.getTableMetaCache(JdbcConstants.MYSQL), TableMetaCacheFactory.getTableMetaCache(JdbcConstants.MYSQL));
-        Assertions.assertThrows(NotSupportYetException.class, () -> {
+        Assertions.assertThrows(EnhancedServiceNotFoundException.class, () -> {
             TableMetaCacheFactory.getTableMetaCache(NOT_EXIST_SQL_TYPE);
         });
     }

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/KeywordCheckerFactoryTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.seata.rm.datasource.undo;
 
-import io.seata.common.exception.NotSupportYetException;
+import io.seata.common.loader.EnhancedServiceNotFoundException;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -29,6 +29,6 @@ public void testKeywordCheckerFacotry() {
         KeywordCheckerFactory keywordCheckerFactory = new KeywordCheckerFactory();
         Assertions.assertNotNull(keywordCheckerFactory);
 
-        Assertions.assertThrows(NotSupportYetException.class, () -> KeywordCheckerFactory.getKeywordChecker("unknow"));
+        Assertions.assertThrows(EnhancedServiceNotFoundException.class, () -> KeywordCheckerFactory.getKeywordChecker("unknow"));
     }
 }

File: server/src/main/java/io/seata/server/coordinator/DefaultCoordinator.java
Patch:
@@ -399,7 +399,7 @@ protected void handleRetryRollbacking() {
                      * Prevent thread safety issues
                      */
                     SessionHolder.getRetryRollbackingSessionManager().removeGlobalSession(rollbackingSession);
-                    LOGGER.error("GlobalSession rollback retry timeout [{}]", rollbackingSession.getXid());
+                    LOGGER.error("GlobalSession rollback retry timeout and removed [{}]", rollbackingSession.getXid());
                     continue;
                 }
                 rollbackingSession.addSessionLifecycleListener(SessionHolder.getRootSessionManager());
@@ -427,7 +427,7 @@ protected void handleRetryCommitting() {
                      * Prevent thread safety issues
                      */
                     SessionHolder.getRetryCommittingSessionManager().removeGlobalSession(committingSession);
-                    LOGGER.error("GlobalSession commit retry timeout [{}]", committingSession.getXid());
+                    LOGGER.error("GlobalSession commit retry timeout and removed [{}]", committingSession.getXid());
                     continue;
                 }
                 committingSession.addSessionLifecycleListener(SessionHolder.getRootSessionManager());

File: saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/domain/DomainConstants.java
Patch:
@@ -74,7 +74,7 @@ public class DomainConstants {
     public static final String VAR_NAME_IS_FOR_SUB_STATMACHINE_FORWARD = "_is_for_sub_statemachine_forward_";
     public static final String VAR_NAME_FIRST_COMPENSATION_STATE_STARTED = "_first_compensation_state_started";
     public static final String VAR_NAME_GLOBAL_TX = "_global_transaction_";
-    public static final String VAR_NAME_ROOT_CONTEXT_HOLDER = "_root_context_holder_";
+    public static final String VAR_NAME_IS_ASYNC_EXECUTION = "_is_async_execution_";
 
     public static final String OPERATION_NAME_START = "start";
     public static final String OPERATION_NAME_FORWARD = "forward";

File: server/src/main/java/io/seata/server/ParameterParser.java
Patch:
@@ -56,6 +56,7 @@ public class ParameterParser {
     private static final String ENV_STORE_MODE_KEY = "STORE_MODE";
     private static final String C_GROUP_PATH = "/proc/1/cgroup";
     private static final String DOCKER_PATH = "/docker";
+    private static final String KUBEPODS_PATH = "/kubepods";
 
     @Parameter(names = "--help", help = true)
     private boolean help;
@@ -132,7 +133,7 @@ private Boolean isRunningInContainer() {
         Path path = Paths.get(C_GROUP_PATH);
         if (Files.exists(path)) {
             try (Stream<String> stream = Files.lines(path)) {
-                return stream.anyMatch(line -> line.contains(DOCKER_PATH));
+                return stream.anyMatch(line -> line.contains(DOCKER_PATH) || line.contains(KUBEPODS_PATH));
             } catch (IOException e) {
                 LOGGER.error("Judge if running in container failed:{}", e.getMessage(), e);
             }

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/SQLVisitorFactory.java
Patch:
@@ -20,6 +20,7 @@
 import io.seata.core.constants.ConfigurationKeys;
 import io.seata.sqlparser.SQLRecognizer;
 import io.seata.sqlparser.SQLRecognizerFactory;
+import io.seata.sqlparser.SqlParserType;
 
 /**
  * @author ggndnn
@@ -31,7 +32,7 @@ public class SQLVisitorFactory {
     private final static SQLRecognizerFactory SQL_RECOGNIZER_FACTORY;
 
     static {
-        String sqlparserType = ConfigurationFactory.getInstance().getConfig(ConfigurationKeys.SQL_PARSER_TYPE, "druid");
+        String sqlparserType = ConfigurationFactory.getInstance().getConfig(ConfigurationKeys.SQL_PARSER_TYPE, SqlParserType.SQL_PARSER_TYPE_DRUID);
         SQL_RECOGNIZER_FACTORY = EnhancedServiceLoader.load(SQLRecognizerFactory.class, sqlparserType);
     }
 

File: rm-datasource/src/main/java/io/seata/rm/datasource/util/JdbcUtils.java
Patch:
@@ -18,6 +18,7 @@
 import io.seata.common.loader.EnhancedServiceLoader;
 import io.seata.config.ConfigurationFactory;
 import io.seata.core.constants.ConfigurationKeys;
+import io.seata.sqlparser.SqlParserType;
 import io.seata.sqlparser.util.DbTypeParser;
 
 /**
@@ -37,7 +38,7 @@ static DbTypeParser getDbTypeParser() {
         if (dbTypeParser == null) {
             synchronized (JdbcUtils.class) {
                 if (dbTypeParser == null) {
-                    String sqlparserType = ConfigurationFactory.getInstance().getConfig(ConfigurationKeys.SQL_PARSER_TYPE, "druid");
+                    String sqlparserType = ConfigurationFactory.getInstance().getConfig(ConfigurationKeys.SQL_PARSER_TYPE, SqlParserType.SQL_PARSER_TYPE_DRUID);
                     dbTypeParser = EnhancedServiceLoader.load(DbTypeParser.class, sqlparserType);
                 }
             }

File: sqlparser/seata-sqlparser-druid/src/main/java/io/seata/sqlparser/druid/DruidDbTypeParser.java
Patch:
@@ -17,12 +17,13 @@
 
 import com.alibaba.druid.util.JdbcUtils;
 import io.seata.common.loader.LoadLevel;
+import io.seata.sqlparser.SqlParserType;
 import io.seata.sqlparser.util.DbTypeParser;
 
 /**
  * @author ggndnn
  */
-@LoadLevel(name = "druid")
+@LoadLevel(name = SqlParserType.SQL_PARSER_TYPE_DRUID)
 public class DruidDbTypeParser implements DbTypeParser {
     @Override
     public String parseFromJdbcUrl(String jdbcUrl) {

File: sqlparser/seata-sqlparser-druid/src/main/java/io/seata/sqlparser/druid/DruidSQLRecognizerFactory.java
Patch:
@@ -24,6 +24,7 @@
 import io.seata.common.loader.LoadLevel;
 import io.seata.sqlparser.SQLRecognizer;
 import io.seata.sqlparser.SQLRecognizerFactory;
+import io.seata.sqlparser.SqlParserType;
 
 import java.util.List;
 
@@ -33,7 +34,7 @@
  * @author sharajava
  * @author ggndnn
  */
-@LoadLevel(name = "druid")
+@LoadLevel(name = SqlParserType.SQL_PARSER_TYPE_DRUID)
 public class DruidSQLRecognizerFactory implements SQLRecognizerFactory {
     @Override
     public SQLRecognizer create(String sql, String dbType) {

File: sqlparser/seata-sqlparser-druid/src/test/java/io/seata/sqlparser/druid/DruidDbTypeParserTest.java
Patch:
@@ -16,6 +16,7 @@
 package io.seata.sqlparser.druid;
 
 import io.seata.common.loader.EnhancedServiceLoader;
+import io.seata.sqlparser.SqlParserType;
 import io.seata.sqlparser.util.DbTypeParser;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
@@ -27,7 +28,7 @@ public class DruidDbTypeParserTest {
     @Test
     public void testDruidDbTypeParser() {
         String jdbcUrl = "jdbc:mysql://127.0.0.1:3306/seata";
-        DbTypeParser dbTypeParser = EnhancedServiceLoader.load(DbTypeParser.class, "druid");
+        DbTypeParser dbTypeParser = EnhancedServiceLoader.load(DbTypeParser.class, SqlParserType.SQL_PARSER_TYPE_DRUID);
         Assertions.assertNotNull(dbTypeParser);
         String dbType = dbTypeParser.parseFromJdbcUrl(jdbcUrl);
         Assertions.assertEquals("mysql", dbType);

File: sqlparser/seata-sqlparser-druid/src/test/java/io/seata/sqlparser/druid/DruidSQLRecognizerFactoryTest.java
Patch:
@@ -19,14 +19,15 @@
 import io.seata.sqlparser.SQLRecognizer;
 import io.seata.sqlparser.SQLRecognizerFactory;
 import io.seata.sqlparser.SQLType;
+import io.seata.sqlparser.SqlParserType;
 import io.seata.sqlparser.util.JdbcConstants;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class DruidSQLRecognizerFactoryTest {
     @Test
     public void testSqlRecognizerCreation() {
-        SQLRecognizerFactory recognizerFactory = EnhancedServiceLoader.load(SQLRecognizerFactory.class, "druid");
+        SQLRecognizerFactory recognizerFactory = EnhancedServiceLoader.load(SQLRecognizerFactory.class, SqlParserType.SQL_PARSER_TYPE_DRUID);
         Assertions.assertNotNull(recognizerFactory);
         SQLRecognizer recognizer = recognizerFactory.create("delete from t1", JdbcConstants.MYSQL);
         Assertions.assertNotNull(recognizer);

File: core/src/main/java/io/seata/core/store/db/LogStoreDataBaseDAO.java
Patch:
@@ -260,12 +260,13 @@ public boolean deleteGlobalTransactionDO(GlobalTransactionDO globalTransactionDO
             conn.setAutoCommit(true);
             ps = conn.prepareStatement(sql);
             ps.setString(1, globalTransactionDO.getXid());
-            return ps.executeUpdate() > 0;
+            ps.executeUpdate();
         } catch (SQLException e) {
             throw new StoreException(e);
         } finally {
             IOUtil.close(ps, conn);
         }
+        return true;
     }
 
     @Override
@@ -479,7 +480,7 @@ private ColumnInfo queryTableStructure(final String tableName, String colName) {
         try (Connection conn = logStoreDataSource.getConnection()) {
             DatabaseMetaData dbmd = conn.getMetaData();
             String schema = getSchema(conn);
-            ResultSet tableRs = dbmd.getTables(null, schema, null, new String[] {"TABLE"});
+            ResultSet tableRs = dbmd.getTables(null, schema, null, new String[]{"TABLE"});
             while (tableRs.next()) {
                 String table = tableRs.getString("TABLE_NAME");
                 if (StringUtils.equalsIgnoreCase(table, tableName)) {

File: rm-datasource/src/main/java/io/seata/rm/datasource/AbstractConnectionProxy.java
Patch:
@@ -16,11 +16,11 @@
 package io.seata.rm.datasource;
 
 import io.seata.core.context.RootContext;
-import io.seata.rm.datasource.sql.SQLRecognizer;
-import io.seata.rm.datasource.sql.SQLType;
 import io.seata.rm.datasource.sql.SQLVisitorFactory;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableMetaCacheFactory;
+import io.seata.sqlparser.SQLRecognizer;
+import io.seata.sqlparser.SQLType;
 
 import java.sql.Array;
 import java.sql.Blob;

File: rm-datasource/src/main/java/io/seata/rm/datasource/AbstractPreparedStatementProxy.java
Patch:
@@ -14,6 +14,7 @@
  *  limitations under the License.
  */
 package io.seata.rm.datasource;
+import io.seata.sqlparser.struct.Null;
 
 import java.io.InputStream;
 import java.io.Reader;
@@ -37,8 +38,6 @@
 import java.util.Calendar;
 import java.util.List;
 
-import io.seata.rm.datasource.sql.struct.Null;
-
 /**
  * The type Abstract prepared statement proxy.
  *

File: rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.seata.rm.datasource;
 
-import com.alibaba.druid.util.JdbcConstants;
 import io.seata.common.util.CollectionUtils;
 import io.seata.common.util.StringUtils;
+import io.seata.sqlparser.util.JdbcConstants;
 
 import java.util.ArrayList;
 import java.util.List;

File: rm-datasource/src/main/java/io/seata/rm/datasource/DataSourceProxy.java
Patch:
@@ -22,14 +22,14 @@
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
-import com.alibaba.druid.util.JdbcUtils;
 import io.seata.common.thread.NamedThreadFactory;
 import io.seata.config.ConfigurationFactory;
 import io.seata.core.constants.ConfigurationKeys;
 import io.seata.core.model.BranchType;
 import io.seata.core.model.Resource;
 import io.seata.rm.DefaultResourceManager;
 import io.seata.rm.datasource.sql.struct.TableMetaCacheFactory;
+import io.seata.rm.datasource.util.JdbcUtils;
 
 /**
  * The type Data source proxy.
@@ -84,7 +84,7 @@ private void init(DataSource dataSource, String resourceGroupId) {
         this.resourceGroupId = resourceGroupId;
         try (Connection connection = dataSource.getConnection()) {
             jdbcUrl = connection.getMetaData().getURL();
-            dbType = JdbcUtils.getDbType(jdbcUrl, null);
+            dbType = JdbcUtils.getDbType(jdbcUrl);
         } catch (SQLException e) {
             throw new IllegalStateException("can not init dataSource", e);
         }

File: rm-datasource/src/main/java/io/seata/rm/datasource/PreparedStatementProxy.java
Patch:
@@ -22,6 +22,7 @@
 
 import io.seata.rm.datasource.exec.ExecuteTemplate;
 import io.seata.rm.datasource.exec.StatementCallback;
+import io.seata.sqlparser.ParametersHolder;
 
 /**
  * The type Prepared statement proxy.

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/AbstractDMLBaseExecutor.java
Patch:
@@ -18,7 +18,7 @@
 import io.seata.rm.datasource.AbstractConnectionProxy;
 import io.seata.rm.datasource.ConnectionProxy;
 import io.seata.rm.datasource.StatementProxy;
-import io.seata.rm.datasource.sql.SQLRecognizer;
+import io.seata.sqlparser.SQLRecognizer;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/DeleteExecutor.java
Patch:
@@ -22,12 +22,12 @@
 import java.util.StringJoiner;
 
 import io.seata.rm.datasource.StatementProxy;
-import io.seata.rm.datasource.sql.SQLDeleteRecognizer;
-import io.seata.rm.datasource.sql.SQLRecognizer;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.rm.datasource.undo.KeywordChecker;
 import io.seata.rm.datasource.undo.KeywordCheckerFactory;
+import io.seata.sqlparser.SQLDeleteRecognizer;
+import io.seata.sqlparser.SQLRecognizer;
 import org.apache.commons.lang.StringUtils;
 
 /**

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/ExecuteTemplate.java
Patch:
@@ -17,8 +17,8 @@
 
 import io.seata.core.context.RootContext;
 import io.seata.rm.datasource.StatementProxy;
-import io.seata.rm.datasource.sql.SQLRecognizer;
 import io.seata.rm.datasource.sql.SQLVisitorFactory;
+import io.seata.sqlparser.SQLRecognizer;
 
 import java.sql.SQLException;
 import java.sql.Statement;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/SelectForUpdateExecutor.java
Patch:
@@ -26,8 +26,8 @@
 import io.seata.common.util.StringUtils;
 import io.seata.core.context.RootContext;
 import io.seata.rm.datasource.StatementProxy;
-import io.seata.rm.datasource.sql.SQLRecognizer;
-import io.seata.rm.datasource.sql.SQLSelectRecognizer;
+import io.seata.sqlparser.SQLRecognizer;
+import io.seata.sqlparser.SQLSelectRecognizer;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/UpdateExecutor.java
Patch:
@@ -24,12 +24,12 @@
 import java.util.StringJoiner;
 
 import io.seata.rm.datasource.StatementProxy;
-import io.seata.rm.datasource.sql.SQLRecognizer;
-import io.seata.rm.datasource.sql.SQLUpdateRecognizer;
+
+import io.seata.sqlparser.SQLRecognizer;
+import io.seata.sqlparser.SQLUpdateRecognizer;
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
-
 import org.apache.commons.lang.StringUtils;
 
 /**

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/TableMetaCacheFactory.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.seata.rm.datasource.sql.struct;
 
-import com.alibaba.druid.util.JdbcConstants;
 import io.seata.common.exception.NotSupportYetException;
 import io.seata.rm.datasource.DataSourceProxy;
 import io.seata.rm.datasource.sql.struct.cache.MysqlTableMetaCache;
 import io.seata.rm.datasource.sql.struct.cache.OracleTableMetaCache;
+import io.seata.sqlparser.util.JdbcConstants;
 
 /**
  * @author guoyao

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/cache/MysqlTableMetaCache.java
Patch:
@@ -22,7 +22,6 @@
 import java.sql.SQLException;
 import java.sql.Statement;
 
-import com.alibaba.druid.util.JdbcConstants;
 import io.seata.common.exception.ShouldNeverHappenException;
 import io.seata.rm.datasource.sql.struct.ColumnMeta;
 import io.seata.rm.datasource.sql.struct.IndexMeta;
@@ -31,9 +30,12 @@
 import io.seata.rm.datasource.sql.struct.TableMetaCache;
 import io.seata.rm.datasource.undo.KeywordChecker;
 import io.seata.rm.datasource.undo.KeywordCheckerFactory;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import io.seata.sqlparser.util.JdbcConstants;
+
 /**
  * The type Table meta cache.
  *

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoExecutor.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.seata.rm.datasource.undo;
 
-import com.alibaba.druid.util.JdbcUtils;
 import com.alibaba.fastjson.JSON;
 import io.seata.common.util.IOUtil;
 import io.seata.common.util.StringUtils;
@@ -29,6 +28,7 @@
 import io.seata.rm.datasource.sql.struct.Row;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
+import io.seata.rm.datasource.util.JdbcUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import javax.sql.rowset.serial.SerialBlob;
@@ -322,7 +322,7 @@ protected Object[] parsePkValues(TableRecords records) {
      * @throws SQLException
      */
     protected String getDbType(Connection conn) throws SQLException {
-        return JdbcUtils.getDbType(conn.getMetaData().getURL(), null);
+        return JdbcUtils.getDbType(conn.getMetaData().getURL());
     }
 
 }

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/SQLUndoLog.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.seata.rm.datasource.undo;
 
-import io.seata.rm.datasource.sql.SQLType;
+import io.seata.sqlparser.SQLType;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/UndoExecutorFactory.java
Patch:
@@ -15,10 +15,9 @@
  */
 package io.seata.rm.datasource.undo;
 
-import com.alibaba.druid.util.JdbcConstants;
-
 import io.seata.common.exception.NotSupportYetException;
 import io.seata.common.exception.ShouldNeverHappenException;
+import io.seata.sqlparser.util.JdbcConstants;
 
 import java.util.HashSet;
 import java.util.Set;

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/UndoLogManagerFactory.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.seata.rm.datasource.undo;
 
-import com.alibaba.druid.util.JdbcConstants;
 import io.seata.common.exception.NotSupportYetException;
 import io.seata.rm.datasource.undo.mysql.MySQLUndoLogManager;
 import io.seata.rm.datasource.undo.oracle.OracleUndoLogManager;
+import io.seata.sqlparser.util.JdbcConstants;
 
 import java.util.HashMap;
 import java.util.Map;

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoDeleteExecutor.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
-import com.alibaba.druid.util.JdbcConstants;
 import io.seata.common.exception.ShouldNeverHappenException;
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.Row;
@@ -28,6 +27,7 @@
 import io.seata.rm.datasource.undo.KeywordChecker;
 import io.seata.rm.datasource.undo.KeywordCheckerFactory;
 import io.seata.rm.datasource.undo.SQLUndoLog;
+import io.seata.sqlparser.util.JdbcConstants;
 
 /**
  * The type My sql undo delete executor.

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoInsertExecutor.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import com.alibaba.druid.util.JdbcConstants;
 import io.seata.common.exception.ShouldNeverHappenException;
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.Row;
@@ -29,6 +28,7 @@
 import io.seata.rm.datasource.undo.KeywordChecker;
 import io.seata.rm.datasource.undo.KeywordCheckerFactory;
 import io.seata.rm.datasource.undo.SQLUndoLog;
+import io.seata.sqlparser.util.JdbcConstants;
 
 /**
  * The type My sql undo insert executor.

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoUpdateExecutor.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.seata.rm.datasource.undo.mysql;
 
-import com.alibaba.druid.util.JdbcConstants;
 import io.seata.common.exception.ShouldNeverHappenException;
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.Row;
@@ -24,6 +23,7 @@
 import io.seata.rm.datasource.undo.KeywordChecker;
 import io.seata.rm.datasource.undo.KeywordCheckerFactory;
 import io.seata.rm.datasource.undo.SQLUndoLog;
+import io.seata.sqlparser.util.JdbcConstants;
 
 import java.util.List;
 import java.util.stream.Collectors;

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/keyword/MySQLKeywordChecker.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.seata.rm.datasource.undo.mysql.keyword;
 
-import com.alibaba.druid.util.JdbcConstants;
 import io.seata.rm.datasource.undo.KeywordChecker;
+import io.seata.sqlparser.util.JdbcConstants;
 
 import java.util.Arrays;
 import java.util.Set;

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/oracle/keyword/OracleKeywordChecker.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.seata.rm.datasource.undo.oracle.keyword;
 
-import com.alibaba.druid.util.JdbcConstants;
 import io.seata.rm.datasource.undo.KeywordChecker;
+import io.seata.sqlparser.util.JdbcConstants;
 
 import java.util.Arrays;
 import java.util.Set;

File: rm-datasource/src/test/java/io/seata/rm/datasource/PreparedStatementProxyTest.java
Patch:
@@ -43,7 +43,7 @@
 import io.seata.rm.datasource.mock.MockClob;
 import io.seata.rm.datasource.mock.MockConnection;
 import io.seata.rm.datasource.mock.MockDriver;
-import io.seata.rm.datasource.sql.struct.Null;
+import io.seata.sqlparser.struct.Null;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;

File: rm-datasource/src/test/java/io/seata/rm/datasource/exec/AbstractDMLBaseExecutorTest.java
Patch:
@@ -18,7 +18,7 @@
 import io.seata.rm.datasource.ConnectionContext;
 import io.seata.rm.datasource.ConnectionProxy;
 import io.seata.rm.datasource.PreparedStatementProxy;
-import io.seata.rm.datasource.sql.SQLInsertRecognizer;
+import io.seata.sqlparser.SQLInsertRecognizer;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import org.junit.jupiter.api.Assertions;

File: rm-datasource/src/test/java/io/seata/rm/datasource/exec/BatchInsertExecutorTest.java
Patch:
@@ -19,8 +19,8 @@
 import io.seata.common.exception.NotSupportYetException;
 import io.seata.rm.datasource.ConnectionProxy;
 import io.seata.rm.datasource.PreparedStatementProxy;
-import io.seata.rm.datasource.sql.SQLInsertRecognizer;
-import io.seata.rm.datasource.sql.struct.Null;
+import io.seata.sqlparser.SQLInsertRecognizer;
+import io.seata.sqlparser.struct.Null;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;

File: rm-datasource/src/test/java/io/seata/rm/datasource/exec/DeleteExecutorTest.java
Patch:
@@ -31,8 +31,8 @@
 import io.seata.rm.datasource.DataSourceProxy;
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.mock.MockDriver;
-import io.seata.rm.datasource.sql.druid.MySQLDeleteRecognizer;
 import io.seata.rm.datasource.sql.struct.TableRecords;
+import io.seata.sqlparser.druid.MySQLDeleteRecognizer;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;

File: rm-datasource/src/test/java/io/seata/rm/datasource/exec/InsertExecutorTest.java
Patch:
@@ -15,18 +15,18 @@
  */
 package io.seata.rm.datasource.exec;
 
-import com.alibaba.druid.util.JdbcConstants;
 import io.seata.common.exception.NotSupportYetException;
 import io.seata.common.exception.ShouldNeverHappenException;
 import io.seata.rm.datasource.ConnectionProxy;
 import io.seata.rm.datasource.PreparedStatementProxy;
 import io.seata.rm.datasource.StatementProxy;
-import io.seata.rm.datasource.sql.SQLInsertRecognizer;
+import io.seata.sqlparser.SQLInsertRecognizer;
 import io.seata.rm.datasource.sql.struct.ColumnMeta;
-import io.seata.rm.datasource.sql.struct.Null;
+import io.seata.sqlparser.struct.Null;
 import io.seata.rm.datasource.sql.struct.Row;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
+import io.seata.sqlparser.util.JdbcConstants;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: rm-datasource/src/test/java/io/seata/rm/datasource/exec/SelectForUpdateExecutorTest.java
Patch:
@@ -32,7 +32,7 @@
 import io.seata.rm.datasource.mock.MockConnectionProxy;
 import io.seata.rm.datasource.mock.MockDriver;
 import io.seata.rm.datasource.mock.MockLockConflictConnectionProxy;
-import io.seata.rm.datasource.sql.druid.MySQLSelectForUpdateRecognizer;
+import io.seata.sqlparser.druid.MySQLSelectForUpdateRecognizer;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;

File: rm-datasource/src/test/java/io/seata/rm/datasource/exec/UpdateExecutorTest.java
Patch:
@@ -32,11 +32,10 @@
 import io.seata.rm.datasource.DataSourceProxy;
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.mock.MockDriver;
-import io.seata.rm.datasource.sql.druid.MySQLUpdateRecognizer;
 import io.seata.rm.datasource.sql.struct.TableRecords;
+import io.seata.sqlparser.druid.MySQLUpdateRecognizer;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
 /**

File: rm-datasource/src/test/java/io/seata/rm/datasource/mock/MockExecuteHandlerImpl.java
Patch:
@@ -18,6 +18,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.util.List;
+
 import com.alibaba.druid.mock.MockStatementBase;
 import com.alibaba.druid.mock.handler.MockExecuteHandler;
 

File: rm-datasource/src/test/java/io/seata/rm/datasource/mock/MockResultSetMetaData.java
Patch:
@@ -16,6 +16,7 @@
 package io.seata.rm.datasource.mock;
 import io.seata.common.util.ReflectionUtil;
 import io.seata.rm.datasource.sql.struct.ColumnMeta;
+
 import java.sql.ResultSetMetaData;
 import java.sql.SQLException;
 import java.util.ArrayList;

File: rm-datasource/src/test/java/io/seata/rm/datasource/sql/druid/oracle/OracleDeleteRecognizerTest.java
Patch:
@@ -19,8 +19,9 @@
 import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.statement.SQLDeleteStatement;
 import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleArgumentExpr;
-import io.seata.rm.datasource.ParametersHolder;
-import io.seata.rm.datasource.sql.SQLType;
+import io.seata.sqlparser.ParametersHolder;
+import io.seata.sqlparser.SQLType;
+import io.seata.sqlparser.druid.oracle.OracleDeleteRecognizer;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: rm-datasource/src/test/java/io/seata/rm/datasource/sql/druid/oracle/OracleInsertRecognizerTest.java
Patch:
@@ -20,8 +20,9 @@
 import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.statement.SQLInsertStatement;
 import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleBinaryDoubleExpr;
-import io.seata.rm.datasource.sql.SQLParsingException;
-import io.seata.rm.datasource.sql.SQLType;
+import io.seata.sqlparser.SQLParsingException;
+import io.seata.sqlparser.SQLType;
+import io.seata.sqlparser.druid.oracle.OracleInsertRecognizer;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/AbstractUndoExecutorTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.seata.rm.datasource.undo;
 
-import io.seata.rm.datasource.sql.SQLType;
+import io.seata.sqlparser.SQLType;
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.Row;
 import io.seata.rm.datasource.sql.struct.TableMeta;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/BaseUndoLogParserTest.java
Patch:
@@ -16,7 +16,7 @@
 package io.seata.rm.datasource.undo;
 
 import io.seata.rm.datasource.DataCompareUtils;
-import io.seata.rm.datasource.sql.SQLType;
+import io.seata.sqlparser.SQLType;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/BranchUndoLogTest.java
Patch:
@@ -18,12 +18,11 @@
 import java.sql.Types;
 import java.util.ArrayList;
 
-import io.seata.rm.datasource.sql.SQLType;
+import io.seata.sqlparser.SQLType;
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.Row;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
-
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/UndoExecutorTest.java
Patch:
@@ -48,16 +48,16 @@
 import java.util.Properties;
 import java.util.concurrent.Executor;
 
-import com.alibaba.druid.util.JdbcConstants;
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.serializer.SerializerFeature;
-import io.seata.rm.datasource.sql.SQLType;
+
+import io.seata.sqlparser.SQLType;
 import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.sql.struct.KeyType;
 import io.seata.rm.datasource.sql.struct.Row;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
-
+import io.seata.sqlparser.util.JdbcConstants;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/UndoLogManagerTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.seata.rm.datasource.undo;
 
-import com.alibaba.druid.util.JdbcConstants;
+import io.seata.sqlparser.util.JdbcConstants;
 import org.junit.jupiter.api.Test;
 
 import java.sql.Connection;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/mysql/MySQLUndoDeleteExecutorTest.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.seata.rm.datasource.undo.mysql;
 
-import io.seata.rm.datasource.sql.SQLType;
+import io.seata.rm.datasource.undo.BaseExecutorTest;
+import io.seata.rm.datasource.undo.SQLUndoLog;
+import io.seata.sqlparser.SQLType;
 import io.seata.rm.datasource.sql.struct.Row;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
-import io.seata.rm.datasource.undo.BaseExecutorTest;
-import io.seata.rm.datasource.undo.SQLUndoLog;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/mysql/MySQLUndoInsertExecutorTest.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.seata.rm.datasource.undo.mysql;
 
-import io.seata.rm.datasource.sql.SQLType;
+import io.seata.rm.datasource.undo.BaseExecutorTest;
+import io.seata.rm.datasource.undo.SQLUndoLog;
+import io.seata.sqlparser.SQLType;
 import io.seata.rm.datasource.sql.struct.Row;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
-import io.seata.rm.datasource.undo.BaseExecutorTest;
-import io.seata.rm.datasource.undo.SQLUndoLog;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/mysql/MySQLUndoUpdateExecutorTest.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.seata.rm.datasource.undo.mysql;
 
-import io.seata.rm.datasource.sql.SQLType;
+import io.seata.rm.datasource.undo.BaseExecutorTest;
+import io.seata.rm.datasource.undo.SQLUndoLog;
+import io.seata.sqlparser.SQLType;
 import io.seata.rm.datasource.sql.struct.Row;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
-import io.seata.rm.datasource.undo.BaseExecutorTest;
-import io.seata.rm.datasource.undo.SQLUndoLog;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/oracle/OracleUndoDeleteExecutorTest.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.seata.rm.datasource.undo.oracle;
 
-import io.seata.rm.datasource.sql.SQLType;
 import io.seata.rm.datasource.sql.struct.Row;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.rm.datasource.undo.BaseExecutorTest;
 import io.seata.rm.datasource.undo.SQLUndoLog;
+import io.seata.sqlparser.SQLType;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/oracle/OracleUndoInsertExecutorTest.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.seata.rm.datasource.undo.oracle;
 
-import io.seata.rm.datasource.sql.SQLType;
 import io.seata.rm.datasource.sql.struct.Row;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.rm.datasource.undo.BaseExecutorTest;
 import io.seata.rm.datasource.undo.SQLUndoLog;
+import io.seata.sqlparser.SQLType;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/oracle/OracleUndoUpdateExecutorTest.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.seata.rm.datasource.undo.oracle;
 
-import io.seata.rm.datasource.sql.SQLType;
 import io.seata.rm.datasource.sql.struct.Row;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
 import io.seata.rm.datasource.undo.BaseExecutorTest;
 import io.seata.rm.datasource.undo.SQLUndoLog;
+import io.seata.sqlparser.SQLType;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/parser/JacksonUndoLogParserTest.java
Patch:
@@ -26,9 +26,9 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.seata.rm.datasource.DataCompareUtils;
-import io.seata.rm.datasource.sql.struct.Field;
 import io.seata.rm.datasource.undo.BaseUndoLogParserTest;
 import io.seata.rm.datasource.undo.UndoLogParser;
+import io.seata.rm.datasource.sql.struct.Field;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/ParametersHolder.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource;
+package io.seata.sqlparser;
 
 import java.util.ArrayList;
 

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/SQLDeleteRecognizer.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.sql;
+package io.seata.sqlparser;
 
 /**
  * The interface Sql delete recognizer.

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/SQLInsertRecognizer.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.sql;
+package io.seata.sqlparser;
 
 import java.util.List;
 

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/SQLParsingException.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.sql;
+package io.seata.sqlparser;
 
 /**
  * The type Sql parsing exception.

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/SQLRecognizer.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.sql;
+package io.seata.sqlparser;
 
 /**
  * The interface Sql recognizer.

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/SQLSelectRecognizer.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.sql;
+package io.seata.sqlparser;
 
 /**
  * The interface Sql select recognizer.

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/SQLType.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.sql;
+package io.seata.sqlparser;
 
 /**
  * The enum Sql type.

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/SQLUpdateRecognizer.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.sql;
+package io.seata.sqlparser;
 
 import java.util.List;
 

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/WhereRecognizer.java
Patch:
@@ -13,13 +13,11 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.sql;
+package io.seata.sqlparser;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import io.seata.rm.datasource.ParametersHolder;
-
 /**
  * The interface Where recognizer.
  *

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/struct/Null.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.sql.struct;
+package io.seata.sqlparser.struct;
 
 /**
  * The type Null.

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/struct/SqlMethodExpr.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.sql.struct;
+package io.seata.sqlparser.struct;
 
 /**
  * TODO

File: sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/struct/SqlSequenceExpr.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.sql.struct;
+package io.seata.sqlparser.struct;
 
 /**
  * TODO

File: sqlparser/seata-sqlparser-druid/src/main/java/io/seata/sqlparser/druid/BaseRecognizer.java
Patch:
@@ -13,16 +13,15 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.sql.druid;
+package io.seata.sqlparser.druid;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.expr.SQLBetweenExpr;
 import com.alibaba.druid.sql.ast.expr.SQLBinaryOpExpr;
 import com.alibaba.druid.sql.ast.expr.SQLExistsExpr;
 import com.alibaba.druid.sql.ast.expr.SQLInListExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
-
-import io.seata.rm.datasource.sql.SQLRecognizer;
+import io.seata.sqlparser.SQLRecognizer;
 
 /**
  * The type Base recognizer.

File: sqlparser/seata-sqlparser-druid/src/main/java/io/seata/sqlparser/druid/SQLOperateRecognizerHolder.java
Patch:
@@ -13,9 +13,10 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.sql;
+package io.seata.sqlparser.druid;
 
 import com.alibaba.druid.sql.ast.SQLStatement;
+import io.seata.sqlparser.SQLRecognizer;
 
 /**
  * The interface SQLOperateRecognizerHolder

File: sqlparser/seata-sqlparser-druid/src/main/java/io/seata/sqlparser/druid/SQLOperateRecognizerHolderFactory.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.sql;
+package io.seata.sqlparser.druid;
 
 import io.seata.common.loader.EnhancedServiceLoader;
 

File: sqlparser/seata-sqlparser-druid/src/test/java/io/seata/sqlparser/druid/AbstractMySQLRecognizerTest.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.sql.druid;
+package io.seata.sqlparser.druid;
 
 import java.util.List;
 

File: sqlparser/seata-sqlparser-druid/src/test/java/io/seata/sqlparser/druid/MySQLInsertRecognizerTest.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.rm.datasource.sql.druid;
+package io.seata.sqlparser.druid;
 
 import java.util.Arrays;
 import java.util.Collections;
@@ -25,8 +25,8 @@
 import com.alibaba.druid.sql.dialect.mysql.ast.expr.MySqlOrderingExpr;
 import com.alibaba.druid.util.JdbcConstants;
 
-import io.seata.rm.datasource.sql.SQLParsingException;
-import io.seata.rm.datasource.sql.SQLType;
+import io.seata.sqlparser.SQLParsingException;
+import io.seata.sqlparser.SQLType;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: rm-datasource/src/main/java/io/seata/rm/datasource/AbstractConnectionProxy.java
Patch:
@@ -111,7 +111,8 @@ public PreparedStatement prepareStatement(String sql) throws SQLException {
             SQLRecognizer sqlRecognizer = SQLVisitorFactory.get(sql, dbType);
             if (sqlRecognizer != null && sqlRecognizer.getSQLType() == SQLType.INSERT) {
                 String tableName = ColumnUtils.delEscape(sqlRecognizer.getTableName(), dbType);
-                TableMeta tableMeta = TableMetaCacheFactory.getTableMetaCache(getDataSourceProxy()).getTableMeta(getDataSourceProxy(), tableName);
+                TableMeta tableMeta = TableMetaCacheFactory.getTableMetaCache(getDataSourceProxy()).getTableMeta(getTargetConnection(),
+                    tableName,getDataSourceProxy().getResourceId());
                 targetPreparedStatement = getTargetConnection().prepareStatement(sql, new String[]{tableMeta.getPkName()});
             }
         }

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseTransactionalExecutor.java
Patch:
@@ -189,7 +189,7 @@ protected TableMeta getTableMeta(String tableName) {
         }
         ConnectionProxy connectionProxy = statementProxy.getConnectionProxy();
         tableMeta = TableMetaCacheFactory.getTableMetaCache(connectionProxy.getDbType())
-                .getTableMeta(connectionProxy.getDataSourceProxy(), tableName);
+                .getTableMeta(connectionProxy.getTargetConnection(), tableName,connectionProxy.getDataSourceProxy().getResourceId());
         return tableMeta;
     }
 

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java
Patch:
@@ -302,7 +302,7 @@ public void undo(DataSourceProxy dataSourceProxy, String xid, long branchId) thr
                         }
                         for (SQLUndoLog sqlUndoLog : sqlUndoLogs) {
                             TableMeta tableMeta = TableMetaCacheFactory.getTableMetaCache(dataSourceProxy).getTableMeta(
-                                dataSourceProxy, sqlUndoLog.getTableName());
+                                conn, sqlUndoLog.getTableName(),dataSourceProxy.getResourceId());
                             sqlUndoLog.setTableMeta(tableMeta);
                             AbstractUndoExecutor undoExecutor = UndoExecutorFactory.getUndoExecutor(
                                 dataSourceProxy.getDbType(), sqlUndoLog);

File: seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/properties/file/ClientProperties.java
Patch:
@@ -30,7 +30,7 @@ public class ClientProperties {
     private int rmReportRetryCount = 5;
     private int tmCommitRetryCount = 5;
     private int tmRollbackRetryCount = 5;
-    private boolean rmTableMetaCheckEnable = true;
+    private boolean rmTableMetaCheckEnable = false;
     private boolean rmReportSuccessEnable = true;
 
     public int getRmAsyncCommitBufferLimit() {

File: config/seata-config-core/src/main/java/io/seata/config/ConfigurationChangeEvent.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.config;
 
 /**

File: config/seata-config-core/src/main/java/io/seata/config/ConfigurationChangeListener.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.config;
 
 import java.util.concurrent.ExecutorService;

File: config/seata-config-core/src/main/java/io/seata/config/ConfigurationChangeType.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.config;
 
 /**

File: config/seata-config-core/src/test/java/io.seata.config/FileConfigurationTest.java
Patch:
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.config;
 
 import java.util.concurrent.CountDownLatch;

File: config/seata-config-core/src/main/java/io/seata/config/FileConfiguration.java
Patch:
@@ -17,6 +17,8 @@
 
 import java.io.File;
 import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
@@ -61,7 +63,7 @@ public class FileConfiguration extends AbstractConfiguration {
     private final ConcurrentMap<String, Set<ConfigurationChangeListener>> configListenersMap = new ConcurrentHashMap<>(
         8);
 
-    private final ConcurrentMap<String, String> listenedConfigMap = new ConcurrentHashMap<>(8);
+    private final Map<String, String> listenedConfigMap = new HashMap<>(8);
 
     private final String targetFilePath;
 

File: server/src/main/java/io/seata/server/session/db/DataBaseSessionManager.java
Patch:
@@ -173,7 +173,7 @@ public Collection<GlobalSession> allSessions() {
             return findGlobalSessions(new SessionCondition(new GlobalStatus[] {GlobalStatus.CommitRetrying}));
         } else if (SessionHolder.RETRY_ROLLBACKING_SESSION_MANAGER_NAME.equalsIgnoreCase(taskName)) {
             return findGlobalSessions(new SessionCondition(new GlobalStatus[] {GlobalStatus.RollbackRetrying,
-                GlobalStatus.TimeoutRollbacking, GlobalStatus.TimeoutRollbackRetrying}));
+                GlobalStatus.Rollbacking, GlobalStatus.TimeoutRollbacking, GlobalStatus.TimeoutRollbackRetrying}));
         } else {
             //all data
             return findGlobalSessions(new SessionCondition(new GlobalStatus[] {

File: spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java
Patch:
@@ -325,7 +325,8 @@ public Object postProcessAfterInitialization(Object bean, String beanName) throw
                 LOGGER.info("Auto proxy of [{}]", beanName);
             }
             DataSourceProxy dataSourceProxy = DataSourceProxyHolder.get().putDataSource((DataSource) bean);
-            return Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), bean.getClass().getInterfaces(), new InvocationHandler() {
+            Class<?>[] interfaces = SpringProxyUtils.getAllInterfaces(bean);
+            return Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), interfaces, new InvocationHandler() {
                 @Override
                 public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                     Method m = BeanUtils.findDeclaredMethod(DataSourceProxy.class, method.getName(), method.getParameterTypes());

File: rm-datasource/src/main/java/io/seata/rm/datasource/AbstractConnectionProxy.java
Patch:
@@ -110,7 +110,7 @@ public PreparedStatement prepareStatement(String sql) throws SQLException {
         if (RootContext.inGlobalTransaction()) {
             SQLRecognizer sqlRecognizer = SQLVisitorFactory.get(sql, dbType);
             if (sqlRecognizer != null && sqlRecognizer.getSQLType() == SQLType.INSERT) {
-                final String tableName = sqlRecognizer.getTableName();
+                String tableName = ColumnUtils.delEscape(sqlRecognizer.getTableName(), dbType);
                 TableMeta tableMeta = TableMetaCacheFactory.getTableMetaCache(getDataSourceProxy()).getTableMeta(getDataSourceProxy(), tableName);
                 targetPreparedStatement = getTargetConnection().prepareStatement(sql, new String[]{tableMeta.getPkName()});
             }

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/UpdateExecutor.java
Patch:
@@ -68,7 +68,7 @@ private String buildBeforeImageSQL(TableMeta tableMeta, ArrayList<List<Object>>
         List<String> updateColumns = recognizer.getUpdateColumns();
         StringBuilder prefix = new StringBuilder("SELECT ");
         if (!tableMeta.containsPK(updateColumns)) {
-            prefix.append(getColumnNameInSQL(tableMeta.getPkName())).append(", ");
+            prefix.append(getColumnNameInSQL(tableMeta.getEscapePkName(getDbType()))).append(", ");
         }
         StringBuilder suffix = new StringBuilder(" FROM ").append(getFromTableInSQL());
         String whereCondition = buildWhereCondition(recognizer, paramAppenderList);
@@ -118,9 +118,9 @@ private String buildAfterImageSQL(TableMeta tableMeta, TableRecords beforeImage)
         SQLUpdateRecognizer recognizer = (SQLUpdateRecognizer)sqlRecognizer;
         List<String> updateColumns = recognizer.getUpdateColumns();
         StringBuilder prefix = new StringBuilder("SELECT ");
-        if (!tableMeta.containsPK(updateColumns)) {
+        if (!containsPK(updateColumns)) {
             // PK should be included.
-            prefix.append(getColumnNameInSQL(tableMeta.getPkName())).append(", ");
+            prefix.append(getColumnNameInSQL(tableMeta.getEscapePkName(getDbType()))).append(", ");
         }
         String suffix = " FROM " + getFromTableInSQL() + " WHERE " + buildWhereConditionByPKs(beforeImage.pkRows());
         StringJoiner selectSQLJoiner = new StringJoiner(", ", prefix.toString(), suffix);

File: rm-datasource/src/test/java/io/seata/rm/datasource/sql/struct/IndexMetaTest.java
Patch:
@@ -29,7 +29,6 @@ public class IndexMetaTest {
     public void testIndexMeta() {
         IndexMeta indexMeta = new IndexMeta();
         indexMeta.setValues(Lists.newArrayList());
-        Assertions.assertNotNull(indexMeta.getIndexvalue());
         Assertions.assertNotNull(indexMeta.toString());
         Assertions.assertEquals(indexMeta, indexMeta);
         Assertions.assertEquals(indexMeta.hashCode(), indexMeta.hashCode());

File: rm-datasource/src/test/java/io/seata/rm/datasource/sql/struct/TableMetaTest.java
Patch:
@@ -16,7 +16,6 @@
 package io.seata.rm.datasource.sql.struct;
 
 import com.google.common.collect.Lists;
-import com.sun.org.apache.xpath.internal.operations.String;
 import io.seata.common.exception.NotSupportYetException;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
@@ -52,8 +51,8 @@ public void testTableMeta() {
     public void testGetColumnMeta() {
         TableMeta tableMeta = new TableMeta();
         tableMeta.getAllColumns().put("id", new ColumnMeta());
-        tableMeta.getAllColumns().put("`name`", new ColumnMeta());
-        Assertions.assertNotNull(tableMeta.getColumnMeta("`id`"));
+        tableMeta.getAllColumns().put("name", new ColumnMeta());
+        Assertions.assertNull(tableMeta.getColumnMeta("`id`"));
         Assertions.assertNotNull(tableMeta.getColumnMeta("name"));
     }
 

File: rm-datasource/src/test/java/io/seata/rm/datasource/undo/BaseH2Test.java
Patch:
@@ -106,6 +106,7 @@ protected static TableRecords execQuery(TableMeta tableMeta, String sql) throws
     protected static TableMeta mockTableMeta() {
         TableMeta tableMeta = Mockito.mock(TableMeta.class);
         Mockito.when(tableMeta.getPkName()).thenReturn("ID");
+        Mockito.when(tableMeta.getEscapePkName("h2")).thenReturn("`ID`");
         Mockito.when(tableMeta.getTableName()).thenReturn("table_name");
         ColumnMeta meta0 = Mockito.mock(ColumnMeta.class);
         Mockito.when(meta0.getDataType()).thenReturn(Types.INTEGER);

File: tm/src/test/java/io/seata/tm/api/DefaultFailureHandlerImplTest.java
Patch:
@@ -72,6 +72,7 @@ public GlobalStatus globalReport(String xid, GlobalStatus globalStatus) throws T
             }
         });
     }
+
     @Test
     void onBeginFailure() {
         RootContext.bind(DEFAULT_XID);

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/cache/MysqlTableMetaCache.java
Patch:
@@ -79,8 +79,8 @@ protected String getCacheKey(DataSourceProxy dataSourceProxy, String tableName)
         String defaultTableName = tableNameWithCatalog.length > 1 ? tableNameWithCatalog[1] : tableNameWithCatalog[0];
 
         DatabaseMetaData databaseMetaData = null;
-        try {
-            databaseMetaData = dataSourceProxy.getPlainConnection().getMetaData();
+        try (Connection connection = dataSourceProxy.getPlainConnection()) {
+            databaseMetaData = connection.getMetaData();
         } catch (SQLException e) {
             LOGGER.error("Could not get connection, use default cache key", e.getMessage(), e);
             return cacheKey.append(defaultTableName).toString();

File: config/seata-config-etcd3/src/main/java/io/seata/config/etcd3/EtcdConfiguration.java
Patch:
@@ -66,7 +66,7 @@ public class EtcdConfiguration extends AbstractConfiguration {
     private static volatile EtcdConfiguration instance;
     private static volatile Client client;
 
-    private static final Configuration FILE_CONFIG = ConfigurationFactory.getInstance();
+    private static final Configuration FILE_CONFIG = ConfigurationFactory.CURRENT_FILE_INSTANCE;
     private static final String SERVER_ADDR_KEY = "serverAddr";
     private static final String CONFIG_TYPE = "etcd3";
     private static final String FILE_CONFIG_KEY_PREFIX = FILE_ROOT_CONFIG + FILE_CONFIG_SPLIT_CHAR + CONFIG_TYPE

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/cache/AbstractTableMetaCache.java
Patch:
@@ -107,9 +107,7 @@ public void refresh(final DataSourceProxy dataSourceProxy) {
      * @param tableName
      * @return
      */
-    private String getCacheKey(DataSourceProxy dataSourceProxy, String tableName) {
-        return dataSourceProxy.getResourceId() + "." + tableName;
-    }
+    protected abstract String getCacheKey(DataSourceProxy dataSourceProxy, String tableName);
 
     /**
      * get scheme from datasource and tableName

File: rm-datasource/src/test/java/io/seata/rm/datasource/mock/MockDriver.java
Patch:
@@ -72,7 +72,7 @@ public MockDriver(List<String> mockReturnValueColumnLabels, Object[][] mockRetur
         this.mockReturnValue = mockReturnValue;
         this.mockColumnsMetasReturnValue = mockColumnsMetasReturnValue;
         this.mockIndexMetasReturnValue = mockIndexMetasReturnValue;
-        this.setMockExecuteHandler(new MockExecuteHandlerImpl(mockReturnValueColumnLabels, mockReturnValue));
+        this.setMockExecuteHandler(new MockExecuteHandlerImpl(mockReturnValueColumnLabels, mockReturnValue, mockColumnsMetasReturnValue));
     }
 
     /**

File: discovery/seata-discovery-core/src/main/java/io/seata/discovery/registry/FileRegistryServiceImpl.java
Patch:
@@ -79,7 +79,7 @@ public void unsubscribe(String cluster, ConfigChangeListener listener) throws Ex
 
     @Override
     public List<InetSocketAddress> lookup(String key) throws Exception {
-        String clusterName = CONFIG.getConfig(PREFIX_SERVICE_ROOT + CONFIG_SPLIT_CHAR + PREFIX_SERVICE_MAPPING + key);
+        String clusterName = getServiceGroup(key);
         if (null == clusterName) {
             return null;
         }

File: discovery/seata-discovery-custom/src/test/java/io/seata/discovery/registry/custom/CustomRegistryServiceForTest.java
Patch:
@@ -51,4 +51,5 @@ public List<InetSocketAddress> lookup(String key) throws Exception {
     public void close() throws Exception {
         throw new UnsupportedOperationException();
     }
+
 }

File: discovery/seata-discovery-nacos/src/main/java/io/seata/discovery/registry/nacos/NacosRegistryServiceImpl.java
Patch:
@@ -113,8 +113,7 @@ public void unsubscribe(String cluster, EventListener listener) throws Exception
 
     @Override
     public List<InetSocketAddress> lookup(String key) throws Exception {
-        Configuration config = ConfigurationFactory.getInstance();
-        String clusterName = config.getConfig(PREFIX_SERVICE_ROOT + CONFIG_SPLIT_CHAR + PREFIX_SERVICE_MAPPING + key);
+        String clusterName = getServiceGroup(key);
         if (null == clusterName) {
             return null;
         }

File: discovery/seata-discovery-sofa/src/main/java/io/seata/discovery/registry/sofa/SofaRegistryServiceImpl.java
Patch:
@@ -158,8 +158,7 @@ public void unsubscribe(String cluster, SubscriberDataObserver listener) throws
 
     @Override
     public List<InetSocketAddress> lookup(String key) throws Exception {
-        Configuration config = ConfigurationFactory.getInstance();
-        String clusterName = config.getConfig(PREFIX_SERVICE_ROOT + CONFIG_SPLIT_CHAR + PREFIX_SERVICE_MAPPING + key);
+        String clusterName = getServiceGroup(key);
         if (null == clusterName) {
             return null;
         }

File: server/src/main/java/io/seata/server/ParameterParser.java
Patch:
@@ -93,7 +93,7 @@ private void init(String[] args) {
                 this.seataEnv = StringUtils.trimToNull(System.getenv(ENV_SYSTEM_KEY));
                 this.host = StringUtils.trimToNull(System.getenv(ENV_SEATA_IP_KEY));
                 this.serverNode = NumberUtils.toInt(System.getenv(ENV_SERVER_NODE_KEY), SERVER_DEFAULT_NODE);
-                this.port = NumberUtils.toInt(System.getProperty(ENV_SEATA_PORT_KEY), SERVER_DEFAULT_PORT);
+                this.port = NumberUtils.toInt(System.getenv(ENV_SEATA_PORT_KEY), SERVER_DEFAULT_PORT);
                 this.storeMode = StringUtils.trimToNull(System.getenv(ENV_STORE_MODE_KEY));
             } else {
                 JCommander jCommander = JCommander.newBuilder().addObject(this).build();

File: common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java
Patch:
@@ -349,7 +349,6 @@ protected static <S> S initInstance(Class<S> service, Class implClazz, Class[] a
         if (argTypes != null && args != null) {
             // Constructor with arguments
             Constructor<S> constructor = implClazz.getDeclaredConstructor(argTypes);
-            constructor.setAccessible(true);
             s = service.cast(constructor.newInstance(args));
         } else {
             // default Constructor

File: server/src/main/java/io/seata/server/coordinator/DefaultCoordinator.java
Patch:
@@ -454,8 +454,8 @@ protected void handleAsyncCommitting() {
                 asyncCommittingSession.addSessionLifecycleListener(SessionHolder.getRootSessionManager());
                 core.doGlobalCommit(asyncCommittingSession, true);
             } catch (TransactionException ex) {
-                LOGGER.info("Failed to async committing [{}] {} {}", asyncCommittingSession.getXid(), ex.getCode(),
-                    ex.getMessage());
+                LOGGER.error("Failed to async committing [{}] {} {}", asyncCommittingSession.getXid(), ex.getCode(),
+                    ex.getMessage(), ex);
             }
         }
     }

File: core/src/main/java/io/seata/core/store/db/AbstractDataSourceGenerator.java
Patch:
@@ -57,7 +57,7 @@ protected String getDriverClassName() {
         String driverClassName = CONFIG.getConfig(ConfigurationKeys.STORE_DB_DRIVER_CLASS_NAME);
         if (StringUtils.isBlank(driverClassName)) {
             throw new StoreException(
-                String.format("the {} can't be empty", ConfigurationKeys.STORE_DB_DRIVER_CLASS_NAME));
+                String.format("the {%s} can't be empty", ConfigurationKeys.STORE_DB_DRIVER_CLASS_NAME));
         }
         return driverClassName;
     }
@@ -70,7 +70,7 @@ protected String getDriverClassName() {
     protected String getUrl() {
         String url = CONFIG.getConfig(ConfigurationKeys.STORE_DB_URL);
         if (StringUtils.isBlank(url)) {
-            throw new StoreException(String.format("the {} can't be empty", ConfigurationKeys.STORE_DB_URL));
+            throw new StoreException(String.format("the {%s} can't be empty", ConfigurationKeys.STORE_DB_URL));
         }
         return url;
     }
@@ -83,7 +83,7 @@ protected String getUrl() {
     protected String getUser() {
         String user = CONFIG.getConfig(ConfigurationKeys.STORE_DB_USER);
         if (StringUtils.isBlank(user)) {
-            throw new StoreException(String.format("the {} can't be empty", ConfigurationKeys.STORE_DB_USER));
+            throw new StoreException(String.format("the {%s} can't be empty", ConfigurationKeys.STORE_DB_USER));
         }
         return user;
     }

File: rm-datasource/src/test/java/io/seata/rm/datasource/mock/MockDriver.java
Patch:
@@ -110,15 +110,15 @@ public Object[][] getMockReturnValue() {
      * @param mockReturnValue
      */
     public void setMockReturnValue(Object[][] mockReturnValue) {
-        this.mockReturnValue = mockReturnValue;
+        this.mockReturnValue = mockReturnValue == null ? new Object[][]{} : mockReturnValue;
     }
 
     /**
      * mock the return value of columns meta
      * @param mockColumnsMetasReturnValue
      */
     public void setMockColumnsMetasReturnValue(Object[][] mockColumnsMetasReturnValue) {
-        this.mockColumnsMetasReturnValue = mockColumnsMetasReturnValue;
+        this.mockColumnsMetasReturnValue = mockColumnsMetasReturnValue == null ? new Object[][]{} : mockColumnsMetasReturnValue;
     }
 
     /**
@@ -134,7 +134,7 @@ public Object[][] getMockColumnsMetasReturnValue() {
      * @param mockIndexMetasReturnValue
      */
     public void setMockIndexMetasReturnValue(Object[][] mockIndexMetasReturnValue) {
-        this.mockIndexMetasReturnValue = mockIndexMetasReturnValue;
+        this.mockIndexMetasReturnValue = mockIndexMetasReturnValue == null ? new Object[][]{} : mockIndexMetasReturnValue;
     }
 
     /**

File: config/seata-config-core/src/main/java/io/seata/config/FileConfiguration.java
Patch:
@@ -79,6 +79,7 @@ public FileConfiguration() {
      * @param name the name
      */
     public FileConfiguration(String name) {
+        LOGGER.info("The file name of the operation is {}", name);
         if (null == name) {
             fileConfig = ConfigFactory.load();
         }

File: server/src/main/java/io/seata/server/store/file/FileTransactionStoreManager.java
Patch:
@@ -473,7 +473,7 @@ private boolean writeDataFileByBuffer(ByteBuffer byteBuffer) {
                     currFileChannel.write(byteBuffer);
                 }
                 return true;
-            } catch (IOException exx) {
+            } catch (Exception exx) {
                 LOGGER.error("write data file error:{}",exx.getMessage(),exx);
             }
         }

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/UndoExecutorFactory.java
Patch:
@@ -35,7 +35,7 @@ public class UndoExecutorFactory {
      * @return the undo executor
      */
     public static AbstractUndoExecutor getUndoExecutor(String dbType, SQLUndoLog sqlUndoLog) {
-      if (!dbType.equals(JdbcConstants.MYSQL) && !dbType.equals(JdbcConstants.ORACLE)) {
+      if (!JdbcConstants.MYSQL.equals(dbType) && !JdbcConstants.ORACLE.equals(dbType)) {
         throw new NotSupportYetException(dbType);
       }
       AbstractUndoExecutor result = null;

File: core/src/main/java/io/seata/core/model/ResourceManager.java
Patch:
@@ -24,8 +24,6 @@
  */
 public interface ResourceManager extends ResourceManagerInbound, ResourceManagerOutbound {
 
-    Object RESOURCE_LOCK = new Object();
-
     /**
      * Register a Resource to be managed by Resource Manager.
      *

File: rm-datasource/src/main/java/io/seata/rm/datasource/DataSourceManager.java
Patch:
@@ -145,9 +145,6 @@ public void init() {
     public void registerResource(Resource resource) {
         DataSourceProxy dataSourceProxy = (DataSourceProxy)resource;
         dataSourceCache.put(dataSourceProxy.getResourceId(), dataSourceProxy);
-        synchronized (RESOURCE_LOCK) {
-            RESOURCE_LOCK.notifyAll();
-        }
         super.registerResource(dataSourceProxy);
     }
 

File: tcc/src/main/java/io/seata/rm/tcc/TCCResourceManager.java
Patch:
@@ -60,9 +60,6 @@ public TCCResourceManager() {
     public void registerResource(Resource resource) {
         TCCResource tccResource = (TCCResource)resource;
         tccResourceCache.put(tccResource.getResourceId(), tccResource);
-        synchronized (RESOURCE_LOCK) {
-            RESOURCE_LOCK.notifyAll();
-        }
         super.registerResource(tccResource);
     }
 

File: core/src/main/java/io/seata/core/constants/ServerTableColumnsName.java
Patch:
@@ -85,7 +85,7 @@ public class ServerTableColumnsName {
     /**
      * The constant branch_table column name branch_id
      */
-    public static final String BRANCH_TABLE_BRANCH_XID = "branch_id";
+    public static final String BRANCH_TABLE_BRANCH_ID = "branch_id";
 
     /**
      * The constant branch_table column name xid

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/druid/BaseMySQLRecognizer.java
Patch:
@@ -26,6 +26,7 @@
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlOutputVisitor;
 
 import io.seata.rm.datasource.ParametersHolder;
+import io.seata.rm.datasource.sql.struct.Null;
 
 /**
  * @author will
@@ -52,7 +53,8 @@ public boolean visit(SQLVariantRefExpr x) {
                         oneParamValues.stream().forEach(t -> paramAppenderList.add(new ArrayList<>()));
                     }
                     for (int i = 0; i < oneParamValues.size(); i++) {
-                        paramAppenderList.get(i).add(oneParamValues.get(i));
+                        Object o = oneParamValues.get(i);
+                        paramAppenderList.get(i).add(o instanceof Null ? null : o);
                     }
 
                 }

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/druid/oracle/BaseOracleRecognizer.java
Patch:
@@ -27,6 +27,7 @@
 
 import io.seata.rm.datasource.ParametersHolder;
 import io.seata.rm.datasource.sql.druid.BaseRecognizer;
+import io.seata.rm.datasource.sql.struct.Null;
 
 /**
  * @author will
@@ -53,7 +54,8 @@ public boolean visit(SQLVariantRefExpr x) {
                         oneParamValues.stream().forEach(t -> paramAppenderList.add(new ArrayList<>()));
                     }
                     for (int i = 0; i < oneParamValues.size(); i++) {
-                        paramAppenderList.get(i).add(oneParamValues.get(i));
+                        Object o = oneParamValues.get(i);
+                        paramAppenderList.get(i).add(o instanceof Null ? null : o);
                     }
 
                 }

File: server/src/main/java/io/seata/server/store/FlushDiskMode.java
Patch:
@@ -16,10 +16,9 @@
 package io.seata.server.store;
 
 /**
- *
  * @author lizhao
  */
-public enum  FlushDiskMode {
+public enum FlushDiskMode {
     /**
      * sync flush disk
      */
@@ -36,7 +35,7 @@ public enum  FlushDiskMode {
     }
 
     public static FlushDiskMode findDiskMode(String modeStr) {
-        if (SYNC_MODEL.modeStr.equals(modeStr)){
+        if (SYNC_MODEL.modeStr.equals(modeStr)) {
             return SYNC_MODEL;
         }
         return ASYNC_MODEL;

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoExecutor.java
Patch:
@@ -167,6 +167,8 @@ protected void undoPrepare(PreparedStatement undoPST, ArrayList<Field> undoValue
                 } else {
                     undoPST.setObject(undoIndex, null);
                 }
+            } else if (undoValue.getType() == JDBCType.OTHER.getVendorTypeNumber()) {
+                undoPST.setObject(undoIndex, undoValue.getValue());
             } else {
                 undoPST.setObject(undoIndex, undoValue.getValue(), undoValue.getType());
             }

File: server/src/main/java/io/seata/server/coordinator/DefaultCore.java
Patch:
@@ -89,7 +89,7 @@ public Long branchRegister(BranchType branchType, String resourceId, String clie
             } catch (RuntimeException ex) {
                 branchSession.unlock();
                 throw new BranchTransactionException(FailedToAddBranch,
-                    String.format("Failed to store branch xid = %s branchId = %s", globalSession.getXid(), branchSession.getBranchId()));
+                    String.format("Failed to store branch xid = %s branchId = %s", globalSession.getXid(), branchSession.getBranchId()), ex);
             }
             LOGGER.info("Successfully register branch xid = {}, branchId = {}", globalSession.getXid(), branchSession.getBranchId());
             return branchSession.getBranchId();

File: saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/config/DbStateMachineConfig.java
Patch:
@@ -51,8 +51,6 @@ public class DbStateMachineConfig extends DefaultStateMachineConfig implements D
     @Override
     public void afterPropertiesSet() throws Exception {
 
-        super.afterPropertiesSet();
-
         dbType = getDbTypeFromDataSource(dataSource);
 
         if(getStateLogStore() == null){
@@ -86,6 +84,8 @@ public void afterPropertiesSet() throws Exception {
 
             setStateLangStore(dbStateLangStore);
         }
+
+        super.afterPropertiesSet();//must execute after StateLangStore initialized
     }
 
     @Override

File: saga/seata-saga-engine/src/main/java/io/seata/saga/engine/strategy/StatusDecisionStrategy.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.saga.engine;
+package io.seata.saga.engine.strategy;
 
 import io.seata.saga.proctrl.ProcessContext;
 import io.seata.saga.statelang.domain.StateMachineInstance;

File: saga/seata-saga-engine/src/main/java/io/seata/saga/engine/strategy/impl/DefaultStatusDecisionStrategy.java
Patch:
@@ -13,9 +13,9 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package io.seata.saga.engine.impl;
+package io.seata.saga.engine.strategy.impl;
 
-import io.seata.saga.engine.StatusDecisionStrategy;
+import io.seata.saga.engine.strategy.StatusDecisionStrategy;
 import io.seata.saga.engine.pcext.utils.CompensationHolder;
 import io.seata.saga.engine.utils.ExceptionUtils;
 import io.seata.saga.proctrl.ProcessContext;

File: saga/seata-saga-engine/src/main/java/io/seata/saga/engine/pcext/handlers/ServiceTaskStateHandler.java
Patch:
@@ -103,8 +103,9 @@ public void process(ProcessContext context) throws EngineExecutionException {
                     state.getName(), serviceName, methodName, result);
             }
 
-            if (result != null) {
-                ((HierarchicalProcessContext) context).setVariableLocally(DomainConstants.VAR_NAME_OUTPUT_PARAMS, result);
+            if(result != null){
+                stateInstance.setOutputParams(result);
+                ((HierarchicalProcessContext)context).setVariableLocally(DomainConstants.VAR_NAME_OUTPUT_PARAMS, result);
             }
 
         } catch (Exception e) {

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/parser/ProtostuffUndoLogParser.java
Patch:
@@ -60,7 +60,7 @@ public String getName() {
 
     @Override
     public byte[] getDefaultContent() {
-        return new byte[0];
+        return encode(new BranchUndoLog());
     }
 
     @Override

File: core/src/main/java/io/seata/core/store/db/LockStoreDataBaseDAO.java
Patch:
@@ -229,7 +229,7 @@ public boolean unLock(List<LockDO> lockDOs) {
             for (int i = 0; i < lockDOs.size(); i++) {
                 ps.setString(i + 2, lockDOs.get(i).getRowKey());
             }
-            return ps.executeUpdate() > 0;
+            ps.executeUpdate();
         } catch (SQLException e) {
             throw new StoreException(e);
         } finally {
@@ -246,6 +246,7 @@ public boolean unLock(List<LockDO> lockDOs) {
                 }
             }
         }
+        return true;
     }
 
     @Override

File: core/src/main/java/io/seata/core/store/db/LogStoreDataBaseDAO.java
Patch:
@@ -467,7 +467,7 @@ public boolean deleteBranchTransactionDO(BranchTransactionDO branchTransactionDO
             ps = conn.prepareStatement(sql);
             ps.setString(1, branchTransactionDO.getXid());
             ps.setLong(2, branchTransactionDO.getBranchId());
-            return ps.executeUpdate() > 0;
+            ps.executeUpdate();
         } catch (SQLException e) {
             throw new StoreException(e);
         } finally {
@@ -484,6 +484,7 @@ public boolean deleteBranchTransactionDO(BranchTransactionDO branchTransactionDO
                 }
             }
         }
+        return true;
     }
 
     private GlobalTransactionDO convertGlobalTransactionDO(ResultSet rs) throws SQLException {

File: spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java
Patch:
@@ -327,6 +327,6 @@ public Object postProcessAfterInitialization(Object bean, String beanName) throw
                 }
             });
         }
-        return bean;
+        return super.postProcessAfterInitialization(bean, beanName);
     }
 }

File: saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/parser/impl/AbstractTaskStateParser.java
Patch:
@@ -41,7 +41,8 @@ protected void parseTaskAttributes(AbstractTaskState state, Object node) {
         state.setCompensateState((String) nodeMap.get("CompensateState"));
         state.setForCompensation("true".equals(nodeMap.get("IsForCompensation")));
         state.setForUpdate("true".equals(nodeMap.get("IsForUpdate")));
-        if("false".equals(nodeMap.get("IsPersist"))){
+        Object isPersist = nodeMap.get("IsPersist");
+        if(Boolean.FALSE.equals(isPersist)){
             state.setPersist(false);
         }
 

File: saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/parser/impl/StateMachineParserImpl.java
Patch:
@@ -43,7 +43,8 @@ public StateMachine parse(String json) {
         stateMachine.setComment((String)node.get("Comment"));
         stateMachine.setVersion((String)node.get("Version"));
         stateMachine.setStartState((String)node.get("StartState"));
-        if("false".equals(node.get("IsPersist"))){
+        Object isPersist = node.get("IsPersist");
+        if(Boolean.FALSE.equals(isPersist)){
             stateMachine.setPersist(false);
         }
 

File: metrics/seata-metrics-core/src/main/java/io/seata/metrics/exporter/ExporterFactory.java
Patch:
@@ -47,7 +47,7 @@ public static List<Exporter> getInstanceList() {
                     exporters.add(
                         EnhancedServiceLoader.load(Exporter.class, Objects.requireNonNull(exporterType).name()));
                 } catch (Exception exx) {
-                    LOGGER.error("not support metrics exporter type: " + exporterTypeName, exx);
+                    LOGGER.error("not support metrics exporter type: {}",exporterTypeName, exx);
                 }
             }
         }

File: saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/config/DbStateMachineConfig.java
Patch:
@@ -106,7 +106,7 @@ public static String getDbTypeFromDataSource(DataSource dataSource) throws SQLEx
                 try {
                     con.close();
                 } catch (SQLException e) {
-                    LOGGER.error("Get dbType from failed: " + e.getMessage(), e);
+                    LOGGER.error("Get dbType from failed: {}",e.getMessage(), e);
                 }
             }
         }
@@ -163,4 +163,4 @@ public int getTransOperationTimeout() {
     public void setTransOperationTimeout(int transOperationTimeout) {
         this.transOperationTimeout = transOperationTimeout;
     }
-}
\ No newline at end of file
+}

File: saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/serializer/impl/ExceptionSerializer.java
Patch:
@@ -56,7 +56,7 @@ public static byte[] serializeByObjectOutput(Object o) {
                 oos.flush();
                 result = baos.toByteArray();
             } catch (IOException e) {
-                LOGGER.error("serializer failed：" + o.getClass(), e);
+                LOGGER.error("serializer failed：{}",o.getClass(), e);
                 throw (new RuntimeException("IO Create Error", e));
             } finally {
                 if (oos != null) {
@@ -111,4 +111,4 @@ public static Object deserializeByObjectInputStream(byte[] bytes) {
         }
         return result;
     }
-}
\ No newline at end of file
+}

File: saga/seata-saga-engine/src/main/java/io/seata/saga/engine/pcext/handlers/SubStateMachineHandler.java
Patch:
@@ -93,7 +93,7 @@ else if(inputParamsObj instanceof Map){
 
         } catch (Exception e) {
 
-            LOGGER.error("SubStateMachine["+subStateMachine.getStateMachineName()+"] execute failed by state[name:"+subStateMachine.getName()+"]", e);
+            LOGGER.error("SubStateMachine[{}] execute failed by state[name:{}]",subStateMachine.getStateMachineName(),subStateMachine.getName(),e);
 
             if(e instanceof ForwardInvalidException) {
 
@@ -181,4 +181,4 @@ public List<StateHandlerInterceptor> getInterceptors() {
     public void setInterceptors(List<StateHandlerInterceptor> interceptors) {
         this.interceptors = interceptors;
     }
-}
\ No newline at end of file
+}

File: saga/seata-saga-engine/src/main/java/io/seata/saga/engine/pcext/interceptors/ServiceTaskHandlerInterceptor.java
Patch:
@@ -119,7 +119,7 @@ public void preProcess(ProcessContext context) throws EngineExecutionException {
                 stateInstance.setStateIdCompensatedFor(stateToBeCompensated.getId());
             }
             else{
-                LOGGER.error("Compensation State["+state.getName()+"] has no state to compensate, maybe this is a bug.");
+                LOGGER.error("Compensation State[{}] has no state to compensate, maybe this is a bug.",state.getName());
             }
             CompensationHolder.getCurrent(context, true).addForCompensationState(stateInstance.getName(), stateInstance);
         }
@@ -491,4 +491,4 @@ private Evaluator createEvaluator(EvaluatorFactoryManager evaluatorFactoryManage
         }
         return evaluator;
     }
-}
\ No newline at end of file
+}

File: saga/seata-saga-processctrl/src/main/java/io/seata/saga/proctrl/impl/ProcessControllerImpl.java
Patch:
@@ -47,12 +47,12 @@ public void process(ProcessContext context) throws FrameworkException {
         } catch (FrameworkException fex) {
             throw fex;
         } catch (Exception ex) {
-            LOGGER.error("Unknown exception occurred, context=" + context, ex);
+            LOGGER.error("Unknown exception occurred, context = {}",context, ex);
             throw new FrameworkException(ex, "Unknown exception occurred", FrameworkErrorCode.UnknownAppError);
         }
     }
 
     public void setBusinessProcessor(BusinessProcessor businessProcessor) {
         this.businessProcessor = businessProcessor;
     }
-}
\ No newline at end of file
+}

File: server/src/main/java/io/seata/server/lock/DefaultLockManager.java
Patch:
@@ -73,7 +73,7 @@ public boolean releaseLock(BranchSession branchSession) throws TransactionExcept
         try {
             return getLocker(branchSession).releaseLock(locks);
         } catch (Exception t) {
-            LOGGER.error("unLock error, branchSession:" + branchSession, t);
+            LOGGER.error("unLock error, branchSession:{}",branchSession, t);
             return false;
         }
     }
@@ -110,7 +110,7 @@ public boolean isLockable(String xid, String resourceId, String lockKey) throws
         try {
             return getLocker().isLockable(locks);
         } catch (Exception t) {
-            LOGGER.error("isLockable error, xid:" + xid + ", resourceId:" + resourceId + ", lockKey:" + lockKey, t);
+            LOGGER.error("isLockable error, xid:{} resourceId:{}, lockKey:{}", xid,resourceId,lockKey,t);
             return false;
         }
     }

File: server/src/main/java/io/seata/server/lock/db/DataBaseLocker.java
Patch:
@@ -67,7 +67,7 @@ public boolean acquireLock(List<RowLock> locks) {
         } catch (StoreException e) {
             throw e;
         } catch (Exception t) {
-            LOGGER.error("AcquireLock error, locks:" + CollectionUtils.toString(locks), t);
+            LOGGER.error("AcquireLock error, locks:{}",CollectionUtils.toString(locks), t);
             return false;
         }
     }
@@ -83,7 +83,7 @@ public boolean releaseLock(List<RowLock> locks) {
         } catch (StoreException e) {
             throw e;
         } catch (Exception t) {
-            LOGGER.error("unLock error, locks:" + CollectionUtils.toString(locks), t);
+            LOGGER.error("unLock error, locks:{}",CollectionUtils.toString(locks), t);
             return false;
         }
     }
@@ -95,7 +95,7 @@ public boolean isLockable(List<RowLock> locks) {
         } catch (DataAccessException e) {
             throw e;
         } catch (Exception t) {
-            LOGGER.error("isLockable error, locks:" + CollectionUtils.toString(locks), t);
+            LOGGER.error("isLockable error, locks:{}", CollectionUtils.toString(locks), t);
             return false;
         }
     }

File: tm/src/main/java/io/seata/tm/api/transaction/NoRollbackRule.java
Patch:
@@ -22,6 +22,8 @@
  */
 public class NoRollbackRule extends RollbackRule {
 
+    public static final NoRollbackRule DEFAULT_NO_ROLLBACK_RULE = new NoRollbackRule(Throwable.class);
+
 
     public NoRollbackRule(Class<?> clazz) {
         super(clazz);

File: rm-datasource/src/test/java/io/seata/rm/datasource/mock/MockDatabaseMetaData.java
Patch:
@@ -838,7 +838,7 @@ public Connection getConnection() throws SQLException {
 
     @Override
     public boolean supportsSavepoints() throws SQLException {
-        return false;
+        return true;
     }
 
     @Override

File: spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java
Patch:
@@ -305,10 +305,10 @@ public void setApplicationContext(ApplicationContext applicationContext) throws
     }
 
     @Override
-    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
+    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
         if (bean instanceof DataSource && !(bean instanceof DataSourceProxy) && ConfigurationFactory.getInstance().getBoolean(DATASOURCE_AUTOPROXY, false)) {
             if (LOGGER.isInfoEnabled()) {
-                LOGGER.info("Auto proxy of  [" + beanName + "]");
+                LOGGER.info("Auto proxy of [{}]", beanName);
             }
             DataSourceProxy dataSourceProxy = DataSourceProxyHolder.get().putDataSource((DataSource) bean);
             return Enhancer.create(bean.getClass(), (org.springframework.cglib.proxy.MethodInterceptor) (o, method, args, methodProxy) -> {

File: common/src/main/java/io/seata/common/util/NetUtil.java
Patch:
@@ -48,6 +48,9 @@ public class NetUtil {
      * @return the string
      */
     public static String toStringAddress(SocketAddress address) {
+        if(null == address){
+            return StringUtils.EMPTY;
+        }
         return toStringAddress((InetSocketAddress) address);
     }
 

File: server/src/main/java/io/seata/server/coordinator/DefaultCoordinator.java
Patch:
@@ -561,6 +561,6 @@ public void destroy() {
             ((RpcServer)messageSender).destroy();
         }
         // 3. last destroy SessionHolder
-        SessionHolder.destory();
+        SessionHolder.destroy();
     }
 }

File: server/src/main/java/io/seata/server/session/SessionHolder.java
Patch:
@@ -260,7 +260,7 @@ public static GlobalSession findGlobalSession(String xid) {
         return getRootSessionManager().findGlobalSession(xid);
     }
 
-    public static void destory() {
+    public static void destroy() {
         ROOT_SESSION_MANAGER.destroy();
         ASYNC_COMMITTING_SESSION_MANAGER.destroy();
         RETRY_COMMITTING_SESSION_MANAGER.destroy();

File: server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorTest.java
Patch:
@@ -140,6 +140,8 @@ public static void afterClass() throws Exception {
         for (GlobalSession globalSession : globalSessions) {
             globalSession.closeAndClean();
         }
+
+        SessionHolder.destroy();
     }
 
     static Stream<Arguments> xidAndBranchIdProviderForCommit() throws Exception {

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/DeleteExecutor.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.List;
 import java.util.StringJoiner;
 
-import com.alibaba.druid.util.JdbcConstants;
 import io.seata.rm.datasource.StatementProxy;
 import io.seata.rm.datasource.sql.SQLDeleteRecognizer;
 import io.seata.rm.datasource.sql.SQLRecognizer;
@@ -63,9 +62,9 @@ protected TableRecords beforeImage() throws SQLException {
     }
 
     private String buildBeforeImageSQL(SQLDeleteRecognizer visitor, TableMeta tableMeta, ArrayList<List<Object>> paramAppenderList) {
-        KeywordChecker keywordChecker = KeywordCheckerFactory.getKeywordChecker(JdbcConstants.MYSQL);
+        KeywordChecker keywordChecker = KeywordCheckerFactory.getKeywordChecker(getDbType());
         String whereCondition = buildWhereCondition(visitor, paramAppenderList);
-        StringBuilder suffix = new StringBuilder(" FROM ").append(keywordChecker.checkAndReplace(getFromTableInSQL()));
+        StringBuilder suffix = new StringBuilder(" FROM ").append(getFromTableInSQL());
         if (StringUtils.isNotBlank(whereCondition)) {
             suffix.append(" WHERE ").append(whereCondition);
         }

File: saga/seata-saga-engine/src/main/java/io/seata/saga/engine/pcext/handlers/ServiceTaskStateHandler.java
Patch:
@@ -101,7 +101,9 @@ public void process(ProcessContext context) throws EngineExecutionException {
                         + "] Execute finish. result: " + result);
             }
 
-            ((HierarchicalProcessContext)context).setVariableLocally(DomainConstants.VAR_NAME_OUTPUT_PARAMS, result);
+            if(result != null){
+                ((HierarchicalProcessContext)context).setVariableLocally(DomainConstants.VAR_NAME_OUTPUT_PARAMS, result);
+            }
 
         } catch (Exception e) {
 

File: core/src/main/java/io/seata/core/model/ResourceManager.java
Patch:
@@ -24,6 +24,8 @@
  */
 public interface ResourceManager extends ResourceManagerInbound, ResourceManagerOutbound {
 
+    Object RESOURCE_LOCK = new Object();
+
     /**
      * Register a Resource to be managed by Resource Manager.
      *

File: rm/src/main/java/io/seata/rm/DefaultResourceManager.java
Patch:
@@ -121,7 +121,7 @@ public void unregisterResource(Resource resource) {
 
     @Override
     public Map<String, Resource> getManagedResources() {
-        Map<String, Resource> allResource = new HashMap<String, Resource>();
+        Map<String, Resource> allResource = new HashMap<>();
         for (ResourceManager rm : resourceManagers.values()) {
             Map<String, Resource> tempResources = rm.getManagedResources();
             if (tempResources != null) {

File: tcc/src/main/java/io/seata/rm/tcc/TCCResourceManager.java
Patch:
@@ -60,6 +60,9 @@ public TCCResourceManager() {
     public void registerResource(Resource resource) {
         TCCResource tccResource = (TCCResource)resource;
         tccResourceCache.put(tccResource.getResourceId(), tccResource);
+        synchronized (RESOURCE_LOCK) {
+            RESOURCE_LOCK.notifyAll();
+        }
         super.registerResource(tccResource);
     }
 

File: server/src/main/java/io/seata/server/session/BranchSession.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.seata.server.session;
 
+import io.seata.server.lock.memory.MemoryLocker;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.util.Set;
@@ -65,7 +66,7 @@ public class BranchSession implements Lockable, Comparable<BranchSession>, Sessi
 
     private String applicationData;
 
-    private ConcurrentMap<ConcurrentMap<String, Long>, Set<String>> lockHolder
+    private ConcurrentMap<MemoryLocker.BucketLockMap, Set<String>> lockHolder
         = new ConcurrentHashMap<>();
 
     /**
@@ -263,7 +264,7 @@ public int compareTo(BranchSession o) {
      *
      * @return the lock holder
      */
-    public ConcurrentMap<ConcurrentMap<String, Long>, Set<String>> getLockHolder() {
+    public ConcurrentMap<MemoryLocker.BucketLockMap, Set<String>> getLockHolder() {
         return lockHolder;
     }
 

File: common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java
Patch:
@@ -264,8 +264,8 @@ private static <S> List<Class> findAllExtensionClass(Class<S> service, String ac
         Collections.sort(extensions, new Comparator<Class>() {
             @Override
             public int compare(Class c1, Class c2) {
-                Integer o1 = 0;
-                Integer o2 = 0;
+                int o1 = 0;
+                int o2 = 0;
                 @SuppressWarnings("unchecked")
                 LoadLevel a1 = (LoadLevel)c1.getAnnotation(LoadLevel.class);
                 @SuppressWarnings("unchecked")
@@ -279,7 +279,7 @@ public int compare(Class c1, Class c2) {
                     o2 = a2.order();
                 }
 
-                return o1.compareTo(o2);
+                return Integer.compare(o1, o2);
 
             }
         });

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/druid/MySQLInsertRecognizer.java
Patch:
@@ -40,7 +40,7 @@
  *
  * @author sharajava
  */
-public class MySQLInsertRecognizer extends BaseRecognizer implements SQLInsertRecognizer {
+public class MySQLInsertRecognizer extends BaseMySQLRecognizer implements SQLInsertRecognizer {
 
     private final MySqlInsertStatement ast;
 

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/druid/oracle/OracleInsertRecognizer.java
Patch:
@@ -43,7 +43,7 @@
  * @author ccg
  * @date 2019/3/25
  */
-public class OracleInsertRecognizer extends BaseRecognizer implements SQLInsertRecognizer {
+public class OracleInsertRecognizer extends BaseOracleRecognizer implements SQLInsertRecognizer {
 
     private final OracleInsertStatement ast;
 

File: server/src/test/java/io/seata/server/lock/LockManagerTest.java
Patch:
@@ -142,7 +142,7 @@ public void concurrentUseAbilityTest(BranchSession branchSession1, BranchSession
             }).start();
             // Assume execute more than 5 seconds means deadlock happened.
             if (countDownLatch.await(5, TimeUnit.SECONDS)) {
-                Assertions.assertTrue((first.get() && !second.get()) || (second.get() && !first.get()));
+                Assertions.assertTrue(!first.get() || !second.get());
             }
         } finally {
             lockManager.releaseLock(branchSession1);

File: core/src/main/java/io/seata/core/store/db/LockStoreDataBaseDAO.java
Patch:
@@ -27,6 +27,7 @@
 
 import javax.sql.DataSource;
 
+import io.seata.common.exception.DataAccessException;
 import io.seata.common.exception.StoreException;
 import io.seata.common.executor.Initialize;
 import io.seata.common.loader.LoadLevel;
@@ -256,7 +257,7 @@ public boolean isLockable(List<LockDO> lockDOs) {
             }
             return true;
         } catch (SQLException e) {
-            throw new StoreException(e);
+            throw new DataAccessException(e);
         } finally {
             if (conn != null) {
                 try {
@@ -334,7 +335,7 @@ protected boolean checkLockable(Connection conn, List<LockDO> lockDOs) {
             }
             return true;
         } catch (SQLException e) {
-            throw new StoreException(e);
+            throw new DataAccessException(e);
         } finally {
             if (rs != null) {
                 try {

File: server/src/main/java/io/seata/server/session/BranchSession.java
Patch:
@@ -17,9 +17,9 @@
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
-import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
 
 import io.seata.common.util.CompressUtil;
 import io.seata.core.exception.TransactionException;
@@ -65,7 +65,7 @@ public class BranchSession implements Lockable, Comparable<BranchSession>, Sessi
 
     private String applicationData;
 
-    private ConcurrentHashMap<Map<String, Long>, Set<String>> lockHolder
+    private ConcurrentMap<ConcurrentMap<String, Long>, Set<String>> lockHolder
         = new ConcurrentHashMap<>();
 
     /**
@@ -263,7 +263,7 @@ public int compareTo(BranchSession o) {
      *
      * @return the lock holder
      */
-    public ConcurrentHashMap<Map<String, Long>, Set<String>> getLockHolder() {
+    public ConcurrentMap<ConcurrentMap<String, Long>, Set<String>> getLockHolder() {
         return lockHolder;
     }
 

File: core/src/main/java/io/seata/core/protocol/Version.java
Patch:
@@ -31,7 +31,7 @@ public class Version {
     /**
      * The constant CURRENT.
      */
-    public static final String CURRENT = "0.8.1";
+    public static final String CURRENT = "0.9.0-SNAPSHOT";
 
     /**
      * The constant VERSION_MAP.

File: server/src/main/java/io/seata/server/lock/LockerFactory.java
Patch:
@@ -92,9 +92,6 @@ public static synchronized final Locker get(BranchSession branchSession) {
                 new Object[] {logStoreDataSource});
             lockerMap.put(storeMode, locker);
         } else if (StoreMode.FILE.name().equalsIgnoreCase(storeMode)) {
-            if (branchSession == null) {
-                throw new IllegalArgumentException("branchSession can be null for memory/file locker.");
-            }
             locker = EnhancedServiceLoader.load(Locker.class, storeMode,
                 new Class[] {BranchSession.class}, new Object[] {branchSession});
         } else {

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/druid/oracle/OracleInsertRecognizer.java
Patch:
@@ -93,7 +93,7 @@ public List<String> getInsertColumns() {
         List<String> list = new ArrayList<>(columnSQLExprs.size());
         for (SQLExpr expr : columnSQLExprs) {
             if (expr instanceof SQLIdentifierExpr) {
-                list.add(((SQLIdentifierExpr)expr).getName().toUpperCase());
+                list.add(((SQLIdentifierExpr)expr).getName());
             } else {
                 throw new SQLParsingException("Unknown SQLExpr: " + expr.getClass() + " " + expr);
             }

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/druid/oracle/OracleUpdateRecognizer.java
Patch:
@@ -70,7 +70,7 @@ public List<String> getUpdateColumns() {
         for (SQLUpdateSetItem updateSetItem : updateSetItems) {
             SQLExpr expr = updateSetItem.getColumn();
             if (expr instanceof SQLIdentifierExpr) {
-                list.add(((SQLIdentifierExpr) expr).getName().toUpperCase());
+                list.add(((SQLIdentifierExpr) expr).getName());
             } else if (expr instanceof SQLPropertyExpr) {
                 // This is alias case, like UPDATE xxx_tbl a SET a.name = ? WHERE a.id = ?
                 SQLExpr owner = ((SQLPropertyExpr) expr).getOwner();

File: core/src/main/java/io/seata/core/rpc/DefaultServerMessageListenerImpl.java
Patch:
@@ -147,7 +147,7 @@ public void onCheckMessage(RpcMessage request, ChannelHandlerContext ctx, Server
         try {
             sender.sendResponse(request, ctx.channel(), HeartbeatMessage.PONG);
         } catch (Throwable throwable) {
-            LOGGER.error("", "send response error", throwable);
+            LOGGER.error("send response error: {}", throwable.getMessage(), throwable);
         }
         if (LOGGER.isDebugEnabled()) {
             LOGGER.debug("received PING from " + ctx.channel().remoteAddress());

File: core/src/main/java/io/seata/core/rpc/netty/AbstractRpcRemoting.java
Patch:
@@ -427,7 +427,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws E
         try {
             destroyChannel(ctx.channel());
         } catch (Exception e) {
-            LOGGER.error("", "close channel" + ctx.channel() + " fail.", e);
+            LOGGER.error("failed to close channel {}: {}", ctx.channel(), e.getMessage(), e);
         }
     }
 

File: core/src/main/java/io/seata/core/rpc/netty/AbstractRpcRemotingClient.java
Patch:
@@ -203,7 +203,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {
                     }
                     sendRequest(ctx.channel(), HeartbeatMessage.PING);
                 } catch (Throwable throwable) {
-                    LOGGER.error("", "send request error", throwable);
+                    LOGGER.error("send request error: {}", throwable.getMessage(), throwable);
                 }
             }
         }
@@ -330,7 +330,7 @@ public void run() {
                                 messageFuture.setResultMessage(null);
                             }
                         }
-                        LOGGER.error("", "client merge call failed", e);
+                        LOGGER.error("client merge call failed: {}", e.getMessage(), e);
                     }
                 }
                 isSending = false;

File: core/src/main/java/io/seata/core/rpc/netty/RmMessageListener.java
Patch:
@@ -85,7 +85,7 @@ private void handleBranchRollback(RpcMessage request, String serverAddress,
         try {
             sender.sendResponse(request, serverAddress, resultMessage);
         } catch (Throwable throwable) {
-            LOGGER.error("", "send response error", throwable);
+            LOGGER.error("send response error: {}", throwable.getMessage(), throwable);
         }
     }
 

File: core/src/main/java/io/seata/core/rpc/netty/RmRpcClient.java
Patch:
@@ -251,7 +251,7 @@ private void sendRegisterMessage(String serverAddress, Channel channel, String d
                     LOGGER.info("remove channel:" + channel);
                 }
             } else {
-                LOGGER.error("", "register failed", e);
+                LOGGER.error("register failed: {}", e.getMessage(), e);
             }
         } catch (TimeoutException e) {
             LOGGER.error(e.getMessage());

File: core/src/test/java/io/seata/core/store/db/LogStoreDataBaseDAOTest.java
Patch:
@@ -69,7 +69,7 @@ private static void prepareTable(BasicDataSource dataSource) {
             } catch (Exception e) {
             }
 //            xid, transaction_id, status, application_id, transaction_service_group, transaction_name, timeout, begin_time, application_data, gmt_create, gmt_modified
-            s.execute("CREATE TABLE global_table ( xid varchar(96) primary key,  transaction_id long , STATUS int,  application_id varchar(32), transaction_service_group varchar(32) ,transaction_name varchar(32) ,timeout int,  begin_time long, application_data varchar(500), gmt_create TIMESTAMP(6) ,gmt_modified TIMESTAMP(6) ) ");
+            s.execute("CREATE TABLE global_table ( xid varchar(96) primary key,  transaction_id long , STATUS int,  application_id varchar(32), transaction_service_group varchar(32) ,transaction_name varchar(128) ,timeout int,  begin_time long, application_data varchar(500), gmt_create TIMESTAMP(6) ,gmt_modified TIMESTAMP(6) ) ");
             System.out.println("create table global_table success.");
 
             try {

File: server/src/test/java/io/seata/server/session/db/DataBaseSessionManagerTest.java
Patch:
@@ -87,7 +87,7 @@ private static void prepareTable(BasicDataSource dataSource) {
                 s.execute("drop table global_table");
             } catch (Exception e) {
             }
-            s.execute("CREATE TABLE global_table ( xid varchar(96),  transaction_id long , STATUS int,  application_id varchar(32), transaction_service_group varchar(32) ,transaction_name varchar(32) ,timeout int,  begin_time long, application_data varchar(500), gmt_create TIMESTAMP(6) ,gmt_modified TIMESTAMP(6) ) ");
+            s.execute("CREATE TABLE global_table ( xid varchar(96),  transaction_id long , STATUS int,  application_id varchar(32), transaction_service_group varchar(32) ,transaction_name varchar(128) ,timeout int,  begin_time long, application_data varchar(500), gmt_create TIMESTAMP(6) ,gmt_modified TIMESTAMP(6) ) ");
             System.out.println("create table global_table success.");
 
             try {

File: rm-datasource/src/main/java/io/seata/rm/RMHandlerAT.java
Patch:
@@ -25,7 +25,7 @@
 import io.seata.core.protocol.transaction.UndoLogDeleteRequest;
 import io.seata.rm.datasource.DataSourceManager;
 import io.seata.rm.datasource.DataSourceProxy;
-import io.seata.rm.datasource.undo.UndoLogManager;
+import io.seata.rm.datasource.undo.UndoLogManagerFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -55,8 +55,8 @@ public void handle(UndoLogDeleteRequest request) {
             int deleteRows = 0;
             do {
                 try {
-                    deleteRows = UndoLogManager.deleteUndoLogByLogCreated(logCreatedSave, dataSourceProxy.getDbType(),
-                        LIMIT_ROWS, conn);
+                    deleteRows = UndoLogManagerFactory.getUndoLogManager(dataSourceProxy.getDbType())
+                            .deleteUndoLogByLogCreated(logCreatedSave, LIMIT_ROWS, conn);
                     if (deleteRows > 0 && !conn.getAutoCommit()) {
                         conn.commit();
                     }

File: rm-datasource/src/main/java/io/seata/rm/datasource/DataCompareUtils.java
Patch:
@@ -22,7 +22,7 @@
 import io.seata.rm.datasource.sql.struct.Row;
 import io.seata.rm.datasource.sql.struct.TableMeta;
 import io.seata.rm.datasource.sql.struct.TableRecords;
-import io.seata.rm.datasource.undo.UndoLogManager;
+import io.seata.rm.datasource.undo.AbstractUndoLogManager;
 import io.seata.rm.datasource.undo.parser.FastjsonUndoLogParser;
 
 import java.math.BigDecimal;
@@ -62,7 +62,7 @@ public static Result<Boolean> isFieldEquals(Field f0, Field f1) {
                         if (f1.getValue() == null) {
                             return Result.buildWithParams(false, "Field not equals, name {}, new value is null", f0.getName());
                         } else {
-                            String currentSerializer = UndoLogManager.getCurrentSerializer();
+                            String currentSerializer = AbstractUndoLogManager.getCurrentSerializer();
                             if (StringUtils.equals(currentSerializer, FastjsonUndoLogParser.NAME)) {
                                 convertType(f0, f1);
                             }

File: server/src/main/java/io/seata/server/store/file/FileTransactionStoreManager.java
Patch:
@@ -411,14 +411,14 @@ private void closeFile(RandomAccessFile raf) {
     }
 
     private boolean writeDataFile(byte[] bs) {
-        if (bs == null) {
+        if (bs == null || bs.length >= Integer.MAX_VALUE - 3) {
             return false;
         }
         ByteBuffer byteBuffer = null;
 
-        if (bs.length > MAX_WRITE_BUFFER_SIZE) {
+        if (bs.length + 4 > MAX_WRITE_BUFFER_SIZE) {
             //allocateNew
-            byteBuffer = ByteBuffer.allocateDirect(bs.length);
+            byteBuffer = ByteBuffer.allocateDirect(bs.length + 4);
         } else {
             byteBuffer = writeBuffer;
             //recycle

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/oracle/keyword/OracleKeywordChecker.java
Patch:
@@ -29,9 +29,10 @@
  */
 public class OracleKeywordChecker implements KeywordChecker {
     private static volatile KeywordChecker keywordChecker = null;
-    private static volatile Set<String> keywordSet = null;
+    private Set<String> keywordSet;
 
     private OracleKeywordChecker() {
+        keywordSet = Arrays.stream(OracleKeyword.values()).map(OracleKeyword::name).collect(Collectors.toSet());
     }
 
     /**
@@ -44,7 +45,6 @@ public static KeywordChecker getInstance() {
             synchronized (OracleKeywordChecker.class) {
                 if (keywordChecker == null) {
                     keywordChecker = new OracleKeywordChecker();
-                    keywordSet = Arrays.stream(OracleKeyword.values()).map(OracleKeyword::name).collect(Collectors.toSet());
                 }
             }
         }

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/keyword/MySQLKeywordChecker.java
Patch:
@@ -29,9 +29,10 @@
  */
 public class MySQLKeywordChecker implements KeywordChecker {
     private static volatile KeywordChecker keywordChecker = null;
-    private static volatile Set<String> keywordSet = null;
+    private Set<String> keywordSet;
 
     private MySQLKeywordChecker() {
+        keywordSet = Arrays.stream(MySQLKeyword.values()).map(MySQLKeyword::name).collect(Collectors.toSet());
     }
 
     /**
@@ -44,7 +45,6 @@ public static KeywordChecker getInstance() {
             synchronized (MySQLKeywordChecker.class) {
                 if (keywordChecker == null) {
                     keywordChecker = new MySQLKeywordChecker();
-                    keywordSet = Arrays.stream(MySQLKeyword.values()).map(MySQLKeyword::name).collect(Collectors.toSet());
                 }
             }
         }

File: common/src/main/java/io/seata/common/util/DurationUtil.java
Patch:
@@ -26,7 +26,7 @@ public class DurationUtil {
 
     public static final String DAY_UNIT = "d";
     public static final String HOUR_UNIT = "h";
-    public static final String MINIUTE_UNIT = "m";
+    public static final String MINUTE_UNIT = "m";
     public static final String SECOND_UNIT = "s";
     public static final String MILLIS_SECOND_UNIT = "ms";
 
@@ -44,8 +44,8 @@ public static Duration parse(String str) {
         } else if (str.contains(HOUR_UNIT)) {
             Long value = doParse(HOUR_UNIT, str);
             return value == null ? null : Duration.ofHours(value);
-        } else if (str.contains(MINIUTE_UNIT)) {
-            Long value = doParse(MINIUTE_UNIT, str);
+        } else if (str.contains(MINUTE_UNIT)) {
+            Long value = doParse(MINUTE_UNIT, str);
             return value == null ? null : Duration.ofMinutes(value);
         } else if (str.contains(SECOND_UNIT)) {
             Long value = doParse(SECOND_UNIT, str);

File: server/src/main/java/io/seata/server/session/GlobalSession.java
Patch:
@@ -512,6 +512,8 @@ private int calGlobalSessionSize(byte[] byApplicationIdBytes, byte[] byServiceGr
             + 2 // byApplicationIdBytes.length
             + 2 // byServiceGroupBytes.length
             + 2 // byTxNameBytes.length
+            + 4 // xidBytes.length
+            + 4 // applicationDataBytes.length
             + 8 // beginTime
             + 1 // statusCode
             + (byApplicationIdBytes == null ? 0 : byApplicationIdBytes.length)

File: server/src/main/java/io/seata/server/store/db/DatabaseTransactionStoreManager.java
Patch:
@@ -188,14 +188,14 @@ public List<GlobalSession> readSession(SessionCondition sessionCondition) {
         if (StringUtils.isNotBlank(sessionCondition.getXid())) {
             GlobalSession globalSession = readSession(sessionCondition.getXid());
             if (globalSession != null) {
-                List<GlobalSession> globalSessions = new ArrayList();
+                List<GlobalSession> globalSessions = new ArrayList<>();
                 globalSessions.add(globalSession);
                 return globalSessions;
             }
         } else if (sessionCondition.getTransactionId() != null) {
             GlobalSession globalSession = readSession(sessionCondition.getTransactionId());
             if (globalSession != null) {
-                List<GlobalSession> globalSessions = new ArrayList();
+                List<GlobalSession> globalSessions = new ArrayList<>();
                 globalSessions.add(globalSession);
                 return globalSessions;
             }

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/TableMeta.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -33,8 +34,8 @@
 public class TableMeta {
     private String tableName;
 
-    private Map<String, ColumnMeta> allColumns = new HashMap<String, ColumnMeta>();
-    private Map<String, IndexMeta> allIndexes = new HashMap<String, IndexMeta>();
+    private Map<String, ColumnMeta> allColumns = new LinkedHashMap<String, ColumnMeta>();
+    private Map<String, IndexMeta> allIndexes = new LinkedHashMap<String, IndexMeta>();
 
     /**
      * Gets table name.

File: config/seata-config-nacos/src/main/java/io/seata/config/nacos/NacosConfiguration.java
Patch:
@@ -44,7 +44,7 @@ public class NacosConfiguration extends AbstractConfiguration<Listener> {
     private static final String SEATA_GROUP = "SEATA_GROUP";
     private static final String PRO_SERVER_ADDR_KEY = "serverAddr";
     private static final String CONFIG_TYPE = "nacos";
-    private static final String DEFAULT_NAMESPACE = "public";
+    private static final String DEFAULT_NAMESPACE = "";
     private static final String PRO_NAMESPACE_KEY = "namespace";
     private static final Configuration FILE_CONFIG = ConfigurationFactory.CURRENT_FILE_INSTANCE;
     private static volatile ConfigService configService;

File: discovery/seata-discovery-nacos/src/main/java/io/seata/discovery/registry/nacos/NacosRegistryServiceImpl.java
Patch:
@@ -41,7 +41,7 @@
  * @date 2019 /1/31
  */
 public class NacosRegistryServiceImpl implements RegistryService<EventListener> {
-    private static final String DEFAULT_NAMESPACE = "public";
+    private static final String DEFAULT_NAMESPACE = "";
     private static final String DEFAULT_CLUSTER = "default";
     private static final String PRO_SERVER_ADDR_KEY = "serverAddr";
     private static final String PRO_NAMESPACE_KEY = "namespace";

File: server/src/main/java/io/seata/server/session/BranchSession.java
Patch:
@@ -375,6 +375,7 @@ private int calBranchSessionSize(byte[] resourceIdBytes, byte[] lockKeyBytes, by
             + 4 // lockKeyBytes.length
             + 2 // clientIdBytes.length
             + 4 // applicationDataBytes.length
+            + 4 // xidBytes.size
             + 1 // statusCode
             + (resourceIdBytes == null ? 0 : resourceIdBytes.length)
             + (lockKeyBytes == null ? 0 : lockKeyBytes.length)

File: core/src/main/java/io/seata/core/rpc/netty/RpcServer.java
Patch:
@@ -322,7 +322,7 @@ private void handleDisconnect(ChannelHandlerContext ctx) {
     public void channelRead(final ChannelHandlerContext ctx, Object msg) throws Exception {
         if (msg instanceof RpcMessage) {
             RpcMessage rpcMessage = (RpcMessage) msg;
-            debugLog("read:" + rpcMessage.getBody().toString());
+            debugLog("read:" + rpcMessage.getBody());
             if (rpcMessage.getBody() instanceof RegisterTMRequest) {
                 serverMessageListener.onRegTmMessage(rpcMessage, ctx, this, checkAuthHandler);
                 return;

File: server/src/main/java/io/seata/server/Server.java
Patch:
@@ -62,8 +62,6 @@ public static void main(String[] args) throws IOException {
         System.setProperty(ConfigurationKeys.STORE_MODE, parameterParser.getStoreMode());
 
         RpcServer rpcServer = new RpcServer(WORKING_THREADS);
-        //server host
-        rpcServer.setHost(parameterParser.getHost());
         //server port
         rpcServer.setListenPort(parameterParser.getPort());
         UUIDGenerator.init(parameterParser.getServerNode());

File: server/src/main/java/io/seata/server/session/AbstractSessionManager.java
Patch:
@@ -96,7 +96,7 @@ public void addBranchSession(GlobalSession session, BranchSession branchSession)
     public void updateBranchSessionStatus(BranchSession branchSession, BranchStatus status)
         throws TransactionException {
         if (LOGGER.isDebugEnabled()) {
-            LOGGER.debug("MANAGER[" + name + "] SESSION[" + branchSession + "] " + LogOperation.GLOBAL_ADD);
+            LOGGER.debug("MANAGER[" + name + "] SESSION[" + branchSession + "] " + LogOperation.BRANCH_UPDATE);
         }
         writeSession(LogOperation.BRANCH_UPDATE, branchSession);
     }
@@ -105,7 +105,7 @@ public void updateBranchSessionStatus(BranchSession branchSession, BranchStatus
     public void removeBranchSession(GlobalSession globalSession, BranchSession branchSession)
         throws TransactionException {
         if (LOGGER.isDebugEnabled()) {
-            LOGGER.debug("MANAGER[" + name + "] SESSION[" + branchSession + "] " + LogOperation.GLOBAL_ADD);
+            LOGGER.debug("MANAGER[" + name + "] SESSION[" + branchSession + "] " + LogOperation.BRANCH_REMOVE);
         }
         writeSession(LogOperation.BRANCH_REMOVE, branchSession);
     }

File: codec/seata-codec-protobuf/src/main/java/io/seata/codec/protobuf/ProtobufHelper.java
Patch:
@@ -50,7 +50,7 @@ public class ProtobufHelper {
     public Class getPbClass(String clazzName) {
         Class reqClass = requestClassCache.get(clazzName);
         if (reqClass == null) {
-            // 读取接口里的方法参数和返回值
+            // get the parameter and result
             Class clazz = null;
             try {
                 clazz = Class.forName(clazzName);

File: common/src/test/java/io/seata/common/util/BlobUtilsTest.java
Patch:
@@ -62,15 +62,15 @@ public void testBlob2string() throws SQLException {
     @Test
     void bytes2Blob() throws UnsupportedEncodingException, SQLException {
         assertNull(BlobUtils.bytes2Blob(null));
-        byte[] bs = "xxa哈哈dd".getBytes(Constants.DEFAULT_CHARSET_NAME);
+        byte[] bs = "xxaaadd".getBytes(Constants.DEFAULT_CHARSET_NAME);
         assertThat(BlobUtils.bytes2Blob(bs)).isEqualTo(
                 new SerialBlob(bs));
     }
 
     @Test
     void blob2Bytes() throws UnsupportedEncodingException, SQLException {
         assertNull(BlobUtils.blob2Bytes(null));
-        byte[] bs = "xxa哈哈dd".getBytes(Constants.DEFAULT_CHARSET_NAME);
+        byte[] bs = "xxaaadd".getBytes(Constants.DEFAULT_CHARSET_NAME);
         assertThat(BlobUtils.blob2Bytes(new SerialBlob(bs))).isEqualTo(
                 bs);
     }

File: core/src/main/java/io/seata/core/rpc/netty/NettyPoolKey.java
Patch:
@@ -158,7 +158,7 @@ public int getValue() {
         }
 
         /**
-         * 状态值
+         * value
          */
         private int value;
     }

File: discovery/seata-discovery-core/src/test/java/io/seata/discovery/loadbalance/LoadBalanceFactoryTest.java
Patch:
@@ -92,7 +92,8 @@ public void testSubscribe(LoadBalance loadBalance) throws Exception {
         List<InetSocketAddress> addressList = registryService.lookup("my_test_tx_group");
         InetSocketAddress balanceAddress = loadBalance.select(addressList);
         Assertions.assertNotNull(balanceAddress);
-        TimeUnit.SECONDS.sleep(30);//等待testUnRegistry事件触发
+        //wait trigger testUnRegistry
+        TimeUnit.SECONDS.sleep(30);
         List<InetSocketAddress> addressList1 = registryService.lookup("my_test_tx_group");
         Assertions.assertEquals(1, addressList1.size());
     }

File: discovery/seata-discovery-redis/src/main/java/io/seata/discovery/registry/redis/RedisListener.java
Patch:
@@ -32,7 +32,7 @@ public interface RedisListener {
     String UN_REGISTER = "unregister";
 
     /**
-     * 用于订阅redis事件
+     * use for redis event
      *
      * @param event the event
      */

File: test/src/test/java/io/seata/core/rpc/netty/v1/HeadMapSerializerTest.java
Patch:
@@ -73,7 +73,7 @@ public void encode() throws Exception {
     public void testUTF8() throws Exception {
         HeadMapSerializer mapSerializer = HeadMapSerializer.getInstance();
         String s = "test";
-        // utf-8 和 gbk  英文是一样的
+        // utf-8 and gbk same in English
         Assertions.assertArrayEquals(s.getBytes("UTF-8"), s.getBytes("GBK"));
 
         Map<String, String> map = new HashMap<String, String>();
@@ -84,8 +84,8 @@ public void testUTF8() throws Exception {
         Map newmap = mapSerializer.decode(byteBuf, bs);
         Assertions.assertEquals(map, newmap);
 
-        // 支持中文
-        map.put("弄啥呢", "咋弄呢？");
+        // support chinese
+        map.put("你好", "你好？");
         bs = mapSerializer.encode(map, byteBuf);
         newmap = mapSerializer.decode(byteBuf, bs);
         Assertions.assertEquals(map, newmap);

File: test/src/test/java/io/seata/core/rpc/netty/v1/ProtocolV1Client.java
Patch:
@@ -153,8 +153,9 @@ public static void main(String[] args) {
 
         final int threads = 50;
         final AtomicLong cnt = new AtomicLong(0);
+        // no queue
         final ThreadPoolExecutor service1 = new ThreadPoolExecutor(threads, threads, 0L, TimeUnit.MILLISECONDS,
-                new SynchronousQueue<Runnable>(), new NamedThreadFactory("client-", false));// 无队列
+                new SynchronousQueue<Runnable>(), new NamedThreadFactory("client-", false));
         for (int i = 0; i < threads; i++) {
             service1.execute(() -> {
                 while (true) {

File: test/src/test/java/io/seata/core/rpc/netty/v1/ProtocolV1CodecTest.java
Patch:
@@ -72,8 +72,9 @@ public void testAll() {
             final CountDownLatch cnt = new CountDownLatch(runTimes);
             final AtomicInteger tag = new AtomicInteger(0);
             final AtomicInteger success = new AtomicInteger(0);
+            // no queue
             final ThreadPoolExecutor service1 = new ThreadPoolExecutor(threads, threads, 0L, TimeUnit.MILLISECONDS,
-                    new SynchronousQueue<>(), new NamedThreadFactory("client-", false));// 无队列
+                    new SynchronousQueue<>(), new NamedThreadFactory("client-", false));
             for (int i = 0; i < threads; i++) {
                 service1.execute(() -> {
                     while (tag.getAndIncrement() < runTimes) {

File: test/src/test/java/io/seata/core/rpc/netty/v1/ProtocolV1CodecTest.java
Patch:
@@ -92,7 +92,7 @@ public void testAll() {
                 });
             }
 
-            cnt.await(10, TimeUnit.SECONDS);
+            cnt.await();
             LOGGER.info("success {}/{}", success.get(), runTimes);
             Assertions.assertEquals(success.get(), runTimes);
         } catch (InterruptedException e) {

File: rm-datasource/src/main/java/io/seata/rm/datasource/ConnectionContext.java
Patch:
@@ -158,7 +158,7 @@ void setBranchId(Long branchId) {
     /**
      * Reset.
      */
-    void reset(){
+    public void reset() {
         this.reset(null);
     }
 

File: metrics/seata-metrics-registry-compact/src/main/java/io/seata/metrics/registry/compact/SummaryValue.java
Patch:
@@ -55,7 +55,7 @@ public void increase() {
     }
 
     public void increase(long value) {
-        if (value <= 0) {
+        if (value < 0) {
             return;
         }
         this.count.increment();

File: metrics/seata-metrics-registry-compact/src/main/java/io/seata/metrics/registry/compact/TimerValue.java
Patch:
@@ -56,7 +56,7 @@ public TimerValue() {
     }
 
     public void record(long value, TimeUnit unit) {
-        if (value <= 0) {
+        if (value < 0) {
             return;
         }
         long changeValue = unit == TimeUnit.MICROSECONDS ? value : TimeUnit.MICROSECONDS.convert(value, unit);

File: server/src/main/java/io/seata/server/Server.java
Patch:
@@ -66,7 +66,7 @@ public static void main(String[] args) throws IOException {
         rpcServer.setHost(parameterParser.getHost());
         //server port
         rpcServer.setListenPort(parameterParser.getPort());
-        UUIDGenerator.init(1);
+        UUIDGenerator.init(parameterParser.getServerNode());
         //log store mode : file、db
         SessionHolder.init(parameterParser.getStoreMode());
 

File: rm-datasource/src/main/java/io/seata/rm/datasource/DataCompareUtils.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 
 /**
  * The type Data compare utils.
@@ -71,8 +72,8 @@ public static boolean isFieldEquals(Field f0, Field f1) {
                             if (StringUtils.equals(currentSerializer, FastjsonUndoLogParser.NAME)) {
                                 convertType(f0, f1);
                             }
-                            boolean result = f0.getValue().equals(f1.getValue());
-                            if (!result) {
+                            boolean result = Objects.deepEquals(f0.getValue(), f1.getValue());
+                            if(!result){
                                 if (LOGGER.isInfoEnabled()) {
                                     LOGGER.info("Field not equals, name {}, old value {}, new value {}", f0.getName(), f0.getValue(), f1.getValue());
                                 }

File: server/src/main/java/io/seata/server/Server.java
Patch:
@@ -18,6 +18,7 @@
 import io.seata.common.XID;
 import io.seata.common.thread.NamedThreadFactory;
 import io.seata.common.util.NetUtil;
+import io.seata.core.constants.ConfigurationKeys;
 import io.seata.core.rpc.netty.RpcServer;
 import io.seata.core.rpc.netty.ShutdownHook;
 import io.seata.server.coordinator.DefaultCoordinator;
@@ -58,6 +59,8 @@ public static void main(String[] args) throws IOException {
         //initialize the parameter parser
         ParameterParser parameterParser = new ParameterParser(args);
 
+        System.setProperty(ConfigurationKeys.STORE_MODE, parameterParser.getStoreMode());
+
         RpcServer rpcServer = new RpcServer(WORKING_THREADS);
         //server host
         rpcServer.setHost(parameterParser.getHost());

File: core/src/main/java/io/seata/core/codec/Codec.java
Patch:
@@ -19,7 +19,7 @@
  * The interface Codec.
  *
  * @author zhangsen
- * @data 2019 /5/6
+ * @date 2019 /5/6
  */
 public interface Codec {
 

File: core/src/main/java/io/seata/core/codec/CodecFactory.java
Patch:
@@ -24,7 +24,7 @@
  * The type Codec factory.
  *
  * @author zhangsen
- * @data 2019 /5/6
+ * @date 2019 /5/6
  */
 public class CodecFactory {
 

File: core/src/main/java/io/seata/core/constants/DBType.java
Patch:
@@ -21,7 +21,7 @@
  * database type
  *
  * @author zhangsen
- * @data 2019 /4/2
+ * @date 2019 /4/2
  */
 public enum DBType {
 
@@ -90,4 +90,4 @@ public static DBType valueof(String dbType) {
         throw new IllegalArgumentException("unknown dbtype:" + dbType);
     }
 
-}
\ No newline at end of file
+}

File: core/src/main/java/io/seata/core/lock/AbstractLocker.java
Patch:
@@ -27,7 +27,7 @@
  * The type Abstract locker.
  *
  * @author zhangsen
- * @data 2019 -05-15
+ * @date 2019 -05-15
  */
 public abstract class AbstractLocker implements Locker {
 

File: core/src/main/java/io/seata/core/lock/LocalDBLocker.java
Patch:
@@ -21,7 +21,7 @@
  * The type Local db locker.
  *
  * @author zhangsen
- * @data 2019 -05-15
+ * @date 2019 -05-15
  */
 public class LocalDBLocker extends AbstractLocker {
 

File: core/src/main/java/io/seata/core/lock/LockMode.java
Patch:
@@ -19,7 +19,7 @@
  * lock mode
  *
  * @author zhangsen
- * @data 2019 /4/25
+ * @date 2019 /4/25
  */
 public enum LockMode {
 

File: core/src/main/java/io/seata/core/lock/Locker.java
Patch:
@@ -21,7 +21,7 @@
  * The interface Locker.
  *
  * @author zhangsen
- * @data 2019 -05-15
+ * @date 2019 -05-15
  */
 public interface Locker {
 

File: core/src/main/java/io/seata/core/lock/RowLock.java
Patch:
@@ -21,7 +21,7 @@
  * The type Row lock.
  *
  * @author zhangsen
- * @data 2019 -05-15
+ * @date 2019 -05-15
  */
 public class RowLock {
 

File: core/src/main/java/io/seata/core/protocol/MessageType.java
Patch:
@@ -19,7 +19,7 @@
  * The type Message codec type.
  *
  * @author zhangsen
- * @data 2019 /5/6
+ * @date 2019 /5/6
  */
 public class MessageType {
 

File: core/src/main/java/io/seata/core/store/BranchTransactionDO.java
Patch:
@@ -24,7 +24,7 @@
  * branch transaction data object
  *
  * @author zhangsen
- * @data 2019 /3/26
+ * @date 2019 /3/26
  */
 public class BranchTransactionDO {
 

File: core/src/main/java/io/seata/core/store/GlobalTransactionDO.java
Patch:
@@ -24,7 +24,7 @@
  * Global Transaction data object
  *
  * @author zhangsen
- * @data 2019 /3/26
+ * @date 2019 /3/26
  */
 public class GlobalTransactionDO {
 
@@ -253,4 +253,4 @@ public String toString(){
         return StringUtils.toString(this);
     }
 
-}
\ No newline at end of file
+}

File: core/src/main/java/io/seata/core/store/LockDO.java
Patch:
@@ -21,7 +21,7 @@
  * The type Lock do.
  *
  * @author zhangsen
- * @data 2019 /4/25
+ * @date 2019 /4/25
  */
 public class LockDO {
 

File: core/src/main/java/io/seata/core/store/LogStore.java
Patch:
@@ -22,7 +22,7 @@
  * the transaction log store
  *
  * @author zhangsen
- * @data 2019 /3/26
+ * @date 2019 /3/26
  */
 public interface LogStore {
 
@@ -107,4 +107,4 @@ public interface LogStore {
      */
     boolean deleteBranchTransactionDO(BranchTransactionDO branchTransactionDO);
 
-}
\ No newline at end of file
+}

File: core/src/main/java/io/seata/core/store/StoreMode.java
Patch:
@@ -19,7 +19,7 @@
  * transaction log store mode
  *
  * @author zhangsen
- * @data 2019 /4/2
+ * @date 2019 /4/2
  */
 public enum StoreMode {
 

File: core/src/main/java/io/seata/core/store/db/AbstractDataSourceGenerator.java
Patch:
@@ -26,7 +26,7 @@
  * The type Abstract data source generator.
  *
  * @author zhangsen
- * @data 2019 /4/24
+ * @date 2019 /4/24
  */
 public abstract class AbstractDataSourceGenerator implements DataSourceGenerator {
 

File: core/src/main/java/io/seata/core/store/db/DataSourceGenerator.java
Patch:
@@ -21,7 +21,7 @@
  * The interface Data source generator.
  *
  * @author zhangsen
- * @data 2019 /4/24
+ * @date 2019 /4/24
  */
 public interface DataSourceGenerator {
 

File: core/src/main/java/io/seata/core/store/db/LockStoreDataBaseDAO.java
Patch:
@@ -44,7 +44,7 @@
  * The type Data base lock store.
  *
  * @author zhangsen
- * @data 2019 /4/25
+ * @date 2019 /4/25
  */
 @LoadLevel(name = "db")
 public class LockStoreDataBaseDAO implements LockStore, Initialize {
@@ -368,4 +368,4 @@ public void setDbType(String dbType) {
     public void setLogStoreDataSource(DataSource logStoreDataSource) {
         this.logStoreDataSource = logStoreDataSource;
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/io/seata/core/store/db/LockStoreSqls.java
Patch:
@@ -23,7 +23,7 @@
  * The type Lock store sqls.
  *
  * @author zhangsen
- * @data 2019 /4/26
+ * @date 2019 /4/26
  */
 public class LockStoreSqls {
 

File: core/src/main/java/io/seata/core/store/db/LogStoreDataBaseDAO.java
Patch:
@@ -40,7 +40,7 @@
  * The type Log store data base dao.
  *
  * @author zhangsen
- * @data 2019 /4/2
+ * @date 2019 /4/2
  */
 @LoadLevel(name = "db")
 public class LogStoreDataBaseDAO implements LogStore, Initialize {
@@ -532,4 +532,4 @@ public void setBrachTable(String brachTable) {
     public void setDbType(String dbType) {
         this.dbType = dbType;
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/io/seata/core/store/db/LogStoreSqls.java
Patch:
@@ -23,7 +23,7 @@
  * database log store SQLs
  *
  * @author zhangsen
- * @data 2019 /4/2
+ * @date 2019 /4/2
  */
 public class LogStoreSqls {
 
@@ -350,4 +350,4 @@ public static String getDeleteBranchTransactionByXId(String branchTable, String
     public static String getQureyBranchTransaction(String branchTable, String dbType) {
         return QUREY_BRANCH_TRANSACTION.replace(BRANCH_TABLE_PLACEHOLD, branchTable);
     }
-}
\ No newline at end of file
+}

File: core/src/test/java/io/seata/core/store/db/DataBaseLockStoreDAOTest.java
Patch:
@@ -33,7 +33,7 @@
 
 /**
  * @author zhangsen
- * @data 2019/4/26
+ * @date 2019/4/26
  */
 public class DataBaseLockStoreDAOTest {
 

File: core/src/test/java/io/seata/core/store/db/LogStoreDataBaseDAOTest.java
Patch:
@@ -35,7 +35,7 @@
 
 /**
  * @author zhangsen
- * @data 2019/4/26
+ * @date 2019/4/26
  */
 public class LogStoreDataBaseDAOTest {
 
@@ -663,4 +663,4 @@ public static void clearStoreDB(){
         FileUtils.deleteRecursive("db_store", true);
     }
 
-}
\ No newline at end of file
+}

File: common/src/main/java/io/seata/common/util/StringUtils.java
Patch:
@@ -210,6 +210,7 @@ public static String toString(Object obj) {
                 sb.deleteCharAt(sb.length() - 1);
             }
             sb.append("}");
+            return sb.toString();
         }
         StringBuilder sb = new StringBuilder();
         Field[] fields = obj.getClass().getDeclaredFields();

File: core/src/main/java/io/seata/core/rpc/netty/NettyClientChannelManager.java
Patch:
@@ -233,7 +233,7 @@ private Channel getExistAliveChannel(Channel rmChannel, String serverAddress) {
                     LOGGER.error(exx.getMessage());
                 }
                 rmChannel = channels.get(serverAddress);
-                if (null == rmChannel || rmChannel.isActive()) {
+                if (null != rmChannel && rmChannel.isActive()) {
                     return rmChannel;
                 }
             }

File: server/src/main/java/io/seata/server/coordinator/DefaultCoordinator.java
Patch:
@@ -322,7 +322,7 @@ protected void handleRetryRollbacking() {
                     /**
                      * Prevent thread safety issues
                      */
-                    SessionHolder.getRetryCommittingSessionManager().removeGlobalSession(rollbackingSession);
+                    SessionHolder.getRetryRollbackingSessionManager().removeGlobalSession(rollbackingSession);
                     LOGGER.error("GlobalSession rollback retry timeout [{}]", rollbackingSession.getXid());
                     continue;
                 }

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/UndoLogManager.java
Patch:
@@ -239,8 +239,8 @@ public static void undo(DataSourceProxy dataSourceProxy, String xid, long branch
                         LOGGER.warn("Failed to close JDBC resource while undo ... ", rollbackEx);
                     }
                 }
-                throw new TransactionException(BranchRollbackFailed_Retriable, String.format("%s/%s", branchId, xid),
-                    e);
+                throw new TransactionException(BranchRollbackFailed_Retriable, String.format("%s/%s %s", branchId, xid, e.getMessage()),
+                        e);
 
             } finally {
                 try {

File: codec/seata-codec-protobuf/src/main/java/io/seata/codec/protobuf/generated/HeartbeatMessageProtoOrBuilder.java
Patch:
@@ -8,7 +8,7 @@ public interface HeartbeatMessageProtoOrBuilder extends
     com.google.protobuf.MessageOrBuilder {
 
   /**
-   * <code>bool pingOrPong = 1;</code>
+   * <code>bool ping = 1;</code>
    */
-  boolean getPingOrPong();
+  boolean getPing();
 }

File: codec/seata-codec-protobuf/src/main/java/io/seata/codec/protobuf/generated/MergedWarpMessage.java
Patch:
@@ -34,7 +34,7 @@ public static void registerAllExtensions(
       "ssageProto\022I\n\017abstractMessage\030\001 \001(\01320.io" +
       ".seata.protocol.protobuf.AbstractMessage" +
       "Proto\022\"\n\004msgs\030\002 \003(\0132\024.google.protobuf.An" +
-      "y\022\016\n\006msgIds\030\003 \003(\003B8\n!io.seata.codec.prot" +
+      "y\022\016\n\006msgIds\030\003 \003(\005B8\n!io.seata.codec.prot" +
       "obuf.generatedB\021MergedWarpMessageP\001b\006pro" +
       "to3"
     };

File: core/src/main/java/io/seata/core/protocol/MergedWarpMessage.java
Patch:
@@ -30,11 +30,11 @@ public class MergedWarpMessage extends AbstractMessage implements Serializable,
     /**
      * The Msgs.
      */
-    public List<AbstractMessage> msgs = new ArrayList<AbstractMessage>();
+    public List<AbstractMessage> msgs = new ArrayList<>();
     /**
      * The Msg ids.
      */
-    public List<Long> msgIds = new ArrayList<Long>();
+    public List<Integer> msgIds = new ArrayList<>();
 
     @Override
     public short getTypeCode() {

File: core/src/main/java/io/seata/core/rpc/ServerMessageSender.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.concurrent.TimeoutException;
 
 import io.netty.channel.Channel;
+import io.seata.core.protocol.RpcMessage;
 
 /**
  * The interface Server message sender.
@@ -31,11 +32,11 @@ public interface ServerMessageSender {
     /**
      * Send response.
      *
-     * @param msgId   the msg id
+     * @param request the request
      * @param channel the channel
      * @param msg     the msg
      */
-    void sendResponse(long msgId, Channel channel, Object msg);
+    void sendResponse(RpcMessage request, Channel channel, Object msg);
 
     /**
      * Sync call to RM with timeout.

File: server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorTest.java
Patch:
@@ -21,6 +21,7 @@
 import io.seata.core.exception.TransactionException;
 import io.seata.core.model.BranchStatus;
 import io.seata.core.model.BranchType;
+import io.seata.core.protocol.RpcMessage;
 import io.seata.core.protocol.transaction.BranchCommitRequest;
 import io.seata.core.protocol.transaction.BranchCommitResponse;
 import io.seata.core.protocol.transaction.BranchRollbackRequest;
@@ -161,7 +162,7 @@ static Stream<Arguments> xidAndBranchIdProviderForRollback() throws Exception {
     private static class MockServerMessageSender implements ServerMessageSender {
 
         @Override
-        public void sendResponse(long msgId, Channel channel, Object msg) {
+        public void sendResponse(RpcMessage request, Channel channel, Object msg) {
 
         }
 

File: core/src/main/java/io/seata/core/rpc/netty/NettyClientChannelManager.java
Patch:
@@ -201,6 +201,7 @@ private Channel doConnect(String serverAddress) {
                 ((RegisterRMRequest) previousPoolKey.getMessage()).setResourceIds(registerRMRequest.getResourceIds());
             }
             channelFromPool = nettyClientKeyPool.borrowObject(poolKeyMap.get(serverAddress));
+            channels.put(serverAddress, channelFromPool);
         } catch (Exception exx) {
             LOGGER.error(FrameworkErrorCode.RegisterRM.getErrCode(), "register RM failed.", exx);
             throw new FrameworkException("can not register RM,err:" + exx.getMessage());

File: rm-datasource/src/main/java/io/seata/rm/datasource/ConnectionContext.java
Patch:
@@ -170,6 +170,7 @@ void reset(){
     void reset(String xid) {
         this.xid = xid;
         branchId = null;
+        this.isGlobalLockRequire = false;
         lockKeysBuffer.clear();
         sqlUndoItemsBuffer.clear();
     }

File: spring/src/main/java/io/seata/spring/util/SpringProxyUtils.java
Patch:
@@ -43,7 +43,7 @@ public static Class<?> findTargetClass(Object proxy) throws Exception {
             if (AopUtils.isJdkDynamicProxy(proxy)) {
                 TargetSource targetSource = advised.getTargetSource();
                 return targetSource instanceof EmptyTargetSource ? getFirstInterfaceByAdvised(advised)
-                    : targetSource.getTarget().getClass();
+                    : targetSource.getTargetClass();
             }
             Object target = advised.getTargetSource().getTarget();
             return findTargetClass(target);

File: core/src/main/java/io/seata/core/rpc/netty/NettyClientChannelManager.java
Patch:
@@ -160,7 +160,7 @@ void reconnect(String transactionServiceGroup) {
         try {
             availList = getAvailServerList(transactionServiceGroup);
         } catch (Exception exx) {
-            LOGGER.error("Failed to get available servers: {}" + exx.getMessage());
+            LOGGER.error("Failed to get available servers: {}", exx.getMessage());
         }
         if (CollectionUtils.isEmpty(availList)) {
             LOGGER.error("no available server to connect.");

File: rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/TableRecords.java
Patch:
@@ -180,7 +180,7 @@ public static TableRecords buildRecords(TableMeta tmeta, ResultSet resultSet) th
                 ColumnMeta col = tmeta.getColumnMeta(colName);
                 Field field = new Field();
                 field.setName(col.getColumnName());
-                if (tmeta.getPkName().equals(field.getName())) {
+                if (tmeta.getPkName().equalsIgnoreCase(field.getName())) {
                     field.setKeyType(KeyType.PrimaryKey);
                 }
                 field.setType(col.getDataType());

File: rm-datasource/src/main/java/io/seata/rm/datasource/undo/parser/JacksonUndoLogParser.java
Patch:
@@ -19,6 +19,7 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import io.seata.common.Constants;
 import io.seata.common.loader.LoadLevel;
 import io.seata.rm.datasource.undo.BranchUndoLog;
 import io.seata.rm.datasource.undo.UndoLogParser;
@@ -52,7 +53,7 @@ public String getName() {
 
     @Override
     public byte[] getDefaultContent() {
-        return new byte[0];
+        return "{}".getBytes(Constants.DEFAULT_CHARSET);
     }
 
     @Override

File: server/src/main/java/io/seata/server/coordinator/DefaultCoordinator.java
Patch:
@@ -299,7 +299,7 @@ protected void handleRetryRollbacking() {
                      * Prevent thread safety issues
                      */
                     SessionHolder.getRetryCommittingSessionManager().removeGlobalSession(rollbackingSession);
-                    LOGGER.error("GlobalSession rollback retry timeout [{}]", rollbackingSession.getTransactionId());
+                    LOGGER.error("GlobalSession rollback retry timeout [{}]", rollbackingSession.getXid());
                     continue;
                 }
                 rollbackingSession.addSessionLifecycleListener(SessionHolder.getRootSessionManager());
@@ -327,7 +327,7 @@ protected void handleRetryCommitting() {
                      * Prevent thread safety issues
                      */
                     SessionHolder.getRetryCommittingSessionManager().removeGlobalSession(committingSession);
-                    LOGGER.error("GlobalSession commit retry timeout [{}]", committingSession.getTransactionId());
+                    LOGGER.error("GlobalSession commit retry timeout [{}]", committingSession.getXid());
                     continue;
                 }
                 committingSession.addSessionLifecycleListener(SessionHolder.getRootSessionManager());

File: server/src/main/java/io/seata/server/coordinator/DefaultCore.java
Patch:
@@ -166,7 +166,7 @@ public void doGlobalCommit(GlobalSession globalSession, boolean retrying) throws
             }
             try {
                 BranchStatus branchStatus = resourceManagerInbound.branchCommit(branchSession.getBranchType(),
-                    XID.generateXID(branchSession.getTransactionId()), branchSession.getBranchId(),
+                    branchSession.getXid(), branchSession.getBranchId(),
                     branchSession.getResourceId(), branchSession.getApplicationData());
 
                 switch (branchStatus) {
@@ -275,7 +275,7 @@ public void doGlobalRollback(GlobalSession globalSession, boolean retrying) thro
             }
             try {
                 BranchStatus branchStatus = resourceManagerInbound.branchRollback(branchSession.getBranchType(),
-                    XID.generateXID(branchSession.getTransactionId()), branchSession.getBranchId(),
+                    branchSession.getXid(), branchSession.getBranchId(),
                     branchSession.getResourceId(), branchSession.getApplicationData());
 
                 switch (branchStatus) {

File: common/src/main/java/io/seata/common/loader/LoadLevel.java
Patch:
@@ -43,5 +43,5 @@
      *
      * @return the int
      */
-    int order();
+    int order() default 0;
 }

File: server/src/main/java/io/seata/server/session/SessionHelper.java
Patch:
@@ -47,6 +47,7 @@ public static BranchSession newBranchByGlobal(GlobalSession globalSession, Branc
             String applicationData, String lockKeys, String clientId) {
         BranchSession branchSession = new BranchSession();
 
+        branchSession.setXid(globalSession.getXid());
         branchSession.setTransactionId(globalSession.getTransactionId());
         branchSession.setBranchId(UUIDGenerator.generateUUID());
         branchSession.setBranchType(branchType);

File: server/src/main/java/io/seata/server/session/SessionManager.java
Patch:
@@ -41,11 +41,10 @@ public interface SessionManager extends SessionLifecycleListener, Disposable {
     /**
      * Find global session global session.
      *
-     * @param transactionId the transaction id
+     * @param xid the xid
      * @return the global session
-     * @throws TransactionException the transaction exception
      */
-    GlobalSession findGlobalSession(Long transactionId);
+    GlobalSession findGlobalSession(String xid) ;
 
     /**
      * Update global session status.

File: server/src/test/java/WriteStoreMultithreadTest.java
Patch:
@@ -20,8 +20,8 @@
 import io.seata.server.session.GlobalSession;
 import io.seata.server.session.SessionCondition;
 import io.seata.server.session.SessionManager;
-import io.seata.server.store.FileTransactionStoreManager;
 import io.seata.server.store.TransactionStoreManager;
+import io.seata.server.store.file.FileTransactionStoreManager;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -55,10 +55,11 @@ public void addGlobalSession(GlobalSession session) throws TransactionException
                     }
 
                     @Override
-                    public GlobalSession findGlobalSession(Long transactionId) {
+                    public GlobalSession findGlobalSession(String xid)  {
                         return null;
                     }
 
+
                     @Override
                     public void updateGlobalSessionStatus(GlobalSession session, GlobalStatus status)
                             throws TransactionException {

File: server/src/main/java/io/seata/server/Server.java
Patch:
@@ -42,7 +42,7 @@ public class Server {
     private static final int SERVER_DEFAULT_PORT = 8091;
     private static final ThreadPoolExecutor WORKING_THREADS = new ThreadPoolExecutor(MIN_SERVER_POOL_SIZE,
         MAX_SERVER_POOL_SIZE, KEEP_ALIVE_TIME, TimeUnit.SECONDS,
-        new LinkedBlockingQueue(MAX_TASK_QUEUE_SIZE),
+        new LinkedBlockingQueue<>(MAX_TASK_QUEUE_SIZE),
         new NamedThreadFactory("ServerHandlerThread", MAX_SERVER_POOL_SIZE), new ThreadPoolExecutor.CallerRunsPolicy());
 
     /**

File: server/src/main/java/io/seata/server/session/BranchSession.java
Patch:
@@ -64,7 +64,7 @@ public class BranchSession implements Lockable, Comparable<BranchSession>, Sessi
     private String applicationData;
 
     private ConcurrentHashMap<Map<String, Long>, Set<String>> lockHolder
-        = new ConcurrentHashMap<Map<String, Long>, Set<String>>();
+        = new ConcurrentHashMap<>();
 
     /**
      * Gets application data.
@@ -369,7 +369,7 @@ public void decode(byte[] a) {
                 try {
                     this.lockKey = new String(CompressUtil.uncompress(byLockKey));
                 } catch (IOException e) {
-                    throw new RuntimeException("uncompress lockKey error", e);
+                    throw new RuntimeException("decompress lockKey error", e);
                 }
             } else {
                 this.lockKey = new String(byLockKey);

File: rm-datasource/src/main/java/io/seata/rm/datasource/AsyncWorker.java
Patch:
@@ -178,7 +178,7 @@ private void doBranchCommits() {
                     int maxSize = xids.size() > branchIds.size() ? xids.size() : branchIds.size();
                     if(maxSize == UNDOLOG_DELETE_LIMIT_SIZE){
                         try {
-                            UndoLogManager.batchDeleteUndoLog(xids, branchIds, UNDOLOG_DELETE_LIMIT_SIZE, conn);
+                            UndoLogManager.batchDeleteUndoLog(xids, branchIds, conn);
                         } catch (Exception ex) {
                             LOGGER.warn("Failed to batch delete undo log [" + branchIds + "/" + xids + "]", ex);
                         }
@@ -192,7 +192,7 @@ private void doBranchCommits() {
                 }
 
                 try {
-                    UndoLogManager.batchDeleteUndoLog(xids, branchIds, UNDOLOG_DELETE_LIMIT_SIZE, conn);
+                    UndoLogManager.batchDeleteUndoLog(xids, branchIds, conn);
                 }catch (Exception ex) {
                     LOGGER.warn("Failed to batch delete undo log [" + branchIds + "/" + xids + "]", ex);
                 }

File: server/src/main/java/io/seata/server/Server.java
Patch:
@@ -71,6 +71,8 @@ public static void main(String[] args) throws IOException {
         if (args.length > 1) {
             storeMode = args[1];
         }
+
+        UUIDGenerator.init(1);
         SessionHolder.init(storeMode);
 
         DefaultCoordinator coordinator = new DefaultCoordinator(rpcServer);
@@ -79,8 +81,6 @@ public static void main(String[] args) throws IOException {
         // register ShutdownHook
         ShutdownHook.getInstance().addDisposable(coordinator);
 
-        UUIDGenerator.init(1);
-
         if (args.length > 2) {
             XID.setIpAddress(args[2]);
         } else {

File: tcc/src/main/java/io/seata/rm/tcc/api/BusinessActionContext.java
Patch:
@@ -43,12 +43,12 @@ public BusinessActionContext() {
      * Instantiates a new Business action context.
      *
      * @param xid           the xid
-     * @param actionName    the action name
+     * @param branchId      the branch id
      * @param actionContext the action context
      */
-    public BusinessActionContext(String xid, String actionName, Map<String, Object> actionContext) {
+    public BusinessActionContext(String xid, String branchId, Map<String, Object> actionContext) {
         this.xid = xid;
-        this.actionName = actionName;
+        this.branchId = branchId;
         this.setActionContext(actionContext);
     }
 

File: server/src/main/java/io/seata/server/store/FileTransactionStoreManager.java
Patch:
@@ -407,9 +407,9 @@ private boolean writeDataFile(byte[] bs) {
     }
 
     private boolean writeDataFileByBuffer(ByteBuffer byteBuffer) {
+        byteBuffer.flip();
         for (int retry = 0; retry < MAX_WRITE_RETRY; retry++) {
             try {
-                byteBuffer.flip();
                 while (byteBuffer.hasRemaining()) {
                     currFileChannel.write(byteBuffer);
                 }

File: server/src/main/java/io/seata/server/store/StoreConfig.java
Patch:
@@ -19,7 +19,6 @@
 import io.seata.config.ConfigurationFactory;
 
 import static io.seata.core.constants.ConfigurationKeys.STORE_FILE_PREFIX;
-import static io.seata.core.constants.ConfigurationKeys.STORE_PREFIX;
 
 
 /**
@@ -52,6 +51,6 @@ public static int getFileWriteBufferCacheSize() {
     }
 
     public static FlushDiskMode getFlushDiskMode() {
-        return FlushDiskMode.findDiskMode(CONFIGURATION.getConfig(STORE_PREFIX + "flush-disk-mode"));
+        return FlushDiskMode.findDiskMode(CONFIGURATION.getConfig(STORE_FILE_PREFIX + "flush-disk-mode"));
     }
 }
\ No newline at end of file

File: config/seata-config-apollo/src/main/java/io/seata/config/apollo/ApolloConfiguration.java
Patch:
@@ -122,7 +122,7 @@ public boolean putConfig(String dataId, String content, long timeoutMills) {
 
     @Override
     public boolean putConfigIfAbsent(String dataId, String content, long timeoutMills) {
-        throw new NotSupportYetException("not support putConfigIfAbsent");
+        throw new NotSupportYetException("not support atomic operation putConfigIfAbsent");
     }
 
     @Override

File: config/seata-config-nacos/src/main/java/io/seata/config/nacos/NacosConfiguration.java
Patch:
@@ -82,7 +82,7 @@ public boolean putConfig(String dataId, String content, long timeoutMills) {
 
     @Override
     public boolean putConfigIfAbsent(String dataId, String content, long timeoutMills) {
-        throw new NotSupportYetException("not support putConfigIfAbsent");
+        throw new NotSupportYetException("not support atomic operation putConfigIfAbsent");
     }
 
     @Override
@@ -112,7 +112,7 @@ public void removeConfigListener(String dataId, Listener listener) {
 
     @Override
     public List<Listener> getConfigListeners(String dataId) {
-        throw new NotSupportYetException("not support putConfigIfAbsent");
+        throw new NotSupportYetException("not support getConfigListeners");
     }
 
     private static Properties getConfigProperties() {

File: config/seata-config-zk/src/main/java/io/seata/config/zk/ZookeeperConfiguration.java
Patch:
@@ -130,7 +130,7 @@ public Boolean call() throws Exception {
 
     @Override
     public boolean putConfigIfAbsent(String dataId, String content, long timeoutMills) {
-        throw new NotSupportYetException("not support atom operation putConfigIfAbsent");
+        throw new NotSupportYetException("not support atomic operation putConfigIfAbsent");
     }
 
     @Override

File: server/src/main/java/io/seata/server/session/GlobalSession.java
Patch:
@@ -516,7 +516,7 @@ private class GlobalSessionSpinLock{
 
         public void lock() throws TransactionException {
             boolean flag;
-            int times = 0;
+            int times = 1;
             long beginTime = System.currentTimeMillis();
             do {
                 long restTime = GLOBAL_SESSOION_LOCK_TIME_OUT_MILLS - (System.currentTimeMillis() - beginTime);

File: core/src/main/java/io/seata/core/protocol/MergeResultMessage.java
Patch:
@@ -116,6 +116,9 @@ public void decode(ByteBuffer byteBuffer) {
     @Override
     public String toString() {
         StringBuilder sb = new StringBuilder("MergeResultMessage ");
+        if (msgs == null) {
+            return sb.toString();
+        }
         for (AbstractMessage msg : msgs) { sb.append(msg.toString()).append("\n"); }
         return sb.toString();
     }

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/SelectForUpdateExecutor.java
Patch:
@@ -106,6 +106,9 @@ public T doExecute(Object... args) throws Throwable {
 
                     TableRecords selectPKRows = TableRecords.buildRecords(getTableMeta(), rsPK);
                     String lockKeys = buildLockKey(selectPKRows);
+                    if (StringUtils.isNullOrEmpty(lockKeys)) {
+                        break;
+                    }
 
                     if (RootContext.inGlobalTransaction()) {
                         //do as usual

File: core/src/main/java/io/seata/core/rpc/netty/RmRpcClient.java
Patch:
@@ -221,7 +221,8 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {
                     LOGGER.info("RmRpcClient channel" + ctx.channel() + " idle.");
                 }
                 try {
-                    nettyClientKeyPool.invalidateObject(poolKeyMap.get(ctx.channel().remoteAddress()), ctx.channel());
+                    String serverAddress = NetUtil.toStringAddress(ctx.channel().remoteAddress());
+                    nettyClientKeyPool.invalidateObject(poolKeyMap.get(serverAddress), ctx.channel());
                 } catch (Exception exx) {
                     LOGGER.error(exx.getMessage());
                 } finally {

File: core/src/main/java/io/seata/core/rpc/netty/TmRpcClient.java
Patch:
@@ -193,7 +193,8 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {
                     LOGGER.info("channel" + ctx.channel() + " read idle.");
                 }
                 try {
-                    nettyClientKeyPool.invalidateObject(poolKeyMap.get(ctx.channel().remoteAddress()), ctx.channel());
+                    String serverAddress = NetUtil.toStringAddress(ctx.channel().remoteAddress());
+                    nettyClientKeyPool.invalidateObject(poolKeyMap.get(serverAddress), ctx.channel());
                 } catch (Exception exx) {
                     LOGGER.error(exx.getMessage());
                 } finally {

File: server/src/main/java/io/seata/server/store/FileTransactionStoreManager.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.concurrent.atomic.AtomicLong;
 
 import io.seata.common.thread.NamedThreadFactory;
+import io.seata.common.util.CollectionUtils;
 import io.seata.core.model.GlobalStatus;
 import io.seata.server.session.BranchSession;
 import io.seata.server.session.GlobalSession;
@@ -361,7 +362,7 @@ private void saveHistory() throws IOException {
                 List<GlobalSession> globalSessionsOverMaxTimeout = sessionManager.findGlobalSessions(
                     new SessionCondition(
                         GlobalStatus.Begin, MAX_TRX_TIMEOUT_MILLS));
-                if (null != globalSessionsOverMaxTimeout) {
+                if (CollectionUtils.isNotEmpty(globalSessionsOverMaxTimeout)) {
                     for (GlobalSession globalSession : globalSessionsOverMaxTimeout) {
                         TransactionWriteStore globalWriteStore = new TransactionWriteStore(globalSession,
                             LogOperation.GLOBAL_ADD);

File: discovery/seata-discovery-sofa/src/test/io/seata/discovery/registry/sofa/SofaRegistryServiceImplTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *  Copyright 1999-2018 Alibaba Group Holding Ltd.
+ *  Copyright 1999-2019 Seata.io Group.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package io.seata.discovery.registry.sofa;
 
 import com.alipay.sofa.registry.server.test.TestRegistryMain;

File: rm-datasource/src/main/java/io/seata/rm/datasource/exec/UpdateExecutor.java
Patch:
@@ -141,7 +141,7 @@ protected TableRecords afterImage(TableRecords beforeImage) throws SQLException
         }
         List<Field> pkRows = beforeImage.pkRows();
         selectSQLAppender.append(
-            " FROM " + getFromTableInSQL() + " WHERE " + buildWhereConditionByPKs(pkRows) + " FOR UPDATE");
+            " FROM " + getFromTableInSQL() + " WHERE " + buildWhereConditionByPKs(pkRows));
         String selectSQL = selectSQLAppender.toString();
 
         TableRecords afterImage = null;

File: server/src/main/java/io/seata/server/coordinator/DefaultCore.java
Patch:
@@ -29,7 +29,6 @@
 import io.seata.server.session.GlobalSession;
 import io.seata.server.session.SessionHelper;
 import io.seata.server.session.SessionHolder;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -144,6 +143,7 @@ public GlobalStatus commit(String xid) throws TransactionException {
             globalSession.changeStatus(GlobalStatus.Committing);
             if (globalSession.canBeCommittedAsync()) {
                 asyncCommit(globalSession);
+                return GlobalStatus.Committed;
             } else {
                 doGlobalCommit(globalSession, false);
             }

File: rm-datasource/src/test/java/io/seata/rm/datasource/sql/struct/TableMetaTest.java
Patch:
@@ -276,7 +276,7 @@ public boolean allTablesAreSelectable() throws SQLException {
 
                 @Override
                 public String getURL() throws SQLException {
-                    return null;
+                    return getUrl();
                 }
 
                 @Override

File: config/fescar-config-core/src/main/java/com/alibaba/fescar/config/ConfigFuture.java
Patch:
@@ -189,7 +189,7 @@ public void setOperation(ConfigOperation operation) {
     /**
      * The enum Config operation.
      */
-    enum ConfigOperation {
+    public enum ConfigOperation {
         /**
          * Get config operation.
          */

File: discovery/fescar-discovery-consul/src/main/java/com/alibaba/fescar/discovery/registry/consul/ConsulRegistryServiceImpl.java
Patch:
@@ -95,7 +95,7 @@ private ConsulRegistryServiceImpl() {
      *
      * @return instance
      */
-    public static ConsulRegistryServiceImpl getInstance() {
+    static ConsulRegistryServiceImpl getInstance() {
         if (null == instance) {
             synchronized (ConsulRegistryServiceImpl.class) {
                 if (null == instance) {
@@ -334,4 +334,4 @@ public void close() throws Exception {
         client = null;
     }
 
-}
+}
\ No newline at end of file

File: discovery/fescar-discovery-core/src/main/java/com/alibaba/fescar/discovery/loadbalance/AbstractLoadBalance.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.util.List;
 
-import com.alibaba.nacos.client.naming.utils.CollectionUtils;
+import com.alibaba.fescar.common.util.CollectionUtils;
 
 /**
  * The type Abstract load balance.

File: discovery/fescar-discovery-eureka/src/main/java/com/alibaba/fescar/discovery/registry/eureka/CustomEurekaInstanceConfig.java
Patch:
@@ -13,11 +13,11 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.alibaba.fescar.discovery.registry;
+package com.alibaba.fescar.discovery.registry.eureka;
 
+import com.alibaba.fescar.common.util.StringUtils;
 import com.netflix.appinfo.EurekaInstanceConfig;
 import com.netflix.appinfo.MyDataCenterInstanceConfig;
-import org.apache.commons.lang3.StringUtils;
 
 /**
  * @author: rui_849217@163.com

File: discovery/fescar-discovery-nacos/src/main/java/com/alibaba/fescar/discovery/registry/nacos/NacosRegistryServiceImpl.java
Patch:
@@ -14,7 +14,7 @@
  *  limitations under the License.
  */
 
-package com.alibaba.fescar.discovery.registry;
+package com.alibaba.fescar.discovery.registry.nacos;
 
 import java.net.InetSocketAddress;
 import java.util.ArrayList;
@@ -26,6 +26,7 @@
 import com.alibaba.fescar.config.Configuration;
 import com.alibaba.fescar.config.ConfigurationFactory;
 import com.alibaba.fescar.config.ConfigurationKeys;
+import com.alibaba.fescar.discovery.registry.RegistryService;
 import com.alibaba.nacos.api.naming.NamingFactory;
 import com.alibaba.nacos.api.naming.NamingService;
 import com.alibaba.nacos.api.naming.listener.Event;
@@ -61,7 +62,7 @@ private NacosRegistryServiceImpl() {
      *
      * @return the instance
      */
-    public static NacosRegistryServiceImpl getInstance() {
+    static NacosRegistryServiceImpl getInstance() {
         if (null == instance) {
             synchronized (NacosRegistryServiceImpl.class) {
                 if (null == instance) {

File: discovery/fescar-discovery-redis/src/main/java/com/alibaba/fescar/discovery/registry/redis/RedisListener.java
Patch:
@@ -14,7 +14,7 @@
  *  limitations under the License.
  */
 
-package com.alibaba.fescar.discovery.registry;
+package com.alibaba.fescar.discovery.registry.redis;
 
 /**
  * The RedisListener

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/AbstractRpcRemoting.java
Patch:
@@ -340,7 +340,7 @@ private void channelWriteableCheck(Channel channel, Object msg) {
     }
 
     /**
-     * 用于测试。发现线程池满时可以打开这个变量，把堆栈打出来分享
+     * For testing. When the thread pool is full, you can change this variable and share the stack
      */
     boolean allowDumpStack = false;
 

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/RpcServer.java
Patch:
@@ -125,6 +125,7 @@ public void init() {
         setChannelHandlers(RpcServer.this);
         DefaultServerMessageListenerImpl defaultServerMessageListenerImpl = new DefaultServerMessageListenerImpl(
             transactionMessageHandler);
+        defaultServerMessageListenerImpl.init();
         defaultServerMessageListenerImpl.setServerMessageSender(this);
         this.setServerMessageListener(defaultServerMessageListenerImpl);
         super.start();

File: config/src/main/java/com/alibaba/fescar/config/ApolloConfiguration.java
Patch:
@@ -109,7 +109,7 @@ public void run() {
                 configFuture.setResult(result);
             }
         });
-        return (String)configFuture.get(timeoutMills, TimeUnit.MILLISECONDS);
+        return (String)configFuture.get();
     }
 
     @Override

File: config/src/main/java/com/alibaba/fescar/config/ConfigFuture.java
Patch:
@@ -81,7 +81,7 @@ public boolean isTimeout() {
      * @throws InterruptedException the interrupted exception
      */
     public Object get() {
-        return get(DEFAULT_CONFIG_TIMEOUT, TimeUnit.MILLISECONDS);
+        return get(this.timeoutMills, TimeUnit.MILLISECONDS);
     }
 
     /**

File: config/src/main/java/com/alibaba/fescar/config/FileConfiguration.java
Patch:
@@ -95,7 +95,7 @@ public FileConfiguration(String name) {
     public String getConfig(String dataId, String defaultValue, long timeoutMills) {
         ConfigFuture configFuture = new ConfigFuture(dataId, defaultValue, ConfigOperation.GET, timeoutMills);
         configOperateExecutor.submit(new ConfigOperateRunnable(configFuture));
-        return (String)configFuture.get(timeoutMills, TimeUnit.MILLISECONDS);
+        return (String)configFuture.get();
     }
 
     @Override
@@ -109,14 +109,14 @@ public boolean putConfig(String dataId, String content, long timeoutMills) {
     public boolean putConfigIfAbsent(String dataId, String content, long timeoutMills) {
         ConfigFuture configFuture = new ConfigFuture(dataId, content, ConfigOperation.PUTIFABSENT, timeoutMills);
         configOperateExecutor.submit(new ConfigOperateRunnable(configFuture));
-        return (Boolean)configFuture.get(timeoutMills, TimeUnit.MILLISECONDS);
+        return (Boolean)configFuture.get();
     }
 
     @Override
     public boolean removeConfig(String dataId, long timeoutMills) {
         ConfigFuture configFuture = new ConfigFuture(dataId, null, ConfigOperation.REMOVE, timeoutMills);
         configOperateExecutor.submit(new ConfigOperateRunnable(configFuture));
-        return (Boolean)configFuture.get(timeoutMills, TimeUnit.MILLISECONDS);
+        return (Boolean)configFuture.get();
     }
 
     @Override

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/ConnectionProxy.java
Patch:
@@ -47,10 +47,9 @@ public class ConnectionProxy extends AbstractConnectionProxy {
      *
      * @param dataSourceProxy  the data source proxy
      * @param targetConnection the target connection
-     * @param dbType           the db type
      */
-    public ConnectionProxy(DataSourceProxy dataSourceProxy, Connection targetConnection, String dbType) {
-        super(dataSourceProxy, targetConnection, dbType);
+    public ConnectionProxy(DataSourceProxy dataSourceProxy, Connection targetConnection) {
+        super(dataSourceProxy, targetConnection);
     }
 
     /**

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/undo/UndoLogManager.java
Patch:
@@ -126,7 +126,7 @@ private static void assertDbSupport(String dbType) {
      * @throws TransactionException the transaction exception
      */
     public static void undo(DataSourceProxy dataSourceProxy, String xid, long branchId) throws TransactionException {
-        assertDbSupport(dataSourceProxy.getTargetDataSource().getDbType());
+        assertDbSupport(dataSourceProxy.getDbType());
 
         Connection conn = null;
         ResultSet rs = null;

File: rm-datasource/src/test/java/com/alibaba/fescar/rm/datasource/exec/BaseTransactionalExecutorTest.java
Patch:
@@ -43,7 +43,7 @@ public class BaseTransactionalExecutorTest {
     public void testExecuteWithGlobalLockSet() throws Exception {
 
         //initial objects
-        ConnectionProxy connectionProxy = new ConnectionProxy(null, null, null);
+        ConnectionProxy connectionProxy = new ConnectionProxy(null, null);
         StatementProxy statementProxy = new StatementProxy<>(connectionProxy, null);
 
         BaseTransactionalExecutor<Object, Statement> baseTransactionalExecutor

File: core/src/main/java/com/alibaba/fescar/core/context/ContextCore.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The interface Context core.
+ *
+ * @author sharajava
  */
 public interface ContextCore {
 

File: core/src/main/java/com/alibaba/fescar/core/context/ContextCoreLoader.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The type Context core loader.
+ *
+ * @author sharajava
  */
 public class ContextCoreLoader {
 

File: core/src/main/java/com/alibaba/fescar/core/context/RootContext.java
Patch:
@@ -23,6 +23,8 @@
 
 /**
  * The type Root context.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class RootContext {
 

File: core/src/main/java/com/alibaba/fescar/core/context/ThreadLocalContextCore.java
Patch:
@@ -23,6 +23,8 @@
 
 /**
  * The type Thread local context core.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 @LoadLevel(name = "ThreadLocalContextCore", order = Integer.MIN_VALUE)
 public class ThreadLocalContextCore implements ContextCore {

File: core/src/main/java/com/alibaba/fescar/core/exception/AbstractExceptionHandler.java
Patch:
@@ -22,6 +22,8 @@
 
 /**
  * The type Abstract exception handler.
+ *
+ * @author sharajava
  */
 public abstract class AbstractExceptionHandler {
 

File: core/src/main/java/com/alibaba/fescar/core/exception/TransactionException.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The type Transaction exception.
+ *
+ * @author sharajava
  */
 public class TransactionException extends Exception {
 

File: core/src/main/java/com/alibaba/fescar/core/exception/TransactionExceptionCode.java
Patch:
@@ -21,6 +21,8 @@
 
 /**
  * The enum Transaction exception code.
+ *
+ * @author sharajava
  */
 public enum TransactionExceptionCode {
 

File: core/src/main/java/com/alibaba/fescar/core/model/BranchStatus.java
Patch:
@@ -23,6 +23,8 @@
 
 /**
  * Status of branch transaction.
+ *
+ * @author sharajava
  */
 public enum BranchStatus {
 

File: core/src/main/java/com/alibaba/fescar/core/model/BranchType.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The enum Branch type.
+ *
+ * @author sharajava
  */
 public enum BranchType {
 

File: core/src/main/java/com/alibaba/fescar/core/model/GlobalStatus.java
Patch:
@@ -21,6 +21,8 @@
 
 /**
  * Status of global transaction.
+ *
+ * @author sharajava
  */
 public enum GlobalStatus {
 

File: core/src/main/java/com/alibaba/fescar/core/model/Resource.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * Resource that can be managed by Resource Manager and involved into global transaction.
+ *
+ * @author sharajava
  */
 public interface Resource {
 

File: core/src/main/java/com/alibaba/fescar/core/model/ResourceManager.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * Resource Manager: common behaviors.
+ *
+ * @author sharajava
  */
 public interface ResourceManager extends ResourceManagerInbound, ResourceManagerOutbound {
 

File: core/src/main/java/com/alibaba/fescar/core/model/ResourceManagerInbound.java
Patch:
@@ -19,7 +19,9 @@
 import com.alibaba.fescar.core.exception.TransactionException;
 
 /**
- * Resource Manager: receive inbound request from TC.
+ *
+ *
+ * @author sharajava
  */
 public interface ResourceManagerInbound {
 

File: core/src/main/java/com/alibaba/fescar/core/model/ResourceManagerOutbound.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * Resource Manager: send outbound request to TC.
+ *
+ * @author sharajava
  */
 public interface ResourceManagerOutbound {
 

File: core/src/main/java/com/alibaba/fescar/core/model/TransactionManager.java
Patch:
@@ -22,6 +22,8 @@
  * Transaction Manager.
  *
  * Define a global transaction and control it.
+ *
+ * @author sharajava
  */
 public interface TransactionManager {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/AbstractIdentifyRequest.java
Patch:
@@ -24,6 +24,8 @@
 
 /**
  * The type Abstract identify request.
+ *
+ * @author sharajava
  */
 public abstract class AbstractIdentifyRequest extends AbstractMessage {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/AbstractIdentifyResponse.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The type Abstract identify response.
+ *
+ * @author sharajava
  */
 public abstract class AbstractIdentifyResponse extends AbstractResultMessage {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/IncompatibleVersionException.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The type Incompatible version exception.
+ *
+ * @author sharajava
  */
 public class IncompatibleVersionException extends Exception {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/ResultCode.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The enum Result code.
+ *
+ * @author sharajava
  */
 public enum ResultCode {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/AbstractBranchEndRequest.java
Patch:
@@ -24,6 +24,8 @@
 
 /**
  * The type Abstract branch end request.
+ *
+ * @author sharajava
  */
 public abstract class AbstractBranchEndRequest extends AbstractTransactionRequestToRM {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/AbstractBranchEndResponse.java
Patch:
@@ -24,6 +24,8 @@
 
 /**
  * The type Abstract branch end response.
+ *
+ * @author sharajava
  */
 public abstract class AbstractBranchEndResponse extends AbstractTransactionResponse {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/AbstractGlobalEndRequest.java
Patch:
@@ -22,6 +22,8 @@
 
 /**
  * The type Abstract global end request.
+ *
+ * @author sharajava
  */
 public abstract class AbstractGlobalEndRequest extends AbstractTransactionRequestToTC implements MergedMessage {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/AbstractGlobalEndResponse.java
Patch:
@@ -22,6 +22,8 @@
 
 /**
  * The type Abstract global end response.
+ *
+ * @author sharajava
  */
 public abstract class AbstractGlobalEndResponse extends AbstractTransactionResponse {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/AbstractTransactionRequest.java
Patch:
@@ -23,6 +23,8 @@
 
 /**
  * The type Abstract transaction request.
+ *
+ * @author sharajava
  */
 public abstract class AbstractTransactionRequest extends AbstractMessage {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/AbstractTransactionRequestToRM.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The type Abstract transaction request to rm.
+ *
+ * @author sharajava
  */
 public abstract class AbstractTransactionRequestToRM extends AbstractTransactionRequest {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/AbstractTransactionRequestToTC.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The type Abstract transaction request to tc.
+ *
+ * @author sharajava
  */
 public abstract class AbstractTransactionRequestToTC extends AbstractTransactionRequest {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/AbstractTransactionResponse.java
Patch:
@@ -25,6 +25,8 @@
 
 /**
  * The type Abstract transaction response.
+ *
+ * @author sharajava
  */
 public abstract class AbstractTransactionResponse extends AbstractResultMessage {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/BranchCommitRequest.java
Patch:
@@ -21,6 +21,8 @@
 
 /**
  * The type Branch commit request.
+ *
+ * @author sharajava
  */
 public class BranchCommitRequest extends AbstractBranchEndRequest {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/BranchCommitResponse.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The type Branch commit response.
+ *
+ * @author sharajava
  */
 public class BranchCommitResponse extends AbstractBranchEndResponse {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/BranchRegisterRequest.java
Patch:
@@ -24,6 +24,8 @@
 
 /**
  * The type Branch register request.
+ *
+ * @author sharajava
  */
 public class BranchRegisterRequest extends AbstractTransactionRequestToTC implements MergedMessage {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/BranchRegisterResponse.java
Patch:
@@ -23,6 +23,8 @@
 
 /**
  * The type Branch register response.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class BranchRegisterResponse extends AbstractTransactionResponse implements Serializable {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/BranchReportRequest.java
Patch:
@@ -25,6 +25,8 @@
 
 /**
  * The type Branch report request.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class BranchReportRequest extends AbstractTransactionRequestToTC implements MergedMessage {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/BranchReportResponse.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The type Branch report response.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class BranchReportResponse extends AbstractTransactionResponse {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/BranchRollbackRequest.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The type Branch rollback request.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class BranchRollbackRequest extends AbstractBranchEndRequest {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/BranchRollbackResponse.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The type Branch rollback response.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class BranchRollbackResponse extends AbstractBranchEndResponse {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/GlobalBeginRequest.java
Patch:
@@ -23,6 +23,8 @@
 
 /**
  * The type Global begin request.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class GlobalBeginRequest extends AbstractTransactionRequestToTC implements MergedMessage {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/GlobalBeginResponse.java
Patch:
@@ -22,6 +22,8 @@
 
 /**
  * The type Global begin response.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class GlobalBeginResponse extends AbstractTransactionResponse {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/GlobalCommitRequest.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The type Global commit request.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class GlobalCommitRequest extends AbstractGlobalEndRequest {
     @Override

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/GlobalCommitResponse.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The type Global commit response.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class GlobalCommitResponse extends AbstractGlobalEndResponse {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/GlobalLockQueryRequest.java
Patch:
@@ -21,6 +21,8 @@
 
 /**
  * The type Global lock query request.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class GlobalLockQueryRequest extends BranchRegisterRequest implements MergedMessage {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/GlobalLockQueryResponse.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The type Global lock query response.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class GlobalLockQueryResponse extends AbstractTransactionResponse {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/GlobalRollbackRequest.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The type Global rollback request.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class GlobalRollbackRequest extends AbstractGlobalEndRequest {
     @Override

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/GlobalRollbackResponse.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The type Global rollback response.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class GlobalRollbackResponse extends AbstractGlobalEndResponse {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/GlobalStatusRequest.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The type Global status request.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class GlobalStatusRequest extends AbstractGlobalEndRequest {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/GlobalStatusResponse.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The type Global status response.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class GlobalStatusResponse extends AbstractGlobalEndResponse {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/RMInboundHandler.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The interface Rm inbound handler.
+ *
+ * @author sharajava
  */
 public interface RMInboundHandler {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/TCInboundHandler.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The interface Tc inbound handler.
+ *
+ * @author sharajava
  */
 public interface TCInboundHandler {
 

File: dubbo-alibaba/src/main/java/com/alibaba/fescar/dubbo/alibaba/TransactionPropagationFilter.java
Patch:
@@ -31,6 +31,8 @@
 
 /**
  * The type Transaction propagation filter.
+ *
+ * @author sharajava
  */
 @Activate(group = {Constants.PROVIDER, Constants.CONSUMER}, order = 100)
 public class TransactionPropagationFilter implements Filter {

File: dubbo/src/main/java/com/alibaba/fescar/dubbo/TransactionPropagationFilter.java
Patch:
@@ -31,6 +31,8 @@
 
 /**
  * The type Transaction propagation filter.
+ *
+ * @author sharajava
  */
 @Activate(group = {Constants.PROVIDER, Constants.CONSUMER}, order = 100)
 public class TransactionPropagationFilter implements Filter {

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/AbstractRMHandlerAT.java
Patch:
@@ -32,6 +32,8 @@
 
 /**
  * The type Abstract rm handler at.
+ *
+ * @author sharajava
  */
 @Deprecated
 public abstract class AbstractRMHandlerAT extends AbstractExceptionHandler

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/RMClientAT.java
Patch:
@@ -22,6 +22,8 @@
 
 /**
  * The type Rm client at.
+ *
+ * @author sharajava
  */
 @Deprecated
 public class RMClientAT {

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/RMHandlerAT.java
Patch:
@@ -21,6 +21,8 @@
 
 /**
  * The type Rm handler at.
+ *
+ * @author sharajava
  */
 public class RMHandlerAT extends AbstractRMHandler {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/AbstractConnectionProxy.java
Patch:
@@ -39,6 +39,8 @@
 
 /**
  * The type Abstract connection proxy.
+ *
+ * @author sharajava
  */
 public abstract class AbstractConnectionProxy implements Connection {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/AbstractDataSourceProxy.java
Patch:
@@ -27,6 +27,8 @@
 
 /**
  * The type Abstract data source proxy.
+ *
+ * @author sharajava
  */
 public abstract class AbstractDataSourceProxy implements DataSource {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/AbstractPreparedStatementProxy.java
Patch:
@@ -42,6 +42,8 @@
 
 /**
  * The type Abstract prepared statement proxy.
+ *
+ * @author sharajava
  */
 public abstract class AbstractPreparedStatementProxy extends StatementProxy<PreparedStatement>
     implements PreparedStatement {

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/AbstractStatementProxy.java
Patch:
@@ -28,6 +28,8 @@
 /**
  * The type Abstract statement proxy.
  *
+ * @author sharajava
+ *
  * @param <T> the type parameter
  */
 public abstract class AbstractStatementProxy<T extends Statement> implements Statement {

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/AsyncWorker.java
Patch:
@@ -44,6 +44,8 @@
 
 /**
  * The type Async worker.
+ *
+ * @author sharajava
  */
 public class AsyncWorker implements ResourceManagerInbound {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/ConnectionContext.java
Patch:
@@ -25,6 +25,8 @@
 
 /**
  * The type Connection context.
+ *
+ * @author sharajava
  */
 public class ConnectionContext {
     private String xid;

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/DataSourceManager.java
Patch:
@@ -26,9 +26,9 @@
 import com.alibaba.fescar.common.exception.FrameworkException;
 import com.alibaba.fescar.common.exception.NotSupportYetException;
 import com.alibaba.fescar.common.exception.ShouldNeverHappenException;
+import com.alibaba.fescar.common.executor.Initialize;
 import com.alibaba.fescar.common.util.NetUtil;
 import com.alibaba.fescar.core.context.RootContext;
-import com.alibaba.fescar.common.executor.Initialize;
 import com.alibaba.fescar.core.exception.TransactionException;
 import com.alibaba.fescar.core.exception.TransactionExceptionCode;
 import com.alibaba.fescar.core.model.BranchStatus;
@@ -53,6 +53,8 @@
 
 /**
  * The type Data source manager.
+ *
+ * @author sharajava
  */
 public class DataSourceManager extends AbstractResourceManager implements Initialize {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/DataSourceProxy.java
Patch:
@@ -26,6 +26,8 @@
 
 /**
  * The type Data source proxy.
+ *
+ * @author sharajava
  */
 public class DataSourceProxy extends AbstractDataSourceProxy implements Resource {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/ParametersHolder.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The interface Parameters holder.
+ *
+ * @author sharajava
  */
 public interface ParametersHolder {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/PreparedStatementProxy.java
Patch:
@@ -26,6 +26,8 @@
 
 /**
  * The type Prepared statement proxy.
+ *
+ * @author sharajava
  */
 public class PreparedStatementProxy extends AbstractPreparedStatementProxy
     implements PreparedStatement, ParametersHolder {

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/StatementProxy.java
Patch:
@@ -26,6 +26,8 @@
 /**
  * The type Statement proxy.
  *
+ * @author sharajava
+ *
  * @param <T> the type parameter
  */
 public class StatementProxy<T extends Statement> extends AbstractStatementProxy<T> {

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/AbstractDMLBaseExecutor.java
Patch:
@@ -30,6 +30,8 @@
 /**
  * The type Abstract dml base executor.
  *
+ * @author sharajava
+ *
  * @param <T> the type parameter
  * @param <S> the type parameter
  */

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/BaseTransactionalExecutor.java
Patch:
@@ -34,6 +34,8 @@
 /**
  * The type Base transactional executor.
  *
+ * @author sharajava
+ *
  * @param <T> the type parameter
  * @param <S> the type parameter
  */

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/DeleteExecutor.java
Patch:
@@ -30,14 +30,16 @@
 import com.alibaba.fescar.rm.datasource.sql.SQLRecognizer;
 import com.alibaba.fescar.rm.datasource.sql.struct.TableMeta;
 import com.alibaba.fescar.rm.datasource.sql.struct.TableRecords;
-
 import com.alibaba.fescar.rm.datasource.undo.KeywordChecker;
 import com.alibaba.fescar.rm.datasource.undo.KeywordCheckerFactory;
+
 import org.apache.commons.lang.StringUtils;
 
 /**
  * The type Delete executor.
  *
+ * @author sharajava
+ *
  * @param <T> the type parameter
  * @param <S> the type parameter
  */

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/ExecuteTemplate.java
Patch:
@@ -26,6 +26,8 @@
 
 /**
  * The type Execute template.
+ *
+ * @author sharajava
  */
 public class ExecuteTemplate {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/Executor.java
Patch:
@@ -19,6 +19,8 @@
 /**
  * The interface Executor.
  *
+ * @author sharajava
+ *
  * @param <T> the type parameter
  */
 public interface Executor<T> {

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/LockConflictException.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The type Lock conflict exception.
+ *
+ * @author sharajava
  */
 public class LockConflictException extends SQLException {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/LockRetryController.java
Patch:
@@ -21,6 +21,8 @@
 
 /**
  * The type Lock retry controller.
+ *
+ * @author sharajava
  */
 public class LockRetryController {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/LockWaitTimeoutException.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The type Lock wait timeout exception.
+ *
+ * @author sharajava
  */
 public class LockWaitTimeoutException extends SQLException {
     private static final long serialVersionUID = -6754599774015964707L;

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/PlainExecutor.java
Patch:
@@ -23,6 +23,8 @@
 /**
  * The type Plain executor.
  *
+ * @author sharajava
+ *
  * @param <T> the type parameter
  * @param <S> the type parameter
  */

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/SelectForUpdateExecutor.java
Patch:
@@ -34,6 +34,8 @@
 /**
  * The type Select for update executor.
  *
+ * @author sharajava
+ *
  * @param <S> the type parameter
  */
 public class SelectForUpdateExecutor<S extends Statement> extends BaseTransactionalExecutor<ResultSet, S> {

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/StatementCallback.java
Patch:
@@ -22,6 +22,8 @@
 /**
  * The interface Statement callback.
  *
+ * @author sharajava
+ *
  * @param <T> the type parameter
  * @param <S> the type parameter
  */

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/UpdateExecutor.java
Patch:
@@ -36,6 +36,8 @@
 /**
  * The type Update executor.
  *
+ * @author sharajava
+ *
  * @param <T> the type parameter
  * @param <S> the type parameter
  */

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/SQLDeleteRecognizer.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The interface Sql delete recognizer.
+ *
+ * @author sharajava
  */
 public interface SQLDeleteRecognizer extends WhereRecognizer {
 }

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/SQLInsertRecognizer.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The interface Sql insert recognizer.
+ *
+ * @author sharajava
  */
 public interface SQLInsertRecognizer extends SQLRecognizer {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/SQLParsingException.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The type Sql parsing exception.
+ *
+ * @author sharajava
  */
 public class SQLParsingException extends RuntimeException {
     /**

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/SQLRecognizer.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The interface Sql recognizer.
+ *
+ * @author sharajava
  */
 public interface SQLRecognizer {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/SQLSelectRecognizer.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The interface Sql select recognizer.
+ *
+ * @author sharajava
  */
 public interface SQLSelectRecognizer extends WhereRecognizer {
 }

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/SQLType.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The enum Sql type.
+ *
+ * @author sharajava
  */
 public enum SQLType {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/SQLUpdateRecognizer.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The interface Sql update recognizer.
+ *
+ * @author sharajava
  */
 public interface SQLUpdateRecognizer extends WhereRecognizer {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/SQLVisitorFactory.java
Patch:
@@ -32,6 +32,8 @@
 
 /**
  * The type Sql visitor factory.
+ *
+ * @author sharajava
  */
 public class SQLVisitorFactory {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/WhereRecognizer.java
Patch:
@@ -22,6 +22,8 @@
 
 /**
  * The interface Where recognizer.
+ *
+ * @author sharajava
  */
 public interface WhereRecognizer extends SQLRecognizer {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/druid/BaseRecognizer.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The type Base recognizer.
+ *
+ * @author sharajava
  */
 public abstract class BaseRecognizer implements SQLRecognizer {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/druid/MySQLDeleteRecognizer.java
Patch:
@@ -31,6 +31,8 @@
 
 /**
  * The type My sql delete recognizer.
+ *
+ * @author sharajava
  */
 public class MySQLDeleteRecognizer extends BaseRecognizer implements SQLDeleteRecognizer {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/druid/MySQLInsertRecognizer.java
Patch:
@@ -33,6 +33,8 @@
 
 /**
  * The type My sql insert recognizer.
+ *
+ * @author sharajava
  */
 public class MySQLInsertRecognizer extends BaseRecognizer implements SQLInsertRecognizer {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/druid/MySQLSelectForUpdateRecognizer.java
Patch:
@@ -35,6 +35,8 @@
 
 /**
  * The type My sql select for update recognizer.
+ *
+ * @author sharajava
  */
 public class MySQLSelectForUpdateRecognizer extends BaseRecognizer implements SQLSelectRecognizer {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/druid/MySQLUpdateRecognizer.java
Patch:
@@ -39,6 +39,8 @@
 
 /**
  * The type My sql update recognizer.
+ *
+ * @author sharajava
  */
 public class MySQLUpdateRecognizer extends BaseRecognizer implements SQLUpdateRecognizer {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/struct/ColumnMeta.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The type Column meta.
+ *
+ * @author sharajava
  */
 public class ColumnMeta {
     private String tableCat;

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/struct/Field.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * Field
+ *
+ * @author sharajava
  */
 public class Field {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/struct/IndexMeta.java
Patch:
@@ -21,6 +21,8 @@
 
 /**
  * The type Index meta.
+ *
+ * @author sharajava
  */
 public class IndexMeta {
     private List<ColumnMeta> values = new ArrayList<ColumnMeta>();

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/struct/IndexType.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The enum Index type.
+ *
+ * @author sharajava
  */
 public enum IndexType {
     /**

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/struct/KeyType.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The enum Key type.
+ *
+ * @author sharajava
  */
 public enum KeyType {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/struct/Null.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The type Null.
+ *
+ * @author sharajava
  */
 public class Null {
     private static Null instance = new Null();

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/struct/Row.java
Patch:
@@ -23,6 +23,8 @@
 
 /**
  * The type Row.
+ *
+ * @author sharajava
  */
 public class Row {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/struct/TableMeta.java
Patch:
@@ -26,6 +26,8 @@
 
 /**
  * The type Table meta.
+ *
+ * @author sharajava
  */
 public class TableMeta {
     private String tableName;

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/struct/TableMetaCache.java
Patch:
@@ -36,6 +36,8 @@
 
 /**
  * The type Table meta cache.
+ *
+ * @author sharajava
  */
 public class TableMetaCache {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/struct/TableRecords.java
Patch:
@@ -27,6 +27,8 @@
 
 /**
  * The type Table records.
+ *
+ * @author sharajava
  */
 public class TableRecords {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/undo/AbstractUndoExecutor.java
Patch:
@@ -28,6 +28,8 @@
 
 /**
  * The type Abstract undo executor.
+ *
+ * @author sharajava
  */
 public abstract class AbstractUndoExecutor {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/undo/BranchUndoLog.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The type Branch undo log.
+ *
+ * @author sharajava
  */
 public class BranchUndoLog {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/undo/JSONBasedUndoLogParser.java
Patch:
@@ -21,6 +21,8 @@
 
 /**
  * The type Json based undo log parser.
+ *
+ * @author sharajava
  */
 public class JSONBasedUndoLogParser implements UndoLogParser {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/undo/SQLUndoLog.java
Patch:
@@ -22,6 +22,8 @@
 
 /**
  * The type Sql undo log.
+ *
+ * @author sharajava
  */
 public class SQLUndoLog {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/undo/UndoExecutorFactory.java
Patch:
@@ -25,6 +25,8 @@
 
 /**
  * The type Undo executor factory.
+ *
+ * @author sharajava
  */
 public class UndoExecutorFactory {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/undo/UndoLogParser.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The interface Undo log parser.
+ *
+ * @author sharajava
  */
 public interface UndoLogParser {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/undo/UndoLogParserFactory.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The type Undo log parser factory.
+ *
+ * @author sharajava
  */
 public class UndoLogParserFactory {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/undo/mysql/MySQLUndoDeleteExecutor.java
Patch:
@@ -31,6 +31,8 @@
 
 /**
  * The type My sql undo delete executor.
+ *
+ * @author sharajava
  */
 public class MySQLUndoDeleteExecutor extends AbstractUndoExecutor {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/undo/mysql/MySQLUndoInsertExecutor.java
Patch:
@@ -34,6 +34,8 @@
 
 /**
  * The type My sql undo insert executor.
+ *
+ * @author sharajava
  */
 public class MySQLUndoInsertExecutor extends AbstractUndoExecutor {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/undo/mysql/MySQLUndoUpdateExecutor.java
Patch:
@@ -31,6 +31,8 @@
 
 /**
  * The type My sql undo update executor.
+ *
+ * @author sharajava
  */
 public class MySQLUndoUpdateExecutor extends AbstractUndoExecutor {
 

File: rm/src/main/java/com/alibaba/fescar/rm/RMClient.java
Patch:
@@ -22,6 +22,7 @@
 /**
  * The Rm client Initiator.
  *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class RMClient {
 

File: server/src/main/java/com/alibaba/fescar/server/AbstractTCInboundHandler.java
Patch:
@@ -37,6 +37,8 @@
 
 /**
  * The type Abstract tc inbound handler.
+ *
+ * @author sharajava
  */
 public abstract class AbstractTCInboundHandler extends AbstractExceptionHandler implements TCInboundHandler {
 

File: server/src/main/java/com/alibaba/fescar/server/Server.java
Patch:
@@ -30,6 +30,8 @@
 
 /**
  * The type Server.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class Server {
 

File: server/src/main/java/com/alibaba/fescar/server/UUIDGenerator.java
Patch:
@@ -26,6 +26,8 @@
 
 /**
  * The type Uuid generator.
+ *
+ * @author sharajava
  */
 public class UUIDGenerator {
 

File: server/src/main/java/com/alibaba/fescar/server/coordinator/Core.java
Patch:
@@ -24,6 +24,8 @@
 
 /**
  * The interface Core.
+ *
+ * @author sharajava
  */
 public interface Core extends TransactionManager, ResourceManagerOutbound {
 

File: server/src/main/java/com/alibaba/fescar/server/coordinator/CoreFactory.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The type Core factory.
+ *
+ * @author sharajava
  */
 public class CoreFactory {
 

File: server/src/main/java/com/alibaba/fescar/server/coordinator/DefaultCore.java
Patch:
@@ -41,6 +41,8 @@
 
 /**
  * The type Default core.
+ *
+ * @author sharajava
  */
 public class DefaultCore implements Core {
 

File: server/src/main/java/com/alibaba/fescar/server/lock/DefaultLockManagerImpl.java
Patch:
@@ -32,6 +32,8 @@
 
 /**
  * The type Default lock manager.
+ *
+ * @author sharajava
  */
 public class DefaultLockManagerImpl implements LockManager {
 

File: server/src/main/java/com/alibaba/fescar/server/lock/LockManager.java
Patch:
@@ -21,6 +21,8 @@
 
 /**
  * The interface Lock manager.
+ *
+ * @author sharajava
  */
 public interface LockManager {
 

File: server/src/main/java/com/alibaba/fescar/server/lock/LockManagerFactory.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The type Lock manager factory.
+ *
+ * @author sharajava
  */
 public class LockManagerFactory {
 

File: server/src/main/java/com/alibaba/fescar/server/session/AbstractSessionManager.java
Patch:
@@ -33,6 +33,8 @@
 
 /**
  * The type Abstract session manager.
+ *
+ * @author sharajava
  */
 public abstract class AbstractSessionManager implements SessionManager, SessionLifecycleListener {
 

File: server/src/main/java/com/alibaba/fescar/server/session/BranchSession.java
Patch:
@@ -30,6 +30,8 @@
 
 /**
  * The type Branch session.
+ *
+ * @author sharajava
  */
 public class BranchSession implements Lockable, Comparable<BranchSession>, SessionStorable {
 

File: server/src/main/java/com/alibaba/fescar/server/session/DefaultSessionManager.java
Patch:
@@ -24,6 +24,8 @@
 
 /**
  * The type Default session manager.
+ *
+ * @author sharajava
  */
 public class DefaultSessionManager extends AbstractSessionManager {
 

File: server/src/main/java/com/alibaba/fescar/server/session/FileBasedSessionManager.java
Patch:
@@ -33,6 +33,8 @@
 
 /**
  * The type File based session manager.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class FileBasedSessionManager extends AbstractSessionManager implements Reloadable {
 

File: server/src/main/java/com/alibaba/fescar/server/session/GlobalSession.java
Patch:
@@ -29,6 +29,8 @@
 
 /**
  * The type Global session.
+ *
+ * @author sharajava
  */
 public class GlobalSession implements SessionLifecycle, SessionStorable {
 

File: server/src/main/java/com/alibaba/fescar/server/session/Lockable.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The interface Lockable.
+ *
+ * @author sharajava
  */
 public interface Lockable {
 

File: server/src/main/java/com/alibaba/fescar/server/session/Reloadable.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * Service contains states which can be reloaded.
+ *
+ * @author sharajava
  */
 public interface Reloadable {
 

File: server/src/main/java/com/alibaba/fescar/server/session/SessionHelper.java
Patch:
@@ -23,6 +23,8 @@
 
 /**
  * The type Session helper.
+ *
+ * @author sharajava
  */
 public class SessionHelper {
 

File: server/src/main/java/com/alibaba/fescar/server/session/SessionHolder.java
Patch:
@@ -30,6 +30,8 @@
 
 /**
  * The type Session holder.
+ *
+ * @author sharajava
  */
 public class SessionHolder {
 

File: server/src/main/java/com/alibaba/fescar/server/session/SessionLifecycle.java
Patch:
@@ -22,6 +22,8 @@
 
 /**
  * The interface Session lifecycle.
+ *
+ * @author sharajava
  */
 public interface SessionLifecycle {
 

File: server/src/main/java/com/alibaba/fescar/server/session/SessionLifecycleListener.java
Patch:
@@ -22,6 +22,8 @@
 
 /**
  * The interface Session lifecycle listener.
+ *
+ * @author sharajava
  */
 public interface SessionLifecycleListener {
 

File: server/src/main/java/com/alibaba/fescar/server/session/SessionManager.java
Patch:
@@ -25,6 +25,8 @@
 
 /**
  * The interface Session manager.
+ *
+ * @author sharajava
  */
 public interface SessionManager extends SessionLifecycleListener {
 

File: server/src/main/java/com/alibaba/fescar/server/store/FileTransactionStoreManager.java
Patch:
@@ -44,6 +44,8 @@
 
 /**
  * The type File transaction store manager.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class FileTransactionStoreManager implements TransactionStoreManager {
     private static final Logger LOGGER = LoggerFactory.getLogger(FileTransactionStoreManager.class);

File: server/src/main/java/com/alibaba/fescar/server/store/SessionStorable.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The interface Session storable.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public interface SessionStorable {
 

File: server/src/main/java/com/alibaba/fescar/server/store/TransactionStoreManager.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The interface Transaction store manager.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public interface TransactionStoreManager {
 

File: spring/src/main/java/com/alibaba/fescar/spring/annotation/GlobalTransactionalInterceptor.java
Patch:
@@ -18,8 +18,8 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
-import java.util.concurrent.Callable;
 import java.util.Arrays;
+import java.util.concurrent.Callable;
 
 import com.alibaba.fescar.common.exception.ShouldNeverHappenException;
 import com.alibaba.fescar.common.util.StringUtils;
@@ -39,6 +39,8 @@
 
 /**
  * The type Global transactional interceptor.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class GlobalTransactionalInterceptor implements MethodInterceptor {
 

File: test/src/main/java/com/alibaba/fescar/test/LocalTransactionWithGlobalLockDataSourceBasicTest.java
Patch:
@@ -36,6 +36,8 @@
 
 /**
  * The type Data source basic test.
+ *
+ * @author fescar
  */
 @Ignore
 public class LocalTransactionWithGlobalLockDataSourceBasicTest {

File: test/src/main/java/com/alibaba/fescar/test/client/AppTest.java
Patch:
@@ -29,6 +29,8 @@
 
 /**
  * The type App test.
+ *
+ * @author sharajava
  */
 public class AppTest {
 

File: test/src/main/java/com/alibaba/fescar/test/common/ApplicationKeeper.java
Patch:
@@ -25,6 +25,8 @@
 
 /**
  * The type Application keeper.
+ *
+ * @author sharajava
  */
 public class ApplicationKeeper {
 

File: tm/src/main/java/com/alibaba/fescar/tm/DefaultTransactionManager.java
Patch:
@@ -37,6 +37,8 @@
 
 /**
  * The type Default transaction manager.
+ *
+ * @author sharajava
  */
 public class DefaultTransactionManager implements TransactionManager {
 

File: tm/src/main/java/com/alibaba/fescar/tm/TMClient.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * The type Tm client.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class TMClient {
 

File: tm/src/main/java/com/alibaba/fescar/tm/api/DefaultGlobalTransaction.java
Patch:
@@ -28,6 +28,8 @@
 
 /**
  * The type Default global transaction.
+ *
+ * @author sharajava
  */
 public class DefaultGlobalTransaction implements GlobalTransaction {
 

File: tm/src/main/java/com/alibaba/fescar/tm/api/FailureHandler.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * Callback on failure.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public interface FailureHandler {
 

File: tm/src/main/java/com/alibaba/fescar/tm/api/GlobalTransaction.java
Patch:
@@ -21,6 +21,8 @@
 
 /**
  * Global transaction.
+ *
+ * @author sharajava
  */
 public interface GlobalTransaction {
 

File: tm/src/main/java/com/alibaba/fescar/tm/api/GlobalTransactionContext.java
Patch:
@@ -22,6 +22,8 @@
 
 /**
  * GlobalTransaction API
+ *
+ * @author sharajava
  */
 public class GlobalTransactionContext {
 

File: tm/src/main/java/com/alibaba/fescar/tm/api/GlobalTransactionRole.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * Role of current thread involve in a global transaction.
+ *
+ * @author sharajava
  */
 public enum GlobalTransactionRole {
 

File: tm/src/main/java/com/alibaba/fescar/tm/api/TransactionalExecutor.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * Callback for executing business logic in a global transaction.
+ *
+ * @author sharajava
  */
 public interface TransactionalExecutor {
 

File: core/src/main/java/com/alibaba/fescar/core/rpc/ChannelManager.java
Patch:
@@ -334,7 +334,7 @@ public static Channel getChannel(String resourceId, String clientId) {
         ConcurrentMap<String, ConcurrentMap<String, ConcurrentMap<Integer,
             RpcContext>>> applicationIdMap = RM_CHANNELS.get(resourceId);
 
-        if (targetApplicationId == null || applicationIdMap.isEmpty()) {
+        if (targetApplicationId == null || applicationIdMap == null ||  applicationIdMap.isEmpty()) {
             if (LOGGER.isInfoEnabled()) {
                 LOGGER.info("No channel is available for resource[" + resourceId + "]");
             }

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/TmRpcClient.java
Patch:
@@ -46,7 +46,6 @@
 import com.alibaba.fescar.core.rpc.netty.NettyPoolKey.TransactionRole;
 import com.alibaba.fescar.discovery.loadbalance.LoadBalanceFactory;
 import com.alibaba.fescar.discovery.registry.RegistryFactory;
-import com.alibaba.nacos.client.naming.utils.CollectionUtils;
 
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandler.Sharable;
@@ -228,8 +227,8 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {
             }
             if (idleStateEvent == IdleStateEvent.WRITER_IDLE_STATE_EVENT) {
                 try {
-                    if (LOGGER.isInfoEnabled()) {
-                        LOGGER.info("will send ping msg,channel" + ctx.channel());
+                    if (LOGGER.isDebugEnabled()) {
+                        LOGGER.debug("will send ping msg,channel" + ctx.channel());
                     }
                     sendRequest(ctx.channel(), HeartbeatMessage.PING);
                 } catch (Throwable throwable) {

File: discovery/src/main/java/com/alibaba/fescar/discovery/registry/RedisRegistryServiceImpl.java
Patch:
@@ -68,7 +68,7 @@ public class RedisRegistryServiceImpl implements RegistryService<RedisListener>
         new NamedThreadFactory("RedisRegistryService", 1));
 
     private RedisRegistryServiceImpl() {
-        Configuration fescarConfig = ConfigurationFactory.getInstance();
+        Configuration fescarConfig = ConfigurationFactory.FILE_INSTANCE;
         this.clusterName = fescarConfig.getConfig(REDIS_FILEKEY_PREFIX + REGISTRY_CLUSTER_KEY, DEFAULT_CLUSTER);
         String password = fescarConfig.getConfig(getRedisPasswordFileKey());
         String serverAddr = fescarConfig.getConfig(getRedisAddrFileKey());

File: core/src/main/java/com/alibaba/fescar/core/constants/ConfigurationKeys.java
Patch:
@@ -14,10 +14,12 @@
  *  limitations under the License.
  */
 
-package com.alibaba.fescar.core.service;
+package com.alibaba.fescar.core.constants;
 
 /**
  * The type Configuration keys.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class ConfigurationKeys {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/Version.java
Patch:
@@ -33,7 +33,7 @@ public class Version {
     /**
      * The constant CURRENT.
      */
-    public static final String CURRENT = "0.4.0";
+    public static final String CURRENT = "0.4.1";
 
     /**
      * The constant VERSION_MAP.

File: core/src/main/java/com/alibaba/fescar/core/rpc/ClientType.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The enum Client type.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public enum ClientType {
 

File: core/src/main/java/com/alibaba/fescar/core/rpc/TransactionMessageHandler.java
Patch:
@@ -21,6 +21,8 @@
 
 /**
  * To handle the received RPC message on upper level.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public interface TransactionMessageHandler {
 

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/NettyClientConfig.java
Patch:
@@ -22,6 +22,8 @@
 
 /**
  * The type Netty client config.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class NettyClientConfig extends NettyBaseConfig {
 

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/TmRpcClient.java
Patch:
@@ -35,6 +35,7 @@
 import com.alibaba.fescar.common.util.NetUtil;
 import com.alibaba.fescar.config.Configuration;
 import com.alibaba.fescar.config.ConfigurationFactory;
+import com.alibaba.fescar.core.constants.ConfigurationKeys;
 import com.alibaba.fescar.core.context.RootContext;
 import com.alibaba.fescar.core.protocol.AbstractMessage;
 import com.alibaba.fescar.core.protocol.HeartbeatMessage;
@@ -43,7 +44,6 @@
 import com.alibaba.fescar.core.protocol.ResultCode;
 import com.alibaba.fescar.core.protocol.transaction.GlobalBeginResponse;
 import com.alibaba.fescar.core.rpc.netty.NettyPoolKey.TransactionRole;
-import com.alibaba.fescar.core.service.ConfigurationKeys;
 import com.alibaba.fescar.discovery.loadbalance.LoadBalanceFactory;
 import com.alibaba.fescar.discovery.registry.RegistryFactory;
 import com.alibaba.nacos.client.naming.utils.CollectionUtils;

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/AsyncWorker.java
Patch:
@@ -40,7 +40,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import static com.alibaba.fescar.core.service.ConfigurationKeys.CLIENT_ASYNC_COMMIT_BUFFER_LIMIT;
+import static com.alibaba.fescar.core.constants.ConfigurationKeys.CLIENT_ASYNC_COMMIT_BUFFER_LIMIT;
 
 /**
  * The type Async worker.

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/LockRetryController.java
Patch:
@@ -17,7 +17,7 @@
 package com.alibaba.fescar.rm.datasource.exec;
 
 import com.alibaba.fescar.config.ConfigurationFactory;
-import com.alibaba.fescar.core.service.ConfigurationKeys;
+import com.alibaba.fescar.core.constants.ConfigurationKeys;
 
 /**
  * The type Lock retry controller.

File: server/src/main/java/com/alibaba/fescar/server/session/FileBasedSessionManager.java
Patch:
@@ -24,8 +24,8 @@
 
 import com.alibaba.fescar.common.exception.ShouldNeverHappenException;
 import com.alibaba.fescar.config.ConfigurationFactory;
+import com.alibaba.fescar.core.constants.ConfigurationKeys;
 import com.alibaba.fescar.core.model.GlobalStatus;
-import com.alibaba.fescar.core.service.ConfigurationKeys;
 import com.alibaba.fescar.server.store.FileTransactionStoreManager;
 import com.alibaba.fescar.server.store.SessionStorable;
 import com.alibaba.fescar.server.store.TransactionStoreManager;

File: common/src/main/java/com/alibaba/fescar/common/exception/NotSupportYetException.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The type Not support yet exception.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class NotSupportYetException extends RuntimeException {
 

File: common/src/main/java/com/alibaba/fescar/common/exception/ShouldNeverHappenException.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * The type Should never happen exception.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class ShouldNeverHappenException extends RuntimeException {
 

File: common/src/main/java/com/alibaba/fescar/common/thread/RejectedPolicies.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Policies for RejectedExecutionHandler
  *
- * Created by guoyao on 2019/2/26.
+ * @author guoyao
  */
 public final class RejectedPolicies {
 

File: common/src/main/java/com/alibaba/fescar/common/util/BlobUtils.java
Patch:
@@ -26,6 +26,8 @@
 
 /**
  * The type Blob utils.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class BlobUtils {
 

File: common/src/main/java/com/alibaba/fescar/common/util/StringUtils.java
Patch:
@@ -26,6 +26,8 @@
 
 /**
  * The type String utils.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class StringUtils {
 

File: config/src/main/java/com/alibaba/fescar/config/ConfigType.java
Patch:
@@ -16,9 +16,6 @@
 
 package com.alibaba.fescar.config;
 
-
-import com.alibaba.fescar.common.exception.NotSupportYetException;
-
 /**
  * The enum Config type.
  *

File: config/src/main/java/com/alibaba/fescar/config/ConfigurationFactory.java
Patch:
@@ -79,7 +79,7 @@ public static Configuration getInstance() {
                 break;
             case ZK:
                 try {
-                    configuration = new ZKConfiguration();
+                    configuration = new ZookeeperConfiguration();
                 } catch (Exception e) {
                     throw new RuntimeException(e);
                 }

File: config/src/main/java/com/alibaba/fescar/config/ZookeeperConfiguration.java
Patch:
@@ -40,8 +40,8 @@
  * @author crazier.huang
  * @date 2019/2/18
  */
-public class ZKConfiguration extends AbstractConfiguration<IZkDataListener> {
-    private final static Logger LOGGER = LoggerFactory.getLogger(ZKConfiguration.class);
+public class ZookeeperConfiguration extends AbstractConfiguration<IZkDataListener> {
+    private final static Logger LOGGER = LoggerFactory.getLogger(ZookeeperConfiguration.class);
 
     private static final String REGISTRY_TYPE = "zk";
     private static final String ZK_PATH_SPLIT_CHAR = "/";
@@ -59,7 +59,7 @@ public class ZKConfiguration extends AbstractConfiguration<IZkDataListener> {
         new NamedThreadFactory("ZKConfigThread", THREAD_POOL_NUM));
     private static volatile ZkClient zkClient;
 
-    public ZKConfiguration() {
+    public ZookeeperConfiguration() {
         if (zkClient == null) {
             zkClient = new ZkClient(FILE_CONFIG.getConfig(FILE_CONFIG_KEY_PREFIX + SERVER_ADDR_KEY),
                 FILE_CONFIG.getInt(FILE_CONFIG_KEY_PREFIX + SESSION_TIME_OUT_KEY),

File: core/src/main/java/com/alibaba/fescar/core/protocol/Version.java
Patch:
@@ -25,13 +25,15 @@
 
 /**
  * The type Version.
+ *
+ * @author jimin.jm @alibaba-inc.com
  */
 public class Version {
 
     /**
      * The constant CURRENT.
      */
-    public static final String CURRENT = "0.3.1";
+    public static final String CURRENT = "0.4.0";
 
     /**
      * The constant VERSION_MAP.

File: discovery/src/main/java/com/alibaba/fescar/discovery/registry/RegistryFactory.java
Patch:
@@ -62,7 +62,7 @@ public static RegistryService getInstance() {
                 registryService = FileRegistryServiceImpl.getInstance();
                 break;
             case ZK:
-                registryService = ZKRegisterServiceImpl.getInstance();
+                registryService = ZookeeperRegisterServiceImpl.getInstance();
                 break;
             default:
                 throw new NotSupportYetException("not support register type:" + registryType);

File: tm/src/main/java/com/alibaba/fescar/tm/api/transaction/TransactionHookManager.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.fescar.tm.api.transaction;
 
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;

File: tm/src/test/java/com/alibaba/fescar/tm/api/TransactionTemplateTest.java
Patch:
@@ -20,6 +20,7 @@
 import com.alibaba.fescar.tm.DefaultTransactionManager;
 import com.alibaba.fescar.tm.api.transaction.TransactionHook;
 import com.alibaba.fescar.tm.api.transaction.TransactionHookManager;
+
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -38,7 +39,6 @@ public class TransactionTemplateTest {
     private static final String DEFAULT_NAME = "test";
     private static final int DEFAULT_TIME_OUT = 30000;
 
-
     @Before
     public void init() throws Exception {
         TransactionManager transactionManager = mock(TransactionManager.class);
@@ -54,7 +54,6 @@ public void assertHooks() {
         assertThat(TransactionHookManager.getHooks()).isEmpty();
     }
 
-
     @Test
     public void testTransactionCommitHook() throws Exception {
         TransactionHook transactionHook = Mockito.mock(TransactionHook.class);

File: tm/src/test/java/com/alibaba/fescar/tm/api/transaction/TransactionHookManagerTest.java
Patch:
@@ -28,7 +28,6 @@
  */
 public class TransactionHookManagerTest {
 
-
     @After
     public void clear() {
         TransactionHookManager.clear();
@@ -50,7 +49,6 @@ public void testGetHooks() {
         assertThat(TransactionHookManager.getHooks()).isNotEmpty();
     }
 
-
     @Test
     public void testClear() {
         assertThat(TransactionHookManager.getHooks()).isEmpty();
@@ -60,5 +58,4 @@ public void testClear() {
         assertThat(TransactionHookManager.getHooks()).isEmpty();
     }
 
-
 }

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/AbstractPreparedStatementProxy.java
Patch:
@@ -209,6 +209,7 @@ public void setAsciiStream(int parameterIndex, InputStream x, int length) throws
 
     }
 
+    @Deprecated
     @Override
     public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
         setParamByIndex(parameterIndex, x);

File: server/src/main/java/com/alibaba/fescar/server/session/FileBasedSessionManager.java
Patch:
@@ -51,6 +51,7 @@ public FileBasedSessionManager(String name, String sessionStoreFilePath) throws
         transactionStoreManager = new FileTransactionStoreManager(sessionStoreFilePath + name, this);
     }
 
+    @Override
     public void reload() {
         restoreSessions();
         washSessions();

File: config/src/test/java/com/alibaba/fescar/config/ConfigTypeTest.java
Patch:
@@ -58,7 +58,7 @@ public void testGetTypeWithApollo() {
     /**
      * Test get type with not support.
      */
-    @Test(expected = NotSupportYetException.class)
+    @Test(expected = IllegalArgumentException.class)
     public void testGetTypeWithNotSupport() {
         ConfigType.getType("none");
     }

File: discovery/src/main/java/com/alibaba/fescar/discovery/registry/EurekaRegistryServiceImpl.java
Patch:
@@ -143,7 +143,7 @@ public void onEvent(EurekaEvent event) {
             });
         }
 
-        return Lists.newArrayList(CLUSTER_ADDRESS_MAP.get(clusterName));
+        return Lists.newArrayList(CLUSTER_ADDRESS_MAP.get(clusterName.toUpperCase()));
     }
 
     private static void refreshCluster() {
@@ -226,7 +226,7 @@ private static void assertEureka() {
     }
 
     private static String getInstanceId() {
-        return String.format("%s/%s:%d", instanceConfig.getAppname(), instanceConfig.getIpAddress(),
+        return String.format("%s:%s:%d", instanceConfig.getAppname(), instanceConfig.getIpAddress(),
             instanceConfig.getNonSecurePort());
     }
 

File: common/src/main/java/com/alibaba/fescar/common/util/NetUtil.java
Patch:
@@ -202,6 +202,7 @@ private static boolean isValidAddress(InetAddress address) {
             return false;
         }
         String name = address.getHostAddress();
-        return (name != null && !ANY_HOST.equals(name) && !LOCALHOST.equals(name) && IP_PATTERN.matcher(name).matches());
+        return (name != null && !ANY_HOST.equals(name) && !LOCALHOST.equals(name) && IP_PATTERN.matcher(name)
+            .matches());
     }
 }

File: common/src/test/java/com/alibaba/fescar/common/util/StringUtilsTest.java
Patch:
@@ -19,7 +19,9 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.sql.SQLException;
+
 import javax.sql.rowset.serial.SerialBlob;
+
 import org.junit.Ignore;
 import org.junit.Test;
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/Version.java
Patch:
@@ -31,7 +31,7 @@ public class Version {
     /**
      * The constant CURRENT.
      */
-    public static final String CURRENT = "0.3.0";
+    public static final String CURRENT = "0.3.1";
 
     /**
      * The constant VERSION_MAP.

File: core/src/main/java/com/alibaba/fescar/core/rpc/ChannelManager.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
+
 import com.alibaba.fescar.common.Constants;
 import com.alibaba.fescar.common.exception.FrameworkException;
 import com.alibaba.fescar.common.util.StringUtils;
@@ -30,6 +31,7 @@
 import com.alibaba.fescar.core.protocol.RegisterTMRequest;
 import com.alibaba.fescar.core.protocol.Version;
 import com.alibaba.fescar.core.rpc.netty.NettyPoolKey.TransactionRole;
+
 import io.netty.channel.Channel;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: discovery/src/main/java/com/alibaba/fescar/discovery/registry/FileRegistryServiceImpl.java
Patch:
@@ -19,6 +19,7 @@
 import java.net.InetSocketAddress;
 import java.util.ArrayList;
 import java.util.List;
+
 import com.alibaba.fescar.common.util.StringUtils;
 import com.alibaba.fescar.config.ConfigChangeListener;
 import com.alibaba.fescar.config.Configuration;

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/ConnectionContext.java
Patch:
@@ -16,12 +16,13 @@
 
 package com.alibaba.fescar.rm.datasource;
 
-import com.alibaba.fescar.common.exception.ShouldNeverHappenException;
-import com.alibaba.fescar.rm.datasource.undo.SQLUndoLog;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 
+import com.alibaba.fescar.common.exception.ShouldNeverHappenException;
+import com.alibaba.fescar.rm.datasource.undo.SQLUndoLog;
+
 /**
  * The type Connection context.
  */

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/struct/TableMetaCache.java
Patch:
@@ -23,12 +23,14 @@
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
+
 import com.alibaba.druid.pool.DruidDataSource;
+import com.alibaba.druid.util.StringUtils;
 import com.alibaba.fescar.common.exception.ShouldNeverHappenException;
 import com.alibaba.fescar.core.context.RootContext;
 import com.alibaba.fescar.rm.datasource.AbstractConnectionProxy;
 import com.alibaba.fescar.rm.datasource.DataSourceProxy;
-import com.alibaba.druid.util.StringUtils;
+
 import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
 

File: spring/src/main/java/com/alibaba/fescar/spring/annotation/GlobalTransactionScanner.java
Patch:
@@ -20,13 +20,15 @@
 import java.lang.reflect.Method;
 import java.util.HashSet;
 import java.util.Set;
+
 import com.alibaba.fescar.common.exception.NotSupportYetException;
 import com.alibaba.fescar.common.util.StringUtils;
 import com.alibaba.fescar.config.ConfigurationFactory;
 import com.alibaba.fescar.rm.RMClientAT;
 import com.alibaba.fescar.tm.TMClient;
 import com.alibaba.fescar.tm.api.DefaultFailureHandlerImpl;
 import com.alibaba.fescar.tm.api.FailureHandler;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.aop.Advisor;

File: spring/src/test/java/com/alibaba/fescar/spring/annotation/BusinessProxy.java
Patch:
@@ -16,12 +16,12 @@
 
 package com.alibaba.fescar.spring.annotation;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 public class BusinessProxy implements InvocationHandler {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(BusinessProxy.class);

File: common/src/main/java/com/alibaba/fescar/common/thread/RejectedPolicies.java
Patch:
@@ -21,11 +21,11 @@
 import java.util.concurrent.ThreadPoolExecutor;
 
 /**
- * policys for RejectedExecutionHandler
+ * Policies for RejectedExecutionHandler
  *
  * Created by guoyao on 2019/2/26.
  */
-public final class RejectedPolicys {
+public final class RejectedPolicies {
 
     /**
      * when rejected happened ,add the new task and run the oldest task

File: common/src/main/java/com/alibaba/fescar/common/util/NetUtil.java
Patch:
@@ -36,7 +36,7 @@ public class NetUtil {
     private static final Logger LOGGER = LoggerFactory.getLogger(NetUtil.class);
     private static final String LOCALHOST = "127.0.0.1";
 
-    private static final String ANYHOST = "0.0.0.0";
+    private static final String ANY_HOST = "0.0.0.0";
 
     private static volatile InetAddress LOCAL_ADDRESS = null;
 
@@ -202,6 +202,6 @@ private static boolean isValidAddress(InetAddress address) {
             return false;
         }
         String name = address.getHostAddress();
-        return (name != null && !ANYHOST.equals(name) && !LOCALHOST.equals(name) && IP_PATTERN.matcher(name).matches());
+        return (name != null && !ANY_HOST.equals(name) && !LOCALHOST.equals(name) && IP_PATTERN.matcher(name).matches());
     }
 }

File: common/src/main/java/com/alibaba/fescar/common/util/StringUtils.java
Patch:
@@ -39,7 +39,7 @@ private StringUtils() {
      * @param str the str
      * @return the boolean
      */
-    public static final boolean isEmpty(String str) {
+    public static final boolean isNullOrEmpty(String str) {
         return (str == null) || (str.isEmpty());
     }
 

File: common/src/test/java/com/alibaba/fescar/common/thread/RejectedPoliciesTest.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Created by guoyao on 2019/2/26.
  */
-public class RejectedPolicysTest {
+public class RejectedPoliciesTest {
 
     private final int DEFAULT_CORE_POOL_SIZE = 1;
     private final int DEFAULT_KEEP_ALIVE_TIME = 10;
@@ -48,7 +48,7 @@ public void testRunsOldestTaskPolicy() throws Exception {
                 TimeUnit.MILLISECONDS,
                 new LinkedBlockingQueue(MAX_QUEUE_SIZE),
                 new NamedThreadFactory("OldestRunsPolicy", DEFAULT_CORE_POOL_SIZE),
-                RejectedPolicys.runsOldestTaskPolicy());
+                RejectedPolicies.runsOldestTaskPolicy());
         CountDownLatch downLatch1 = new CountDownLatch(1);
         CountDownLatch downLatch2 = new CountDownLatch(1);
         CountDownLatch downLatch3 = new CountDownLatch(1);

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/TmRpcClient.java
Patch:
@@ -31,7 +31,7 @@
 import com.alibaba.fescar.common.exception.FrameworkErrorCode;
 import com.alibaba.fescar.common.exception.FrameworkException;
 import com.alibaba.fescar.common.thread.NamedThreadFactory;
-import com.alibaba.fescar.common.thread.RejectedPolicys;
+import com.alibaba.fescar.common.thread.RejectedPolicies;
 import com.alibaba.fescar.common.util.NetUtil;
 import com.alibaba.fescar.config.Configuration;
 import com.alibaba.fescar.config.ConfigurationFactory;
@@ -126,7 +126,7 @@ public static TmRpcClient getInstance() {
                         new LinkedBlockingQueue(MAX_QUEUE_SIZE),
                         new NamedThreadFactory(nettyClientConfig.getTmDispatchThreadPrefix(),
                             nettyClientConfig.getClientWorkerThreads()),
-                        RejectedPolicys.runsOldestTaskPolicy());
+                        RejectedPolicies.runsOldestTaskPolicy());
                     instance = new TmRpcClient(nettyClientConfig, null, threadPoolExecutor);
                 }
             }

File: core/src/main/java/com/alibaba/fescar/core/service/ServiceManagerStaticConfigImpl.java
Patch:
@@ -63,7 +63,7 @@ public String[] lookup(String txServiceGroup) {
         }
         String rGroupDataId = ConfigurationKeys.SERVICE_PREFIX + rGroup + ConfigurationKeys.GROUPLIST_POSTFIX;
         String serverListConfig = configuration.getConfig(rGroupDataId);
-        if (StringUtils.isEmpty(serverListConfig)) {
+        if (StringUtils.isNullOrEmpty(serverListConfig)) {
             throw new FrameworkException(InvalidConfiguration);
         }
         serverAddresses = serverListConfig.split(SERVER_NODE_SPLIT_CHAR);

File: discovery/src/main/java/com/alibaba/fescar/discovery/registry/RedisRegistryServiceImpl.java
Patch:
@@ -115,7 +115,7 @@ private RedisRegistryServiceImpl() {
         if (minEvictableIdleTimeMillis > 0) {
             redisConfig.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);
         }
-        if (StringUtils.isEmpty(password)) {
+        if (StringUtils.isNullOrEmpty(password)) {
             jedisPool = new JedisPool(redisConfig, host, port, Protocol.DEFAULT_TIMEOUT, null, db);
         } else {
             jedisPool = new JedisPool(redisConfig, host, port, Protocol.DEFAULT_TIMEOUT, password, db);

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/SelectForUpdateExecutor.java
Patch:
@@ -70,7 +70,7 @@ public Object doExecute(Object... args) throws Throwable {
         } else {
             whereCondition = recognizer.getWhereCondition();
         }
-        if (!StringUtils.isEmpty(whereCondition)) {
+        if (!StringUtils.isNullOrEmpty(whereCondition)) {
             selectSQLAppender.append(" WHERE " + whereCondition);
         }
         selectSQLAppender.append(" FOR UPDATE");

File: server/src/main/java/com/alibaba/fescar/server/lock/DefaultLockManagerImpl.java
Patch:
@@ -57,7 +57,7 @@ public boolean acquireLock(BranchSession branchSession) throws TransactionExcept
         ConcurrentHashMap<Map<String, Long>, Set<String>> bucketHolder = branchSession.getLockHolder();
 
         String lockKey = branchSession.getLockKey();
-        if (StringUtils.isEmpty(lockKey)) {
+        if (StringUtils.isNullOrEmpty(lockKey)) {
             return true;
         }
 

File: spring/src/main/java/com/alibaba/fescar/spring/annotation/GlobalTransactionalInterceptor.java
Patch:
@@ -105,7 +105,7 @@ public int timeout() {
                 @Override
                 public String name() {
                     String name = globalTrxAnno.name();
-                    if (!StringUtils.isEmpty(name)) {
+                    if (!StringUtils.isNullOrEmpty(name)) {
                         return name;
                     }
                     return formatMethod(methodInvocation.getMethod());

File: spring/src/test/java/com/alibaba/fescar/spring/annotation/BusinessImpl.java
Patch:
@@ -20,12 +20,12 @@
 import org.slf4j.LoggerFactory;
 
 public class BusinessImpl implements Business {
-    Logger logger = LoggerFactory.getLogger(BusinessImpl.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(BusinessImpl.class);
 
     @Override
     @GlobalTransactional(timeoutMills = 300000, name = "busi-doBiz")
     public String doBiz(String msg) {
-        logger.info("Business doBiz");
+        LOGGER.info("Business doBiz");
         return "hello " + msg;
     }
 }

File: common/src/main/java/com/alibaba/fescar/common/exception/EurekaRegistryException.java
Patch:
@@ -15,9 +15,9 @@
  */
 package com.alibaba.fescar.common.exception;
 
-
- /**
+/**
  * eureka registry exception
+ *
  * @author: rui_849217@163.com
  * @date: 2018/2/18
  */

File: common/src/test/java/com/alibaba/fescar/common/util/BlobUtilsTest.java
Patch:
@@ -21,6 +21,7 @@
 
 import javax.sql.rowset.serial.SerialBlob;
 
+import org.junit.Ignore;
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -59,6 +60,7 @@ public void testBlob2string() throws SQLException {
      * Test input stream 2 string.
      */
     @Test
+    @Ignore
     public void testInputStream2String() {
         InputStream inputStream = BlobUtilsTest.class.getClassLoader().getResourceAsStream("test.txt");
         assertThat(BlobUtils.inputStream2String(inputStream)).isEqualTo("abc\n"

File: common/src/test/java/com/alibaba/fescar/common/util/StringUtilsTest.java
Patch:
@@ -23,6 +23,7 @@
 
 import javax.sql.rowset.serial.SerialBlob;
 
+import org.junit.Ignore;
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -78,6 +79,7 @@ public void testBlob2string() throws SQLException {
      * Test input stream 2 string.
      */
     @Test
+    @Ignore
     public void testInputStream2String() {
         try {
             InputStream inputStream = StringUtilsTest.class.getClassLoader().getResourceAsStream("test.txt");

File: config/src/main/java/com/alibaba/fescar/config/ConfigType.java
Patch:
@@ -51,7 +51,7 @@ public static ConfigType getType(String name) {
             return Nacos;
         } else if (Apollo.name().equalsIgnoreCase(name)) {
             return Apollo;
-        }else {
+        } else {
             throw new NotSupportYetException("unsupport type:" + name);
         }
     }

File: core/src/main/java/com/alibaba/fescar/core/protocol/Version.java
Patch:
@@ -31,7 +31,7 @@ public class Version {
     /**
      * The constant CURRENT.
      */
-    public static final String CURRENT = "0.2.4";
+    public static final String CURRENT = "0.3.0";
 
     /**
      * The constant VERSION_MAP.

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/ConnectionContext.java
Patch:
@@ -32,11 +32,10 @@ public class ConnectionContext {
     private boolean isGlobalLockRequire;
     private List<String> lockKeysBuffer = new ArrayList<>();
     private List<SQLUndoLog> sqlUndoItemsBuffer = new ArrayList<>();
-    
-    
 
     /**
      * whether requires global lock in this connection
+     *
      * @return
      */
     boolean isGlobalLockRequire() {
@@ -45,6 +44,7 @@ boolean isGlobalLockRequire() {
 
     /**
      * set whether requires global lock in this connection
+     *
      * @param isGlobalLockRequires
      */
     void setGlobalLockRequire(boolean isGlobalLockRequire) {

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/BaseTransactionalExecutor.java
Patch:
@@ -72,12 +72,12 @@ public BaseTransactionalExecutor(StatementProxy<S> statementProxy, StatementCall
 
     @Override
     public Object execute(Object... args) throws Throwable {
-        if(RootContext.inGlobalTransaction()) {
+        if (RootContext.inGlobalTransaction()) {
             String xid = RootContext.getXID();
             statementProxy.getConnectionProxy().bind(xid);
         }
-        
-        if(RootContext.requireGlobalLock()) {
+
+        if (RootContext.requireGlobalLock()) {
             statementProxy.getConnectionProxy().setGlobalLockRequire(true);
         } else {
             statementProxy.getConnectionProxy().setGlobalLockRequire(false);

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/DeleteExecutor.java
Patch:
@@ -29,6 +29,7 @@
 import com.alibaba.fescar.rm.datasource.sql.SQLRecognizer;
 import com.alibaba.fescar.rm.datasource.sql.struct.TableMeta;
 import com.alibaba.fescar.rm.datasource.sql.struct.TableRecords;
+
 import org.apache.commons.lang.StringUtils;
 
 /**
@@ -53,7 +54,7 @@ public DeleteExecutor(StatementProxy statementProxy, StatementCallback statement
 
     @Override
     protected TableRecords beforeImage() throws SQLException {
-        SQLDeleteRecognizer visitor = (SQLDeleteRecognizer) sqlRecognizer;
+        SQLDeleteRecognizer visitor = (SQLDeleteRecognizer)sqlRecognizer;
 
         TableMeta tmeta = getTableMeta(visitor.getTableName());
         List<String> columns = new ArrayList<>();
@@ -72,7 +73,7 @@ protected TableRecords beforeImage() throws SQLException {
         String whereCondition = null;
         ArrayList<Object> paramAppender = new ArrayList<>();
         if (statementProxy instanceof ParametersHolder) {
-            whereCondition = visitor.getWhereCondition((ParametersHolder) statementProxy, paramAppender);
+            whereCondition = visitor.getWhereCondition((ParametersHolder)statementProxy, paramAppender);
         } else {
             whereCondition = visitor.getWhereCondition();
         }

File: spring/src/main/java/com/alibaba/fescar/spring/annotation/GlobalLock.java
Patch:
@@ -24,7 +24,8 @@
 
 /**
  * declare the transaction only execute in single local RM,<br/>
- * but the transaction need to ensure records to update(or select for update) is not in global transaction middle stage<br/>  
+ * but the transaction need to ensure records to update(or select for update) is not in global transaction middle
+ * stage<br/>
  *
  * use this annotation instead of GlobalTransaction in the situation mentioned above will help performance.
  */

File: common/src/main/java/com/alibaba/fescar/common/loader/EnhancedServiceLoader.java
Patch:
@@ -37,8 +37,8 @@
 /**
  * The type Enhanced service loader.
  *
- * @author: jimin.jm @alibaba-inc.com
- * @date: 2018 /10/10
+ * @author jimin.jm @alibaba-inc.com
+ * @date 2018 /10/10
  */
 public class EnhancedServiceLoader {
     private static final Logger LOGGER = LoggerFactory.getLogger(EnhancedServiceLoader.class);

File: core/src/main/java/com/alibaba/fescar/core/exception/AbstractExceptionHandler.java
Patch:
@@ -49,7 +49,8 @@ public interface Callback<T extends AbstractTransactionRequest, S extends Abstra
      * @param request  the request
      * @param response the response
      */
-    public void exceptionHandleTemplate(Callback callback, AbstractTransactionRequest request, AbstractTransactionResponse response) {
+    public void exceptionHandleTemplate(Callback callback, AbstractTransactionRequest request,
+                                        AbstractTransactionResponse response) {
         try {
             callback.execute(request, response);
             response.setResultCode(ResultCode.Success);

File: core/src/main/java/com/alibaba/fescar/core/exception/TransactionExceptionCode.java
Patch:
@@ -131,7 +131,7 @@ public enum TransactionExceptionCode {
      * @return the transaction exception code
      */
     public static TransactionExceptionCode get(byte ordinal) {
-        return get((int) ordinal);
+        return get((int)ordinal);
     }
 
     /**

File: core/src/main/java/com/alibaba/fescar/core/model/BranchType.java
Patch:
@@ -40,7 +40,7 @@ public enum BranchType {
      * @return the branch type
      */
     public static BranchType get(byte ordinal) {
-        return get((int) ordinal);
+        return get((int)ordinal);
     }
 
     /**

File: core/src/main/java/com/alibaba/fescar/core/model/ResourceManager.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Resource Manager: common behaviors.
  */
-public interface ResourceManager extends ResourceManagerInbound, ResourceManagerOutbound{
+public interface ResourceManager extends ResourceManagerInbound, ResourceManagerOutbound {
 
     /**
      * Register a Resource to be managed by Resource Manager.

File: core/src/main/java/com/alibaba/fescar/core/model/TransactionManager.java
Patch:
@@ -36,7 +36,8 @@ public interface TransactionManager {
      * @throws TransactionException Any exception that fails this will be wrapped with TransactionException and thrown
      * out.
      */
-    String begin(String applicationId, String transactionServiceGroup, String name, int timeout) throws TransactionException;
+    String begin(String applicationId, String transactionServiceGroup, String name, int timeout)
+        throws TransactionException;
 
     /**
      * Global commit.

File: core/src/main/java/com/alibaba/fescar/core/protocol/ResultCode.java
Patch:
@@ -40,7 +40,7 @@ public enum ResultCode {
      * @return the result code
      */
     public static ResultCode get(byte ordinal) {
-        return get((int) ordinal);
+        return get((int)ordinal);
     }
 
     /**

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/AbstractBranchEndResponse.java
Patch:
@@ -53,7 +53,7 @@ public void setBranchStatus(BranchStatus branchStatus) {
     @Override
     protected void doEncode() {
         super.doEncode();
-        byteBuffer.put((byte) branchStatus.getCode());
+        byteBuffer.put((byte)branchStatus.getCode());
     }
 
     @Override

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/AbstractGlobalEndRequest.java
Patch:
@@ -77,12 +77,12 @@ public byte[] encode() {
         byteBuffer.putLong(this.transactionId);
         if (this.extraData != null) {
             byte[] bs = extraData.getBytes(UTF8);
-            byteBuffer.putShort((short) bs.length);
+            byteBuffer.putShort((short)bs.length);
             if (bs.length > 0) {
                 byteBuffer.put(bs);
             }
         } else {
-            byteBuffer.putShort((short) 0);
+            byteBuffer.putShort((short)0);
         }
 
         byteBuffer.flip();

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/AbstractGlobalEndResponse.java
Patch:
@@ -51,7 +51,7 @@ public void setGlobalStatus(GlobalStatus globalStatus) {
     @Override
     protected void doEncode() {
         super.doEncode();
-        byteBuffer.put((byte) globalStatus.getCode());
+        byteBuffer.put((byte)globalStatus.getCode());
     }
 
     @Override

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/AbstractTransactionResponse.java
Patch:
@@ -51,7 +51,7 @@ public void setTransactionExceptionCode(TransactionExceptionCode transactionExce
     @Override
     protected void doEncode() {
         super.doEncode();
-        byteBuffer.put((byte) transactionExceptionCode.ordinal());
+        byteBuffer.put((byte)transactionExceptionCode.ordinal());
     }
 
     @Override

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/BranchRegisterRequest.java
Patch:
@@ -127,16 +127,16 @@ public byte[] encode() {
         // 1. Transaction Id
         byteBuffer.putLong(this.transactionId);
         // 2. Branch Type
-        byteBuffer.put((byte) this.branchType.ordinal());
+        byteBuffer.put((byte)this.branchType.ordinal());
         // 3. Resource Id
         if (this.resourceId != null) {
             byte[] bs = resourceId.getBytes(UTF8);
-            byteBuffer.putShort((short) bs.length);
+            byteBuffer.putShort((short)bs.length);
             if (bs.length > 0) {
                 byteBuffer.put(bs);
             }
         } else {
-            byteBuffer.putShort((short) 0);
+            byteBuffer.putShort((short)0);
         }
 
         // 4. Lock Key

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/BranchRegisterResponse.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.alibaba.fescar.core.protocol.transaction;
 
-import com.alibaba.fescar.core.protocol.AbstractMessage;
-
 import java.io.Serializable;
 import java.nio.ByteBuffer;
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/BranchReportRequest.java
Patch:
@@ -147,16 +147,16 @@ public byte[] encode() {
         // 2. Branch Id
         byteBuffer.putLong(this.branchId);
         // 3. Branch Status
-        byteBuffer.put((byte) this.status.getCode());
+        byteBuffer.put((byte)this.status.getCode());
         // 4. Resource Id
         if (this.resourceId != null) {
             byte[] bs = resourceId.getBytes(UTF8);
-            byteBuffer.putShort((short) bs.length);
+            byteBuffer.putShort((short)bs.length);
             if (bs.length > 0) {
                 byteBuffer.put(bs);
             }
         } else {
-            byteBuffer.putShort((short) 0);
+            byteBuffer.putShort((short)0);
         }
 
         // 5. Application Data

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/GlobalBeginRequest.java
Patch:
@@ -80,12 +80,12 @@ public byte[] encode() {
 
         if (this.transactionName != null) {
             byte[] bs = transactionName.getBytes(UTF8);
-            byteBuffer.putShort((short) bs.length);
+            byteBuffer.putShort((short)bs.length);
             if (bs.length > 0) {
                 byteBuffer.put(bs);
             }
         } else {
-            byteBuffer.putShort((short) 0);
+            byteBuffer.putShort((short)0);
         }
 
         byteBuffer.flip();

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/GlobalLockQueryResponse.java
Patch:
@@ -51,7 +51,7 @@ public short getTypeCode() {
     @Override
     protected void doEncode() {
         super.doEncode();
-        byteBuffer.putShort((short) (lockable ? 1 : 0));
+        byteBuffer.putShort((short)(lockable ? 1 : 0));
     }
 
     @Override

File: core/src/main/java/com/alibaba/fescar/core/rpc/ClientType.java
Patch:
@@ -40,7 +40,7 @@ public enum ClientType {
      * @return the client type
      */
     public static ClientType get(byte ordinal) {
-        return get((int) ordinal);
+        return get((int)ordinal);
     }
 
     /**

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/NettyClientConfig.java
Patch:
@@ -17,6 +17,7 @@
 package com.alibaba.fescar.core.rpc.netty;
 
 import com.alibaba.fescar.core.rpc.netty.NettyPoolKey.TransactionRole;
+
 import io.netty.channel.Channel;
 
 /**

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/AbstractStatementProxy.java
Patch:
@@ -55,7 +55,8 @@ public abstract class AbstractStatementProxy<T extends Statement> implements Sta
      * @param targetSQL       the target sql
      * @throws SQLException the sql exception
      */
-    public AbstractStatementProxy(AbstractConnectionProxy connectionProxy, T targetStatement, String targetSQL) throws SQLException {
+    public AbstractStatementProxy(AbstractConnectionProxy connectionProxy, T targetStatement, String targetSQL)
+        throws SQLException {
         this.connectionProxy = connectionProxy;
         this.targetStatement = targetStatement;
         this.targetSQL = targetSQL;

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/AbstractDMLBaseExecutor.java
Patch:
@@ -44,7 +44,8 @@ public abstract class AbstractDMLBaseExecutor<T, S extends Statement> extends Ba
      * @param statementCallback the statement callback
      * @param sqlRecognizer     the sql recognizer
      */
-    public AbstractDMLBaseExecutor(StatementProxy<S> statementProxy, StatementCallback<T, S> statementCallback, SQLRecognizer sqlRecognizer) {
+    public AbstractDMLBaseExecutor(StatementProxy<S> statementProxy, StatementCallback<T, S> statementCallback,
+                                   SQLRecognizer sqlRecognizer) {
         super(statementProxy, statementCallback, sqlRecognizer);
     }
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/ExecuteTemplate.java
Patch:
@@ -101,7 +101,7 @@ public static <T, S extends Statement> T execute(SQLRecognizer sqlRecognizer,
 
         } catch (Throwable ex) {
             if (ex instanceof SQLException) {
-                throw (SQLException) ex;
+                throw (SQLException)ex;
             } else {
                 // Turn everything into SQLException
                 new SQLException(ex);

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/InsertExecutor.java
Patch:
@@ -49,7 +49,8 @@ public class InsertExecutor<T, S extends Statement> extends AbstractDMLBaseExecu
      * @param statementCallback the statement callback
      * @param sqlRecognizer     the sql recognizer
      */
-    public InsertExecutor(StatementProxy statementProxy, StatementCallback statementCallback, SQLRecognizer sqlRecognizer) {
+    public InsertExecutor(StatementProxy statementProxy, StatementCallback statementCallback,
+                          SQLRecognizer sqlRecognizer) {
         super(statementProxy, statementCallback, sqlRecognizer);
     }
 
@@ -71,7 +72,7 @@ protected TableRecords afterImage(TableRecords beforeImage) throws SQLException
             for (int paramIdx = 0; paramIdx < insertColumns.size(); paramIdx++) {
                 if (insertColumns.get(paramIdx).equalsIgnoreCase(pk)) {
                     if (statementProxy instanceof PreparedStatementProxy) {
-                        pkValues = ((PreparedStatementProxy) statementProxy).getParamsByIndex(paramIdx);
+                        pkValues = ((PreparedStatementProxy)statementProxy).getParamsByIndex(paramIdx);
                     } else {
                         List<List<Object>> insertRows = recogizier.getInsertRows();
                         pkValues = new ArrayList<>(insertRows.size());

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/UpdateExecutor.java
Patch:
@@ -46,7 +46,8 @@ public class UpdateExecutor<T, S extends Statement> extends AbstractDMLBaseExecu
      * @param statementCallback the statement callback
      * @param sqlRecognizer     the sql recognizer
      */
-    public UpdateExecutor(StatementProxy statementProxy, StatementCallback statementCallback, SQLRecognizer sqlRecognizer) {
+    public UpdateExecutor(StatementProxy statementProxy, StatementCallback statementCallback,
+                          SQLRecognizer sqlRecognizer) {
         super(statementProxy, statementCallback, sqlRecognizer);
     }
 
@@ -88,7 +89,7 @@ protected TableRecords beforeImage() throws SQLException {
                 rs = st.executeQuery(selectSQL);
             } else {
                 ps = statementProxy.getConnection().prepareStatement(selectSQL);
-                for (int i = 0; i< paramAppender.size(); i++) {
+                for (int i = 0; i < paramAppender.size(); i++) {
                     ps.setObject(i + 1, paramAppender.get(i));
                 }
                 rs = ps.executeQuery();

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/SQLRecognizer.java
Patch:
@@ -43,7 +43,7 @@ public interface SQLRecognizer {
      * TableRecords name should be 'user' for this SQL, without alias 'u'.
      *
      * @return table name.
-     * @see #getTableAlias() #getTableAlias()
+     * @see #getTableAlias() #getTableAlias()#getTableAlias()
      */
     String getTableName();
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/SQLType.java
Patch:
@@ -215,7 +215,7 @@ public enum SQLType {
 
     private int i;
 
-    private SQLType(int i){
+    private SQLType(int i) {
         this.i = i;
     }
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/druid/MySQLDeleteRecognizer.java
Patch:
@@ -44,7 +44,7 @@ public class MySQLDeleteRecognizer extends BaseRecognizer implements SQLDeleteRe
      */
     public MySQLDeleteRecognizer(String originalSQL, SQLStatement ast) {
         super(originalSQL);
-        this.ast = (MySqlDeleteStatement) ast;
+        this.ast = (MySqlDeleteStatement)ast;
     }
 
     @Override
@@ -90,7 +90,7 @@ public boolean visit(SQLVariantRefExpr x) {
                 return super.visit(x);
             }
         };
-        visitor.visit((SQLBinaryOpExpr) where);
+        visitor.visit((SQLBinaryOpExpr)where);
         return sb.toString();
     }
 
@@ -102,7 +102,7 @@ public String getWhereCondition() {
         }
         StringBuffer sb = new StringBuffer();
         MySqlOutputVisitor visitor = new MySqlOutputVisitor(sb);
-        visitor.visit((SQLBinaryOpExpr) where);
+        visitor.visit((SQLBinaryOpExpr)where);
         return sb.toString();
     }
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/druid/MySQLInsertRecognizer.java
Patch:
@@ -46,7 +46,7 @@ public class MySQLInsertRecognizer extends BaseRecognizer implements SQLInsertRe
      */
     public MySQLInsertRecognizer(String originalSQL, SQLStatement ast) {
         super(originalSQL);
-        this.ast = (MySqlInsertStatement) ast;
+        this.ast = (MySqlInsertStatement)ast;
     }
 
     @Override

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/undo/AbstractUndoExecutor.java
Patch:
@@ -86,7 +86,7 @@ public void executeOn(Connection conn) throws SQLException {
 
         } catch (Exception ex) {
             if (ex instanceof SQLException) {
-                throw (SQLException) ex;
+                throw (SQLException)ex;
             } else {
                 throw new SQLException(ex);
             }
@@ -103,7 +103,8 @@ public void executeOn(Connection conn) throws SQLException {
      * @param pkValue    the pk value
      * @throws SQLException the sql exception
      */
-    protected void undoPrepare(PreparedStatement undoPST, ArrayList<Field> undoValues, Field pkValue) throws SQLException {
+    protected void undoPrepare(PreparedStatement undoPST, ArrayList<Field> undoValues, Field pkValue)
+        throws SQLException {
         int undoIndex = 0;
         for (Field undoValue : undoValues) {
             undoIndex++;

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/undo/UndoExecutorFactory.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.alibaba.fescar.rm.datasource.undo;
 
-
 import com.alibaba.druid.util.JdbcConstants;
 import com.alibaba.fescar.common.exception.NotSupportYetException;
 import com.alibaba.fescar.common.exception.ShouldNeverHappenException;

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/undo/mysql/MySQLUndoDeleteExecutor.java
Patch:
@@ -28,7 +28,6 @@
 import com.alibaba.fescar.rm.datasource.undo.KeywordChecker;
 import com.alibaba.fescar.rm.datasource.undo.KeywordCheckerFactory;
 import com.alibaba.fescar.rm.datasource.undo.SQLUndoLog;
-import com.alibaba.fescar.rm.datasource.undo.mysql.keyword.MySQLKeywordChecker;
 
 /**
  * The type My sql undo delete executor.
@@ -46,7 +45,7 @@ public MySQLUndoDeleteExecutor(SQLUndoLog sqlUndoLog) {
 
     @Override
     protected String buildUndoSQL() {
-        KeywordChecker keywordChecker= KeywordCheckerFactory.getKeywordChecker(JdbcConstants.MYSQL);
+        KeywordChecker keywordChecker = KeywordCheckerFactory.getKeywordChecker(JdbcConstants.MYSQL);
         TableRecords beforeImage = sqlUndoLog.getBeforeImage();
         List<Row> beforeImageRows = beforeImage.getRows();
         if (beforeImageRows == null || beforeImageRows.size() == 0) {
@@ -83,7 +82,8 @@ protected String buildUndoSQL() {
         insertColumns.append(keywordChecker.checkAndReplace(pkField.getName()));
         insertValues.append("?");
 
-        return "INSERT INTO " + keywordChecker.checkAndReplace(sqlUndoLog.getTableName()) + "(" + insertColumns.toString() + ") VALUES (" + insertValues.toString() + ")";
+        return "INSERT INTO " + keywordChecker.checkAndReplace(sqlUndoLog.getTableName()) + "(" + insertColumns
+            .toString() + ") VALUES (" + insertValues.toString() + ")";
     }
 
     @Override

File: rm-datasource/src/test/java/com/alibaba/fescar/rm/datasource/sql/druid/AbstractMySQLRecognizerTest.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * The type Abstract my sql recognizer test.
  *
- * @author hanwen  created at 2019-01-25
+ * @author hanwen created at 2019-01-25
  */
 public class AbstractMySQLRecognizerTest {
 

File: rm-datasource/src/test/java/com/alibaba/fescar/rm/datasource/sql/druid/MySQLDeleteRecognizerTest.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * The type My sql delete recognizer test.
  *
- * @author hanwen  created at 2019-01-25
+ * @author hanwen created at 2019-01-25
  */
 public class MySQLDeleteRecognizerTest extends AbstractMySQLRecognizerTest {
 

File: rm-datasource/src/test/java/com/alibaba/fescar/rm/datasource/sql/druid/MySQLInsertRecognizerTest.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * The type My sql insert recognizer test.
  *
- * @author hanwen  created at 2019-01-25
+ * @author hanwen created at 2019-01-25
  */
 public class MySQLInsertRecognizerTest extends AbstractMySQLRecognizerTest {
 

File: tm/src/main/java/com/alibaba/fescar/tm/api/DefaultGlobalTransaction.java
Patch:
@@ -55,7 +55,9 @@ public class DefaultGlobalTransaction implements GlobalTransaction {
     /**
      * Instantiates a new Default global transaction.
      *
-     * @param xid the xid
+     * @param xid    the xid
+     * @param status the status
+     * @param role   the role
      */
     DefaultGlobalTransaction(String xid, GlobalStatus status, GlobalTransactionRole role) {
         this.transactionManager = DefaultTransactionManager.get();

File: tm/src/main/java/com/alibaba/fescar/tm/api/GlobalTransactionContext.java
Patch:
@@ -19,7 +19,6 @@
 import com.alibaba.fescar.core.context.RootContext;
 import com.alibaba.fescar.core.exception.TransactionException;
 import com.alibaba.fescar.core.model.GlobalStatus;
-import com.alibaba.fescar.core.model.TransactionManager;
 
 /**
  * GlobalTransaction API
@@ -68,7 +67,9 @@ public static GlobalTransaction getCurrentOrCreate() {
     /**
      * Reload GlobalTransaction instance according to the given XID
      *
+     * @param xid the xid
      * @return reloaded transaction instance.
+     * @throws TransactionException the transaction exception
      */
     public static GlobalTransaction reload(String xid) throws TransactionException {
         GlobalTransaction tx = new DefaultGlobalTransaction(xid, GlobalStatus.UnKnown, GlobalTransactionRole.Launcher) {

File: tm/src/main/java/com/alibaba/fescar/tm/api/TransactionalTemplate.java
Patch:
@@ -28,7 +28,7 @@ public class TransactionalTemplate {
      *
      * @param business the business
      * @return the object
-     * @throws TransactionalExecutor.ExecutionException the execution exception
+     * @throws ExecutionException the execution exception
      */
     public Object execute(TransactionalExecutor business) throws TransactionalExecutor.ExecutionException {
 

File: common/src/main/java/com/alibaba/fescar/common/exception/FrameworkErrorCode.java
Patch:
@@ -20,7 +20,7 @@
  * The enum Framework error code.
  *
  * @author jimin.jm @alibaba-inc.com
- * @DateTime: 2018 /10/9
+ * @date 2018 /10/9
  */
 public enum FrameworkErrorCode {
     /**

File: dubbo/src/main/java/com/alibaba/fescar/dubbo/TransactionPropagationFilter.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * The type Transaction propagation filter.
  */
-@Activate(group = { Constants.PROVIDER, Constants.CONSUMER }, order = 100)
+@Activate(group = {Constants.PROVIDER, Constants.CONSUMER}, order = 100)
 public class TransactionPropagationFilter implements Filter {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(TransactionPropagationFilter.class);

File: server/src/main/java/com/alibaba/fescar/server/lock/LockManager.java
Patch:
@@ -46,6 +46,7 @@ public interface LockManager {
 
     /**
      * Clean all locks.
+     *
      * @throws TransactionException the transaction exception
      */
     void cleanAllLocks() throws TransactionException;

File: server/src/main/java/com/alibaba/fescar/server/session/BranchSession.java
Patch:
@@ -51,7 +51,8 @@ public class BranchSession implements Lockable, Comparable<BranchSession>, Sessi
 
     private String applicationData;
 
-    private ConcurrentHashMap<Map<String, Long>, Set<String>> lockHolder = new ConcurrentHashMap<Map<String, Long>, Set<String>>();
+    private ConcurrentHashMap<Map<String, Long>, Set<String>> lockHolder
+        = new ConcurrentHashMap<Map<String, Long>, Set<String>>();
 
     /**
      * Gets application data.

File: server/src/main/java/com/alibaba/fescar/server/session/SessionLifecycleListener.java
Patch:
@@ -50,7 +50,8 @@ public interface SessionLifecycleListener {
      * @param status        the status
      * @throws TransactionException the transaction exception
      */
-    void onBranchStatusChange(GlobalSession globalSession, BranchSession branchSession, BranchStatus status) throws TransactionException;
+    void onBranchStatusChange(GlobalSession globalSession, BranchSession branchSession, BranchStatus status)
+        throws TransactionException;
 
     /**
      * On add branch.

File: server/src/main/java/com/alibaba/fescar/server/session/SessionManager.java
Patch:
@@ -104,5 +104,4 @@ public interface SessionManager extends SessionLifecycleListener {
      */
     List<GlobalSession> findGlobalSessions(SessionCondition condition);
 
-
 }

File: server/src/test/java/com/alibaba/fescar/server/coordinator/DefaultCoreTest.java
Patch:
@@ -15,21 +15,22 @@
  */
 package com.alibaba.fescar.server.coordinator;
 
+import java.util.Collection;
+
 import com.alibaba.fescar.common.XID;
 import com.alibaba.fescar.core.model.BranchStatus;
 import com.alibaba.fescar.core.model.BranchType;
 import com.alibaba.fescar.core.model.GlobalStatus;
 import com.alibaba.fescar.server.session.BranchSession;
 import com.alibaba.fescar.server.session.GlobalSession;
 import com.alibaba.fescar.server.session.SessionHolder;
+
 import org.testng.Assert;
 import org.testng.annotations.AfterTest;
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.DataProvider;
 import org.testng.annotations.Test;
 
-import java.util.Collection;
-
 /**
  * The type Default core test.
  *

File: spring/src/test/java/com/alibaba/fescar/spring/annotation/GlobalTransactionScannerTest.java
Patch:
@@ -24,7 +24,8 @@
  * GlobalTransactionScanner Unit Test
  */
 public class GlobalTransactionScannerTest {
-    private GlobalTransactionScanner globalTransactionScanner = new GlobalTransactionScanner("global-trans-scanner-test");
+    private GlobalTransactionScanner globalTransactionScanner = new GlobalTransactionScanner(
+        "global-trans-scanner-test");
 
     @Test(dataProvider = "normalBeanProvider")
     public void testWrapNormalBean(Object bean, String beanName, Object cacheKey) {
@@ -42,6 +43,6 @@ public static Object[][] normalBeanProvider() {
         Business business = new BusinessImpl();
         String beanName = "business";
         String cacheKey = "business-key";
-        return new Object[][]{{business, beanName, cacheKey}};
+        return new Object[][] {{business, beanName, cacheKey}};
     }
 }

File: discovery/src/main/java/com/alibaba/fescar/discovery/loadbalance/AbstractLoadBalance.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * The type Abstract load balance.
  *
- * @author: jimin.jm @alibaba-inc.com
+ * @author jimin.jm @alibaba-inc.com
  * @date 2019 /02/12
  */
 public abstract class AbstractLoadBalance implements LoadBalance {

File: discovery/src/main/java/com/alibaba/fescar/discovery/loadbalance/LoadBalance.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * The interface Load balance.
  *
- * @author: jimin.jm @alibaba-inc.com
+ * @author jimin.jm @alibaba-inc.com
  * @date 2019 /02/12
  */
 public interface LoadBalance {

File: discovery/src/main/java/com/alibaba/fescar/discovery/loadbalance/LoadBalanceFactory.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * The type Load balance factory.
  *
- * @author: jimin.jm @alibaba-inc.com
+ * @author jimin.jm @alibaba-inc.com
  * @date 2019 /02/12
  */
 public class LoadBalanceFactory {

File: discovery/src/main/java/com/alibaba/fescar/discovery/loadbalance/RoundRobinLoadBalance.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * The type Round robin load balance.
  *
- * @author: jimin.jm @alibaba-inc.com
+ * @author jimin.jm @alibaba-inc.com
  * @date 2019 /02/12
  */
 @LoadLevel(name = "RoundRobinLoadBalance", order = 1)

File: discovery/src/main/java/com/alibaba/fescar/discovery/registry/FileRegistryServiceImpl.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * The type File registry service.
  *
- * @author: jimin.jm @alibaba-inc.com
+ * @author jimin.jm @alibaba-inc.com
  * @date 2019 /02/12
  */
 public class FileRegistryServiceImpl implements RegistryService<ConfigChangeListener> {

File: server/src/main/java/com/alibaba/fescar/server/session/SessionHolder.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.alibaba.fescar.server.session;
 
+import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -58,8 +59,8 @@ public static void init(String sessionStorePath) throws IOException {
             RETRY_COMMITTING_SESSION_MANAGER = new DefaultSessionManager(RETRY_COMMITTING_SESSION_MANAGER_NAME);
             RETRY_ROLLBACKING_SESSION_MANAGER = new DefaultSessionManager(RETRY_ROLLBACKING_SESSION_MANAGER_NAME);
         } else {
-            if (!sessionStorePath.endsWith("/")) {
-                sessionStorePath = sessionStorePath + "/";
+            if (!sessionStorePath.endsWith(File.separator)) {
+                sessionStorePath = sessionStorePath + File.separator;
             }
             ROOT_SESSION_MANAGER = new FileBasedSessionManager(ROOT_SESSION_MANAGER_NAME, sessionStorePath);
             ASYNC_COMMITTING_SESSION_MANAGER = new DefaultSessionManager(ASYNC_COMMITTING_SESSION_MANAGER_NAME);

File: common/src/main/java/com/alibaba/fescar/common/util/BlobUtils.java
Patch:
@@ -63,7 +63,7 @@ public static String blob2string(Blob blob) {
         }
 
         try {
-            return new String(blob.getBytes((long) 1, (int) blob.length()));
+            return new String(blob.getBytes((long)1, (int)blob.length()));
         } catch (Exception e) {
             throw new ShouldNeverHappenException(e);
         }

File: common/src/main/java/com/alibaba/fescar/common/util/StringUtils.java
Patch:
@@ -69,7 +69,7 @@ public static String blob2string(Blob blob) throws SQLException {
             return null;
         }
 
-        return new String(blob.getBytes((long) 1, (int) blob.length()));
+        return new String(blob.getBytes((long)1, (int)blob.length()));
     }
 
     /**

File: config/src/main/java/com/alibaba/fescar/config/ConfigChangeListener.java
Patch:
@@ -21,8 +21,8 @@
 /**
  * The interface Config change listener.
  *
- * @author: jimin.jm @alibaba-inc.com
- * @date: 2018 /12/20
+ * @author jimin.jm @alibaba-inc.com
+ * @date 2018 /12/20
  */
 public interface ConfigChangeListener {
 

File: config/src/main/java/com/alibaba/fescar/config/ConfigFuture.java
Patch:
@@ -25,8 +25,8 @@
 /**
  * The type Config future.
  *
- * @author: jimin.jm @alibaba-inc.com
- * @date: 2018 /12/20
+ * @author jimin.jm @alibaba-inc.com
+ * @date 2018 /12/20
  */
 public class ConfigFuture {
     private static final Logger LOGGER = LoggerFactory.getLogger(ConfigFuture.class);

File: config/src/main/java/com/alibaba/fescar/config/Configuration.java
Patch:
@@ -22,8 +22,8 @@
  * The interface Configuration.
  *
  * @param <T> the type parameter
- * @author: jimin.jm @alibaba-inc.com
- * @date: 2018 /12/20
+ * @author jimin.jm @alibaba-inc.com
+ * @date 2018 /12/20
  */
 public interface Configuration<T> {
 

File: config/src/main/java/com/alibaba/fescar/config/FileConfiguration.java
Patch:
@@ -37,8 +37,8 @@
 /**
  * The type FileConfiguration.
  *
- * @author: jimin.jm @alibaba-inc.com
- * @date: 2018 /9/10
+ * @author jimin.jm @alibaba-inc.com
+ * @date 2018 /9/10
  */
 public class FileConfiguration extends AbstractConfiguration<ConfigChangeListener> {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/Version.java
Patch:
@@ -31,7 +31,7 @@ public class Version {
     /**
      * The constant CURRENT.
      */
-    public static final String CURRENT = "0.2.3";
+    public static final String CURRENT = "0.2.4";
 
     /**
      * The constant VERSION_MAP.

File: config/src/test/java/com/alibaba/fescar/config/NacosConfigurationTest.java
Patch:
@@ -16,7 +16,8 @@
 
 package com.alibaba.fescar.config;
 
-import org.testng.annotations.Test;
+
+import org.junit.Test;
 
 /**
  * @author: jimin.jm@alibaba-inc.com

File: config/src/main/java/com/alibaba/fescar/config/ConfigurationFactory.java
Patch:
@@ -47,7 +47,7 @@ public static Configuration getInstance() {
         ConfigType configType = null;
         try {
             configType = ConfigType.getType(
-                FILE_INSTANCE.getConfig(ConfigurationKeys.FILE_ROOT_REGISTRY + ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR
+                FILE_INSTANCE.getConfig(ConfigurationKeys.FILE_ROOT_CONFIG + ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR
                     + ConfigurationKeys.FILE_ROOT_TYPE));
         } catch (Exception exx) {
             LOGGER.error(exx.getMessage());
@@ -62,7 +62,7 @@ public static Configuration getInstance() {
                 }
                 break;
             case File:
-                String pathDataId = ConfigurationKeys.FILE_ROOT_REGISTRY + ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR
+                String pathDataId = ConfigurationKeys.FILE_ROOT_CONFIG + ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR
                     + FILE_TYPE + ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR
                     + NAME_KEY;
                 String name = FILE_INSTANCE.getConfig(pathDataId);

File: config/src/main/java/com/alibaba/fescar/config/ConfigurationKeys.java
Patch:
@@ -22,6 +22,7 @@
  */
 public final class ConfigurationKeys {
     public static final String FILE_ROOT_REGISTRY = "registry";
+    public static final String FILE_ROOT_CONFIG = "config";
     public static final String FILE_CONFIG_SPLIT_CHAR = ".";
     public static final String FILE_ROOT_TYPE = "type";
 }

File: config/src/main/java/com/alibaba/fescar/config/AbstractConfiguration.java
Patch:
@@ -32,8 +32,6 @@ public abstract class AbstractConfiguration<T> implements Configuration<T> {
      * The constant DEFAULT_CONFIG_TIMEOUT.
      */
     protected static final long DEFAULT_CONFIG_TIMEOUT = 5 * 1000;
-    protected static final String FILE_ROOT_REGISTRY = "registry";
-    protected static final String FILE_CONFIG_SPLIT_CHAR = ".";
 
     @Override
     public int getInt(String dataId, int defaultValue, long timeoutMills) {

File: config/src/main/java/com/alibaba/fescar/config/NacosConfiguration.java
Patch:
@@ -124,7 +124,8 @@ private static Properties getConfigProperties() {
     }
 
     private static String getNacosAddrFileKey() {
-        return FILE_ROOT_REGISTRY + FILE_CONFIG_SPLIT_CHAR + REGISTRY_TYPE + FILE_CONFIG_SPLIT_CHAR
+        return ConfigurationKeys.FILE_ROOT_REGISTRY + ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR + REGISTRY_TYPE
+            + ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR
             + PRO_SERVER_ADDR_KEY;
     }
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/Version.java
Patch:
@@ -31,7 +31,7 @@ public class Version {
     /**
      * The constant CURRENT.
      */
-    public static final String CURRENT = "0.2.2";
+    public static final String CURRENT = "0.2.3";
 
     /**
      * The constant VERSION_MAP.

File: server/src/main/java/com/alibaba/fescar/server/UUIDGenerator.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class UUIDGenerator {
 
-    private static AtomicLong UUID = new AtomicLong(1000);
+    private static final AtomicLong UUID = new AtomicLong(1000);
     private static int serverNodeId = 1;
     private static final long UUID_INTERNAL = 2000000000;
 
@@ -40,7 +40,7 @@ public class UUIDGenerator {
      */
     public static long generateUUID() {
         long id = UUID.incrementAndGet();
-        if (id > UUID_INTERNAL * serverNodeId) {
+        if (id >= UUID_INTERNAL * (serverNodeId + 1)) {
             synchronized (UUID) {
                 if (UUID.get() >= id) {
                     id -= UUID_INTERNAL;

File: core/src/main/java/com/alibaba/fescar/core/protocol/Version.java
Patch:
@@ -31,7 +31,7 @@ public class Version {
     /**
      * The constant CURRENT.
      */
-    public static final String CURRENT = "0.2.1";
+    public static final String CURRENT = "0.2.2";
 
     /**
      * The constant VERSION_MAP.

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/NettyClientConfig.java
Patch:
@@ -51,7 +51,7 @@ public class NettyClientConfig extends NettyBaseConfig {
     private static final int DEFAULT_MIN_POOL_IDLE = 0;
     private static final boolean DEFAULT_POOL_TEST_BORROW = true;
     private static final boolean DEFAULT_POOL_TEST_RETURN = true;
-    private static final boolean DEFAULT_POOL_FIFO = true;
+    private static final boolean DEFAULT_POOL_LIFO = true;
 
     /**
      * Gets connect timeout millis.
@@ -423,8 +423,8 @@ public boolean isPoolTestReturn() {
      *
      * @return the boolean
      */
-    public boolean isPoolFifo() {
-        return DEFAULT_POOL_FIFO;
+    public boolean isPoolLifo() {
+        return DEFAULT_POOL_LIFO;
     }
 
     /**

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/RmRpcClient.java
Patch:
@@ -190,7 +190,7 @@ protected Config getNettyPoolConfig() {
         poolConfig.maxWait = rmClientConfig.getMaxAcquireConnMills();
         poolConfig.testOnBorrow = rmClientConfig.isPoolTestBorrow();
         poolConfig.testOnReturn = rmClientConfig.isPoolTestReturn();
-        poolConfig.lifo = rmClientConfig.isPoolFifo();
+        poolConfig.lifo = rmClientConfig.isPoolLifo();
         return poolConfig;
     }
 

File: core/src/test/java/com/alibaba/fescar/core/rpc/netty/TmRpcClientTest.java
Patch:
@@ -60,7 +60,7 @@ public void testGetInstance() throws Exception {
         Assert.assertEquals(defaultNettyClientConfig.getMaxAcquireConnMills(), config.maxWait);
         Assert.assertEquals(defaultNettyClientConfig.isPoolTestBorrow(), config.testOnBorrow);
         Assert.assertEquals(defaultNettyClientConfig.isPoolTestReturn(), config.testOnReturn);
-        Assert.assertEquals(defaultNettyClientConfig.isPoolFifo(), config.lifo);
+        Assert.assertEquals(defaultNettyClientConfig.isPoolLifo(), config.lifo);
     }
 
     /**

File: core/src/main/java/com/alibaba/fescar/core/protocol/Version.java
Patch:
@@ -31,7 +31,7 @@ public class Version {
     /**
      * The constant CURRENT.
      */
-    public static final String CURRENT = "0.2.0";
+    public static final String CURRENT = "0.2.1";
 
     /**
      * The constant VERSION_MAP.

File: config/src/main/java/com/alibaba/fescar/config/NacosConfiguration.java
Patch:
@@ -61,7 +61,7 @@ public String getConfig(String dataId, String defaultValue, long timeoutMills) {
             LOGGER.error(exx.getErrMsg());
             value = defaultValue;
         }
-        return value;
+        return value == null ? defaultValue : value;
     }
 
     @Override

File: server/src/test/java/com/alibaba/fescar/server/store/SessionStoreTest.java
Patch:
@@ -10,8 +10,6 @@
 import com.alibaba.fescar.server.session.SessionHelper;
 import com.alibaba.fescar.server.session.SessionHolder;
 import org.junit.Assert;
-import org.testng.annotations.AfterMethod;
-import org.testng.annotations.BeforeClass;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/AbstractRpcRemotingClient.java
Patch:
@@ -40,7 +40,7 @@
 import com.alibaba.fescar.core.rpc.netty.NettyPoolKey.TransactionRole;
 import com.alibaba.fescar.core.service.ServiceManager;
 import com.alibaba.fescar.core.service.ServiceManagerStaticConfigImpl;
-import com.alibaba.fescar.discover.registry.RegistryFactory;
+import com.alibaba.fescar.discovery.registry.RegistryFactory;
 import com.alibaba.nacos.client.naming.utils.CollectionUtils;
 
 import io.netty.bootstrap.Bootstrap;

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/AbstractRpcRemotingServer.java
Patch:
@@ -22,7 +22,7 @@
 import com.alibaba.fescar.common.XID;
 import com.alibaba.fescar.common.thread.NamedThreadFactory;
 import com.alibaba.fescar.core.rpc.RemotingServer;
-import com.alibaba.fescar.discover.registry.RegistryFactory;
+import com.alibaba.fescar.discovery.registry.RegistryFactory;
 
 import io.netty.bootstrap.ServerBootstrap;
 import io.netty.channel.Channel;

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/TmRpcClient.java
Patch:
@@ -43,8 +43,8 @@
 import com.alibaba.fescar.core.protocol.transaction.GlobalBeginResponse;
 import com.alibaba.fescar.core.rpc.netty.NettyPoolKey.TransactionRole;
 import com.alibaba.fescar.core.service.ConfigurationKeys;
-import com.alibaba.fescar.discover.loadbalance.LoadBalanceFactory;
-import com.alibaba.fescar.discover.registry.RegistryFactory;
+import com.alibaba.fescar.discovery.loadbalance.LoadBalanceFactory;
+import com.alibaba.fescar.discovery.registry.RegistryFactory;
 import com.alibaba.nacos.client.naming.utils.CollectionUtils;
 
 import io.netty.channel.Channel;

File: discovery/src/main/java/com/alibaba/fescar/discovery/loadbalance/AbstractLoadBalance.java
Patch:
@@ -14,7 +14,7 @@
  *  limitations under the License.
  */
 
-package com.alibaba.fescar.discover.loadbalance;
+package com.alibaba.fescar.discovery.loadbalance;
 
 import java.util.List;
 

File: discovery/src/main/java/com/alibaba/fescar/discovery/loadbalance/LoadBalance.java
Patch:
@@ -14,7 +14,7 @@
  *  limitations under the License.
  */
 
-package com.alibaba.fescar.discover.loadbalance;
+package com.alibaba.fescar.discovery.loadbalance;
 
 import java.util.List;
 

File: discovery/src/main/java/com/alibaba/fescar/discovery/loadbalance/LoadBalanceFactory.java
Patch:
@@ -14,7 +14,7 @@
  *  limitations under the License.
  */
 
-package com.alibaba.fescar.discover.loadbalance;
+package com.alibaba.fescar.discovery.loadbalance;
 
 import java.util.ServiceLoader;
 

File: discovery/src/main/java/com/alibaba/fescar/discovery/loadbalance/RoundRobinLoadBalance.java
Patch:
@@ -14,7 +14,7 @@
  *  limitations under the License.
  */
 
-package com.alibaba.fescar.discover.loadbalance;
+package com.alibaba.fescar.discovery.loadbalance;
 
 import java.util.List;
 

File: discovery/src/main/java/com/alibaba/fescar/discovery/registry/FileRegistryServiceImpl.java
Patch:
@@ -14,7 +14,7 @@
  *  limitations under the License.
  */
 
-package com.alibaba.fescar.discover.registry;
+package com.alibaba.fescar.discovery.registry;
 
 import java.net.InetSocketAddress;
 import java.util.ArrayList;

File: discovery/src/main/java/com/alibaba/fescar/discovery/registry/NacosRegistryServiceImpl.java
Patch:
@@ -14,7 +14,7 @@
  *  limitations under the License.
  */
 
-package com.alibaba.fescar.discover.registry;
+package com.alibaba.fescar.discovery.registry;
 
 import java.net.InetSocketAddress;
 import java.util.ArrayList;

File: discovery/src/main/java/com/alibaba/fescar/discovery/registry/RegistryFactory.java
Patch:
@@ -14,7 +14,7 @@
  *  limitations under the License.
  */
 
-package com.alibaba.fescar.discover.registry;
+package com.alibaba.fescar.discovery.registry;
 
 import com.alibaba.fescar.common.exception.NotSupportYetException;
 import com.alibaba.fescar.config.ConfigType;

File: discovery/src/main/java/com/alibaba/fescar/discovery/registry/RegistryService.java
Patch:
@@ -14,7 +14,7 @@
  *  limitations under the License.
  */
 
-package com.alibaba.fescar.discover.registry;
+package com.alibaba.fescar.discovery.registry;
 
 import java.net.InetSocketAddress;
 import java.util.List;

File: discovery/src/test/java/com/alibaba/fescar/discovery/loadbalance/LoadBalanceFactoryTest.java
Patch:
@@ -14,14 +14,14 @@
  *  limitations under the License.
  */
 
-package com.alibaba.fescar.discover.loadbalance;
+package com.alibaba.fescar.discovery.loadbalance;
 
 import java.net.InetSocketAddress;
 import java.util.ArrayList;
 import java.util.List;
 
-import com.alibaba.fescar.discover.registry.RegistryFactory;
-import com.alibaba.fescar.discover.registry.RegistryService;
+import com.alibaba.fescar.discovery.registry.RegistryFactory;
+import com.alibaba.fescar.discovery.registry.RegistryService;
 
 import org.junit.Assert;
 import org.junit.Ignore;

File: server/src/main/java/com/alibaba/fescar/server/session/SessionHelper.java
Patch:
@@ -1,6 +1,5 @@
 package com.alibaba.fescar.server.session;
 
-import com.alibaba.fescar.common.XID;
 import com.alibaba.fescar.core.exception.TransactionException;
 import com.alibaba.fescar.core.model.BranchType;
 import com.alibaba.fescar.core.model.GlobalStatus;
@@ -15,8 +14,6 @@ public static BranchSession newBranchByGlobal(GlobalSession globalSession, Branc
 
         branchSession.setTransactionId(globalSession.getTransactionId());
         branchSession.setBranchId(UUIDGenerator.generateUUID());
-        branchSession.setApplicationId(globalSession.getApplicationId());
-        branchSession.setTxServiceGroup(globalSession.getTransactionServiceGroup());
         branchSession.setBranchType(branchType);
         branchSession.setResourceId(resourceId);
         branchSession.setLockKey(lockKeys);

File: server/src/test/java/com/alibaba/fescar/server/lock/DefaultLockManagerImplTest.java
Patch:
@@ -78,8 +78,6 @@ public static Object[][] branchSessionProvider() {
         branchSession.setResourceId(resourceId);
         branchSession.setLockKey(lockKey);
         branchSession.setBranchType(BranchType.AT);
-        branchSession.setApplicationId("demo-child-app");
-        branchSession.setTxServiceGroup("my_test_tx_group");
         branchSession.setApplicationData("{\"data\":\"test\"}");
         branchSession.setBranchType(BranchType.AT);
         return new Object[][] {{branchSession}};

File: server/src/test/java/com/alibaba/fescar/server/session/DefaultSessionManagerTest.java
Patch:
@@ -315,8 +315,6 @@ public static Object[][] branchSessionProvider() {
         branchSession.setResourceId("tb_1");
         branchSession.setLockKey("t_1");
         branchSession.setBranchType(BranchType.AT);
-        branchSession.setApplicationId("demo-child-app");
-        branchSession.setTxServiceGroup("my_test_tx_group");
         branchSession.setApplicationData("{\"data\":\"test\"}");
         return new Object[][] {{globalSession, branchSession}};
     }

File: server/src/test/java/com/alibaba/fescar/server/session/FileBasedSessionManagerTest.java
Patch:
@@ -326,8 +326,6 @@ public static Object[][] branchSessionProvider() {
         branchSession.setResourceId("tb_1");
         branchSession.setLockKey("t_1");
         branchSession.setBranchType(BranchType.AT);
-        branchSession.setApplicationId("demo-child-app");
-        branchSession.setTxServiceGroup("my_test_tx_group");
         branchSession.setApplicationData("{\"data\":\"test\"}");
         return new Object[][] {{globalSession, branchSession}};
     }

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/AbstractBranchEndResponse.java
Patch:
@@ -53,7 +53,7 @@ public void setBranchStatus(BranchStatus branchStatus) {
     @Override
     protected void doEncode() {
         super.doEncode();
-        byteBuffer.put((byte) branchStatus.ordinal());
+        byteBuffer.put((byte) branchStatus.getCode());
     }
 
     @Override

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/AbstractGlobalEndResponse.java
Patch:
@@ -51,7 +51,7 @@ public void setGlobalStatus(GlobalStatus globalStatus) {
     @Override
     protected void doEncode() {
         super.doEncode();
-        byteBuffer.put((byte) globalStatus.ordinal());
+        byteBuffer.put((byte) globalStatus.getCode());
     }
 
     @Override

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/BranchReportRequest.java
Patch:
@@ -147,7 +147,7 @@ public byte[] encode() {
         // 2. Branch Id
         byteBuffer.putLong(this.branchId);
         // 3. Branch Status
-        byteBuffer.put((byte) this.status.ordinal());
+        byteBuffer.put((byte) this.status.getCode());
         // 4. Resource Id
         if (this.resourceId != null) {
             byte[] bs = resourceId.getBytes(UTF8);

File: core/src/test/java/com/alibaba/fescar/core/message/GlobalCommitResponseTest.java
Patch:
@@ -72,7 +72,7 @@ public void testEncode() throws Exception {
         String encodeResultStr = Arrays.toString(encodeResult);
         System.out.println(encodeResultStr);
 
-        Assert.assertEquals("[1, 0, 8]", encodeResultStr);
+        Assert.assertEquals("[1, 0, 9]", encodeResultStr);
     }
 
     /**

File: server/src/main/java/com/alibaba/fescar/server/session/BranchSession.java
Patch:
@@ -352,6 +352,7 @@ public byte[] encode() {
         } else {
             byteBuffer.putInt(0);
         }
+        byteBuffer.put((byte)status.getCode());
         byteBuffer.flip();
         byte[] result = new byte[byteBuffer.limit()];
         byteBuffer.get(result);
@@ -399,6 +400,7 @@ public void decode(byte[] a) {
             byteBuffer.get(byApplicationData);
             this.applicationData = new String(byApplicationData);
         }
+        this.status = BranchStatus.get(byteBuffer.get());
 
     }
 

File: server/src/main/java/com/alibaba/fescar/server/store/FileTransactionStoreManager.java
Patch:
@@ -70,8 +70,8 @@ public class FileTransactionStoreManager implements TransactionStoreManager {
     private File currDataFile;
     private RandomAccessFile currRaf;
     private FileChannel currFileChannel;
-    private static long recoverCurrOffset = 0;
-    private static long recoverHisOffset = 0;
+    private long recoverCurrOffset = 0;
+    private long recoverHisOffset = 0;
     private SessionManager sessionManager;
     private String currFullFileName;
     private String hisFullFileName;

File: core/src/main/java/com/alibaba/fescar/core/protocol/Version.java
Patch:
@@ -31,7 +31,7 @@ public class Version {
     /**
      * The constant CURRENT.
      */
-    public static final String CURRENT = "0.1.4";
+    public static final String CURRENT = "0.2.0";
 
     /**
      * The constant VERSION_MAP.

File: tm/src/main/java/com/alibaba/fescar/tm/api/DefaultFailureHandlerImpl.java
Patch:
@@ -43,6 +43,6 @@ public void onCommitFailure(GlobalTransaction tx, Throwable cause) {
 
     @Override
     public void onRollbackFailure(GlobalTransaction tx, Throwable cause) {
-        LOGGER.warn("Failed to begin transaction[" + tx.getXid() + "]", cause);
+        LOGGER.warn("Failed to rollback transaction[" + tx.getXid() + "]", cause);
     }
 }

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/AbstractDMLBaseExecutor.java
Patch:
@@ -92,6 +92,7 @@ protected T executeAutoCommitTrue(Object[] args) throws Throwable {
                     connectionProxy.commit();
                     break;
                 } catch (LockConflictException lockConflict) {
+                    connectionProxy.getTargetConnection().rollback();
                     lockRetryController.sleep(lockConflict);
                 }
             }

File: core/src/main/java/com/alibaba/fescar/core/protocol/Version.java
Patch:
@@ -31,7 +31,7 @@ public class Version {
     /**
      * The constant CURRENT.
      */
-    public static final String CURRENT = "0.1.3";
+    public static final String CURRENT = "0.1.4";
 
     /**
      * The constant VERSION_MAP.

File: dubbo/src/main/java/com/alibaba/fescar/dubbo/TransactionPropagationFilter.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.alibaba.fescar.dubbo;
 
+import com.alibaba.fescar.core.context.RootContext;
+
 import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.extension.Activate;
 import org.apache.dubbo.rpc.Filter;
@@ -24,8 +26,6 @@
 import org.apache.dubbo.rpc.Result;
 import org.apache.dubbo.rpc.RpcContext;
 import org.apache.dubbo.rpc.RpcException;
-import com.alibaba.fescar.core.context.RootContext;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: examples/src/main/java/com/alibaba/fescar/tm/dubbo/impl/AccountServiceImpl.java
Patch:
@@ -19,7 +19,6 @@
 import com.alibaba.fescar.core.context.RootContext;
 import com.alibaba.fescar.test.common.ApplicationKeeper;
 import com.alibaba.fescar.tm.dubbo.AccountService;
-import com.alibaba.fescar.tm.dubbo.OrderService;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/druid/MySQLSelectForUpdateRecognizer.java
Patch:
@@ -36,6 +36,7 @@
 /**
  * The type My sql select for update recognizer.
  */
+
 public class MySQLSelectForUpdateRecognizer extends BaseRecognizer implements SQLSelectRecognizer {
 
     private final SQLSelectStatement ast;

File: core/src/main/java/com/alibaba/fescar/core/protocol/Version.java
Patch:
@@ -31,7 +31,7 @@ public class Version {
     /**
      * The constant CURRENT.
      */
-    public static final String CURRENT = "0.1.2";
+    public static final String CURRENT = "0.1.3";
 
     /**
      * The constant VERSION_MAP.

File: tm/src/main/java/com/alibaba/fescar/tm/api/GlobalTransactionContext.java
Patch:
@@ -35,7 +35,7 @@ private GlobalTransactionContext() {
     private static GlobalTransaction createNew() {
         GlobalTransaction tx = new DefaultGlobalTransaction();
         THREAD_TRANSACTION_CONTEXT.set(tx);
-        return THREAD_TRANSACTION_CONTEXT.get();
+        return tx;
     }
 
     /**
@@ -54,7 +54,7 @@ public static GlobalTransaction getCurrent() {
         }
         tx = new DefaultGlobalTransaction(xid);
         THREAD_TRANSACTION_CONTEXT.set(tx);
-        return THREAD_TRANSACTION_CONTEXT.get();
+        return tx;
     }
 
     /**

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/AbstractBranchEndRequest.java
Patch:
@@ -170,7 +170,7 @@ public boolean decode(ByteBuf in) {
 
         return true;
     }
-    
+
     @Override
     public String toString() {
         StringBuilder result = new StringBuilder();

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/AbstractBranchEndResponse.java
Patch:
@@ -55,7 +55,7 @@ public boolean decode(ByteBuf in) {
         branchStatus = BranchStatus.get(in.readByte());
         return true;
     }
-    
+
     @Override
     public String toString() {
         StringBuilder result = new StringBuilder();

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/BranchRegisterRequest.java
Patch:
@@ -136,7 +136,7 @@ public void decode(ByteBuffer byteBuffer) {
     public AbstractTransactionResponse handle(RpcContext rpcContext) {
         return handler.handle(this, rpcContext);
     }
-    
+
     @Override
     public String toString() {
         StringBuilder result = new StringBuilder();

File: core/src/test/java/com/alibaba/fescar/core/message/CodecTest.java
Patch:
@@ -16,13 +16,13 @@
 
 package com.alibaba.fescar.core.message;
 
+import java.nio.ByteBuffer;
+
 import com.alibaba.fescar.core.protocol.ResultCode;
 import com.alibaba.fescar.core.protocol.transaction.BranchRegisterResponse;
 
 import org.junit.Test;
 
-import java.nio.ByteBuffer;
-
 public class CodecTest {
 
     @Test

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/InsertExecutor.java
Patch:
@@ -47,7 +47,7 @@ protected TableRecords beforeImage() throws SQLException {
 
     @Override
     protected TableRecords afterImage(TableRecords beforeImage) throws SQLException {
-        SQLInsertRecognizer recogizier = (SQLInsertRecognizer) sqlRecognizer;
+        SQLInsertRecognizer recogizier = (SQLInsertRecognizer)sqlRecognizer;
         List<String> insertColumns = recogizier.getInsertColumns();
         TableMeta tmeta = getTableMeta();
         TableRecords afterImage = null;

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/PlainExecutor.java
Patch:
@@ -19,7 +19,6 @@
 import java.sql.Statement;
 
 import com.alibaba.fescar.rm.datasource.StatementProxy;
-import com.alibaba.fescar.rm.datasource.sql.SQLRecognizer;
 
 public class PlainExecutor<T, S extends Statement> implements Executor {
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/druid/MySQLInsertRecognizer.java
Patch:
@@ -75,7 +75,7 @@ public List<String> getInsertColumns() {
         List<String> list = new ArrayList<>(columnSQLExprs.size());
         for (SQLExpr expr : columnSQLExprs) {
             if (expr instanceof SQLIdentifierExpr) {
-                list.add(((SQLIdentifierExpr) expr).getName());
+                list.add(((SQLIdentifierExpr)expr).getName());
             } else {
                 throw new SQLParsingException("Unknown SQLExpr: " + expr.getClass() + " " + expr);
             }

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/druid/MySQLUpdateRecognizer.java
Patch:
@@ -30,7 +30,6 @@
 import com.alibaba.druid.sql.ast.statement.SQLUpdateSetItem;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlUpdateStatement;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlOutputVisitor;
-import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlSchemaStatVisitor;
 import com.alibaba.fescar.rm.datasource.ParametersHolder;
 import com.alibaba.fescar.rm.datasource.sql.SQLParsingException;
 import com.alibaba.fescar.rm.datasource.sql.SQLType;

File: test/src/main/java/com/alibaba/fescar/test/DataSourceBasicTest.java
Patch:
@@ -16,21 +16,22 @@
 
 package com.alibaba.fescar.test;
 
+import java.util.Date;
+
 import com.alibaba.fescar.core.context.RootContext;
 import com.alibaba.fescar.core.exception.TransactionException;
 import com.alibaba.fescar.core.model.BranchStatus;
 import com.alibaba.fescar.core.model.BranchType;
 import com.alibaba.fescar.core.model.Resource;
 import com.alibaba.fescar.rm.datasource.DataSourceManager;
+
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Ignore;
 import org.junit.Test;
 import org.springframework.context.support.ClassPathXmlApplicationContext;
 import org.springframework.jdbc.core.JdbcTemplate;
 
-import java.util.Date;
-
 @Ignore
 public class DataSourceBasicTest {
 

File: core/src/main/java/com/alibaba/fescar/core/model/BranchStatus.java
Patch:
@@ -16,11 +16,11 @@
 
 package com.alibaba.fescar.core.model;
 
-import com.alibaba.fescar.common.exception.ShouldNeverHappenException;
-
 import java.util.HashMap;
 import java.util.Map;
 
+import com.alibaba.fescar.common.exception.ShouldNeverHappenException;
+
 /**
  * Status of branch transaction.
  */

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/AbstractGlobalEndRequest.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.alibaba.fescar.core.protocol.transaction;
 
-import com.alibaba.fescar.core.protocol.MergedMessage;
-
 import java.nio.ByteBuffer;
 
+import com.alibaba.fescar.core.protocol.MergedMessage;
+
 public abstract class AbstractGlobalEndRequest extends AbstractTransactionRequestToTC implements MergedMessage {
 
     protected long transactionId;

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/AbstractGlobalEndResponse.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.alibaba.fescar.core.protocol.transaction;
 
-import com.alibaba.fescar.core.model.GlobalStatus;
-
 import java.nio.ByteBuffer;
 
+import com.alibaba.fescar.core.model.GlobalStatus;
+
 public abstract class AbstractGlobalEndResponse extends AbstractTransactionResponse {
 
     protected GlobalStatus globalStatus;

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/BranchReportRequest.java
Patch:
@@ -16,12 +16,12 @@
 
 package com.alibaba.fescar.core.protocol.transaction;
 
+import java.nio.ByteBuffer;
+
 import com.alibaba.fescar.core.model.BranchStatus;
 import com.alibaba.fescar.core.protocol.MergedMessage;
 import com.alibaba.fescar.core.rpc.RpcContext;
 
-import java.nio.ByteBuffer;
-
 public class BranchReportRequest extends AbstractTransactionRequestToTC implements MergedMessage {
 
     private long transactionId;

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/GlobalBeginRequest.java
Patch:
@@ -16,11 +16,11 @@
 
 package com.alibaba.fescar.core.protocol.transaction;
 
+import java.nio.ByteBuffer;
+
 import com.alibaba.fescar.core.protocol.MergedMessage;
 import com.alibaba.fescar.core.rpc.RpcContext;
 
-import java.nio.ByteBuffer;
-
 public class GlobalBeginRequest extends AbstractTransactionRequestToTC implements MergedMessage {
 
     private static final long serialVersionUID = 7236162274218388376L;

File: server/src/test/java/com/alibaba/fescar/server/lock/DefaultLockManagerImplTest.java
Patch:
@@ -18,6 +18,7 @@
 import com.alibaba.fescar.core.model.BranchType;
 import com.alibaba.fescar.server.UUIDGenerator;
 import com.alibaba.fescar.server.session.BranchSession;
+
 import org.testng.Assert;
 import org.testng.annotations.DataProvider;
 import org.testng.annotations.Test;
@@ -64,7 +65,7 @@ public static Object[][] branchSessionProvider() {
         branchSession.setTxServiceGroup("my_test_tx_group");
         branchSession.setApplicationData("{\"data\":\"test\"}");
         branchSession.setBranchType(BranchType.AT);
-        return new Object[][]{{branchSession}};
+        return new Object[][] {{branchSession}};
     }
 
 }

File: config/src/main/java/com/alibaba/fescar/config/ConfigChangeListener.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.alibaba.fescar.config;
 
-import java.util.concurrent.Executor;
+import java.util.concurrent.ExecutorService;
 
 /**
  * The interface Config change listener.
@@ -34,7 +34,7 @@ public interface ConfigChangeListener {
      *
      * @return the executor
      */
-    Executor getExecutor();
+    ExecutorService getExecutor();
 
     /**
      * Receive config info.

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/DataSourceManager.java
Patch:
@@ -53,6 +53,7 @@ public Long branchRegister(BranchType branchType, String resourceId, String clie
             request.setTransactionId(XID.getTransactionId(xid));
             request.setLockKey(lockKeys);
             request.setResourceId(resourceId);
+            request.setBranchType(branchType);
 
             BranchRegisterResponse response = (BranchRegisterResponse) RmRpcClient.getInstance().sendMsgWithResponse(request);
             if (response.getResultCode() == ResultCode.Failed) {

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/druid/MySQLInsertRecognizer.java
Patch:
@@ -75,7 +75,7 @@ public List<String> getInsertColumns() {
         List<String> list = new ArrayList<>(columnSQLExprs.size());
         for (SQLExpr expr : columnSQLExprs) {
             if (expr instanceof SQLIdentifierExpr) {
-                list.add(((SQLIdentifierExpr) expr).getName().toUpperCase());
+                list.add(((SQLIdentifierExpr) expr).getName());
             } else {
                 throw new SQLParsingException("Unknown SQLExpr: " + expr.getClass() + " " + expr);
             }

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/struct/TableMeta.java
Patch:
@@ -39,7 +39,7 @@ public void setTableName(String tableName) {
     }
 
     public ColumnMeta getColumnMeta(String colName) {
-        String s = colName.toUpperCase();
+        String s = colName;
         ColumnMeta col = allColumns.get(s);
         if (col == null) {
             if (colName.charAt(0) == '`') {
@@ -74,7 +74,7 @@ public Map<String, ColumnMeta> getPrimaryKeyMap() {
             IndexMeta index = entry.getValue();
             if (index.getIndextype().value() == IndexType.PRIMARY.value()) {
                 for (ColumnMeta col : index.getValues()) {
-                    pk.put(col.getColumnName().toUpperCase(), col);
+                    pk.put(col.getColumnName(), col);
                 }
             }
         }

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/struct/TableRecords.java
Patch:
@@ -127,7 +127,7 @@ public static TableRecords buildRecords(TableMeta tmeta, ResultSet resultSet) th
         while (resultSet.next()) {
             List<Field> fields = new ArrayList<>(columnCount);
             for (int i = 1; i <= columnCount; i++) {
-                String colName = resultSetMetaData.getColumnName(i).toUpperCase();
+                String colName = resultSetMetaData.getColumnName(i);
                 ColumnMeta col = tmeta.getColumnMeta(colName);
                 Field field = new Field();
                 field.setName(col.getColumnName());

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/SQLVisitorFactory.java
Patch:
@@ -54,7 +54,6 @@ public static SQLRecognizer get(String sql, String dbType) {
         } else {
             throw new UnsupportedOperationException("Just support MySQL by now!");
         }
-
         return recognizer;
     }
 }

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/InsertExecutor.java
Patch:
@@ -47,8 +47,8 @@ protected TableRecords beforeImage() throws SQLException {
 
     @Override
     protected TableRecords afterImage(TableRecords beforeImage) throws SQLException {
-        SQLInsertRecognizer visitor = (SQLInsertRecognizer) sqlRecognizer;
-        List<String> insertColumns = visitor.getInsertColumns();
+        SQLInsertRecognizer recogizier = (SQLInsertRecognizer) sqlRecognizer;
+        List<String> insertColumns = recogizier.getInsertColumns();
         TableMeta tmeta = getTableMeta();
         TableRecords afterImage = null;
         if (tmeta.containsPK(insertColumns)) {
@@ -60,7 +60,7 @@ protected TableRecords afterImage(TableRecords beforeImage) throws SQLException
                     if (statementProxy instanceof PreparedStatementProxy) {
                         pkValues = ((PreparedStatementProxy) statementProxy).getParamsByIndex(paramIdx);
                     } else {
-                        List<List<Object>> insertRows = visitor.getInsertRows();
+                        List<List<Object>> insertRows = recogizier.getInsertRows();
                         pkValues = new ArrayList<>(insertRows.size());
                         for (List<Object> row : insertRows) {
                             pkValues.add(row.get(paramIdx));

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/SelectForUpdateExecutor.java
Patch:
@@ -47,8 +47,8 @@ public Object doExecute(Object... args) throws Throwable {
         boolean originalAutoCommit = conn.getAutoCommit();
 
         StringBuffer selectSQLAppender = new StringBuffer("SELECT ");
-        selectSQLAppender.append(getTableMeta().getPkName());
-        selectSQLAppender.append(" FROM " + getTableMeta().getTableName());
+        selectSQLAppender.append(getColumnNameInSQL(getTableMeta().getPkName()));
+        selectSQLAppender.append(" FROM " + getFromTableInSQL());
         String whereCondition = null;
         ArrayList<Object> paramAppender = new ArrayList<>();
         if (statementProxy instanceof ParametersHolder) {

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/SQLRecognizer.java
Patch:
@@ -28,18 +28,18 @@ public interface SQLRecognizer {
     /**
      * TableRecords source related in the SQL, including alias if any.
      * SELECT id, name FROM user u WHERE ...
-     * TableRecords source should be 'user u' for this SQL.
+     * Alias should be 'u' for this SQL.
      *
      * @return table source.
      */
-    String getTableSource();
+    String getTableAlias();
 
     /**
      * TableRecords name related in the SQL.
      * SELECT id, name FROM user u WHERE ...
      * TableRecords name should be 'user' for this SQL, without alias 'u'.
      *
-     * @see #getTableSource()
+     * @see #getTableAlias()
      * @return table name.
      */
     String getTableName();

File: spring/src/main/java/com/alibaba/fescar/spring/annotation/GlobalTransactionalInterceptor.java
Patch:
@@ -33,13 +33,14 @@
 public class GlobalTransactionalInterceptor implements MethodInterceptor {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(GlobalTransactionalInterceptor.class);
+    private static final FailureHandler DEFAULT_FAIL_HANDLER = new DefaultFailureHandlerImpl();
 
     private final TransactionalTemplate transactionalTemplate = new TransactionalTemplate();
     private final FailureHandler failureHandler;
 
     public GlobalTransactionalInterceptor(FailureHandler failureHandler) {
         if (null == failureHandler) {
-            failureHandler = new DefaultFailureHandlerImpl();
+            failureHandler = DEFAULT_FAIL_HANDLER;
         }
         this.failureHandler = failureHandler;
     }

File: examples/src/main/java/com/alibaba/fescar/tm/dubbo/impl/OrderServiceImpl.java
Patch:
@@ -84,7 +84,7 @@ public PreparedStatement createPreparedStatement(Connection con) throws SQLExcep
             }
         }, keyHolder);
 
-        order.id = (long)keyHolder.getKey();
+        order.id = keyHolder.getKey().longValue();
 
         LOGGER.info("Order Service End ... Created " + order);
 

File: examples/src/main/java/com/alibaba/fescar/tm/dubbo/impl/BusinessServiceImpl.java
Patch:
@@ -42,6 +42,7 @@ public class BusinessServiceImpl implements BusinessService {
     @Override
     @GlobalTransactional(timeoutMills = 300000, name = "dubbo-demo-tx")
     public void purchase(String userId, String commodityCode, int orderCount) {
+        LOGGER.info("purchase begin ... xid: " + RootContext.getXID());
         storageService.deduct(commodityCode, orderCount);
         orderService.create(userId, commodityCode, orderCount);
         throw new RuntimeException("xxx");
@@ -60,9 +61,6 @@ public static void main(String[] args) {
         ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
             new String[] {"dubbo-business.xml"});
         final BusinessService business = (BusinessService)context.getBean("business");
-
-        LOGGER.info("Main business begin ... xid: " + RootContext.getXID());
         business.purchase("U100001", "C00321", 2);
-        LOGGER.info("Main business end ... xid: " + RootContext.getXID());
     }
 }

File: examples/src/main/java/com/alibaba/fescar/tm/dubbo/impl/OrderServiceImpl.java
Patch:
@@ -84,7 +84,7 @@ public PreparedStatement createPreparedStatement(Connection con) throws SQLExcep
             }
         }, keyHolder);
 
-        order.id = (long) keyHolder.getKey();
+        order.id = (long)keyHolder.getKey();
 
         LOGGER.info("Order Service End ... Created " + order);
 

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/undo/UndoLogManager.java
Patch:
@@ -50,7 +50,7 @@ public final class UndoLogManager {
     private static String DELETE_UNDO_LOG_SQL = "DELETE FROM " + UNDO_LOG_TABLE_NAME + "\n" +
             "\tWHERE branch_id = ? AND xid = ?";
 
-    private static String SELECT_UNDO_LOG_SQL = "SELECT * FROM undo_log WHERE log_status = 0 AND branch_id = ? AND xid = ? FOR UPDATE";
+    private static String SELECT_UNDO_LOG_SQL = "SELECT * FROM " + UNDO_LOG_TABLE_NAME + " WHERE log_status = 0 AND branch_id = ? AND xid = ? FOR UPDATE";
 
     private UndoLogManager() {
 

File: examples/src/main/java/com/alibaba/fescar/tm/dubbo/impl/BusinessServiceImpl.java
Patch:
@@ -44,6 +44,7 @@ public class BusinessServiceImpl implements BusinessService {
     public void purchase(String userId, String commodityCode, int orderCount) {
         storageService.deduct(commodityCode, orderCount);
         orderService.create(userId, commodityCode, orderCount);
+        throw new RuntimeException("xxx");
 
     }
 

File: examples/src/main/java/com/alibaba/fescar/tm/dubbo/impl/OrderServiceImpl.java
Patch:
@@ -21,7 +21,6 @@
 import java.sql.SQLException;
 
 import com.alibaba.fescar.core.context.RootContext;
-import com.alibaba.fescar.rm.RMClientAT;
 import com.alibaba.fescar.test.common.ApplicationKeeper;
 import com.alibaba.fescar.tm.dubbo.AccountService;
 import com.alibaba.fescar.tm.dubbo.Order;
@@ -82,7 +81,7 @@ public PreparedStatement createPreparedStatement(Connection con) throws SQLExcep
             }
         }, keyHolder);
 
-        order.id = (long) keyHolder.getKey();
+        order.id = keyHolder.getKey().longValue();
 
         LOGGER.info("Order Service End ... Created " + order);
 

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/AbstractRpcRemotingServer.java
Patch:
@@ -112,7 +112,7 @@ public void start() {
             .channel(nettyServerConfig.SERVER_CHANNEL_CLAZZ)
             .option(ChannelOption.SO_BACKLOG, nettyServerConfig.getSoBackLogSize())
             .option(ChannelOption.SO_REUSEADDR, true)
-            .option(ChannelOption.SO_KEEPALIVE, true)
+            .childOption(ChannelOption.SO_KEEPALIVE, true)
             .childOption(ChannelOption.TCP_NODELAY, true)
             .childOption(ChannelOption.SO_SNDBUF, nettyServerConfig.getServerSocketSendBufSize())
             .childOption(ChannelOption.SO_RCVBUF, nettyServerConfig.getServerSocketResvBufSize())

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/NettyBaseConfig.java
Patch:
@@ -156,7 +156,7 @@ public class NettyBaseConfig {
     }
 
     private static void raiseUnsupportedTransportError() throws RuntimeException {
-        String errMsg = String.format("Unsupported provider type :[{}] for transport:[{}].", TRANSPORT_SERVER_TYPE,
+        String errMsg = String.format("Unsupported provider type :[%s] for transport:[%s].", TRANSPORT_SERVER_TYPE,
             TRANSPORT_PROTOCOL_TYPE);
         LOGGER.error(errMsg);
         throw new IllegalArgumentException(errMsg);

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/NettyBaseConfig.java
Patch:
@@ -156,7 +156,7 @@ public class NettyBaseConfig {
     }
 
     private static void raiseUnsupportedTransportError() throws RuntimeException {
-        String errMsg = String.format("Unsupported provider type :[{}] for transport:[{}].", TRANSPORT_SERVER_TYPE,
+        String errMsg = String.format("Unsupported provider type :[%s] for transport:[%s].", TRANSPORT_SERVER_TYPE,
             TRANSPORT_PROTOCOL_TYPE);
         LOGGER.error(errMsg);
         throw new IllegalArgumentException(errMsg);

File: tm/src/main/java/com/alibaba/fescar/tm/api/TransactionalTemplate.java
Patch:
@@ -28,7 +28,7 @@ public class TransactionalTemplate {
      *
      * @param business the business
      * @return the object
-     * @throws ExecutionException the execution exception
+     * @throws TransactionalExecutor.ExecutionException the execution exception
      */
     public Object execute(TransactionalExecutor business) throws TransactionalExecutor.ExecutionException {
 

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/NettyBaseConfig.java
Patch:
@@ -102,7 +102,7 @@ public class NettyBaseConfig {
     static {
         TRANSPORT_PROTOCOL_TYPE = TransportProtocolType.valueOf(CONFIG.getConfig("transport.type"));
         String workerThreadSize = CONFIG.getConfig("transport.thread-factory.worker-thread-size");
-        if (StringUtils.isNotBlank(workerThreadSize) && StringUtils.isNumericSpace(workerThreadSize)) {
+        if (StringUtils.isNotBlank(workerThreadSize) && StringUtils.isNumeric(workerThreadSize)) {
             WORKER_THREAD_SIZE = Integer.parseInt(workerThreadSize);
         } else if (null != WorkThreadMode.getModeByName(workerThreadSize)) {
             WORKER_THREAD_SIZE = WorkThreadMode.getModeByName(workerThreadSize).getValue();

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/NettyBaseConfig.java
Patch:
@@ -102,7 +102,7 @@ public class NettyBaseConfig {
     static {
         TRANSPORT_PROTOCOL_TYPE = TransportProtocolType.valueOf(CONFIG.getConfig("transport.type"));
         String workerThreadSize = CONFIG.getConfig("transport.thread-factory.worker-thread-size");
-        if (StringUtils.isNotBlank(workerThreadSize) && StringUtils.isNumericSpace(workerThreadSize)) {
+        if (StringUtils.isNotBlank(workerThreadSize) && StringUtils.isNumeric(workerThreadSize)) {
             WORKER_THREAD_SIZE = Integer.parseInt(workerThreadSize);
         } else if (null != WorkThreadMode.getModeByName(workerThreadSize)) {
             WORKER_THREAD_SIZE = WorkThreadMode.getModeByName(workerThreadSize).getValue();

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/DataSourceManager.java
Patch:
@@ -159,9 +159,9 @@ public BranchStatus branchRollback(String xid, long branchId, String resourceId,
             UndoLogManager.undo(dataSourceProxy, xid, branchId);
         } catch (TransactionException te) {
             if (te.getCode() == TransactionExceptionCode.BranchRollbackFailed_Unretriable) {
-                return BranchStatus.PhaseTwo_RollbackFailed_Unretriable;
+                return BranchStatus.PhaseTwo_RollbackFailed_Unretryable;
             } else {
-                return BranchStatus.PhaseTwo_RollbackFailed_Retriable;
+                return BranchStatus.PhaseTwo_RollbackFailed_Retryable;
             }
         }
         return BranchStatus.PhaseTwo_Rollbacked;

File: server/src/main/java/com/alibaba/fescar/server/coordinator/DefaultCore.java
Patch:
@@ -158,7 +158,7 @@ public void doGlobalCommit(GlobalSession globalSession, boolean retrying) throws
                     case PhaseTwo_Committed:
                         globalSession.removeBranch(branchSession);
                         continue;
-                    case PhaseTwo_CommitFailed_Unretriable:
+                    case PhaseTwo_CommitFailed_Unretryable:
                         if (globalSession.canBeCommittedAsync()) {
                             LOGGER.error("By [" + branchStatus + "], failed to commit branch " + branchSession);
                             continue;
@@ -262,7 +262,7 @@ public void doGlobalRollback(GlobalSession globalSession, boolean retrying) thro
                         globalSession.removeBranch(branchSession);
                         LOGGER.error("Successfully rolled back branch " + branchSession);
                         continue;
-                    case PhaseTwo_RollbackFailed_Unretriable:
+                    case PhaseTwo_RollbackFailed_Unretryable:
                         GlobalStatus currentStatus = globalSession.getStatus();
                         if (currentStatus.name().startsWith("Timeout")) {
                             globalSession.changeStatus(GlobalStatus.TimeoutRollbackFailed);

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/DataSourceManager.java
Patch:
@@ -159,9 +159,9 @@ public BranchStatus branchRollback(String xid, long branchId, String resourceId,
             UndoLogManager.undo(dataSourceProxy, xid, branchId);
         } catch (TransactionException te) {
             if (te.getCode() == TransactionExceptionCode.BranchRollbackFailed_Unretriable) {
-                return BranchStatus.PhaseTwo_RollbackFailed_Unretriable;
+                return BranchStatus.PhaseTwo_RollbackFailed_Unretryable;
             } else {
-                return BranchStatus.PhaseTwo_RollbackFailed_Retriable;
+                return BranchStatus.PhaseTwo_RollbackFailed_Retryable;
             }
         }
         return BranchStatus.PhaseTwo_Rollbacked;

File: server/src/main/java/com/alibaba/fescar/server/coordinator/DefaultCore.java
Patch:
@@ -158,7 +158,7 @@ public void doGlobalCommit(GlobalSession globalSession, boolean retrying) throws
                     case PhaseTwo_Committed:
                         globalSession.removeBranch(branchSession);
                         continue;
-                    case PhaseTwo_CommitFailed_Unretriable:
+                    case PhaseTwo_CommitFailed_Unretryable:
                         if (globalSession.canBeCommittedAsync()) {
                             LOGGER.error("By [" + branchStatus + "], failed to commit branch " + branchSession);
                             continue;
@@ -262,7 +262,7 @@ public void doGlobalRollback(GlobalSession globalSession, boolean retrying) thro
                         globalSession.removeBranch(branchSession);
                         LOGGER.error("Successfully rolled back branch " + branchSession);
                         continue;
-                    case PhaseTwo_RollbackFailed_Unretriable:
+                    case PhaseTwo_RollbackFailed_Unretryable:
                         GlobalStatus currentStatus = globalSession.getStatus();
                         if (currentStatus.name().startsWith("Timeout")) {
                             globalSession.changeStatus(GlobalStatus.TimeoutRollbackFailed);

File: tm/src/main/java/com/alibaba/fescar/tm/api/TransactionalTemplate.java
Patch:
@@ -28,7 +28,7 @@ public class TransactionalTemplate {
      *
      * @param business the business
      * @return the object
-     * @throws ExecutionException the execution exception
+     * @throws TransactionalExecutor.ExecutionException the execution exception
      */
     public Object execute(TransactionalExecutor business) throws TransactionalExecutor.ExecutionException {
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/AbstractBranchEndRequest.java
Patch:
@@ -157,7 +157,7 @@ public boolean decode(ByteBuf in) {
             leftLen -= resourceIdLen;
         }
 
-        int applicationDataLen = in.readShort();
+        int applicationDataLen = in.readInt();
         if (applicationDataLen > 0) {
             if (leftLen < applicationDataLen) {
                 return false;

File: core/src/main/java/com/alibaba/fescar/core/protocol/transaction/AbstractBranchEndRequest.java
Patch:
@@ -157,7 +157,7 @@ public boolean decode(ByteBuf in) {
             leftLen -= resourceIdLen;
         }
 
-        int applicationDataLen = in.readShort();
+        int applicationDataLen = in.readInt();
         if (applicationDataLen > 0) {
             if (leftLen < applicationDataLen) {
                 return false;

File: examples/src/main/java/com/alibaba/fescar/tm/dubbo/impl/AccountServiceImpl.java
Patch:
@@ -56,8 +56,6 @@ public static void main(String[] args) throws Throwable {
         String applicationId = "dubbo-demo-account-service";
         String txServiceGroup = "my_test_tx_group";
 
-        RMClientAT.init(applicationId, txServiceGroup);
-
         ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[]{"dubbo-account-service.xml"});
         context.getBean("service");
         JdbcTemplate jdbcTemplate = (JdbcTemplate) context.getBean("jdbcTemplate");

File: examples/src/main/java/com/alibaba/fescar/tm/dubbo/impl/OrderServiceImpl.java
Patch:
@@ -106,8 +106,6 @@ public static void main(String[] args) throws Throwable {
         String applicationId = "dubbo-demo-order-service";
         String txServiceGroup = "my_test_tx_group";
 
-        RMClientAT.init(applicationId, txServiceGroup);
-
         ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[]{"dubbo-order-service.xml"});
         context.getBean("service");
         JdbcTemplate jdbcTemplate = (JdbcTemplate) context.getBean("jdbcTemplate");

File: examples/src/main/java/com/alibaba/fescar/tm/dubbo/impl/StorageServiceImpl.java
Patch:
@@ -55,8 +55,6 @@ public static void main(String[] args) throws Throwable {
         String applicationId = "dubbo-demo-storage-service";
         String txServiceGroup = "my_test_tx_group";
 
-        RMClientAT.init(applicationId, txServiceGroup);
-
         ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[]{"dubbo-storage-service.xml"});
         context.getBean("service");
         JdbcTemplate jdbcTemplate = (JdbcTemplate) context.getBean("jdbcTemplate");

File: server/src/main/java/com/alibaba/fescar/server/store/TransactionWriteStore.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.nio.ByteBuffer;
 
+import com.alibaba.fescar.common.exception.ShouldNeverHappenException;
 import com.alibaba.fescar.server.session.BranchSession;
 import com.alibaba.fescar.server.session.GlobalSession;
 import com.alibaba.fescar.server.store.TransactionStoreManager.LogOperation;
@@ -124,7 +125,8 @@ private SessionStorable getSessionInstanceByOperation(LogOperation logOperation)
             case BRANCH_REMOVE:
                 sessionStorable = new BranchSession();
                 break;
-
+            default:
+                throw new ShouldNeverHappenException("incorrect logOperation");
         }
         return sessionStorable;
     }

File: server/src/main/java/com/alibaba/fescar/server/store/TransactionWriteStore.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.nio.ByteBuffer;
 
+import com.alibaba.fescar.common.exception.ShouldNeverHappenException;
 import com.alibaba.fescar.server.session.BranchSession;
 import com.alibaba.fescar.server.session.GlobalSession;
 import com.alibaba.fescar.server.store.TransactionStoreManager.LogOperation;
@@ -124,7 +125,8 @@ private SessionStorable getSessionInstanceByOperation(LogOperation logOperation)
             case BRANCH_REMOVE:
                 sessionStorable = new BranchSession();
                 break;
-
+            default:
+                throw new ShouldNeverHappenException("incorrect logOperation");
         }
         return sessionStorable;
     }

File: server/src/main/java/com/alibaba/fescar/server/UUIDGenerator.java
Patch:
@@ -28,14 +28,14 @@ public class UUIDGenerator {
 
     private static AtomicLong UUID = new AtomicLong(1000);
 
-    private static int UUID_INTERNAL = 200000000;
+    private static int UUID_INTERNAL = 2000000000;
 
     public static long generateUUID() {
         long id = UUID.incrementAndGet();
-        if (id > 2000000000) {
+        if (id > UUID_INTERNAL) {
             synchronized (UUID) {
                 if (UUID.get() >= id) {
-                    id -= 2000000000;
+                    id -= UUID_INTERNAL;
                     UUID.set(id);
                 }
             }

File: server/src/main/java/com/alibaba/fescar/server/UUIDGenerator.java
Patch:
@@ -28,14 +28,14 @@ public class UUIDGenerator {
 
     private static AtomicLong UUID = new AtomicLong(1000);
 
-    private static int UUID_INTERNAL = 200000000;
+    private static int UUID_INTERNAL = 2000000000;
 
     public static long generateUUID() {
         long id = UUID.incrementAndGet();
-        if (id > 2000000000) {
+        if (id > UUID_INTERNAL) {
             synchronized (UUID) {
                 if (UUID.get() >= id) {
-                    id -= 2000000000;
+                    id -= UUID_INTERNAL;
                     UUID.set(id);
                 }
             }

File: common/src/main/java/com/alibaba/fescar/common/loader/EnhancedServiceLoader.java
Patch:
@@ -100,7 +100,7 @@ public static <S> S load(Class<S> service, String activateName, ClassLoader load
      * @return
      */
     @SuppressWarnings("rawtypes")
-    public static <S> List<Class> getAllExtendsionClass(Class<S> service) {
+    public static <S> List<Class> getAllExtensionClass(Class<S> service) {
         return findAllExtensionClass(service, null, findClassLoader());
     }
 
@@ -110,7 +110,7 @@ public static <S> List<Class> getAllExtendsionClass(Class<S> service) {
      * @return
      */
     @SuppressWarnings("rawtypes")
-    public static <S> List<Class> getAllExtendsionClass(Class<S> service, ClassLoader loader) {
+    public static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {
         return findAllExtensionClass(service, null, loader);
     }
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/IncompatibleVersionException.java
Patch:
@@ -16,9 +16,9 @@
 
 package com.alibaba.fescar.core.protocol;
 
-public class UncompatibleVersionException extends Exception {
+public class IncompatibleVersionException extends Exception {
 
-    public UncompatibleVersionException(String message) {
+    public IncompatibleVersionException(String message) {
         super(message);
     }
 }

File: core/src/main/java/com/alibaba/fescar/core/protocol/Version.java
Patch:
@@ -40,7 +40,7 @@ public static String getChannelVersion(Channel c) {
         return VERSION_MAP.get(NetUtil.toStringAddress(c.remoteAddress()));
     }
 
-    public static String checkVersion(String version) throws UncompatibleVersionException {
+    public static String checkVersion(String version) throws IncompatibleVersionException {
         // TODO: check
         return version;
     }

File: core/src/main/java/com/alibaba/fescar/core/rpc/DefaultServerMessageListenerImpl.java
Patch:
@@ -94,7 +94,7 @@ public void onRegRmMessage(long msgId, ChannelHandlerContext ctx, RegisterRMRequ
 
         boolean isSuccess = false;
         try {
-            if (null == checkAuthHandler || null != checkAuthHandler && checkAuthHandler.regResourceManagerChecKAuth(
+            if (null == checkAuthHandler || null != checkAuthHandler && checkAuthHandler.regResourceManagerCheckAuth(
                 message)) {
                 ChannelManager.registerRMChannel(message, ctx.channel());
                 Version.putChannelVersion(ctx.channel(), message.getVersion());

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/AbstractRpcRemoting.java
Patch:
@@ -476,7 +476,7 @@ public void setGroup(String group) {
     }
 
     /**
-     * Destory channel.
+     * Destroy channel.
      *
      * @param channel the channel
      */
@@ -485,7 +485,7 @@ public void destroyChannel(Channel channel) {
     }
 
     /**
-     * Destory channel.
+     * Destroy channel.
      *
      * @param serverAddress the server address
      * @param channel       the channel

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/AbstractRpcRemotingClient.java
Patch:
@@ -231,7 +231,7 @@ protected Channel getNewChannel(InetSocketAddress address) {
         try {
             f.await(this.nettyClientConfig.getConnectTimeoutMillis(), TimeUnit.MILLISECONDS);
             if (f.isCancelled()) {
-                throw new FrameworkException("connect concelled, can not connect to fescar-server.");
+                throw new FrameworkException("connect cancelled, can not connect to fescar-server.");
             } else if (!f.isSuccess()) {
                 throw new FrameworkException("connect failed, can not connect to fescar-server.");
             } else {

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/MessageCodecHandler.java
Patch:
@@ -43,7 +43,7 @@ public class MessageCodecHandler extends ByteToMessageCodec<RpcMessage> {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(MessageCodecHandler.class);
     private static short MAGIC = (short)0xdada;
-    private static int HEAD_LENGHT = 14;
+    private static int HEAD_LENGTH = 14;
     private static final int FLAG_REQUEST = 0x80;
     private static final int FLAG_ASYNC = 0x40;
     private static final int FLAG_HEARTBEAT = 0x20;
@@ -122,11 +122,11 @@ protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) t
             LOGGER.info("please notice magicIndex is not zero offset!!!");
         }
         in.skipBytes(magicIndex - in.readerIndex());
-        if (in.readableBytes() < HEAD_LENGHT) {
+        if (in.readableBytes() < HEAD_LENGTH) {
             LOGGER.error("decode less than header length");
             return;
         }
-        byte[] buffer = new byte[HEAD_LENGHT];
+        byte[] buffer = new byte[HEAD_LENGTH];
         in.readBytes(buffer);
         ByteBuffer byteBuffer = ByteBuffer.wrap(buffer);
         short magic = byteBuffer.getShort();

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/NettyClientConfig.java
Patch:
@@ -162,7 +162,7 @@ public Class<? extends Channel> getClientChannelClazz() {
     }
 
     /**
-     * Enable nactive boolean.
+     * Enable native boolean.
      *
      * @return the boolean
      */

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/NettyPoolableFactory.java
Patch:
@@ -84,7 +84,7 @@ public Channel makeObject(NettyPoolKey key) throws Exception {
         }
         if (LOGGER.isInfoEnabled()) {
             LOGGER.info(
-                "register sucesss, cost " + (System.currentTimeMillis() - start) + " ms, version:"
+                "register success, cost " + (System.currentTimeMillis() - start) + " ms, version:"
                     + getVersion(response, key.getTransactionRole()) + ",role:" + key.getTransactionRole().name()
                     + ",channel:" + channelToServer);
         }

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/RegisterCheckAuthHandler.java
Patch:
@@ -39,10 +39,10 @@ public interface RegisterCheckAuthHandler {
     boolean regTransactionManagerCheckAuth(RegisterTMRequest request);
 
     /**
-     * Reg resource manager chec k auth boolean.
+     * Reg resource manager check auth boolean.
      *
      * @param request the request
      * @return the boolean
      */
-    boolean regResourceManagerChecKAuth(RegisterRMRequest request);
+    boolean regResourceManagerCheckAuth(RegisterRMRequest request);
 }

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/RmRpcClient.java
Patch:
@@ -471,7 +471,7 @@ public void onRegisterMsgSuccess(String serverAddress, Channel channel, Object r
 
         if (LOGGER.isInfoEnabled()) {
             LOGGER.info(
-                "register RM sucesss. server version:" + ((RegisterRMResponse)response).getVersion()
+                "register RM success. server version:" + ((RegisterRMResponse)response).getVersion()
                     + ",channel:" + channel);
         }
         if (customerKeys == null) {

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/RpcServer.java
Patch:
@@ -184,7 +184,7 @@ public void destroy() {
 
     /**
      * Send request.
-     * handle asyn branch commit and rollback
+     * handle async branch commit and rollback
      *
      * @param dbKey         the db key
      * @param clientIp      the client ip
@@ -356,7 +356,7 @@ private void handleDisconnect(ChannelHandlerContext ctx) {
             }
         } else {
             if (LOGGER.isInfoEnabled()) {
-                LOGGER.info("remove unuse channel:" + ctx.channel());
+                LOGGER.info("remove unused channel:" + ctx.channel());
             }
         }
     }

File: server/src/test/java/WriteStoreTest.java
Patch:
@@ -101,7 +101,7 @@ public Collection<GlobalSession> allSessions() {
                 }
 
                 @Override
-                public List<GlobalSession> findGlobalSessions(SessionCondition condtion) {
+                public List<GlobalSession> findGlobalSessions(SessionCondition condition) {
                     List<GlobalSession> globalSessions = new ArrayList<>();
                     int begin = 10000;
                     int num = 1000;

File: spring/src/main/java/com/alibaba/fescar/spring/annotation/GlobalTransactional.java
Patch:
@@ -28,7 +28,7 @@
 public @interface GlobalTransactional {
 
     /**
-     * Global transacton timeoutMills in MILLISECONDS.
+     * Global transaction timeoutMills in MILLISECONDS.
      * @return timeoutMills in MILLISECONDS.
      */
     int timeoutMills() default 60000;

File: spring/src/main/java/com/alibaba/fescar/spring/annotation/GlobalTransactionalInterceptor.java
Patch:
@@ -107,8 +107,8 @@ private String formatMethod(Method method) {
         sb.append("(");
 
         int paramPos = 0;
-        for (Class<?> claz : params) {
-            sb.append(claz.getName());
+        for (Class<?> clazz : params) {
+            sb.append(clazz.getName());
             if (++paramPos < params.length) {
                 sb.append(",");
             }

File: test/src/main/java/com/alibaba/fescar/test/DataSourceBasicTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.springframework.jdbc.core.JdbcTemplate;
 
 public class DataSourceBasicTest {
-    public void runBussiness(JdbcTemplate jdbcTemplate) {
+    public void runBusiness(JdbcTemplate jdbcTemplate) {
 //        jdbcTemplate.update("insert into user0 (id, name, gmt) values (?, ?, ?)",
 //                new Object[] { 1, "xxx", new Date() });
         jdbcTemplate.update("update user0 set name = 'yyyy' where id = ?", new Object[] {1});
@@ -86,7 +86,7 @@ public BranchStatus branchRollback(String xid, long branchId, String resourceId,
 //        directJdbcTemplate.execute("truncate table user0");
 
         RootContext.bind("test_xid");
-        clientTest.runBussiness(jdbcTemplate);
+        clientTest.runBusiness(jdbcTemplate);
 
         context.close();
         System.exit(0);

File: tm/src/main/java/com/alibaba/fescar/tm/api/TransactionalExecutor.java
Patch:
@@ -30,7 +30,7 @@ public interface TransactionalExecutor {
     Object execute() throws Throwable;
 
     /**
-     * Global transacton timeout in MILLISECONDS.
+     * Global transaction timeout in MILLISECONDS.
      *
      * @return timeout in MILLISECONDS.
      */

File: common/src/main/java/com/alibaba/fescar/common/loader/EnhancedServiceLoader.java
Patch:
@@ -100,7 +100,7 @@ public static <S> S load(Class<S> service, String activateName, ClassLoader load
      * @return
      */
     @SuppressWarnings("rawtypes")
-    public static <S> List<Class> getAllExtendsionClass(Class<S> service) {
+    public static <S> List<Class> getAllExtensionClass(Class<S> service) {
         return findAllExtensionClass(service, null, findClassLoader());
     }
 
@@ -110,7 +110,7 @@ public static <S> List<Class> getAllExtendsionClass(Class<S> service) {
      * @return
      */
     @SuppressWarnings("rawtypes")
-    public static <S> List<Class> getAllExtendsionClass(Class<S> service, ClassLoader loader) {
+    public static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {
         return findAllExtensionClass(service, null, loader);
     }
 

File: core/src/main/java/com/alibaba/fescar/core/protocol/IncompatibleVersionException.java
Patch:
@@ -16,9 +16,9 @@
 
 package com.alibaba.fescar.core.protocol;
 
-public class UncompatibleVersionException extends Exception {
+public class IncompatibleVersionException extends Exception {
 
-    public UncompatibleVersionException(String message) {
+    public IncompatibleVersionException(String message) {
         super(message);
     }
 }

File: core/src/main/java/com/alibaba/fescar/core/protocol/Version.java
Patch:
@@ -40,7 +40,7 @@ public static String getChannelVersion(Channel c) {
         return VERSION_MAP.get(NetUtil.toStringAddress(c.remoteAddress()));
     }
 
-    public static String checkVersion(String version) throws UncompatibleVersionException {
+    public static String checkVersion(String version) throws IncompatibleVersionException {
         // TODO: check
         return version;
     }

File: core/src/main/java/com/alibaba/fescar/core/rpc/DefaultServerMessageListenerImpl.java
Patch:
@@ -94,7 +94,7 @@ public void onRegRmMessage(long msgId, ChannelHandlerContext ctx, RegisterRMRequ
 
         boolean isSuccess = false;
         try {
-            if (null == checkAuthHandler || null != checkAuthHandler && checkAuthHandler.regResourceManagerChecKAuth(
+            if (null == checkAuthHandler || null != checkAuthHandler && checkAuthHandler.regResourceManagerCheckAuth(
                 message)) {
                 ChannelManager.registerRMChannel(message, ctx.channel());
                 Version.putChannelVersion(ctx.channel(), message.getVersion());

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/AbstractRpcRemoting.java
Patch:
@@ -476,7 +476,7 @@ public void setGroup(String group) {
     }
 
     /**
-     * Destory channel.
+     * Destroy channel.
      *
      * @param channel the channel
      */
@@ -485,7 +485,7 @@ public void destroyChannel(Channel channel) {
     }
 
     /**
-     * Destory channel.
+     * Destroy channel.
      *
      * @param serverAddress the server address
      * @param channel       the channel

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/AbstractRpcRemotingClient.java
Patch:
@@ -231,7 +231,7 @@ protected Channel getNewChannel(InetSocketAddress address) {
         try {
             f.await(this.nettyClientConfig.getConnectTimeoutMillis(), TimeUnit.MILLISECONDS);
             if (f.isCancelled()) {
-                throw new FrameworkException("connect concelled, can not connect to fescar-server.");
+                throw new FrameworkException("connect cancelled, can not connect to fescar-server.");
             } else if (!f.isSuccess()) {
                 throw new FrameworkException("connect failed, can not connect to fescar-server.");
             } else {

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/MessageCodecHandler.java
Patch:
@@ -43,7 +43,7 @@ public class MessageCodecHandler extends ByteToMessageCodec<RpcMessage> {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(MessageCodecHandler.class);
     private static short MAGIC = (short)0xdada;
-    private static int HEAD_LENGHT = 14;
+    private static int HEAD_LENGTH = 14;
     private static final int FLAG_REQUEST = 0x80;
     private static final int FLAG_ASYNC = 0x40;
     private static final int FLAG_HEARTBEAT = 0x20;
@@ -122,11 +122,11 @@ protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) t
             LOGGER.info("please notice magicIndex is not zero offset!!!");
         }
         in.skipBytes(magicIndex - in.readerIndex());
-        if (in.readableBytes() < HEAD_LENGHT) {
+        if (in.readableBytes() < HEAD_LENGTH) {
             LOGGER.error("decode less than header length");
             return;
         }
-        byte[] buffer = new byte[HEAD_LENGHT];
+        byte[] buffer = new byte[HEAD_LENGTH];
         in.readBytes(buffer);
         ByteBuffer byteBuffer = ByteBuffer.wrap(buffer);
         short magic = byteBuffer.getShort();

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/NettyClientConfig.java
Patch:
@@ -162,7 +162,7 @@ public Class<? extends Channel> getClientChannelClazz() {
     }
 
     /**
-     * Enable nactive boolean.
+     * Enable native boolean.
      *
      * @return the boolean
      */

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/NettyPoolableFactory.java
Patch:
@@ -84,7 +84,7 @@ public Channel makeObject(NettyPoolKey key) throws Exception {
         }
         if (LOGGER.isInfoEnabled()) {
             LOGGER.info(
-                "register sucesss, cost " + (System.currentTimeMillis() - start) + " ms, version:"
+                "register success, cost " + (System.currentTimeMillis() - start) + " ms, version:"
                     + getVersion(response, key.getTransactionRole()) + ",role:" + key.getTransactionRole().name()
                     + ",channel:" + channelToServer);
         }

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/RegisterCheckAuthHandler.java
Patch:
@@ -39,10 +39,10 @@ public interface RegisterCheckAuthHandler {
     boolean regTransactionManagerCheckAuth(RegisterTMRequest request);
 
     /**
-     * Reg resource manager chec k auth boolean.
+     * Reg resource manager check auth boolean.
      *
      * @param request the request
      * @return the boolean
      */
-    boolean regResourceManagerChecKAuth(RegisterRMRequest request);
+    boolean regResourceManagerCheckAuth(RegisterRMRequest request);
 }

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/RmRpcClient.java
Patch:
@@ -471,7 +471,7 @@ public void onRegisterMsgSuccess(String serverAddress, Channel channel, Object r
 
         if (LOGGER.isInfoEnabled()) {
             LOGGER.info(
-                "register RM sucesss. server version:" + ((RegisterRMResponse)response).getVersion()
+                "register RM success. server version:" + ((RegisterRMResponse)response).getVersion()
                     + ",channel:" + channel);
         }
         if (customerKeys == null) {

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/RpcServer.java
Patch:
@@ -184,7 +184,7 @@ public void destroy() {
 
     /**
      * Send request.
-     * handle asyn branch commit and rollback
+     * handle async branch commit and rollback
      *
      * @param dbKey         the db key
      * @param clientIp      the client ip
@@ -356,7 +356,7 @@ private void handleDisconnect(ChannelHandlerContext ctx) {
             }
         } else {
             if (LOGGER.isInfoEnabled()) {
-                LOGGER.info("remove unuse channel:" + ctx.channel());
+                LOGGER.info("remove unused channel:" + ctx.channel());
             }
         }
     }

File: server/src/test/java/WriteStoreTest.java
Patch:
@@ -101,7 +101,7 @@ public Collection<GlobalSession> allSessions() {
                 }
 
                 @Override
-                public List<GlobalSession> findGlobalSessions(SessionCondition condtion) {
+                public List<GlobalSession> findGlobalSessions(SessionCondition condition) {
                     List<GlobalSession> globalSessions = new ArrayList<>();
                     int begin = 10000;
                     int num = 1000;

File: spring/src/main/java/com/alibaba/fescar/spring/annotation/GlobalTransactional.java
Patch:
@@ -28,7 +28,7 @@
 public @interface GlobalTransactional {
 
     /**
-     * Global transacton timeoutMills in MILLISECONDS.
+     * Global transaction timeoutMills in MILLISECONDS.
      * @return timeoutMills in MILLISECONDS.
      */
     int timeoutMills() default 60000;

File: spring/src/main/java/com/alibaba/fescar/spring/annotation/GlobalTransactionalInterceptor.java
Patch:
@@ -107,8 +107,8 @@ private String formatMethod(Method method) {
         sb.append("(");
 
         int paramPos = 0;
-        for (Class<?> claz : params) {
-            sb.append(claz.getName());
+        for (Class<?> clazz : params) {
+            sb.append(clazz.getName());
             if (++paramPos < params.length) {
                 sb.append(",");
             }

File: test/src/main/java/com/alibaba/fescar/test/DataSourceBasicTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.springframework.jdbc.core.JdbcTemplate;
 
 public class DataSourceBasicTest {
-    public void runBussiness(JdbcTemplate jdbcTemplate) {
+    public void runBusiness(JdbcTemplate jdbcTemplate) {
 //        jdbcTemplate.update("insert into user0 (id, name, gmt) values (?, ?, ?)",
 //                new Object[] { 1, "xxx", new Date() });
         jdbcTemplate.update("update user0 set name = 'yyyy' where id = ?", new Object[] {1});
@@ -86,7 +86,7 @@ public BranchStatus branchRollback(String xid, long branchId, String resourceId,
 //        directJdbcTemplate.execute("truncate table user0");
 
         RootContext.bind("test_xid");
-        clientTest.runBussiness(jdbcTemplate);
+        clientTest.runBusiness(jdbcTemplate);
 
         context.close();
         System.exit(0);

File: tm/src/main/java/com/alibaba/fescar/tm/api/TransactionalExecutor.java
Patch:
@@ -30,7 +30,7 @@ public interface TransactionalExecutor {
     Object execute() throws Throwable;
 
     /**
-     * Global transacton timeout in MILLISECONDS.
+     * Global transaction timeout in MILLISECONDS.
      *
      * @return timeout in MILLISECONDS.
      */

File: core/src/main/java/com/alibaba/fescar/core/exception/AbstractExceptionHandler.java
Patch:
@@ -20,7 +20,7 @@
 import com.alibaba.fescar.core.protocol.transaction.AbstractTransactionRequest;
 import com.alibaba.fescar.core.protocol.transaction.AbstractTransactionResponse;
 
-public abstract class AbstractExceptionHander {
+public abstract class AbstractExceptionHandler {
 
     public interface Callback<T extends AbstractTransactionRequest, S extends AbstractTransactionResponse> {
         void execute(T request, S response) throws TransactionException;

File: rm-datasource/src/main/java/com/alibaba/fescar/rm/AbstractRMHandlerAT.java
Patch:
@@ -17,7 +17,7 @@
 package com.alibaba.fescar.rm;
 
 import com.alibaba.fescar.common.exception.ShouldNeverHappenException;
-import com.alibaba.fescar.core.exception.AbstractExceptionHander;
+import com.alibaba.fescar.core.exception.AbstractExceptionHandler;
 import com.alibaba.fescar.core.exception.TransactionException;
 import com.alibaba.fescar.core.protocol.AbstractMessage;
 import com.alibaba.fescar.core.protocol.AbstractResultMessage;
@@ -26,7 +26,7 @@
 import com.alibaba.fescar.core.rpc.RpcContext;
 import com.alibaba.fescar.core.rpc.TransactionMessageHandler;
 
-public abstract class AbstractRMHandlerAT extends AbstractExceptionHander
+public abstract class AbstractRMHandlerAT extends AbstractExceptionHandler
     implements RMInboundHandler, TransactionMessageHandler {
 
     @Override

File: server/src/main/java/com/alibaba/fescar/server/AbstractTCInboundHandler.java
Patch:
@@ -16,13 +16,13 @@
 
 package com.alibaba.fescar.server;
 
-import com.alibaba.fescar.core.exception.AbstractExceptionHander;
+import com.alibaba.fescar.core.exception.AbstractExceptionHandler;
 import com.alibaba.fescar.core.exception.TransactionException;
 import com.alibaba.fescar.core.protocol.transaction.*;
 import com.alibaba.fescar.core.protocol.transaction.GlobalBeginRequest;
 import com.alibaba.fescar.core.rpc.RpcContext;
 
-public abstract class AbstractTCInboundHandler extends AbstractExceptionHander implements TCInboundHandler {
+public abstract class AbstractTCInboundHandler extends AbstractExceptionHandler implements TCInboundHandler {
 
 
     @Override

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/NettyServerConfig.java
Patch:
@@ -42,7 +42,7 @@ public class NettyServerConfig extends NettyBaseConfig {
     private int soBackLogSize = 1024;
     private int writeBufferHighWaterMark = 67108864;
     private int writeBufferLowWaterMark = 1048576;
-    private int listenPort = 8091;
+    private static final int DEFAULT_LISTEN_PORT = 8091;
     private static final int RPC_REQUEST_TIMEOUT = 30 * 1000;
     private boolean enableServerPooledByteBufAllocator = true;
     private int serverChannelMaxIdleTimeSeconds = 30;
@@ -216,8 +216,8 @@ public void setWriteBufferLowWaterMark(int writeBufferLowWaterMark) {
      *
      * @return the listen port
      */
-    public int getListenPort() {
-        return listenPort;
+    public int getDefaultListenPort() {
+        return DEFAULT_LISTEN_PORT;
     }
 
     /**

File: core/src/main/java/com/alibaba/fescar/core/rpc/netty/NettyServerConfig.java
Patch:
@@ -42,7 +42,7 @@ public class NettyServerConfig extends NettyBaseConfig {
     private int soBackLogSize = 1024;
     private int writeBufferHighWaterMark = 67108864;
     private int writeBufferLowWaterMark = 1048576;
-    private int listenPort = 8091;
+    private static final int DEFAULT_LISTEN_PORT = 8091;
     private static final int RPC_REQUEST_TIMEOUT = 30 * 1000;
     private boolean enableServerPooledByteBufAllocator = true;
     private int serverChannelMaxIdleTimeSeconds = 30;
@@ -216,8 +216,8 @@ public void setWriteBufferLowWaterMark(int writeBufferLowWaterMark) {
      *
      * @return the listen port
      */
-    public int getListenPort() {
-        return listenPort;
+    public int getDefaultListenPort() {
+        return DEFAULT_LISTEN_PORT;
     }
 
     /**

