File: EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java
Patch:
@@ -64,7 +64,7 @@ public void run() {
                     eventBus.invokeSubscriber(pendingPost);
                 }
             } catch (InterruptedException e) {
-                eventBus.getLogger().log(Level.WARNING, Thread.currentThread().getName() + " was interruppted", e);
+                eventBus.getLogger().log(Level.WARNING, Thread.currentThread().getName() + " was interrupted", e);
             }
         } finally {
             executorRunning = false;

File: EventBus/src/org/greenrobot/eventbus/util/ThrowableFailureEvent.java
Patch:
@@ -17,6 +17,7 @@
 
 /**
  * A generic failure event, which can be used by apps to propagate thrown exceptions.
+ * Used as default failure event by {@link AsyncExecutor}.
  */
 public class ThrowableFailureEvent implements HasExecutionScope {
     protected final Throwable throwable;

File: EventBus/src/org/greenrobot/eventbus/util/ThrowableFailureEvent.java
Patch:
@@ -16,8 +16,7 @@
 package org.greenrobot.eventbus.util;
 
 /**
- * A generic failure event, which can be used by apps to propagate thrown exceptions. Also used in conjunction with
- * {@link ErrorDialogManager}.
+ * A generic failure event, which can be used by apps to propagate thrown exceptions.
  */
 public class ThrowableFailureEvent implements HasExecutionScope {
     protected final Throwable throwable;

File: EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledTest.java
Patch:
@@ -172,7 +172,7 @@ public void onEvent(MyEvent event) {
         }
     }
 
-    static class SubscriberExtendedWithoutNewSubscriberMethod extends EventBusInheritanceDisabledTest {
+    public static class SubscriberExtendedWithoutNewSubscriberMethod extends EventBusInheritanceDisabledTest {
     }
 
     public class StickySubscriber {

File: EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceTest.java
Patch:
@@ -172,7 +172,7 @@ public void onEvent(MyEvent event) {
         }
     }
 
-    static class SubscriberExtendedWithoutNewSubscriberMethod extends EventBusInheritanceTest {
+    public static class SubscriberExtendedWithoutNewSubscriberMethod extends EventBusInheritanceTest {
     }
 
     public class StickySubscriber {

File: EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java
Patch:
@@ -46,7 +46,9 @@ public SubscriberInfo getSuperSubscriberInfo() {
         }
         try {
             return superSubscriberInfoClass.newInstance();
-        } catch (InstantiationException | IllegalAccessException e) {
+        } catch (InstantiationException e) {
+            throw new RuntimeException(e);
+        } catch (IllegalAccessException e) {
             throw new RuntimeException(e);
         }
     }

File: EventBusTest/src/de/greenrobot/event/test/EventBusMainThreadTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2012-2015 Markus Junginger, greenrobot (http://greenrobot.de)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -116,7 +116,7 @@ void post(Object event) {
                 eventQ.notifyAll();
             }
             synchronized (eventsDone) {
-                while (eventsDone.remove(event)) {
+                while (!eventsDone.remove(event)) {
                     try {
                         eventsDone.wait();
                     } catch (InterruptedException e) {

File: EventBus/src/de/greenrobot/event/Subscribe.java
Patch:
@@ -7,13 +7,11 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import de.greenrobot.event.ThreadMode;
-
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.METHOD})
 public @interface Subscribe {
-    ThreadMode threadMode() default ThreadMode.PostThread;
+    ThreadMode threadMode() default ThreadMode.POSTING;
 
     /**
      * If true, delivers the most recent sticky event (posted with

File: EventBusTest/src/de/greenrobot/event/test/EventBusBackgroundThreadTest.java
Patch:
@@ -42,7 +42,7 @@ public void testPostFromMain() throws InterruptedException {
         assertFalse(lastThread.equals(Looper.getMainLooper().getThread()));
     }
 
-    @Subscribe(threadMode = ThreadMode.BackgroundThread)
+    @Subscribe(threadMode = ThreadMode.BACKGROUND)
     public void onEventBackgroundThread(String event) {
         trackEvent(event);
     }

File: EventBusTest/src/de/greenrobot/event/test/EventBusCancelEventDeliveryTest.java
Patch:
@@ -129,7 +129,7 @@ public void onEvent(String event) {
     public class SubscriberMainThread {
         final CountDownLatch done = new CountDownLatch(1);
 
-        @Subscribe(threadMode = ThreadMode.MainThread)
+        @Subscribe(threadMode = ThreadMode.MAIN)
         public void onEventMainThread(String event) {
             try {
                 eventBus.cancelEventDelivery(event);

File: EventBusTest/src/de/greenrobot/event/test/EventBusMainThreadRacingTest.java
Patch:
@@ -86,7 +86,7 @@ public void run() {
         awaitLatch(doneLatch, 10);
     }
 
-    @Subscribe(threadMode = ThreadMode.MainThread)
+    @Subscribe(threadMode = ThreadMode.MAIN)
     public void onEventMainThread(String event) {
         trackEvent(event);
         if (unregistered) {

File: EventBusTest/src/de/greenrobot/event/test/EventBusMainThreadTest.java
Patch:
@@ -59,7 +59,7 @@ public void testPostInBackgroundThread() throws InterruptedException {
         assertEquals(Looper.getMainLooper().getThread(), lastThread);
     }
 
-    @Subscribe(threadMode = ThreadMode.MainThread)
+    @Subscribe(threadMode = ThreadMode.MAIN)
     public void onEventMainThread(String event) {
         trackEvent(event);
     }

File: EventBusTest/src/de/greenrobot/event/test/EventBusMethodModifiersTest.java
Patch:
@@ -39,19 +39,19 @@ public void onEvent(String event) {
         assertNotSame(Looper.getMainLooper(), Looper.myLooper());
     }
 
-    @Subscribe(threadMode = ThreadMode.MainThread)
+    @Subscribe(threadMode = ThreadMode.MAIN)
     public void onEventMainThread(String event) {
         trackEvent(event);
         assertSame(Looper.getMainLooper(), Looper.myLooper());
     }
 
-    @Subscribe(threadMode = ThreadMode.BackgroundThread)
+    @Subscribe(threadMode = ThreadMode.BACKGROUND)
     public void onEventBackgroundThread(String event) {
         trackEvent(event);
         assertNotSame(Looper.getMainLooper(), Looper.myLooper());
     }
 
-    @Subscribe(threadMode = ThreadMode.Async)
+    @Subscribe(threadMode = ThreadMode.ASYNC)
     public void onEventAsync(String event) {
         trackEvent(event);
         assertNotSame(Looper.getMainLooper(), Looper.myLooper());

File: EventBus/src/de/greenrobot/event/EventBus.java
Patch:
@@ -234,7 +234,7 @@ public synchronized boolean isRegistered(Object subscriber) {
     }
 
     /** Only updates subscriptionsByEventType, not typesBySubscriber! Caller must update typesBySubscriber. */
-    private void unubscribeByEventType(Object subscriber, Class<?> eventType) {
+    private void unsubscribeByEventType(Object subscriber, Class<?> eventType) {
         List<Subscription> subscriptions = subscriptionsByEventType.get(eventType);
         if (subscriptions != null) {
             int size = subscriptions.size();
@@ -255,7 +255,7 @@ public synchronized void unregister(Object subscriber) {
         List<Class<?>> subscribedTypes = typesBySubscriber.get(subscriber);
         if (subscribedTypes != null) {
             for (Class<?> eventType : subscribedTypes) {
-                unubscribeByEventType(subscriber, eventType);
+                unsubscribeByEventType(subscriber, eventType);
             }
             typesBySubscriber.remove(subscriber);
         } else {

File: EventBus/src/de/greenrobot/event/EventBus.java
Patch:
@@ -215,7 +215,7 @@ public synchronized boolean isRegistered(Object subscriber) {
     }
 
     /** Only updates subscriptionsByEventType, not typesBySubscriber! Caller must update typesBySubscriber. */
-    private void unubscribeByEventType(Object subscriber, Class<?> eventType) {
+    private void unsubscribeByEventType(Object subscriber, Class<?> eventType) {
         List<Subscription> subscriptions = subscriptionsByEventType.get(eventType);
         if (subscriptions != null) {
             // Got to synchronize to avoid shifted positions when adding/removing concurrently
@@ -239,7 +239,7 @@ public synchronized void unregister(Object subscriber) {
         List<Class<?>> subscribedTypes = typesBySubscriber.get(subscriber);
         if (subscribedTypes != null) {
             for (Class<?> eventType : subscribedTypes) {
-                unubscribeByEventType(subscriber, eventType);
+                unsubscribeByEventType(subscriber, eventType);
             }
             typesBySubscriber.remove(subscriber);
         } else {

File: EventBus/src/de/greenrobot/event/util/AsyncExecutor.java
Patch:
@@ -121,8 +121,8 @@ public void run() {
                         Log.e(EventBus.TAG, "Original exception:", e);
                         throw new RuntimeException("Could not create failure event", e1);
                     }
-                    if (e instanceof HasExecutionScope) {
-                        ((HasExecutionScope) e).setExecutionScope(scope);
+                    if (event instanceof HasExecutionScope) {
+                        ((HasExecutionScope) event).setExecutionScope(scope);
                     }
                     eventBus.post(event);
                 }

File: EventBus/src/de/greenrobot/event/util/AsyncExecutor.java
Patch:
@@ -121,8 +121,8 @@ public void run() {
                         Log.e(EventBus.TAG, "Original exception:", e);
                         throw new RuntimeException("Could not create failure event", e1);
                     }
-                    if (e instanceof HasExecutionScope) {
-                        ((HasExecutionScope) e).setExecutionScope(scope);
+                    if (event instanceof HasExecutionScope) {
+                        ((HasExecutionScope) event).setExecutionScope(scope);
                     }
                     eventBus.post(event);
                 }

File: EventBus/src/de/greenrobot/event/EventBus.java
Patch:
@@ -403,7 +403,7 @@ private void postSingleEvent(Object event, boolean isMainThread) throws Error {
             }
         }
         if (!subscriptionFound) {
-            Log.d(TAG, "No subscripers registered for event " + eventClass);
+            Log.d(TAG, "No subscribers registered for event " + eventClass);
             if (eventClass != NoSubscriberEvent.class && eventClass != SubscriberExceptionEvent.class) {
                 post(new NoSubscriberEvent(this, event));
             }

File: EventBus/src/de/greenrobot/event/EventBus.java
Patch:
@@ -397,7 +397,7 @@ private void postSingleEvent(Object event, boolean isMainThread) throws Error {
             synchronized (this) {
                 subscriptions = subscriptionsByEventType.get(clazz);
             }
-            if (subscriptions != null) {
+            if (subscriptions != null && !subscriptions.isEmpty()) {
                 for (Subscription subscription : subscriptions) {
                     postToSubscription(subscription, event, isMainThread);
                 }

File: EventBus/src/de/greenrobot/event/SubscriberMethod.java
Patch:
@@ -34,6 +34,7 @@ final class SubscriberMethod {
     public boolean equals(Object other) {
         if (other instanceof SubscriberMethod) {
             checkMethodString();
+            ((SubscriberMethod)other).checkMethodString();
             // Don't use method.equals because of http://code.google.com/p/android/issues/detail?id=7811#c6
             return methodString.equals(((SubscriberMethod) other).methodString);
         } else {

File: EventBus/src/de/greenrobot/event/EventBus.java
Patch:
@@ -403,7 +403,7 @@ private void postSingleEvent(Object event, boolean isMainThread) throws Error {
             }
         }
         if (!subscriptionFound) {
-            Log.d(TAG, "No subscripers registered for event " + eventClass);
+            Log.d(TAG, "No subscribers registered for event " + eventClass);
             if (eventClass != NoSubscriberEvent.class && eventClass != SubscriberExceptionEvent.class) {
                 post(new NoSubscriberEvent(this, event));
             }

File: EventBus/src/de/greenrobot/event/SubscriberMethod.java
Patch:
@@ -34,6 +34,7 @@ final class SubscriberMethod {
     public boolean equals(Object other) {
         if (other instanceof SubscriberMethod) {
             checkMethodString();
+            ((SubscriberMethod)other).checkMethodString();
             // Don't use method.equals because of http://code.google.com/p/android/issues/detail?id=7811#c6
             return methodString.equals(((SubscriberMethod) other).methodString);
         } else {

File: EventBus/src/de/greenrobot/event/EventBus.java
Patch:
@@ -403,7 +403,7 @@ private void postSingleEvent(Object event, boolean isMainThread) throws Error {
             }
         }
         if (!subscriptionFound) {
-            Log.d(TAG, "No subscripers registered for event " + eventClass);
+            Log.d(TAG, "No subscribers registered for event " + eventClass);
             if (eventClass != NoSubscriberEvent.class && eventClass != SubscriberExceptionEvent.class) {
                 post(new NoSubscriberEvent(this, event));
             }

File: EventBus/src/de/greenrobot/event/util/ErrorDialogFragmentFactory.java
Patch:
@@ -10,7 +10,7 @@
  * Factory to allow injecting a more complex exception mapping; typically you would subclass one of {@link Honeycomb} or
  * {@link Support}.
  */
-abstract class ErrorDialogFragmentFactory<T> {
+public abstract class ErrorDialogFragmentFactory<T> {
     protected final ErrorDialogConfig config;
 
     protected ErrorDialogFragmentFactory(ErrorDialogConfig config) {

File: EventBus/src/de/greenrobot/event/util/AsyncExecutor.java
Patch:
@@ -19,9 +19,8 @@
 import java.util.concurrent.Executor;
 import java.util.concurrent.Executors;
 
-import de.greenrobot.event.EventBus;
-
 import android.util.Log;
+import de.greenrobot.event.EventBus;
 
 /**
  * Executes an {@link RunnableEx} using a thread pool. Thrown exceptions are propagated by posting failure events of any

File: EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java
Patch:
@@ -31,8 +31,9 @@ public void onCreate(Bundle savedInstanceState) {
         spinnerRun.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
 
             public void onItemSelected(AdapterView<?> adapter, View v, int pos, long lng) {
-                boolean hasEventCount = pos == 0;
-                findViewById(R.id.relativeLayoutForEvents).setVisibility(hasEventCount ? View.VISIBLE : View.GONE);
+                int eventsVisibility = pos == 0 ? View.VISIBLE : View.GONE;
+                findViewById(R.id.relativeLayoutForEvents).setVisibility(eventsVisibility);
+                findViewById(R.id.spinnerThread).setVisibility(eventsVisibility);
             }
 
             public void onNothingSelected(AdapterView<?> arg0) {

File: EventBus/src/de/greenrobot/event/SubscriberExceptionEvent.java
Patch:
@@ -16,8 +16,7 @@
 package de.greenrobot.event;
 
 /**
- * TODO Implement a consistent exception handling. One part of this could be posting this class as event when the
- * background thread or async poster step on an exception.
+ * This Event is posted by EventBus when an exception occurs inside a subscriber's event handling method.
  * 
  * @author Markus
  */

File: EventBusTest/src/de/greenrobot/event/test/EventBusBasicTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.greenbus.test;
+package de.greenrobot.event.test;
 
 import junit.framework.TestCase;
 import android.app.Activity;

File: EventBusTest/src/de/greenrobot/event/test/EventBusInheritanceTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.greenbus.test;
+package de.greenrobot.event.test;
 
 import junit.framework.TestCase;
 import de.greenrobot.event.EventBus;

File: EventBusTest/src/de/greenrobot/event/test/EventBusMainThreadTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.greenbus.test;
+package de.greenrobot.event.test;
 
 import java.util.ArrayList;
 import java.util.List;

File: EventBusTest/src/de/greenrobot/event/test/EventBusMultithreadedTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.greenrobot.greenbus.test;
+package de.greenrobot.event.test;
 
 import java.util.ArrayList;
 import java.util.List;

